
Robonaut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000640  0800b988  0800b988  0001b988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfc8  0800bfc8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfc8  0800bfc8  0001bfc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bfd0  0800bfd0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bfd0  0800bfd0  0001bfd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bfd4  0800bfd4  0001bfd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bfd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  200001e4  0800c1bc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  0800c1bc  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e54  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b68  00000000  00000000  00037068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00039bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003af40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d80  00000000  00000000  0003c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cae  00000000  00000000  00063f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f822e  00000000  00000000  0007cbde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174e0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067b8  00000000  00000000  00174e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0017b614  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0017b6e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b96c 	.word	0x0800b96c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800b96c 	.word	0x0800b96c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <BT_TransmitMsg>:

#include <string.h>
#include "main.h"

void BT_TransmitMsg(UART_HandleTypeDef *huart, unsigned char *msg_to_send)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	uint32_t len = strlen((char*)msg_to_send);
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f7ff f93a 	bl	8000210 <strlen>
 8000f9c:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t*)msg_to_send, len, 100);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	2364      	movs	r3, #100	; 0x64
 8000fa4:	6839      	ldr	r1, [r7, #0]
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f005 ffbb 	bl	8006f22 <HAL_UART_Transmit>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <LS_LED_Light>:
#include <stdbool.h>
#include <math.h>

// Az utolsó beadott érték mindig 33-nál nagyobb legyen!
void LS_LED_Light(SPI_HandleTypeDef *hspi, uint8_t *leds_to_light)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_on[4] = {0};
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
	uint8_t fb_leds_on_temp[4] = {0};
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
	for (int i=0; leds_to_light[i]<33; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fca:	e082      	b.n	80010d2 <LS_LED_Light+0x11e>
	{
		switch(leds_to_light[i]/8) {
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	08db      	lsrs	r3, r3, #3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d877      	bhi.n	80010cc <LS_LED_Light+0x118>
 8000fdc:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <LS_LED_Light+0x30>)
 8000fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe2:	bf00      	nop
 8000fe4:	08000ff5 	.word	0x08000ff5
 8000fe8:	0800102b 	.word	0x0800102b
 8000fec:	08001061 	.word	0x08001061
 8000ff0:	08001097 	.word	0x08001097
		case 0:
			fb_leds_on_temp[3] = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
 8000ffc:	e006      	b.n	800100c <LS_LED_Light+0x58>
				fb_leds_on_temp[3] <<= 1;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	3301      	adds	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	6a3a      	ldr	r2, [r7, #32]
 800101a:	429a      	cmp	r2, r3
 800101c:	dbef      	blt.n	8000ffe <LS_LED_Light+0x4a>
			}
			fb_leds_on[3] |= fb_leds_on_temp[3];
 800101e:	7cfa      	ldrb	r2, [r7, #19]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	4313      	orrs	r3, r2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	74fb      	strb	r3, [r7, #19]
			break;
 8001028:	e050      	b.n	80010cc <LS_LED_Light+0x118>
		case 1:
			fb_leds_on_temp[2] = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	e006      	b.n	8001042 <LS_LED_Light+0x8e>
				fb_leds_on_temp[2] <<= 1;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	3301      	adds	r3, #1
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbef      	blt.n	8001034 <LS_LED_Light+0x80>
			}
			fb_leds_on[2] |= fb_leds_on_temp[2];
 8001054:	7cba      	ldrb	r2, [r7, #18]
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	4313      	orrs	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	74bb      	strb	r3, [r7, #18]
			break;
 800105e:	e035      	b.n	80010cc <LS_LED_Light+0x118>
		case 2:
			fb_leds_on_temp[1] = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	e006      	b.n	8001078 <LS_LED_Light+0xc4>
				fb_leds_on_temp[1] <<= 1;
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	3301      	adds	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	429a      	cmp	r2, r3
 8001088:	dbef      	blt.n	800106a <LS_LED_Light+0xb6>
			}
			fb_leds_on[1] |= fb_leds_on_temp[1];
 800108a:	7c7a      	ldrb	r2, [r7, #17]
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	4313      	orrs	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	747b      	strb	r3, [r7, #17]
			break;
 8001094:	e01a      	b.n	80010cc <LS_LED_Light+0x118>
		case 3:
			fb_leds_on_temp[0] = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e006      	b.n	80010ae <LS_LED_Light+0xfa>
				fb_leds_on_temp[0] <<= 1;
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbef      	blt.n	80010a0 <LS_LED_Light+0xec>
			}
			fb_leds_on[0] |= fb_leds_on_temp[0];
 80010c0:	7c3a      	ldrb	r2, [r7, #16]
 80010c2:	7b3b      	ldrb	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	743b      	strb	r3, [r7, #16]
			break;
 80010ca:	bf00      	nop
	for (int i=0; leds_to_light[i]<33; i++)
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	3301      	adds	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b20      	cmp	r3, #32
 80010dc:	f67f af76 	bls.w	8000fcc <LS_LED_Light+0x18>
		}
	}
	LS_LED_Send(hspi, fb_leds_on);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f804 	bl	80010f4 <LS_LED_Send>
}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <LS_LED_Send>:

void LS_LED_Send(SPI_HandleTypeDef *hspi, uint8_t *leds_on)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 80010fe:	2364      	movs	r3, #100	; 0x64
 8001100:	2204      	movs	r2, #4
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f003 fdb2 	bl	8004c6e <HAL_SPI_Transmit>

	// Latch enable
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <LS_LED_Send+0x4c>)
 8001112:	f002 fd75 	bl	8003c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <LS_LED_Send+0x4c>)
 800111e:	f002 fd6f 	bl	8003c00 <HAL_GPIO_WritePin>

	//Output enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2104      	movs	r1, #4
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <LS_LED_Send+0x50>)
 8001128:	f002 fd6a 	bl	8003c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2104      	movs	r1, #4
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <LS_LED_Send+0x50>)
 8001132:	f002 fd65 	bl	8003c00 <HAL_GPIO_WritePin>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00

08001148 <LS_INF_Send>:

void LS_INF_Send(SPI_HandleTypeDef *hspi, uint8_t *infs_on)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, infs_on, 4, 100);
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	2204      	movs	r2, #4
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f003 fd88 	bl	8004c6e <HAL_SPI_Transmit>

	// Inf Latch enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <LS_INF_Send+0x50>)
 8001166:	f002 fd4b 	bl	8003c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <LS_INF_Send+0x50>)
 8001172:	f002 fd45 	bl	8003c00 <HAL_GPIO_WritePin>

	// Inf Output enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <LS_INF_Send+0x50>)
 800117e:	f002 fd3f 	bl	8003c00 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <LS_INF_Send+0x50>)
 800118a:	f002 fd39 	bl	8003c00 <HAL_GPIO_WritePin>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020000 	.word	0x40020000

0800119c <LS_ADC_ChipSelect>:
			  HAL_Delay(100);
		  }
}

void LS_ADC_ChipSelect(int CS)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	switch(CS) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d827      	bhi.n	80011fc <LS_ADC_ChipSelect+0x60>
 80011ac:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <LS_ADC_ChipSelect+0x18>)
 80011ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b2:	bf00      	nop
 80011b4:	080011c5 	.word	0x080011c5
 80011b8:	080011d3 	.word	0x080011d3
 80011bc:	080011e1 	.word	0x080011e1
 80011c0:	080011ef 	.word	0x080011ef
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ca:	481b      	ldr	r0, [pc, #108]	; (8001238 <LS_ADC_ChipSelect+0x9c>)
 80011cc:	f002 fd18 	bl	8003c00 <HAL_GPIO_WritePin>
		break;
 80011d0:	e02d      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d8:	4818      	ldr	r0, [pc, #96]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011da:	f002 fd11 	bl	8003c00 <HAL_GPIO_WritePin>
		break;
 80011de:	e026      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011e8:	f002 fd0a 	bl	8003c00 <HAL_GPIO_WritePin>
		break;
 80011ec:	e01f      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011f6:	f002 fd03 	bl	8003c00 <HAL_GPIO_WritePin>
		break;
 80011fa:	e018      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	default:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <LS_ADC_ChipSelect+0x9c>)
 8001204:	f002 fcfc 	bl	8003c00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 8001210:	f002 fcf6 	bl	8003c00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 800121c:	f002 fcf0 	bl	8003c00 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 8001228:	f002 fcea 	bl	8003c00 <HAL_GPIO_WritePin>
	}
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020800 	.word	0x40020800
 800123c:	40020400 	.word	0x40020400

08001240 <LS_Holavonal_favago>:
	sum -= 32*250;
	line = (double)weighted_sum/sum;
	return line;
}

float LS_Holavonal_favago(uint16_t *ADC_values, int prev_value, int* summ, int* MA_sum){
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
    int m = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    int sum = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
    float alpha = 0.1;
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <LS_Holavonal_favago+0xd8>)
 8001258:	613b      	str	r3, [r7, #16]
    *summ = 0;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
    for(int i=0; i<32; i++){
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e01c      	b.n	80012a0 <LS_Holavonal_favago+0x60>
        if (ADC_values[i] > 2500){
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4413      	add	r3, r2
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001274:	4293      	cmp	r3, r2
 8001276:	d910      	bls.n	800129a <LS_Holavonal_favago+0x5a>
        	*summ += ADC_values[i];
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	0052      	lsls	r2, r2, #1
 8001280:	68f9      	ldr	r1, [r7, #12]
 8001282:	440a      	add	r2, r1
 8001284:	8812      	ldrh	r2, [r2, #0]
 8001286:	441a      	add	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	601a      	str	r2, [r3, #0]
            sum += i;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	4413      	add	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
            m++;
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	3301      	adds	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<32; i++){
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b1f      	cmp	r3, #31
 80012a4:	dddf      	ble.n	8001266 <LS_Holavonal_favago+0x26>
        }
    }
    if(m == 0)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <LS_Holavonal_favago+0x78>
		return prev_value;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	e027      	b.n	8001308 <LS_Holavonal_favago+0xc8>
    *MA_sum = alpha * *summ + (1-alpha) * *MA_sum;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f0:	ee17 2a90 	vmov	r2, s15
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	601a      	str	r2, [r3, #0]
    return sum/m;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	3dcccccd 	.word	0x3dcccccd

0800131c <LineSensor_FrontAndBack>:
	}
}

void LineSensor_FrontAndBack(UART_HandleTypeDef *huart, SPI_HandleTypeDef *hspi_led, SPI_HandleTypeDef *hspi_sense_front,
		SPI_HandleTypeDef *hspi_sense_rear, uint16_t *ADC_values_front, uint16_t *ADC_values_rear)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b090      	sub	sp, #64	; 0x40
 8001320:	af02      	add	r7, sp, #8
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
	uint8_t leds_on[4];// = {1, 1, 1, 1};

	uint8_t ADC_inputs[] = {0, 8, 16, 24, 32, 40, 48, 56};
 800132a:	4a92      	ldr	r2, [pc, #584]	; (8001574 <LineSensor_FrontAndBack+0x258>)
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001334:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ADC_received_msg[2];

	//LS_INF_Send(&hspi3, leds_off);

	// Turn on first set of LEDs
	leds_on[0] = 1;leds_on[1] = 1;leds_on[2] = 1;leds_on[3] = 1;
 8001338:	2301      	movs	r3, #1
 800133a:	f887 3020 	strb.w	r3, [r7, #32]
 800133e:	2301      	movs	r3, #1
 8001340:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001344:	2301      	movs	r3, #1
 8001346:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800134a:	2301      	movs	r3, #1
 800134c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	LS_INF_Send(hspi_led, leds_on);
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	4619      	mov	r1, r3
 8001356:	68b8      	ldr	r0, [r7, #8]
 8001358:	f7ff fef6 	bl	8001148 <LS_INF_Send>
	HAL_Delay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f001 ff13 	bl	8003188 <HAL_Delay>
	// Retrieve data from first set of ADCs - Front
	for (int i=1; i<5; i++)
 8001362:	2301      	movs	r3, #1
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
 8001366:	e02a      	b.n	80013be <LineSensor_FrontAndBack+0xa2>
	{
	  LS_ADC_ChipSelect(i);
 8001368:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800136a:	f7ff ff17 	bl	800119c <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 800136e:	f107 0214 	add.w	r2, r7, #20
 8001372:	f107 0118 	add.w	r1, r7, #24
 8001376:	2364      	movs	r3, #100	; 0x64
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2302      	movs	r3, #2
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f003 fdb2 	bl	8004ee6 <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 8001382:	f107 0214 	add.w	r2, r7, #20
 8001386:	f107 0118 	add.w	r1, r7, #24
 800138a:	2364      	movs	r3, #100	; 0x64
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2302      	movs	r3, #2
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f003 fda8 	bl	8004ee6 <HAL_SPI_TransmitReceive>
	  ADC_values_front[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001396:	7d7b      	ldrb	r3, [r7, #21]
 8001398:	b21a      	sxth	r2, r3
 800139a:	7d3b      	ldrb	r3, [r7, #20]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b219      	sxth	r1, r3
 80013a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a6:	3b01      	subs	r3, #1
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013ac:	4413      	add	r3, r2
 80013ae:	b28a      	uxth	r2, r1
 80013b0:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fef2 	bl	800119c <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 80013b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ba:	3301      	adds	r3, #1
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
 80013be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	ddd1      	ble.n	8001368 <LineSensor_FrontAndBack+0x4c>
	}
	// Ez működjön, aztán lehet optimalizálni, hogy egy loopon belül kérjük be az adatokat mindettőtől
	// Retrieve data from first set of ADCs - Rear
	for (int i=1; i<5; i++)
 80013c4:	2301      	movs	r3, #1
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
 80013c8:	e02a      	b.n	8001420 <LineSensor_FrontAndBack+0x104>
	{
	  LS_ADC_ChipSelect(i);
 80013ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013cc:	f7ff fee6 	bl	800119c <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013d0:	f107 0214 	add.w	r2, r7, #20
 80013d4:	f107 0118 	add.w	r1, r7, #24
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2302      	movs	r3, #2
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f003 fd81 	bl	8004ee6 <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013e4:	f107 0214 	add.w	r2, r7, #20
 80013e8:	f107 0118 	add.w	r1, r7, #24
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2302      	movs	r3, #2
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f003 fd77 	bl	8004ee6 <HAL_SPI_TransmitReceive>
	  ADC_values_rear[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80013f8:	7d7b      	ldrb	r3, [r7, #21]
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	7d3b      	ldrb	r3, [r7, #20]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21b      	sxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b219      	sxth	r1, r3
 8001406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001408:	3b01      	subs	r3, #1
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800140e:	4413      	add	r3, r2
 8001410:	b28a      	uxth	r2, r1
 8001412:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fec1 	bl	800119c <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 800141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141c:	3301      	adds	r3, #1
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
 8001420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001422:	2b04      	cmp	r3, #4
 8001424:	ddd1      	ble.n	80013ca <LineSensor_FrontAndBack+0xae>
	}

	// Shift the LEDs by one
	for (int k=0; k<7; k++)
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142a:	e099      	b.n	8001560 <LineSensor_FrontAndBack+0x244>
	{
	  leds_on[0] <<= 1;
 800142c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f887 3020 	strb.w	r3, [r7, #32]
	  leds_on[1] <<= 1;
 8001438:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  leds_on[2] <<= 1;
 8001444:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  leds_on[3] <<= 1;
 8001450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  LS_INF_Send(hspi_led, leds_on);
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	4619      	mov	r1, r3
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f7ff fe70 	bl	8001148 <LS_INF_Send>
	  HAL_Delay(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f001 fe8d 	bl	8003188 <HAL_Delay>

	  //Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 800146e:	2301      	movs	r3, #1
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
 8001472:	e034      	b.n	80014de <LineSensor_FrontAndBack+0x1c2>
	  {
		  LS_ADC_ChipSelect(i);
 8001474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001476:	f7ff fe91 	bl	800119c <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 800147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147c:	3301      	adds	r3, #1
 800147e:	f107 0218 	add.w	r2, r7, #24
 8001482:	18d1      	adds	r1, r2, r3
 8001484:	f107 0214 	add.w	r2, r7, #20
 8001488:	2364      	movs	r3, #100	; 0x64
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2302      	movs	r3, #2
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f003 fd29 	bl	8004ee6 <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 8001494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001496:	3301      	adds	r3, #1
 8001498:	f107 0218 	add.w	r2, r7, #24
 800149c:	18d1      	adds	r1, r2, r3
 800149e:	f107 0214 	add.w	r2, r7, #20
 80014a2:	2364      	movs	r3, #100	; 0x64
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2302      	movs	r3, #2
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f003 fd1c 	bl	8004ee6 <HAL_SPI_TransmitReceive>
		  ADC_values_front[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80014ae:	7d7b      	ldrb	r3, [r7, #21]
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	7d3b      	ldrb	r3, [r7, #20]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b219      	sxth	r1, r3
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	3b01      	subs	r3, #1
 80014c0:	00da      	lsls	r2, r3, #3
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	4413      	add	r3, r2
 80014c6:	3301      	adds	r3, #1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014cc:	4413      	add	r3, r2
 80014ce:	b28a      	uxth	r2, r1
 80014d0:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fe62 	bl	800119c <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	3301      	adds	r3, #1
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	ddc7      	ble.n	8001474 <LineSensor_FrontAndBack+0x158>
	  }

	  // Szintén lehet optimalizálni
	  // Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 80014e4:	2301      	movs	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
 80014e8:	e034      	b.n	8001554 <LineSensor_FrontAndBack+0x238>
	  {
		  LS_ADC_ChipSelect(i);
 80014ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014ec:	f7ff fe56 	bl	800119c <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	3301      	adds	r3, #1
 80014f4:	f107 0218 	add.w	r2, r7, #24
 80014f8:	18d1      	adds	r1, r2, r3
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	2364      	movs	r3, #100	; 0x64
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2302      	movs	r3, #2
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f003 fcee 	bl	8004ee6 <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	3301      	adds	r3, #1
 800150e:	f107 0218 	add.w	r2, r7, #24
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	f107 0214 	add.w	r2, r7, #20
 8001518:	2364      	movs	r3, #100	; 0x64
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2302      	movs	r3, #2
 800151e:	6838      	ldr	r0, [r7, #0]
 8001520:	f003 fce1 	bl	8004ee6 <HAL_SPI_TransmitReceive>
		  ADC_values_rear[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001524:	7d7b      	ldrb	r3, [r7, #21]
 8001526:	b21a      	sxth	r2, r3
 8001528:	7d3b      	ldrb	r3, [r7, #20]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b219      	sxth	r1, r3
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	3b01      	subs	r3, #1
 8001536:	00da      	lsls	r2, r3, #3
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	4413      	add	r3, r2
 800153c:	3301      	adds	r3, #1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001542:	4413      	add	r3, r2
 8001544:	b28a      	uxth	r2, r1
 8001546:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fe27 	bl	800119c <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	3301      	adds	r3, #1
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	2b04      	cmp	r3, #4
 8001558:	ddc7      	ble.n	80014ea <LineSensor_FrontAndBack+0x1ce>
	for (int k=0; k<7; k++)
 800155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155c:	3301      	adds	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	2b06      	cmp	r3, #6
 8001564:	f77f af62 	ble.w	800142c <LineSensor_FrontAndBack+0x110>
//			line_pos[0] = ADC_values_rear[i];
//	}

//	unsigned char BT_send_msg_buff[200];
//	LS_BT_SendData(huart, BT_send_msg_buff, ADC_values_rear);
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3738      	adds	r7, #56	; 0x38
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	0800b990 	.word	0x0800b990

08001578 <LS_feedback_all>:

void LS_feedback_all(SPI_HandleTypeDef *hspi_led, uint16_t *ADC_values)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
 8001582:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <LS_feedback_all+0x7c>)
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800158c:	6018      	str	r0, [r3, #0]
 800158e:	3304      	adds	r3, #4
 8001590:	7019      	strb	r1, [r3, #0]
	uint8_t leds_off[4] = {0};
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	e016      	b.n	80015ce <LS_feedback_all+0x56>
			if (ADC_values[i]>2500){
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d90a      	bls.n	80015c8 <LS_feedback_all+0x50>
				fb_leds_to_light[j] = i;
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	b2d9      	uxtb	r1, r3
 80015b6:	f107 0210 	add.w	r2, r7, #16
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	460a      	mov	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
				j++;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	3301      	adds	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b1f      	cmp	r3, #31
 80015d2:	dde5      	ble.n	80015a0 <LS_feedback_all+0x28>
			}
		}

	LS_LED_Send(hspi_led, leds_off);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fd8a 	bl	80010f4 <LS_LED_Send>
	LS_LED_Light(hspi_led, fb_leds_to_light);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fce4 	bl	8000fb4 <LS_LED_Light>
}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	0800b998 	.word	0x0800b998

080015f8 <LS_delta_angle>:
	}
	LS_LED_Send(hspi_led, leds_off);
	LS_LED_Light(hspi_led, fb_leds_to_light);
}

float LS_delta_angle(float p1, float p2){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001602:	edc7 0a00 	vstr	s1, [r7]
    float delta = atan((p2-(31-p1))*6.5/460);
 8001606:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800160a:	edd7 7a01 	vldr	s15, [r7, #4]
 800160e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001612:	ed97 7a00 	vldr	s14, [r7]
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	ee17 0a90 	vmov	r0, s15
 800161e:	f7fe ffb3 	bl	8000588 <__aeabi_f2d>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <LS_delta_angle+0x88>)
 8001628:	f7ff f806 	bl	8000638 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	a310      	add	r3, pc, #64	; (adr r3, 8001678 <LS_delta_angle+0x80>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff f927 	bl	800088c <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ec43 2b17 	vmov	d7, r2, r3
 8001646:	eeb0 0a47 	vmov.f32	s0, s14
 800164a:	eef0 0a67 	vmov.f32	s1, s15
 800164e:	f008 feef 	bl	800a430 <atan>
 8001652:	ec53 2b10 	vmov	r2, r3, d0
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fac5 	bl	8000be8 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	60fb      	str	r3, [r7, #12]
    return delta;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	ee07 3a90 	vmov	s15, r3
}
 8001668:	eeb0 0a67 	vmov.f32	s0, s15
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	00000000 	.word	0x00000000
 800167c:	407cc000 	.word	0x407cc000
 8001680:	401a0000 	.word	0x401a0000
 8001684:	00000000 	.word	0x00000000

08001688 <LS_p>:



float LS_p(float f1){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0a01 	vstr	s0, [r7, #4]
    float p = (15.5-f1)*0.0065;//m-ben adja vissza a p-t
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ff78 	bl	8000588 <__aeabi_f2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	f04f 0000 	mov.w	r0, #0
 80016a0:	490f      	ldr	r1, [pc, #60]	; (80016e0 <LS_p+0x58>)
 80016a2:	f7fe fe11 	bl	80002c8 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	a30a      	add	r3, pc, #40	; (adr r3, 80016d8 <LS_p+0x50>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe ffc0 	bl	8000638 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa92 	bl	8000be8 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	60fb      	str	r3, [r7, #12]
    return p;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	ee07 3a90 	vmov	s15, r3
}
 80016ce:	eeb0 0a67 	vmov.f32	s0, s15
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	76c8b439 	.word	0x76c8b439
 80016dc:	3f7a9fbe 	.word	0x3f7a9fbe
 80016e0:	402f0000 	.word	0x402f0000

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0a8      	sub	sp, #160	; 0xa0
 80016e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ea:	f001 fcdb 	bl	80030a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ee:	f000 f8f9 	bl	80018e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f2:	f000 fdc3 	bl	800227c <MX_GPIO_Init>
  MX_I2C1_Init();
 80016f6:	f000 f9b9 	bl	8001a6c <MX_I2C1_Init>
  MX_I2C3_Init();
 80016fa:	f000 fa13 	bl	8001b24 <MX_I2C3_Init>
  MX_SPI1_Init();
 80016fe:	f000 fa3f 	bl	8001b80 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001702:	f000 fa73 	bl	8001bec <MX_SPI2_Init>
  MX_SPI3_Init();
 8001706:	f000 faa7 	bl	8001c58 <MX_SPI3_Init>
  MX_ADC1_Init();
 800170a:	f000 f95d 	bl	80019c8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800170e:	f000 fadb 	bl	8001cc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001712:	f000 fb59 	bl	8001dc8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001716:	f000 fbd1 	bl	8001ebc <MX_TIM4_Init>
  MX_TIM13_Init();
 800171a:	f000 fd0d 	bl	8002138 <MX_TIM13_Init>
  MX_TIM5_Init();
 800171e:	f000 fc5f 	bl	8001fe0 <MX_TIM5_Init>
  MX_I2C2_Init();
 8001722:	f000 f9d1 	bl	8001ac8 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001726:	f000 fd55 	bl	80021d4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800172a:	f000 fd7d 	bl	8002228 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 800172e:	f000 fccd 	bl	80020cc <MX_TIM7_Init>
//  HAL_Delay(2); // 2ms reset time
//  HAL_GPIO_WritePin(XSHUT1_GPIO_Port, XSHUT1_Pin, GPIO_PIN_RESET);
//  HAL_Delay(2); // 2ms reset time
//
  // set ToF1
  HAL_GPIO_WritePin(ToF_XSDN_36_GPIO_Port, ToF_XSDN_36_Pin, GPIO_PIN_SET);
 8001732:	2201      	movs	r2, #1
 8001734:	2101      	movs	r1, #1
 8001736:	4859      	ldr	r0, [pc, #356]	; (800189c <main+0x1b8>)
 8001738:	f002 fa62 	bl	8003c00 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800173c:	2002      	movs	r0, #2
 800173e:	f001 fd23 	bl	8003188 <HAL_Delay>

  //unsigned char ADC_value_string[10];
  //uint8_t leds_on[4];// = {1, 1, 1, 1};
  //uint8_t fb_leds_on[4] = {0};
  //uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
  uint16_t ADC_values_front[32] = {0};
 8001742:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001746:	2240      	movs	r2, #64	; 0x40
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f005 ff90 	bl	8007670 <memset>
  uint16_t ADC_values_rear[32] = {0};
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	2240      	movs	r2, #64	; 0x40
 8001756:	2100      	movs	r1, #0
 8001758:	4618      	mov	r0, r3
 800175a:	f005 ff89 	bl	8007670 <memset>
  int pwm_val;
//  enum circuit_section circuit_Section;
//  circuit_Section = Fast_section;
  //LS_INF_Send(&hspi3, leds_off);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Dead man switch PWM input
 800175e:	2100      	movs	r1, #0
 8001760:	484f      	ldr	r0, [pc, #316]	; (80018a0 <main+0x1bc>)
 8001762:	f004 f93b 	bl	80059dc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);    // Dead man switch PWM input
 8001766:	2104      	movs	r1, #4
 8001768:	484d      	ldr	r0, [pc, #308]	; (80018a0 <main+0x1bc>)
 800176a:	f004 f85b 	bl	8005824 <HAL_TIM_IC_Start>

  // kb. 3 másodpercenkétn előidéz egy interruptot
//  HAL_TIM_Base_Start_IT(&htim7);

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800176e:	2100      	movs	r1, #0
 8001770:	484c      	ldr	r0, [pc, #304]	; (80018a4 <main+0x1c0>)
 8001772:	f003 ff3f 	bl	80055f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001776:	2104      	movs	r1, #4
 8001778:	484b      	ldr	r0, [pc, #300]	; (80018a8 <main+0x1c4>)
 800177a:	f003 ff3b 	bl	80055f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800177e:	2100      	movs	r1, #0
 8001780:	484a      	ldr	r0, [pc, #296]	; (80018ac <main+0x1c8>)
 8001782:	f003 ff37 	bl	80055f4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <main+0x1cc>)
 8001794:	4a47      	ldr	r2, [pc, #284]	; (80018b4 <main+0x1d0>)
 8001796:	4948      	ldr	r1, [pc, #288]	; (80018b8 <main+0x1d4>)
 8001798:	4848      	ldr	r0, [pc, #288]	; (80018bc <main+0x1d8>)
 800179a:	f7ff fdbf 	bl	800131c <LineSensor_FrontAndBack>
	  line_pos[0] = LS_Holavonal_favago(ADC_values_front, line_pos[0], &summ, &MA_sum_front);
 800179e:	edd7 7a00 	vldr	s15, [r7]
 80017a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a6:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80017aa:	4b45      	ldr	r3, [pc, #276]	; (80018c0 <main+0x1dc>)
 80017ac:	4a45      	ldr	r2, [pc, #276]	; (80018c4 <main+0x1e0>)
 80017ae:	ee17 1a90 	vmov	r1, s15
 80017b2:	f7ff fd45 	bl	8001240 <LS_Holavonal_favago>
 80017b6:	eef0 7a40 	vmov.f32	s15, s0
 80017ba:	edc7 7a00 	vstr	s15, [r7]
	  line_pos[1] = LS_Holavonal_favago(ADC_values_rear, line_pos[1], &summ2, &MA_sum_rear);
 80017be:	edd7 7a01 	vldr	s15, [r7, #4]
 80017c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c6:	f107 0008 	add.w	r0, r7, #8
 80017ca:	4b3f      	ldr	r3, [pc, #252]	; (80018c8 <main+0x1e4>)
 80017cc:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <main+0x1e8>)
 80017ce:	ee17 1a90 	vmov	r1, s15
 80017d2:	f7ff fd35 	bl	8001240 <LS_Holavonal_favago>
 80017d6:	eef0 7a40 	vmov.f32	s15, s0
 80017da:	edc7 7a01 	vstr	s15, [r7, #4]
	  LS_feedback_all(&hspi3, ADC_values_front);
 80017de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017e2:	4619      	mov	r1, r3
 80017e4:	4834      	ldr	r0, [pc, #208]	; (80018b8 <main+0x1d4>)
 80017e6:	f7ff fec7 	bl	8001578 <LS_feedback_all>
//	  //LS_feedback_led(&hspi3, line_pos, feedback_rear);

	  delta = LS_delta_angle(line_pos[0], line_pos[1]);
 80017ea:	edd7 7a00 	vldr	s15, [r7]
 80017ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f2:	eef0 0a47 	vmov.f32	s1, s14
 80017f6:	eeb0 0a67 	vmov.f32	s0, s15
 80017fa:	f7ff fefd 	bl	80015f8 <LS_delta_angle>
 80017fe:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	  p = LS_p(line_pos[0]);
 8001802:	edd7 7a00 	vldr	s15, [r7]
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	f7ff ff3d 	bl	8001688 <LS_p>
 800180e:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
	  str_angle = SteeringAngle(p, delta);
 8001812:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 8001816:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 800181a:	f000 ff05 	bl	8002628 <SteeringAngle>
 800181e:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c

	  pwm_val = MotorDrive(&htim4, duty_motor);
 8001822:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <main+0x1ec>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4619      	mov	r1, r3
 8001828:	4820      	ldr	r0, [pc, #128]	; (80018ac <main+0x1c8>)
 800182a:	f000 fe7e 	bl	800252a <MotorDrive>
 800182e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  ServoPosition(&htim5, str_angle);
 8001832:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001836:	f7fe fea7 	bl	8000588 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	ec43 2b10 	vmov	d0, r2, r3
 8001842:	4818      	ldr	r0, [pc, #96]	; (80018a4 <main+0x1c0>)
 8001844:	f000 fe8c 	bl	8002560 <ServoPosition>
	  if(duty_MA>9.5){
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <main+0x1f0>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8001852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185a:	dd06      	ble.n	800186a <main+0x186>
		  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001862:	481d      	ldr	r0, [pc, #116]	; (80018d8 <main+0x1f4>)
 8001864:	f002 f9cc 	bl	8003c00 <HAL_GPIO_WritePin>
 8001868:	e005      	b.n	8001876 <main+0x192>
		  }
	  else
		  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001870:	4819      	ldr	r0, [pc, #100]	; (80018d8 <main+0x1f4>)
 8001872:	f002 f9c5 	bl	8003c00 <HAL_GPIO_WritePin>
	  sprintf((char*)BT_send_msg_buff, "steering angle: %f \n\r", str_angle);
 8001876:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800187a:	f7fe fe85 	bl	8000588 <__aeabi_f2d>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4916      	ldr	r1, [pc, #88]	; (80018dc <main+0x1f8>)
 8001884:	4816      	ldr	r0, [pc, #88]	; (80018e0 <main+0x1fc>)
 8001886:	f006 fb65 	bl	8007f54 <siprintf>
	  BT_TransmitMsg(&huart2, BT_send_msg_buff);
 800188a:	4915      	ldr	r1, [pc, #84]	; (80018e0 <main+0x1fc>)
 800188c:	480b      	ldr	r0, [pc, #44]	; (80018bc <main+0x1d8>)
 800188e:	f7ff fb7d 	bl	8000f8c <BT_TransmitMsg>
	  HAL_Delay(1);
 8001892:	2001      	movs	r0, #1
 8001894:	f001 fc78 	bl	8003188 <HAL_Delay>
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 8001898:	e775      	b.n	8001786 <main+0xa2>
 800189a:	bf00      	nop
 800189c:	40020400 	.word	0x40020400
 80018a0:	2000044c 	.word	0x2000044c
 80018a4:	20000524 	.word	0x20000524
 80018a8:	20000494 	.word	0x20000494
 80018ac:	200004dc 	.word	0x200004dc
 80018b0:	2000039c 	.word	0x2000039c
 80018b4:	20000344 	.word	0x20000344
 80018b8:	200003f4 	.word	0x200003f4
 80018bc:	200005fc 	.word	0x200005fc
 80018c0:	2000074c 	.word	0x2000074c
 80018c4:	20000754 	.word	0x20000754
 80018c8:	20000750 	.word	0x20000750
 80018cc:	20000758 	.word	0x20000758
 80018d0:	20000004 	.word	0x20000004
 80018d4:	2000076c 	.word	0x2000076c
 80018d8:	40020000 	.word	0x40020000
 80018dc:	0800b9a0 	.word	0x0800b9a0
 80018e0:	20000684 	.word	0x20000684

080018e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b094      	sub	sp, #80	; 0x50
 80018e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	2234      	movs	r2, #52	; 0x34
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f005 febc 	bl	8007670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <SystemClock_Config+0xdc>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a2b      	ldr	r2, [pc, #172]	; (80019c0 <SystemClock_Config+0xdc>)
 8001912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
 8001918:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <SystemClock_Config+0xdc>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001924:	2300      	movs	r3, #0
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <SystemClock_Config+0xe0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <SystemClock_Config+0xe0>)
 800192e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <SystemClock_Config+0xe0>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001940:	2301      	movs	r3, #1
 8001942:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001944:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001948:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800194a:	2302      	movs	r3, #2
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800194e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001952:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001954:	2304      	movs	r3, #4
 8001956:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001958:	23b4      	movs	r3, #180	; 0xb4
 800195a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800195c:	2302      	movs	r3, #2
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001960:	2302      	movs	r3, #2
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001964:	2302      	movs	r3, #2
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001968:	f107 031c 	add.w	r3, r7, #28
 800196c:	4618      	mov	r0, r3
 800196e:	f002 fe57 	bl	8004620 <HAL_RCC_OscConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001978:	f000 fdd2 	bl	8002520 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800197c:	f002 fab6 	bl	8003eec <HAL_PWREx_EnableOverDrive>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001986:	f000 fdcb 	bl	8002520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198a:	230f      	movs	r3, #15
 800198c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198e:	2302      	movs	r3, #2
 8001990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001996:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800199a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019a2:	f107 0308 	add.w	r3, r7, #8
 80019a6:	2105      	movs	r1, #5
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 faef 	bl	8003f8c <HAL_RCC_ClockConfig>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80019b4:	f000 fdb4 	bl	8002520 <Error_Handler>
  }
}
 80019b8:	bf00      	nop
 80019ba:	3750      	adds	r7, #80	; 0x50
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40007000 	.word	0x40007000

080019c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ce:	463b      	mov	r3, r7
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <MX_ADC1_Init+0x98>)
 80019dc:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <MX_ADC1_Init+0x9c>)
 80019de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019e0:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <MX_ADC1_Init+0x98>)
 80019e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_ADC1_Init+0x98>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <MX_ADC1_Init+0x98>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <MX_ADC1_Init+0x98>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <MX_ADC1_Init+0x98>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <MX_ADC1_Init+0x98>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <MX_ADC1_Init+0x98>)
 8001a0a:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <MX_ADC1_Init+0xa0>)
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <MX_ADC1_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <MX_ADC1_Init+0x98>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <MX_ADC1_Init+0x98>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <MX_ADC1_Init+0x98>)
 8001a24:	2201      	movs	r2, #1
 8001a26:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a28:	480d      	ldr	r0, [pc, #52]	; (8001a60 <MX_ADC1_Init+0x98>)
 8001a2a:	f001 fbd1 	bl	80031d0 <HAL_ADC_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a34:	f000 fd74 	bl	8002520 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a44:	463b      	mov	r3, r7
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_ADC1_Init+0x98>)
 8001a4a:	f001 fc05 	bl	8003258 <HAL_ADC_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a54:	f000 fd64 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000200 	.word	0x20000200
 8001a64:	40012000 	.word	0x40012000
 8001a68:	0f000001 	.word	0x0f000001

08001a6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <MX_I2C1_Init+0x50>)
 8001a72:	4a13      	ldr	r2, [pc, #76]	; (8001ac0 <MX_I2C1_Init+0x54>)
 8001a74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_I2C1_Init+0x50>)
 8001a78:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <MX_I2C1_Init+0x58>)
 8001a7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_I2C1_Init+0x50>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_I2C1_Init+0x50>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_I2C1_Init+0x50>)
 8001a8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a8e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <MX_I2C1_Init+0x50>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_I2C1_Init+0x50>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <MX_I2C1_Init+0x50>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_I2C1_Init+0x50>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MX_I2C1_Init+0x50>)
 8001aaa:	f002 f8db 	bl	8003c64 <HAL_I2C_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ab4:	f000 fd34 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	20000248 	.word	0x20000248
 8001ac0:	40005400 	.word	0x40005400
 8001ac4:	000186a0 	.word	0x000186a0

08001ac8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <MX_I2C2_Init+0x50>)
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <MX_I2C2_Init+0x54>)
 8001ad0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <MX_I2C2_Init+0x50>)
 8001ad4:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <MX_I2C2_Init+0x58>)
 8001ad6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <MX_I2C2_Init+0x50>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <MX_I2C2_Init+0x50>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <MX_I2C2_Init+0x50>)
 8001ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <MX_I2C2_Init+0x50>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <MX_I2C2_Init+0x50>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <MX_I2C2_Init+0x50>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <MX_I2C2_Init+0x50>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b04:	4804      	ldr	r0, [pc, #16]	; (8001b18 <MX_I2C2_Init+0x50>)
 8001b06:	f002 f8ad 	bl	8003c64 <HAL_I2C_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b10:	f000 fd06 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	2000029c 	.word	0x2000029c
 8001b1c:	40005800 	.word	0x40005800
 8001b20:	000186a0 	.word	0x000186a0

08001b24 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <MX_I2C3_Init+0x50>)
 8001b2a:	4a13      	ldr	r2, [pc, #76]	; (8001b78 <MX_I2C3_Init+0x54>)
 8001b2c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_I2C3_Init+0x50>)
 8001b30:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <MX_I2C3_Init+0x58>)
 8001b32:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <MX_I2C3_Init+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_I2C3_Init+0x50>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_I2C3_Init+0x50>)
 8001b42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b46:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <MX_I2C3_Init+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_I2C3_Init+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b54:	4b07      	ldr	r3, [pc, #28]	; (8001b74 <MX_I2C3_Init+0x50>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_I2C3_Init+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <MX_I2C3_Init+0x50>)
 8001b62:	f002 f87f 	bl	8003c64 <HAL_I2C_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b6c:	f000 fcd8 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200002f0 	.word	0x200002f0
 8001b78:	40005c00 	.word	0x40005c00
 8001b7c:	000186a0 	.word	0x000186a0

08001b80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b84:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001b86:	4a18      	ldr	r2, [pc, #96]	; (8001be8 <MX_SPI1_Init+0x68>)
 8001b88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001b8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b92:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001bac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001bb4:	2228      	movs	r2, #40	; 0x28
 8001bb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001bcc:	220a      	movs	r2, #10
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bd0:	4804      	ldr	r0, [pc, #16]	; (8001be4 <MX_SPI1_Init+0x64>)
 8001bd2:	f002 ffc3 	bl	8004b5c <HAL_SPI_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bdc:	f000 fca0 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000344 	.word	0x20000344
 8001be8:	40013000 	.word	0x40013000

08001bec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001bf2:	4a18      	ldr	r2, [pc, #96]	; (8001c54 <MX_SPI2_Init+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001bf8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c1e:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001c20:	2220      	movs	r2, #32
 8001c22:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c30:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001c38:	220a      	movs	r2, #10
 8001c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MX_SPI2_Init+0x64>)
 8001c3e:	f002 ff8d 	bl	8004b5c <HAL_SPI_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c48:	f000 fc6a 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	2000039c 	.word	0x2000039c
 8001c54:	40003800 	.word	0x40003800

08001c58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001c5e:	4a19      	ldr	r2, [pc, #100]	; (8001cc4 <MX_SPI3_Init+0x6c>)
 8001c60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001c64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001c6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c70:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c72:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001c8e:	2210      	movs	r2, #16
 8001c90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001ca6:	220a      	movs	r2, #10
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <MX_SPI3_Init+0x68>)
 8001cac:	f002 ff56 	bl	8004b5c <HAL_SPI_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001cb6:	f000 fc33 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200003f4 	.word	0x200003f4
 8001cc4:	40003c00 	.word	0x40003c00

08001cc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001cce:	f107 031c 	add.w	r3, r7, #28
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	609a      	str	r2, [r3, #8]
 8001cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cec:	1d3b      	adds	r3, r7, #4
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cf4:	4b33      	ldr	r3, [pc, #204]	; (8001dc4 <MX_TIM2_Init+0xfc>)
 8001cf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8001cfc:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <MX_TIM2_Init+0xfc>)
 8001cfe:	2208      	movs	r2, #8
 8001d00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d02:	4b30      	ldr	r3, [pc, #192]	; (8001dc4 <MX_TIM2_Init+0xfc>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d08:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <MX_TIM2_Init+0xfc>)
 8001d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d10:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <MX_TIM2_Init+0xfc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <MX_TIM2_Init+0xfc>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d1c:	4829      	ldr	r0, [pc, #164]	; (8001dc4 <MX_TIM2_Init+0xfc>)
 8001d1e:	f003 fd31 	bl	8005784 <HAL_TIM_IC_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001d28:	f000 fbfa 	bl	8002520 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d2c:	2304      	movs	r3, #4
 8001d2e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001d30:	2350      	movs	r3, #80	; 0x50
 8001d32:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	481f      	ldr	r0, [pc, #124]	; (8001dc4 <MX_TIM2_Init+0xfc>)
 8001d48:	f004 fa9d 	bl	8006286 <HAL_TIM_SlaveConfigSynchro>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d52:	f000 fbe5 	bl	8002520 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4815      	ldr	r0, [pc, #84]	; (8001dc4 <MX_TIM2_Init+0xfc>)
 8001d70:	f004 f864 	bl	8005e3c <HAL_TIM_IC_ConfigChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001d7a:	f000 fbd1 	bl	8002520 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001d82:	2302      	movs	r3, #2
 8001d84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d86:	f107 030c 	add.w	r3, r7, #12
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <MX_TIM2_Init+0xfc>)
 8001d90:	f004 f854 	bl	8005e3c <HAL_TIM_IC_ConfigChannel>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001d9a:	f000 fbc1 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <MX_TIM2_Init+0xfc>)
 8001dac:	f004 ffdc 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001db6:	f000 fbb3 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	3730      	adds	r7, #48	; 0x30
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000044c 	.word	0x2000044c

08001dc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08e      	sub	sp, #56	; 0x38
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ddc:	f107 0320 	add.w	r3, r7, #32
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
 8001df4:	615a      	str	r2, [r3, #20]
 8001df6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001df8:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001dfa:	4a2f      	ldr	r2, [pc, #188]	; (8001eb8 <MX_TIM3_Init+0xf0>)
 8001dfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001e06:	2220      	movs	r2, #32
 8001e08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001e0c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e18:	4b26      	ldr	r3, [pc, #152]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e1e:	4825      	ldr	r0, [pc, #148]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001e20:	f003 face 	bl	80053c0 <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e2a:	f000 fb79 	bl	8002520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e32:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	481e      	ldr	r0, [pc, #120]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001e3c:	f004 f95c 	bl	80060f8 <HAL_TIM_ConfigClockSource>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e46:	f000 fb6b 	bl	8002520 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e4a:	481a      	ldr	r0, [pc, #104]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001e4c:	f003 fb78 	bl	8005540 <HAL_TIM_PWM_Init>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e56:	f000 fb63 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e62:	f107 0320 	add.w	r3, r7, #32
 8001e66:	4619      	mov	r1, r3
 8001e68:	4812      	ldr	r0, [pc, #72]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001e6a:	f004 ff7d 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e74:	f000 fb54 	bl	8002520 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e78:	2360      	movs	r3, #96	; 0x60
 8001e7a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001e7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001e82:	2302      	movs	r3, #2
 8001e84:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4808      	ldr	r0, [pc, #32]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001e92:	f004 f86f 	bl	8005f74 <HAL_TIM_PWM_ConfigChannel>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e9c:	f000 fb40 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001ea0:	4804      	ldr	r0, [pc, #16]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001ea2:	f003 fadd 	bl	8005460 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ea6:	4803      	ldr	r0, [pc, #12]	; (8001eb4 <MX_TIM3_Init+0xec>)
 8001ea8:	f000 ff44 	bl	8002d34 <HAL_TIM_MspPostInit>

}
 8001eac:	bf00      	nop
 8001eae:	3738      	adds	r7, #56	; 0x38
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000494 	.word	0x20000494
 8001eb8:	40000400 	.word	0x40000400

08001ebc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b092      	sub	sp, #72	; 0x48
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
 8001ede:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eea:	463b      	mov	r3, r7
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
 8001ef8:	615a      	str	r2, [r3, #20]
 8001efa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001efc:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001efe:	4a37      	ldr	r2, [pc, #220]	; (8001fdc <MX_TIM4_Init+0x120>)
 8001f00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f02:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001f08:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8001f0e:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001f10:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f16:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f22:	482d      	ldr	r0, [pc, #180]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001f24:	f003 fa4c 	bl	80053c0 <HAL_TIM_Base_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001f2e:	f000 faf7 	bl	8002520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f36:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4826      	ldr	r0, [pc, #152]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001f40:	f004 f8da 	bl	80060f8 <HAL_TIM_ConfigClockSource>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f4a:	f000 fae9 	bl	8002520 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f4e:	4822      	ldr	r0, [pc, #136]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001f50:	f003 faf6 	bl	8005540 <HAL_TIM_PWM_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001f5a:	f000 fae1 	bl	8002520 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001f5e:	2306      	movs	r3, #6
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001f62:	2320      	movs	r3, #32
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	481a      	ldr	r0, [pc, #104]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001f6e:	f004 f98a 	bl	8006286 <HAL_TIM_SlaveConfigSynchro>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001f78:	f000 fad2 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4813      	ldr	r0, [pc, #76]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001f8c:	f004 feec 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001f96:	f000 fac3 	bl	8002520 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f9a:	2360      	movs	r3, #96	; 0x60
 8001f9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001f9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001fa2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fac:	463b      	mov	r3, r7
 8001fae:	2200      	movs	r2, #0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001fb4:	f003 ffde 	bl	8005f74 <HAL_TIM_PWM_ConfigChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8001fbe:	f000 faaf 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001fc4:	f003 fa4c 	bl	8005460 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fc8:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <MX_TIM4_Init+0x11c>)
 8001fca:	f000 feb3 	bl	8002d34 <HAL_TIM_MspPostInit>

}
 8001fce:	bf00      	nop
 8001fd0:	3748      	adds	r7, #72	; 0x48
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200004dc 	.word	0x200004dc
 8001fdc:	40000800 	.word	0x40000800

08001fe0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08e      	sub	sp, #56	; 0x38
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff4:	f107 0320 	add.w	r3, r7, #32
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
 800200c:	615a      	str	r2, [r3, #20]
 800200e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002010:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <MX_TIM5_Init+0xe4>)
 8002012:	4a2d      	ldr	r2, [pc, #180]	; (80020c8 <MX_TIM5_Init+0xe8>)
 8002014:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 30-1;
 8002016:	4b2b      	ldr	r3, [pc, #172]	; (80020c4 <MX_TIM5_Init+0xe4>)
 8002018:	221d      	movs	r2, #29
 800201a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800201c:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <MX_TIM5_Init+0xe4>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000-1;
 8002022:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <MX_TIM5_Init+0xe4>)
 8002024:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002028:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <MX_TIM5_Init+0xe4>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <MX_TIM5_Init+0xe4>)
 8002032:	2200      	movs	r2, #0
 8002034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002036:	4823      	ldr	r0, [pc, #140]	; (80020c4 <MX_TIM5_Init+0xe4>)
 8002038:	f003 f9c2 	bl	80053c0 <HAL_TIM_Base_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002042:	f000 fa6d 	bl	8002520 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800204a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800204c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002050:	4619      	mov	r1, r3
 8002052:	481c      	ldr	r0, [pc, #112]	; (80020c4 <MX_TIM5_Init+0xe4>)
 8002054:	f004 f850 	bl	80060f8 <HAL_TIM_ConfigClockSource>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800205e:	f000 fa5f 	bl	8002520 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002062:	4818      	ldr	r0, [pc, #96]	; (80020c4 <MX_TIM5_Init+0xe4>)
 8002064:	f003 fa6c 	bl	8005540 <HAL_TIM_PWM_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800206e:	f000 fa57 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800207a:	f107 0320 	add.w	r3, r7, #32
 800207e:	4619      	mov	r1, r3
 8002080:	4810      	ldr	r0, [pc, #64]	; (80020c4 <MX_TIM5_Init+0xe4>)
 8002082:	f004 fe71 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800208c:	f000 fa48 	bl	8002520 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002090:	2360      	movs	r3, #96	; 0x60
 8002092:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2200      	movs	r2, #0
 80020a4:	4619      	mov	r1, r3
 80020a6:	4807      	ldr	r0, [pc, #28]	; (80020c4 <MX_TIM5_Init+0xe4>)
 80020a8:	f003 ff64 	bl	8005f74 <HAL_TIM_PWM_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80020b2:	f000 fa35 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80020b6:	4803      	ldr	r0, [pc, #12]	; (80020c4 <MX_TIM5_Init+0xe4>)
 80020b8:	f000 fe3c 	bl	8002d34 <HAL_TIM_MspPostInit>

}
 80020bc:	bf00      	nop
 80020be:	3738      	adds	r7, #56	; 0x38
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20000524 	.word	0x20000524
 80020c8:	40000c00 	.word	0x40000c00

080020cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d2:	463b      	mov	r3, r7
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <MX_TIM7_Init+0x64>)
 80020dc:	4a15      	ldr	r2, [pc, #84]	; (8002134 <MX_TIM7_Init+0x68>)
 80020de:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <MX_TIM7_Init+0x64>)
 80020e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80020e6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <MX_TIM7_Init+0x64>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 30000-1;
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <MX_TIM7_Init+0x64>)
 80020f0:	f247 522f 	movw	r2, #29999	; 0x752f
 80020f4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <MX_TIM7_Init+0x64>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020fc:	480c      	ldr	r0, [pc, #48]	; (8002130 <MX_TIM7_Init+0x64>)
 80020fe:	f003 f95f 	bl	80053c0 <HAL_TIM_Base_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002108:	f000 fa0a 	bl	8002520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002114:	463b      	mov	r3, r7
 8002116:	4619      	mov	r1, r3
 8002118:	4805      	ldr	r0, [pc, #20]	; (8002130 <MX_TIM7_Init+0x64>)
 800211a:	f004 fe25 	bl	8006d68 <HAL_TIMEx_MasterConfigSynchronization>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002124:	f000 f9fc 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	2000056c 	.word	0x2000056c
 8002134:	40001400 	.word	0x40001400

08002138 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
 800214c:	615a      	str	r2, [r3, #20]
 800214e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002150:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <MX_TIM13_Init+0x94>)
 8002152:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <MX_TIM13_Init+0x98>)
 8002154:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <MX_TIM13_Init+0x94>)
 8002158:	2200      	movs	r2, #0
 800215a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800215c:	4b1b      	ldr	r3, [pc, #108]	; (80021cc <MX_TIM13_Init+0x94>)
 800215e:	2200      	movs	r2, #0
 8002160:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <MX_TIM13_Init+0x94>)
 8002164:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002168:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <MX_TIM13_Init+0x94>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <MX_TIM13_Init+0x94>)
 8002172:	2200      	movs	r2, #0
 8002174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002176:	4815      	ldr	r0, [pc, #84]	; (80021cc <MX_TIM13_Init+0x94>)
 8002178:	f003 f922 	bl	80053c0 <HAL_TIM_Base_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002182:	f000 f9cd 	bl	8002520 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002186:	4811      	ldr	r0, [pc, #68]	; (80021cc <MX_TIM13_Init+0x94>)
 8002188:	f003 f9da 	bl	8005540 <HAL_TIM_PWM_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002192:	f000 f9c5 	bl	8002520 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002196:	2360      	movs	r3, #96	; 0x60
 8002198:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2200      	movs	r2, #0
 80021aa:	4619      	mov	r1, r3
 80021ac:	4807      	ldr	r0, [pc, #28]	; (80021cc <MX_TIM13_Init+0x94>)
 80021ae:	f003 fee1 	bl	8005f74 <HAL_TIM_PWM_ConfigChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80021b8:	f000 f9b2 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80021bc:	4803      	ldr	r0, [pc, #12]	; (80021cc <MX_TIM13_Init+0x94>)
 80021be:	f000 fdb9 	bl	8002d34 <HAL_TIM_MspPostInit>

}
 80021c2:	bf00      	nop
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	200005b4 	.word	0x200005b4
 80021d0:	40001c00 	.word	0x40001c00

080021d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <MX_USART2_UART_Init+0x50>)
 80021dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 80021fa:	220c      	movs	r2, #12
 80021fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 8002206:	2200      	movs	r2, #0
 8002208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800220a:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_USART2_UART_Init+0x4c>)
 800220c:	f004 fe3c 	bl	8006e88 <HAL_UART_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002216:	f000 f983 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200005fc 	.word	0x200005fc
 8002224:	40004400 	.word	0x40004400

08002228 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <MX_USART6_UART_Init+0x4c>)
 800222e:	4a12      	ldr	r2, [pc, #72]	; (8002278 <MX_USART6_UART_Init+0x50>)
 8002230:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <MX_USART6_UART_Init+0x4c>)
 8002234:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002238:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800223a:	4b0e      	ldr	r3, [pc, #56]	; (8002274 <MX_USART6_UART_Init+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <MX_USART6_UART_Init+0x4c>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <MX_USART6_UART_Init+0x4c>)
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <MX_USART6_UART_Init+0x4c>)
 800224e:	220c      	movs	r2, #12
 8002250:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <MX_USART6_UART_Init+0x4c>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <MX_USART6_UART_Init+0x4c>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800225e:	4805      	ldr	r0, [pc, #20]	; (8002274 <MX_USART6_UART_Init+0x4c>)
 8002260:	f004 fe12 	bl	8006e88 <HAL_UART_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800226a:	f000 f959 	bl	8002520 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000640 	.word	0x20000640
 8002278:	40011400 	.word	0x40011400

0800227c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	4b64      	ldr	r3, [pc, #400]	; (8002428 <MX_GPIO_Init+0x1ac>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a63      	ldr	r2, [pc, #396]	; (8002428 <MX_GPIO_Init+0x1ac>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b61      	ldr	r3, [pc, #388]	; (8002428 <MX_GPIO_Init+0x1ac>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <MX_GPIO_Init+0x1ac>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a5c      	ldr	r2, [pc, #368]	; (8002428 <MX_GPIO_Init+0x1ac>)
 80022b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b5a      	ldr	r3, [pc, #360]	; (8002428 <MX_GPIO_Init+0x1ac>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60bb      	str	r3, [r7, #8]
 80022ce:	4b56      	ldr	r3, [pc, #344]	; (8002428 <MX_GPIO_Init+0x1ac>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a55      	ldr	r2, [pc, #340]	; (8002428 <MX_GPIO_Init+0x1ac>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b53      	ldr	r3, [pc, #332]	; (8002428 <MX_GPIO_Init+0x1ac>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
 80022ea:	4b4f      	ldr	r3, [pc, #316]	; (8002428 <MX_GPIO_Init+0x1ac>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a4e      	ldr	r2, [pc, #312]	; (8002428 <MX_GPIO_Init+0x1ac>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <MX_GPIO_Init+0x1ac>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	607b      	str	r3, [r7, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	603b      	str	r3, [r7, #0]
 8002306:	4b48      	ldr	r3, [pc, #288]	; (8002428 <MX_GPIO_Init+0x1ac>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a47      	ldr	r2, [pc, #284]	; (8002428 <MX_GPIO_Init+0x1ac>)
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b45      	ldr	r3, [pc, #276]	; (8002428 <MX_GPIO_Init+0x1ac>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 800231e:	2200      	movs	r2, #0
 8002320:	f24d 0107 	movw	r1, #53255	; 0xd007
 8002324:	4841      	ldr	r0, [pc, #260]	; (800242c <MX_GPIO_Init+0x1b0>)
 8002326:	f001 fc6b 	bl	8003c00 <HAL_GPIO_WritePin>
                          |AD_CS3_Pin|AD_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_CS1_Pin|LED_LE_Pin, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8002330:	483f      	ldr	r0, [pc, #252]	; (8002430 <MX_GPIO_Init+0x1b4>)
 8002332:	f001 fc65 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 800233c:	483d      	ldr	r0, [pc, #244]	; (8002434 <MX_GPIO_Init+0x1b8>)
 800233e:	f001 fc5f 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	2104      	movs	r1, #4
 8002346:	483c      	ldr	r0, [pc, #240]	; (8002438 <MX_GPIO_Init+0x1bc>)
 8002348:	f001 fc5a 	bl	8003c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800234c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002352:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4619      	mov	r1, r3
 8002362:	4833      	ldr	r0, [pc, #204]	; (8002430 <MX_GPIO_Init+0x1b4>)
 8002364:	f001 fab8 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dead_man_SW_Pin DRV_PWR_FB_Pin */
  GPIO_InitStruct.Pin = Dead_man_SW_Pin|DRV_PWR_FB_Pin;
 8002368:	2311      	movs	r3, #17
 800236a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236c:	2300      	movs	r3, #0
 800236e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	482d      	ldr	r0, [pc, #180]	; (8002430 <MX_GPIO_Init+0x1b4>)
 800237c:	f001 faac 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_XSDN_36_Pin ToF_XSDN_25_Pin ToF_XSDN_14_Pin AD_CS4_Pin
                           AD_CS3_Pin AD_CS2_Pin */
  GPIO_InitStruct.Pin = ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 8002380:	f24d 0307 	movw	r3, #53255	; 0xd007
 8002384:	617b      	str	r3, [r7, #20]
                          |AD_CS3_Pin|AD_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	2301      	movs	r3, #1
 8002388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	4824      	ldr	r0, [pc, #144]	; (800242c <MX_GPIO_Init+0x1b0>)
 800239a:	f001 fa9d 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_CS1_Pin LED_LE_Pin */
  GPIO_InitStruct.Pin = AD_CS1_Pin|LED_LE_Pin;
 800239e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80023a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a4:	2301      	movs	r3, #1
 80023a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	481e      	ldr	r0, [pc, #120]	; (8002430 <MX_GPIO_Init+0x1b4>)
 80023b8:	f001 fa8e 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INF_LE_Pin INF_OE_Pin DRV_EN_Pin */
  GPIO_InitStruct.Pin = INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin;
 80023bc:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 80023c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c2:	2301      	movs	r3, #1
 80023c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	2300      	movs	r3, #0
 80023cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	4817      	ldr	r0, [pc, #92]	; (8002434 <MX_GPIO_Init+0x1b8>)
 80023d6:	f001 fa7f 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_FB_Pin */
  GPIO_InitStruct.Pin = DRV_EN_FB_Pin;
 80023da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_EN_FB_GPIO_Port, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	4811      	ldr	r0, [pc, #68]	; (8002434 <MX_GPIO_Init+0x1b8>)
 80023f0:	f001 fa72 	bl	80038d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_OE_Pin;
 80023f4:	2304      	movs	r3, #4
 80023f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f8:	2301      	movs	r3, #1
 80023fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fc:	2300      	movs	r3, #0
 80023fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OE_GPIO_Port, &GPIO_InitStruct);
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4619      	mov	r1, r3
 800240a:	480b      	ldr	r0, [pc, #44]	; (8002438 <MX_GPIO_Init+0x1bc>)
 800240c:	f001 fa64 	bl	80038d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2100      	movs	r1, #0
 8002414:	2028      	movs	r0, #40	; 0x28
 8002416:	f001 fa28 	bl	800386a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800241a:	2028      	movs	r0, #40	; 0x28
 800241c:	f001 fa41 	bl	80038a2 <HAL_NVIC_EnableIRQ>

}
 8002420:	bf00      	nop
 8002422:	3728      	adds	r7, #40	; 0x28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40020000 	.word	0x40020000
 8002438:	40020c00 	.word	0x40020c00

0800243c <HAL_GPIO_EXTI_Callback>:
//{
//	  BTMessageFlag = true;
//	  BT_ReceiveMsg(&huart2, BT_received_msg);
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	80fb      	strh	r3, [r7, #6]
	buttonMessageFlag = true;
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	2000075c 	.word	0x2000075c

0800245c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
//		else{
//			LS_LED_Send(&hspi3, leds_all_on);
//			lightIsOn = true;
//		}
//	}
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002480:	d13d      	bne.n	80024fe <HAL_TIM_IC_CaptureCallback+0x8e>
		cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 2;
 8002482:	2100      	movs	r1, #0
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f003 ff41 	bl	800630c <HAL_TIM_ReadCapturedValue>
 800248a:	4603      	mov	r3, r0
 800248c:	3302      	adds	r3, #2
 800248e:	4a1e      	ldr	r2, [pc, #120]	; (8002508 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002490:	6013      	str	r3, [r2, #0]
		cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + 2;
 8002492:	2104      	movs	r1, #4
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f003 ff39 	bl	800630c <HAL_TIM_ReadCapturedValue>
 800249a:	4603      	mov	r3, r0
 800249c:	3302      	adds	r3, #2
 800249e:	4a1b      	ldr	r2, [pc, #108]	; (800250c <HAL_TIM_IC_CaptureCallback+0x9c>)
 80024a0:	6013      	str	r3, [r2, #0]

		duty = (float) 100 * cnt_high / cnt_full;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <HAL_TIM_IC_CaptureCallback+0x9c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024ae:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002510 <HAL_TIM_IC_CaptureCallback+0xa0>
 80024b2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80024b6:	4b14      	ldr	r3, [pc, #80]	; (8002508 <HAL_TIM_IC_CaptureCallback+0x98>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	ee07 3a90 	vmov	s15, r3
 80024be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80024c8:	edc3 7a00 	vstr	s15, [r3]
		duty_MA = duty_alpha * duty + (1-duty_alpha) * duty_MA;
 80024cc:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80024ce:	ed93 7a00 	vldr	s14, [r3]
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024dc:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80024de:	edd3 7a00 	vldr	s15, [r3]
 80024e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80024ea:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_TIM_IC_CaptureCallback+0xac>)
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f8:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_TIM_IC_CaptureCallback+0xac>)
 80024fa:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000760 	.word	0x20000760
 800250c:	20000764 	.word	0x20000764
 8002510:	42c80000 	.word	0x42c80000
 8002514:	20000768 	.word	0x20000768
 8002518:	20000000 	.word	0x20000000
 800251c:	2000076c 	.word	0x2000076c

08002520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002524:	b672      	cpsid	i
}
 8002526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002528:	e7fe      	b.n	8002528 <Error_Handler+0x8>

0800252a <MotorDrive>:
#include "main.h"

int MotorDrive(TIM_HandleTypeDef* const pwmHandle, int duty)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	6039      	str	r1, [r7, #0]
	int pwm_val = 1000+(duty*20);
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002542:	60fb      	str	r3, [r7, #12]
	pwmHandle -> Instance -> CCR1 = pwm_val;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	635a      	str	r2, [r3, #52]	; 0x34
	return pwm_val;
 800254c:	68fb      	ldr	r3, [r7, #12]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	0000      	movs	r0, r0
 800255c:	0000      	movs	r0, r0
	...

08002560 <ServoPosition>:
#include "main.h"
#include <math.h>

void ServoPosition(TIM_HandleTypeDef* const pwmHandle, double    angle){
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	ed87 0b00 	vstr	d0, [r7]
    if(angle < 36){angle = 36;}
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <ServoPosition+0xb0>)
 8002572:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002576:	f7fe fad1 	bl	8000b1c <__aeabi_dcmplt>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <ServoPosition+0x2a>
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <ServoPosition+0xb0>)
 8002586:	e9c7 2300 	strd	r2, r3, [r7]
    if(angle>144){angle = 144;}
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	4b21      	ldr	r3, [pc, #132]	; (8002614 <ServoPosition+0xb4>)
 8002590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002594:	f7fe fae0 	bl	8000b58 <__aeabi_dcmpgt>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <ServoPosition+0x48>
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <ServoPosition+0xb4>)
 80025a4:	e9c7 2300 	strd	r2, r3, [r7]
    //angle2CCR = ((angle/180+1)/20*60000);
    pwmHandle->Instance->CCR1 = (int)((angle/180+1)/20*60000);//angle2CCR;
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <ServoPosition+0xb8>)
 80025ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025b2:	f7fe f96b 	bl	800088c <__aeabi_ddiv>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	4b16      	ldr	r3, [pc, #88]	; (800261c <ServoPosition+0xbc>)
 80025c4:	f7fd fe82 	bl	80002cc <__adddf3>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	4b12      	ldr	r3, [pc, #72]	; (8002620 <ServoPosition+0xc0>)
 80025d6:	f7fe f959 	bl	800088c <__aeabi_ddiv>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	a309      	add	r3, pc, #36	; (adr r3, 8002608 <ServoPosition+0xa8>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	f7fe f826 	bl	8000638 <__aeabi_dmul>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe fad0 	bl	8000b98 <__aeabi_d2iz>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	00000000 	.word	0x00000000
 800260c:	40ed4c00 	.word	0x40ed4c00
 8002610:	40420000 	.word	0x40420000
 8002614:	40620000 	.word	0x40620000
 8002618:	40668000 	.word	0x40668000
 800261c:	3ff00000 	.word	0x3ff00000
 8002620:	40340000 	.word	0x40340000
 8002624:	00000000 	.word	0x00000000

08002628 <SteeringAngle>:


float SteeringAngle(float p, float delta){
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002632:	edc7 0a00 	vstr	s1, [r7]
	float kp=-10.0;
 8002636:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <SteeringAngle+0xd0>)
 8002638:	617b      	str	r3, [r7, #20]
	float kd=-0.5;
 800263a:	f04f 433f 	mov.w	r3, #3204448256	; 0xbf000000
 800263e:	613b      	str	r3, [r7, #16]
	float phi = atan(0.7826*tan(-kp*p-kd*delta));
 8002640:	edd7 7a05 	vldr	s15, [r7, #20]
 8002644:	eeb1 7a67 	vneg.f32	s14, s15
 8002648:	edd7 7a01 	vldr	s15, [r7, #4]
 800264c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002650:	edd7 6a04 	vldr	s13, [r7, #16]
 8002654:	edd7 7a00 	vldr	s15, [r7]
 8002658:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800265c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002660:	ee17 0a90 	vmov	r0, s15
 8002664:	f7fd ff90 	bl	8000588 <__aeabi_f2d>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	ec43 2b10 	vmov	d0, r2, r3
 8002670:	f008 f88a 	bl	800a788 <tan>
 8002674:	ec51 0b10 	vmov	r0, r1, d0
 8002678:	a31b      	add	r3, pc, #108	; (adr r3, 80026e8 <SteeringAngle+0xc0>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fd ffdb 	bl	8000638 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	ec43 2b17 	vmov	d7, r2, r3
 800268a:	eeb0 0a47 	vmov.f32	s0, s14
 800268e:	eef0 0a67 	vmov.f32	s1, s15
 8002692:	f007 fecd 	bl	800a430 <atan>
 8002696:	ec53 2b10 	vmov	r2, r3, d0
 800269a:	4610      	mov	r0, r2
 800269c:	4619      	mov	r1, r3
 800269e:	f7fe faa3 	bl	8000be8 <__aeabi_d2f>
 80026a2:	4603      	mov	r3, r0
 80026a4:	60fb      	str	r3, [r7, #12]
	float servoangle=90-phi*269.04;
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f7fd ff6e 	bl	8000588 <__aeabi_f2d>
 80026ac:	a310      	add	r3, pc, #64	; (adr r3, 80026f0 <SteeringAngle+0xc8>)
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	f7fd ffc1 	bl	8000638 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	f04f 0000 	mov.w	r0, #0
 80026be:	490f      	ldr	r1, [pc, #60]	; (80026fc <SteeringAngle+0xd4>)
 80026c0:	f7fd fe02 	bl	80002c8 <__aeabi_dsub>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	f7fe fa8c 	bl	8000be8 <__aeabi_d2f>
 80026d0:	4603      	mov	r3, r0
 80026d2:	60bb      	str	r3, [r7, #8]
	return servoangle;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	ee07 3a90 	vmov	s15, r3
}
 80026da:	eeb0 0a67 	vmov.f32	s0, s15
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	f3af 8000 	nop.w
 80026e8:	27bb2fec 	.word	0x27bb2fec
 80026ec:	3fe90b0f 	.word	0x3fe90b0f
 80026f0:	d70a3d71 	.word	0xd70a3d71
 80026f4:	4070d0a3 	.word	0x4070d0a3
 80026f8:	c1200000 	.word	0xc1200000
 80026fc:	40568000 	.word	0x40568000

08002700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	4b10      	ldr	r3, [pc, #64]	; (800274c <HAL_MspInit+0x4c>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a0f      	ldr	r2, [pc, #60]	; (800274c <HAL_MspInit+0x4c>)
 8002710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_MspInit+0x4c>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_MspInit+0x4c>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a08      	ldr	r2, [pc, #32]	; (800274c <HAL_MspInit+0x4c>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_MspInit+0x4c>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800273e:	2007      	movs	r0, #7
 8002740:	f001 f888 	bl	8003854 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800

08002750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	; 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_ADC_MspInit+0x7c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d127      	bne.n	80027c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_ADC_MspInit+0x80>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <HAL_ADC_MspInit+0x80>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6453      	str	r3, [r2, #68]	; 0x44
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_ADC_MspInit+0x80>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <HAL_ADC_MspInit+0x80>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <HAL_ADC_MspInit+0x80>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <HAL_ADC_MspInit+0x80>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IMotor_Pin|UBatt_Pin;
 80027aa:	2312      	movs	r3, #18
 80027ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027ae:	2303      	movs	r3, #3
 80027b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4805      	ldr	r0, [pc, #20]	; (80027d4 <HAL_ADC_MspInit+0x84>)
 80027be:	f001 f88b 	bl	80038d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027c2:	bf00      	nop
 80027c4:	3728      	adds	r7, #40	; 0x28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40012000 	.word	0x40012000
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40020000 	.word	0x40020000

080027d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08e      	sub	sp, #56	; 0x38
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5c      	ldr	r2, [pc, #368]	; (8002968 <HAL_I2C_MspInit+0x190>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d12d      	bne.n	8002856 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	4b5b      	ldr	r3, [pc, #364]	; (800296c <HAL_I2C_MspInit+0x194>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4a5a      	ldr	r2, [pc, #360]	; (800296c <HAL_I2C_MspInit+0x194>)
 8002804:	f043 0302 	orr.w	r3, r3, #2
 8002808:	6313      	str	r3, [r2, #48]	; 0x30
 800280a:	4b58      	ldr	r3, [pc, #352]	; (800296c <HAL_I2C_MspInit+0x194>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	623b      	str	r3, [r7, #32]
 8002814:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002816:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800281c:	2312      	movs	r3, #18
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002824:	2303      	movs	r3, #3
 8002826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002828:	2304      	movs	r3, #4
 800282a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002830:	4619      	mov	r1, r3
 8002832:	484f      	ldr	r0, [pc, #316]	; (8002970 <HAL_I2C_MspInit+0x198>)
 8002834:	f001 f850 	bl	80038d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
 800283c:	4b4b      	ldr	r3, [pc, #300]	; (800296c <HAL_I2C_MspInit+0x194>)
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	4a4a      	ldr	r2, [pc, #296]	; (800296c <HAL_I2C_MspInit+0x194>)
 8002842:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002846:	6413      	str	r3, [r2, #64]	; 0x40
 8002848:	4b48      	ldr	r3, [pc, #288]	; (800296c <HAL_I2C_MspInit+0x194>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002854:	e083      	b.n	800295e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a46      	ldr	r2, [pc, #280]	; (8002974 <HAL_I2C_MspInit+0x19c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d12d      	bne.n	80028bc <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002860:	2300      	movs	r3, #0
 8002862:	61bb      	str	r3, [r7, #24]
 8002864:	4b41      	ldr	r3, [pc, #260]	; (800296c <HAL_I2C_MspInit+0x194>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	4a40      	ldr	r2, [pc, #256]	; (800296c <HAL_I2C_MspInit+0x194>)
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	6313      	str	r3, [r2, #48]	; 0x30
 8002870:	4b3e      	ldr	r3, [pc, #248]	; (800296c <HAL_I2C_MspInit+0x194>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800287c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002882:	2312      	movs	r3, #18
 8002884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002886:	2300      	movs	r3, #0
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288a:	2303      	movs	r3, #3
 800288c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800288e:	2304      	movs	r3, #4
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002896:	4619      	mov	r1, r3
 8002898:	4835      	ldr	r0, [pc, #212]	; (8002970 <HAL_I2C_MspInit+0x198>)
 800289a:	f001 f81d 	bl	80038d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	4b32      	ldr	r3, [pc, #200]	; (800296c <HAL_I2C_MspInit+0x194>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	4a31      	ldr	r2, [pc, #196]	; (800296c <HAL_I2C_MspInit+0x194>)
 80028a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028ac:	6413      	str	r3, [r2, #64]	; 0x40
 80028ae:	4b2f      	ldr	r3, [pc, #188]	; (800296c <HAL_I2C_MspInit+0x194>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	697b      	ldr	r3, [r7, #20]
}
 80028ba:	e050      	b.n	800295e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a2d      	ldr	r2, [pc, #180]	; (8002978 <HAL_I2C_MspInit+0x1a0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d14b      	bne.n	800295e <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	4b28      	ldr	r3, [pc, #160]	; (800296c <HAL_I2C_MspInit+0x194>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a27      	ldr	r2, [pc, #156]	; (800296c <HAL_I2C_MspInit+0x194>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b25      	ldr	r3, [pc, #148]	; (800296c <HAL_I2C_MspInit+0x194>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0304 	and.w	r3, r3, #4
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_I2C_MspInit+0x194>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a20      	ldr	r2, [pc, #128]	; (800296c <HAL_I2C_MspInit+0x194>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b1e      	ldr	r3, [pc, #120]	; (800296c <HAL_I2C_MspInit+0x194>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002904:	2312      	movs	r3, #18
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002908:	2300      	movs	r3, #0
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002910:	2304      	movs	r3, #4
 8002912:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002918:	4619      	mov	r1, r3
 800291a:	4818      	ldr	r0, [pc, #96]	; (800297c <HAL_I2C_MspInit+0x1a4>)
 800291c:	f000 ffdc 	bl	80038d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002926:	2312      	movs	r3, #18
 8002928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002932:	2304      	movs	r3, #4
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293a:	4619      	mov	r1, r3
 800293c:	4810      	ldr	r0, [pc, #64]	; (8002980 <HAL_I2C_MspInit+0x1a8>)
 800293e:	f000 ffcb 	bl	80038d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_I2C_MspInit+0x194>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a08      	ldr	r2, [pc, #32]	; (800296c <HAL_I2C_MspInit+0x194>)
 800294c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_I2C_MspInit+0x194>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
}
 800295e:	bf00      	nop
 8002960:	3738      	adds	r7, #56	; 0x38
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40005400 	.word	0x40005400
 800296c:	40023800 	.word	0x40023800
 8002970:	40020400 	.word	0x40020400
 8002974:	40005800 	.word	0x40005800
 8002978:	40005c00 	.word	0x40005c00
 800297c:	40020800 	.word	0x40020800
 8002980:	40020000 	.word	0x40020000

08002984 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b090      	sub	sp, #64	; 0x40
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a72      	ldr	r2, [pc, #456]	; (8002b6c <HAL_SPI_MspInit+0x1e8>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d14a      	bne.n	8002a3c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029aa:	4b71      	ldr	r3, [pc, #452]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	4a70      	ldr	r2, [pc, #448]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 80029b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029b4:	6453      	str	r3, [r2, #68]	; 0x44
 80029b6:	4b6e      	ldr	r3, [pc, #440]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	4b6a      	ldr	r3, [pc, #424]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	4a69      	ldr	r2, [pc, #420]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6313      	str	r3, [r2, #48]	; 0x30
 80029d2:	4b67      	ldr	r3, [pc, #412]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	623b      	str	r3, [r7, #32]
 80029e2:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	4a62      	ldr	r2, [pc, #392]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	6313      	str	r3, [r2, #48]	; 0x30
 80029ee:	4b60      	ldr	r3, [pc, #384]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
 80029f8:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80029fa:	23a0      	movs	r3, #160	; 0xa0
 80029fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fe:	2302      	movs	r3, #2
 8002a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a06:	2303      	movs	r3, #3
 8002a08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a0a:	2305      	movs	r3, #5
 8002a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a12:	4619      	mov	r1, r3
 8002a14:	4857      	ldr	r0, [pc, #348]	; (8002b74 <HAL_SPI_MspInit+0x1f0>)
 8002a16:	f000 ff5f 	bl	80038d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a1a:	2310      	movs	r3, #16
 8002a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a22:	2300      	movs	r3, #0
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a26:	2303      	movs	r3, #3
 8002a28:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a2a:	2305      	movs	r3, #5
 8002a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a32:	4619      	mov	r1, r3
 8002a34:	4850      	ldr	r0, [pc, #320]	; (8002b78 <HAL_SPI_MspInit+0x1f4>)
 8002a36:	f000 ff4f 	bl	80038d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002a3a:	e092      	b.n	8002b62 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a4e      	ldr	r2, [pc, #312]	; (8002b7c <HAL_SPI_MspInit+0x1f8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d15b      	bne.n	8002afe <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	4b49      	ldr	r3, [pc, #292]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a48      	ldr	r2, [pc, #288]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
 8002a56:	4b46      	ldr	r3, [pc, #280]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	4b42      	ldr	r3, [pc, #264]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a41      	ldr	r2, [pc, #260]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a3a      	ldr	r2, [pc, #232]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b38      	ldr	r3, [pc, #224]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	617b      	str	r3, [r7, #20]
 8002a98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002aaa:	2307      	movs	r3, #7
 8002aac:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4832      	ldr	r0, [pc, #200]	; (8002b80 <HAL_SPI_MspInit+0x1fc>)
 8002ab6:	f000 ff0f 	bl	80038d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002aba:	2304      	movs	r3, #4
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002aca:	2305      	movs	r3, #5
 8002acc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	482a      	ldr	r0, [pc, #168]	; (8002b80 <HAL_SPI_MspInit+0x1fc>)
 8002ad6:	f000 feff 	bl	80038d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002aec:	2305      	movs	r3, #5
 8002aee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002af4:	4619      	mov	r1, r3
 8002af6:	4820      	ldr	r0, [pc, #128]	; (8002b78 <HAL_SPI_MspInit+0x1f4>)
 8002af8:	f000 feee 	bl	80038d8 <HAL_GPIO_Init>
}
 8002afc:	e031      	b.n	8002b62 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a20      	ldr	r2, [pc, #128]	; (8002b84 <HAL_SPI_MspInit+0x200>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d12c      	bne.n	8002b62 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b16:	6413      	str	r3, [r2, #64]	; 0x40
 8002b18:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	4a10      	ldr	r2, [pc, #64]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002b2e:	f043 0304 	orr.w	r3, r3, #4
 8002b32:	6313      	str	r3, [r2, #48]	; 0x30
 8002b34:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_SPI_MspInit+0x1ec>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002b40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b52:	2306      	movs	r3, #6
 8002b54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4808      	ldr	r0, [pc, #32]	; (8002b80 <HAL_SPI_MspInit+0x1fc>)
 8002b5e:	f000 febb 	bl	80038d8 <HAL_GPIO_Init>
}
 8002b62:	bf00      	nop
 8002b64:	3740      	adds	r7, #64	; 0x40
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40013000 	.word	0x40013000
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020000 	.word	0x40020000
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40003800 	.word	0x40003800
 8002b80:	40020800 	.word	0x40020800
 8002b84:	40003c00 	.word	0x40003c00

08002b88 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08a      	sub	sp, #40	; 0x28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba8:	d134      	bne.n	8002c14 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	4b1b      	ldr	r3, [pc, #108]	; (8002c1c <HAL_TIM_IC_MspInit+0x94>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a1a      	ldr	r2, [pc, #104]	; (8002c1c <HAL_TIM_IC_MspInit+0x94>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_TIM_IC_MspInit+0x94>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
 8002bca:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <HAL_TIM_IC_MspInit+0x94>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <HAL_TIM_IC_MspInit+0x94>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd6:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <HAL_TIM_IC_MspInit+0x94>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be8:	2302      	movs	r3, #2
 8002bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4808      	ldr	r0, [pc, #32]	; (8002c20 <HAL_TIM_IC_MspInit+0x98>)
 8002c00:	f000 fe6a 	bl	80038d8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c04:	2200      	movs	r2, #0
 8002c06:	2100      	movs	r1, #0
 8002c08:	201c      	movs	r0, #28
 8002c0a:	f000 fe2e 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c0e:	201c      	movs	r0, #28
 8002c10:	f000 fe47 	bl	80038a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c14:	bf00      	nop
 8002c16:	3728      	adds	r7, #40	; 0x28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020000 	.word	0x40020000

08002c24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a3a      	ldr	r2, [pc, #232]	; (8002d1c <HAL_TIM_Base_MspInit+0xf8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
 8002c3a:	4b39      	ldr	r3, [pc, #228]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4a38      	ldr	r2, [pc, #224]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6413      	str	r3, [r2, #64]	; 0x40
 8002c46:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	61fb      	str	r3, [r7, #28]
 8002c50:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002c52:	e05e      	b.n	8002d12 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a32      	ldr	r2, [pc, #200]	; (8002d24 <HAL_TIM_Base_MspInit+0x100>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d10e      	bne.n	8002c7c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a2e      	ldr	r2, [pc, #184]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002c68:	f043 0304 	orr.w	r3, r3, #4
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b2c      	ldr	r3, [pc, #176]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	61bb      	str	r3, [r7, #24]
 8002c78:	69bb      	ldr	r3, [r7, #24]
}
 8002c7a:	e04a      	b.n	8002d12 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a29      	ldr	r2, [pc, #164]	; (8002d28 <HAL_TIM_Base_MspInit+0x104>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d116      	bne.n	8002cb4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002c90:	f043 0308 	orr.w	r3, r3, #8
 8002c94:	6413      	str	r3, [r2, #64]	; 0x40
 8002c96:	4b22      	ldr	r3, [pc, #136]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f003 0308 	and.w	r3, r3, #8
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	2032      	movs	r0, #50	; 0x32
 8002ca8:	f000 fddf 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002cac:	2032      	movs	r0, #50	; 0x32
 8002cae:	f000 fdf8 	bl	80038a2 <HAL_NVIC_EnableIRQ>
}
 8002cb2:	e02e      	b.n	8002d12 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <HAL_TIM_Base_MspInit+0x108>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d116      	bne.n	8002cec <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	4b17      	ldr	r3, [pc, #92]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	4a16      	ldr	r2, [pc, #88]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002cc8:	f043 0320 	orr.w	r3, r3, #32
 8002ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2037      	movs	r0, #55	; 0x37
 8002ce0:	f000 fdc3 	bl	800386a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002ce4:	2037      	movs	r0, #55	; 0x37
 8002ce6:	f000 fddc 	bl	80038a2 <HAL_NVIC_EnableIRQ>
}
 8002cea:	e012      	b.n	8002d12 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM13)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_TIM_Base_MspInit+0x10c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d10d      	bne.n	8002d12 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	4a08      	ldr	r2, [pc, #32]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d04:	6413      	str	r3, [r2, #64]	; 0x40
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_TIM_Base_MspInit+0xfc>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]
}
 8002d12:	bf00      	nop
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40000c00 	.word	0x40000c00
 8002d2c:	40001400 	.word	0x40001400
 8002d30:	40001c00 	.word	0x40001c00

08002d34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08c      	sub	sp, #48	; 0x30
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a48      	ldr	r2, [pc, #288]	; (8002e74 <HAL_TIM_MspPostInit+0x140>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d11e      	bne.n	8002d94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
 8002d5a:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	4a46      	ldr	r2, [pc, #280]	; (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	6313      	str	r3, [r2, #48]	; 0x30
 8002d66:	4b44      	ldr	r3, [pc, #272]	; (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_PMW1_Pin;
 8002d72:	2320      	movs	r3, #32
 8002d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d76:	2302      	movs	r3, #2
 8002d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d82:	2302      	movs	r3, #2
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PMW1_GPIO_Port, &GPIO_InitStruct);
 8002d86:	f107 031c 	add.w	r3, r7, #28
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	483b      	ldr	r0, [pc, #236]	; (8002e7c <HAL_TIM_MspPostInit+0x148>)
 8002d8e:	f000 fda3 	bl	80038d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002d92:	e06a      	b.n	8002e6a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a39      	ldr	r2, [pc, #228]	; (8002e80 <HAL_TIM_MspPostInit+0x14c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d11e      	bne.n	8002ddc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a34      	ldr	r2, [pc, #208]	; (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002da8:	f043 0302 	orr.w	r3, r3, #2
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b32      	ldr	r3, [pc, #200]	; (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DRV_PWM2_Pin;
 8002dba:	2340      	movs	r3, #64	; 0x40
 8002dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002dce:	f107 031c 	add.w	r3, r7, #28
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4829      	ldr	r0, [pc, #164]	; (8002e7c <HAL_TIM_MspPostInit+0x148>)
 8002dd6:	f000 fd7f 	bl	80038d8 <HAL_GPIO_Init>
}
 8002dda:	e046      	b.n	8002e6a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a28      	ldr	r2, [pc, #160]	; (8002e84 <HAL_TIM_MspPostInit+0x150>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d11e      	bne.n	8002e24 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	4b23      	ldr	r3, [pc, #140]	; (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM2_Pin;
 8002e02:	2301      	movs	r3, #1
 8002e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e12:	2302      	movs	r3, #2
 8002e14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002e16:	f107 031c 	add.w	r3, r7, #28
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	481a      	ldr	r0, [pc, #104]	; (8002e88 <HAL_TIM_MspPostInit+0x154>)
 8002e1e:	f000 fd5b 	bl	80038d8 <HAL_GPIO_Init>
}
 8002e22:	e022      	b.n	8002e6a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM13)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a18      	ldr	r2, [pc, #96]	; (8002e8c <HAL_TIM_MspPostInit+0x158>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d11d      	bne.n	8002e6a <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	4a10      	ldr	r2, [pc, #64]	; (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <HAL_TIM_MspPostInit+0x144>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM_Pin;
 8002e4a:	2340      	movs	r3, #64	; 0x40
 8002e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002e5a:	2309      	movs	r3, #9
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e5e:	f107 031c 	add.w	r3, r7, #28
 8002e62:	4619      	mov	r1, r3
 8002e64:	4808      	ldr	r0, [pc, #32]	; (8002e88 <HAL_TIM_MspPostInit+0x154>)
 8002e66:	f000 fd37 	bl	80038d8 <HAL_GPIO_Init>
}
 8002e6a:	bf00      	nop
 8002e6c:	3730      	adds	r7, #48	; 0x30
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40020400 	.word	0x40020400
 8002e80:	40000800 	.word	0x40000800
 8002e84:	40000c00 	.word	0x40000c00
 8002e88:	40020000 	.word	0x40020000
 8002e8c:	40001c00 	.word	0x40001c00

08002e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08c      	sub	sp, #48	; 0x30
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e98:	f107 031c 	add.w	r3, r7, #28
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a32      	ldr	r2, [pc, #200]	; (8002f78 <HAL_UART_MspInit+0xe8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d12c      	bne.n	8002f0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <HAL_UART_MspInit+0xec>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	4a30      	ldr	r2, [pc, #192]	; (8002f7c <HAL_UART_MspInit+0xec>)
 8002ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ec2:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <HAL_UART_MspInit+0xec>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <HAL_UART_MspInit+0xec>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <HAL_UART_MspInit+0xec>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ede:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <HAL_UART_MspInit+0xec>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002eea:	230c      	movs	r3, #12
 8002eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002efa:	2307      	movs	r3, #7
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efe:	f107 031c 	add.w	r3, r7, #28
 8002f02:	4619      	mov	r1, r3
 8002f04:	481e      	ldr	r0, [pc, #120]	; (8002f80 <HAL_UART_MspInit+0xf0>)
 8002f06:	f000 fce7 	bl	80038d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f0a:	e030      	b.n	8002f6e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <HAL_UART_MspInit+0xf4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d12b      	bne.n	8002f6e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	4b18      	ldr	r3, [pc, #96]	; (8002f7c <HAL_UART_MspInit+0xec>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <HAL_UART_MspInit+0xec>)
 8002f20:	f043 0320 	orr.w	r3, r3, #32
 8002f24:	6453      	str	r3, [r2, #68]	; 0x44
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <HAL_UART_MspInit+0xec>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <HAL_UART_MspInit+0xec>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <HAL_UART_MspInit+0xec>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b0e      	ldr	r3, [pc, #56]	; (8002f7c <HAL_UART_MspInit+0xec>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|RADIO_RX_Pin;
 8002f4e:	23c0      	movs	r3, #192	; 0xc0
 8002f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f5e:	2308      	movs	r3, #8
 8002f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f62:	f107 031c 	add.w	r3, r7, #28
 8002f66:	4619      	mov	r1, r3
 8002f68:	4807      	ldr	r0, [pc, #28]	; (8002f88 <HAL_UART_MspInit+0xf8>)
 8002f6a:	f000 fcb5 	bl	80038d8 <HAL_GPIO_Init>
}
 8002f6e:	bf00      	nop
 8002f70:	3730      	adds	r7, #48	; 0x30
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40004400 	.word	0x40004400
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40020000 	.word	0x40020000
 8002f84:	40011400 	.word	0x40011400
 8002f88:	40020800 	.word	0x40020800

08002f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f90:	e7fe      	b.n	8002f90 <NMI_Handler+0x4>

08002f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f92:	b480      	push	{r7}
 8002f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f96:	e7fe      	b.n	8002f96 <HardFault_Handler+0x4>

08002f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f9c:	e7fe      	b.n	8002f9c <MemManage_Handler+0x4>

08002f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fa2:	e7fe      	b.n	8002fa2 <BusFault_Handler+0x4>

08002fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fa8:	e7fe      	b.n	8002fa8 <UsageFault_Handler+0x4>

08002faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002faa:	b480      	push	{r7}
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fd8:	f000 f8b6 	bl	8003148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <TIM2_IRQHandler+0x10>)
 8002fe6:	f002 fe21 	bl	8005c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	2000044c 	.word	0x2000044c

08002ff4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ff8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ffc:	f000 fe1a 	bl	8003c34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}

08003004 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <TIM5_IRQHandler+0x10>)
 800300a:	f002 fe0f 	bl	8005c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000524 	.word	0x20000524

08003018 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800301c:	4802      	ldr	r0, [pc, #8]	; (8003028 <TIM7_IRQHandler+0x10>)
 800301e:	f002 fe05 	bl	8005c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2000056c 	.word	0x2000056c

0800302c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <SystemInit+0x20>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	4a05      	ldr	r2, [pc, #20]	; (800304c <SystemInit+0x20>)
 8003038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800303c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003088 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003054:	480d      	ldr	r0, [pc, #52]	; (800308c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003056:	490e      	ldr	r1, [pc, #56]	; (8003090 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003058:	4a0e      	ldr	r2, [pc, #56]	; (8003094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800305c:	e002      	b.n	8003064 <LoopCopyDataInit>

0800305e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003062:	3304      	adds	r3, #4

08003064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003068:	d3f9      	bcc.n	800305e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306a:	4a0b      	ldr	r2, [pc, #44]	; (8003098 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800306c:	4c0b      	ldr	r4, [pc, #44]	; (800309c <LoopFillZerobss+0x26>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003070:	e001      	b.n	8003076 <LoopFillZerobss>

08003072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003074:	3204      	adds	r2, #4

08003076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003078:	d3fb      	bcc.n	8003072 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800307a:	f7ff ffd7 	bl	800302c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800307e:	f004 fac5 	bl	800760c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003082:	f7fe fb2f 	bl	80016e4 <main>
  bx  lr    
 8003086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800308c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003090:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003094:	0800bfd8 	.word	0x0800bfd8
  ldr r2, =_sbss
 8003098:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800309c:	20000788 	.word	0x20000788

080030a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC_IRQHandler>
	...

080030a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HAL_Init+0x40>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0d      	ldr	r2, [pc, #52]	; (80030e4 <HAL_Init+0x40>)
 80030ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030b4:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_Init+0x40>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0a      	ldr	r2, [pc, #40]	; (80030e4 <HAL_Init+0x40>)
 80030ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c0:	4b08      	ldr	r3, [pc, #32]	; (80030e4 <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a07      	ldr	r2, [pc, #28]	; (80030e4 <HAL_Init+0x40>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030cc:	2003      	movs	r0, #3
 80030ce:	f000 fbc1 	bl	8003854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d2:	2000      	movs	r0, #0
 80030d4:	f000 f808 	bl	80030e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d8:	f7ff fb12 	bl	8002700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023c00 	.word	0x40023c00

080030e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f0:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_InitTick+0x54>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_InitTick+0x58>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fbd9 	bl	80038be <HAL_SYSTICK_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e00e      	b.n	8003134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b0f      	cmp	r3, #15
 800311a:	d80a      	bhi.n	8003132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800311c:	2200      	movs	r2, #0
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f000 fba1 	bl	800386a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003128:	4a06      	ldr	r2, [pc, #24]	; (8003144 <HAL_InitTick+0x5c>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000008 	.word	0x20000008
 8003140:	20000010 	.word	0x20000010
 8003144:	2000000c 	.word	0x2000000c

08003148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800314c:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_IncTick+0x20>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_IncTick+0x24>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4413      	add	r3, r2
 8003158:	4a04      	ldr	r2, [pc, #16]	; (800316c <HAL_IncTick+0x24>)
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000010 	.word	0x20000010
 800316c:	20000770 	.word	0x20000770

08003170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return uwTick;
 8003174:	4b03      	ldr	r3, [pc, #12]	; (8003184 <HAL_GetTick+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000770 	.word	0x20000770

08003188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003190:	f7ff ffee 	bl	8003170 <HAL_GetTick>
 8003194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d005      	beq.n	80031ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a2:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <HAL_Delay+0x44>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ae:	bf00      	nop
 80031b0:	f7ff ffde 	bl	8003170 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d8f7      	bhi.n	80031b0 <HAL_Delay+0x28>
  {
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000010 	.word	0x20000010

080031d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e033      	b.n	800324e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff faae 	bl	8002750 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b00      	cmp	r3, #0
 800320c:	d118      	bne.n	8003240 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003216:	f023 0302 	bic.w	r3, r3, #2
 800321a:	f043 0202 	orr.w	r2, r3, #2
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f94a 	bl	80034bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	f023 0303 	bic.w	r3, r3, #3
 8003236:	f043 0201 	orr.w	r2, r3, #1
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
 800323e:	e001      	b.n	8003244 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800324c:	7bfb      	ldrb	r3, [r7, #15]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x1c>
 8003270:	2302      	movs	r3, #2
 8003272:	e113      	b.n	800349c <HAL_ADC_ConfigChannel+0x244>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b09      	cmp	r3, #9
 8003282:	d925      	bls.n	80032d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68d9      	ldr	r1, [r3, #12]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	3b1e      	subs	r3, #30
 800329a:	2207      	movs	r2, #7
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43da      	mvns	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	400a      	ands	r2, r1
 80032a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68d9      	ldr	r1, [r3, #12]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	4618      	mov	r0, r3
 80032bc:	4603      	mov	r3, r0
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4403      	add	r3, r0
 80032c2:	3b1e      	subs	r3, #30
 80032c4:	409a      	lsls	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	e022      	b.n	8003316 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6919      	ldr	r1, [r3, #16]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	2207      	movs	r2, #7
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43da      	mvns	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	400a      	ands	r2, r1
 80032f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6919      	ldr	r1, [r3, #16]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	4603      	mov	r3, r0
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4403      	add	r3, r0
 800330c:	409a      	lsls	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b06      	cmp	r3, #6
 800331c:	d824      	bhi.n	8003368 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	3b05      	subs	r3, #5
 8003330:	221f      	movs	r2, #31
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	400a      	ands	r2, r1
 800333e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	4618      	mov	r0, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	3b05      	subs	r3, #5
 800335a:	fa00 f203 	lsl.w	r2, r0, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	635a      	str	r2, [r3, #52]	; 0x34
 8003366:	e04c      	b.n	8003402 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b0c      	cmp	r3, #12
 800336e:	d824      	bhi.n	80033ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	3b23      	subs	r3, #35	; 0x23
 8003382:	221f      	movs	r2, #31
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43da      	mvns	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	400a      	ands	r2, r1
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	3b23      	subs	r3, #35	; 0x23
 80033ac:	fa00 f203 	lsl.w	r2, r0, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
 80033b8:	e023      	b.n	8003402 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	3b41      	subs	r3, #65	; 0x41
 80033cc:	221f      	movs	r2, #31
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43da      	mvns	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	400a      	ands	r2, r1
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4618      	mov	r0, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	3b41      	subs	r3, #65	; 0x41
 80033f6:	fa00 f203 	lsl.w	r2, r0, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003402:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <HAL_ADC_ConfigChannel+0x250>)
 8003404:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a28      	ldr	r2, [pc, #160]	; (80034ac <HAL_ADC_ConfigChannel+0x254>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d10f      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x1d8>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b12      	cmp	r3, #18
 8003416:	d10b      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1d      	ldr	r2, [pc, #116]	; (80034ac <HAL_ADC_ConfigChannel+0x254>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d12b      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x23a>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <HAL_ADC_ConfigChannel+0x258>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d003      	beq.n	800344c <HAL_ADC_ConfigChannel+0x1f4>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b11      	cmp	r3, #17
 800344a:	d122      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a11      	ldr	r2, [pc, #68]	; (80034b0 <HAL_ADC_ConfigChannel+0x258>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d111      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <HAL_ADC_ConfigChannel+0x25c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a11      	ldr	r2, [pc, #68]	; (80034b8 <HAL_ADC_ConfigChannel+0x260>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	0c9a      	lsrs	r2, r3, #18
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003484:	e002      	b.n	800348c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	3b01      	subs	r3, #1
 800348a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f9      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3714      	adds	r7, #20
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40012300 	.word	0x40012300
 80034ac:	40012000 	.word	0x40012000
 80034b0:	10000012 	.word	0x10000012
 80034b4:	20000008 	.word	0x20000008
 80034b8:	431bde83 	.word	0x431bde83

080034bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034c4:	4b79      	ldr	r3, [pc, #484]	; (80036ac <ADC_Init+0x1f0>)
 80034c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	431a      	orrs	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	021a      	lsls	r2, r3, #8
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003514:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6859      	ldr	r1, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003536:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6899      	ldr	r1, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	4a58      	ldr	r2, [pc, #352]	; (80036b0 <ADC_Init+0x1f4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003562:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6899      	ldr	r1, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6899      	ldr	r1, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	e00f      	b.n	80035ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0202 	bic.w	r2, r2, #2
 80035c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6899      	ldr	r1, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	7e1b      	ldrb	r3, [r3, #24]
 80035d4:	005a      	lsls	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01b      	beq.n	8003620 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003606:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	3b01      	subs	r3, #1
 8003614:	035a      	lsls	r2, r3, #13
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	e007      	b.n	8003630 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800362e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	3b01      	subs	r3, #1
 800364c:	051a      	lsls	r2, r3, #20
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6899      	ldr	r1, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003672:	025a      	lsls	r2, r3, #9
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800368a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6899      	ldr	r1, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	029a      	lsls	r2, r3, #10
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	609a      	str	r2, [r3, #8]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40012300 	.word	0x40012300
 80036b0:	0f000001 	.word	0x0f000001

080036b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <__NVIC_SetPriorityGrouping+0x44>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036d0:	4013      	ands	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036e6:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <__NVIC_SetPriorityGrouping+0x44>)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	60d3      	str	r3, [r2, #12]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003700:	4b04      	ldr	r3, [pc, #16]	; (8003714 <__NVIC_GetPriorityGrouping+0x18>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	f003 0307 	and.w	r3, r3, #7
}
 800370a:	4618      	mov	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	2b00      	cmp	r3, #0
 8003728:	db0b      	blt.n	8003742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	f003 021f 	and.w	r2, r3, #31
 8003730:	4907      	ldr	r1, [pc, #28]	; (8003750 <__NVIC_EnableIRQ+0x38>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2001      	movs	r0, #1
 800373a:	fa00 f202 	lsl.w	r2, r0, r2
 800373e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000e100 	.word	0xe000e100

08003754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	6039      	str	r1, [r7, #0]
 800375e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	2b00      	cmp	r3, #0
 8003766:	db0a      	blt.n	800377e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	490c      	ldr	r1, [pc, #48]	; (80037a0 <__NVIC_SetPriority+0x4c>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	440b      	add	r3, r1
 8003778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800377c:	e00a      	b.n	8003794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	4908      	ldr	r1, [pc, #32]	; (80037a4 <__NVIC_SetPriority+0x50>)
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	3b04      	subs	r3, #4
 800378c:	0112      	lsls	r2, r2, #4
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	440b      	add	r3, r1
 8003792:	761a      	strb	r2, [r3, #24]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000e100 	.word	0xe000e100
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	; 0x24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f1c3 0307 	rsb	r3, r3, #7
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	bf28      	it	cs
 80037c6:	2304      	movcs	r3, #4
 80037c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d902      	bls.n	80037d8 <NVIC_EncodePriority+0x30>
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3b03      	subs	r3, #3
 80037d6:	e000      	b.n	80037da <NVIC_EncodePriority+0x32>
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	f04f 32ff 	mov.w	r2, #4294967295
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	401a      	ands	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f0:	f04f 31ff 	mov.w	r1, #4294967295
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	43d9      	mvns	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	4313      	orrs	r3, r2
         );
}
 8003802:	4618      	mov	r0, r3
 8003804:	3724      	adds	r7, #36	; 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3b01      	subs	r3, #1
 800381c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003820:	d301      	bcc.n	8003826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003822:	2301      	movs	r3, #1
 8003824:	e00f      	b.n	8003846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003826:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <SysTick_Config+0x40>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3b01      	subs	r3, #1
 800382c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382e:	210f      	movs	r1, #15
 8003830:	f04f 30ff 	mov.w	r0, #4294967295
 8003834:	f7ff ff8e 	bl	8003754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <SysTick_Config+0x40>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383e:	4b04      	ldr	r3, [pc, #16]	; (8003850 <SysTick_Config+0x40>)
 8003840:	2207      	movs	r2, #7
 8003842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	e000e010 	.word	0xe000e010

08003854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ff29 	bl	80036b4 <__NVIC_SetPriorityGrouping>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	4603      	mov	r3, r0
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800387c:	f7ff ff3e 	bl	80036fc <__NVIC_GetPriorityGrouping>
 8003880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	6978      	ldr	r0, [r7, #20]
 8003888:	f7ff ff8e 	bl	80037a8 <NVIC_EncodePriority>
 800388c:	4602      	mov	r2, r0
 800388e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff5d 	bl	8003754 <__NVIC_SetPriority>
}
 800389a:	bf00      	nop
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	4603      	mov	r3, r0
 80038aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ff31 	bl	8003718 <__NVIC_EnableIRQ>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff ffa2 	bl	8003810 <SysTick_Config>
 80038cc:	4603      	mov	r3, r0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d8:	b480      	push	{r7}
 80038da:	b089      	sub	sp, #36	; 0x24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ee:	2300      	movs	r3, #0
 80038f0:	61fb      	str	r3, [r7, #28]
 80038f2:	e165      	b.n	8003bc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038f4:	2201      	movs	r2, #1
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	429a      	cmp	r2, r3
 800390e:	f040 8154 	bne.w	8003bba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0303 	and.w	r3, r3, #3
 800391a:	2b01      	cmp	r3, #1
 800391c:	d005      	beq.n	800392a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003926:	2b02      	cmp	r3, #2
 8003928:	d130      	bne.n	800398c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	2203      	movs	r2, #3
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003960:	2201      	movs	r2, #1
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 0201 	and.w	r2, r3, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 0303 	and.w	r3, r3, #3
 8003994:	2b03      	cmp	r3, #3
 8003996:	d017      	beq.n	80039c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	2203      	movs	r2, #3
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	43db      	mvns	r3, r3
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d123      	bne.n	8003a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	08da      	lsrs	r2, r3, #3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3208      	adds	r2, #8
 80039dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	220f      	movs	r2, #15
 80039ec:	fa02 f303 	lsl.w	r3, r2, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	4013      	ands	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f003 0307 	and.w	r3, r3, #7
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	fa02 f303 	lsl.w	r3, r2, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	08da      	lsrs	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3208      	adds	r2, #8
 8003a16:	69b9      	ldr	r1, [r7, #24]
 8003a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0203 	and.w	r2, r3, #3
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 80ae 	beq.w	8003bba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	4b5d      	ldr	r3, [pc, #372]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	4a5c      	ldr	r2, [pc, #368]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6e:	4b5a      	ldr	r3, [pc, #360]	; (8003bd8 <HAL_GPIO_Init+0x300>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a7a:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	3302      	adds	r3, #2
 8003a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	220f      	movs	r2, #15
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a4f      	ldr	r2, [pc, #316]	; (8003be0 <HAL_GPIO_Init+0x308>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d025      	beq.n	8003af2 <HAL_GPIO_Init+0x21a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a4e      	ldr	r2, [pc, #312]	; (8003be4 <HAL_GPIO_Init+0x30c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01f      	beq.n	8003aee <HAL_GPIO_Init+0x216>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a4d      	ldr	r2, [pc, #308]	; (8003be8 <HAL_GPIO_Init+0x310>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d019      	beq.n	8003aea <HAL_GPIO_Init+0x212>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a4c      	ldr	r2, [pc, #304]	; (8003bec <HAL_GPIO_Init+0x314>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d013      	beq.n	8003ae6 <HAL_GPIO_Init+0x20e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a4b      	ldr	r2, [pc, #300]	; (8003bf0 <HAL_GPIO_Init+0x318>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00d      	beq.n	8003ae2 <HAL_GPIO_Init+0x20a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a4a      	ldr	r2, [pc, #296]	; (8003bf4 <HAL_GPIO_Init+0x31c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <HAL_GPIO_Init+0x206>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a49      	ldr	r2, [pc, #292]	; (8003bf8 <HAL_GPIO_Init+0x320>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d101      	bne.n	8003ada <HAL_GPIO_Init+0x202>
 8003ad6:	2306      	movs	r3, #6
 8003ad8:	e00c      	b.n	8003af4 <HAL_GPIO_Init+0x21c>
 8003ada:	2307      	movs	r3, #7
 8003adc:	e00a      	b.n	8003af4 <HAL_GPIO_Init+0x21c>
 8003ade:	2305      	movs	r3, #5
 8003ae0:	e008      	b.n	8003af4 <HAL_GPIO_Init+0x21c>
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	e006      	b.n	8003af4 <HAL_GPIO_Init+0x21c>
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e004      	b.n	8003af4 <HAL_GPIO_Init+0x21c>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e002      	b.n	8003af4 <HAL_GPIO_Init+0x21c>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_GPIO_Init+0x21c>
 8003af2:	2300      	movs	r3, #0
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	f002 0203 	and.w	r2, r2, #3
 8003afa:	0092      	lsls	r2, r2, #2
 8003afc:	4093      	lsls	r3, r2
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b04:	4935      	ldr	r1, [pc, #212]	; (8003bdc <HAL_GPIO_Init+0x304>)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b12:	4b3a      	ldr	r3, [pc, #232]	; (8003bfc <HAL_GPIO_Init+0x324>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	43db      	mvns	r3, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4013      	ands	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d003      	beq.n	8003b36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b36:	4a31      	ldr	r2, [pc, #196]	; (8003bfc <HAL_GPIO_Init+0x324>)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b3c:	4b2f      	ldr	r3, [pc, #188]	; (8003bfc <HAL_GPIO_Init+0x324>)
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b60:	4a26      	ldr	r2, [pc, #152]	; (8003bfc <HAL_GPIO_Init+0x324>)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b66:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_GPIO_Init+0x324>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b8a:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <HAL_GPIO_Init+0x324>)
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b90:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <HAL_GPIO_Init+0x324>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bb4:	4a11      	ldr	r2, [pc, #68]	; (8003bfc <HAL_GPIO_Init+0x324>)
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b0f      	cmp	r3, #15
 8003bc4:	f67f ae96 	bls.w	80038f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	3724      	adds	r7, #36	; 0x24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40013800 	.word	0x40013800
 8003be0:	40020000 	.word	0x40020000
 8003be4:	40020400 	.word	0x40020400
 8003be8:	40020800 	.word	0x40020800
 8003bec:	40020c00 	.word	0x40020c00
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40021400 	.word	0x40021400
 8003bf8:	40021800 	.word	0x40021800
 8003bfc:	40013c00 	.word	0x40013c00

08003c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	807b      	strh	r3, [r7, #2]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c10:	787b      	ldrb	r3, [r7, #1]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c1c:	e003      	b.n	8003c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c1e:	887b      	ldrh	r3, [r7, #2]
 8003c20:	041a      	lsls	r2, r3, #16
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	619a      	str	r2, [r3, #24]
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	88fb      	ldrh	r3, [r7, #6]
 8003c44:	4013      	ands	r3, r2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d006      	beq.n	8003c58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c4a:	4a05      	ldr	r2, [pc, #20]	; (8003c60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7fe fbf2 	bl	800243c <HAL_GPIO_EXTI_Callback>
  }
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40013c00 	.word	0x40013c00

08003c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e12b      	b.n	8003ece <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d106      	bne.n	8003c90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f7fe fda4 	bl	80027d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2224      	movs	r2, #36	; 0x24
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0201 	bic.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cc8:	f000 fa52 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 8003ccc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4a81      	ldr	r2, [pc, #516]	; (8003ed8 <HAL_I2C_Init+0x274>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d807      	bhi.n	8003ce8 <HAL_I2C_Init+0x84>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a80      	ldr	r2, [pc, #512]	; (8003edc <HAL_I2C_Init+0x278>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	bf94      	ite	ls
 8003ce0:	2301      	movls	r3, #1
 8003ce2:	2300      	movhi	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e006      	b.n	8003cf6 <HAL_I2C_Init+0x92>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4a7d      	ldr	r2, [pc, #500]	; (8003ee0 <HAL_I2C_Init+0x27c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	bf94      	ite	ls
 8003cf0:	2301      	movls	r3, #1
 8003cf2:	2300      	movhi	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e0e7      	b.n	8003ece <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4a78      	ldr	r2, [pc, #480]	; (8003ee4 <HAL_I2C_Init+0x280>)
 8003d02:	fba2 2303 	umull	r2, r3, r2, r3
 8003d06:	0c9b      	lsrs	r3, r3, #18
 8003d08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4a6a      	ldr	r2, [pc, #424]	; (8003ed8 <HAL_I2C_Init+0x274>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d802      	bhi.n	8003d38 <HAL_I2C_Init+0xd4>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	3301      	adds	r3, #1
 8003d36:	e009      	b.n	8003d4c <HAL_I2C_Init+0xe8>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	4a69      	ldr	r2, [pc, #420]	; (8003ee8 <HAL_I2C_Init+0x284>)
 8003d44:	fba2 2303 	umull	r2, r3, r2, r3
 8003d48:	099b      	lsrs	r3, r3, #6
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	495c      	ldr	r1, [pc, #368]	; (8003ed8 <HAL_I2C_Init+0x274>)
 8003d68:	428b      	cmp	r3, r1
 8003d6a:	d819      	bhi.n	8003da0 <HAL_I2C_Init+0x13c>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1e59      	subs	r1, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d7a:	1c59      	adds	r1, r3, #1
 8003d7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d80:	400b      	ands	r3, r1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <HAL_I2C_Init+0x138>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1e59      	subs	r1, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d94:	3301      	adds	r3, #1
 8003d96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d9a:	e051      	b.n	8003e40 <HAL_I2C_Init+0x1dc>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	e04f      	b.n	8003e40 <HAL_I2C_Init+0x1dc>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d111      	bne.n	8003dcc <HAL_I2C_Init+0x168>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1e58      	subs	r0, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6859      	ldr	r1, [r3, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	440b      	add	r3, r1
 8003db6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dba:	3301      	adds	r3, #1
 8003dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e012      	b.n	8003df2 <HAL_I2C_Init+0x18e>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1e58      	subs	r0, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6859      	ldr	r1, [r3, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	0099      	lsls	r1, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003de2:	3301      	adds	r3, #1
 8003de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Init+0x196>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e022      	b.n	8003e40 <HAL_I2C_Init+0x1dc>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10e      	bne.n	8003e20 <HAL_I2C_Init+0x1bc>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1e58      	subs	r0, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	440b      	add	r3, r1
 8003e10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e14:	3301      	adds	r3, #1
 8003e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1e:	e00f      	b.n	8003e40 <HAL_I2C_Init+0x1dc>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	1e58      	subs	r0, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6859      	ldr	r1, [r3, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	0099      	lsls	r1, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e36:	3301      	adds	r3, #1
 8003e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	6809      	ldr	r1, [r1, #0]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69da      	ldr	r2, [r3, #28]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6911      	ldr	r1, [r2, #16]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68d2      	ldr	r2, [r2, #12]
 8003e7a:	4311      	orrs	r1, r2
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	000186a0 	.word	0x000186a0
 8003edc:	001e847f 	.word	0x001e847f
 8003ee0:	003d08ff 	.word	0x003d08ff
 8003ee4:	431bde83 	.word	0x431bde83
 8003ee8:	10624dd3 	.word	0x10624dd3

08003eec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x90>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x90>)
 8003f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f04:	6413      	str	r3, [r2, #64]	; 0x40
 8003f06:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <HAL_PWREx_EnableOverDrive+0x90>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f12:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <HAL_PWREx_EnableOverDrive+0x94>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f18:	f7ff f92a 	bl	8003170 <HAL_GetTick>
 8003f1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f1e:	e009      	b.n	8003f34 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f20:	f7ff f926 	bl	8003170 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f2e:	d901      	bls.n	8003f34 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e01f      	b.n	8003f74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f34:	4b13      	ldr	r3, [pc, #76]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f40:	d1ee      	bne.n	8003f20 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f42:	4b11      	ldr	r3, [pc, #68]	; (8003f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f44:	2201      	movs	r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f48:	f7ff f912 	bl	8003170 <HAL_GetTick>
 8003f4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f4e:	e009      	b.n	8003f64 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f50:	f7ff f90e 	bl	8003170 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f5e:	d901      	bls.n	8003f64 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e007      	b.n	8003f74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f70:	d1ee      	bne.n	8003f50 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	420e0040 	.word	0x420e0040
 8003f84:	40007000 	.word	0x40007000
 8003f88:	420e0044 	.word	0x420e0044

08003f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0cc      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b68      	ldr	r3, [pc, #416]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d90c      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b65      	ldr	r3, [pc, #404]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b63      	ldr	r3, [pc, #396]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0b8      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d020      	beq.n	8004016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe0:	4b59      	ldr	r3, [pc, #356]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4a58      	ldr	r2, [pc, #352]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff8:	4b53      	ldr	r3, [pc, #332]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a52      	ldr	r2, [pc, #328]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b50      	ldr	r3, [pc, #320]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	494d      	ldr	r1, [pc, #308]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d044      	beq.n	80040ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	4b47      	ldr	r3, [pc, #284]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d119      	bne.n	800406a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e07f      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d003      	beq.n	800404a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004046:	2b03      	cmp	r3, #3
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404a:	4b3f      	ldr	r3, [pc, #252]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e06f      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405a:	4b3b      	ldr	r3, [pc, #236]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e067      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800406a:	4b37      	ldr	r3, [pc, #220]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f023 0203 	bic.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4934      	ldr	r1, [pc, #208]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	4313      	orrs	r3, r2
 800407a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800407c:	f7ff f878 	bl	8003170 <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	e00a      	b.n	800409a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004084:	f7ff f874 	bl	8003170 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e04f      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 020c 	and.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d1eb      	bne.n	8004084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ac:	4b25      	ldr	r3, [pc, #148]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d20c      	bcs.n	80040d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b22      	ldr	r3, [pc, #136]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b20      	ldr	r3, [pc, #128]	; (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e032      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e0:	4b19      	ldr	r3, [pc, #100]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4916      	ldr	r1, [pc, #88]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040fe:	4b12      	ldr	r3, [pc, #72]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	490e      	ldr	r1, [pc, #56]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004112:	f000 f855 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8004116:	4602      	mov	r2, r0
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	490a      	ldr	r1, [pc, #40]	; (800414c <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	5ccb      	ldrb	r3, [r1, r3]
 8004126:	fa22 f303 	lsr.w	r3, r2, r3
 800412a:	4a09      	ldr	r2, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 800412c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800412e:	4b09      	ldr	r3, [pc, #36]	; (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe ffd8 	bl	80030e8 <HAL_InitTick>

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40023c00 	.word	0x40023c00
 8004148:	40023800 	.word	0x40023800
 800414c:	0800b9b8 	.word	0x0800b9b8
 8004150:	20000008 	.word	0x20000008
 8004154:	2000000c 	.word	0x2000000c

08004158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <HAL_RCC_GetHCLKFreq+0x14>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000008 	.word	0x20000008

08004170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004174:	f7ff fff0 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 8004178:	4602      	mov	r2, r0
 800417a:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	0a9b      	lsrs	r3, r3, #10
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	4903      	ldr	r1, [pc, #12]	; (8004194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004186:	5ccb      	ldrb	r3, [r1, r3]
 8004188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	0800b9c8 	.word	0x0800b9c8

08004198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800419c:	f7ff ffdc 	bl	8004158 <HAL_RCC_GetHCLKFreq>
 80041a0:	4602      	mov	r2, r0
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	0b5b      	lsrs	r3, r3, #13
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	4903      	ldr	r1, [pc, #12]	; (80041bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80041ae:	5ccb      	ldrb	r3, [r1, r3]
 80041b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40023800 	.word	0x40023800
 80041bc:	0800b9c8 	.word	0x0800b9c8

080041c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041c4:	b0ae      	sub	sp, #184	; 0xb8
 80041c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041e6:	4bcb      	ldr	r3, [pc, #812]	; (8004514 <HAL_RCC_GetSysClockFreq+0x354>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b0c      	cmp	r3, #12
 80041f0:	f200 8206 	bhi.w	8004600 <HAL_RCC_GetSysClockFreq+0x440>
 80041f4:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004231 	.word	0x08004231
 8004200:	08004601 	.word	0x08004601
 8004204:	08004601 	.word	0x08004601
 8004208:	08004601 	.word	0x08004601
 800420c:	08004239 	.word	0x08004239
 8004210:	08004601 	.word	0x08004601
 8004214:	08004601 	.word	0x08004601
 8004218:	08004601 	.word	0x08004601
 800421c:	08004241 	.word	0x08004241
 8004220:	08004601 	.word	0x08004601
 8004224:	08004601 	.word	0x08004601
 8004228:	08004601 	.word	0x08004601
 800422c:	08004431 	.word	0x08004431
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004230:	4bb9      	ldr	r3, [pc, #740]	; (8004518 <HAL_RCC_GetSysClockFreq+0x358>)
 8004232:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004236:	e1e7      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004238:	4bb8      	ldr	r3, [pc, #736]	; (800451c <HAL_RCC_GetSysClockFreq+0x35c>)
 800423a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800423e:	e1e3      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004240:	4bb4      	ldr	r3, [pc, #720]	; (8004514 <HAL_RCC_GetSysClockFreq+0x354>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004248:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800424c:	4bb1      	ldr	r3, [pc, #708]	; (8004514 <HAL_RCC_GetSysClockFreq+0x354>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d071      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004258:	4bae      	ldr	r3, [pc, #696]	; (8004514 <HAL_RCC_GetSysClockFreq+0x354>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	099b      	lsrs	r3, r3, #6
 800425e:	2200      	movs	r2, #0
 8004260:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004264:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800426c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004270:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800427a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800427e:	4622      	mov	r2, r4
 8004280:	462b      	mov	r3, r5
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f04f 0100 	mov.w	r1, #0
 800428a:	0159      	lsls	r1, r3, #5
 800428c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004290:	0150      	lsls	r0, r2, #5
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4621      	mov	r1, r4
 8004298:	1a51      	subs	r1, r2, r1
 800429a:	6439      	str	r1, [r7, #64]	; 0x40
 800429c:	4629      	mov	r1, r5
 800429e:	eb63 0301 	sbc.w	r3, r3, r1
 80042a2:	647b      	str	r3, [r7, #68]	; 0x44
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80042b0:	4649      	mov	r1, r9
 80042b2:	018b      	lsls	r3, r1, #6
 80042b4:	4641      	mov	r1, r8
 80042b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ba:	4641      	mov	r1, r8
 80042bc:	018a      	lsls	r2, r1, #6
 80042be:	4641      	mov	r1, r8
 80042c0:	1a51      	subs	r1, r2, r1
 80042c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80042c4:	4649      	mov	r1, r9
 80042c6:	eb63 0301 	sbc.w	r3, r3, r1
 80042ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80042d8:	4649      	mov	r1, r9
 80042da:	00cb      	lsls	r3, r1, #3
 80042dc:	4641      	mov	r1, r8
 80042de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042e2:	4641      	mov	r1, r8
 80042e4:	00ca      	lsls	r2, r1, #3
 80042e6:	4610      	mov	r0, r2
 80042e8:	4619      	mov	r1, r3
 80042ea:	4603      	mov	r3, r0
 80042ec:	4622      	mov	r2, r4
 80042ee:	189b      	adds	r3, r3, r2
 80042f0:	633b      	str	r3, [r7, #48]	; 0x30
 80042f2:	462b      	mov	r3, r5
 80042f4:	460a      	mov	r2, r1
 80042f6:	eb42 0303 	adc.w	r3, r2, r3
 80042fa:	637b      	str	r3, [r7, #52]	; 0x34
 80042fc:	f04f 0200 	mov.w	r2, #0
 8004300:	f04f 0300 	mov.w	r3, #0
 8004304:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004308:	4629      	mov	r1, r5
 800430a:	024b      	lsls	r3, r1, #9
 800430c:	4621      	mov	r1, r4
 800430e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004312:	4621      	mov	r1, r4
 8004314:	024a      	lsls	r2, r1, #9
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800431e:	2200      	movs	r2, #0
 8004320:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004324:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004328:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800432c:	f7fc fcac 	bl	8000c88 <__aeabi_uldivmod>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4613      	mov	r3, r2
 8004336:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800433a:	e067      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433c:	4b75      	ldr	r3, [pc, #468]	; (8004514 <HAL_RCC_GetSysClockFreq+0x354>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	2200      	movs	r2, #0
 8004344:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004348:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800434c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004354:	67bb      	str	r3, [r7, #120]	; 0x78
 8004356:	2300      	movs	r3, #0
 8004358:	67fb      	str	r3, [r7, #124]	; 0x7c
 800435a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800435e:	4622      	mov	r2, r4
 8004360:	462b      	mov	r3, r5
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	0159      	lsls	r1, r3, #5
 800436c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004370:	0150      	lsls	r0, r2, #5
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4621      	mov	r1, r4
 8004378:	1a51      	subs	r1, r2, r1
 800437a:	62b9      	str	r1, [r7, #40]	; 0x28
 800437c:	4629      	mov	r1, r5
 800437e:	eb63 0301 	sbc.w	r3, r3, r1
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004390:	4649      	mov	r1, r9
 8004392:	018b      	lsls	r3, r1, #6
 8004394:	4641      	mov	r1, r8
 8004396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800439a:	4641      	mov	r1, r8
 800439c:	018a      	lsls	r2, r1, #6
 800439e:	4641      	mov	r1, r8
 80043a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80043a4:	4649      	mov	r1, r9
 80043a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043be:	4692      	mov	sl, r2
 80043c0:	469b      	mov	fp, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	eb1a 0303 	adds.w	r3, sl, r3
 80043c8:	623b      	str	r3, [r7, #32]
 80043ca:	462b      	mov	r3, r5
 80043cc:	eb4b 0303 	adc.w	r3, fp, r3
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80043de:	4629      	mov	r1, r5
 80043e0:	028b      	lsls	r3, r1, #10
 80043e2:	4621      	mov	r1, r4
 80043e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e8:	4621      	mov	r1, r4
 80043ea:	028a      	lsls	r2, r1, #10
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043f4:	2200      	movs	r2, #0
 80043f6:	673b      	str	r3, [r7, #112]	; 0x70
 80043f8:	677a      	str	r2, [r7, #116]	; 0x74
 80043fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80043fe:	f7fc fc43 	bl	8000c88 <__aeabi_uldivmod>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4613      	mov	r3, r2
 8004408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800440c:	4b41      	ldr	r3, [pc, #260]	; (8004514 <HAL_RCC_GetSysClockFreq+0x354>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	3301      	adds	r3, #1
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800441e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004426:	fbb2 f3f3 	udiv	r3, r2, r3
 800442a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800442e:	e0eb      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004430:	4b38      	ldr	r3, [pc, #224]	; (8004514 <HAL_RCC_GetSysClockFreq+0x354>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004438:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800443c:	4b35      	ldr	r3, [pc, #212]	; (8004514 <HAL_RCC_GetSysClockFreq+0x354>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d06b      	beq.n	8004520 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004448:	4b32      	ldr	r3, [pc, #200]	; (8004514 <HAL_RCC_GetSysClockFreq+0x354>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	099b      	lsrs	r3, r3, #6
 800444e:	2200      	movs	r2, #0
 8004450:	66bb      	str	r3, [r7, #104]	; 0x68
 8004452:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004454:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445a:	663b      	str	r3, [r7, #96]	; 0x60
 800445c:	2300      	movs	r3, #0
 800445e:	667b      	str	r3, [r7, #100]	; 0x64
 8004460:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004464:	4622      	mov	r2, r4
 8004466:	462b      	mov	r3, r5
 8004468:	f04f 0000 	mov.w	r0, #0
 800446c:	f04f 0100 	mov.w	r1, #0
 8004470:	0159      	lsls	r1, r3, #5
 8004472:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004476:	0150      	lsls	r0, r2, #5
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4621      	mov	r1, r4
 800447e:	1a51      	subs	r1, r2, r1
 8004480:	61b9      	str	r1, [r7, #24]
 8004482:	4629      	mov	r1, r5
 8004484:	eb63 0301 	sbc.w	r3, r3, r1
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004496:	4659      	mov	r1, fp
 8004498:	018b      	lsls	r3, r1, #6
 800449a:	4651      	mov	r1, sl
 800449c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044a0:	4651      	mov	r1, sl
 80044a2:	018a      	lsls	r2, r1, #6
 80044a4:	4651      	mov	r1, sl
 80044a6:	ebb2 0801 	subs.w	r8, r2, r1
 80044aa:	4659      	mov	r1, fp
 80044ac:	eb63 0901 	sbc.w	r9, r3, r1
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044c4:	4690      	mov	r8, r2
 80044c6:	4699      	mov	r9, r3
 80044c8:	4623      	mov	r3, r4
 80044ca:	eb18 0303 	adds.w	r3, r8, r3
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	462b      	mov	r3, r5
 80044d2:	eb49 0303 	adc.w	r3, r9, r3
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80044e4:	4629      	mov	r1, r5
 80044e6:	024b      	lsls	r3, r1, #9
 80044e8:	4621      	mov	r1, r4
 80044ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044ee:	4621      	mov	r1, r4
 80044f0:	024a      	lsls	r2, r1, #9
 80044f2:	4610      	mov	r0, r2
 80044f4:	4619      	mov	r1, r3
 80044f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80044fa:	2200      	movs	r2, #0
 80044fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80044fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004500:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004504:	f7fc fbc0 	bl	8000c88 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4613      	mov	r3, r2
 800450e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004512:	e065      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x420>
 8004514:	40023800 	.word	0x40023800
 8004518:	00f42400 	.word	0x00f42400
 800451c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004520:	4b3d      	ldr	r3, [pc, #244]	; (8004618 <HAL_RCC_GetSysClockFreq+0x458>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	099b      	lsrs	r3, r3, #6
 8004526:	2200      	movs	r2, #0
 8004528:	4618      	mov	r0, r3
 800452a:	4611      	mov	r1, r2
 800452c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004530:	653b      	str	r3, [r7, #80]	; 0x50
 8004532:	2300      	movs	r3, #0
 8004534:	657b      	str	r3, [r7, #84]	; 0x54
 8004536:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800453a:	4642      	mov	r2, r8
 800453c:	464b      	mov	r3, r9
 800453e:	f04f 0000 	mov.w	r0, #0
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	0159      	lsls	r1, r3, #5
 8004548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800454c:	0150      	lsls	r0, r2, #5
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4641      	mov	r1, r8
 8004554:	1a51      	subs	r1, r2, r1
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	4649      	mov	r1, r9
 800455a:	eb63 0301 	sbc.w	r3, r3, r1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800456c:	4659      	mov	r1, fp
 800456e:	018b      	lsls	r3, r1, #6
 8004570:	4651      	mov	r1, sl
 8004572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004576:	4651      	mov	r1, sl
 8004578:	018a      	lsls	r2, r1, #6
 800457a:	4651      	mov	r1, sl
 800457c:	1a54      	subs	r4, r2, r1
 800457e:	4659      	mov	r1, fp
 8004580:	eb63 0501 	sbc.w	r5, r3, r1
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	00eb      	lsls	r3, r5, #3
 800458e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004592:	00e2      	lsls	r2, r4, #3
 8004594:	4614      	mov	r4, r2
 8004596:	461d      	mov	r5, r3
 8004598:	4643      	mov	r3, r8
 800459a:	18e3      	adds	r3, r4, r3
 800459c:	603b      	str	r3, [r7, #0]
 800459e:	464b      	mov	r3, r9
 80045a0:	eb45 0303 	adc.w	r3, r5, r3
 80045a4:	607b      	str	r3, [r7, #4]
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f04f 0300 	mov.w	r3, #0
 80045ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045b2:	4629      	mov	r1, r5
 80045b4:	028b      	lsls	r3, r1, #10
 80045b6:	4621      	mov	r1, r4
 80045b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045bc:	4621      	mov	r1, r4
 80045be:	028a      	lsls	r2, r1, #10
 80045c0:	4610      	mov	r0, r2
 80045c2:	4619      	mov	r1, r3
 80045c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045c8:	2200      	movs	r2, #0
 80045ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80045cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80045ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80045d2:	f7fc fb59 	bl	8000c88 <__aeabi_uldivmod>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	4613      	mov	r3, r2
 80045dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <HAL_RCC_GetSysClockFreq+0x458>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	0f1b      	lsrs	r3, r3, #28
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80045ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045fe:	e003      	b.n	8004608 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004606:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004608:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800460c:	4618      	mov	r0, r3
 800460e:	37b8      	adds	r7, #184	; 0xb8
 8004610:	46bd      	mov	sp, r7
 8004612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004616:	bf00      	nop
 8004618:	40023800 	.word	0x40023800
 800461c:	00f42400 	.word	0x00f42400

08004620 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e28d      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 8083 	beq.w	8004746 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004640:	4b94      	ldr	r3, [pc, #592]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 030c 	and.w	r3, r3, #12
 8004648:	2b04      	cmp	r3, #4
 800464a:	d019      	beq.n	8004680 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800464c:	4b91      	ldr	r3, [pc, #580]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004654:	2b08      	cmp	r3, #8
 8004656:	d106      	bne.n	8004666 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004658:	4b8e      	ldr	r3, [pc, #568]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004664:	d00c      	beq.n	8004680 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004666:	4b8b      	ldr	r3, [pc, #556]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d112      	bne.n	8004698 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004672:	4b88      	ldr	r3, [pc, #544]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800467e:	d10b      	bne.n	8004698 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004680:	4b84      	ldr	r3, [pc, #528]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d05b      	beq.n	8004744 <HAL_RCC_OscConfig+0x124>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d157      	bne.n	8004744 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e25a      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a0:	d106      	bne.n	80046b0 <HAL_RCC_OscConfig+0x90>
 80046a2:	4b7c      	ldr	r3, [pc, #496]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a7b      	ldr	r2, [pc, #492]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80046a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e01d      	b.n	80046ec <HAL_RCC_OscConfig+0xcc>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCC_OscConfig+0xb4>
 80046ba:	4b76      	ldr	r3, [pc, #472]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a75      	ldr	r2, [pc, #468]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80046c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	4b73      	ldr	r3, [pc, #460]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a72      	ldr	r2, [pc, #456]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80046cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e00b      	b.n	80046ec <HAL_RCC_OscConfig+0xcc>
 80046d4:	4b6f      	ldr	r3, [pc, #444]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a6e      	ldr	r2, [pc, #440]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80046da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	4b6c      	ldr	r3, [pc, #432]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a6b      	ldr	r2, [pc, #428]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80046e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d013      	beq.n	800471c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f4:	f7fe fd3c 	bl	8003170 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046fc:	f7fe fd38 	bl	8003170 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	; 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e21f      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	4b61      	ldr	r3, [pc, #388]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0xdc>
 800471a:	e014      	b.n	8004746 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fe fd28 	bl	8003170 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004724:	f7fe fd24 	bl	8003170 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	; 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e20b      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004736:	4b57      	ldr	r3, [pc, #348]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x104>
 8004742:	e000      	b.n	8004746 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d06f      	beq.n	8004832 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004752:	4b50      	ldr	r3, [pc, #320]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b00      	cmp	r3, #0
 800475c:	d017      	beq.n	800478e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800475e:	4b4d      	ldr	r3, [pc, #308]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004766:	2b08      	cmp	r3, #8
 8004768:	d105      	bne.n	8004776 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800476a:	4b4a      	ldr	r3, [pc, #296]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00b      	beq.n	800478e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004776:	4b47      	ldr	r3, [pc, #284]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800477e:	2b0c      	cmp	r3, #12
 8004780:	d11c      	bne.n	80047bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004782:	4b44      	ldr	r3, [pc, #272]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d116      	bne.n	80047bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800478e:	4b41      	ldr	r3, [pc, #260]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <HAL_RCC_OscConfig+0x186>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d001      	beq.n	80047a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e1d3      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a6:	4b3b      	ldr	r3, [pc, #236]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4937      	ldr	r1, [pc, #220]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ba:	e03a      	b.n	8004832 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d020      	beq.n	8004806 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047c4:	4b34      	ldr	r3, [pc, #208]	; (8004898 <HAL_RCC_OscConfig+0x278>)
 80047c6:	2201      	movs	r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ca:	f7fe fcd1 	bl	8003170 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047d2:	f7fe fccd 	bl	8003170 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e1b4      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e4:	4b2b      	ldr	r3, [pc, #172]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0f0      	beq.n	80047d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f0:	4b28      	ldr	r3, [pc, #160]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4925      	ldr	r1, [pc, #148]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004800:	4313      	orrs	r3, r2
 8004802:	600b      	str	r3, [r1, #0]
 8004804:	e015      	b.n	8004832 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004806:	4b24      	ldr	r3, [pc, #144]	; (8004898 <HAL_RCC_OscConfig+0x278>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7fe fcb0 	bl	8003170 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004814:	f7fe fcac 	bl	8003170 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e193      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004826:	4b1b      	ldr	r3, [pc, #108]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d036      	beq.n	80048ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d016      	beq.n	8004874 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004846:	4b15      	ldr	r3, [pc, #84]	; (800489c <HAL_RCC_OscConfig+0x27c>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484c:	f7fe fc90 	bl	8003170 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004854:	f7fe fc8c 	bl	8003170 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e173      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004866:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <HAL_RCC_OscConfig+0x274>)
 8004868:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x234>
 8004872:	e01b      	b.n	80048ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004874:	4b09      	ldr	r3, [pc, #36]	; (800489c <HAL_RCC_OscConfig+0x27c>)
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487a:	f7fe fc79 	bl	8003170 <HAL_GetTick>
 800487e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004880:	e00e      	b.n	80048a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004882:	f7fe fc75 	bl	8003170 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	2b02      	cmp	r3, #2
 800488e:	d907      	bls.n	80048a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e15c      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
 8004894:	40023800 	.word	0x40023800
 8004898:	42470000 	.word	0x42470000
 800489c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a0:	4b8a      	ldr	r3, [pc, #552]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 80048a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1ea      	bne.n	8004882 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8097 	beq.w	80049e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ba:	2300      	movs	r3, #0
 80048bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048be:	4b83      	ldr	r3, [pc, #524]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10f      	bne.n	80048ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]
 80048ce:	4b7f      	ldr	r3, [pc, #508]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d2:	4a7e      	ldr	r2, [pc, #504]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 80048d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6413      	str	r3, [r2, #64]	; 0x40
 80048da:	4b7c      	ldr	r3, [pc, #496]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e2:	60bb      	str	r3, [r7, #8]
 80048e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048e6:	2301      	movs	r3, #1
 80048e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ea:	4b79      	ldr	r3, [pc, #484]	; (8004ad0 <HAL_RCC_OscConfig+0x4b0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d118      	bne.n	8004928 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048f6:	4b76      	ldr	r3, [pc, #472]	; (8004ad0 <HAL_RCC_OscConfig+0x4b0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a75      	ldr	r2, [pc, #468]	; (8004ad0 <HAL_RCC_OscConfig+0x4b0>)
 80048fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004902:	f7fe fc35 	bl	8003170 <HAL_GetTick>
 8004906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004908:	e008      	b.n	800491c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800490a:	f7fe fc31 	bl	8003170 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e118      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491c:	4b6c      	ldr	r3, [pc, #432]	; (8004ad0 <HAL_RCC_OscConfig+0x4b0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0f0      	beq.n	800490a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d106      	bne.n	800493e <HAL_RCC_OscConfig+0x31e>
 8004930:	4b66      	ldr	r3, [pc, #408]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 8004932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004934:	4a65      	ldr	r2, [pc, #404]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 8004936:	f043 0301 	orr.w	r3, r3, #1
 800493a:	6713      	str	r3, [r2, #112]	; 0x70
 800493c:	e01c      	b.n	8004978 <HAL_RCC_OscConfig+0x358>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b05      	cmp	r3, #5
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0x340>
 8004946:	4b61      	ldr	r3, [pc, #388]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	4a60      	ldr	r2, [pc, #384]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 800494c:	f043 0304 	orr.w	r3, r3, #4
 8004950:	6713      	str	r3, [r2, #112]	; 0x70
 8004952:	4b5e      	ldr	r3, [pc, #376]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 8004954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004956:	4a5d      	ldr	r2, [pc, #372]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	6713      	str	r3, [r2, #112]	; 0x70
 800495e:	e00b      	b.n	8004978 <HAL_RCC_OscConfig+0x358>
 8004960:	4b5a      	ldr	r3, [pc, #360]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004964:	4a59      	ldr	r2, [pc, #356]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 8004966:	f023 0301 	bic.w	r3, r3, #1
 800496a:	6713      	str	r3, [r2, #112]	; 0x70
 800496c:	4b57      	ldr	r3, [pc, #348]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	4a56      	ldr	r2, [pc, #344]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 8004972:	f023 0304 	bic.w	r3, r3, #4
 8004976:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d015      	beq.n	80049ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004980:	f7fe fbf6 	bl	8003170 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004986:	e00a      	b.n	800499e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004988:	f7fe fbf2 	bl	8003170 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f241 3288 	movw	r2, #5000	; 0x1388
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e0d7      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499e:	4b4b      	ldr	r3, [pc, #300]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0ee      	beq.n	8004988 <HAL_RCC_OscConfig+0x368>
 80049aa:	e014      	b.n	80049d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ac:	f7fe fbe0 	bl	8003170 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b2:	e00a      	b.n	80049ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049b4:	f7fe fbdc 	bl	8003170 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e0c1      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ca:	4b40      	ldr	r3, [pc, #256]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 80049cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1ee      	bne.n	80049b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d105      	bne.n	80049e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049dc:	4b3b      	ldr	r3, [pc, #236]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	4a3a      	ldr	r2, [pc, #232]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 80049e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 80ad 	beq.w	8004b4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049f2:	4b36      	ldr	r3, [pc, #216]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d060      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d145      	bne.n	8004a92 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a06:	4b33      	ldr	r3, [pc, #204]	; (8004ad4 <HAL_RCC_OscConfig+0x4b4>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fe fbb0 	bl	8003170 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a14:	f7fe fbac 	bl	8003170 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e093      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a26:	4b29      	ldr	r3, [pc, #164]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	69da      	ldr	r2, [r3, #28]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	019b      	lsls	r3, r3, #6
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	041b      	lsls	r3, r3, #16
 8004a4e:	431a      	orrs	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	061b      	lsls	r3, r3, #24
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	071b      	lsls	r3, r3, #28
 8004a5e:	491b      	ldr	r1, [pc, #108]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <HAL_RCC_OscConfig+0x4b4>)
 8004a66:	2201      	movs	r2, #1
 8004a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6a:	f7fe fb81 	bl	8003170 <HAL_GetTick>
 8004a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a72:	f7fe fb7d 	bl	8003170 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e064      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a84:	4b11      	ldr	r3, [pc, #68]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x452>
 8004a90:	e05c      	b.n	8004b4c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a92:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <HAL_RCC_OscConfig+0x4b4>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7fe fb6a 	bl	8003170 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fe fb66 	bl	8003170 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e04d      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ab2:	4b06      	ldr	r3, [pc, #24]	; (8004acc <HAL_RCC_OscConfig+0x4ac>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x480>
 8004abe:	e045      	b.n	8004b4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e040      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40007000 	.word	0x40007000
 8004ad4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ad8:	4b1f      	ldr	r3, [pc, #124]	; (8004b58 <HAL_RCC_OscConfig+0x538>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d030      	beq.n	8004b48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d129      	bne.n	8004b48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d122      	bne.n	8004b48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b08:	4013      	ands	r3, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d119      	bne.n	8004b48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	085b      	lsrs	r3, r3, #1
 8004b20:	3b01      	subs	r3, #1
 8004b22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d10f      	bne.n	8004b48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d107      	bne.n	8004b48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800

08004b5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e07b      	b.n	8004c66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d108      	bne.n	8004b88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b7e:	d009      	beq.n	8004b94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	61da      	str	r2, [r3, #28]
 8004b86:	e005      	b.n	8004b94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fd fee8 	bl	8002984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	ea42 0103 	orr.w	r1, r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	0c1b      	lsrs	r3, r3, #16
 8004c32:	f003 0104 	and.w	r1, r3, #4
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	f003 0210 	and.w	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69da      	ldr	r2, [r3, #28]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b088      	sub	sp, #32
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	603b      	str	r3, [r7, #0]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_SPI_Transmit+0x22>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e126      	b.n	8004ede <HAL_SPI_Transmit+0x270>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c98:	f7fe fa6a 	bl	8003170 <HAL_GetTick>
 8004c9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d002      	beq.n	8004cb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cb2:	e10b      	b.n	8004ecc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <HAL_SPI_Transmit+0x52>
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d102      	bne.n	8004cc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cc4:	e102      	b.n	8004ecc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2203      	movs	r2, #3
 8004cca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	88fa      	ldrh	r2, [r7, #6]
 8004cde:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d0c:	d10f      	bne.n	8004d2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d38:	2b40      	cmp	r3, #64	; 0x40
 8004d3a:	d007      	beq.n	8004d4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d54:	d14b      	bne.n	8004dee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <HAL_SPI_Transmit+0xf6>
 8004d5e:	8afb      	ldrh	r3, [r7, #22]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d13e      	bne.n	8004de2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	881a      	ldrh	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	1c9a      	adds	r2, r3, #2
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d88:	e02b      	b.n	8004de2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d112      	bne.n	8004dbe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9c:	881a      	ldrh	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	1c9a      	adds	r2, r3, #2
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dbc:	e011      	b.n	8004de2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dbe:	f7fe f9d7 	bl	8003170 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d803      	bhi.n	8004dd6 <HAL_SPI_Transmit+0x168>
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd4:	d102      	bne.n	8004ddc <HAL_SPI_Transmit+0x16e>
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004de0:	e074      	b.n	8004ecc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1ce      	bne.n	8004d8a <HAL_SPI_Transmit+0x11c>
 8004dec:	e04c      	b.n	8004e88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_SPI_Transmit+0x18e>
 8004df6:	8afb      	ldrh	r3, [r7, #22]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d140      	bne.n	8004e7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	330c      	adds	r3, #12
 8004e06:	7812      	ldrb	r2, [r2, #0]
 8004e08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e22:	e02c      	b.n	8004e7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 0302 	and.w	r3, r3, #2
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d113      	bne.n	8004e5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e58:	e011      	b.n	8004e7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e5a:	f7fe f989 	bl	8003170 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d803      	bhi.n	8004e72 <HAL_SPI_Transmit+0x204>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d102      	bne.n	8004e78 <HAL_SPI_Transmit+0x20a>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e7c:	e026      	b.n	8004ecc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1cd      	bne.n	8004e24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fa55 	bl	800533c <SPI_EndRxTxTransaction>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e000      	b.n	8004ecc <HAL_SPI_Transmit+0x25e>
  }

error:
 8004eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004edc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b08c      	sub	sp, #48	; 0x30
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	607a      	str	r2, [r7, #4]
 8004ef2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_SPI_TransmitReceive+0x26>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e18a      	b.n	8005222 <HAL_SPI_TransmitReceive+0x33c>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f14:	f7fe f92c 	bl	8003170 <HAL_GetTick>
 8004f18:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f2a:	887b      	ldrh	r3, [r7, #2]
 8004f2c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d00f      	beq.n	8004f56 <HAL_SPI_TransmitReceive+0x70>
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f3c:	d107      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d103      	bne.n	8004f4e <HAL_SPI_TransmitReceive+0x68>
 8004f46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d003      	beq.n	8004f56 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f54:	e15b      	b.n	800520e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0x82>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0x82>
 8004f62:	887b      	ldrh	r3, [r7, #2]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d103      	bne.n	8004f70 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f6e:	e14e      	b.n	800520e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	d003      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2205      	movs	r2, #5
 8004f80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	887a      	ldrh	r2, [r7, #2]
 8004f94:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	887a      	ldrh	r2, [r7, #2]
 8004f9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	887a      	ldrh	r2, [r7, #2]
 8004fa6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	887a      	ldrh	r2, [r7, #2]
 8004fac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d007      	beq.n	8004fd8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe0:	d178      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x10a>
 8004fea:	8b7b      	ldrh	r3, [r7, #26]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d166      	bne.n	80050be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	881a      	ldrh	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	1c9a      	adds	r2, r3, #2
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005014:	e053      	b.n	80050be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b02      	cmp	r3, #2
 8005022:	d11b      	bne.n	800505c <HAL_SPI_TransmitReceive+0x176>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d016      	beq.n	800505c <HAL_SPI_TransmitReceive+0x176>
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d113      	bne.n	800505c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005038:	881a      	ldrh	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005044:	1c9a      	adds	r2, r3, #2
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504e:	b29b      	uxth	r3, r3
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d119      	bne.n	800509e <HAL_SPI_TransmitReceive+0x1b8>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	d014      	beq.n	800509e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	b292      	uxth	r2, r2
 8005080:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005086:	1c9a      	adds	r2, r3, #2
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800509a:	2301      	movs	r3, #1
 800509c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800509e:	f7fe f867 	bl	8003170 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d807      	bhi.n	80050be <HAL_SPI_TransmitReceive+0x1d8>
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d003      	beq.n	80050be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050bc:	e0a7      	b.n	800520e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1a6      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x130>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1a1      	bne.n	8005016 <HAL_SPI_TransmitReceive+0x130>
 80050d2:	e07c      	b.n	80051ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x1fc>
 80050dc:	8b7b      	ldrh	r3, [r7, #26]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d16b      	bne.n	80051ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005108:	e057      	b.n	80051ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b02      	cmp	r3, #2
 8005116:	d11c      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x26c>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d017      	beq.n	8005152 <HAL_SPI_TransmitReceive+0x26c>
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	2b01      	cmp	r3, #1
 8005126:	d114      	bne.n	8005152 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	7812      	ldrb	r2, [r2, #0]
 8005134:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005144:	b29b      	uxth	r3, r3
 8005146:	3b01      	subs	r3, #1
 8005148:	b29a      	uxth	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b01      	cmp	r3, #1
 800515e:	d119      	bne.n	8005194 <HAL_SPI_TransmitReceive+0x2ae>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d014      	beq.n	8005194 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68da      	ldr	r2, [r3, #12]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005186:	b29b      	uxth	r3, r3
 8005188:	3b01      	subs	r3, #1
 800518a:	b29a      	uxth	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005190:	2301      	movs	r3, #1
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005194:	f7fd ffec 	bl	8003170 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d803      	bhi.n	80051ac <HAL_SPI_TransmitReceive+0x2c6>
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051aa:	d102      	bne.n	80051b2 <HAL_SPI_TransmitReceive+0x2cc>
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d103      	bne.n	80051ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80051b8:	e029      	b.n	800520e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051be:	b29b      	uxth	r3, r3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1a2      	bne.n	800510a <HAL_SPI_TransmitReceive+0x224>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d19d      	bne.n	800510a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f8b2 	bl	800533c <SPI_EndRxTxTransaction>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d006      	beq.n	80051ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2220      	movs	r2, #32
 80051e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80051ea:	e010      	b.n	800520e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	e000      	b.n	800520e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800520c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800521e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005222:	4618      	mov	r0, r3
 8005224:	3730      	adds	r7, #48	; 0x30
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800523c:	f7fd ff98 	bl	8003170 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	1a9b      	subs	r3, r3, r2
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	4413      	add	r3, r2
 800524a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800524c:	f7fd ff90 	bl	8003170 <HAL_GetTick>
 8005250:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005252:	4b39      	ldr	r3, [pc, #228]	; (8005338 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	015b      	lsls	r3, r3, #5
 8005258:	0d1b      	lsrs	r3, r3, #20
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	fb02 f303 	mul.w	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005262:	e054      	b.n	800530e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d050      	beq.n	800530e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800526c:	f7fd ff80 	bl	8003170 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	429a      	cmp	r2, r3
 800527a:	d902      	bls.n	8005282 <SPI_WaitFlagStateUntilTimeout+0x56>
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d13d      	bne.n	80052fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005290:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800529a:	d111      	bne.n	80052c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a4:	d004      	beq.n	80052b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ae:	d107      	bne.n	80052c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c8:	d10f      	bne.n	80052ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e017      	b.n	800532e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	3b01      	subs	r3, #1
 800530c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	bf0c      	ite	eq
 800531e:	2301      	moveq	r3, #1
 8005320:	2300      	movne	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	429a      	cmp	r2, r3
 800532a:	d19b      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000008 	.word	0x20000008

0800533c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005348:	4b1b      	ldr	r3, [pc, #108]	; (80053b8 <SPI_EndRxTxTransaction+0x7c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1b      	ldr	r2, [pc, #108]	; (80053bc <SPI_EndRxTxTransaction+0x80>)
 800534e:	fba2 2303 	umull	r2, r3, r2, r3
 8005352:	0d5b      	lsrs	r3, r3, #21
 8005354:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005366:	d112      	bne.n	800538e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2200      	movs	r2, #0
 8005370:	2180      	movs	r1, #128	; 0x80
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff ff5a 	bl	800522c <SPI_WaitFlagStateUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d016      	beq.n	80053ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005382:	f043 0220 	orr.w	r2, r3, #32
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e00f      	b.n	80053ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	3b01      	subs	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d0f2      	beq.n	800538e <SPI_EndRxTxTransaction+0x52>
 80053a8:	e000      	b.n	80053ac <SPI_EndRxTxTransaction+0x70>
        break;
 80053aa:	bf00      	nop
  }

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000008 	.word	0x20000008
 80053bc:	165e9f81 	.word	0x165e9f81

080053c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e041      	b.n	8005456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fd fc1c 	bl	8002c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3304      	adds	r3, #4
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	f000 ffe6 	bl	80063d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3708      	adds	r7, #8
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b01      	cmp	r3, #1
 8005472:	d001      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e04e      	b.n	8005516 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68da      	ldr	r2, [r3, #12]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f042 0201 	orr.w	r2, r2, #1
 800548e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a23      	ldr	r2, [pc, #140]	; (8005524 <HAL_TIM_Base_Start_IT+0xc4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d022      	beq.n	80054e0 <HAL_TIM_Base_Start_IT+0x80>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a2:	d01d      	beq.n	80054e0 <HAL_TIM_Base_Start_IT+0x80>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <HAL_TIM_Base_Start_IT+0xc8>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d018      	beq.n	80054e0 <HAL_TIM_Base_Start_IT+0x80>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1e      	ldr	r2, [pc, #120]	; (800552c <HAL_TIM_Base_Start_IT+0xcc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d013      	beq.n	80054e0 <HAL_TIM_Base_Start_IT+0x80>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <HAL_TIM_Base_Start_IT+0xd0>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00e      	beq.n	80054e0 <HAL_TIM_Base_Start_IT+0x80>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <HAL_TIM_Base_Start_IT+0xd4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d009      	beq.n	80054e0 <HAL_TIM_Base_Start_IT+0x80>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a19      	ldr	r2, [pc, #100]	; (8005538 <HAL_TIM_Base_Start_IT+0xd8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d004      	beq.n	80054e0 <HAL_TIM_Base_Start_IT+0x80>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a18      	ldr	r2, [pc, #96]	; (800553c <HAL_TIM_Base_Start_IT+0xdc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d111      	bne.n	8005504 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2b06      	cmp	r3, #6
 80054f0:	d010      	beq.n	8005514 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0201 	orr.w	r2, r2, #1
 8005500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005502:	e007      	b.n	8005514 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f042 0201 	orr.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40010000 	.word	0x40010000
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800
 8005530:	40000c00 	.word	0x40000c00
 8005534:	40010400 	.word	0x40010400
 8005538:	40014000 	.word	0x40014000
 800553c:	40001800 	.word	0x40001800

08005540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e041      	b.n	80055d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f839 	bl	80055de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4619      	mov	r1, r3
 800557e:	4610      	mov	r0, r2
 8005580:	f000 ff26 	bl	80063d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d109      	bne.n	8005618 <HAL_TIM_PWM_Start+0x24>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800560a:	b2db      	uxtb	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	bf14      	ite	ne
 8005610:	2301      	movne	r3, #1
 8005612:	2300      	moveq	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	e022      	b.n	800565e <HAL_TIM_PWM_Start+0x6a>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b04      	cmp	r3, #4
 800561c:	d109      	bne.n	8005632 <HAL_TIM_PWM_Start+0x3e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b01      	cmp	r3, #1
 8005628:	bf14      	ite	ne
 800562a:	2301      	movne	r3, #1
 800562c:	2300      	moveq	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	e015      	b.n	800565e <HAL_TIM_PWM_Start+0x6a>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b08      	cmp	r3, #8
 8005636:	d109      	bne.n	800564c <HAL_TIM_PWM_Start+0x58>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800563e:	b2db      	uxtb	r3, r3
 8005640:	2b01      	cmp	r3, #1
 8005642:	bf14      	ite	ne
 8005644:	2301      	movne	r3, #1
 8005646:	2300      	moveq	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	e008      	b.n	800565e <HAL_TIM_PWM_Start+0x6a>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e07c      	b.n	8005760 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d104      	bne.n	8005676 <HAL_TIM_PWM_Start+0x82>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005674:	e013      	b.n	800569e <HAL_TIM_PWM_Start+0xaa>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b04      	cmp	r3, #4
 800567a:	d104      	bne.n	8005686 <HAL_TIM_PWM_Start+0x92>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005684:	e00b      	b.n	800569e <HAL_TIM_PWM_Start+0xaa>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b08      	cmp	r3, #8
 800568a:	d104      	bne.n	8005696 <HAL_TIM_PWM_Start+0xa2>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005694:	e003      	b.n	800569e <HAL_TIM_PWM_Start+0xaa>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2202      	movs	r2, #2
 800569a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2201      	movs	r2, #1
 80056a4:	6839      	ldr	r1, [r7, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f001 fb38 	bl	8006d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2d      	ldr	r2, [pc, #180]	; (8005768 <HAL_TIM_PWM_Start+0x174>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <HAL_TIM_PWM_Start+0xcc>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2c      	ldr	r2, [pc, #176]	; (800576c <HAL_TIM_PWM_Start+0x178>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d101      	bne.n	80056c4 <HAL_TIM_PWM_Start+0xd0>
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <HAL_TIM_PWM_Start+0xd2>
 80056c4:	2300      	movs	r3, #0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d007      	beq.n	80056da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a22      	ldr	r2, [pc, #136]	; (8005768 <HAL_TIM_PWM_Start+0x174>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d022      	beq.n	800572a <HAL_TIM_PWM_Start+0x136>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ec:	d01d      	beq.n	800572a <HAL_TIM_PWM_Start+0x136>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1f      	ldr	r2, [pc, #124]	; (8005770 <HAL_TIM_PWM_Start+0x17c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d018      	beq.n	800572a <HAL_TIM_PWM_Start+0x136>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <HAL_TIM_PWM_Start+0x180>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <HAL_TIM_PWM_Start+0x136>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1c      	ldr	r2, [pc, #112]	; (8005778 <HAL_TIM_PWM_Start+0x184>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00e      	beq.n	800572a <HAL_TIM_PWM_Start+0x136>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a16      	ldr	r2, [pc, #88]	; (800576c <HAL_TIM_PWM_Start+0x178>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d009      	beq.n	800572a <HAL_TIM_PWM_Start+0x136>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a18      	ldr	r2, [pc, #96]	; (800577c <HAL_TIM_PWM_Start+0x188>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_TIM_PWM_Start+0x136>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a16      	ldr	r2, [pc, #88]	; (8005780 <HAL_TIM_PWM_Start+0x18c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d111      	bne.n	800574e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2b06      	cmp	r3, #6
 800573a:	d010      	beq.n	800575e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0201 	orr.w	r2, r2, #1
 800574a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574c:	e007      	b.n	800575e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f042 0201 	orr.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40010000 	.word	0x40010000
 800576c:	40010400 	.word	0x40010400
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40000c00 	.word	0x40000c00
 800577c:	40014000 	.word	0x40014000
 8005780:	40001800 	.word	0x40001800

08005784 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e041      	b.n	800581a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fd f9ec 	bl	8002b88 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3304      	adds	r3, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f000 fe04 	bl	80063d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <HAL_TIM_IC_Start+0x1a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800583a:	b2db      	uxtb	r3, r3
 800583c:	e013      	b.n	8005866 <HAL_TIM_IC_Start+0x42>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	2b04      	cmp	r3, #4
 8005842:	d104      	bne.n	800584e <HAL_TIM_IC_Start+0x2a>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800584a:	b2db      	uxtb	r3, r3
 800584c:	e00b      	b.n	8005866 <HAL_TIM_IC_Start+0x42>
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b08      	cmp	r3, #8
 8005852:	d104      	bne.n	800585e <HAL_TIM_IC_Start+0x3a>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800585a:	b2db      	uxtb	r3, r3
 800585c:	e003      	b.n	8005866 <HAL_TIM_IC_Start+0x42>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005864:	b2db      	uxtb	r3, r3
 8005866:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d104      	bne.n	8005878 <HAL_TIM_IC_Start+0x54>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005874:	b2db      	uxtb	r3, r3
 8005876:	e013      	b.n	80058a0 <HAL_TIM_IC_Start+0x7c>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b04      	cmp	r3, #4
 800587c:	d104      	bne.n	8005888 <HAL_TIM_IC_Start+0x64>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005884:	b2db      	uxtb	r3, r3
 8005886:	e00b      	b.n	80058a0 <HAL_TIM_IC_Start+0x7c>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b08      	cmp	r3, #8
 800588c:	d104      	bne.n	8005898 <HAL_TIM_IC_Start+0x74>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005894:	b2db      	uxtb	r3, r3
 8005896:	e003      	b.n	80058a0 <HAL_TIM_IC_Start+0x7c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d102      	bne.n	80058ae <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80058a8:	7bbb      	ldrb	r3, [r7, #14]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d001      	beq.n	80058b2 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e081      	b.n	80059b6 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <HAL_TIM_IC_Start+0x9e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c0:	e013      	b.n	80058ea <HAL_TIM_IC_Start+0xc6>
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d104      	bne.n	80058d2 <HAL_TIM_IC_Start+0xae>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d0:	e00b      	b.n	80058ea <HAL_TIM_IC_Start+0xc6>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d104      	bne.n	80058e2 <HAL_TIM_IC_Start+0xbe>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e0:	e003      	b.n	80058ea <HAL_TIM_IC_Start+0xc6>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_IC_Start+0xd6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058f8:	e013      	b.n	8005922 <HAL_TIM_IC_Start+0xfe>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b04      	cmp	r3, #4
 80058fe:	d104      	bne.n	800590a <HAL_TIM_IC_Start+0xe6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005908:	e00b      	b.n	8005922 <HAL_TIM_IC_Start+0xfe>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b08      	cmp	r3, #8
 800590e:	d104      	bne.n	800591a <HAL_TIM_IC_Start+0xf6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005918:	e003      	b.n	8005922 <HAL_TIM_IC_Start+0xfe>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2201      	movs	r2, #1
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f001 f9f6 	bl	8006d1c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a22      	ldr	r2, [pc, #136]	; (80059c0 <HAL_TIM_IC_Start+0x19c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d022      	beq.n	8005980 <HAL_TIM_IC_Start+0x15c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005942:	d01d      	beq.n	8005980 <HAL_TIM_IC_Start+0x15c>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1e      	ldr	r2, [pc, #120]	; (80059c4 <HAL_TIM_IC_Start+0x1a0>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d018      	beq.n	8005980 <HAL_TIM_IC_Start+0x15c>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <HAL_TIM_IC_Start+0x1a4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d013      	beq.n	8005980 <HAL_TIM_IC_Start+0x15c>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_TIM_IC_Start+0x1a8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d00e      	beq.n	8005980 <HAL_TIM_IC_Start+0x15c>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1a      	ldr	r2, [pc, #104]	; (80059d0 <HAL_TIM_IC_Start+0x1ac>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d009      	beq.n	8005980 <HAL_TIM_IC_Start+0x15c>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <HAL_TIM_IC_Start+0x1b0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIM_IC_Start+0x15c>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <HAL_TIM_IC_Start+0x1b4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d111      	bne.n	80059a4 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b06      	cmp	r3, #6
 8005990:	d010      	beq.n	80059b4 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0201 	orr.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a2:	e007      	b.n	80059b4 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0201 	orr.w	r2, r2, #1
 80059b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40010000 	.word	0x40010000
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40000c00 	.word	0x40000c00
 80059d0:	40010400 	.word	0x40010400
 80059d4:	40014000 	.word	0x40014000
 80059d8:	40001800 	.word	0x40001800

080059dc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_IC_Start_IT+0x1e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	e013      	b.n	8005a22 <HAL_TIM_IC_Start_IT+0x46>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_IC_Start_IT+0x2e>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	e00b      	b.n	8005a22 <HAL_TIM_IC_Start_IT+0x46>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_IC_Start_IT+0x3e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	e003      	b.n	8005a22 <HAL_TIM_IC_Start_IT+0x46>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d104      	bne.n	8005a34 <HAL_TIM_IC_Start_IT+0x58>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	e013      	b.n	8005a5c <HAL_TIM_IC_Start_IT+0x80>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d104      	bne.n	8005a44 <HAL_TIM_IC_Start_IT+0x68>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	e00b      	b.n	8005a5c <HAL_TIM_IC_Start_IT+0x80>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d104      	bne.n	8005a54 <HAL_TIM_IC_Start_IT+0x78>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	e003      	b.n	8005a5c <HAL_TIM_IC_Start_IT+0x80>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a5e:	7bbb      	ldrb	r3, [r7, #14]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d102      	bne.n	8005a6a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a64:	7b7b      	ldrb	r3, [r7, #13]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d001      	beq.n	8005a6e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e0cc      	b.n	8005c08 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d104      	bne.n	8005a7e <HAL_TIM_IC_Start_IT+0xa2>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a7c:	e013      	b.n	8005aa6 <HAL_TIM_IC_Start_IT+0xca>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_IC_Start_IT+0xb2>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a8c:	e00b      	b.n	8005aa6 <HAL_TIM_IC_Start_IT+0xca>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_IC_Start_IT+0xc2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a9c:	e003      	b.n	8005aa6 <HAL_TIM_IC_Start_IT+0xca>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_IC_Start_IT+0xda>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ab4:	e013      	b.n	8005ade <HAL_TIM_IC_Start_IT+0x102>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d104      	bne.n	8005ac6 <HAL_TIM_IC_Start_IT+0xea>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ac4:	e00b      	b.n	8005ade <HAL_TIM_IC_Start_IT+0x102>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_IC_Start_IT+0xfa>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad4:	e003      	b.n	8005ade <HAL_TIM_IC_Start_IT+0x102>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2202      	movs	r2, #2
 8005ada:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b0c      	cmp	r3, #12
 8005ae2:	d841      	bhi.n	8005b68 <HAL_TIM_IC_Start_IT+0x18c>
 8005ae4:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <HAL_TIM_IC_Start_IT+0x110>)
 8005ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aea:	bf00      	nop
 8005aec:	08005b21 	.word	0x08005b21
 8005af0:	08005b69 	.word	0x08005b69
 8005af4:	08005b69 	.word	0x08005b69
 8005af8:	08005b69 	.word	0x08005b69
 8005afc:	08005b33 	.word	0x08005b33
 8005b00:	08005b69 	.word	0x08005b69
 8005b04:	08005b69 	.word	0x08005b69
 8005b08:	08005b69 	.word	0x08005b69
 8005b0c:	08005b45 	.word	0x08005b45
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b69 	.word	0x08005b69
 8005b18:	08005b69 	.word	0x08005b69
 8005b1c:	08005b57 	.word	0x08005b57
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0202 	orr.w	r2, r2, #2
 8005b2e:	60da      	str	r2, [r3, #12]
      break;
 8005b30:	e01d      	b.n	8005b6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0204 	orr.w	r2, r2, #4
 8005b40:	60da      	str	r2, [r3, #12]
      break;
 8005b42:	e014      	b.n	8005b6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0208 	orr.w	r2, r2, #8
 8005b52:	60da      	str	r2, [r3, #12]
      break;
 8005b54:	e00b      	b.n	8005b6e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 0210 	orr.w	r2, r2, #16
 8005b64:	60da      	str	r2, [r3, #12]
      break;
 8005b66:	e002      	b.n	8005b6e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d148      	bne.n	8005c06 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 f8cd 	bl	8006d1c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <HAL_TIM_IC_Start_IT+0x234>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d022      	beq.n	8005bd2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b94:	d01d      	beq.n	8005bd2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1e      	ldr	r2, [pc, #120]	; (8005c14 <HAL_TIM_IC_Start_IT+0x238>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d018      	beq.n	8005bd2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <HAL_TIM_IC_Start_IT+0x23c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d013      	beq.n	8005bd2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1b      	ldr	r2, [pc, #108]	; (8005c1c <HAL_TIM_IC_Start_IT+0x240>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00e      	beq.n	8005bd2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <HAL_TIM_IC_Start_IT+0x244>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d009      	beq.n	8005bd2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a18      	ldr	r2, [pc, #96]	; (8005c24 <HAL_TIM_IC_Start_IT+0x248>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d004      	beq.n	8005bd2 <HAL_TIM_IC_Start_IT+0x1f6>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <HAL_TIM_IC_Start_IT+0x24c>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d111      	bne.n	8005bf6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b06      	cmp	r3, #6
 8005be2:	d010      	beq.n	8005c06 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0201 	orr.w	r2, r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf4:	e007      	b.n	8005c06 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0201 	orr.w	r2, r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	40010000 	.word	0x40010000
 8005c14:	40000400 	.word	0x40000400
 8005c18:	40000800 	.word	0x40000800
 8005c1c:	40000c00 	.word	0x40000c00
 8005c20:	40010400 	.word	0x40010400
 8005c24:	40014000 	.word	0x40014000
 8005c28:	40001800 	.word	0x40001800

08005c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d122      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d11b      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0202 	mvn.w	r2, #2
 8005c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f003 0303 	and.w	r3, r3, #3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fc fbfe 	bl	8002470 <HAL_TIM_IC_CaptureCallback>
 8005c74:	e005      	b.n	8005c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fb8c 	bl	8006394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fb93 	bl	80063a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d122      	bne.n	8005cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d11b      	bne.n	8005cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0204 	mvn.w	r2, #4
 8005cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fc fbd4 	bl	8002470 <HAL_TIM_IC_CaptureCallback>
 8005cc8:	e005      	b.n	8005cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fb62 	bl	8006394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 fb69 	bl	80063a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d122      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d11b      	bne.n	8005d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0208 	mvn.w	r2, #8
 8005d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2204      	movs	r2, #4
 8005d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fc fbaa 	bl	8002470 <HAL_TIM_IC_CaptureCallback>
 8005d1c:	e005      	b.n	8005d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fb38 	bl	8006394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fb3f 	bl	80063a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f003 0310 	and.w	r3, r3, #16
 8005d3a:	2b10      	cmp	r3, #16
 8005d3c:	d122      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d11b      	bne.n	8005d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f06f 0210 	mvn.w	r2, #16
 8005d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2208      	movs	r2, #8
 8005d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fc fb80 	bl	8002470 <HAL_TIM_IC_CaptureCallback>
 8005d70:	e005      	b.n	8005d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fb0e 	bl	8006394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fb15 	bl	80063a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d10e      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f003 0301 	and.w	r3, r3, #1
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d107      	bne.n	8005db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f06f 0201 	mvn.w	r2, #1
 8005da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fc fb56 	bl	800245c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dba:	2b80      	cmp	r3, #128	; 0x80
 8005dbc:	d10e      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	2b80      	cmp	r3, #128	; 0x80
 8005dca:	d107      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f001 f84c 	bl	8006e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d10e      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df4:	2b40      	cmp	r3, #64	; 0x40
 8005df6:	d107      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fada 	bl	80063bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d10e      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d107      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0220 	mvn.w	r2, #32
 8005e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f001 f816 	bl	8006e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e34:	bf00      	nop
 8005e36:	3708      	adds	r7, #8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d101      	bne.n	8005e5a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005e56:	2302      	movs	r3, #2
 8005e58:	e088      	b.n	8005f6c <HAL_TIM_IC_ConfigChannel+0x130>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d11b      	bne.n	8005ea0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	6819      	ldr	r1, [r3, #0]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f000 fd8c 	bl	8006994 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 020c 	bic.w	r2, r2, #12
 8005e8a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6999      	ldr	r1, [r3, #24]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	619a      	str	r2, [r3, #24]
 8005e9e:	e060      	b.n	8005f62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d11c      	bne.n	8005ee0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6818      	ldr	r0, [r3, #0]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	6819      	ldr	r1, [r3, #0]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f000 fe10 	bl	8006ada <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ec8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	6999      	ldr	r1, [r3, #24]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	021a      	lsls	r2, r3, #8
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	619a      	str	r2, [r3, #24]
 8005ede:	e040      	b.n	8005f62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d11b      	bne.n	8005f1e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	6819      	ldr	r1, [r3, #0]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f000 fe5d 	bl	8006bb4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 020c 	bic.w	r2, r2, #12
 8005f08:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69d9      	ldr	r1, [r3, #28]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	61da      	str	r2, [r3, #28]
 8005f1c:	e021      	b.n	8005f62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b0c      	cmp	r3, #12
 8005f22:	d11c      	bne.n	8005f5e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6818      	ldr	r0, [r3, #0]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	6819      	ldr	r1, [r3, #0]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f000 fe7a 	bl	8006c2c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69da      	ldr	r2, [r3, #28]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f46:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	69d9      	ldr	r1, [r3, #28]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	021a      	lsls	r2, r3, #8
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	61da      	str	r2, [r3, #28]
 8005f5c:	e001      	b.n	8005f62 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f80:	2300      	movs	r3, #0
 8005f82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e0ae      	b.n	80060f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b0c      	cmp	r3, #12
 8005f9e:	f200 809f 	bhi.w	80060e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fdd 	.word	0x08005fdd
 8005fac:	080060e1 	.word	0x080060e1
 8005fb0:	080060e1 	.word	0x080060e1
 8005fb4:	080060e1 	.word	0x080060e1
 8005fb8:	0800601d 	.word	0x0800601d
 8005fbc:	080060e1 	.word	0x080060e1
 8005fc0:	080060e1 	.word	0x080060e1
 8005fc4:	080060e1 	.word	0x080060e1
 8005fc8:	0800605f 	.word	0x0800605f
 8005fcc:	080060e1 	.word	0x080060e1
 8005fd0:	080060e1 	.word	0x080060e1
 8005fd4:	080060e1 	.word	0x080060e1
 8005fd8:	0800609f 	.word	0x0800609f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68b9      	ldr	r1, [r7, #8]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 fa94 	bl	8006510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0208 	orr.w	r2, r2, #8
 8005ff6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0204 	bic.w	r2, r2, #4
 8006006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6999      	ldr	r1, [r3, #24]
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	691a      	ldr	r2, [r3, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	619a      	str	r2, [r3, #24]
      break;
 800601a:	e064      	b.n	80060e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68b9      	ldr	r1, [r7, #8]
 8006022:	4618      	mov	r0, r3
 8006024:	f000 fae4 	bl	80065f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699a      	ldr	r2, [r3, #24]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	699a      	ldr	r2, [r3, #24]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6999      	ldr	r1, [r3, #24]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	021a      	lsls	r2, r3, #8
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	619a      	str	r2, [r3, #24]
      break;
 800605c:	e043      	b.n	80060e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68b9      	ldr	r1, [r7, #8]
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fb39 	bl	80066dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	69da      	ldr	r2, [r3, #28]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f042 0208 	orr.w	r2, r2, #8
 8006078:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0204 	bic.w	r2, r2, #4
 8006088:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69d9      	ldr	r1, [r3, #28]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	61da      	str	r2, [r3, #28]
      break;
 800609c:	e023      	b.n	80060e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68b9      	ldr	r1, [r7, #8]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f000 fb8d 	bl	80067c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69da      	ldr	r2, [r3, #28]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	69d9      	ldr	r1, [r3, #28]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	021a      	lsls	r2, r3, #8
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	61da      	str	r2, [r3, #28]
      break;
 80060de:	e002      	b.n	80060e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]
      break;
 80060e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3718      	adds	r7, #24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_TIM_ConfigClockSource+0x1c>
 8006110:	2302      	movs	r3, #2
 8006112:	e0b4      	b.n	800627e <HAL_TIM_ConfigClockSource+0x186>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800613a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800614c:	d03e      	beq.n	80061cc <HAL_TIM_ConfigClockSource+0xd4>
 800614e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006152:	f200 8087 	bhi.w	8006264 <HAL_TIM_ConfigClockSource+0x16c>
 8006156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615a:	f000 8086 	beq.w	800626a <HAL_TIM_ConfigClockSource+0x172>
 800615e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006162:	d87f      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x16c>
 8006164:	2b70      	cmp	r3, #112	; 0x70
 8006166:	d01a      	beq.n	800619e <HAL_TIM_ConfigClockSource+0xa6>
 8006168:	2b70      	cmp	r3, #112	; 0x70
 800616a:	d87b      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x16c>
 800616c:	2b60      	cmp	r3, #96	; 0x60
 800616e:	d050      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0x11a>
 8006170:	2b60      	cmp	r3, #96	; 0x60
 8006172:	d877      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x16c>
 8006174:	2b50      	cmp	r3, #80	; 0x50
 8006176:	d03c      	beq.n	80061f2 <HAL_TIM_ConfigClockSource+0xfa>
 8006178:	2b50      	cmp	r3, #80	; 0x50
 800617a:	d873      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x16c>
 800617c:	2b40      	cmp	r3, #64	; 0x40
 800617e:	d058      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0x13a>
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	d86f      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x16c>
 8006184:	2b30      	cmp	r3, #48	; 0x30
 8006186:	d064      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x15a>
 8006188:	2b30      	cmp	r3, #48	; 0x30
 800618a:	d86b      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x16c>
 800618c:	2b20      	cmp	r3, #32
 800618e:	d060      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x15a>
 8006190:	2b20      	cmp	r3, #32
 8006192:	d867      	bhi.n	8006264 <HAL_TIM_ConfigClockSource+0x16c>
 8006194:	2b00      	cmp	r3, #0
 8006196:	d05c      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x15a>
 8006198:	2b10      	cmp	r3, #16
 800619a:	d05a      	beq.n	8006252 <HAL_TIM_ConfigClockSource+0x15a>
 800619c:	e062      	b.n	8006264 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6899      	ldr	r1, [r3, #8]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	685a      	ldr	r2, [r3, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f000 fd95 	bl	8006cdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	609a      	str	r2, [r3, #8]
      break;
 80061ca:	e04f      	b.n	800626c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	6899      	ldr	r1, [r3, #8]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f000 fd7e 	bl	8006cdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689a      	ldr	r2, [r3, #8]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061ee:	609a      	str	r2, [r3, #8]
      break;
 80061f0:	e03c      	b.n	800626c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6818      	ldr	r0, [r3, #0]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6859      	ldr	r1, [r3, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	461a      	mov	r2, r3
 8006200:	f000 fc3c 	bl	8006a7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2150      	movs	r1, #80	; 0x50
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fd4b 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006210:	e02c      	b.n	800626c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6859      	ldr	r1, [r3, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	461a      	mov	r2, r3
 8006220:	f000 fc98 	bl	8006b54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2160      	movs	r1, #96	; 0x60
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fd3b 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006230:	e01c      	b.n	800626c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6859      	ldr	r1, [r3, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	461a      	mov	r2, r3
 8006240:	f000 fc1c 	bl	8006a7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2140      	movs	r1, #64	; 0x40
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fd2b 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006250:	e00c      	b.n	800626c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4619      	mov	r1, r3
 800625c:	4610      	mov	r0, r2
 800625e:	f000 fd22 	bl	8006ca6 <TIM_ITRx_SetConfig>
      break;
 8006262:	e003      	b.n	800626c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
      break;
 8006268:	e000      	b.n	800626c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800626a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b082      	sub	sp, #8
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006296:	2b01      	cmp	r3, #1
 8006298:	d101      	bne.n	800629e <HAL_TIM_SlaveConfigSynchro+0x18>
 800629a:	2302      	movs	r3, #2
 800629c:	e031      	b.n	8006302 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2201      	movs	r2, #1
 80062a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2202      	movs	r2, #2
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fadd 	bl	8006870 <TIM_SlaveTimer_SetConfig>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d009      	beq.n	80062d0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e018      	b.n	8006302 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062de:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062ee:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
	...

0800630c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b0c      	cmp	r3, #12
 800631e:	d831      	bhi.n	8006384 <HAL_TIM_ReadCapturedValue+0x78>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <HAL_TIM_ReadCapturedValue+0x1c>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	0800635d 	.word	0x0800635d
 800632c:	08006385 	.word	0x08006385
 8006330:	08006385 	.word	0x08006385
 8006334:	08006385 	.word	0x08006385
 8006338:	08006367 	.word	0x08006367
 800633c:	08006385 	.word	0x08006385
 8006340:	08006385 	.word	0x08006385
 8006344:	08006385 	.word	0x08006385
 8006348:	08006371 	.word	0x08006371
 800634c:	08006385 	.word	0x08006385
 8006350:	08006385 	.word	0x08006385
 8006354:	08006385 	.word	0x08006385
 8006358:	0800637b 	.word	0x0800637b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006362:	60fb      	str	r3, [r7, #12]

      break;
 8006364:	e00f      	b.n	8006386 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	60fb      	str	r3, [r7, #12]

      break;
 800636e:	e00a      	b.n	8006386 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006376:	60fb      	str	r3, [r7, #12]

      break;
 8006378:	e005      	b.n	8006386 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	60fb      	str	r3, [r7, #12]

      break;
 8006382:	e000      	b.n	8006386 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006384:	bf00      	nop
  }

  return tmpreg;
 8006386:	68fb      	ldr	r3, [r7, #12]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063c4:	bf00      	nop
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a40      	ldr	r2, [pc, #256]	; (80064e4 <TIM_Base_SetConfig+0x114>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d013      	beq.n	8006410 <TIM_Base_SetConfig+0x40>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ee:	d00f      	beq.n	8006410 <TIM_Base_SetConfig+0x40>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a3d      	ldr	r2, [pc, #244]	; (80064e8 <TIM_Base_SetConfig+0x118>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00b      	beq.n	8006410 <TIM_Base_SetConfig+0x40>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a3c      	ldr	r2, [pc, #240]	; (80064ec <TIM_Base_SetConfig+0x11c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d007      	beq.n	8006410 <TIM_Base_SetConfig+0x40>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a3b      	ldr	r2, [pc, #236]	; (80064f0 <TIM_Base_SetConfig+0x120>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_Base_SetConfig+0x40>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a3a      	ldr	r2, [pc, #232]	; (80064f4 <TIM_Base_SetConfig+0x124>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d108      	bne.n	8006422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a2f      	ldr	r2, [pc, #188]	; (80064e4 <TIM_Base_SetConfig+0x114>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d02b      	beq.n	8006482 <TIM_Base_SetConfig+0xb2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006430:	d027      	beq.n	8006482 <TIM_Base_SetConfig+0xb2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a2c      	ldr	r2, [pc, #176]	; (80064e8 <TIM_Base_SetConfig+0x118>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d023      	beq.n	8006482 <TIM_Base_SetConfig+0xb2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a2b      	ldr	r2, [pc, #172]	; (80064ec <TIM_Base_SetConfig+0x11c>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d01f      	beq.n	8006482 <TIM_Base_SetConfig+0xb2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a2a      	ldr	r2, [pc, #168]	; (80064f0 <TIM_Base_SetConfig+0x120>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01b      	beq.n	8006482 <TIM_Base_SetConfig+0xb2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a29      	ldr	r2, [pc, #164]	; (80064f4 <TIM_Base_SetConfig+0x124>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d017      	beq.n	8006482 <TIM_Base_SetConfig+0xb2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a28      	ldr	r2, [pc, #160]	; (80064f8 <TIM_Base_SetConfig+0x128>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <TIM_Base_SetConfig+0xb2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a27      	ldr	r2, [pc, #156]	; (80064fc <TIM_Base_SetConfig+0x12c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00f      	beq.n	8006482 <TIM_Base_SetConfig+0xb2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a26      	ldr	r2, [pc, #152]	; (8006500 <TIM_Base_SetConfig+0x130>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00b      	beq.n	8006482 <TIM_Base_SetConfig+0xb2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a25      	ldr	r2, [pc, #148]	; (8006504 <TIM_Base_SetConfig+0x134>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d007      	beq.n	8006482 <TIM_Base_SetConfig+0xb2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a24      	ldr	r2, [pc, #144]	; (8006508 <TIM_Base_SetConfig+0x138>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d003      	beq.n	8006482 <TIM_Base_SetConfig+0xb2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a23      	ldr	r2, [pc, #140]	; (800650c <TIM_Base_SetConfig+0x13c>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d108      	bne.n	8006494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a0a      	ldr	r2, [pc, #40]	; (80064e4 <TIM_Base_SetConfig+0x114>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_Base_SetConfig+0xf8>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a0c      	ldr	r2, [pc, #48]	; (80064f4 <TIM_Base_SetConfig+0x124>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d103      	bne.n	80064d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	615a      	str	r2, [r3, #20]
}
 80064d6:	bf00      	nop
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40010000 	.word	0x40010000
 80064e8:	40000400 	.word	0x40000400
 80064ec:	40000800 	.word	0x40000800
 80064f0:	40000c00 	.word	0x40000c00
 80064f4:	40010400 	.word	0x40010400
 80064f8:	40014000 	.word	0x40014000
 80064fc:	40014400 	.word	0x40014400
 8006500:	40014800 	.word	0x40014800
 8006504:	40001800 	.word	0x40001800
 8006508:	40001c00 	.word	0x40001c00
 800650c:	40002000 	.word	0x40002000

08006510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f023 0201 	bic.w	r2, r3, #1
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0303 	bic.w	r3, r3, #3
 8006546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f023 0302 	bic.w	r3, r3, #2
 8006558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	4313      	orrs	r3, r2
 8006562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <TIM_OC1_SetConfig+0xd8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d003      	beq.n	8006574 <TIM_OC1_SetConfig+0x64>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a1f      	ldr	r2, [pc, #124]	; (80065ec <TIM_OC1_SetConfig+0xdc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d10c      	bne.n	800658e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0308 	bic.w	r3, r3, #8
 800657a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f023 0304 	bic.w	r3, r3, #4
 800658c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a15      	ldr	r2, [pc, #84]	; (80065e8 <TIM_OC1_SetConfig+0xd8>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d003      	beq.n	800659e <TIM_OC1_SetConfig+0x8e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a14      	ldr	r2, [pc, #80]	; (80065ec <TIM_OC1_SetConfig+0xdc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d111      	bne.n	80065c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	693a      	ldr	r2, [r7, #16]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4313      	orrs	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	693a      	ldr	r2, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	621a      	str	r2, [r3, #32]
}
 80065dc:	bf00      	nop
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	40010000 	.word	0x40010000
 80065ec:	40010400 	.word	0x40010400

080065f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f023 0210 	bic.w	r2, r3, #16
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800661e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	021b      	lsls	r3, r3, #8
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0320 	bic.w	r3, r3, #32
 800663a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	011b      	lsls	r3, r3, #4
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	4313      	orrs	r3, r2
 8006646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a22      	ldr	r2, [pc, #136]	; (80066d4 <TIM_OC2_SetConfig+0xe4>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d003      	beq.n	8006658 <TIM_OC2_SetConfig+0x68>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a21      	ldr	r2, [pc, #132]	; (80066d8 <TIM_OC2_SetConfig+0xe8>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d10d      	bne.n	8006674 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800665e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a17      	ldr	r2, [pc, #92]	; (80066d4 <TIM_OC2_SetConfig+0xe4>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d003      	beq.n	8006684 <TIM_OC2_SetConfig+0x94>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a16      	ldr	r2, [pc, #88]	; (80066d8 <TIM_OC2_SetConfig+0xe8>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d113      	bne.n	80066ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800668a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006692:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	695b      	ldr	r3, [r3, #20]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	4313      	orrs	r3, r2
 800669e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	621a      	str	r2, [r3, #32]
}
 80066c6:	bf00      	nop
 80066c8:	371c      	adds	r7, #28
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40010000 	.word	0x40010000
 80066d8:	40010400 	.word	0x40010400

080066dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800670a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0303 	bic.w	r3, r3, #3
 8006712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006724:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	021b      	lsls	r3, r3, #8
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4313      	orrs	r3, r2
 8006730:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a21      	ldr	r2, [pc, #132]	; (80067bc <TIM_OC3_SetConfig+0xe0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d003      	beq.n	8006742 <TIM_OC3_SetConfig+0x66>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a20      	ldr	r2, [pc, #128]	; (80067c0 <TIM_OC3_SetConfig+0xe4>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d10d      	bne.n	800675e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006748:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800675c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a16      	ldr	r2, [pc, #88]	; (80067bc <TIM_OC3_SetConfig+0xe0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_OC3_SetConfig+0x92>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a15      	ldr	r2, [pc, #84]	; (80067c0 <TIM_OC3_SetConfig+0xe4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d113      	bne.n	8006796 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800677c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	011b      	lsls	r3, r3, #4
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4313      	orrs	r3, r2
 8006788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	621a      	str	r2, [r3, #32]
}
 80067b0:	bf00      	nop
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	40010000 	.word	0x40010000
 80067c0:	40010400 	.word	0x40010400

080067c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	021b      	lsls	r3, r3, #8
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800680e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	031b      	lsls	r3, r3, #12
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a12      	ldr	r2, [pc, #72]	; (8006868 <TIM_OC4_SetConfig+0xa4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d003      	beq.n	800682c <TIM_OC4_SetConfig+0x68>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a11      	ldr	r2, [pc, #68]	; (800686c <TIM_OC4_SetConfig+0xa8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d109      	bne.n	8006840 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	019b      	lsls	r3, r3, #6
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	621a      	str	r2, [r3, #32]
}
 800685a:	bf00      	nop
 800685c:	371c      	adds	r7, #28
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40010000 	.word	0x40010000
 800686c:	40010400 	.word	0x40010400

08006870 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	f023 0307 	bic.w	r3, r3, #7
 800689e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b70      	cmp	r3, #112	; 0x70
 80068b8:	d01a      	beq.n	80068f0 <TIM_SlaveTimer_SetConfig+0x80>
 80068ba:	2b70      	cmp	r3, #112	; 0x70
 80068bc:	d860      	bhi.n	8006980 <TIM_SlaveTimer_SetConfig+0x110>
 80068be:	2b60      	cmp	r3, #96	; 0x60
 80068c0:	d054      	beq.n	800696c <TIM_SlaveTimer_SetConfig+0xfc>
 80068c2:	2b60      	cmp	r3, #96	; 0x60
 80068c4:	d85c      	bhi.n	8006980 <TIM_SlaveTimer_SetConfig+0x110>
 80068c6:	2b50      	cmp	r3, #80	; 0x50
 80068c8:	d046      	beq.n	8006958 <TIM_SlaveTimer_SetConfig+0xe8>
 80068ca:	2b50      	cmp	r3, #80	; 0x50
 80068cc:	d858      	bhi.n	8006980 <TIM_SlaveTimer_SetConfig+0x110>
 80068ce:	2b40      	cmp	r3, #64	; 0x40
 80068d0:	d019      	beq.n	8006906 <TIM_SlaveTimer_SetConfig+0x96>
 80068d2:	2b40      	cmp	r3, #64	; 0x40
 80068d4:	d854      	bhi.n	8006980 <TIM_SlaveTimer_SetConfig+0x110>
 80068d6:	2b30      	cmp	r3, #48	; 0x30
 80068d8:	d055      	beq.n	8006986 <TIM_SlaveTimer_SetConfig+0x116>
 80068da:	2b30      	cmp	r3, #48	; 0x30
 80068dc:	d850      	bhi.n	8006980 <TIM_SlaveTimer_SetConfig+0x110>
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d051      	beq.n	8006986 <TIM_SlaveTimer_SetConfig+0x116>
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d84c      	bhi.n	8006980 <TIM_SlaveTimer_SetConfig+0x110>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d04d      	beq.n	8006986 <TIM_SlaveTimer_SetConfig+0x116>
 80068ea:	2b10      	cmp	r3, #16
 80068ec:	d04b      	beq.n	8006986 <TIM_SlaveTimer_SetConfig+0x116>
 80068ee:	e047      	b.n	8006980 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6818      	ldr	r0, [r3, #0]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68d9      	ldr	r1, [r3, #12]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	689a      	ldr	r2, [r3, #8]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f000 f9ec 	bl	8006cdc <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006904:	e040      	b.n	8006988 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b05      	cmp	r3, #5
 800690c:	d101      	bne.n	8006912 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e03b      	b.n	800698a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6a1a      	ldr	r2, [r3, #32]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0201 	bic.w	r2, r2, #1
 8006928:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006938:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	4313      	orrs	r3, r2
 8006944:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	621a      	str	r2, [r3, #32]
      break;
 8006956:	e017      	b.n	8006988 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	6899      	ldr	r1, [r3, #8]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	461a      	mov	r2, r3
 8006966:	f000 f889 	bl	8006a7c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800696a:	e00d      	b.n	8006988 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	6899      	ldr	r1, [r3, #8]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	461a      	mov	r2, r3
 800697a:	f000 f8eb 	bl	8006b54 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800697e:	e003      	b.n	8006988 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	75fb      	strb	r3, [r7, #23]
      break;
 8006984:	e000      	b.n	8006988 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006986:	bf00      	nop
  }

  return status;
 8006988:	7dfb      	ldrb	r3, [r7, #23]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f023 0201 	bic.w	r2, r3, #1
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4a28      	ldr	r2, [pc, #160]	; (8006a60 <TIM_TI1_SetConfig+0xcc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d01b      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c8:	d017      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4a25      	ldr	r2, [pc, #148]	; (8006a64 <TIM_TI1_SetConfig+0xd0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4a24      	ldr	r2, [pc, #144]	; (8006a68 <TIM_TI1_SetConfig+0xd4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00f      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a23      	ldr	r2, [pc, #140]	; (8006a6c <TIM_TI1_SetConfig+0xd8>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00b      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a22      	ldr	r2, [pc, #136]	; (8006a70 <TIM_TI1_SetConfig+0xdc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d007      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a21      	ldr	r2, [pc, #132]	; (8006a74 <TIM_TI1_SetConfig+0xe0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d003      	beq.n	80069fa <TIM_TI1_SetConfig+0x66>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4a20      	ldr	r2, [pc, #128]	; (8006a78 <TIM_TI1_SetConfig+0xe4>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d101      	bne.n	80069fe <TIM_TI1_SetConfig+0x6a>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <TIM_TI1_SetConfig+0x6c>
 80069fe:	2300      	movs	r3, #0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d008      	beq.n	8006a16 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f023 0303 	bic.w	r3, r3, #3
 8006a0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	e003      	b.n	8006a1e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f043 0301 	orr.w	r3, r3, #1
 8006a1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f023 030a 	bic.w	r3, r3, #10
 8006a38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f003 030a 	and.w	r3, r3, #10
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40000400 	.word	0x40000400
 8006a68:	40000800 	.word	0x40000800
 8006a6c:	40000c00 	.word	0x40000c00
 8006a70:	40010400 	.word	0x40010400
 8006a74:	40014000 	.word	0x40014000
 8006a78:	40001800 	.word	0x40001800

08006a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	f023 0201 	bic.w	r2, r3, #1
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f023 030a 	bic.w	r3, r3, #10
 8006ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	621a      	str	r2, [r3, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b087      	sub	sp, #28
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
 8006ae6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	f023 0210 	bic.w	r2, r3, #16
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	031b      	lsls	r3, r3, #12
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	621a      	str	r2, [r3, #32]
}
 8006b48:	bf00      	nop
 8006b4a:	371c      	adds	r7, #28
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b087      	sub	sp, #28
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	f023 0210 	bic.w	r2, r3, #16
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	031b      	lsls	r3, r3, #12
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	621a      	str	r2, [r3, #32]
}
 8006ba8:	bf00      	nop
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	f023 0303 	bic.w	r3, r3, #3
 8006be0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	021b      	lsls	r3, r3, #8
 8006c0a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	621a      	str	r2, [r3, #32]
}
 8006c20:	bf00      	nop
 8006c22:	371c      	adds	r7, #28
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
 8006c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	031b      	lsls	r3, r3, #12
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006c7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	031b      	lsls	r3, r3, #12
 8006c84:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	621a      	str	r2, [r3, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f043 0307 	orr.w	r3, r3, #7
 8006cc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	609a      	str	r2, [r3, #8]
}
 8006cd0:	bf00      	nop
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	021a      	lsls	r2, r3, #8
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	609a      	str	r2, [r3, #8]
}
 8006d10:	bf00      	nop
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2201      	movs	r2, #1
 8006d30:	fa02 f303 	lsl.w	r3, r2, r3
 8006d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6a1a      	ldr	r2, [r3, #32]
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	401a      	ands	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1a      	ldr	r2, [r3, #32]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	fa01 f303 	lsl.w	r3, r1, r3
 8006d54:	431a      	orrs	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
	...

08006d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d101      	bne.n	8006d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d7c:	2302      	movs	r3, #2
 8006d7e:	e05a      	b.n	8006e36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2202      	movs	r2, #2
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a21      	ldr	r2, [pc, #132]	; (8006e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d022      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dcc:	d01d      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a1d      	ldr	r2, [pc, #116]	; (8006e48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d018      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d013      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1a      	ldr	r2, [pc, #104]	; (8006e50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00e      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a18      	ldr	r2, [pc, #96]	; (8006e54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d009      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d004      	beq.n	8006e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a15      	ldr	r2, [pc, #84]	; (8006e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d10c      	bne.n	8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68ba      	ldr	r2, [r7, #8]
 8006e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40010000 	.word	0x40010000
 8006e48:	40000400 	.word	0x40000400
 8006e4c:	40000800 	.word	0x40000800
 8006e50:	40000c00 	.word	0x40000c00
 8006e54:	40010400 	.word	0x40010400
 8006e58:	40014000 	.word	0x40014000
 8006e5c:	40001800 	.word	0x40001800

08006e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e68:	bf00      	nop
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e03f      	b.n	8006f1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d106      	bne.n	8006eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fb ffee 	bl	8002e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2224      	movs	r2, #36	; 0x24
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68da      	ldr	r2, [r3, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f929 	bl	8007124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	695a      	ldr	r2, [r3, #20]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68da      	ldr	r2, [r3, #12]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b08a      	sub	sp, #40	; 0x28
 8006f26:	af02      	add	r7, sp, #8
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	603b      	str	r3, [r7, #0]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d17c      	bne.n	800703c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <HAL_UART_Transmit+0x2c>
 8006f48:	88fb      	ldrh	r3, [r7, #6]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e075      	b.n	800703e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d101      	bne.n	8006f60 <HAL_UART_Transmit+0x3e>
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	e06e      	b.n	800703e <HAL_UART_Transmit+0x11c>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2221      	movs	r2, #33	; 0x21
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f76:	f7fc f8fb 	bl	8003170 <HAL_GetTick>
 8006f7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	88fa      	ldrh	r2, [r7, #6]
 8006f80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	88fa      	ldrh	r2, [r7, #6]
 8006f86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f90:	d108      	bne.n	8006fa4 <HAL_UART_Transmit+0x82>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d104      	bne.n	8006fa4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	e003      	b.n	8006fac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006fb4:	e02a      	b.n	800700c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2180      	movs	r1, #128	; 0x80
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 f840 	bl	8007046 <UART_WaitOnFlagUntilTimeout>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e036      	b.n	800703e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d10b      	bne.n	8006fee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fe4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	3302      	adds	r3, #2
 8006fea:	61bb      	str	r3, [r7, #24]
 8006fec:	e007      	b.n	8006ffe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	781a      	ldrb	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007002:	b29b      	uxth	r3, r3
 8007004:	3b01      	subs	r3, #1
 8007006:	b29a      	uxth	r2, r3
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1cf      	bne.n	8006fb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	2200      	movs	r2, #0
 800701e:	2140      	movs	r1, #64	; 0x40
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f810 	bl	8007046 <UART_WaitOnFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e006      	b.n	800703e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	e000      	b.n	800703e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800703c:	2302      	movs	r3, #2
  }
}
 800703e:	4618      	mov	r0, r3
 8007040:	3720      	adds	r7, #32
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b090      	sub	sp, #64	; 0x40
 800704a:	af00      	add	r7, sp, #0
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	603b      	str	r3, [r7, #0]
 8007052:	4613      	mov	r3, r2
 8007054:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007056:	e050      	b.n	80070fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705e:	d04c      	beq.n	80070fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <UART_WaitOnFlagUntilTimeout+0x30>
 8007066:	f7fc f883 	bl	8003170 <HAL_GetTick>
 800706a:	4602      	mov	r2, r0
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	1ad3      	subs	r3, r2, r3
 8007070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007072:	429a      	cmp	r2, r3
 8007074:	d241      	bcs.n	80070fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	330c      	adds	r3, #12
 800707c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	330c      	adds	r3, #12
 8007094:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007096:	637a      	str	r2, [r7, #52]	; 0x34
 8007098:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800709c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e5      	bne.n	8007076 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3314      	adds	r3, #20
 80070b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	613b      	str	r3, [r7, #16]
   return(result);
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f023 0301 	bic.w	r3, r3, #1
 80070c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3314      	adds	r3, #20
 80070c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ca:	623a      	str	r2, [r7, #32]
 80070cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	69f9      	ldr	r1, [r7, #28]
 80070d0:	6a3a      	ldr	r2, [r7, #32]
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e5      	bne.n	80070aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e00f      	b.n	800711a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	4013      	ands	r3, r2
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	429a      	cmp	r2, r3
 8007108:	bf0c      	ite	eq
 800710a:	2301      	moveq	r3, #1
 800710c:	2300      	movne	r3, #0
 800710e:	b2db      	uxtb	r3, r3
 8007110:	461a      	mov	r2, r3
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	429a      	cmp	r2, r3
 8007116:	d09f      	beq.n	8007058 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3740      	adds	r7, #64	; 0x40
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007128:	b0c0      	sub	sp, #256	; 0x100
 800712a:	af00      	add	r7, sp, #0
 800712c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007140:	68d9      	ldr	r1, [r3, #12]
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	ea40 0301 	orr.w	r3, r0, r1
 800714c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800714e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	431a      	orrs	r2, r3
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	431a      	orrs	r2, r3
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800717c:	f021 010c 	bic.w	r1, r1, #12
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800718a:	430b      	orrs	r3, r1
 800718c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800718e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800719a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719e:	6999      	ldr	r1, [r3, #24]
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	ea40 0301 	orr.w	r3, r0, r1
 80071aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4b8f      	ldr	r3, [pc, #572]	; (80073f0 <UART_SetConfig+0x2cc>)
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d005      	beq.n	80071c4 <UART_SetConfig+0xa0>
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	4b8d      	ldr	r3, [pc, #564]	; (80073f4 <UART_SetConfig+0x2d0>)
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d104      	bne.n	80071ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071c4:	f7fc ffe8 	bl	8004198 <HAL_RCC_GetPCLK2Freq>
 80071c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071cc:	e003      	b.n	80071d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071ce:	f7fc ffcf 	bl	8004170 <HAL_RCC_GetPCLK1Freq>
 80071d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e0:	f040 810c 	bne.w	80073fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071e8:	2200      	movs	r2, #0
 80071ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071f6:	4622      	mov	r2, r4
 80071f8:	462b      	mov	r3, r5
 80071fa:	1891      	adds	r1, r2, r2
 80071fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80071fe:	415b      	adcs	r3, r3
 8007200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007202:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007206:	4621      	mov	r1, r4
 8007208:	eb12 0801 	adds.w	r8, r2, r1
 800720c:	4629      	mov	r1, r5
 800720e:	eb43 0901 	adc.w	r9, r3, r1
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	f04f 0300 	mov.w	r3, #0
 800721a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800721e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007226:	4690      	mov	r8, r2
 8007228:	4699      	mov	r9, r3
 800722a:	4623      	mov	r3, r4
 800722c:	eb18 0303 	adds.w	r3, r8, r3
 8007230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007234:	462b      	mov	r3, r5
 8007236:	eb49 0303 	adc.w	r3, r9, r3
 800723a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800723e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800724a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800724e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007252:	460b      	mov	r3, r1
 8007254:	18db      	adds	r3, r3, r3
 8007256:	653b      	str	r3, [r7, #80]	; 0x50
 8007258:	4613      	mov	r3, r2
 800725a:	eb42 0303 	adc.w	r3, r2, r3
 800725e:	657b      	str	r3, [r7, #84]	; 0x54
 8007260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007268:	f7f9 fd0e 	bl	8000c88 <__aeabi_uldivmod>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4b61      	ldr	r3, [pc, #388]	; (80073f8 <UART_SetConfig+0x2d4>)
 8007272:	fba3 2302 	umull	r2, r3, r3, r2
 8007276:	095b      	lsrs	r3, r3, #5
 8007278:	011c      	lsls	r4, r3, #4
 800727a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800727e:	2200      	movs	r2, #0
 8007280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007284:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007288:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800728c:	4642      	mov	r2, r8
 800728e:	464b      	mov	r3, r9
 8007290:	1891      	adds	r1, r2, r2
 8007292:	64b9      	str	r1, [r7, #72]	; 0x48
 8007294:	415b      	adcs	r3, r3
 8007296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007298:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800729c:	4641      	mov	r1, r8
 800729e:	eb12 0a01 	adds.w	sl, r2, r1
 80072a2:	4649      	mov	r1, r9
 80072a4:	eb43 0b01 	adc.w	fp, r3, r1
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072bc:	4692      	mov	sl, r2
 80072be:	469b      	mov	fp, r3
 80072c0:	4643      	mov	r3, r8
 80072c2:	eb1a 0303 	adds.w	r3, sl, r3
 80072c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072ca:	464b      	mov	r3, r9
 80072cc:	eb4b 0303 	adc.w	r3, fp, r3
 80072d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072e8:	460b      	mov	r3, r1
 80072ea:	18db      	adds	r3, r3, r3
 80072ec:	643b      	str	r3, [r7, #64]	; 0x40
 80072ee:	4613      	mov	r3, r2
 80072f0:	eb42 0303 	adc.w	r3, r2, r3
 80072f4:	647b      	str	r3, [r7, #68]	; 0x44
 80072f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072fe:	f7f9 fcc3 	bl	8000c88 <__aeabi_uldivmod>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4611      	mov	r1, r2
 8007308:	4b3b      	ldr	r3, [pc, #236]	; (80073f8 <UART_SetConfig+0x2d4>)
 800730a:	fba3 2301 	umull	r2, r3, r3, r1
 800730e:	095b      	lsrs	r3, r3, #5
 8007310:	2264      	movs	r2, #100	; 0x64
 8007312:	fb02 f303 	mul.w	r3, r2, r3
 8007316:	1acb      	subs	r3, r1, r3
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800731e:	4b36      	ldr	r3, [pc, #216]	; (80073f8 <UART_SetConfig+0x2d4>)
 8007320:	fba3 2302 	umull	r2, r3, r3, r2
 8007324:	095b      	lsrs	r3, r3, #5
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800732c:	441c      	add	r4, r3
 800732e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007332:	2200      	movs	r2, #0
 8007334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007338:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800733c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007340:	4642      	mov	r2, r8
 8007342:	464b      	mov	r3, r9
 8007344:	1891      	adds	r1, r2, r2
 8007346:	63b9      	str	r1, [r7, #56]	; 0x38
 8007348:	415b      	adcs	r3, r3
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800734c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007350:	4641      	mov	r1, r8
 8007352:	1851      	adds	r1, r2, r1
 8007354:	6339      	str	r1, [r7, #48]	; 0x30
 8007356:	4649      	mov	r1, r9
 8007358:	414b      	adcs	r3, r1
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
 800735c:	f04f 0200 	mov.w	r2, #0
 8007360:	f04f 0300 	mov.w	r3, #0
 8007364:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007368:	4659      	mov	r1, fp
 800736a:	00cb      	lsls	r3, r1, #3
 800736c:	4651      	mov	r1, sl
 800736e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007372:	4651      	mov	r1, sl
 8007374:	00ca      	lsls	r2, r1, #3
 8007376:	4610      	mov	r0, r2
 8007378:	4619      	mov	r1, r3
 800737a:	4603      	mov	r3, r0
 800737c:	4642      	mov	r2, r8
 800737e:	189b      	adds	r3, r3, r2
 8007380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007384:	464b      	mov	r3, r9
 8007386:	460a      	mov	r2, r1
 8007388:	eb42 0303 	adc.w	r3, r2, r3
 800738c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800739c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073a4:	460b      	mov	r3, r1
 80073a6:	18db      	adds	r3, r3, r3
 80073a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80073aa:	4613      	mov	r3, r2
 80073ac:	eb42 0303 	adc.w	r3, r2, r3
 80073b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073ba:	f7f9 fc65 	bl	8000c88 <__aeabi_uldivmod>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <UART_SetConfig+0x2d4>)
 80073c4:	fba3 1302 	umull	r1, r3, r3, r2
 80073c8:	095b      	lsrs	r3, r3, #5
 80073ca:	2164      	movs	r1, #100	; 0x64
 80073cc:	fb01 f303 	mul.w	r3, r1, r3
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	3332      	adds	r3, #50	; 0x32
 80073d6:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <UART_SetConfig+0x2d4>)
 80073d8:	fba2 2303 	umull	r2, r3, r2, r3
 80073dc:	095b      	lsrs	r3, r3, #5
 80073de:	f003 0207 	and.w	r2, r3, #7
 80073e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4422      	add	r2, r4
 80073ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073ec:	e105      	b.n	80075fa <UART_SetConfig+0x4d6>
 80073ee:	bf00      	nop
 80073f0:	40011000 	.word	0x40011000
 80073f4:	40011400 	.word	0x40011400
 80073f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007400:	2200      	movs	r2, #0
 8007402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007406:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800740a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800740e:	4642      	mov	r2, r8
 8007410:	464b      	mov	r3, r9
 8007412:	1891      	adds	r1, r2, r2
 8007414:	6239      	str	r1, [r7, #32]
 8007416:	415b      	adcs	r3, r3
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
 800741a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800741e:	4641      	mov	r1, r8
 8007420:	1854      	adds	r4, r2, r1
 8007422:	4649      	mov	r1, r9
 8007424:	eb43 0501 	adc.w	r5, r3, r1
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	00eb      	lsls	r3, r5, #3
 8007432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007436:	00e2      	lsls	r2, r4, #3
 8007438:	4614      	mov	r4, r2
 800743a:	461d      	mov	r5, r3
 800743c:	4643      	mov	r3, r8
 800743e:	18e3      	adds	r3, r4, r3
 8007440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007444:	464b      	mov	r3, r9
 8007446:	eb45 0303 	adc.w	r3, r5, r3
 800744a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800744e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800745a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800745e:	f04f 0200 	mov.w	r2, #0
 8007462:	f04f 0300 	mov.w	r3, #0
 8007466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800746a:	4629      	mov	r1, r5
 800746c:	008b      	lsls	r3, r1, #2
 800746e:	4621      	mov	r1, r4
 8007470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007474:	4621      	mov	r1, r4
 8007476:	008a      	lsls	r2, r1, #2
 8007478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800747c:	f7f9 fc04 	bl	8000c88 <__aeabi_uldivmod>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4b60      	ldr	r3, [pc, #384]	; (8007608 <UART_SetConfig+0x4e4>)
 8007486:	fba3 2302 	umull	r2, r3, r3, r2
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	011c      	lsls	r4, r3, #4
 800748e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007492:	2200      	movs	r2, #0
 8007494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007498:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800749c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	1891      	adds	r1, r2, r2
 80074a6:	61b9      	str	r1, [r7, #24]
 80074a8:	415b      	adcs	r3, r3
 80074aa:	61fb      	str	r3, [r7, #28]
 80074ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074b0:	4641      	mov	r1, r8
 80074b2:	1851      	adds	r1, r2, r1
 80074b4:	6139      	str	r1, [r7, #16]
 80074b6:	4649      	mov	r1, r9
 80074b8:	414b      	adcs	r3, r1
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074c8:	4659      	mov	r1, fp
 80074ca:	00cb      	lsls	r3, r1, #3
 80074cc:	4651      	mov	r1, sl
 80074ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074d2:	4651      	mov	r1, sl
 80074d4:	00ca      	lsls	r2, r1, #3
 80074d6:	4610      	mov	r0, r2
 80074d8:	4619      	mov	r1, r3
 80074da:	4603      	mov	r3, r0
 80074dc:	4642      	mov	r2, r8
 80074de:	189b      	adds	r3, r3, r2
 80074e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074e4:	464b      	mov	r3, r9
 80074e6:	460a      	mov	r2, r1
 80074e8:	eb42 0303 	adc.w	r3, r2, r3
 80074ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80074fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007508:	4649      	mov	r1, r9
 800750a:	008b      	lsls	r3, r1, #2
 800750c:	4641      	mov	r1, r8
 800750e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007512:	4641      	mov	r1, r8
 8007514:	008a      	lsls	r2, r1, #2
 8007516:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800751a:	f7f9 fbb5 	bl	8000c88 <__aeabi_uldivmod>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4b39      	ldr	r3, [pc, #228]	; (8007608 <UART_SetConfig+0x4e4>)
 8007524:	fba3 1302 	umull	r1, r3, r3, r2
 8007528:	095b      	lsrs	r3, r3, #5
 800752a:	2164      	movs	r1, #100	; 0x64
 800752c:	fb01 f303 	mul.w	r3, r1, r3
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	3332      	adds	r3, #50	; 0x32
 8007536:	4a34      	ldr	r2, [pc, #208]	; (8007608 <UART_SetConfig+0x4e4>)
 8007538:	fba2 2303 	umull	r2, r3, r2, r3
 800753c:	095b      	lsrs	r3, r3, #5
 800753e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007542:	441c      	add	r4, r3
 8007544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007548:	2200      	movs	r2, #0
 800754a:	673b      	str	r3, [r7, #112]	; 0x70
 800754c:	677a      	str	r2, [r7, #116]	; 0x74
 800754e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007552:	4642      	mov	r2, r8
 8007554:	464b      	mov	r3, r9
 8007556:	1891      	adds	r1, r2, r2
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	415b      	adcs	r3, r3
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007562:	4641      	mov	r1, r8
 8007564:	1851      	adds	r1, r2, r1
 8007566:	6039      	str	r1, [r7, #0]
 8007568:	4649      	mov	r1, r9
 800756a:	414b      	adcs	r3, r1
 800756c:	607b      	str	r3, [r7, #4]
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	f04f 0300 	mov.w	r3, #0
 8007576:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800757a:	4659      	mov	r1, fp
 800757c:	00cb      	lsls	r3, r1, #3
 800757e:	4651      	mov	r1, sl
 8007580:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007584:	4651      	mov	r1, sl
 8007586:	00ca      	lsls	r2, r1, #3
 8007588:	4610      	mov	r0, r2
 800758a:	4619      	mov	r1, r3
 800758c:	4603      	mov	r3, r0
 800758e:	4642      	mov	r2, r8
 8007590:	189b      	adds	r3, r3, r2
 8007592:	66bb      	str	r3, [r7, #104]	; 0x68
 8007594:	464b      	mov	r3, r9
 8007596:	460a      	mov	r2, r1
 8007598:	eb42 0303 	adc.w	r3, r2, r3
 800759c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800759e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	663b      	str	r3, [r7, #96]	; 0x60
 80075a8:	667a      	str	r2, [r7, #100]	; 0x64
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	f04f 0300 	mov.w	r3, #0
 80075b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075b6:	4649      	mov	r1, r9
 80075b8:	008b      	lsls	r3, r1, #2
 80075ba:	4641      	mov	r1, r8
 80075bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075c0:	4641      	mov	r1, r8
 80075c2:	008a      	lsls	r2, r1, #2
 80075c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075c8:	f7f9 fb5e 	bl	8000c88 <__aeabi_uldivmod>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4b0d      	ldr	r3, [pc, #52]	; (8007608 <UART_SetConfig+0x4e4>)
 80075d2:	fba3 1302 	umull	r1, r3, r3, r2
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	2164      	movs	r1, #100	; 0x64
 80075da:	fb01 f303 	mul.w	r3, r1, r3
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	011b      	lsls	r3, r3, #4
 80075e2:	3332      	adds	r3, #50	; 0x32
 80075e4:	4a08      	ldr	r2, [pc, #32]	; (8007608 <UART_SetConfig+0x4e4>)
 80075e6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	f003 020f 	and.w	r2, r3, #15
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4422      	add	r2, r4
 80075f8:	609a      	str	r2, [r3, #8]
}
 80075fa:	bf00      	nop
 80075fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007600:	46bd      	mov	sp, r7
 8007602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007606:	bf00      	nop
 8007608:	51eb851f 	.word	0x51eb851f

0800760c <__libc_init_array>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	4d0d      	ldr	r5, [pc, #52]	; (8007644 <__libc_init_array+0x38>)
 8007610:	4c0d      	ldr	r4, [pc, #52]	; (8007648 <__libc_init_array+0x3c>)
 8007612:	1b64      	subs	r4, r4, r5
 8007614:	10a4      	asrs	r4, r4, #2
 8007616:	2600      	movs	r6, #0
 8007618:	42a6      	cmp	r6, r4
 800761a:	d109      	bne.n	8007630 <__libc_init_array+0x24>
 800761c:	4d0b      	ldr	r5, [pc, #44]	; (800764c <__libc_init_array+0x40>)
 800761e:	4c0c      	ldr	r4, [pc, #48]	; (8007650 <__libc_init_array+0x44>)
 8007620:	f004 f9a4 	bl	800b96c <_init>
 8007624:	1b64      	subs	r4, r4, r5
 8007626:	10a4      	asrs	r4, r4, #2
 8007628:	2600      	movs	r6, #0
 800762a:	42a6      	cmp	r6, r4
 800762c:	d105      	bne.n	800763a <__libc_init_array+0x2e>
 800762e:	bd70      	pop	{r4, r5, r6, pc}
 8007630:	f855 3b04 	ldr.w	r3, [r5], #4
 8007634:	4798      	blx	r3
 8007636:	3601      	adds	r6, #1
 8007638:	e7ee      	b.n	8007618 <__libc_init_array+0xc>
 800763a:	f855 3b04 	ldr.w	r3, [r5], #4
 800763e:	4798      	blx	r3
 8007640:	3601      	adds	r6, #1
 8007642:	e7f2      	b.n	800762a <__libc_init_array+0x1e>
 8007644:	0800bfd0 	.word	0x0800bfd0
 8007648:	0800bfd0 	.word	0x0800bfd0
 800764c:	0800bfd0 	.word	0x0800bfd0
 8007650:	0800bfd4 	.word	0x0800bfd4

08007654 <memcpy>:
 8007654:	440a      	add	r2, r1
 8007656:	4291      	cmp	r1, r2
 8007658:	f100 33ff 	add.w	r3, r0, #4294967295
 800765c:	d100      	bne.n	8007660 <memcpy+0xc>
 800765e:	4770      	bx	lr
 8007660:	b510      	push	{r4, lr}
 8007662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007666:	f803 4f01 	strb.w	r4, [r3, #1]!
 800766a:	4291      	cmp	r1, r2
 800766c:	d1f9      	bne.n	8007662 <memcpy+0xe>
 800766e:	bd10      	pop	{r4, pc}

08007670 <memset>:
 8007670:	4402      	add	r2, r0
 8007672:	4603      	mov	r3, r0
 8007674:	4293      	cmp	r3, r2
 8007676:	d100      	bne.n	800767a <memset+0xa>
 8007678:	4770      	bx	lr
 800767a:	f803 1b01 	strb.w	r1, [r3], #1
 800767e:	e7f9      	b.n	8007674 <memset+0x4>

08007680 <__cvt>:
 8007680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007684:	ec55 4b10 	vmov	r4, r5, d0
 8007688:	2d00      	cmp	r5, #0
 800768a:	460e      	mov	r6, r1
 800768c:	4619      	mov	r1, r3
 800768e:	462b      	mov	r3, r5
 8007690:	bfbb      	ittet	lt
 8007692:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007696:	461d      	movlt	r5, r3
 8007698:	2300      	movge	r3, #0
 800769a:	232d      	movlt	r3, #45	; 0x2d
 800769c:	700b      	strb	r3, [r1, #0]
 800769e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076a4:	4691      	mov	r9, r2
 80076a6:	f023 0820 	bic.w	r8, r3, #32
 80076aa:	bfbc      	itt	lt
 80076ac:	4622      	movlt	r2, r4
 80076ae:	4614      	movlt	r4, r2
 80076b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076b4:	d005      	beq.n	80076c2 <__cvt+0x42>
 80076b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076ba:	d100      	bne.n	80076be <__cvt+0x3e>
 80076bc:	3601      	adds	r6, #1
 80076be:	2102      	movs	r1, #2
 80076c0:	e000      	b.n	80076c4 <__cvt+0x44>
 80076c2:	2103      	movs	r1, #3
 80076c4:	ab03      	add	r3, sp, #12
 80076c6:	9301      	str	r3, [sp, #4]
 80076c8:	ab02      	add	r3, sp, #8
 80076ca:	9300      	str	r3, [sp, #0]
 80076cc:	ec45 4b10 	vmov	d0, r4, r5
 80076d0:	4653      	mov	r3, sl
 80076d2:	4632      	mov	r2, r6
 80076d4:	f000 fcec 	bl	80080b0 <_dtoa_r>
 80076d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076dc:	4607      	mov	r7, r0
 80076de:	d102      	bne.n	80076e6 <__cvt+0x66>
 80076e0:	f019 0f01 	tst.w	r9, #1
 80076e4:	d022      	beq.n	800772c <__cvt+0xac>
 80076e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076ea:	eb07 0906 	add.w	r9, r7, r6
 80076ee:	d110      	bne.n	8007712 <__cvt+0x92>
 80076f0:	783b      	ldrb	r3, [r7, #0]
 80076f2:	2b30      	cmp	r3, #48	; 0x30
 80076f4:	d10a      	bne.n	800770c <__cvt+0x8c>
 80076f6:	2200      	movs	r2, #0
 80076f8:	2300      	movs	r3, #0
 80076fa:	4620      	mov	r0, r4
 80076fc:	4629      	mov	r1, r5
 80076fe:	f7f9 fa03 	bl	8000b08 <__aeabi_dcmpeq>
 8007702:	b918      	cbnz	r0, 800770c <__cvt+0x8c>
 8007704:	f1c6 0601 	rsb	r6, r6, #1
 8007708:	f8ca 6000 	str.w	r6, [sl]
 800770c:	f8da 3000 	ldr.w	r3, [sl]
 8007710:	4499      	add	r9, r3
 8007712:	2200      	movs	r2, #0
 8007714:	2300      	movs	r3, #0
 8007716:	4620      	mov	r0, r4
 8007718:	4629      	mov	r1, r5
 800771a:	f7f9 f9f5 	bl	8000b08 <__aeabi_dcmpeq>
 800771e:	b108      	cbz	r0, 8007724 <__cvt+0xa4>
 8007720:	f8cd 900c 	str.w	r9, [sp, #12]
 8007724:	2230      	movs	r2, #48	; 0x30
 8007726:	9b03      	ldr	r3, [sp, #12]
 8007728:	454b      	cmp	r3, r9
 800772a:	d307      	bcc.n	800773c <__cvt+0xbc>
 800772c:	9b03      	ldr	r3, [sp, #12]
 800772e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007730:	1bdb      	subs	r3, r3, r7
 8007732:	4638      	mov	r0, r7
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	b004      	add	sp, #16
 8007738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773c:	1c59      	adds	r1, r3, #1
 800773e:	9103      	str	r1, [sp, #12]
 8007740:	701a      	strb	r2, [r3, #0]
 8007742:	e7f0      	b.n	8007726 <__cvt+0xa6>

08007744 <__exponent>:
 8007744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007746:	4603      	mov	r3, r0
 8007748:	2900      	cmp	r1, #0
 800774a:	bfb8      	it	lt
 800774c:	4249      	neglt	r1, r1
 800774e:	f803 2b02 	strb.w	r2, [r3], #2
 8007752:	bfb4      	ite	lt
 8007754:	222d      	movlt	r2, #45	; 0x2d
 8007756:	222b      	movge	r2, #43	; 0x2b
 8007758:	2909      	cmp	r1, #9
 800775a:	7042      	strb	r2, [r0, #1]
 800775c:	dd2a      	ble.n	80077b4 <__exponent+0x70>
 800775e:	f10d 0407 	add.w	r4, sp, #7
 8007762:	46a4      	mov	ip, r4
 8007764:	270a      	movs	r7, #10
 8007766:	46a6      	mov	lr, r4
 8007768:	460a      	mov	r2, r1
 800776a:	fb91 f6f7 	sdiv	r6, r1, r7
 800776e:	fb07 1516 	mls	r5, r7, r6, r1
 8007772:	3530      	adds	r5, #48	; 0x30
 8007774:	2a63      	cmp	r2, #99	; 0x63
 8007776:	f104 34ff 	add.w	r4, r4, #4294967295
 800777a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800777e:	4631      	mov	r1, r6
 8007780:	dcf1      	bgt.n	8007766 <__exponent+0x22>
 8007782:	3130      	adds	r1, #48	; 0x30
 8007784:	f1ae 0502 	sub.w	r5, lr, #2
 8007788:	f804 1c01 	strb.w	r1, [r4, #-1]
 800778c:	1c44      	adds	r4, r0, #1
 800778e:	4629      	mov	r1, r5
 8007790:	4561      	cmp	r1, ip
 8007792:	d30a      	bcc.n	80077aa <__exponent+0x66>
 8007794:	f10d 0209 	add.w	r2, sp, #9
 8007798:	eba2 020e 	sub.w	r2, r2, lr
 800779c:	4565      	cmp	r5, ip
 800779e:	bf88      	it	hi
 80077a0:	2200      	movhi	r2, #0
 80077a2:	4413      	add	r3, r2
 80077a4:	1a18      	subs	r0, r3, r0
 80077a6:	b003      	add	sp, #12
 80077a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077b2:	e7ed      	b.n	8007790 <__exponent+0x4c>
 80077b4:	2330      	movs	r3, #48	; 0x30
 80077b6:	3130      	adds	r1, #48	; 0x30
 80077b8:	7083      	strb	r3, [r0, #2]
 80077ba:	70c1      	strb	r1, [r0, #3]
 80077bc:	1d03      	adds	r3, r0, #4
 80077be:	e7f1      	b.n	80077a4 <__exponent+0x60>

080077c0 <_printf_float>:
 80077c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c4:	ed2d 8b02 	vpush	{d8}
 80077c8:	b08d      	sub	sp, #52	; 0x34
 80077ca:	460c      	mov	r4, r1
 80077cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077d0:	4616      	mov	r6, r2
 80077d2:	461f      	mov	r7, r3
 80077d4:	4605      	mov	r5, r0
 80077d6:	f001 fa59 	bl	8008c8c <_localeconv_r>
 80077da:	f8d0 a000 	ldr.w	sl, [r0]
 80077de:	4650      	mov	r0, sl
 80077e0:	f7f8 fd16 	bl	8000210 <strlen>
 80077e4:	2300      	movs	r3, #0
 80077e6:	930a      	str	r3, [sp, #40]	; 0x28
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	9305      	str	r3, [sp, #20]
 80077ec:	f8d8 3000 	ldr.w	r3, [r8]
 80077f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80077f4:	3307      	adds	r3, #7
 80077f6:	f023 0307 	bic.w	r3, r3, #7
 80077fa:	f103 0208 	add.w	r2, r3, #8
 80077fe:	f8c8 2000 	str.w	r2, [r8]
 8007802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007806:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800780a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800780e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007812:	9307      	str	r3, [sp, #28]
 8007814:	f8cd 8018 	str.w	r8, [sp, #24]
 8007818:	ee08 0a10 	vmov	s16, r0
 800781c:	4b9f      	ldr	r3, [pc, #636]	; (8007a9c <_printf_float+0x2dc>)
 800781e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007822:	f04f 32ff 	mov.w	r2, #4294967295
 8007826:	f7f9 f9a1 	bl	8000b6c <__aeabi_dcmpun>
 800782a:	bb88      	cbnz	r0, 8007890 <_printf_float+0xd0>
 800782c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007830:	4b9a      	ldr	r3, [pc, #616]	; (8007a9c <_printf_float+0x2dc>)
 8007832:	f04f 32ff 	mov.w	r2, #4294967295
 8007836:	f7f9 f97b 	bl	8000b30 <__aeabi_dcmple>
 800783a:	bb48      	cbnz	r0, 8007890 <_printf_float+0xd0>
 800783c:	2200      	movs	r2, #0
 800783e:	2300      	movs	r3, #0
 8007840:	4640      	mov	r0, r8
 8007842:	4649      	mov	r1, r9
 8007844:	f7f9 f96a 	bl	8000b1c <__aeabi_dcmplt>
 8007848:	b110      	cbz	r0, 8007850 <_printf_float+0x90>
 800784a:	232d      	movs	r3, #45	; 0x2d
 800784c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007850:	4b93      	ldr	r3, [pc, #588]	; (8007aa0 <_printf_float+0x2e0>)
 8007852:	4894      	ldr	r0, [pc, #592]	; (8007aa4 <_printf_float+0x2e4>)
 8007854:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007858:	bf94      	ite	ls
 800785a:	4698      	movls	r8, r3
 800785c:	4680      	movhi	r8, r0
 800785e:	2303      	movs	r3, #3
 8007860:	6123      	str	r3, [r4, #16]
 8007862:	9b05      	ldr	r3, [sp, #20]
 8007864:	f023 0204 	bic.w	r2, r3, #4
 8007868:	6022      	str	r2, [r4, #0]
 800786a:	f04f 0900 	mov.w	r9, #0
 800786e:	9700      	str	r7, [sp, #0]
 8007870:	4633      	mov	r3, r6
 8007872:	aa0b      	add	r2, sp, #44	; 0x2c
 8007874:	4621      	mov	r1, r4
 8007876:	4628      	mov	r0, r5
 8007878:	f000 f9d8 	bl	8007c2c <_printf_common>
 800787c:	3001      	adds	r0, #1
 800787e:	f040 8090 	bne.w	80079a2 <_printf_float+0x1e2>
 8007882:	f04f 30ff 	mov.w	r0, #4294967295
 8007886:	b00d      	add	sp, #52	; 0x34
 8007888:	ecbd 8b02 	vpop	{d8}
 800788c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007890:	4642      	mov	r2, r8
 8007892:	464b      	mov	r3, r9
 8007894:	4640      	mov	r0, r8
 8007896:	4649      	mov	r1, r9
 8007898:	f7f9 f968 	bl	8000b6c <__aeabi_dcmpun>
 800789c:	b140      	cbz	r0, 80078b0 <_printf_float+0xf0>
 800789e:	464b      	mov	r3, r9
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bfbc      	itt	lt
 80078a4:	232d      	movlt	r3, #45	; 0x2d
 80078a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078aa:	487f      	ldr	r0, [pc, #508]	; (8007aa8 <_printf_float+0x2e8>)
 80078ac:	4b7f      	ldr	r3, [pc, #508]	; (8007aac <_printf_float+0x2ec>)
 80078ae:	e7d1      	b.n	8007854 <_printf_float+0x94>
 80078b0:	6863      	ldr	r3, [r4, #4]
 80078b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078b6:	9206      	str	r2, [sp, #24]
 80078b8:	1c5a      	adds	r2, r3, #1
 80078ba:	d13f      	bne.n	800793c <_printf_float+0x17c>
 80078bc:	2306      	movs	r3, #6
 80078be:	6063      	str	r3, [r4, #4]
 80078c0:	9b05      	ldr	r3, [sp, #20]
 80078c2:	6861      	ldr	r1, [r4, #4]
 80078c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078c8:	2300      	movs	r3, #0
 80078ca:	9303      	str	r3, [sp, #12]
 80078cc:	ab0a      	add	r3, sp, #40	; 0x28
 80078ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078d2:	ab09      	add	r3, sp, #36	; 0x24
 80078d4:	ec49 8b10 	vmov	d0, r8, r9
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	6022      	str	r2, [r4, #0]
 80078dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078e0:	4628      	mov	r0, r5
 80078e2:	f7ff fecd 	bl	8007680 <__cvt>
 80078e6:	9b06      	ldr	r3, [sp, #24]
 80078e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078ea:	2b47      	cmp	r3, #71	; 0x47
 80078ec:	4680      	mov	r8, r0
 80078ee:	d108      	bne.n	8007902 <_printf_float+0x142>
 80078f0:	1cc8      	adds	r0, r1, #3
 80078f2:	db02      	blt.n	80078fa <_printf_float+0x13a>
 80078f4:	6863      	ldr	r3, [r4, #4]
 80078f6:	4299      	cmp	r1, r3
 80078f8:	dd41      	ble.n	800797e <_printf_float+0x1be>
 80078fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80078fe:	fa5f fb8b 	uxtb.w	fp, fp
 8007902:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007906:	d820      	bhi.n	800794a <_printf_float+0x18a>
 8007908:	3901      	subs	r1, #1
 800790a:	465a      	mov	r2, fp
 800790c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007910:	9109      	str	r1, [sp, #36]	; 0x24
 8007912:	f7ff ff17 	bl	8007744 <__exponent>
 8007916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007918:	1813      	adds	r3, r2, r0
 800791a:	2a01      	cmp	r2, #1
 800791c:	4681      	mov	r9, r0
 800791e:	6123      	str	r3, [r4, #16]
 8007920:	dc02      	bgt.n	8007928 <_printf_float+0x168>
 8007922:	6822      	ldr	r2, [r4, #0]
 8007924:	07d2      	lsls	r2, r2, #31
 8007926:	d501      	bpl.n	800792c <_printf_float+0x16c>
 8007928:	3301      	adds	r3, #1
 800792a:	6123      	str	r3, [r4, #16]
 800792c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007930:	2b00      	cmp	r3, #0
 8007932:	d09c      	beq.n	800786e <_printf_float+0xae>
 8007934:	232d      	movs	r3, #45	; 0x2d
 8007936:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800793a:	e798      	b.n	800786e <_printf_float+0xae>
 800793c:	9a06      	ldr	r2, [sp, #24]
 800793e:	2a47      	cmp	r2, #71	; 0x47
 8007940:	d1be      	bne.n	80078c0 <_printf_float+0x100>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1bc      	bne.n	80078c0 <_printf_float+0x100>
 8007946:	2301      	movs	r3, #1
 8007948:	e7b9      	b.n	80078be <_printf_float+0xfe>
 800794a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800794e:	d118      	bne.n	8007982 <_printf_float+0x1c2>
 8007950:	2900      	cmp	r1, #0
 8007952:	6863      	ldr	r3, [r4, #4]
 8007954:	dd0b      	ble.n	800796e <_printf_float+0x1ae>
 8007956:	6121      	str	r1, [r4, #16]
 8007958:	b913      	cbnz	r3, 8007960 <_printf_float+0x1a0>
 800795a:	6822      	ldr	r2, [r4, #0]
 800795c:	07d0      	lsls	r0, r2, #31
 800795e:	d502      	bpl.n	8007966 <_printf_float+0x1a6>
 8007960:	3301      	adds	r3, #1
 8007962:	440b      	add	r3, r1
 8007964:	6123      	str	r3, [r4, #16]
 8007966:	65a1      	str	r1, [r4, #88]	; 0x58
 8007968:	f04f 0900 	mov.w	r9, #0
 800796c:	e7de      	b.n	800792c <_printf_float+0x16c>
 800796e:	b913      	cbnz	r3, 8007976 <_printf_float+0x1b6>
 8007970:	6822      	ldr	r2, [r4, #0]
 8007972:	07d2      	lsls	r2, r2, #31
 8007974:	d501      	bpl.n	800797a <_printf_float+0x1ba>
 8007976:	3302      	adds	r3, #2
 8007978:	e7f4      	b.n	8007964 <_printf_float+0x1a4>
 800797a:	2301      	movs	r3, #1
 800797c:	e7f2      	b.n	8007964 <_printf_float+0x1a4>
 800797e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007984:	4299      	cmp	r1, r3
 8007986:	db05      	blt.n	8007994 <_printf_float+0x1d4>
 8007988:	6823      	ldr	r3, [r4, #0]
 800798a:	6121      	str	r1, [r4, #16]
 800798c:	07d8      	lsls	r0, r3, #31
 800798e:	d5ea      	bpl.n	8007966 <_printf_float+0x1a6>
 8007990:	1c4b      	adds	r3, r1, #1
 8007992:	e7e7      	b.n	8007964 <_printf_float+0x1a4>
 8007994:	2900      	cmp	r1, #0
 8007996:	bfd4      	ite	le
 8007998:	f1c1 0202 	rsble	r2, r1, #2
 800799c:	2201      	movgt	r2, #1
 800799e:	4413      	add	r3, r2
 80079a0:	e7e0      	b.n	8007964 <_printf_float+0x1a4>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	055a      	lsls	r2, r3, #21
 80079a6:	d407      	bmi.n	80079b8 <_printf_float+0x1f8>
 80079a8:	6923      	ldr	r3, [r4, #16]
 80079aa:	4642      	mov	r2, r8
 80079ac:	4631      	mov	r1, r6
 80079ae:	4628      	mov	r0, r5
 80079b0:	47b8      	blx	r7
 80079b2:	3001      	adds	r0, #1
 80079b4:	d12c      	bne.n	8007a10 <_printf_float+0x250>
 80079b6:	e764      	b.n	8007882 <_printf_float+0xc2>
 80079b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079bc:	f240 80e0 	bls.w	8007b80 <_printf_float+0x3c0>
 80079c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079c4:	2200      	movs	r2, #0
 80079c6:	2300      	movs	r3, #0
 80079c8:	f7f9 f89e 	bl	8000b08 <__aeabi_dcmpeq>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	d034      	beq.n	8007a3a <_printf_float+0x27a>
 80079d0:	4a37      	ldr	r2, [pc, #220]	; (8007ab0 <_printf_float+0x2f0>)
 80079d2:	2301      	movs	r3, #1
 80079d4:	4631      	mov	r1, r6
 80079d6:	4628      	mov	r0, r5
 80079d8:	47b8      	blx	r7
 80079da:	3001      	adds	r0, #1
 80079dc:	f43f af51 	beq.w	8007882 <_printf_float+0xc2>
 80079e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079e4:	429a      	cmp	r2, r3
 80079e6:	db02      	blt.n	80079ee <_printf_float+0x22e>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	07d8      	lsls	r0, r3, #31
 80079ec:	d510      	bpl.n	8007a10 <_printf_float+0x250>
 80079ee:	ee18 3a10 	vmov	r3, s16
 80079f2:	4652      	mov	r2, sl
 80079f4:	4631      	mov	r1, r6
 80079f6:	4628      	mov	r0, r5
 80079f8:	47b8      	blx	r7
 80079fa:	3001      	adds	r0, #1
 80079fc:	f43f af41 	beq.w	8007882 <_printf_float+0xc2>
 8007a00:	f04f 0800 	mov.w	r8, #0
 8007a04:	f104 091a 	add.w	r9, r4, #26
 8007a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	4543      	cmp	r3, r8
 8007a0e:	dc09      	bgt.n	8007a24 <_printf_float+0x264>
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	079b      	lsls	r3, r3, #30
 8007a14:	f100 8105 	bmi.w	8007c22 <_printf_float+0x462>
 8007a18:	68e0      	ldr	r0, [r4, #12]
 8007a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a1c:	4298      	cmp	r0, r3
 8007a1e:	bfb8      	it	lt
 8007a20:	4618      	movlt	r0, r3
 8007a22:	e730      	b.n	8007886 <_printf_float+0xc6>
 8007a24:	2301      	movs	r3, #1
 8007a26:	464a      	mov	r2, r9
 8007a28:	4631      	mov	r1, r6
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	47b8      	blx	r7
 8007a2e:	3001      	adds	r0, #1
 8007a30:	f43f af27 	beq.w	8007882 <_printf_float+0xc2>
 8007a34:	f108 0801 	add.w	r8, r8, #1
 8007a38:	e7e6      	b.n	8007a08 <_printf_float+0x248>
 8007a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	dc39      	bgt.n	8007ab4 <_printf_float+0x2f4>
 8007a40:	4a1b      	ldr	r2, [pc, #108]	; (8007ab0 <_printf_float+0x2f0>)
 8007a42:	2301      	movs	r3, #1
 8007a44:	4631      	mov	r1, r6
 8007a46:	4628      	mov	r0, r5
 8007a48:	47b8      	blx	r7
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	f43f af19 	beq.w	8007882 <_printf_float+0xc2>
 8007a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a54:	4313      	orrs	r3, r2
 8007a56:	d102      	bne.n	8007a5e <_printf_float+0x29e>
 8007a58:	6823      	ldr	r3, [r4, #0]
 8007a5a:	07d9      	lsls	r1, r3, #31
 8007a5c:	d5d8      	bpl.n	8007a10 <_printf_float+0x250>
 8007a5e:	ee18 3a10 	vmov	r3, s16
 8007a62:	4652      	mov	r2, sl
 8007a64:	4631      	mov	r1, r6
 8007a66:	4628      	mov	r0, r5
 8007a68:	47b8      	blx	r7
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	f43f af09 	beq.w	8007882 <_printf_float+0xc2>
 8007a70:	f04f 0900 	mov.w	r9, #0
 8007a74:	f104 0a1a 	add.w	sl, r4, #26
 8007a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a7a:	425b      	negs	r3, r3
 8007a7c:	454b      	cmp	r3, r9
 8007a7e:	dc01      	bgt.n	8007a84 <_printf_float+0x2c4>
 8007a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a82:	e792      	b.n	80079aa <_printf_float+0x1ea>
 8007a84:	2301      	movs	r3, #1
 8007a86:	4652      	mov	r2, sl
 8007a88:	4631      	mov	r1, r6
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	47b8      	blx	r7
 8007a8e:	3001      	adds	r0, #1
 8007a90:	f43f aef7 	beq.w	8007882 <_printf_float+0xc2>
 8007a94:	f109 0901 	add.w	r9, r9, #1
 8007a98:	e7ee      	b.n	8007a78 <_printf_float+0x2b8>
 8007a9a:	bf00      	nop
 8007a9c:	7fefffff 	.word	0x7fefffff
 8007aa0:	0800b9d4 	.word	0x0800b9d4
 8007aa4:	0800b9d8 	.word	0x0800b9d8
 8007aa8:	0800b9e0 	.word	0x0800b9e0
 8007aac:	0800b9dc 	.word	0x0800b9dc
 8007ab0:	0800b9e4 	.word	0x0800b9e4
 8007ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ab6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	bfa8      	it	ge
 8007abc:	461a      	movge	r2, r3
 8007abe:	2a00      	cmp	r2, #0
 8007ac0:	4691      	mov	r9, r2
 8007ac2:	dc37      	bgt.n	8007b34 <_printf_float+0x374>
 8007ac4:	f04f 0b00 	mov.w	fp, #0
 8007ac8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007acc:	f104 021a 	add.w	r2, r4, #26
 8007ad0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ad2:	9305      	str	r3, [sp, #20]
 8007ad4:	eba3 0309 	sub.w	r3, r3, r9
 8007ad8:	455b      	cmp	r3, fp
 8007ada:	dc33      	bgt.n	8007b44 <_printf_float+0x384>
 8007adc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	db3b      	blt.n	8007b5c <_printf_float+0x39c>
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	07da      	lsls	r2, r3, #31
 8007ae8:	d438      	bmi.n	8007b5c <_printf_float+0x39c>
 8007aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aec:	9a05      	ldr	r2, [sp, #20]
 8007aee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007af0:	1a9a      	subs	r2, r3, r2
 8007af2:	eba3 0901 	sub.w	r9, r3, r1
 8007af6:	4591      	cmp	r9, r2
 8007af8:	bfa8      	it	ge
 8007afa:	4691      	movge	r9, r2
 8007afc:	f1b9 0f00 	cmp.w	r9, #0
 8007b00:	dc35      	bgt.n	8007b6e <_printf_float+0x3ae>
 8007b02:	f04f 0800 	mov.w	r8, #0
 8007b06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b0a:	f104 0a1a 	add.w	sl, r4, #26
 8007b0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b12:	1a9b      	subs	r3, r3, r2
 8007b14:	eba3 0309 	sub.w	r3, r3, r9
 8007b18:	4543      	cmp	r3, r8
 8007b1a:	f77f af79 	ble.w	8007a10 <_printf_float+0x250>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4652      	mov	r2, sl
 8007b22:	4631      	mov	r1, r6
 8007b24:	4628      	mov	r0, r5
 8007b26:	47b8      	blx	r7
 8007b28:	3001      	adds	r0, #1
 8007b2a:	f43f aeaa 	beq.w	8007882 <_printf_float+0xc2>
 8007b2e:	f108 0801 	add.w	r8, r8, #1
 8007b32:	e7ec      	b.n	8007b0e <_printf_float+0x34e>
 8007b34:	4613      	mov	r3, r2
 8007b36:	4631      	mov	r1, r6
 8007b38:	4642      	mov	r2, r8
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	47b8      	blx	r7
 8007b3e:	3001      	adds	r0, #1
 8007b40:	d1c0      	bne.n	8007ac4 <_printf_float+0x304>
 8007b42:	e69e      	b.n	8007882 <_printf_float+0xc2>
 8007b44:	2301      	movs	r3, #1
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	9205      	str	r2, [sp, #20]
 8007b4c:	47b8      	blx	r7
 8007b4e:	3001      	adds	r0, #1
 8007b50:	f43f ae97 	beq.w	8007882 <_printf_float+0xc2>
 8007b54:	9a05      	ldr	r2, [sp, #20]
 8007b56:	f10b 0b01 	add.w	fp, fp, #1
 8007b5a:	e7b9      	b.n	8007ad0 <_printf_float+0x310>
 8007b5c:	ee18 3a10 	vmov	r3, s16
 8007b60:	4652      	mov	r2, sl
 8007b62:	4631      	mov	r1, r6
 8007b64:	4628      	mov	r0, r5
 8007b66:	47b8      	blx	r7
 8007b68:	3001      	adds	r0, #1
 8007b6a:	d1be      	bne.n	8007aea <_printf_float+0x32a>
 8007b6c:	e689      	b.n	8007882 <_printf_float+0xc2>
 8007b6e:	9a05      	ldr	r2, [sp, #20]
 8007b70:	464b      	mov	r3, r9
 8007b72:	4442      	add	r2, r8
 8007b74:	4631      	mov	r1, r6
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	d1c1      	bne.n	8007b02 <_printf_float+0x342>
 8007b7e:	e680      	b.n	8007882 <_printf_float+0xc2>
 8007b80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b82:	2a01      	cmp	r2, #1
 8007b84:	dc01      	bgt.n	8007b8a <_printf_float+0x3ca>
 8007b86:	07db      	lsls	r3, r3, #31
 8007b88:	d538      	bpl.n	8007bfc <_printf_float+0x43c>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	4631      	mov	r1, r6
 8007b90:	4628      	mov	r0, r5
 8007b92:	47b8      	blx	r7
 8007b94:	3001      	adds	r0, #1
 8007b96:	f43f ae74 	beq.w	8007882 <_printf_float+0xc2>
 8007b9a:	ee18 3a10 	vmov	r3, s16
 8007b9e:	4652      	mov	r2, sl
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	f43f ae6b 	beq.w	8007882 <_printf_float+0xc2>
 8007bac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f7f8 ffa8 	bl	8000b08 <__aeabi_dcmpeq>
 8007bb8:	b9d8      	cbnz	r0, 8007bf2 <_printf_float+0x432>
 8007bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bbc:	f108 0201 	add.w	r2, r8, #1
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	4631      	mov	r1, r6
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	47b8      	blx	r7
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d10e      	bne.n	8007bea <_printf_float+0x42a>
 8007bcc:	e659      	b.n	8007882 <_printf_float+0xc2>
 8007bce:	2301      	movs	r3, #1
 8007bd0:	4652      	mov	r2, sl
 8007bd2:	4631      	mov	r1, r6
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	47b8      	blx	r7
 8007bd8:	3001      	adds	r0, #1
 8007bda:	f43f ae52 	beq.w	8007882 <_printf_float+0xc2>
 8007bde:	f108 0801 	add.w	r8, r8, #1
 8007be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be4:	3b01      	subs	r3, #1
 8007be6:	4543      	cmp	r3, r8
 8007be8:	dcf1      	bgt.n	8007bce <_printf_float+0x40e>
 8007bea:	464b      	mov	r3, r9
 8007bec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007bf0:	e6dc      	b.n	80079ac <_printf_float+0x1ec>
 8007bf2:	f04f 0800 	mov.w	r8, #0
 8007bf6:	f104 0a1a 	add.w	sl, r4, #26
 8007bfa:	e7f2      	b.n	8007be2 <_printf_float+0x422>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	4642      	mov	r2, r8
 8007c00:	e7df      	b.n	8007bc2 <_printf_float+0x402>
 8007c02:	2301      	movs	r3, #1
 8007c04:	464a      	mov	r2, r9
 8007c06:	4631      	mov	r1, r6
 8007c08:	4628      	mov	r0, r5
 8007c0a:	47b8      	blx	r7
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	f43f ae38 	beq.w	8007882 <_printf_float+0xc2>
 8007c12:	f108 0801 	add.w	r8, r8, #1
 8007c16:	68e3      	ldr	r3, [r4, #12]
 8007c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c1a:	1a5b      	subs	r3, r3, r1
 8007c1c:	4543      	cmp	r3, r8
 8007c1e:	dcf0      	bgt.n	8007c02 <_printf_float+0x442>
 8007c20:	e6fa      	b.n	8007a18 <_printf_float+0x258>
 8007c22:	f04f 0800 	mov.w	r8, #0
 8007c26:	f104 0919 	add.w	r9, r4, #25
 8007c2a:	e7f4      	b.n	8007c16 <_printf_float+0x456>

08007c2c <_printf_common>:
 8007c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c30:	4616      	mov	r6, r2
 8007c32:	4699      	mov	r9, r3
 8007c34:	688a      	ldr	r2, [r1, #8]
 8007c36:	690b      	ldr	r3, [r1, #16]
 8007c38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	bfb8      	it	lt
 8007c40:	4613      	movlt	r3, r2
 8007c42:	6033      	str	r3, [r6, #0]
 8007c44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c48:	4607      	mov	r7, r0
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	b10a      	cbz	r2, 8007c52 <_printf_common+0x26>
 8007c4e:	3301      	adds	r3, #1
 8007c50:	6033      	str	r3, [r6, #0]
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	0699      	lsls	r1, r3, #26
 8007c56:	bf42      	ittt	mi
 8007c58:	6833      	ldrmi	r3, [r6, #0]
 8007c5a:	3302      	addmi	r3, #2
 8007c5c:	6033      	strmi	r3, [r6, #0]
 8007c5e:	6825      	ldr	r5, [r4, #0]
 8007c60:	f015 0506 	ands.w	r5, r5, #6
 8007c64:	d106      	bne.n	8007c74 <_printf_common+0x48>
 8007c66:	f104 0a19 	add.w	sl, r4, #25
 8007c6a:	68e3      	ldr	r3, [r4, #12]
 8007c6c:	6832      	ldr	r2, [r6, #0]
 8007c6e:	1a9b      	subs	r3, r3, r2
 8007c70:	42ab      	cmp	r3, r5
 8007c72:	dc26      	bgt.n	8007cc2 <_printf_common+0x96>
 8007c74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c78:	1e13      	subs	r3, r2, #0
 8007c7a:	6822      	ldr	r2, [r4, #0]
 8007c7c:	bf18      	it	ne
 8007c7e:	2301      	movne	r3, #1
 8007c80:	0692      	lsls	r2, r2, #26
 8007c82:	d42b      	bmi.n	8007cdc <_printf_common+0xb0>
 8007c84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c88:	4649      	mov	r1, r9
 8007c8a:	4638      	mov	r0, r7
 8007c8c:	47c0      	blx	r8
 8007c8e:	3001      	adds	r0, #1
 8007c90:	d01e      	beq.n	8007cd0 <_printf_common+0xa4>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	68e5      	ldr	r5, [r4, #12]
 8007c96:	6832      	ldr	r2, [r6, #0]
 8007c98:	f003 0306 	and.w	r3, r3, #6
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	bf08      	it	eq
 8007ca0:	1aad      	subeq	r5, r5, r2
 8007ca2:	68a3      	ldr	r3, [r4, #8]
 8007ca4:	6922      	ldr	r2, [r4, #16]
 8007ca6:	bf0c      	ite	eq
 8007ca8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cac:	2500      	movne	r5, #0
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	bfc4      	itt	gt
 8007cb2:	1a9b      	subgt	r3, r3, r2
 8007cb4:	18ed      	addgt	r5, r5, r3
 8007cb6:	2600      	movs	r6, #0
 8007cb8:	341a      	adds	r4, #26
 8007cba:	42b5      	cmp	r5, r6
 8007cbc:	d11a      	bne.n	8007cf4 <_printf_common+0xc8>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	e008      	b.n	8007cd4 <_printf_common+0xa8>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	4638      	mov	r0, r7
 8007cca:	47c0      	blx	r8
 8007ccc:	3001      	adds	r0, #1
 8007cce:	d103      	bne.n	8007cd8 <_printf_common+0xac>
 8007cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd8:	3501      	adds	r5, #1
 8007cda:	e7c6      	b.n	8007c6a <_printf_common+0x3e>
 8007cdc:	18e1      	adds	r1, r4, r3
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	2030      	movs	r0, #48	; 0x30
 8007ce2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ce6:	4422      	add	r2, r4
 8007ce8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cf0:	3302      	adds	r3, #2
 8007cf2:	e7c7      	b.n	8007c84 <_printf_common+0x58>
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	47c0      	blx	r8
 8007cfe:	3001      	adds	r0, #1
 8007d00:	d0e6      	beq.n	8007cd0 <_printf_common+0xa4>
 8007d02:	3601      	adds	r6, #1
 8007d04:	e7d9      	b.n	8007cba <_printf_common+0x8e>
	...

08007d08 <_printf_i>:
 8007d08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d0c:	7e0f      	ldrb	r7, [r1, #24]
 8007d0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d10:	2f78      	cmp	r7, #120	; 0x78
 8007d12:	4691      	mov	r9, r2
 8007d14:	4680      	mov	r8, r0
 8007d16:	460c      	mov	r4, r1
 8007d18:	469a      	mov	sl, r3
 8007d1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d1e:	d807      	bhi.n	8007d30 <_printf_i+0x28>
 8007d20:	2f62      	cmp	r7, #98	; 0x62
 8007d22:	d80a      	bhi.n	8007d3a <_printf_i+0x32>
 8007d24:	2f00      	cmp	r7, #0
 8007d26:	f000 80d8 	beq.w	8007eda <_printf_i+0x1d2>
 8007d2a:	2f58      	cmp	r7, #88	; 0x58
 8007d2c:	f000 80a3 	beq.w	8007e76 <_printf_i+0x16e>
 8007d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d38:	e03a      	b.n	8007db0 <_printf_i+0xa8>
 8007d3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d3e:	2b15      	cmp	r3, #21
 8007d40:	d8f6      	bhi.n	8007d30 <_printf_i+0x28>
 8007d42:	a101      	add	r1, pc, #4	; (adr r1, 8007d48 <_printf_i+0x40>)
 8007d44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d48:	08007da1 	.word	0x08007da1
 8007d4c:	08007db5 	.word	0x08007db5
 8007d50:	08007d31 	.word	0x08007d31
 8007d54:	08007d31 	.word	0x08007d31
 8007d58:	08007d31 	.word	0x08007d31
 8007d5c:	08007d31 	.word	0x08007d31
 8007d60:	08007db5 	.word	0x08007db5
 8007d64:	08007d31 	.word	0x08007d31
 8007d68:	08007d31 	.word	0x08007d31
 8007d6c:	08007d31 	.word	0x08007d31
 8007d70:	08007d31 	.word	0x08007d31
 8007d74:	08007ec1 	.word	0x08007ec1
 8007d78:	08007de5 	.word	0x08007de5
 8007d7c:	08007ea3 	.word	0x08007ea3
 8007d80:	08007d31 	.word	0x08007d31
 8007d84:	08007d31 	.word	0x08007d31
 8007d88:	08007ee3 	.word	0x08007ee3
 8007d8c:	08007d31 	.word	0x08007d31
 8007d90:	08007de5 	.word	0x08007de5
 8007d94:	08007d31 	.word	0x08007d31
 8007d98:	08007d31 	.word	0x08007d31
 8007d9c:	08007eab 	.word	0x08007eab
 8007da0:	682b      	ldr	r3, [r5, #0]
 8007da2:	1d1a      	adds	r2, r3, #4
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	602a      	str	r2, [r5, #0]
 8007da8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0a3      	b.n	8007efc <_printf_i+0x1f4>
 8007db4:	6820      	ldr	r0, [r4, #0]
 8007db6:	6829      	ldr	r1, [r5, #0]
 8007db8:	0606      	lsls	r6, r0, #24
 8007dba:	f101 0304 	add.w	r3, r1, #4
 8007dbe:	d50a      	bpl.n	8007dd6 <_printf_i+0xce>
 8007dc0:	680e      	ldr	r6, [r1, #0]
 8007dc2:	602b      	str	r3, [r5, #0]
 8007dc4:	2e00      	cmp	r6, #0
 8007dc6:	da03      	bge.n	8007dd0 <_printf_i+0xc8>
 8007dc8:	232d      	movs	r3, #45	; 0x2d
 8007dca:	4276      	negs	r6, r6
 8007dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd0:	485e      	ldr	r0, [pc, #376]	; (8007f4c <_printf_i+0x244>)
 8007dd2:	230a      	movs	r3, #10
 8007dd4:	e019      	b.n	8007e0a <_printf_i+0x102>
 8007dd6:	680e      	ldr	r6, [r1, #0]
 8007dd8:	602b      	str	r3, [r5, #0]
 8007dda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dde:	bf18      	it	ne
 8007de0:	b236      	sxthne	r6, r6
 8007de2:	e7ef      	b.n	8007dc4 <_printf_i+0xbc>
 8007de4:	682b      	ldr	r3, [r5, #0]
 8007de6:	6820      	ldr	r0, [r4, #0]
 8007de8:	1d19      	adds	r1, r3, #4
 8007dea:	6029      	str	r1, [r5, #0]
 8007dec:	0601      	lsls	r1, r0, #24
 8007dee:	d501      	bpl.n	8007df4 <_printf_i+0xec>
 8007df0:	681e      	ldr	r6, [r3, #0]
 8007df2:	e002      	b.n	8007dfa <_printf_i+0xf2>
 8007df4:	0646      	lsls	r6, r0, #25
 8007df6:	d5fb      	bpl.n	8007df0 <_printf_i+0xe8>
 8007df8:	881e      	ldrh	r6, [r3, #0]
 8007dfa:	4854      	ldr	r0, [pc, #336]	; (8007f4c <_printf_i+0x244>)
 8007dfc:	2f6f      	cmp	r7, #111	; 0x6f
 8007dfe:	bf0c      	ite	eq
 8007e00:	2308      	moveq	r3, #8
 8007e02:	230a      	movne	r3, #10
 8007e04:	2100      	movs	r1, #0
 8007e06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e0a:	6865      	ldr	r5, [r4, #4]
 8007e0c:	60a5      	str	r5, [r4, #8]
 8007e0e:	2d00      	cmp	r5, #0
 8007e10:	bfa2      	ittt	ge
 8007e12:	6821      	ldrge	r1, [r4, #0]
 8007e14:	f021 0104 	bicge.w	r1, r1, #4
 8007e18:	6021      	strge	r1, [r4, #0]
 8007e1a:	b90e      	cbnz	r6, 8007e20 <_printf_i+0x118>
 8007e1c:	2d00      	cmp	r5, #0
 8007e1e:	d04d      	beq.n	8007ebc <_printf_i+0x1b4>
 8007e20:	4615      	mov	r5, r2
 8007e22:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e26:	fb03 6711 	mls	r7, r3, r1, r6
 8007e2a:	5dc7      	ldrb	r7, [r0, r7]
 8007e2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e30:	4637      	mov	r7, r6
 8007e32:	42bb      	cmp	r3, r7
 8007e34:	460e      	mov	r6, r1
 8007e36:	d9f4      	bls.n	8007e22 <_printf_i+0x11a>
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	d10b      	bne.n	8007e54 <_printf_i+0x14c>
 8007e3c:	6823      	ldr	r3, [r4, #0]
 8007e3e:	07de      	lsls	r6, r3, #31
 8007e40:	d508      	bpl.n	8007e54 <_printf_i+0x14c>
 8007e42:	6923      	ldr	r3, [r4, #16]
 8007e44:	6861      	ldr	r1, [r4, #4]
 8007e46:	4299      	cmp	r1, r3
 8007e48:	bfde      	ittt	le
 8007e4a:	2330      	movle	r3, #48	; 0x30
 8007e4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e54:	1b52      	subs	r2, r2, r5
 8007e56:	6122      	str	r2, [r4, #16]
 8007e58:	f8cd a000 	str.w	sl, [sp]
 8007e5c:	464b      	mov	r3, r9
 8007e5e:	aa03      	add	r2, sp, #12
 8007e60:	4621      	mov	r1, r4
 8007e62:	4640      	mov	r0, r8
 8007e64:	f7ff fee2 	bl	8007c2c <_printf_common>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	d14c      	bne.n	8007f06 <_printf_i+0x1fe>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	b004      	add	sp, #16
 8007e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e76:	4835      	ldr	r0, [pc, #212]	; (8007f4c <_printf_i+0x244>)
 8007e78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e7c:	6829      	ldr	r1, [r5, #0]
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e84:	6029      	str	r1, [r5, #0]
 8007e86:	061d      	lsls	r5, r3, #24
 8007e88:	d514      	bpl.n	8007eb4 <_printf_i+0x1ac>
 8007e8a:	07df      	lsls	r7, r3, #31
 8007e8c:	bf44      	itt	mi
 8007e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8007e92:	6023      	strmi	r3, [r4, #0]
 8007e94:	b91e      	cbnz	r6, 8007e9e <_printf_i+0x196>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	f023 0320 	bic.w	r3, r3, #32
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	2310      	movs	r3, #16
 8007ea0:	e7b0      	b.n	8007e04 <_printf_i+0xfc>
 8007ea2:	6823      	ldr	r3, [r4, #0]
 8007ea4:	f043 0320 	orr.w	r3, r3, #32
 8007ea8:	6023      	str	r3, [r4, #0]
 8007eaa:	2378      	movs	r3, #120	; 0x78
 8007eac:	4828      	ldr	r0, [pc, #160]	; (8007f50 <_printf_i+0x248>)
 8007eae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eb2:	e7e3      	b.n	8007e7c <_printf_i+0x174>
 8007eb4:	0659      	lsls	r1, r3, #25
 8007eb6:	bf48      	it	mi
 8007eb8:	b2b6      	uxthmi	r6, r6
 8007eba:	e7e6      	b.n	8007e8a <_printf_i+0x182>
 8007ebc:	4615      	mov	r5, r2
 8007ebe:	e7bb      	b.n	8007e38 <_printf_i+0x130>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	6826      	ldr	r6, [r4, #0]
 8007ec4:	6961      	ldr	r1, [r4, #20]
 8007ec6:	1d18      	adds	r0, r3, #4
 8007ec8:	6028      	str	r0, [r5, #0]
 8007eca:	0635      	lsls	r5, r6, #24
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	d501      	bpl.n	8007ed4 <_printf_i+0x1cc>
 8007ed0:	6019      	str	r1, [r3, #0]
 8007ed2:	e002      	b.n	8007eda <_printf_i+0x1d2>
 8007ed4:	0670      	lsls	r0, r6, #25
 8007ed6:	d5fb      	bpl.n	8007ed0 <_printf_i+0x1c8>
 8007ed8:	8019      	strh	r1, [r3, #0]
 8007eda:	2300      	movs	r3, #0
 8007edc:	6123      	str	r3, [r4, #16]
 8007ede:	4615      	mov	r5, r2
 8007ee0:	e7ba      	b.n	8007e58 <_printf_i+0x150>
 8007ee2:	682b      	ldr	r3, [r5, #0]
 8007ee4:	1d1a      	adds	r2, r3, #4
 8007ee6:	602a      	str	r2, [r5, #0]
 8007ee8:	681d      	ldr	r5, [r3, #0]
 8007eea:	6862      	ldr	r2, [r4, #4]
 8007eec:	2100      	movs	r1, #0
 8007eee:	4628      	mov	r0, r5
 8007ef0:	f7f8 f996 	bl	8000220 <memchr>
 8007ef4:	b108      	cbz	r0, 8007efa <_printf_i+0x1f2>
 8007ef6:	1b40      	subs	r0, r0, r5
 8007ef8:	6060      	str	r0, [r4, #4]
 8007efa:	6863      	ldr	r3, [r4, #4]
 8007efc:	6123      	str	r3, [r4, #16]
 8007efe:	2300      	movs	r3, #0
 8007f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f04:	e7a8      	b.n	8007e58 <_printf_i+0x150>
 8007f06:	6923      	ldr	r3, [r4, #16]
 8007f08:	462a      	mov	r2, r5
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	47d0      	blx	sl
 8007f10:	3001      	adds	r0, #1
 8007f12:	d0ab      	beq.n	8007e6c <_printf_i+0x164>
 8007f14:	6823      	ldr	r3, [r4, #0]
 8007f16:	079b      	lsls	r3, r3, #30
 8007f18:	d413      	bmi.n	8007f42 <_printf_i+0x23a>
 8007f1a:	68e0      	ldr	r0, [r4, #12]
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	4298      	cmp	r0, r3
 8007f20:	bfb8      	it	lt
 8007f22:	4618      	movlt	r0, r3
 8007f24:	e7a4      	b.n	8007e70 <_printf_i+0x168>
 8007f26:	2301      	movs	r3, #1
 8007f28:	4632      	mov	r2, r6
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	47d0      	blx	sl
 8007f30:	3001      	adds	r0, #1
 8007f32:	d09b      	beq.n	8007e6c <_printf_i+0x164>
 8007f34:	3501      	adds	r5, #1
 8007f36:	68e3      	ldr	r3, [r4, #12]
 8007f38:	9903      	ldr	r1, [sp, #12]
 8007f3a:	1a5b      	subs	r3, r3, r1
 8007f3c:	42ab      	cmp	r3, r5
 8007f3e:	dcf2      	bgt.n	8007f26 <_printf_i+0x21e>
 8007f40:	e7eb      	b.n	8007f1a <_printf_i+0x212>
 8007f42:	2500      	movs	r5, #0
 8007f44:	f104 0619 	add.w	r6, r4, #25
 8007f48:	e7f5      	b.n	8007f36 <_printf_i+0x22e>
 8007f4a:	bf00      	nop
 8007f4c:	0800b9e6 	.word	0x0800b9e6
 8007f50:	0800b9f7 	.word	0x0800b9f7

08007f54 <siprintf>:
 8007f54:	b40e      	push	{r1, r2, r3}
 8007f56:	b500      	push	{lr}
 8007f58:	b09c      	sub	sp, #112	; 0x70
 8007f5a:	ab1d      	add	r3, sp, #116	; 0x74
 8007f5c:	9002      	str	r0, [sp, #8]
 8007f5e:	9006      	str	r0, [sp, #24]
 8007f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f64:	4809      	ldr	r0, [pc, #36]	; (8007f8c <siprintf+0x38>)
 8007f66:	9107      	str	r1, [sp, #28]
 8007f68:	9104      	str	r1, [sp, #16]
 8007f6a:	4909      	ldr	r1, [pc, #36]	; (8007f90 <siprintf+0x3c>)
 8007f6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f70:	9105      	str	r1, [sp, #20]
 8007f72:	6800      	ldr	r0, [r0, #0]
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	a902      	add	r1, sp, #8
 8007f78:	f001 fb6a 	bl	8009650 <_svfiprintf_r>
 8007f7c:	9b02      	ldr	r3, [sp, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	701a      	strb	r2, [r3, #0]
 8007f82:	b01c      	add	sp, #112	; 0x70
 8007f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f88:	b003      	add	sp, #12
 8007f8a:	4770      	bx	lr
 8007f8c:	20000014 	.word	0x20000014
 8007f90:	ffff0208 	.word	0xffff0208

08007f94 <quorem>:
 8007f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f98:	6903      	ldr	r3, [r0, #16]
 8007f9a:	690c      	ldr	r4, [r1, #16]
 8007f9c:	42a3      	cmp	r3, r4
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	f2c0 8081 	blt.w	80080a6 <quorem+0x112>
 8007fa4:	3c01      	subs	r4, #1
 8007fa6:	f101 0814 	add.w	r8, r1, #20
 8007faa:	f100 0514 	add.w	r5, r0, #20
 8007fae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fb2:	9301      	str	r3, [sp, #4]
 8007fb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007fb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007fc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007fc8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007fcc:	d331      	bcc.n	8008032 <quorem+0x9e>
 8007fce:	f04f 0e00 	mov.w	lr, #0
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	46ac      	mov	ip, r5
 8007fd6:	46f2      	mov	sl, lr
 8007fd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fdc:	b293      	uxth	r3, r2
 8007fde:	fb06 e303 	mla	r3, r6, r3, lr
 8007fe2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	ebaa 0303 	sub.w	r3, sl, r3
 8007fec:	f8dc a000 	ldr.w	sl, [ip]
 8007ff0:	0c12      	lsrs	r2, r2, #16
 8007ff2:	fa13 f38a 	uxtah	r3, r3, sl
 8007ff6:	fb06 e202 	mla	r2, r6, r2, lr
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	9b00      	ldr	r3, [sp, #0]
 8007ffe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008002:	b292      	uxth	r2, r2
 8008004:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800800c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008010:	4581      	cmp	r9, r0
 8008012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008016:	f84c 3b04 	str.w	r3, [ip], #4
 800801a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800801e:	d2db      	bcs.n	8007fd8 <quorem+0x44>
 8008020:	f855 300b 	ldr.w	r3, [r5, fp]
 8008024:	b92b      	cbnz	r3, 8008032 <quorem+0x9e>
 8008026:	9b01      	ldr	r3, [sp, #4]
 8008028:	3b04      	subs	r3, #4
 800802a:	429d      	cmp	r5, r3
 800802c:	461a      	mov	r2, r3
 800802e:	d32e      	bcc.n	800808e <quorem+0xfa>
 8008030:	613c      	str	r4, [r7, #16]
 8008032:	4638      	mov	r0, r7
 8008034:	f001 f8b8 	bl	80091a8 <__mcmp>
 8008038:	2800      	cmp	r0, #0
 800803a:	db24      	blt.n	8008086 <quorem+0xf2>
 800803c:	3601      	adds	r6, #1
 800803e:	4628      	mov	r0, r5
 8008040:	f04f 0c00 	mov.w	ip, #0
 8008044:	f858 2b04 	ldr.w	r2, [r8], #4
 8008048:	f8d0 e000 	ldr.w	lr, [r0]
 800804c:	b293      	uxth	r3, r2
 800804e:	ebac 0303 	sub.w	r3, ip, r3
 8008052:	0c12      	lsrs	r2, r2, #16
 8008054:	fa13 f38e 	uxtah	r3, r3, lr
 8008058:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800805c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008060:	b29b      	uxth	r3, r3
 8008062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008066:	45c1      	cmp	r9, r8
 8008068:	f840 3b04 	str.w	r3, [r0], #4
 800806c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008070:	d2e8      	bcs.n	8008044 <quorem+0xb0>
 8008072:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800807a:	b922      	cbnz	r2, 8008086 <quorem+0xf2>
 800807c:	3b04      	subs	r3, #4
 800807e:	429d      	cmp	r5, r3
 8008080:	461a      	mov	r2, r3
 8008082:	d30a      	bcc.n	800809a <quorem+0x106>
 8008084:	613c      	str	r4, [r7, #16]
 8008086:	4630      	mov	r0, r6
 8008088:	b003      	add	sp, #12
 800808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808e:	6812      	ldr	r2, [r2, #0]
 8008090:	3b04      	subs	r3, #4
 8008092:	2a00      	cmp	r2, #0
 8008094:	d1cc      	bne.n	8008030 <quorem+0x9c>
 8008096:	3c01      	subs	r4, #1
 8008098:	e7c7      	b.n	800802a <quorem+0x96>
 800809a:	6812      	ldr	r2, [r2, #0]
 800809c:	3b04      	subs	r3, #4
 800809e:	2a00      	cmp	r2, #0
 80080a0:	d1f0      	bne.n	8008084 <quorem+0xf0>
 80080a2:	3c01      	subs	r4, #1
 80080a4:	e7eb      	b.n	800807e <quorem+0xea>
 80080a6:	2000      	movs	r0, #0
 80080a8:	e7ee      	b.n	8008088 <quorem+0xf4>
 80080aa:	0000      	movs	r0, r0
 80080ac:	0000      	movs	r0, r0
	...

080080b0 <_dtoa_r>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	ed2d 8b04 	vpush	{d8-d9}
 80080b8:	ec57 6b10 	vmov	r6, r7, d0
 80080bc:	b093      	sub	sp, #76	; 0x4c
 80080be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080c4:	9106      	str	r1, [sp, #24]
 80080c6:	ee10 aa10 	vmov	sl, s0
 80080ca:	4604      	mov	r4, r0
 80080cc:	9209      	str	r2, [sp, #36]	; 0x24
 80080ce:	930c      	str	r3, [sp, #48]	; 0x30
 80080d0:	46bb      	mov	fp, r7
 80080d2:	b975      	cbnz	r5, 80080f2 <_dtoa_r+0x42>
 80080d4:	2010      	movs	r0, #16
 80080d6:	f000 fddd 	bl	8008c94 <malloc>
 80080da:	4602      	mov	r2, r0
 80080dc:	6260      	str	r0, [r4, #36]	; 0x24
 80080de:	b920      	cbnz	r0, 80080ea <_dtoa_r+0x3a>
 80080e0:	4ba7      	ldr	r3, [pc, #668]	; (8008380 <_dtoa_r+0x2d0>)
 80080e2:	21ea      	movs	r1, #234	; 0xea
 80080e4:	48a7      	ldr	r0, [pc, #668]	; (8008384 <_dtoa_r+0x2d4>)
 80080e6:	f001 fbc3 	bl	8009870 <__assert_func>
 80080ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080ee:	6005      	str	r5, [r0, #0]
 80080f0:	60c5      	str	r5, [r0, #12]
 80080f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080f4:	6819      	ldr	r1, [r3, #0]
 80080f6:	b151      	cbz	r1, 800810e <_dtoa_r+0x5e>
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	604a      	str	r2, [r1, #4]
 80080fc:	2301      	movs	r3, #1
 80080fe:	4093      	lsls	r3, r2
 8008100:	608b      	str	r3, [r1, #8]
 8008102:	4620      	mov	r0, r4
 8008104:	f000 fe0e 	bl	8008d24 <_Bfree>
 8008108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	1e3b      	subs	r3, r7, #0
 8008110:	bfaa      	itet	ge
 8008112:	2300      	movge	r3, #0
 8008114:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008118:	f8c8 3000 	strge.w	r3, [r8]
 800811c:	4b9a      	ldr	r3, [pc, #616]	; (8008388 <_dtoa_r+0x2d8>)
 800811e:	bfbc      	itt	lt
 8008120:	2201      	movlt	r2, #1
 8008122:	f8c8 2000 	strlt.w	r2, [r8]
 8008126:	ea33 030b 	bics.w	r3, r3, fp
 800812a:	d11b      	bne.n	8008164 <_dtoa_r+0xb4>
 800812c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800812e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008138:	4333      	orrs	r3, r6
 800813a:	f000 8592 	beq.w	8008c62 <_dtoa_r+0xbb2>
 800813e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008140:	b963      	cbnz	r3, 800815c <_dtoa_r+0xac>
 8008142:	4b92      	ldr	r3, [pc, #584]	; (800838c <_dtoa_r+0x2dc>)
 8008144:	e022      	b.n	800818c <_dtoa_r+0xdc>
 8008146:	4b92      	ldr	r3, [pc, #584]	; (8008390 <_dtoa_r+0x2e0>)
 8008148:	9301      	str	r3, [sp, #4]
 800814a:	3308      	adds	r3, #8
 800814c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	9801      	ldr	r0, [sp, #4]
 8008152:	b013      	add	sp, #76	; 0x4c
 8008154:	ecbd 8b04 	vpop	{d8-d9}
 8008158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815c:	4b8b      	ldr	r3, [pc, #556]	; (800838c <_dtoa_r+0x2dc>)
 800815e:	9301      	str	r3, [sp, #4]
 8008160:	3303      	adds	r3, #3
 8008162:	e7f3      	b.n	800814c <_dtoa_r+0x9c>
 8008164:	2200      	movs	r2, #0
 8008166:	2300      	movs	r3, #0
 8008168:	4650      	mov	r0, sl
 800816a:	4659      	mov	r1, fp
 800816c:	f7f8 fccc 	bl	8000b08 <__aeabi_dcmpeq>
 8008170:	ec4b ab19 	vmov	d9, sl, fp
 8008174:	4680      	mov	r8, r0
 8008176:	b158      	cbz	r0, 8008190 <_dtoa_r+0xe0>
 8008178:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800817a:	2301      	movs	r3, #1
 800817c:	6013      	str	r3, [r2, #0]
 800817e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 856b 	beq.w	8008c5c <_dtoa_r+0xbac>
 8008186:	4883      	ldr	r0, [pc, #524]	; (8008394 <_dtoa_r+0x2e4>)
 8008188:	6018      	str	r0, [r3, #0]
 800818a:	1e43      	subs	r3, r0, #1
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	e7df      	b.n	8008150 <_dtoa_r+0xa0>
 8008190:	ec4b ab10 	vmov	d0, sl, fp
 8008194:	aa10      	add	r2, sp, #64	; 0x40
 8008196:	a911      	add	r1, sp, #68	; 0x44
 8008198:	4620      	mov	r0, r4
 800819a:	f001 f8ab 	bl	80092f4 <__d2b>
 800819e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80081a2:	ee08 0a10 	vmov	s16, r0
 80081a6:	2d00      	cmp	r5, #0
 80081a8:	f000 8084 	beq.w	80082b4 <_dtoa_r+0x204>
 80081ac:	ee19 3a90 	vmov	r3, s19
 80081b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081b4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80081b8:	4656      	mov	r6, sl
 80081ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80081be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081c2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80081c6:	4b74      	ldr	r3, [pc, #464]	; (8008398 <_dtoa_r+0x2e8>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	4630      	mov	r0, r6
 80081cc:	4639      	mov	r1, r7
 80081ce:	f7f8 f87b 	bl	80002c8 <__aeabi_dsub>
 80081d2:	a365      	add	r3, pc, #404	; (adr r3, 8008368 <_dtoa_r+0x2b8>)
 80081d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d8:	f7f8 fa2e 	bl	8000638 <__aeabi_dmul>
 80081dc:	a364      	add	r3, pc, #400	; (adr r3, 8008370 <_dtoa_r+0x2c0>)
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f7f8 f873 	bl	80002cc <__adddf3>
 80081e6:	4606      	mov	r6, r0
 80081e8:	4628      	mov	r0, r5
 80081ea:	460f      	mov	r7, r1
 80081ec:	f7f8 f9ba 	bl	8000564 <__aeabi_i2d>
 80081f0:	a361      	add	r3, pc, #388	; (adr r3, 8008378 <_dtoa_r+0x2c8>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f7f8 fa1f 	bl	8000638 <__aeabi_dmul>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4630      	mov	r0, r6
 8008200:	4639      	mov	r1, r7
 8008202:	f7f8 f863 	bl	80002cc <__adddf3>
 8008206:	4606      	mov	r6, r0
 8008208:	460f      	mov	r7, r1
 800820a:	f7f8 fcc5 	bl	8000b98 <__aeabi_d2iz>
 800820e:	2200      	movs	r2, #0
 8008210:	9000      	str	r0, [sp, #0]
 8008212:	2300      	movs	r3, #0
 8008214:	4630      	mov	r0, r6
 8008216:	4639      	mov	r1, r7
 8008218:	f7f8 fc80 	bl	8000b1c <__aeabi_dcmplt>
 800821c:	b150      	cbz	r0, 8008234 <_dtoa_r+0x184>
 800821e:	9800      	ldr	r0, [sp, #0]
 8008220:	f7f8 f9a0 	bl	8000564 <__aeabi_i2d>
 8008224:	4632      	mov	r2, r6
 8008226:	463b      	mov	r3, r7
 8008228:	f7f8 fc6e 	bl	8000b08 <__aeabi_dcmpeq>
 800822c:	b910      	cbnz	r0, 8008234 <_dtoa_r+0x184>
 800822e:	9b00      	ldr	r3, [sp, #0]
 8008230:	3b01      	subs	r3, #1
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	9b00      	ldr	r3, [sp, #0]
 8008236:	2b16      	cmp	r3, #22
 8008238:	d85a      	bhi.n	80082f0 <_dtoa_r+0x240>
 800823a:	9a00      	ldr	r2, [sp, #0]
 800823c:	4b57      	ldr	r3, [pc, #348]	; (800839c <_dtoa_r+0x2ec>)
 800823e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008246:	ec51 0b19 	vmov	r0, r1, d9
 800824a:	f7f8 fc67 	bl	8000b1c <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	d050      	beq.n	80082f4 <_dtoa_r+0x244>
 8008252:	9b00      	ldr	r3, [sp, #0]
 8008254:	3b01      	subs	r3, #1
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	2300      	movs	r3, #0
 800825a:	930b      	str	r3, [sp, #44]	; 0x2c
 800825c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800825e:	1b5d      	subs	r5, r3, r5
 8008260:	1e6b      	subs	r3, r5, #1
 8008262:	9305      	str	r3, [sp, #20]
 8008264:	bf45      	ittet	mi
 8008266:	f1c5 0301 	rsbmi	r3, r5, #1
 800826a:	9304      	strmi	r3, [sp, #16]
 800826c:	2300      	movpl	r3, #0
 800826e:	2300      	movmi	r3, #0
 8008270:	bf4c      	ite	mi
 8008272:	9305      	strmi	r3, [sp, #20]
 8008274:	9304      	strpl	r3, [sp, #16]
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	db3d      	blt.n	80082f8 <_dtoa_r+0x248>
 800827c:	9b05      	ldr	r3, [sp, #20]
 800827e:	9a00      	ldr	r2, [sp, #0]
 8008280:	920a      	str	r2, [sp, #40]	; 0x28
 8008282:	4413      	add	r3, r2
 8008284:	9305      	str	r3, [sp, #20]
 8008286:	2300      	movs	r3, #0
 8008288:	9307      	str	r3, [sp, #28]
 800828a:	9b06      	ldr	r3, [sp, #24]
 800828c:	2b09      	cmp	r3, #9
 800828e:	f200 8089 	bhi.w	80083a4 <_dtoa_r+0x2f4>
 8008292:	2b05      	cmp	r3, #5
 8008294:	bfc4      	itt	gt
 8008296:	3b04      	subgt	r3, #4
 8008298:	9306      	strgt	r3, [sp, #24]
 800829a:	9b06      	ldr	r3, [sp, #24]
 800829c:	f1a3 0302 	sub.w	r3, r3, #2
 80082a0:	bfcc      	ite	gt
 80082a2:	2500      	movgt	r5, #0
 80082a4:	2501      	movle	r5, #1
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	f200 8087 	bhi.w	80083ba <_dtoa_r+0x30a>
 80082ac:	e8df f003 	tbb	[pc, r3]
 80082b0:	59383a2d 	.word	0x59383a2d
 80082b4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80082b8:	441d      	add	r5, r3
 80082ba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80082be:	2b20      	cmp	r3, #32
 80082c0:	bfc1      	itttt	gt
 80082c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082c6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80082ca:	fa0b f303 	lslgt.w	r3, fp, r3
 80082ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 80082d2:	bfda      	itte	le
 80082d4:	f1c3 0320 	rsble	r3, r3, #32
 80082d8:	fa06 f003 	lslle.w	r0, r6, r3
 80082dc:	4318      	orrgt	r0, r3
 80082de:	f7f8 f931 	bl	8000544 <__aeabi_ui2d>
 80082e2:	2301      	movs	r3, #1
 80082e4:	4606      	mov	r6, r0
 80082e6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80082ea:	3d01      	subs	r5, #1
 80082ec:	930e      	str	r3, [sp, #56]	; 0x38
 80082ee:	e76a      	b.n	80081c6 <_dtoa_r+0x116>
 80082f0:	2301      	movs	r3, #1
 80082f2:	e7b2      	b.n	800825a <_dtoa_r+0x1aa>
 80082f4:	900b      	str	r0, [sp, #44]	; 0x2c
 80082f6:	e7b1      	b.n	800825c <_dtoa_r+0x1ac>
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	9a00      	ldr	r2, [sp, #0]
 80082fc:	1a9b      	subs	r3, r3, r2
 80082fe:	9304      	str	r3, [sp, #16]
 8008300:	4253      	negs	r3, r2
 8008302:	9307      	str	r3, [sp, #28]
 8008304:	2300      	movs	r3, #0
 8008306:	930a      	str	r3, [sp, #40]	; 0x28
 8008308:	e7bf      	b.n	800828a <_dtoa_r+0x1da>
 800830a:	2300      	movs	r3, #0
 800830c:	9308      	str	r3, [sp, #32]
 800830e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008310:	2b00      	cmp	r3, #0
 8008312:	dc55      	bgt.n	80083c0 <_dtoa_r+0x310>
 8008314:	2301      	movs	r3, #1
 8008316:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800831a:	461a      	mov	r2, r3
 800831c:	9209      	str	r2, [sp, #36]	; 0x24
 800831e:	e00c      	b.n	800833a <_dtoa_r+0x28a>
 8008320:	2301      	movs	r3, #1
 8008322:	e7f3      	b.n	800830c <_dtoa_r+0x25c>
 8008324:	2300      	movs	r3, #0
 8008326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008328:	9308      	str	r3, [sp, #32]
 800832a:	9b00      	ldr	r3, [sp, #0]
 800832c:	4413      	add	r3, r2
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	3301      	adds	r3, #1
 8008332:	2b01      	cmp	r3, #1
 8008334:	9303      	str	r3, [sp, #12]
 8008336:	bfb8      	it	lt
 8008338:	2301      	movlt	r3, #1
 800833a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800833c:	2200      	movs	r2, #0
 800833e:	6042      	str	r2, [r0, #4]
 8008340:	2204      	movs	r2, #4
 8008342:	f102 0614 	add.w	r6, r2, #20
 8008346:	429e      	cmp	r6, r3
 8008348:	6841      	ldr	r1, [r0, #4]
 800834a:	d93d      	bls.n	80083c8 <_dtoa_r+0x318>
 800834c:	4620      	mov	r0, r4
 800834e:	f000 fca9 	bl	8008ca4 <_Balloc>
 8008352:	9001      	str	r0, [sp, #4]
 8008354:	2800      	cmp	r0, #0
 8008356:	d13b      	bne.n	80083d0 <_dtoa_r+0x320>
 8008358:	4b11      	ldr	r3, [pc, #68]	; (80083a0 <_dtoa_r+0x2f0>)
 800835a:	4602      	mov	r2, r0
 800835c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008360:	e6c0      	b.n	80080e4 <_dtoa_r+0x34>
 8008362:	2301      	movs	r3, #1
 8008364:	e7df      	b.n	8008326 <_dtoa_r+0x276>
 8008366:	bf00      	nop
 8008368:	636f4361 	.word	0x636f4361
 800836c:	3fd287a7 	.word	0x3fd287a7
 8008370:	8b60c8b3 	.word	0x8b60c8b3
 8008374:	3fc68a28 	.word	0x3fc68a28
 8008378:	509f79fb 	.word	0x509f79fb
 800837c:	3fd34413 	.word	0x3fd34413
 8008380:	0800ba15 	.word	0x0800ba15
 8008384:	0800ba2c 	.word	0x0800ba2c
 8008388:	7ff00000 	.word	0x7ff00000
 800838c:	0800ba11 	.word	0x0800ba11
 8008390:	0800ba08 	.word	0x0800ba08
 8008394:	0800b9e5 	.word	0x0800b9e5
 8008398:	3ff80000 	.word	0x3ff80000
 800839c:	0800bb20 	.word	0x0800bb20
 80083a0:	0800ba87 	.word	0x0800ba87
 80083a4:	2501      	movs	r5, #1
 80083a6:	2300      	movs	r3, #0
 80083a8:	9306      	str	r3, [sp, #24]
 80083aa:	9508      	str	r5, [sp, #32]
 80083ac:	f04f 33ff 	mov.w	r3, #4294967295
 80083b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083b4:	2200      	movs	r2, #0
 80083b6:	2312      	movs	r3, #18
 80083b8:	e7b0      	b.n	800831c <_dtoa_r+0x26c>
 80083ba:	2301      	movs	r3, #1
 80083bc:	9308      	str	r3, [sp, #32]
 80083be:	e7f5      	b.n	80083ac <_dtoa_r+0x2fc>
 80083c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80083c6:	e7b8      	b.n	800833a <_dtoa_r+0x28a>
 80083c8:	3101      	adds	r1, #1
 80083ca:	6041      	str	r1, [r0, #4]
 80083cc:	0052      	lsls	r2, r2, #1
 80083ce:	e7b8      	b.n	8008342 <_dtoa_r+0x292>
 80083d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d2:	9a01      	ldr	r2, [sp, #4]
 80083d4:	601a      	str	r2, [r3, #0]
 80083d6:	9b03      	ldr	r3, [sp, #12]
 80083d8:	2b0e      	cmp	r3, #14
 80083da:	f200 809d 	bhi.w	8008518 <_dtoa_r+0x468>
 80083de:	2d00      	cmp	r5, #0
 80083e0:	f000 809a 	beq.w	8008518 <_dtoa_r+0x468>
 80083e4:	9b00      	ldr	r3, [sp, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dd32      	ble.n	8008450 <_dtoa_r+0x3a0>
 80083ea:	4ab7      	ldr	r2, [pc, #732]	; (80086c8 <_dtoa_r+0x618>)
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80083f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083f8:	9b00      	ldr	r3, [sp, #0]
 80083fa:	05d8      	lsls	r0, r3, #23
 80083fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008400:	d516      	bpl.n	8008430 <_dtoa_r+0x380>
 8008402:	4bb2      	ldr	r3, [pc, #712]	; (80086cc <_dtoa_r+0x61c>)
 8008404:	ec51 0b19 	vmov	r0, r1, d9
 8008408:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800840c:	f7f8 fa3e 	bl	800088c <__aeabi_ddiv>
 8008410:	f007 070f 	and.w	r7, r7, #15
 8008414:	4682      	mov	sl, r0
 8008416:	468b      	mov	fp, r1
 8008418:	2503      	movs	r5, #3
 800841a:	4eac      	ldr	r6, [pc, #688]	; (80086cc <_dtoa_r+0x61c>)
 800841c:	b957      	cbnz	r7, 8008434 <_dtoa_r+0x384>
 800841e:	4642      	mov	r2, r8
 8008420:	464b      	mov	r3, r9
 8008422:	4650      	mov	r0, sl
 8008424:	4659      	mov	r1, fp
 8008426:	f7f8 fa31 	bl	800088c <__aeabi_ddiv>
 800842a:	4682      	mov	sl, r0
 800842c:	468b      	mov	fp, r1
 800842e:	e028      	b.n	8008482 <_dtoa_r+0x3d2>
 8008430:	2502      	movs	r5, #2
 8008432:	e7f2      	b.n	800841a <_dtoa_r+0x36a>
 8008434:	07f9      	lsls	r1, r7, #31
 8008436:	d508      	bpl.n	800844a <_dtoa_r+0x39a>
 8008438:	4640      	mov	r0, r8
 800843a:	4649      	mov	r1, r9
 800843c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008440:	f7f8 f8fa 	bl	8000638 <__aeabi_dmul>
 8008444:	3501      	adds	r5, #1
 8008446:	4680      	mov	r8, r0
 8008448:	4689      	mov	r9, r1
 800844a:	107f      	asrs	r7, r7, #1
 800844c:	3608      	adds	r6, #8
 800844e:	e7e5      	b.n	800841c <_dtoa_r+0x36c>
 8008450:	f000 809b 	beq.w	800858a <_dtoa_r+0x4da>
 8008454:	9b00      	ldr	r3, [sp, #0]
 8008456:	4f9d      	ldr	r7, [pc, #628]	; (80086cc <_dtoa_r+0x61c>)
 8008458:	425e      	negs	r6, r3
 800845a:	4b9b      	ldr	r3, [pc, #620]	; (80086c8 <_dtoa_r+0x618>)
 800845c:	f006 020f 	and.w	r2, r6, #15
 8008460:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	ec51 0b19 	vmov	r0, r1, d9
 800846c:	f7f8 f8e4 	bl	8000638 <__aeabi_dmul>
 8008470:	1136      	asrs	r6, r6, #4
 8008472:	4682      	mov	sl, r0
 8008474:	468b      	mov	fp, r1
 8008476:	2300      	movs	r3, #0
 8008478:	2502      	movs	r5, #2
 800847a:	2e00      	cmp	r6, #0
 800847c:	d17a      	bne.n	8008574 <_dtoa_r+0x4c4>
 800847e:	2b00      	cmp	r3, #0
 8008480:	d1d3      	bne.n	800842a <_dtoa_r+0x37a>
 8008482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8082 	beq.w	800858e <_dtoa_r+0x4de>
 800848a:	4b91      	ldr	r3, [pc, #580]	; (80086d0 <_dtoa_r+0x620>)
 800848c:	2200      	movs	r2, #0
 800848e:	4650      	mov	r0, sl
 8008490:	4659      	mov	r1, fp
 8008492:	f7f8 fb43 	bl	8000b1c <__aeabi_dcmplt>
 8008496:	2800      	cmp	r0, #0
 8008498:	d079      	beq.n	800858e <_dtoa_r+0x4de>
 800849a:	9b03      	ldr	r3, [sp, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d076      	beq.n	800858e <_dtoa_r+0x4de>
 80084a0:	9b02      	ldr	r3, [sp, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	dd36      	ble.n	8008514 <_dtoa_r+0x464>
 80084a6:	9b00      	ldr	r3, [sp, #0]
 80084a8:	4650      	mov	r0, sl
 80084aa:	4659      	mov	r1, fp
 80084ac:	1e5f      	subs	r7, r3, #1
 80084ae:	2200      	movs	r2, #0
 80084b0:	4b88      	ldr	r3, [pc, #544]	; (80086d4 <_dtoa_r+0x624>)
 80084b2:	f7f8 f8c1 	bl	8000638 <__aeabi_dmul>
 80084b6:	9e02      	ldr	r6, [sp, #8]
 80084b8:	4682      	mov	sl, r0
 80084ba:	468b      	mov	fp, r1
 80084bc:	3501      	adds	r5, #1
 80084be:	4628      	mov	r0, r5
 80084c0:	f7f8 f850 	bl	8000564 <__aeabi_i2d>
 80084c4:	4652      	mov	r2, sl
 80084c6:	465b      	mov	r3, fp
 80084c8:	f7f8 f8b6 	bl	8000638 <__aeabi_dmul>
 80084cc:	4b82      	ldr	r3, [pc, #520]	; (80086d8 <_dtoa_r+0x628>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	f7f7 fefc 	bl	80002cc <__adddf3>
 80084d4:	46d0      	mov	r8, sl
 80084d6:	46d9      	mov	r9, fp
 80084d8:	4682      	mov	sl, r0
 80084da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80084de:	2e00      	cmp	r6, #0
 80084e0:	d158      	bne.n	8008594 <_dtoa_r+0x4e4>
 80084e2:	4b7e      	ldr	r3, [pc, #504]	; (80086dc <_dtoa_r+0x62c>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	4640      	mov	r0, r8
 80084e8:	4649      	mov	r1, r9
 80084ea:	f7f7 feed 	bl	80002c8 <__aeabi_dsub>
 80084ee:	4652      	mov	r2, sl
 80084f0:	465b      	mov	r3, fp
 80084f2:	4680      	mov	r8, r0
 80084f4:	4689      	mov	r9, r1
 80084f6:	f7f8 fb2f 	bl	8000b58 <__aeabi_dcmpgt>
 80084fa:	2800      	cmp	r0, #0
 80084fc:	f040 8295 	bne.w	8008a2a <_dtoa_r+0x97a>
 8008500:	4652      	mov	r2, sl
 8008502:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008506:	4640      	mov	r0, r8
 8008508:	4649      	mov	r1, r9
 800850a:	f7f8 fb07 	bl	8000b1c <__aeabi_dcmplt>
 800850e:	2800      	cmp	r0, #0
 8008510:	f040 8289 	bne.w	8008a26 <_dtoa_r+0x976>
 8008514:	ec5b ab19 	vmov	sl, fp, d9
 8008518:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800851a:	2b00      	cmp	r3, #0
 800851c:	f2c0 8148 	blt.w	80087b0 <_dtoa_r+0x700>
 8008520:	9a00      	ldr	r2, [sp, #0]
 8008522:	2a0e      	cmp	r2, #14
 8008524:	f300 8144 	bgt.w	80087b0 <_dtoa_r+0x700>
 8008528:	4b67      	ldr	r3, [pc, #412]	; (80086c8 <_dtoa_r+0x618>)
 800852a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800852e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008534:	2b00      	cmp	r3, #0
 8008536:	f280 80d5 	bge.w	80086e4 <_dtoa_r+0x634>
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	f300 80d1 	bgt.w	80086e4 <_dtoa_r+0x634>
 8008542:	f040 826f 	bne.w	8008a24 <_dtoa_r+0x974>
 8008546:	4b65      	ldr	r3, [pc, #404]	; (80086dc <_dtoa_r+0x62c>)
 8008548:	2200      	movs	r2, #0
 800854a:	4640      	mov	r0, r8
 800854c:	4649      	mov	r1, r9
 800854e:	f7f8 f873 	bl	8000638 <__aeabi_dmul>
 8008552:	4652      	mov	r2, sl
 8008554:	465b      	mov	r3, fp
 8008556:	f7f8 faf5 	bl	8000b44 <__aeabi_dcmpge>
 800855a:	9e03      	ldr	r6, [sp, #12]
 800855c:	4637      	mov	r7, r6
 800855e:	2800      	cmp	r0, #0
 8008560:	f040 8245 	bne.w	80089ee <_dtoa_r+0x93e>
 8008564:	9d01      	ldr	r5, [sp, #4]
 8008566:	2331      	movs	r3, #49	; 0x31
 8008568:	f805 3b01 	strb.w	r3, [r5], #1
 800856c:	9b00      	ldr	r3, [sp, #0]
 800856e:	3301      	adds	r3, #1
 8008570:	9300      	str	r3, [sp, #0]
 8008572:	e240      	b.n	80089f6 <_dtoa_r+0x946>
 8008574:	07f2      	lsls	r2, r6, #31
 8008576:	d505      	bpl.n	8008584 <_dtoa_r+0x4d4>
 8008578:	e9d7 2300 	ldrd	r2, r3, [r7]
 800857c:	f7f8 f85c 	bl	8000638 <__aeabi_dmul>
 8008580:	3501      	adds	r5, #1
 8008582:	2301      	movs	r3, #1
 8008584:	1076      	asrs	r6, r6, #1
 8008586:	3708      	adds	r7, #8
 8008588:	e777      	b.n	800847a <_dtoa_r+0x3ca>
 800858a:	2502      	movs	r5, #2
 800858c:	e779      	b.n	8008482 <_dtoa_r+0x3d2>
 800858e:	9f00      	ldr	r7, [sp, #0]
 8008590:	9e03      	ldr	r6, [sp, #12]
 8008592:	e794      	b.n	80084be <_dtoa_r+0x40e>
 8008594:	9901      	ldr	r1, [sp, #4]
 8008596:	4b4c      	ldr	r3, [pc, #304]	; (80086c8 <_dtoa_r+0x618>)
 8008598:	4431      	add	r1, r6
 800859a:	910d      	str	r1, [sp, #52]	; 0x34
 800859c:	9908      	ldr	r1, [sp, #32]
 800859e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80085a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80085a6:	2900      	cmp	r1, #0
 80085a8:	d043      	beq.n	8008632 <_dtoa_r+0x582>
 80085aa:	494d      	ldr	r1, [pc, #308]	; (80086e0 <_dtoa_r+0x630>)
 80085ac:	2000      	movs	r0, #0
 80085ae:	f7f8 f96d 	bl	800088c <__aeabi_ddiv>
 80085b2:	4652      	mov	r2, sl
 80085b4:	465b      	mov	r3, fp
 80085b6:	f7f7 fe87 	bl	80002c8 <__aeabi_dsub>
 80085ba:	9d01      	ldr	r5, [sp, #4]
 80085bc:	4682      	mov	sl, r0
 80085be:	468b      	mov	fp, r1
 80085c0:	4649      	mov	r1, r9
 80085c2:	4640      	mov	r0, r8
 80085c4:	f7f8 fae8 	bl	8000b98 <__aeabi_d2iz>
 80085c8:	4606      	mov	r6, r0
 80085ca:	f7f7 ffcb 	bl	8000564 <__aeabi_i2d>
 80085ce:	4602      	mov	r2, r0
 80085d0:	460b      	mov	r3, r1
 80085d2:	4640      	mov	r0, r8
 80085d4:	4649      	mov	r1, r9
 80085d6:	f7f7 fe77 	bl	80002c8 <__aeabi_dsub>
 80085da:	3630      	adds	r6, #48	; 0x30
 80085dc:	f805 6b01 	strb.w	r6, [r5], #1
 80085e0:	4652      	mov	r2, sl
 80085e2:	465b      	mov	r3, fp
 80085e4:	4680      	mov	r8, r0
 80085e6:	4689      	mov	r9, r1
 80085e8:	f7f8 fa98 	bl	8000b1c <__aeabi_dcmplt>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d163      	bne.n	80086b8 <_dtoa_r+0x608>
 80085f0:	4642      	mov	r2, r8
 80085f2:	464b      	mov	r3, r9
 80085f4:	4936      	ldr	r1, [pc, #216]	; (80086d0 <_dtoa_r+0x620>)
 80085f6:	2000      	movs	r0, #0
 80085f8:	f7f7 fe66 	bl	80002c8 <__aeabi_dsub>
 80085fc:	4652      	mov	r2, sl
 80085fe:	465b      	mov	r3, fp
 8008600:	f7f8 fa8c 	bl	8000b1c <__aeabi_dcmplt>
 8008604:	2800      	cmp	r0, #0
 8008606:	f040 80b5 	bne.w	8008774 <_dtoa_r+0x6c4>
 800860a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800860c:	429d      	cmp	r5, r3
 800860e:	d081      	beq.n	8008514 <_dtoa_r+0x464>
 8008610:	4b30      	ldr	r3, [pc, #192]	; (80086d4 <_dtoa_r+0x624>)
 8008612:	2200      	movs	r2, #0
 8008614:	4650      	mov	r0, sl
 8008616:	4659      	mov	r1, fp
 8008618:	f7f8 f80e 	bl	8000638 <__aeabi_dmul>
 800861c:	4b2d      	ldr	r3, [pc, #180]	; (80086d4 <_dtoa_r+0x624>)
 800861e:	4682      	mov	sl, r0
 8008620:	468b      	mov	fp, r1
 8008622:	4640      	mov	r0, r8
 8008624:	4649      	mov	r1, r9
 8008626:	2200      	movs	r2, #0
 8008628:	f7f8 f806 	bl	8000638 <__aeabi_dmul>
 800862c:	4680      	mov	r8, r0
 800862e:	4689      	mov	r9, r1
 8008630:	e7c6      	b.n	80085c0 <_dtoa_r+0x510>
 8008632:	4650      	mov	r0, sl
 8008634:	4659      	mov	r1, fp
 8008636:	f7f7 ffff 	bl	8000638 <__aeabi_dmul>
 800863a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800863c:	9d01      	ldr	r5, [sp, #4]
 800863e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008640:	4682      	mov	sl, r0
 8008642:	468b      	mov	fp, r1
 8008644:	4649      	mov	r1, r9
 8008646:	4640      	mov	r0, r8
 8008648:	f7f8 faa6 	bl	8000b98 <__aeabi_d2iz>
 800864c:	4606      	mov	r6, r0
 800864e:	f7f7 ff89 	bl	8000564 <__aeabi_i2d>
 8008652:	3630      	adds	r6, #48	; 0x30
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	4640      	mov	r0, r8
 800865a:	4649      	mov	r1, r9
 800865c:	f7f7 fe34 	bl	80002c8 <__aeabi_dsub>
 8008660:	f805 6b01 	strb.w	r6, [r5], #1
 8008664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008666:	429d      	cmp	r5, r3
 8008668:	4680      	mov	r8, r0
 800866a:	4689      	mov	r9, r1
 800866c:	f04f 0200 	mov.w	r2, #0
 8008670:	d124      	bne.n	80086bc <_dtoa_r+0x60c>
 8008672:	4b1b      	ldr	r3, [pc, #108]	; (80086e0 <_dtoa_r+0x630>)
 8008674:	4650      	mov	r0, sl
 8008676:	4659      	mov	r1, fp
 8008678:	f7f7 fe28 	bl	80002cc <__adddf3>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4640      	mov	r0, r8
 8008682:	4649      	mov	r1, r9
 8008684:	f7f8 fa68 	bl	8000b58 <__aeabi_dcmpgt>
 8008688:	2800      	cmp	r0, #0
 800868a:	d173      	bne.n	8008774 <_dtoa_r+0x6c4>
 800868c:	4652      	mov	r2, sl
 800868e:	465b      	mov	r3, fp
 8008690:	4913      	ldr	r1, [pc, #76]	; (80086e0 <_dtoa_r+0x630>)
 8008692:	2000      	movs	r0, #0
 8008694:	f7f7 fe18 	bl	80002c8 <__aeabi_dsub>
 8008698:	4602      	mov	r2, r0
 800869a:	460b      	mov	r3, r1
 800869c:	4640      	mov	r0, r8
 800869e:	4649      	mov	r1, r9
 80086a0:	f7f8 fa3c 	bl	8000b1c <__aeabi_dcmplt>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	f43f af35 	beq.w	8008514 <_dtoa_r+0x464>
 80086aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80086ac:	1e6b      	subs	r3, r5, #1
 80086ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80086b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086b4:	2b30      	cmp	r3, #48	; 0x30
 80086b6:	d0f8      	beq.n	80086aa <_dtoa_r+0x5fa>
 80086b8:	9700      	str	r7, [sp, #0]
 80086ba:	e049      	b.n	8008750 <_dtoa_r+0x6a0>
 80086bc:	4b05      	ldr	r3, [pc, #20]	; (80086d4 <_dtoa_r+0x624>)
 80086be:	f7f7 ffbb 	bl	8000638 <__aeabi_dmul>
 80086c2:	4680      	mov	r8, r0
 80086c4:	4689      	mov	r9, r1
 80086c6:	e7bd      	b.n	8008644 <_dtoa_r+0x594>
 80086c8:	0800bb20 	.word	0x0800bb20
 80086cc:	0800baf8 	.word	0x0800baf8
 80086d0:	3ff00000 	.word	0x3ff00000
 80086d4:	40240000 	.word	0x40240000
 80086d8:	401c0000 	.word	0x401c0000
 80086dc:	40140000 	.word	0x40140000
 80086e0:	3fe00000 	.word	0x3fe00000
 80086e4:	9d01      	ldr	r5, [sp, #4]
 80086e6:	4656      	mov	r6, sl
 80086e8:	465f      	mov	r7, fp
 80086ea:	4642      	mov	r2, r8
 80086ec:	464b      	mov	r3, r9
 80086ee:	4630      	mov	r0, r6
 80086f0:	4639      	mov	r1, r7
 80086f2:	f7f8 f8cb 	bl	800088c <__aeabi_ddiv>
 80086f6:	f7f8 fa4f 	bl	8000b98 <__aeabi_d2iz>
 80086fa:	4682      	mov	sl, r0
 80086fc:	f7f7 ff32 	bl	8000564 <__aeabi_i2d>
 8008700:	4642      	mov	r2, r8
 8008702:	464b      	mov	r3, r9
 8008704:	f7f7 ff98 	bl	8000638 <__aeabi_dmul>
 8008708:	4602      	mov	r2, r0
 800870a:	460b      	mov	r3, r1
 800870c:	4630      	mov	r0, r6
 800870e:	4639      	mov	r1, r7
 8008710:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008714:	f7f7 fdd8 	bl	80002c8 <__aeabi_dsub>
 8008718:	f805 6b01 	strb.w	r6, [r5], #1
 800871c:	9e01      	ldr	r6, [sp, #4]
 800871e:	9f03      	ldr	r7, [sp, #12]
 8008720:	1bae      	subs	r6, r5, r6
 8008722:	42b7      	cmp	r7, r6
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	d135      	bne.n	8008796 <_dtoa_r+0x6e6>
 800872a:	f7f7 fdcf 	bl	80002cc <__adddf3>
 800872e:	4642      	mov	r2, r8
 8008730:	464b      	mov	r3, r9
 8008732:	4606      	mov	r6, r0
 8008734:	460f      	mov	r7, r1
 8008736:	f7f8 fa0f 	bl	8000b58 <__aeabi_dcmpgt>
 800873a:	b9d0      	cbnz	r0, 8008772 <_dtoa_r+0x6c2>
 800873c:	4642      	mov	r2, r8
 800873e:	464b      	mov	r3, r9
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	f7f8 f9e0 	bl	8000b08 <__aeabi_dcmpeq>
 8008748:	b110      	cbz	r0, 8008750 <_dtoa_r+0x6a0>
 800874a:	f01a 0f01 	tst.w	sl, #1
 800874e:	d110      	bne.n	8008772 <_dtoa_r+0x6c2>
 8008750:	4620      	mov	r0, r4
 8008752:	ee18 1a10 	vmov	r1, s16
 8008756:	f000 fae5 	bl	8008d24 <_Bfree>
 800875a:	2300      	movs	r3, #0
 800875c:	9800      	ldr	r0, [sp, #0]
 800875e:	702b      	strb	r3, [r5, #0]
 8008760:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008762:	3001      	adds	r0, #1
 8008764:	6018      	str	r0, [r3, #0]
 8008766:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008768:	2b00      	cmp	r3, #0
 800876a:	f43f acf1 	beq.w	8008150 <_dtoa_r+0xa0>
 800876e:	601d      	str	r5, [r3, #0]
 8008770:	e4ee      	b.n	8008150 <_dtoa_r+0xa0>
 8008772:	9f00      	ldr	r7, [sp, #0]
 8008774:	462b      	mov	r3, r5
 8008776:	461d      	mov	r5, r3
 8008778:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800877c:	2a39      	cmp	r2, #57	; 0x39
 800877e:	d106      	bne.n	800878e <_dtoa_r+0x6de>
 8008780:	9a01      	ldr	r2, [sp, #4]
 8008782:	429a      	cmp	r2, r3
 8008784:	d1f7      	bne.n	8008776 <_dtoa_r+0x6c6>
 8008786:	9901      	ldr	r1, [sp, #4]
 8008788:	2230      	movs	r2, #48	; 0x30
 800878a:	3701      	adds	r7, #1
 800878c:	700a      	strb	r2, [r1, #0]
 800878e:	781a      	ldrb	r2, [r3, #0]
 8008790:	3201      	adds	r2, #1
 8008792:	701a      	strb	r2, [r3, #0]
 8008794:	e790      	b.n	80086b8 <_dtoa_r+0x608>
 8008796:	4ba6      	ldr	r3, [pc, #664]	; (8008a30 <_dtoa_r+0x980>)
 8008798:	2200      	movs	r2, #0
 800879a:	f7f7 ff4d 	bl	8000638 <__aeabi_dmul>
 800879e:	2200      	movs	r2, #0
 80087a0:	2300      	movs	r3, #0
 80087a2:	4606      	mov	r6, r0
 80087a4:	460f      	mov	r7, r1
 80087a6:	f7f8 f9af 	bl	8000b08 <__aeabi_dcmpeq>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d09d      	beq.n	80086ea <_dtoa_r+0x63a>
 80087ae:	e7cf      	b.n	8008750 <_dtoa_r+0x6a0>
 80087b0:	9a08      	ldr	r2, [sp, #32]
 80087b2:	2a00      	cmp	r2, #0
 80087b4:	f000 80d7 	beq.w	8008966 <_dtoa_r+0x8b6>
 80087b8:	9a06      	ldr	r2, [sp, #24]
 80087ba:	2a01      	cmp	r2, #1
 80087bc:	f300 80ba 	bgt.w	8008934 <_dtoa_r+0x884>
 80087c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087c2:	2a00      	cmp	r2, #0
 80087c4:	f000 80b2 	beq.w	800892c <_dtoa_r+0x87c>
 80087c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087cc:	9e07      	ldr	r6, [sp, #28]
 80087ce:	9d04      	ldr	r5, [sp, #16]
 80087d0:	9a04      	ldr	r2, [sp, #16]
 80087d2:	441a      	add	r2, r3
 80087d4:	9204      	str	r2, [sp, #16]
 80087d6:	9a05      	ldr	r2, [sp, #20]
 80087d8:	2101      	movs	r1, #1
 80087da:	441a      	add	r2, r3
 80087dc:	4620      	mov	r0, r4
 80087de:	9205      	str	r2, [sp, #20]
 80087e0:	f000 fb58 	bl	8008e94 <__i2b>
 80087e4:	4607      	mov	r7, r0
 80087e6:	2d00      	cmp	r5, #0
 80087e8:	dd0c      	ble.n	8008804 <_dtoa_r+0x754>
 80087ea:	9b05      	ldr	r3, [sp, #20]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	dd09      	ble.n	8008804 <_dtoa_r+0x754>
 80087f0:	42ab      	cmp	r3, r5
 80087f2:	9a04      	ldr	r2, [sp, #16]
 80087f4:	bfa8      	it	ge
 80087f6:	462b      	movge	r3, r5
 80087f8:	1ad2      	subs	r2, r2, r3
 80087fa:	9204      	str	r2, [sp, #16]
 80087fc:	9a05      	ldr	r2, [sp, #20]
 80087fe:	1aed      	subs	r5, r5, r3
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	9305      	str	r3, [sp, #20]
 8008804:	9b07      	ldr	r3, [sp, #28]
 8008806:	b31b      	cbz	r3, 8008850 <_dtoa_r+0x7a0>
 8008808:	9b08      	ldr	r3, [sp, #32]
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 80af 	beq.w	800896e <_dtoa_r+0x8be>
 8008810:	2e00      	cmp	r6, #0
 8008812:	dd13      	ble.n	800883c <_dtoa_r+0x78c>
 8008814:	4639      	mov	r1, r7
 8008816:	4632      	mov	r2, r6
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fbfb 	bl	8009014 <__pow5mult>
 800881e:	ee18 2a10 	vmov	r2, s16
 8008822:	4601      	mov	r1, r0
 8008824:	4607      	mov	r7, r0
 8008826:	4620      	mov	r0, r4
 8008828:	f000 fb4a 	bl	8008ec0 <__multiply>
 800882c:	ee18 1a10 	vmov	r1, s16
 8008830:	4680      	mov	r8, r0
 8008832:	4620      	mov	r0, r4
 8008834:	f000 fa76 	bl	8008d24 <_Bfree>
 8008838:	ee08 8a10 	vmov	s16, r8
 800883c:	9b07      	ldr	r3, [sp, #28]
 800883e:	1b9a      	subs	r2, r3, r6
 8008840:	d006      	beq.n	8008850 <_dtoa_r+0x7a0>
 8008842:	ee18 1a10 	vmov	r1, s16
 8008846:	4620      	mov	r0, r4
 8008848:	f000 fbe4 	bl	8009014 <__pow5mult>
 800884c:	ee08 0a10 	vmov	s16, r0
 8008850:	2101      	movs	r1, #1
 8008852:	4620      	mov	r0, r4
 8008854:	f000 fb1e 	bl	8008e94 <__i2b>
 8008858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800885a:	2b00      	cmp	r3, #0
 800885c:	4606      	mov	r6, r0
 800885e:	f340 8088 	ble.w	8008972 <_dtoa_r+0x8c2>
 8008862:	461a      	mov	r2, r3
 8008864:	4601      	mov	r1, r0
 8008866:	4620      	mov	r0, r4
 8008868:	f000 fbd4 	bl	8009014 <__pow5mult>
 800886c:	9b06      	ldr	r3, [sp, #24]
 800886e:	2b01      	cmp	r3, #1
 8008870:	4606      	mov	r6, r0
 8008872:	f340 8081 	ble.w	8008978 <_dtoa_r+0x8c8>
 8008876:	f04f 0800 	mov.w	r8, #0
 800887a:	6933      	ldr	r3, [r6, #16]
 800887c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008880:	6918      	ldr	r0, [r3, #16]
 8008882:	f000 fab7 	bl	8008df4 <__hi0bits>
 8008886:	f1c0 0020 	rsb	r0, r0, #32
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	4418      	add	r0, r3
 800888e:	f010 001f 	ands.w	r0, r0, #31
 8008892:	f000 8092 	beq.w	80089ba <_dtoa_r+0x90a>
 8008896:	f1c0 0320 	rsb	r3, r0, #32
 800889a:	2b04      	cmp	r3, #4
 800889c:	f340 808a 	ble.w	80089b4 <_dtoa_r+0x904>
 80088a0:	f1c0 001c 	rsb	r0, r0, #28
 80088a4:	9b04      	ldr	r3, [sp, #16]
 80088a6:	4403      	add	r3, r0
 80088a8:	9304      	str	r3, [sp, #16]
 80088aa:	9b05      	ldr	r3, [sp, #20]
 80088ac:	4403      	add	r3, r0
 80088ae:	4405      	add	r5, r0
 80088b0:	9305      	str	r3, [sp, #20]
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dd07      	ble.n	80088c8 <_dtoa_r+0x818>
 80088b8:	ee18 1a10 	vmov	r1, s16
 80088bc:	461a      	mov	r2, r3
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 fc02 	bl	80090c8 <__lshift>
 80088c4:	ee08 0a10 	vmov	s16, r0
 80088c8:	9b05      	ldr	r3, [sp, #20]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	dd05      	ble.n	80088da <_dtoa_r+0x82a>
 80088ce:	4631      	mov	r1, r6
 80088d0:	461a      	mov	r2, r3
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 fbf8 	bl	80090c8 <__lshift>
 80088d8:	4606      	mov	r6, r0
 80088da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d06e      	beq.n	80089be <_dtoa_r+0x90e>
 80088e0:	ee18 0a10 	vmov	r0, s16
 80088e4:	4631      	mov	r1, r6
 80088e6:	f000 fc5f 	bl	80091a8 <__mcmp>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	da67      	bge.n	80089be <_dtoa_r+0x90e>
 80088ee:	9b00      	ldr	r3, [sp, #0]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	ee18 1a10 	vmov	r1, s16
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	220a      	movs	r2, #10
 80088fa:	2300      	movs	r3, #0
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fa33 	bl	8008d68 <__multadd>
 8008902:	9b08      	ldr	r3, [sp, #32]
 8008904:	ee08 0a10 	vmov	s16, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 81b1 	beq.w	8008c70 <_dtoa_r+0xbc0>
 800890e:	2300      	movs	r3, #0
 8008910:	4639      	mov	r1, r7
 8008912:	220a      	movs	r2, #10
 8008914:	4620      	mov	r0, r4
 8008916:	f000 fa27 	bl	8008d68 <__multadd>
 800891a:	9b02      	ldr	r3, [sp, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	4607      	mov	r7, r0
 8008920:	f300 808e 	bgt.w	8008a40 <_dtoa_r+0x990>
 8008924:	9b06      	ldr	r3, [sp, #24]
 8008926:	2b02      	cmp	r3, #2
 8008928:	dc51      	bgt.n	80089ce <_dtoa_r+0x91e>
 800892a:	e089      	b.n	8008a40 <_dtoa_r+0x990>
 800892c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800892e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008932:	e74b      	b.n	80087cc <_dtoa_r+0x71c>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	1e5e      	subs	r6, r3, #1
 8008938:	9b07      	ldr	r3, [sp, #28]
 800893a:	42b3      	cmp	r3, r6
 800893c:	bfbf      	itttt	lt
 800893e:	9b07      	ldrlt	r3, [sp, #28]
 8008940:	9607      	strlt	r6, [sp, #28]
 8008942:	1af2      	sublt	r2, r6, r3
 8008944:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008946:	bfb6      	itet	lt
 8008948:	189b      	addlt	r3, r3, r2
 800894a:	1b9e      	subge	r6, r3, r6
 800894c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800894e:	9b03      	ldr	r3, [sp, #12]
 8008950:	bfb8      	it	lt
 8008952:	2600      	movlt	r6, #0
 8008954:	2b00      	cmp	r3, #0
 8008956:	bfb7      	itett	lt
 8008958:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800895c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008960:	1a9d      	sublt	r5, r3, r2
 8008962:	2300      	movlt	r3, #0
 8008964:	e734      	b.n	80087d0 <_dtoa_r+0x720>
 8008966:	9e07      	ldr	r6, [sp, #28]
 8008968:	9d04      	ldr	r5, [sp, #16]
 800896a:	9f08      	ldr	r7, [sp, #32]
 800896c:	e73b      	b.n	80087e6 <_dtoa_r+0x736>
 800896e:	9a07      	ldr	r2, [sp, #28]
 8008970:	e767      	b.n	8008842 <_dtoa_r+0x792>
 8008972:	9b06      	ldr	r3, [sp, #24]
 8008974:	2b01      	cmp	r3, #1
 8008976:	dc18      	bgt.n	80089aa <_dtoa_r+0x8fa>
 8008978:	f1ba 0f00 	cmp.w	sl, #0
 800897c:	d115      	bne.n	80089aa <_dtoa_r+0x8fa>
 800897e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008982:	b993      	cbnz	r3, 80089aa <_dtoa_r+0x8fa>
 8008984:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008988:	0d1b      	lsrs	r3, r3, #20
 800898a:	051b      	lsls	r3, r3, #20
 800898c:	b183      	cbz	r3, 80089b0 <_dtoa_r+0x900>
 800898e:	9b04      	ldr	r3, [sp, #16]
 8008990:	3301      	adds	r3, #1
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	9b05      	ldr	r3, [sp, #20]
 8008996:	3301      	adds	r3, #1
 8008998:	9305      	str	r3, [sp, #20]
 800899a:	f04f 0801 	mov.w	r8, #1
 800899e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	f47f af6a 	bne.w	800887a <_dtoa_r+0x7ca>
 80089a6:	2001      	movs	r0, #1
 80089a8:	e76f      	b.n	800888a <_dtoa_r+0x7da>
 80089aa:	f04f 0800 	mov.w	r8, #0
 80089ae:	e7f6      	b.n	800899e <_dtoa_r+0x8ee>
 80089b0:	4698      	mov	r8, r3
 80089b2:	e7f4      	b.n	800899e <_dtoa_r+0x8ee>
 80089b4:	f43f af7d 	beq.w	80088b2 <_dtoa_r+0x802>
 80089b8:	4618      	mov	r0, r3
 80089ba:	301c      	adds	r0, #28
 80089bc:	e772      	b.n	80088a4 <_dtoa_r+0x7f4>
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	dc37      	bgt.n	8008a34 <_dtoa_r+0x984>
 80089c4:	9b06      	ldr	r3, [sp, #24]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	dd34      	ble.n	8008a34 <_dtoa_r+0x984>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	9302      	str	r3, [sp, #8]
 80089ce:	9b02      	ldr	r3, [sp, #8]
 80089d0:	b96b      	cbnz	r3, 80089ee <_dtoa_r+0x93e>
 80089d2:	4631      	mov	r1, r6
 80089d4:	2205      	movs	r2, #5
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 f9c6 	bl	8008d68 <__multadd>
 80089dc:	4601      	mov	r1, r0
 80089de:	4606      	mov	r6, r0
 80089e0:	ee18 0a10 	vmov	r0, s16
 80089e4:	f000 fbe0 	bl	80091a8 <__mcmp>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	f73f adbb 	bgt.w	8008564 <_dtoa_r+0x4b4>
 80089ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f0:	9d01      	ldr	r5, [sp, #4]
 80089f2:	43db      	mvns	r3, r3
 80089f4:	9300      	str	r3, [sp, #0]
 80089f6:	f04f 0800 	mov.w	r8, #0
 80089fa:	4631      	mov	r1, r6
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 f991 	bl	8008d24 <_Bfree>
 8008a02:	2f00      	cmp	r7, #0
 8008a04:	f43f aea4 	beq.w	8008750 <_dtoa_r+0x6a0>
 8008a08:	f1b8 0f00 	cmp.w	r8, #0
 8008a0c:	d005      	beq.n	8008a1a <_dtoa_r+0x96a>
 8008a0e:	45b8      	cmp	r8, r7
 8008a10:	d003      	beq.n	8008a1a <_dtoa_r+0x96a>
 8008a12:	4641      	mov	r1, r8
 8008a14:	4620      	mov	r0, r4
 8008a16:	f000 f985 	bl	8008d24 <_Bfree>
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 f981 	bl	8008d24 <_Bfree>
 8008a22:	e695      	b.n	8008750 <_dtoa_r+0x6a0>
 8008a24:	2600      	movs	r6, #0
 8008a26:	4637      	mov	r7, r6
 8008a28:	e7e1      	b.n	80089ee <_dtoa_r+0x93e>
 8008a2a:	9700      	str	r7, [sp, #0]
 8008a2c:	4637      	mov	r7, r6
 8008a2e:	e599      	b.n	8008564 <_dtoa_r+0x4b4>
 8008a30:	40240000 	.word	0x40240000
 8008a34:	9b08      	ldr	r3, [sp, #32]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f000 80ca 	beq.w	8008bd0 <_dtoa_r+0xb20>
 8008a3c:	9b03      	ldr	r3, [sp, #12]
 8008a3e:	9302      	str	r3, [sp, #8]
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	dd05      	ble.n	8008a50 <_dtoa_r+0x9a0>
 8008a44:	4639      	mov	r1, r7
 8008a46:	462a      	mov	r2, r5
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f000 fb3d 	bl	80090c8 <__lshift>
 8008a4e:	4607      	mov	r7, r0
 8008a50:	f1b8 0f00 	cmp.w	r8, #0
 8008a54:	d05b      	beq.n	8008b0e <_dtoa_r+0xa5e>
 8008a56:	6879      	ldr	r1, [r7, #4]
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 f923 	bl	8008ca4 <_Balloc>
 8008a5e:	4605      	mov	r5, r0
 8008a60:	b928      	cbnz	r0, 8008a6e <_dtoa_r+0x9be>
 8008a62:	4b87      	ldr	r3, [pc, #540]	; (8008c80 <_dtoa_r+0xbd0>)
 8008a64:	4602      	mov	r2, r0
 8008a66:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008a6a:	f7ff bb3b 	b.w	80080e4 <_dtoa_r+0x34>
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	3202      	adds	r2, #2
 8008a72:	0092      	lsls	r2, r2, #2
 8008a74:	f107 010c 	add.w	r1, r7, #12
 8008a78:	300c      	adds	r0, #12
 8008a7a:	f7fe fdeb 	bl	8007654 <memcpy>
 8008a7e:	2201      	movs	r2, #1
 8008a80:	4629      	mov	r1, r5
 8008a82:	4620      	mov	r0, r4
 8008a84:	f000 fb20 	bl	80090c8 <__lshift>
 8008a88:	9b01      	ldr	r3, [sp, #4]
 8008a8a:	f103 0901 	add.w	r9, r3, #1
 8008a8e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008a92:	4413      	add	r3, r2
 8008a94:	9305      	str	r3, [sp, #20]
 8008a96:	f00a 0301 	and.w	r3, sl, #1
 8008a9a:	46b8      	mov	r8, r7
 8008a9c:	9304      	str	r3, [sp, #16]
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	ee18 0a10 	vmov	r0, s16
 8008aa6:	f7ff fa75 	bl	8007f94 <quorem>
 8008aaa:	4641      	mov	r1, r8
 8008aac:	9002      	str	r0, [sp, #8]
 8008aae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008ab2:	ee18 0a10 	vmov	r0, s16
 8008ab6:	f000 fb77 	bl	80091a8 <__mcmp>
 8008aba:	463a      	mov	r2, r7
 8008abc:	9003      	str	r0, [sp, #12]
 8008abe:	4631      	mov	r1, r6
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 fb8d 	bl	80091e0 <__mdiff>
 8008ac6:	68c2      	ldr	r2, [r0, #12]
 8008ac8:	f109 3bff 	add.w	fp, r9, #4294967295
 8008acc:	4605      	mov	r5, r0
 8008ace:	bb02      	cbnz	r2, 8008b12 <_dtoa_r+0xa62>
 8008ad0:	4601      	mov	r1, r0
 8008ad2:	ee18 0a10 	vmov	r0, s16
 8008ad6:	f000 fb67 	bl	80091a8 <__mcmp>
 8008ada:	4602      	mov	r2, r0
 8008adc:	4629      	mov	r1, r5
 8008ade:	4620      	mov	r0, r4
 8008ae0:	9207      	str	r2, [sp, #28]
 8008ae2:	f000 f91f 	bl	8008d24 <_Bfree>
 8008ae6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008aea:	ea43 0102 	orr.w	r1, r3, r2
 8008aee:	9b04      	ldr	r3, [sp, #16]
 8008af0:	430b      	orrs	r3, r1
 8008af2:	464d      	mov	r5, r9
 8008af4:	d10f      	bne.n	8008b16 <_dtoa_r+0xa66>
 8008af6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008afa:	d02a      	beq.n	8008b52 <_dtoa_r+0xaa2>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	dd02      	ble.n	8008b08 <_dtoa_r+0xa58>
 8008b02:	9b02      	ldr	r3, [sp, #8]
 8008b04:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b08:	f88b a000 	strb.w	sl, [fp]
 8008b0c:	e775      	b.n	80089fa <_dtoa_r+0x94a>
 8008b0e:	4638      	mov	r0, r7
 8008b10:	e7ba      	b.n	8008a88 <_dtoa_r+0x9d8>
 8008b12:	2201      	movs	r2, #1
 8008b14:	e7e2      	b.n	8008adc <_dtoa_r+0xa2c>
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	db04      	blt.n	8008b26 <_dtoa_r+0xa76>
 8008b1c:	9906      	ldr	r1, [sp, #24]
 8008b1e:	430b      	orrs	r3, r1
 8008b20:	9904      	ldr	r1, [sp, #16]
 8008b22:	430b      	orrs	r3, r1
 8008b24:	d122      	bne.n	8008b6c <_dtoa_r+0xabc>
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	ddee      	ble.n	8008b08 <_dtoa_r+0xa58>
 8008b2a:	ee18 1a10 	vmov	r1, s16
 8008b2e:	2201      	movs	r2, #1
 8008b30:	4620      	mov	r0, r4
 8008b32:	f000 fac9 	bl	80090c8 <__lshift>
 8008b36:	4631      	mov	r1, r6
 8008b38:	ee08 0a10 	vmov	s16, r0
 8008b3c:	f000 fb34 	bl	80091a8 <__mcmp>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	dc03      	bgt.n	8008b4c <_dtoa_r+0xa9c>
 8008b44:	d1e0      	bne.n	8008b08 <_dtoa_r+0xa58>
 8008b46:	f01a 0f01 	tst.w	sl, #1
 8008b4a:	d0dd      	beq.n	8008b08 <_dtoa_r+0xa58>
 8008b4c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b50:	d1d7      	bne.n	8008b02 <_dtoa_r+0xa52>
 8008b52:	2339      	movs	r3, #57	; 0x39
 8008b54:	f88b 3000 	strb.w	r3, [fp]
 8008b58:	462b      	mov	r3, r5
 8008b5a:	461d      	mov	r5, r3
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b62:	2a39      	cmp	r2, #57	; 0x39
 8008b64:	d071      	beq.n	8008c4a <_dtoa_r+0xb9a>
 8008b66:	3201      	adds	r2, #1
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	e746      	b.n	80089fa <_dtoa_r+0x94a>
 8008b6c:	2a00      	cmp	r2, #0
 8008b6e:	dd07      	ble.n	8008b80 <_dtoa_r+0xad0>
 8008b70:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b74:	d0ed      	beq.n	8008b52 <_dtoa_r+0xaa2>
 8008b76:	f10a 0301 	add.w	r3, sl, #1
 8008b7a:	f88b 3000 	strb.w	r3, [fp]
 8008b7e:	e73c      	b.n	80089fa <_dtoa_r+0x94a>
 8008b80:	9b05      	ldr	r3, [sp, #20]
 8008b82:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008b86:	4599      	cmp	r9, r3
 8008b88:	d047      	beq.n	8008c1a <_dtoa_r+0xb6a>
 8008b8a:	ee18 1a10 	vmov	r1, s16
 8008b8e:	2300      	movs	r3, #0
 8008b90:	220a      	movs	r2, #10
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 f8e8 	bl	8008d68 <__multadd>
 8008b98:	45b8      	cmp	r8, r7
 8008b9a:	ee08 0a10 	vmov	s16, r0
 8008b9e:	f04f 0300 	mov.w	r3, #0
 8008ba2:	f04f 020a 	mov.w	r2, #10
 8008ba6:	4641      	mov	r1, r8
 8008ba8:	4620      	mov	r0, r4
 8008baa:	d106      	bne.n	8008bba <_dtoa_r+0xb0a>
 8008bac:	f000 f8dc 	bl	8008d68 <__multadd>
 8008bb0:	4680      	mov	r8, r0
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	f109 0901 	add.w	r9, r9, #1
 8008bb8:	e772      	b.n	8008aa0 <_dtoa_r+0x9f0>
 8008bba:	f000 f8d5 	bl	8008d68 <__multadd>
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	4680      	mov	r8, r0
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	220a      	movs	r2, #10
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 f8ce 	bl	8008d68 <__multadd>
 8008bcc:	4607      	mov	r7, r0
 8008bce:	e7f1      	b.n	8008bb4 <_dtoa_r+0xb04>
 8008bd0:	9b03      	ldr	r3, [sp, #12]
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	9d01      	ldr	r5, [sp, #4]
 8008bd6:	ee18 0a10 	vmov	r0, s16
 8008bda:	4631      	mov	r1, r6
 8008bdc:	f7ff f9da 	bl	8007f94 <quorem>
 8008be0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008be4:	9b01      	ldr	r3, [sp, #4]
 8008be6:	f805 ab01 	strb.w	sl, [r5], #1
 8008bea:	1aea      	subs	r2, r5, r3
 8008bec:	9b02      	ldr	r3, [sp, #8]
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	dd09      	ble.n	8008c06 <_dtoa_r+0xb56>
 8008bf2:	ee18 1a10 	vmov	r1, s16
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	220a      	movs	r2, #10
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f000 f8b4 	bl	8008d68 <__multadd>
 8008c00:	ee08 0a10 	vmov	s16, r0
 8008c04:	e7e7      	b.n	8008bd6 <_dtoa_r+0xb26>
 8008c06:	9b02      	ldr	r3, [sp, #8]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	bfc8      	it	gt
 8008c0c:	461d      	movgt	r5, r3
 8008c0e:	9b01      	ldr	r3, [sp, #4]
 8008c10:	bfd8      	it	le
 8008c12:	2501      	movle	r5, #1
 8008c14:	441d      	add	r5, r3
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	ee18 1a10 	vmov	r1, s16
 8008c1e:	2201      	movs	r2, #1
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 fa51 	bl	80090c8 <__lshift>
 8008c26:	4631      	mov	r1, r6
 8008c28:	ee08 0a10 	vmov	s16, r0
 8008c2c:	f000 fabc 	bl	80091a8 <__mcmp>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	dc91      	bgt.n	8008b58 <_dtoa_r+0xaa8>
 8008c34:	d102      	bne.n	8008c3c <_dtoa_r+0xb8c>
 8008c36:	f01a 0f01 	tst.w	sl, #1
 8008c3a:	d18d      	bne.n	8008b58 <_dtoa_r+0xaa8>
 8008c3c:	462b      	mov	r3, r5
 8008c3e:	461d      	mov	r5, r3
 8008c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c44:	2a30      	cmp	r2, #48	; 0x30
 8008c46:	d0fa      	beq.n	8008c3e <_dtoa_r+0xb8e>
 8008c48:	e6d7      	b.n	80089fa <_dtoa_r+0x94a>
 8008c4a:	9a01      	ldr	r2, [sp, #4]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d184      	bne.n	8008b5a <_dtoa_r+0xaaa>
 8008c50:	9b00      	ldr	r3, [sp, #0]
 8008c52:	3301      	adds	r3, #1
 8008c54:	9300      	str	r3, [sp, #0]
 8008c56:	2331      	movs	r3, #49	; 0x31
 8008c58:	7013      	strb	r3, [r2, #0]
 8008c5a:	e6ce      	b.n	80089fa <_dtoa_r+0x94a>
 8008c5c:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <_dtoa_r+0xbd4>)
 8008c5e:	f7ff ba95 	b.w	800818c <_dtoa_r+0xdc>
 8008c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f47f aa6e 	bne.w	8008146 <_dtoa_r+0x96>
 8008c6a:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <_dtoa_r+0xbd8>)
 8008c6c:	f7ff ba8e 	b.w	800818c <_dtoa_r+0xdc>
 8008c70:	9b02      	ldr	r3, [sp, #8]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	dcae      	bgt.n	8008bd4 <_dtoa_r+0xb24>
 8008c76:	9b06      	ldr	r3, [sp, #24]
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	f73f aea8 	bgt.w	80089ce <_dtoa_r+0x91e>
 8008c7e:	e7a9      	b.n	8008bd4 <_dtoa_r+0xb24>
 8008c80:	0800ba87 	.word	0x0800ba87
 8008c84:	0800b9e4 	.word	0x0800b9e4
 8008c88:	0800ba08 	.word	0x0800ba08

08008c8c <_localeconv_r>:
 8008c8c:	4800      	ldr	r0, [pc, #0]	; (8008c90 <_localeconv_r+0x4>)
 8008c8e:	4770      	bx	lr
 8008c90:	20000168 	.word	0x20000168

08008c94 <malloc>:
 8008c94:	4b02      	ldr	r3, [pc, #8]	; (8008ca0 <malloc+0xc>)
 8008c96:	4601      	mov	r1, r0
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	f000 bc09 	b.w	80094b0 <_malloc_r>
 8008c9e:	bf00      	nop
 8008ca0:	20000014 	.word	0x20000014

08008ca4 <_Balloc>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ca8:	4604      	mov	r4, r0
 8008caa:	460d      	mov	r5, r1
 8008cac:	b976      	cbnz	r6, 8008ccc <_Balloc+0x28>
 8008cae:	2010      	movs	r0, #16
 8008cb0:	f7ff fff0 	bl	8008c94 <malloc>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	6260      	str	r0, [r4, #36]	; 0x24
 8008cb8:	b920      	cbnz	r0, 8008cc4 <_Balloc+0x20>
 8008cba:	4b18      	ldr	r3, [pc, #96]	; (8008d1c <_Balloc+0x78>)
 8008cbc:	4818      	ldr	r0, [pc, #96]	; (8008d20 <_Balloc+0x7c>)
 8008cbe:	2166      	movs	r1, #102	; 0x66
 8008cc0:	f000 fdd6 	bl	8009870 <__assert_func>
 8008cc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cc8:	6006      	str	r6, [r0, #0]
 8008cca:	60c6      	str	r6, [r0, #12]
 8008ccc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008cce:	68f3      	ldr	r3, [r6, #12]
 8008cd0:	b183      	cbz	r3, 8008cf4 <_Balloc+0x50>
 8008cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cda:	b9b8      	cbnz	r0, 8008d0c <_Balloc+0x68>
 8008cdc:	2101      	movs	r1, #1
 8008cde:	fa01 f605 	lsl.w	r6, r1, r5
 8008ce2:	1d72      	adds	r2, r6, #5
 8008ce4:	0092      	lsls	r2, r2, #2
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f000 fb60 	bl	80093ac <_calloc_r>
 8008cec:	b160      	cbz	r0, 8008d08 <_Balloc+0x64>
 8008cee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cf2:	e00e      	b.n	8008d12 <_Balloc+0x6e>
 8008cf4:	2221      	movs	r2, #33	; 0x21
 8008cf6:	2104      	movs	r1, #4
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f000 fb57 	bl	80093ac <_calloc_r>
 8008cfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d00:	60f0      	str	r0, [r6, #12]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e4      	bne.n	8008cd2 <_Balloc+0x2e>
 8008d08:	2000      	movs	r0, #0
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}
 8008d0c:	6802      	ldr	r2, [r0, #0]
 8008d0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d12:	2300      	movs	r3, #0
 8008d14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d18:	e7f7      	b.n	8008d0a <_Balloc+0x66>
 8008d1a:	bf00      	nop
 8008d1c:	0800ba15 	.word	0x0800ba15
 8008d20:	0800ba98 	.word	0x0800ba98

08008d24 <_Bfree>:
 8008d24:	b570      	push	{r4, r5, r6, lr}
 8008d26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d28:	4605      	mov	r5, r0
 8008d2a:	460c      	mov	r4, r1
 8008d2c:	b976      	cbnz	r6, 8008d4c <_Bfree+0x28>
 8008d2e:	2010      	movs	r0, #16
 8008d30:	f7ff ffb0 	bl	8008c94 <malloc>
 8008d34:	4602      	mov	r2, r0
 8008d36:	6268      	str	r0, [r5, #36]	; 0x24
 8008d38:	b920      	cbnz	r0, 8008d44 <_Bfree+0x20>
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <_Bfree+0x3c>)
 8008d3c:	4809      	ldr	r0, [pc, #36]	; (8008d64 <_Bfree+0x40>)
 8008d3e:	218a      	movs	r1, #138	; 0x8a
 8008d40:	f000 fd96 	bl	8009870 <__assert_func>
 8008d44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d48:	6006      	str	r6, [r0, #0]
 8008d4a:	60c6      	str	r6, [r0, #12]
 8008d4c:	b13c      	cbz	r4, 8008d5e <_Bfree+0x3a>
 8008d4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d50:	6862      	ldr	r2, [r4, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d58:	6021      	str	r1, [r4, #0]
 8008d5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d5e:	bd70      	pop	{r4, r5, r6, pc}
 8008d60:	0800ba15 	.word	0x0800ba15
 8008d64:	0800ba98 	.word	0x0800ba98

08008d68 <__multadd>:
 8008d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6c:	690d      	ldr	r5, [r1, #16]
 8008d6e:	4607      	mov	r7, r0
 8008d70:	460c      	mov	r4, r1
 8008d72:	461e      	mov	r6, r3
 8008d74:	f101 0c14 	add.w	ip, r1, #20
 8008d78:	2000      	movs	r0, #0
 8008d7a:	f8dc 3000 	ldr.w	r3, [ip]
 8008d7e:	b299      	uxth	r1, r3
 8008d80:	fb02 6101 	mla	r1, r2, r1, r6
 8008d84:	0c1e      	lsrs	r6, r3, #16
 8008d86:	0c0b      	lsrs	r3, r1, #16
 8008d88:	fb02 3306 	mla	r3, r2, r6, r3
 8008d8c:	b289      	uxth	r1, r1
 8008d8e:	3001      	adds	r0, #1
 8008d90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d94:	4285      	cmp	r5, r0
 8008d96:	f84c 1b04 	str.w	r1, [ip], #4
 8008d9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d9e:	dcec      	bgt.n	8008d7a <__multadd+0x12>
 8008da0:	b30e      	cbz	r6, 8008de6 <__multadd+0x7e>
 8008da2:	68a3      	ldr	r3, [r4, #8]
 8008da4:	42ab      	cmp	r3, r5
 8008da6:	dc19      	bgt.n	8008ddc <__multadd+0x74>
 8008da8:	6861      	ldr	r1, [r4, #4]
 8008daa:	4638      	mov	r0, r7
 8008dac:	3101      	adds	r1, #1
 8008dae:	f7ff ff79 	bl	8008ca4 <_Balloc>
 8008db2:	4680      	mov	r8, r0
 8008db4:	b928      	cbnz	r0, 8008dc2 <__multadd+0x5a>
 8008db6:	4602      	mov	r2, r0
 8008db8:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <__multadd+0x84>)
 8008dba:	480d      	ldr	r0, [pc, #52]	; (8008df0 <__multadd+0x88>)
 8008dbc:	21b5      	movs	r1, #181	; 0xb5
 8008dbe:	f000 fd57 	bl	8009870 <__assert_func>
 8008dc2:	6922      	ldr	r2, [r4, #16]
 8008dc4:	3202      	adds	r2, #2
 8008dc6:	f104 010c 	add.w	r1, r4, #12
 8008dca:	0092      	lsls	r2, r2, #2
 8008dcc:	300c      	adds	r0, #12
 8008dce:	f7fe fc41 	bl	8007654 <memcpy>
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4638      	mov	r0, r7
 8008dd6:	f7ff ffa5 	bl	8008d24 <_Bfree>
 8008dda:	4644      	mov	r4, r8
 8008ddc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008de0:	3501      	adds	r5, #1
 8008de2:	615e      	str	r6, [r3, #20]
 8008de4:	6125      	str	r5, [r4, #16]
 8008de6:	4620      	mov	r0, r4
 8008de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dec:	0800ba87 	.word	0x0800ba87
 8008df0:	0800ba98 	.word	0x0800ba98

08008df4 <__hi0bits>:
 8008df4:	0c03      	lsrs	r3, r0, #16
 8008df6:	041b      	lsls	r3, r3, #16
 8008df8:	b9d3      	cbnz	r3, 8008e30 <__hi0bits+0x3c>
 8008dfa:	0400      	lsls	r0, r0, #16
 8008dfc:	2310      	movs	r3, #16
 8008dfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e02:	bf04      	itt	eq
 8008e04:	0200      	lsleq	r0, r0, #8
 8008e06:	3308      	addeq	r3, #8
 8008e08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e0c:	bf04      	itt	eq
 8008e0e:	0100      	lsleq	r0, r0, #4
 8008e10:	3304      	addeq	r3, #4
 8008e12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e16:	bf04      	itt	eq
 8008e18:	0080      	lsleq	r0, r0, #2
 8008e1a:	3302      	addeq	r3, #2
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	db05      	blt.n	8008e2c <__hi0bits+0x38>
 8008e20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e24:	f103 0301 	add.w	r3, r3, #1
 8008e28:	bf08      	it	eq
 8008e2a:	2320      	moveq	r3, #32
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	4770      	bx	lr
 8008e30:	2300      	movs	r3, #0
 8008e32:	e7e4      	b.n	8008dfe <__hi0bits+0xa>

08008e34 <__lo0bits>:
 8008e34:	6803      	ldr	r3, [r0, #0]
 8008e36:	f013 0207 	ands.w	r2, r3, #7
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	d00b      	beq.n	8008e56 <__lo0bits+0x22>
 8008e3e:	07da      	lsls	r2, r3, #31
 8008e40:	d423      	bmi.n	8008e8a <__lo0bits+0x56>
 8008e42:	0798      	lsls	r0, r3, #30
 8008e44:	bf49      	itett	mi
 8008e46:	085b      	lsrmi	r3, r3, #1
 8008e48:	089b      	lsrpl	r3, r3, #2
 8008e4a:	2001      	movmi	r0, #1
 8008e4c:	600b      	strmi	r3, [r1, #0]
 8008e4e:	bf5c      	itt	pl
 8008e50:	600b      	strpl	r3, [r1, #0]
 8008e52:	2002      	movpl	r0, #2
 8008e54:	4770      	bx	lr
 8008e56:	b298      	uxth	r0, r3
 8008e58:	b9a8      	cbnz	r0, 8008e86 <__lo0bits+0x52>
 8008e5a:	0c1b      	lsrs	r3, r3, #16
 8008e5c:	2010      	movs	r0, #16
 8008e5e:	b2da      	uxtb	r2, r3
 8008e60:	b90a      	cbnz	r2, 8008e66 <__lo0bits+0x32>
 8008e62:	3008      	adds	r0, #8
 8008e64:	0a1b      	lsrs	r3, r3, #8
 8008e66:	071a      	lsls	r2, r3, #28
 8008e68:	bf04      	itt	eq
 8008e6a:	091b      	lsreq	r3, r3, #4
 8008e6c:	3004      	addeq	r0, #4
 8008e6e:	079a      	lsls	r2, r3, #30
 8008e70:	bf04      	itt	eq
 8008e72:	089b      	lsreq	r3, r3, #2
 8008e74:	3002      	addeq	r0, #2
 8008e76:	07da      	lsls	r2, r3, #31
 8008e78:	d403      	bmi.n	8008e82 <__lo0bits+0x4e>
 8008e7a:	085b      	lsrs	r3, r3, #1
 8008e7c:	f100 0001 	add.w	r0, r0, #1
 8008e80:	d005      	beq.n	8008e8e <__lo0bits+0x5a>
 8008e82:	600b      	str	r3, [r1, #0]
 8008e84:	4770      	bx	lr
 8008e86:	4610      	mov	r0, r2
 8008e88:	e7e9      	b.n	8008e5e <__lo0bits+0x2a>
 8008e8a:	2000      	movs	r0, #0
 8008e8c:	4770      	bx	lr
 8008e8e:	2020      	movs	r0, #32
 8008e90:	4770      	bx	lr
	...

08008e94 <__i2b>:
 8008e94:	b510      	push	{r4, lr}
 8008e96:	460c      	mov	r4, r1
 8008e98:	2101      	movs	r1, #1
 8008e9a:	f7ff ff03 	bl	8008ca4 <_Balloc>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	b928      	cbnz	r0, 8008eae <__i2b+0x1a>
 8008ea2:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <__i2b+0x24>)
 8008ea4:	4805      	ldr	r0, [pc, #20]	; (8008ebc <__i2b+0x28>)
 8008ea6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008eaa:	f000 fce1 	bl	8009870 <__assert_func>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	6144      	str	r4, [r0, #20]
 8008eb2:	6103      	str	r3, [r0, #16]
 8008eb4:	bd10      	pop	{r4, pc}
 8008eb6:	bf00      	nop
 8008eb8:	0800ba87 	.word	0x0800ba87
 8008ebc:	0800ba98 	.word	0x0800ba98

08008ec0 <__multiply>:
 8008ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec4:	4691      	mov	r9, r2
 8008ec6:	690a      	ldr	r2, [r1, #16]
 8008ec8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	bfb8      	it	lt
 8008ed0:	460b      	movlt	r3, r1
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	bfbc      	itt	lt
 8008ed6:	464c      	movlt	r4, r9
 8008ed8:	4699      	movlt	r9, r3
 8008eda:	6927      	ldr	r7, [r4, #16]
 8008edc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ee0:	68a3      	ldr	r3, [r4, #8]
 8008ee2:	6861      	ldr	r1, [r4, #4]
 8008ee4:	eb07 060a 	add.w	r6, r7, sl
 8008ee8:	42b3      	cmp	r3, r6
 8008eea:	b085      	sub	sp, #20
 8008eec:	bfb8      	it	lt
 8008eee:	3101      	addlt	r1, #1
 8008ef0:	f7ff fed8 	bl	8008ca4 <_Balloc>
 8008ef4:	b930      	cbnz	r0, 8008f04 <__multiply+0x44>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	4b44      	ldr	r3, [pc, #272]	; (800900c <__multiply+0x14c>)
 8008efa:	4845      	ldr	r0, [pc, #276]	; (8009010 <__multiply+0x150>)
 8008efc:	f240 115d 	movw	r1, #349	; 0x15d
 8008f00:	f000 fcb6 	bl	8009870 <__assert_func>
 8008f04:	f100 0514 	add.w	r5, r0, #20
 8008f08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f0c:	462b      	mov	r3, r5
 8008f0e:	2200      	movs	r2, #0
 8008f10:	4543      	cmp	r3, r8
 8008f12:	d321      	bcc.n	8008f58 <__multiply+0x98>
 8008f14:	f104 0314 	add.w	r3, r4, #20
 8008f18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f1c:	f109 0314 	add.w	r3, r9, #20
 8008f20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f24:	9202      	str	r2, [sp, #8]
 8008f26:	1b3a      	subs	r2, r7, r4
 8008f28:	3a15      	subs	r2, #21
 8008f2a:	f022 0203 	bic.w	r2, r2, #3
 8008f2e:	3204      	adds	r2, #4
 8008f30:	f104 0115 	add.w	r1, r4, #21
 8008f34:	428f      	cmp	r7, r1
 8008f36:	bf38      	it	cc
 8008f38:	2204      	movcc	r2, #4
 8008f3a:	9201      	str	r2, [sp, #4]
 8008f3c:	9a02      	ldr	r2, [sp, #8]
 8008f3e:	9303      	str	r3, [sp, #12]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d80c      	bhi.n	8008f5e <__multiply+0x9e>
 8008f44:	2e00      	cmp	r6, #0
 8008f46:	dd03      	ble.n	8008f50 <__multiply+0x90>
 8008f48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d05a      	beq.n	8009006 <__multiply+0x146>
 8008f50:	6106      	str	r6, [r0, #16]
 8008f52:	b005      	add	sp, #20
 8008f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f58:	f843 2b04 	str.w	r2, [r3], #4
 8008f5c:	e7d8      	b.n	8008f10 <__multiply+0x50>
 8008f5e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f62:	f1ba 0f00 	cmp.w	sl, #0
 8008f66:	d024      	beq.n	8008fb2 <__multiply+0xf2>
 8008f68:	f104 0e14 	add.w	lr, r4, #20
 8008f6c:	46a9      	mov	r9, r5
 8008f6e:	f04f 0c00 	mov.w	ip, #0
 8008f72:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f76:	f8d9 1000 	ldr.w	r1, [r9]
 8008f7a:	fa1f fb82 	uxth.w	fp, r2
 8008f7e:	b289      	uxth	r1, r1
 8008f80:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008f88:	f8d9 2000 	ldr.w	r2, [r9]
 8008f8c:	4461      	add	r1, ip
 8008f8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f92:	fb0a c20b 	mla	r2, sl, fp, ip
 8008f96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f9a:	b289      	uxth	r1, r1
 8008f9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fa0:	4577      	cmp	r7, lr
 8008fa2:	f849 1b04 	str.w	r1, [r9], #4
 8008fa6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008faa:	d8e2      	bhi.n	8008f72 <__multiply+0xb2>
 8008fac:	9a01      	ldr	r2, [sp, #4]
 8008fae:	f845 c002 	str.w	ip, [r5, r2]
 8008fb2:	9a03      	ldr	r2, [sp, #12]
 8008fb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	f1b9 0f00 	cmp.w	r9, #0
 8008fbe:	d020      	beq.n	8009002 <__multiply+0x142>
 8008fc0:	6829      	ldr	r1, [r5, #0]
 8008fc2:	f104 0c14 	add.w	ip, r4, #20
 8008fc6:	46ae      	mov	lr, r5
 8008fc8:	f04f 0a00 	mov.w	sl, #0
 8008fcc:	f8bc b000 	ldrh.w	fp, [ip]
 8008fd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008fd4:	fb09 220b 	mla	r2, r9, fp, r2
 8008fd8:	4492      	add	sl, r2
 8008fda:	b289      	uxth	r1, r1
 8008fdc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008fe0:	f84e 1b04 	str.w	r1, [lr], #4
 8008fe4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008fe8:	f8be 1000 	ldrh.w	r1, [lr]
 8008fec:	0c12      	lsrs	r2, r2, #16
 8008fee:	fb09 1102 	mla	r1, r9, r2, r1
 8008ff2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008ff6:	4567      	cmp	r7, ip
 8008ff8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008ffc:	d8e6      	bhi.n	8008fcc <__multiply+0x10c>
 8008ffe:	9a01      	ldr	r2, [sp, #4]
 8009000:	50a9      	str	r1, [r5, r2]
 8009002:	3504      	adds	r5, #4
 8009004:	e79a      	b.n	8008f3c <__multiply+0x7c>
 8009006:	3e01      	subs	r6, #1
 8009008:	e79c      	b.n	8008f44 <__multiply+0x84>
 800900a:	bf00      	nop
 800900c:	0800ba87 	.word	0x0800ba87
 8009010:	0800ba98 	.word	0x0800ba98

08009014 <__pow5mult>:
 8009014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009018:	4615      	mov	r5, r2
 800901a:	f012 0203 	ands.w	r2, r2, #3
 800901e:	4606      	mov	r6, r0
 8009020:	460f      	mov	r7, r1
 8009022:	d007      	beq.n	8009034 <__pow5mult+0x20>
 8009024:	4c25      	ldr	r4, [pc, #148]	; (80090bc <__pow5mult+0xa8>)
 8009026:	3a01      	subs	r2, #1
 8009028:	2300      	movs	r3, #0
 800902a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800902e:	f7ff fe9b 	bl	8008d68 <__multadd>
 8009032:	4607      	mov	r7, r0
 8009034:	10ad      	asrs	r5, r5, #2
 8009036:	d03d      	beq.n	80090b4 <__pow5mult+0xa0>
 8009038:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800903a:	b97c      	cbnz	r4, 800905c <__pow5mult+0x48>
 800903c:	2010      	movs	r0, #16
 800903e:	f7ff fe29 	bl	8008c94 <malloc>
 8009042:	4602      	mov	r2, r0
 8009044:	6270      	str	r0, [r6, #36]	; 0x24
 8009046:	b928      	cbnz	r0, 8009054 <__pow5mult+0x40>
 8009048:	4b1d      	ldr	r3, [pc, #116]	; (80090c0 <__pow5mult+0xac>)
 800904a:	481e      	ldr	r0, [pc, #120]	; (80090c4 <__pow5mult+0xb0>)
 800904c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009050:	f000 fc0e 	bl	8009870 <__assert_func>
 8009054:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009058:	6004      	str	r4, [r0, #0]
 800905a:	60c4      	str	r4, [r0, #12]
 800905c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009060:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009064:	b94c      	cbnz	r4, 800907a <__pow5mult+0x66>
 8009066:	f240 2171 	movw	r1, #625	; 0x271
 800906a:	4630      	mov	r0, r6
 800906c:	f7ff ff12 	bl	8008e94 <__i2b>
 8009070:	2300      	movs	r3, #0
 8009072:	f8c8 0008 	str.w	r0, [r8, #8]
 8009076:	4604      	mov	r4, r0
 8009078:	6003      	str	r3, [r0, #0]
 800907a:	f04f 0900 	mov.w	r9, #0
 800907e:	07eb      	lsls	r3, r5, #31
 8009080:	d50a      	bpl.n	8009098 <__pow5mult+0x84>
 8009082:	4639      	mov	r1, r7
 8009084:	4622      	mov	r2, r4
 8009086:	4630      	mov	r0, r6
 8009088:	f7ff ff1a 	bl	8008ec0 <__multiply>
 800908c:	4639      	mov	r1, r7
 800908e:	4680      	mov	r8, r0
 8009090:	4630      	mov	r0, r6
 8009092:	f7ff fe47 	bl	8008d24 <_Bfree>
 8009096:	4647      	mov	r7, r8
 8009098:	106d      	asrs	r5, r5, #1
 800909a:	d00b      	beq.n	80090b4 <__pow5mult+0xa0>
 800909c:	6820      	ldr	r0, [r4, #0]
 800909e:	b938      	cbnz	r0, 80090b0 <__pow5mult+0x9c>
 80090a0:	4622      	mov	r2, r4
 80090a2:	4621      	mov	r1, r4
 80090a4:	4630      	mov	r0, r6
 80090a6:	f7ff ff0b 	bl	8008ec0 <__multiply>
 80090aa:	6020      	str	r0, [r4, #0]
 80090ac:	f8c0 9000 	str.w	r9, [r0]
 80090b0:	4604      	mov	r4, r0
 80090b2:	e7e4      	b.n	800907e <__pow5mult+0x6a>
 80090b4:	4638      	mov	r0, r7
 80090b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ba:	bf00      	nop
 80090bc:	0800bbe8 	.word	0x0800bbe8
 80090c0:	0800ba15 	.word	0x0800ba15
 80090c4:	0800ba98 	.word	0x0800ba98

080090c8 <__lshift>:
 80090c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090cc:	460c      	mov	r4, r1
 80090ce:	6849      	ldr	r1, [r1, #4]
 80090d0:	6923      	ldr	r3, [r4, #16]
 80090d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090d6:	68a3      	ldr	r3, [r4, #8]
 80090d8:	4607      	mov	r7, r0
 80090da:	4691      	mov	r9, r2
 80090dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090e0:	f108 0601 	add.w	r6, r8, #1
 80090e4:	42b3      	cmp	r3, r6
 80090e6:	db0b      	blt.n	8009100 <__lshift+0x38>
 80090e8:	4638      	mov	r0, r7
 80090ea:	f7ff fddb 	bl	8008ca4 <_Balloc>
 80090ee:	4605      	mov	r5, r0
 80090f0:	b948      	cbnz	r0, 8009106 <__lshift+0x3e>
 80090f2:	4602      	mov	r2, r0
 80090f4:	4b2a      	ldr	r3, [pc, #168]	; (80091a0 <__lshift+0xd8>)
 80090f6:	482b      	ldr	r0, [pc, #172]	; (80091a4 <__lshift+0xdc>)
 80090f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80090fc:	f000 fbb8 	bl	8009870 <__assert_func>
 8009100:	3101      	adds	r1, #1
 8009102:	005b      	lsls	r3, r3, #1
 8009104:	e7ee      	b.n	80090e4 <__lshift+0x1c>
 8009106:	2300      	movs	r3, #0
 8009108:	f100 0114 	add.w	r1, r0, #20
 800910c:	f100 0210 	add.w	r2, r0, #16
 8009110:	4618      	mov	r0, r3
 8009112:	4553      	cmp	r3, sl
 8009114:	db37      	blt.n	8009186 <__lshift+0xbe>
 8009116:	6920      	ldr	r0, [r4, #16]
 8009118:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800911c:	f104 0314 	add.w	r3, r4, #20
 8009120:	f019 091f 	ands.w	r9, r9, #31
 8009124:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009128:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800912c:	d02f      	beq.n	800918e <__lshift+0xc6>
 800912e:	f1c9 0e20 	rsb	lr, r9, #32
 8009132:	468a      	mov	sl, r1
 8009134:	f04f 0c00 	mov.w	ip, #0
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	fa02 f209 	lsl.w	r2, r2, r9
 800913e:	ea42 020c 	orr.w	r2, r2, ip
 8009142:	f84a 2b04 	str.w	r2, [sl], #4
 8009146:	f853 2b04 	ldr.w	r2, [r3], #4
 800914a:	4298      	cmp	r0, r3
 800914c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009150:	d8f2      	bhi.n	8009138 <__lshift+0x70>
 8009152:	1b03      	subs	r3, r0, r4
 8009154:	3b15      	subs	r3, #21
 8009156:	f023 0303 	bic.w	r3, r3, #3
 800915a:	3304      	adds	r3, #4
 800915c:	f104 0215 	add.w	r2, r4, #21
 8009160:	4290      	cmp	r0, r2
 8009162:	bf38      	it	cc
 8009164:	2304      	movcc	r3, #4
 8009166:	f841 c003 	str.w	ip, [r1, r3]
 800916a:	f1bc 0f00 	cmp.w	ip, #0
 800916e:	d001      	beq.n	8009174 <__lshift+0xac>
 8009170:	f108 0602 	add.w	r6, r8, #2
 8009174:	3e01      	subs	r6, #1
 8009176:	4638      	mov	r0, r7
 8009178:	612e      	str	r6, [r5, #16]
 800917a:	4621      	mov	r1, r4
 800917c:	f7ff fdd2 	bl	8008d24 <_Bfree>
 8009180:	4628      	mov	r0, r5
 8009182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009186:	f842 0f04 	str.w	r0, [r2, #4]!
 800918a:	3301      	adds	r3, #1
 800918c:	e7c1      	b.n	8009112 <__lshift+0x4a>
 800918e:	3904      	subs	r1, #4
 8009190:	f853 2b04 	ldr.w	r2, [r3], #4
 8009194:	f841 2f04 	str.w	r2, [r1, #4]!
 8009198:	4298      	cmp	r0, r3
 800919a:	d8f9      	bhi.n	8009190 <__lshift+0xc8>
 800919c:	e7ea      	b.n	8009174 <__lshift+0xac>
 800919e:	bf00      	nop
 80091a0:	0800ba87 	.word	0x0800ba87
 80091a4:	0800ba98 	.word	0x0800ba98

080091a8 <__mcmp>:
 80091a8:	b530      	push	{r4, r5, lr}
 80091aa:	6902      	ldr	r2, [r0, #16]
 80091ac:	690c      	ldr	r4, [r1, #16]
 80091ae:	1b12      	subs	r2, r2, r4
 80091b0:	d10e      	bne.n	80091d0 <__mcmp+0x28>
 80091b2:	f100 0314 	add.w	r3, r0, #20
 80091b6:	3114      	adds	r1, #20
 80091b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091c8:	42a5      	cmp	r5, r4
 80091ca:	d003      	beq.n	80091d4 <__mcmp+0x2c>
 80091cc:	d305      	bcc.n	80091da <__mcmp+0x32>
 80091ce:	2201      	movs	r2, #1
 80091d0:	4610      	mov	r0, r2
 80091d2:	bd30      	pop	{r4, r5, pc}
 80091d4:	4283      	cmp	r3, r0
 80091d6:	d3f3      	bcc.n	80091c0 <__mcmp+0x18>
 80091d8:	e7fa      	b.n	80091d0 <__mcmp+0x28>
 80091da:	f04f 32ff 	mov.w	r2, #4294967295
 80091de:	e7f7      	b.n	80091d0 <__mcmp+0x28>

080091e0 <__mdiff>:
 80091e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	460c      	mov	r4, r1
 80091e6:	4606      	mov	r6, r0
 80091e8:	4611      	mov	r1, r2
 80091ea:	4620      	mov	r0, r4
 80091ec:	4690      	mov	r8, r2
 80091ee:	f7ff ffdb 	bl	80091a8 <__mcmp>
 80091f2:	1e05      	subs	r5, r0, #0
 80091f4:	d110      	bne.n	8009218 <__mdiff+0x38>
 80091f6:	4629      	mov	r1, r5
 80091f8:	4630      	mov	r0, r6
 80091fa:	f7ff fd53 	bl	8008ca4 <_Balloc>
 80091fe:	b930      	cbnz	r0, 800920e <__mdiff+0x2e>
 8009200:	4b3a      	ldr	r3, [pc, #232]	; (80092ec <__mdiff+0x10c>)
 8009202:	4602      	mov	r2, r0
 8009204:	f240 2132 	movw	r1, #562	; 0x232
 8009208:	4839      	ldr	r0, [pc, #228]	; (80092f0 <__mdiff+0x110>)
 800920a:	f000 fb31 	bl	8009870 <__assert_func>
 800920e:	2301      	movs	r3, #1
 8009210:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009218:	bfa4      	itt	ge
 800921a:	4643      	movge	r3, r8
 800921c:	46a0      	movge	r8, r4
 800921e:	4630      	mov	r0, r6
 8009220:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009224:	bfa6      	itte	ge
 8009226:	461c      	movge	r4, r3
 8009228:	2500      	movge	r5, #0
 800922a:	2501      	movlt	r5, #1
 800922c:	f7ff fd3a 	bl	8008ca4 <_Balloc>
 8009230:	b920      	cbnz	r0, 800923c <__mdiff+0x5c>
 8009232:	4b2e      	ldr	r3, [pc, #184]	; (80092ec <__mdiff+0x10c>)
 8009234:	4602      	mov	r2, r0
 8009236:	f44f 7110 	mov.w	r1, #576	; 0x240
 800923a:	e7e5      	b.n	8009208 <__mdiff+0x28>
 800923c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009240:	6926      	ldr	r6, [r4, #16]
 8009242:	60c5      	str	r5, [r0, #12]
 8009244:	f104 0914 	add.w	r9, r4, #20
 8009248:	f108 0514 	add.w	r5, r8, #20
 800924c:	f100 0e14 	add.w	lr, r0, #20
 8009250:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009254:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009258:	f108 0210 	add.w	r2, r8, #16
 800925c:	46f2      	mov	sl, lr
 800925e:	2100      	movs	r1, #0
 8009260:	f859 3b04 	ldr.w	r3, [r9], #4
 8009264:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009268:	fa1f f883 	uxth.w	r8, r3
 800926c:	fa11 f18b 	uxtah	r1, r1, fp
 8009270:	0c1b      	lsrs	r3, r3, #16
 8009272:	eba1 0808 	sub.w	r8, r1, r8
 8009276:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800927a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800927e:	fa1f f888 	uxth.w	r8, r8
 8009282:	1419      	asrs	r1, r3, #16
 8009284:	454e      	cmp	r6, r9
 8009286:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800928a:	f84a 3b04 	str.w	r3, [sl], #4
 800928e:	d8e7      	bhi.n	8009260 <__mdiff+0x80>
 8009290:	1b33      	subs	r3, r6, r4
 8009292:	3b15      	subs	r3, #21
 8009294:	f023 0303 	bic.w	r3, r3, #3
 8009298:	3304      	adds	r3, #4
 800929a:	3415      	adds	r4, #21
 800929c:	42a6      	cmp	r6, r4
 800929e:	bf38      	it	cc
 80092a0:	2304      	movcc	r3, #4
 80092a2:	441d      	add	r5, r3
 80092a4:	4473      	add	r3, lr
 80092a6:	469e      	mov	lr, r3
 80092a8:	462e      	mov	r6, r5
 80092aa:	4566      	cmp	r6, ip
 80092ac:	d30e      	bcc.n	80092cc <__mdiff+0xec>
 80092ae:	f10c 0203 	add.w	r2, ip, #3
 80092b2:	1b52      	subs	r2, r2, r5
 80092b4:	f022 0203 	bic.w	r2, r2, #3
 80092b8:	3d03      	subs	r5, #3
 80092ba:	45ac      	cmp	ip, r5
 80092bc:	bf38      	it	cc
 80092be:	2200      	movcc	r2, #0
 80092c0:	441a      	add	r2, r3
 80092c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80092c6:	b17b      	cbz	r3, 80092e8 <__mdiff+0x108>
 80092c8:	6107      	str	r7, [r0, #16]
 80092ca:	e7a3      	b.n	8009214 <__mdiff+0x34>
 80092cc:	f856 8b04 	ldr.w	r8, [r6], #4
 80092d0:	fa11 f288 	uxtah	r2, r1, r8
 80092d4:	1414      	asrs	r4, r2, #16
 80092d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80092da:	b292      	uxth	r2, r2
 80092dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80092e0:	f84e 2b04 	str.w	r2, [lr], #4
 80092e4:	1421      	asrs	r1, r4, #16
 80092e6:	e7e0      	b.n	80092aa <__mdiff+0xca>
 80092e8:	3f01      	subs	r7, #1
 80092ea:	e7ea      	b.n	80092c2 <__mdiff+0xe2>
 80092ec:	0800ba87 	.word	0x0800ba87
 80092f0:	0800ba98 	.word	0x0800ba98

080092f4 <__d2b>:
 80092f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80092f8:	4689      	mov	r9, r1
 80092fa:	2101      	movs	r1, #1
 80092fc:	ec57 6b10 	vmov	r6, r7, d0
 8009300:	4690      	mov	r8, r2
 8009302:	f7ff fccf 	bl	8008ca4 <_Balloc>
 8009306:	4604      	mov	r4, r0
 8009308:	b930      	cbnz	r0, 8009318 <__d2b+0x24>
 800930a:	4602      	mov	r2, r0
 800930c:	4b25      	ldr	r3, [pc, #148]	; (80093a4 <__d2b+0xb0>)
 800930e:	4826      	ldr	r0, [pc, #152]	; (80093a8 <__d2b+0xb4>)
 8009310:	f240 310a 	movw	r1, #778	; 0x30a
 8009314:	f000 faac 	bl	8009870 <__assert_func>
 8009318:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800931c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009320:	bb35      	cbnz	r5, 8009370 <__d2b+0x7c>
 8009322:	2e00      	cmp	r6, #0
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	d028      	beq.n	800937a <__d2b+0x86>
 8009328:	4668      	mov	r0, sp
 800932a:	9600      	str	r6, [sp, #0]
 800932c:	f7ff fd82 	bl	8008e34 <__lo0bits>
 8009330:	9900      	ldr	r1, [sp, #0]
 8009332:	b300      	cbz	r0, 8009376 <__d2b+0x82>
 8009334:	9a01      	ldr	r2, [sp, #4]
 8009336:	f1c0 0320 	rsb	r3, r0, #32
 800933a:	fa02 f303 	lsl.w	r3, r2, r3
 800933e:	430b      	orrs	r3, r1
 8009340:	40c2      	lsrs	r2, r0
 8009342:	6163      	str	r3, [r4, #20]
 8009344:	9201      	str	r2, [sp, #4]
 8009346:	9b01      	ldr	r3, [sp, #4]
 8009348:	61a3      	str	r3, [r4, #24]
 800934a:	2b00      	cmp	r3, #0
 800934c:	bf14      	ite	ne
 800934e:	2202      	movne	r2, #2
 8009350:	2201      	moveq	r2, #1
 8009352:	6122      	str	r2, [r4, #16]
 8009354:	b1d5      	cbz	r5, 800938c <__d2b+0x98>
 8009356:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800935a:	4405      	add	r5, r0
 800935c:	f8c9 5000 	str.w	r5, [r9]
 8009360:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009364:	f8c8 0000 	str.w	r0, [r8]
 8009368:	4620      	mov	r0, r4
 800936a:	b003      	add	sp, #12
 800936c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009370:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009374:	e7d5      	b.n	8009322 <__d2b+0x2e>
 8009376:	6161      	str	r1, [r4, #20]
 8009378:	e7e5      	b.n	8009346 <__d2b+0x52>
 800937a:	a801      	add	r0, sp, #4
 800937c:	f7ff fd5a 	bl	8008e34 <__lo0bits>
 8009380:	9b01      	ldr	r3, [sp, #4]
 8009382:	6163      	str	r3, [r4, #20]
 8009384:	2201      	movs	r2, #1
 8009386:	6122      	str	r2, [r4, #16]
 8009388:	3020      	adds	r0, #32
 800938a:	e7e3      	b.n	8009354 <__d2b+0x60>
 800938c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009390:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009394:	f8c9 0000 	str.w	r0, [r9]
 8009398:	6918      	ldr	r0, [r3, #16]
 800939a:	f7ff fd2b 	bl	8008df4 <__hi0bits>
 800939e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093a2:	e7df      	b.n	8009364 <__d2b+0x70>
 80093a4:	0800ba87 	.word	0x0800ba87
 80093a8:	0800ba98 	.word	0x0800ba98

080093ac <_calloc_r>:
 80093ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093ae:	fba1 2402 	umull	r2, r4, r1, r2
 80093b2:	b94c      	cbnz	r4, 80093c8 <_calloc_r+0x1c>
 80093b4:	4611      	mov	r1, r2
 80093b6:	9201      	str	r2, [sp, #4]
 80093b8:	f000 f87a 	bl	80094b0 <_malloc_r>
 80093bc:	9a01      	ldr	r2, [sp, #4]
 80093be:	4605      	mov	r5, r0
 80093c0:	b930      	cbnz	r0, 80093d0 <_calloc_r+0x24>
 80093c2:	4628      	mov	r0, r5
 80093c4:	b003      	add	sp, #12
 80093c6:	bd30      	pop	{r4, r5, pc}
 80093c8:	220c      	movs	r2, #12
 80093ca:	6002      	str	r2, [r0, #0]
 80093cc:	2500      	movs	r5, #0
 80093ce:	e7f8      	b.n	80093c2 <_calloc_r+0x16>
 80093d0:	4621      	mov	r1, r4
 80093d2:	f7fe f94d 	bl	8007670 <memset>
 80093d6:	e7f4      	b.n	80093c2 <_calloc_r+0x16>

080093d8 <_free_r>:
 80093d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093da:	2900      	cmp	r1, #0
 80093dc:	d044      	beq.n	8009468 <_free_r+0x90>
 80093de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093e2:	9001      	str	r0, [sp, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f1a1 0404 	sub.w	r4, r1, #4
 80093ea:	bfb8      	it	lt
 80093ec:	18e4      	addlt	r4, r4, r3
 80093ee:	f000 fa9b 	bl	8009928 <__malloc_lock>
 80093f2:	4a1e      	ldr	r2, [pc, #120]	; (800946c <_free_r+0x94>)
 80093f4:	9801      	ldr	r0, [sp, #4]
 80093f6:	6813      	ldr	r3, [r2, #0]
 80093f8:	b933      	cbnz	r3, 8009408 <_free_r+0x30>
 80093fa:	6063      	str	r3, [r4, #4]
 80093fc:	6014      	str	r4, [r2, #0]
 80093fe:	b003      	add	sp, #12
 8009400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009404:	f000 ba96 	b.w	8009934 <__malloc_unlock>
 8009408:	42a3      	cmp	r3, r4
 800940a:	d908      	bls.n	800941e <_free_r+0x46>
 800940c:	6825      	ldr	r5, [r4, #0]
 800940e:	1961      	adds	r1, r4, r5
 8009410:	428b      	cmp	r3, r1
 8009412:	bf01      	itttt	eq
 8009414:	6819      	ldreq	r1, [r3, #0]
 8009416:	685b      	ldreq	r3, [r3, #4]
 8009418:	1949      	addeq	r1, r1, r5
 800941a:	6021      	streq	r1, [r4, #0]
 800941c:	e7ed      	b.n	80093fa <_free_r+0x22>
 800941e:	461a      	mov	r2, r3
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	b10b      	cbz	r3, 8009428 <_free_r+0x50>
 8009424:	42a3      	cmp	r3, r4
 8009426:	d9fa      	bls.n	800941e <_free_r+0x46>
 8009428:	6811      	ldr	r1, [r2, #0]
 800942a:	1855      	adds	r5, r2, r1
 800942c:	42a5      	cmp	r5, r4
 800942e:	d10b      	bne.n	8009448 <_free_r+0x70>
 8009430:	6824      	ldr	r4, [r4, #0]
 8009432:	4421      	add	r1, r4
 8009434:	1854      	adds	r4, r2, r1
 8009436:	42a3      	cmp	r3, r4
 8009438:	6011      	str	r1, [r2, #0]
 800943a:	d1e0      	bne.n	80093fe <_free_r+0x26>
 800943c:	681c      	ldr	r4, [r3, #0]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	6053      	str	r3, [r2, #4]
 8009442:	4421      	add	r1, r4
 8009444:	6011      	str	r1, [r2, #0]
 8009446:	e7da      	b.n	80093fe <_free_r+0x26>
 8009448:	d902      	bls.n	8009450 <_free_r+0x78>
 800944a:	230c      	movs	r3, #12
 800944c:	6003      	str	r3, [r0, #0]
 800944e:	e7d6      	b.n	80093fe <_free_r+0x26>
 8009450:	6825      	ldr	r5, [r4, #0]
 8009452:	1961      	adds	r1, r4, r5
 8009454:	428b      	cmp	r3, r1
 8009456:	bf04      	itt	eq
 8009458:	6819      	ldreq	r1, [r3, #0]
 800945a:	685b      	ldreq	r3, [r3, #4]
 800945c:	6063      	str	r3, [r4, #4]
 800945e:	bf04      	itt	eq
 8009460:	1949      	addeq	r1, r1, r5
 8009462:	6021      	streq	r1, [r4, #0]
 8009464:	6054      	str	r4, [r2, #4]
 8009466:	e7ca      	b.n	80093fe <_free_r+0x26>
 8009468:	b003      	add	sp, #12
 800946a:	bd30      	pop	{r4, r5, pc}
 800946c:	20000774 	.word	0x20000774

08009470 <sbrk_aligned>:
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	4e0e      	ldr	r6, [pc, #56]	; (80094ac <sbrk_aligned+0x3c>)
 8009474:	460c      	mov	r4, r1
 8009476:	6831      	ldr	r1, [r6, #0]
 8009478:	4605      	mov	r5, r0
 800947a:	b911      	cbnz	r1, 8009482 <sbrk_aligned+0x12>
 800947c:	f000 f9e8 	bl	8009850 <_sbrk_r>
 8009480:	6030      	str	r0, [r6, #0]
 8009482:	4621      	mov	r1, r4
 8009484:	4628      	mov	r0, r5
 8009486:	f000 f9e3 	bl	8009850 <_sbrk_r>
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	d00a      	beq.n	80094a4 <sbrk_aligned+0x34>
 800948e:	1cc4      	adds	r4, r0, #3
 8009490:	f024 0403 	bic.w	r4, r4, #3
 8009494:	42a0      	cmp	r0, r4
 8009496:	d007      	beq.n	80094a8 <sbrk_aligned+0x38>
 8009498:	1a21      	subs	r1, r4, r0
 800949a:	4628      	mov	r0, r5
 800949c:	f000 f9d8 	bl	8009850 <_sbrk_r>
 80094a0:	3001      	adds	r0, #1
 80094a2:	d101      	bne.n	80094a8 <sbrk_aligned+0x38>
 80094a4:	f04f 34ff 	mov.w	r4, #4294967295
 80094a8:	4620      	mov	r0, r4
 80094aa:	bd70      	pop	{r4, r5, r6, pc}
 80094ac:	20000778 	.word	0x20000778

080094b0 <_malloc_r>:
 80094b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094b4:	1ccd      	adds	r5, r1, #3
 80094b6:	f025 0503 	bic.w	r5, r5, #3
 80094ba:	3508      	adds	r5, #8
 80094bc:	2d0c      	cmp	r5, #12
 80094be:	bf38      	it	cc
 80094c0:	250c      	movcc	r5, #12
 80094c2:	2d00      	cmp	r5, #0
 80094c4:	4607      	mov	r7, r0
 80094c6:	db01      	blt.n	80094cc <_malloc_r+0x1c>
 80094c8:	42a9      	cmp	r1, r5
 80094ca:	d905      	bls.n	80094d8 <_malloc_r+0x28>
 80094cc:	230c      	movs	r3, #12
 80094ce:	603b      	str	r3, [r7, #0]
 80094d0:	2600      	movs	r6, #0
 80094d2:	4630      	mov	r0, r6
 80094d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094d8:	4e2e      	ldr	r6, [pc, #184]	; (8009594 <_malloc_r+0xe4>)
 80094da:	f000 fa25 	bl	8009928 <__malloc_lock>
 80094de:	6833      	ldr	r3, [r6, #0]
 80094e0:	461c      	mov	r4, r3
 80094e2:	bb34      	cbnz	r4, 8009532 <_malloc_r+0x82>
 80094e4:	4629      	mov	r1, r5
 80094e6:	4638      	mov	r0, r7
 80094e8:	f7ff ffc2 	bl	8009470 <sbrk_aligned>
 80094ec:	1c43      	adds	r3, r0, #1
 80094ee:	4604      	mov	r4, r0
 80094f0:	d14d      	bne.n	800958e <_malloc_r+0xde>
 80094f2:	6834      	ldr	r4, [r6, #0]
 80094f4:	4626      	mov	r6, r4
 80094f6:	2e00      	cmp	r6, #0
 80094f8:	d140      	bne.n	800957c <_malloc_r+0xcc>
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	4631      	mov	r1, r6
 80094fe:	4638      	mov	r0, r7
 8009500:	eb04 0803 	add.w	r8, r4, r3
 8009504:	f000 f9a4 	bl	8009850 <_sbrk_r>
 8009508:	4580      	cmp	r8, r0
 800950a:	d13a      	bne.n	8009582 <_malloc_r+0xd2>
 800950c:	6821      	ldr	r1, [r4, #0]
 800950e:	3503      	adds	r5, #3
 8009510:	1a6d      	subs	r5, r5, r1
 8009512:	f025 0503 	bic.w	r5, r5, #3
 8009516:	3508      	adds	r5, #8
 8009518:	2d0c      	cmp	r5, #12
 800951a:	bf38      	it	cc
 800951c:	250c      	movcc	r5, #12
 800951e:	4629      	mov	r1, r5
 8009520:	4638      	mov	r0, r7
 8009522:	f7ff ffa5 	bl	8009470 <sbrk_aligned>
 8009526:	3001      	adds	r0, #1
 8009528:	d02b      	beq.n	8009582 <_malloc_r+0xd2>
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	442b      	add	r3, r5
 800952e:	6023      	str	r3, [r4, #0]
 8009530:	e00e      	b.n	8009550 <_malloc_r+0xa0>
 8009532:	6822      	ldr	r2, [r4, #0]
 8009534:	1b52      	subs	r2, r2, r5
 8009536:	d41e      	bmi.n	8009576 <_malloc_r+0xc6>
 8009538:	2a0b      	cmp	r2, #11
 800953a:	d916      	bls.n	800956a <_malloc_r+0xba>
 800953c:	1961      	adds	r1, r4, r5
 800953e:	42a3      	cmp	r3, r4
 8009540:	6025      	str	r5, [r4, #0]
 8009542:	bf18      	it	ne
 8009544:	6059      	strne	r1, [r3, #4]
 8009546:	6863      	ldr	r3, [r4, #4]
 8009548:	bf08      	it	eq
 800954a:	6031      	streq	r1, [r6, #0]
 800954c:	5162      	str	r2, [r4, r5]
 800954e:	604b      	str	r3, [r1, #4]
 8009550:	4638      	mov	r0, r7
 8009552:	f104 060b 	add.w	r6, r4, #11
 8009556:	f000 f9ed 	bl	8009934 <__malloc_unlock>
 800955a:	f026 0607 	bic.w	r6, r6, #7
 800955e:	1d23      	adds	r3, r4, #4
 8009560:	1af2      	subs	r2, r6, r3
 8009562:	d0b6      	beq.n	80094d2 <_malloc_r+0x22>
 8009564:	1b9b      	subs	r3, r3, r6
 8009566:	50a3      	str	r3, [r4, r2]
 8009568:	e7b3      	b.n	80094d2 <_malloc_r+0x22>
 800956a:	6862      	ldr	r2, [r4, #4]
 800956c:	42a3      	cmp	r3, r4
 800956e:	bf0c      	ite	eq
 8009570:	6032      	streq	r2, [r6, #0]
 8009572:	605a      	strne	r2, [r3, #4]
 8009574:	e7ec      	b.n	8009550 <_malloc_r+0xa0>
 8009576:	4623      	mov	r3, r4
 8009578:	6864      	ldr	r4, [r4, #4]
 800957a:	e7b2      	b.n	80094e2 <_malloc_r+0x32>
 800957c:	4634      	mov	r4, r6
 800957e:	6876      	ldr	r6, [r6, #4]
 8009580:	e7b9      	b.n	80094f6 <_malloc_r+0x46>
 8009582:	230c      	movs	r3, #12
 8009584:	603b      	str	r3, [r7, #0]
 8009586:	4638      	mov	r0, r7
 8009588:	f000 f9d4 	bl	8009934 <__malloc_unlock>
 800958c:	e7a1      	b.n	80094d2 <_malloc_r+0x22>
 800958e:	6025      	str	r5, [r4, #0]
 8009590:	e7de      	b.n	8009550 <_malloc_r+0xa0>
 8009592:	bf00      	nop
 8009594:	20000774 	.word	0x20000774

08009598 <__ssputs_r>:
 8009598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800959c:	688e      	ldr	r6, [r1, #8]
 800959e:	429e      	cmp	r6, r3
 80095a0:	4682      	mov	sl, r0
 80095a2:	460c      	mov	r4, r1
 80095a4:	4690      	mov	r8, r2
 80095a6:	461f      	mov	r7, r3
 80095a8:	d838      	bhi.n	800961c <__ssputs_r+0x84>
 80095aa:	898a      	ldrh	r2, [r1, #12]
 80095ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095b0:	d032      	beq.n	8009618 <__ssputs_r+0x80>
 80095b2:	6825      	ldr	r5, [r4, #0]
 80095b4:	6909      	ldr	r1, [r1, #16]
 80095b6:	eba5 0901 	sub.w	r9, r5, r1
 80095ba:	6965      	ldr	r5, [r4, #20]
 80095bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095c4:	3301      	adds	r3, #1
 80095c6:	444b      	add	r3, r9
 80095c8:	106d      	asrs	r5, r5, #1
 80095ca:	429d      	cmp	r5, r3
 80095cc:	bf38      	it	cc
 80095ce:	461d      	movcc	r5, r3
 80095d0:	0553      	lsls	r3, r2, #21
 80095d2:	d531      	bpl.n	8009638 <__ssputs_r+0xa0>
 80095d4:	4629      	mov	r1, r5
 80095d6:	f7ff ff6b 	bl	80094b0 <_malloc_r>
 80095da:	4606      	mov	r6, r0
 80095dc:	b950      	cbnz	r0, 80095f4 <__ssputs_r+0x5c>
 80095de:	230c      	movs	r3, #12
 80095e0:	f8ca 3000 	str.w	r3, [sl]
 80095e4:	89a3      	ldrh	r3, [r4, #12]
 80095e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095ea:	81a3      	strh	r3, [r4, #12]
 80095ec:	f04f 30ff 	mov.w	r0, #4294967295
 80095f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f4:	6921      	ldr	r1, [r4, #16]
 80095f6:	464a      	mov	r2, r9
 80095f8:	f7fe f82c 	bl	8007654 <memcpy>
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009606:	81a3      	strh	r3, [r4, #12]
 8009608:	6126      	str	r6, [r4, #16]
 800960a:	6165      	str	r5, [r4, #20]
 800960c:	444e      	add	r6, r9
 800960e:	eba5 0509 	sub.w	r5, r5, r9
 8009612:	6026      	str	r6, [r4, #0]
 8009614:	60a5      	str	r5, [r4, #8]
 8009616:	463e      	mov	r6, r7
 8009618:	42be      	cmp	r6, r7
 800961a:	d900      	bls.n	800961e <__ssputs_r+0x86>
 800961c:	463e      	mov	r6, r7
 800961e:	6820      	ldr	r0, [r4, #0]
 8009620:	4632      	mov	r2, r6
 8009622:	4641      	mov	r1, r8
 8009624:	f000 f966 	bl	80098f4 <memmove>
 8009628:	68a3      	ldr	r3, [r4, #8]
 800962a:	1b9b      	subs	r3, r3, r6
 800962c:	60a3      	str	r3, [r4, #8]
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	4433      	add	r3, r6
 8009632:	6023      	str	r3, [r4, #0]
 8009634:	2000      	movs	r0, #0
 8009636:	e7db      	b.n	80095f0 <__ssputs_r+0x58>
 8009638:	462a      	mov	r2, r5
 800963a:	f000 f981 	bl	8009940 <_realloc_r>
 800963e:	4606      	mov	r6, r0
 8009640:	2800      	cmp	r0, #0
 8009642:	d1e1      	bne.n	8009608 <__ssputs_r+0x70>
 8009644:	6921      	ldr	r1, [r4, #16]
 8009646:	4650      	mov	r0, sl
 8009648:	f7ff fec6 	bl	80093d8 <_free_r>
 800964c:	e7c7      	b.n	80095de <__ssputs_r+0x46>
	...

08009650 <_svfiprintf_r>:
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	4698      	mov	r8, r3
 8009656:	898b      	ldrh	r3, [r1, #12]
 8009658:	061b      	lsls	r3, r3, #24
 800965a:	b09d      	sub	sp, #116	; 0x74
 800965c:	4607      	mov	r7, r0
 800965e:	460d      	mov	r5, r1
 8009660:	4614      	mov	r4, r2
 8009662:	d50e      	bpl.n	8009682 <_svfiprintf_r+0x32>
 8009664:	690b      	ldr	r3, [r1, #16]
 8009666:	b963      	cbnz	r3, 8009682 <_svfiprintf_r+0x32>
 8009668:	2140      	movs	r1, #64	; 0x40
 800966a:	f7ff ff21 	bl	80094b0 <_malloc_r>
 800966e:	6028      	str	r0, [r5, #0]
 8009670:	6128      	str	r0, [r5, #16]
 8009672:	b920      	cbnz	r0, 800967e <_svfiprintf_r+0x2e>
 8009674:	230c      	movs	r3, #12
 8009676:	603b      	str	r3, [r7, #0]
 8009678:	f04f 30ff 	mov.w	r0, #4294967295
 800967c:	e0d1      	b.n	8009822 <_svfiprintf_r+0x1d2>
 800967e:	2340      	movs	r3, #64	; 0x40
 8009680:	616b      	str	r3, [r5, #20]
 8009682:	2300      	movs	r3, #0
 8009684:	9309      	str	r3, [sp, #36]	; 0x24
 8009686:	2320      	movs	r3, #32
 8009688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800968c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009690:	2330      	movs	r3, #48	; 0x30
 8009692:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800983c <_svfiprintf_r+0x1ec>
 8009696:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800969a:	f04f 0901 	mov.w	r9, #1
 800969e:	4623      	mov	r3, r4
 80096a0:	469a      	mov	sl, r3
 80096a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096a6:	b10a      	cbz	r2, 80096ac <_svfiprintf_r+0x5c>
 80096a8:	2a25      	cmp	r2, #37	; 0x25
 80096aa:	d1f9      	bne.n	80096a0 <_svfiprintf_r+0x50>
 80096ac:	ebba 0b04 	subs.w	fp, sl, r4
 80096b0:	d00b      	beq.n	80096ca <_svfiprintf_r+0x7a>
 80096b2:	465b      	mov	r3, fp
 80096b4:	4622      	mov	r2, r4
 80096b6:	4629      	mov	r1, r5
 80096b8:	4638      	mov	r0, r7
 80096ba:	f7ff ff6d 	bl	8009598 <__ssputs_r>
 80096be:	3001      	adds	r0, #1
 80096c0:	f000 80aa 	beq.w	8009818 <_svfiprintf_r+0x1c8>
 80096c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096c6:	445a      	add	r2, fp
 80096c8:	9209      	str	r2, [sp, #36]	; 0x24
 80096ca:	f89a 3000 	ldrb.w	r3, [sl]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	f000 80a2 	beq.w	8009818 <_svfiprintf_r+0x1c8>
 80096d4:	2300      	movs	r3, #0
 80096d6:	f04f 32ff 	mov.w	r2, #4294967295
 80096da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096de:	f10a 0a01 	add.w	sl, sl, #1
 80096e2:	9304      	str	r3, [sp, #16]
 80096e4:	9307      	str	r3, [sp, #28]
 80096e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096ea:	931a      	str	r3, [sp, #104]	; 0x68
 80096ec:	4654      	mov	r4, sl
 80096ee:	2205      	movs	r2, #5
 80096f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f4:	4851      	ldr	r0, [pc, #324]	; (800983c <_svfiprintf_r+0x1ec>)
 80096f6:	f7f6 fd93 	bl	8000220 <memchr>
 80096fa:	9a04      	ldr	r2, [sp, #16]
 80096fc:	b9d8      	cbnz	r0, 8009736 <_svfiprintf_r+0xe6>
 80096fe:	06d0      	lsls	r0, r2, #27
 8009700:	bf44      	itt	mi
 8009702:	2320      	movmi	r3, #32
 8009704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009708:	0711      	lsls	r1, r2, #28
 800970a:	bf44      	itt	mi
 800970c:	232b      	movmi	r3, #43	; 0x2b
 800970e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009712:	f89a 3000 	ldrb.w	r3, [sl]
 8009716:	2b2a      	cmp	r3, #42	; 0x2a
 8009718:	d015      	beq.n	8009746 <_svfiprintf_r+0xf6>
 800971a:	9a07      	ldr	r2, [sp, #28]
 800971c:	4654      	mov	r4, sl
 800971e:	2000      	movs	r0, #0
 8009720:	f04f 0c0a 	mov.w	ip, #10
 8009724:	4621      	mov	r1, r4
 8009726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800972a:	3b30      	subs	r3, #48	; 0x30
 800972c:	2b09      	cmp	r3, #9
 800972e:	d94e      	bls.n	80097ce <_svfiprintf_r+0x17e>
 8009730:	b1b0      	cbz	r0, 8009760 <_svfiprintf_r+0x110>
 8009732:	9207      	str	r2, [sp, #28]
 8009734:	e014      	b.n	8009760 <_svfiprintf_r+0x110>
 8009736:	eba0 0308 	sub.w	r3, r0, r8
 800973a:	fa09 f303 	lsl.w	r3, r9, r3
 800973e:	4313      	orrs	r3, r2
 8009740:	9304      	str	r3, [sp, #16]
 8009742:	46a2      	mov	sl, r4
 8009744:	e7d2      	b.n	80096ec <_svfiprintf_r+0x9c>
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	1d19      	adds	r1, r3, #4
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	9103      	str	r1, [sp, #12]
 800974e:	2b00      	cmp	r3, #0
 8009750:	bfbb      	ittet	lt
 8009752:	425b      	neglt	r3, r3
 8009754:	f042 0202 	orrlt.w	r2, r2, #2
 8009758:	9307      	strge	r3, [sp, #28]
 800975a:	9307      	strlt	r3, [sp, #28]
 800975c:	bfb8      	it	lt
 800975e:	9204      	strlt	r2, [sp, #16]
 8009760:	7823      	ldrb	r3, [r4, #0]
 8009762:	2b2e      	cmp	r3, #46	; 0x2e
 8009764:	d10c      	bne.n	8009780 <_svfiprintf_r+0x130>
 8009766:	7863      	ldrb	r3, [r4, #1]
 8009768:	2b2a      	cmp	r3, #42	; 0x2a
 800976a:	d135      	bne.n	80097d8 <_svfiprintf_r+0x188>
 800976c:	9b03      	ldr	r3, [sp, #12]
 800976e:	1d1a      	adds	r2, r3, #4
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	9203      	str	r2, [sp, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	bfb8      	it	lt
 8009778:	f04f 33ff 	movlt.w	r3, #4294967295
 800977c:	3402      	adds	r4, #2
 800977e:	9305      	str	r3, [sp, #20]
 8009780:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800984c <_svfiprintf_r+0x1fc>
 8009784:	7821      	ldrb	r1, [r4, #0]
 8009786:	2203      	movs	r2, #3
 8009788:	4650      	mov	r0, sl
 800978a:	f7f6 fd49 	bl	8000220 <memchr>
 800978e:	b140      	cbz	r0, 80097a2 <_svfiprintf_r+0x152>
 8009790:	2340      	movs	r3, #64	; 0x40
 8009792:	eba0 000a 	sub.w	r0, r0, sl
 8009796:	fa03 f000 	lsl.w	r0, r3, r0
 800979a:	9b04      	ldr	r3, [sp, #16]
 800979c:	4303      	orrs	r3, r0
 800979e:	3401      	adds	r4, #1
 80097a0:	9304      	str	r3, [sp, #16]
 80097a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a6:	4826      	ldr	r0, [pc, #152]	; (8009840 <_svfiprintf_r+0x1f0>)
 80097a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097ac:	2206      	movs	r2, #6
 80097ae:	f7f6 fd37 	bl	8000220 <memchr>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d038      	beq.n	8009828 <_svfiprintf_r+0x1d8>
 80097b6:	4b23      	ldr	r3, [pc, #140]	; (8009844 <_svfiprintf_r+0x1f4>)
 80097b8:	bb1b      	cbnz	r3, 8009802 <_svfiprintf_r+0x1b2>
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	3307      	adds	r3, #7
 80097be:	f023 0307 	bic.w	r3, r3, #7
 80097c2:	3308      	adds	r3, #8
 80097c4:	9303      	str	r3, [sp, #12]
 80097c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c8:	4433      	add	r3, r6
 80097ca:	9309      	str	r3, [sp, #36]	; 0x24
 80097cc:	e767      	b.n	800969e <_svfiprintf_r+0x4e>
 80097ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80097d2:	460c      	mov	r4, r1
 80097d4:	2001      	movs	r0, #1
 80097d6:	e7a5      	b.n	8009724 <_svfiprintf_r+0xd4>
 80097d8:	2300      	movs	r3, #0
 80097da:	3401      	adds	r4, #1
 80097dc:	9305      	str	r3, [sp, #20]
 80097de:	4619      	mov	r1, r3
 80097e0:	f04f 0c0a 	mov.w	ip, #10
 80097e4:	4620      	mov	r0, r4
 80097e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ea:	3a30      	subs	r2, #48	; 0x30
 80097ec:	2a09      	cmp	r2, #9
 80097ee:	d903      	bls.n	80097f8 <_svfiprintf_r+0x1a8>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0c5      	beq.n	8009780 <_svfiprintf_r+0x130>
 80097f4:	9105      	str	r1, [sp, #20]
 80097f6:	e7c3      	b.n	8009780 <_svfiprintf_r+0x130>
 80097f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80097fc:	4604      	mov	r4, r0
 80097fe:	2301      	movs	r3, #1
 8009800:	e7f0      	b.n	80097e4 <_svfiprintf_r+0x194>
 8009802:	ab03      	add	r3, sp, #12
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	462a      	mov	r2, r5
 8009808:	4b0f      	ldr	r3, [pc, #60]	; (8009848 <_svfiprintf_r+0x1f8>)
 800980a:	a904      	add	r1, sp, #16
 800980c:	4638      	mov	r0, r7
 800980e:	f7fd ffd7 	bl	80077c0 <_printf_float>
 8009812:	1c42      	adds	r2, r0, #1
 8009814:	4606      	mov	r6, r0
 8009816:	d1d6      	bne.n	80097c6 <_svfiprintf_r+0x176>
 8009818:	89ab      	ldrh	r3, [r5, #12]
 800981a:	065b      	lsls	r3, r3, #25
 800981c:	f53f af2c 	bmi.w	8009678 <_svfiprintf_r+0x28>
 8009820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009822:	b01d      	add	sp, #116	; 0x74
 8009824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009828:	ab03      	add	r3, sp, #12
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	462a      	mov	r2, r5
 800982e:	4b06      	ldr	r3, [pc, #24]	; (8009848 <_svfiprintf_r+0x1f8>)
 8009830:	a904      	add	r1, sp, #16
 8009832:	4638      	mov	r0, r7
 8009834:	f7fe fa68 	bl	8007d08 <_printf_i>
 8009838:	e7eb      	b.n	8009812 <_svfiprintf_r+0x1c2>
 800983a:	bf00      	nop
 800983c:	0800bbf4 	.word	0x0800bbf4
 8009840:	0800bbfe 	.word	0x0800bbfe
 8009844:	080077c1 	.word	0x080077c1
 8009848:	08009599 	.word	0x08009599
 800984c:	0800bbfa 	.word	0x0800bbfa

08009850 <_sbrk_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4d06      	ldr	r5, [pc, #24]	; (800986c <_sbrk_r+0x1c>)
 8009854:	2300      	movs	r3, #0
 8009856:	4604      	mov	r4, r0
 8009858:	4608      	mov	r0, r1
 800985a:	602b      	str	r3, [r5, #0]
 800985c:	f002 f86e 	bl	800b93c <_sbrk>
 8009860:	1c43      	adds	r3, r0, #1
 8009862:	d102      	bne.n	800986a <_sbrk_r+0x1a>
 8009864:	682b      	ldr	r3, [r5, #0]
 8009866:	b103      	cbz	r3, 800986a <_sbrk_r+0x1a>
 8009868:	6023      	str	r3, [r4, #0]
 800986a:	bd38      	pop	{r3, r4, r5, pc}
 800986c:	2000077c 	.word	0x2000077c

08009870 <__assert_func>:
 8009870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009872:	4614      	mov	r4, r2
 8009874:	461a      	mov	r2, r3
 8009876:	4b09      	ldr	r3, [pc, #36]	; (800989c <__assert_func+0x2c>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4605      	mov	r5, r0
 800987c:	68d8      	ldr	r0, [r3, #12]
 800987e:	b14c      	cbz	r4, 8009894 <__assert_func+0x24>
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <__assert_func+0x30>)
 8009882:	9100      	str	r1, [sp, #0]
 8009884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009888:	4906      	ldr	r1, [pc, #24]	; (80098a4 <__assert_func+0x34>)
 800988a:	462b      	mov	r3, r5
 800988c:	f000 f80e 	bl	80098ac <fiprintf>
 8009890:	f000 faac 	bl	8009dec <abort>
 8009894:	4b04      	ldr	r3, [pc, #16]	; (80098a8 <__assert_func+0x38>)
 8009896:	461c      	mov	r4, r3
 8009898:	e7f3      	b.n	8009882 <__assert_func+0x12>
 800989a:	bf00      	nop
 800989c:	20000014 	.word	0x20000014
 80098a0:	0800bc05 	.word	0x0800bc05
 80098a4:	0800bc12 	.word	0x0800bc12
 80098a8:	0800bc40 	.word	0x0800bc40

080098ac <fiprintf>:
 80098ac:	b40e      	push	{r1, r2, r3}
 80098ae:	b503      	push	{r0, r1, lr}
 80098b0:	4601      	mov	r1, r0
 80098b2:	ab03      	add	r3, sp, #12
 80098b4:	4805      	ldr	r0, [pc, #20]	; (80098cc <fiprintf+0x20>)
 80098b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80098ba:	6800      	ldr	r0, [r0, #0]
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	f000 f897 	bl	80099f0 <_vfiprintf_r>
 80098c2:	b002      	add	sp, #8
 80098c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098c8:	b003      	add	sp, #12
 80098ca:	4770      	bx	lr
 80098cc:	20000014 	.word	0x20000014

080098d0 <__ascii_mbtowc>:
 80098d0:	b082      	sub	sp, #8
 80098d2:	b901      	cbnz	r1, 80098d6 <__ascii_mbtowc+0x6>
 80098d4:	a901      	add	r1, sp, #4
 80098d6:	b142      	cbz	r2, 80098ea <__ascii_mbtowc+0x1a>
 80098d8:	b14b      	cbz	r3, 80098ee <__ascii_mbtowc+0x1e>
 80098da:	7813      	ldrb	r3, [r2, #0]
 80098dc:	600b      	str	r3, [r1, #0]
 80098de:	7812      	ldrb	r2, [r2, #0]
 80098e0:	1e10      	subs	r0, r2, #0
 80098e2:	bf18      	it	ne
 80098e4:	2001      	movne	r0, #1
 80098e6:	b002      	add	sp, #8
 80098e8:	4770      	bx	lr
 80098ea:	4610      	mov	r0, r2
 80098ec:	e7fb      	b.n	80098e6 <__ascii_mbtowc+0x16>
 80098ee:	f06f 0001 	mvn.w	r0, #1
 80098f2:	e7f8      	b.n	80098e6 <__ascii_mbtowc+0x16>

080098f4 <memmove>:
 80098f4:	4288      	cmp	r0, r1
 80098f6:	b510      	push	{r4, lr}
 80098f8:	eb01 0402 	add.w	r4, r1, r2
 80098fc:	d902      	bls.n	8009904 <memmove+0x10>
 80098fe:	4284      	cmp	r4, r0
 8009900:	4623      	mov	r3, r4
 8009902:	d807      	bhi.n	8009914 <memmove+0x20>
 8009904:	1e43      	subs	r3, r0, #1
 8009906:	42a1      	cmp	r1, r4
 8009908:	d008      	beq.n	800991c <memmove+0x28>
 800990a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800990e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009912:	e7f8      	b.n	8009906 <memmove+0x12>
 8009914:	4402      	add	r2, r0
 8009916:	4601      	mov	r1, r0
 8009918:	428a      	cmp	r2, r1
 800991a:	d100      	bne.n	800991e <memmove+0x2a>
 800991c:	bd10      	pop	{r4, pc}
 800991e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009922:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009926:	e7f7      	b.n	8009918 <memmove+0x24>

08009928 <__malloc_lock>:
 8009928:	4801      	ldr	r0, [pc, #4]	; (8009930 <__malloc_lock+0x8>)
 800992a:	f000 bc1f 	b.w	800a16c <__retarget_lock_acquire_recursive>
 800992e:	bf00      	nop
 8009930:	20000780 	.word	0x20000780

08009934 <__malloc_unlock>:
 8009934:	4801      	ldr	r0, [pc, #4]	; (800993c <__malloc_unlock+0x8>)
 8009936:	f000 bc1a 	b.w	800a16e <__retarget_lock_release_recursive>
 800993a:	bf00      	nop
 800993c:	20000780 	.word	0x20000780

08009940 <_realloc_r>:
 8009940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009944:	4680      	mov	r8, r0
 8009946:	4614      	mov	r4, r2
 8009948:	460e      	mov	r6, r1
 800994a:	b921      	cbnz	r1, 8009956 <_realloc_r+0x16>
 800994c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009950:	4611      	mov	r1, r2
 8009952:	f7ff bdad 	b.w	80094b0 <_malloc_r>
 8009956:	b92a      	cbnz	r2, 8009964 <_realloc_r+0x24>
 8009958:	f7ff fd3e 	bl	80093d8 <_free_r>
 800995c:	4625      	mov	r5, r4
 800995e:	4628      	mov	r0, r5
 8009960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009964:	f000 fc6a 	bl	800a23c <_malloc_usable_size_r>
 8009968:	4284      	cmp	r4, r0
 800996a:	4607      	mov	r7, r0
 800996c:	d802      	bhi.n	8009974 <_realloc_r+0x34>
 800996e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009972:	d812      	bhi.n	800999a <_realloc_r+0x5a>
 8009974:	4621      	mov	r1, r4
 8009976:	4640      	mov	r0, r8
 8009978:	f7ff fd9a 	bl	80094b0 <_malloc_r>
 800997c:	4605      	mov	r5, r0
 800997e:	2800      	cmp	r0, #0
 8009980:	d0ed      	beq.n	800995e <_realloc_r+0x1e>
 8009982:	42bc      	cmp	r4, r7
 8009984:	4622      	mov	r2, r4
 8009986:	4631      	mov	r1, r6
 8009988:	bf28      	it	cs
 800998a:	463a      	movcs	r2, r7
 800998c:	f7fd fe62 	bl	8007654 <memcpy>
 8009990:	4631      	mov	r1, r6
 8009992:	4640      	mov	r0, r8
 8009994:	f7ff fd20 	bl	80093d8 <_free_r>
 8009998:	e7e1      	b.n	800995e <_realloc_r+0x1e>
 800999a:	4635      	mov	r5, r6
 800999c:	e7df      	b.n	800995e <_realloc_r+0x1e>

0800999e <__sfputc_r>:
 800999e:	6893      	ldr	r3, [r2, #8]
 80099a0:	3b01      	subs	r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	b410      	push	{r4}
 80099a6:	6093      	str	r3, [r2, #8]
 80099a8:	da08      	bge.n	80099bc <__sfputc_r+0x1e>
 80099aa:	6994      	ldr	r4, [r2, #24]
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	db01      	blt.n	80099b4 <__sfputc_r+0x16>
 80099b0:	290a      	cmp	r1, #10
 80099b2:	d103      	bne.n	80099bc <__sfputc_r+0x1e>
 80099b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099b8:	f000 b94a 	b.w	8009c50 <__swbuf_r>
 80099bc:	6813      	ldr	r3, [r2, #0]
 80099be:	1c58      	adds	r0, r3, #1
 80099c0:	6010      	str	r0, [r2, #0]
 80099c2:	7019      	strb	r1, [r3, #0]
 80099c4:	4608      	mov	r0, r1
 80099c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <__sfputs_r>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	4606      	mov	r6, r0
 80099d0:	460f      	mov	r7, r1
 80099d2:	4614      	mov	r4, r2
 80099d4:	18d5      	adds	r5, r2, r3
 80099d6:	42ac      	cmp	r4, r5
 80099d8:	d101      	bne.n	80099de <__sfputs_r+0x12>
 80099da:	2000      	movs	r0, #0
 80099dc:	e007      	b.n	80099ee <__sfputs_r+0x22>
 80099de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099e2:	463a      	mov	r2, r7
 80099e4:	4630      	mov	r0, r6
 80099e6:	f7ff ffda 	bl	800999e <__sfputc_r>
 80099ea:	1c43      	adds	r3, r0, #1
 80099ec:	d1f3      	bne.n	80099d6 <__sfputs_r+0xa>
 80099ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080099f0 <_vfiprintf_r>:
 80099f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f4:	460d      	mov	r5, r1
 80099f6:	b09d      	sub	sp, #116	; 0x74
 80099f8:	4614      	mov	r4, r2
 80099fa:	4698      	mov	r8, r3
 80099fc:	4606      	mov	r6, r0
 80099fe:	b118      	cbz	r0, 8009a08 <_vfiprintf_r+0x18>
 8009a00:	6983      	ldr	r3, [r0, #24]
 8009a02:	b90b      	cbnz	r3, 8009a08 <_vfiprintf_r+0x18>
 8009a04:	f000 fb14 	bl	800a030 <__sinit>
 8009a08:	4b89      	ldr	r3, [pc, #548]	; (8009c30 <_vfiprintf_r+0x240>)
 8009a0a:	429d      	cmp	r5, r3
 8009a0c:	d11b      	bne.n	8009a46 <_vfiprintf_r+0x56>
 8009a0e:	6875      	ldr	r5, [r6, #4]
 8009a10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a12:	07d9      	lsls	r1, r3, #31
 8009a14:	d405      	bmi.n	8009a22 <_vfiprintf_r+0x32>
 8009a16:	89ab      	ldrh	r3, [r5, #12]
 8009a18:	059a      	lsls	r2, r3, #22
 8009a1a:	d402      	bmi.n	8009a22 <_vfiprintf_r+0x32>
 8009a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a1e:	f000 fba5 	bl	800a16c <__retarget_lock_acquire_recursive>
 8009a22:	89ab      	ldrh	r3, [r5, #12]
 8009a24:	071b      	lsls	r3, r3, #28
 8009a26:	d501      	bpl.n	8009a2c <_vfiprintf_r+0x3c>
 8009a28:	692b      	ldr	r3, [r5, #16]
 8009a2a:	b9eb      	cbnz	r3, 8009a68 <_vfiprintf_r+0x78>
 8009a2c:	4629      	mov	r1, r5
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f000 f96e 	bl	8009d10 <__swsetup_r>
 8009a34:	b1c0      	cbz	r0, 8009a68 <_vfiprintf_r+0x78>
 8009a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a38:	07dc      	lsls	r4, r3, #31
 8009a3a:	d50e      	bpl.n	8009a5a <_vfiprintf_r+0x6a>
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	b01d      	add	sp, #116	; 0x74
 8009a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a46:	4b7b      	ldr	r3, [pc, #492]	; (8009c34 <_vfiprintf_r+0x244>)
 8009a48:	429d      	cmp	r5, r3
 8009a4a:	d101      	bne.n	8009a50 <_vfiprintf_r+0x60>
 8009a4c:	68b5      	ldr	r5, [r6, #8]
 8009a4e:	e7df      	b.n	8009a10 <_vfiprintf_r+0x20>
 8009a50:	4b79      	ldr	r3, [pc, #484]	; (8009c38 <_vfiprintf_r+0x248>)
 8009a52:	429d      	cmp	r5, r3
 8009a54:	bf08      	it	eq
 8009a56:	68f5      	ldreq	r5, [r6, #12]
 8009a58:	e7da      	b.n	8009a10 <_vfiprintf_r+0x20>
 8009a5a:	89ab      	ldrh	r3, [r5, #12]
 8009a5c:	0598      	lsls	r0, r3, #22
 8009a5e:	d4ed      	bmi.n	8009a3c <_vfiprintf_r+0x4c>
 8009a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a62:	f000 fb84 	bl	800a16e <__retarget_lock_release_recursive>
 8009a66:	e7e9      	b.n	8009a3c <_vfiprintf_r+0x4c>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6c:	2320      	movs	r3, #32
 8009a6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a76:	2330      	movs	r3, #48	; 0x30
 8009a78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c3c <_vfiprintf_r+0x24c>
 8009a7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a80:	f04f 0901 	mov.w	r9, #1
 8009a84:	4623      	mov	r3, r4
 8009a86:	469a      	mov	sl, r3
 8009a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a8c:	b10a      	cbz	r2, 8009a92 <_vfiprintf_r+0xa2>
 8009a8e:	2a25      	cmp	r2, #37	; 0x25
 8009a90:	d1f9      	bne.n	8009a86 <_vfiprintf_r+0x96>
 8009a92:	ebba 0b04 	subs.w	fp, sl, r4
 8009a96:	d00b      	beq.n	8009ab0 <_vfiprintf_r+0xc0>
 8009a98:	465b      	mov	r3, fp
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f7ff ff94 	bl	80099cc <__sfputs_r>
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	f000 80aa 	beq.w	8009bfe <_vfiprintf_r+0x20e>
 8009aaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aac:	445a      	add	r2, fp
 8009aae:	9209      	str	r2, [sp, #36]	; 0x24
 8009ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f000 80a2 	beq.w	8009bfe <_vfiprintf_r+0x20e>
 8009aba:	2300      	movs	r3, #0
 8009abc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ac4:	f10a 0a01 	add.w	sl, sl, #1
 8009ac8:	9304      	str	r3, [sp, #16]
 8009aca:	9307      	str	r3, [sp, #28]
 8009acc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ad0:	931a      	str	r3, [sp, #104]	; 0x68
 8009ad2:	4654      	mov	r4, sl
 8009ad4:	2205      	movs	r2, #5
 8009ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ada:	4858      	ldr	r0, [pc, #352]	; (8009c3c <_vfiprintf_r+0x24c>)
 8009adc:	f7f6 fba0 	bl	8000220 <memchr>
 8009ae0:	9a04      	ldr	r2, [sp, #16]
 8009ae2:	b9d8      	cbnz	r0, 8009b1c <_vfiprintf_r+0x12c>
 8009ae4:	06d1      	lsls	r1, r2, #27
 8009ae6:	bf44      	itt	mi
 8009ae8:	2320      	movmi	r3, #32
 8009aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aee:	0713      	lsls	r3, r2, #28
 8009af0:	bf44      	itt	mi
 8009af2:	232b      	movmi	r3, #43	; 0x2b
 8009af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009af8:	f89a 3000 	ldrb.w	r3, [sl]
 8009afc:	2b2a      	cmp	r3, #42	; 0x2a
 8009afe:	d015      	beq.n	8009b2c <_vfiprintf_r+0x13c>
 8009b00:	9a07      	ldr	r2, [sp, #28]
 8009b02:	4654      	mov	r4, sl
 8009b04:	2000      	movs	r0, #0
 8009b06:	f04f 0c0a 	mov.w	ip, #10
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b10:	3b30      	subs	r3, #48	; 0x30
 8009b12:	2b09      	cmp	r3, #9
 8009b14:	d94e      	bls.n	8009bb4 <_vfiprintf_r+0x1c4>
 8009b16:	b1b0      	cbz	r0, 8009b46 <_vfiprintf_r+0x156>
 8009b18:	9207      	str	r2, [sp, #28]
 8009b1a:	e014      	b.n	8009b46 <_vfiprintf_r+0x156>
 8009b1c:	eba0 0308 	sub.w	r3, r0, r8
 8009b20:	fa09 f303 	lsl.w	r3, r9, r3
 8009b24:	4313      	orrs	r3, r2
 8009b26:	9304      	str	r3, [sp, #16]
 8009b28:	46a2      	mov	sl, r4
 8009b2a:	e7d2      	b.n	8009ad2 <_vfiprintf_r+0xe2>
 8009b2c:	9b03      	ldr	r3, [sp, #12]
 8009b2e:	1d19      	adds	r1, r3, #4
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	9103      	str	r1, [sp, #12]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	bfbb      	ittet	lt
 8009b38:	425b      	neglt	r3, r3
 8009b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8009b3e:	9307      	strge	r3, [sp, #28]
 8009b40:	9307      	strlt	r3, [sp, #28]
 8009b42:	bfb8      	it	lt
 8009b44:	9204      	strlt	r2, [sp, #16]
 8009b46:	7823      	ldrb	r3, [r4, #0]
 8009b48:	2b2e      	cmp	r3, #46	; 0x2e
 8009b4a:	d10c      	bne.n	8009b66 <_vfiprintf_r+0x176>
 8009b4c:	7863      	ldrb	r3, [r4, #1]
 8009b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8009b50:	d135      	bne.n	8009bbe <_vfiprintf_r+0x1ce>
 8009b52:	9b03      	ldr	r3, [sp, #12]
 8009b54:	1d1a      	adds	r2, r3, #4
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	9203      	str	r2, [sp, #12]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	bfb8      	it	lt
 8009b5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b62:	3402      	adds	r4, #2
 8009b64:	9305      	str	r3, [sp, #20]
 8009b66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009c4c <_vfiprintf_r+0x25c>
 8009b6a:	7821      	ldrb	r1, [r4, #0]
 8009b6c:	2203      	movs	r2, #3
 8009b6e:	4650      	mov	r0, sl
 8009b70:	f7f6 fb56 	bl	8000220 <memchr>
 8009b74:	b140      	cbz	r0, 8009b88 <_vfiprintf_r+0x198>
 8009b76:	2340      	movs	r3, #64	; 0x40
 8009b78:	eba0 000a 	sub.w	r0, r0, sl
 8009b7c:	fa03 f000 	lsl.w	r0, r3, r0
 8009b80:	9b04      	ldr	r3, [sp, #16]
 8009b82:	4303      	orrs	r3, r0
 8009b84:	3401      	adds	r4, #1
 8009b86:	9304      	str	r3, [sp, #16]
 8009b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b8c:	482c      	ldr	r0, [pc, #176]	; (8009c40 <_vfiprintf_r+0x250>)
 8009b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b92:	2206      	movs	r2, #6
 8009b94:	f7f6 fb44 	bl	8000220 <memchr>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d03f      	beq.n	8009c1c <_vfiprintf_r+0x22c>
 8009b9c:	4b29      	ldr	r3, [pc, #164]	; (8009c44 <_vfiprintf_r+0x254>)
 8009b9e:	bb1b      	cbnz	r3, 8009be8 <_vfiprintf_r+0x1f8>
 8009ba0:	9b03      	ldr	r3, [sp, #12]
 8009ba2:	3307      	adds	r3, #7
 8009ba4:	f023 0307 	bic.w	r3, r3, #7
 8009ba8:	3308      	adds	r3, #8
 8009baa:	9303      	str	r3, [sp, #12]
 8009bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bae:	443b      	add	r3, r7
 8009bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8009bb2:	e767      	b.n	8009a84 <_vfiprintf_r+0x94>
 8009bb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bb8:	460c      	mov	r4, r1
 8009bba:	2001      	movs	r0, #1
 8009bbc:	e7a5      	b.n	8009b0a <_vfiprintf_r+0x11a>
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	3401      	adds	r4, #1
 8009bc2:	9305      	str	r3, [sp, #20]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	f04f 0c0a 	mov.w	ip, #10
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bd0:	3a30      	subs	r2, #48	; 0x30
 8009bd2:	2a09      	cmp	r2, #9
 8009bd4:	d903      	bls.n	8009bde <_vfiprintf_r+0x1ee>
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d0c5      	beq.n	8009b66 <_vfiprintf_r+0x176>
 8009bda:	9105      	str	r1, [sp, #20]
 8009bdc:	e7c3      	b.n	8009b66 <_vfiprintf_r+0x176>
 8009bde:	fb0c 2101 	mla	r1, ip, r1, r2
 8009be2:	4604      	mov	r4, r0
 8009be4:	2301      	movs	r3, #1
 8009be6:	e7f0      	b.n	8009bca <_vfiprintf_r+0x1da>
 8009be8:	ab03      	add	r3, sp, #12
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	462a      	mov	r2, r5
 8009bee:	4b16      	ldr	r3, [pc, #88]	; (8009c48 <_vfiprintf_r+0x258>)
 8009bf0:	a904      	add	r1, sp, #16
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7fd fde4 	bl	80077c0 <_printf_float>
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	1c78      	adds	r0, r7, #1
 8009bfc:	d1d6      	bne.n	8009bac <_vfiprintf_r+0x1bc>
 8009bfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c00:	07d9      	lsls	r1, r3, #31
 8009c02:	d405      	bmi.n	8009c10 <_vfiprintf_r+0x220>
 8009c04:	89ab      	ldrh	r3, [r5, #12]
 8009c06:	059a      	lsls	r2, r3, #22
 8009c08:	d402      	bmi.n	8009c10 <_vfiprintf_r+0x220>
 8009c0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c0c:	f000 faaf 	bl	800a16e <__retarget_lock_release_recursive>
 8009c10:	89ab      	ldrh	r3, [r5, #12]
 8009c12:	065b      	lsls	r3, r3, #25
 8009c14:	f53f af12 	bmi.w	8009a3c <_vfiprintf_r+0x4c>
 8009c18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c1a:	e711      	b.n	8009a40 <_vfiprintf_r+0x50>
 8009c1c:	ab03      	add	r3, sp, #12
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	462a      	mov	r2, r5
 8009c22:	4b09      	ldr	r3, [pc, #36]	; (8009c48 <_vfiprintf_r+0x258>)
 8009c24:	a904      	add	r1, sp, #16
 8009c26:	4630      	mov	r0, r6
 8009c28:	f7fe f86e 	bl	8007d08 <_printf_i>
 8009c2c:	e7e4      	b.n	8009bf8 <_vfiprintf_r+0x208>
 8009c2e:	bf00      	nop
 8009c30:	0800bd6c 	.word	0x0800bd6c
 8009c34:	0800bd8c 	.word	0x0800bd8c
 8009c38:	0800bd4c 	.word	0x0800bd4c
 8009c3c:	0800bbf4 	.word	0x0800bbf4
 8009c40:	0800bbfe 	.word	0x0800bbfe
 8009c44:	080077c1 	.word	0x080077c1
 8009c48:	080099cd 	.word	0x080099cd
 8009c4c:	0800bbfa 	.word	0x0800bbfa

08009c50 <__swbuf_r>:
 8009c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c52:	460e      	mov	r6, r1
 8009c54:	4614      	mov	r4, r2
 8009c56:	4605      	mov	r5, r0
 8009c58:	b118      	cbz	r0, 8009c62 <__swbuf_r+0x12>
 8009c5a:	6983      	ldr	r3, [r0, #24]
 8009c5c:	b90b      	cbnz	r3, 8009c62 <__swbuf_r+0x12>
 8009c5e:	f000 f9e7 	bl	800a030 <__sinit>
 8009c62:	4b21      	ldr	r3, [pc, #132]	; (8009ce8 <__swbuf_r+0x98>)
 8009c64:	429c      	cmp	r4, r3
 8009c66:	d12b      	bne.n	8009cc0 <__swbuf_r+0x70>
 8009c68:	686c      	ldr	r4, [r5, #4]
 8009c6a:	69a3      	ldr	r3, [r4, #24]
 8009c6c:	60a3      	str	r3, [r4, #8]
 8009c6e:	89a3      	ldrh	r3, [r4, #12]
 8009c70:	071a      	lsls	r2, r3, #28
 8009c72:	d52f      	bpl.n	8009cd4 <__swbuf_r+0x84>
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	b36b      	cbz	r3, 8009cd4 <__swbuf_r+0x84>
 8009c78:	6923      	ldr	r3, [r4, #16]
 8009c7a:	6820      	ldr	r0, [r4, #0]
 8009c7c:	1ac0      	subs	r0, r0, r3
 8009c7e:	6963      	ldr	r3, [r4, #20]
 8009c80:	b2f6      	uxtb	r6, r6
 8009c82:	4283      	cmp	r3, r0
 8009c84:	4637      	mov	r7, r6
 8009c86:	dc04      	bgt.n	8009c92 <__swbuf_r+0x42>
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f000 f93c 	bl	8009f08 <_fflush_r>
 8009c90:	bb30      	cbnz	r0, 8009ce0 <__swbuf_r+0x90>
 8009c92:	68a3      	ldr	r3, [r4, #8]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	60a3      	str	r3, [r4, #8]
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	6022      	str	r2, [r4, #0]
 8009c9e:	701e      	strb	r6, [r3, #0]
 8009ca0:	6963      	ldr	r3, [r4, #20]
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	4283      	cmp	r3, r0
 8009ca6:	d004      	beq.n	8009cb2 <__swbuf_r+0x62>
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	07db      	lsls	r3, r3, #31
 8009cac:	d506      	bpl.n	8009cbc <__swbuf_r+0x6c>
 8009cae:	2e0a      	cmp	r6, #10
 8009cb0:	d104      	bne.n	8009cbc <__swbuf_r+0x6c>
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	f000 f927 	bl	8009f08 <_fflush_r>
 8009cba:	b988      	cbnz	r0, 8009ce0 <__swbuf_r+0x90>
 8009cbc:	4638      	mov	r0, r7
 8009cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc0:	4b0a      	ldr	r3, [pc, #40]	; (8009cec <__swbuf_r+0x9c>)
 8009cc2:	429c      	cmp	r4, r3
 8009cc4:	d101      	bne.n	8009cca <__swbuf_r+0x7a>
 8009cc6:	68ac      	ldr	r4, [r5, #8]
 8009cc8:	e7cf      	b.n	8009c6a <__swbuf_r+0x1a>
 8009cca:	4b09      	ldr	r3, [pc, #36]	; (8009cf0 <__swbuf_r+0xa0>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	bf08      	it	eq
 8009cd0:	68ec      	ldreq	r4, [r5, #12]
 8009cd2:	e7ca      	b.n	8009c6a <__swbuf_r+0x1a>
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f000 f81a 	bl	8009d10 <__swsetup_r>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d0cb      	beq.n	8009c78 <__swbuf_r+0x28>
 8009ce0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ce4:	e7ea      	b.n	8009cbc <__swbuf_r+0x6c>
 8009ce6:	bf00      	nop
 8009ce8:	0800bd6c 	.word	0x0800bd6c
 8009cec:	0800bd8c 	.word	0x0800bd8c
 8009cf0:	0800bd4c 	.word	0x0800bd4c

08009cf4 <__ascii_wctomb>:
 8009cf4:	b149      	cbz	r1, 8009d0a <__ascii_wctomb+0x16>
 8009cf6:	2aff      	cmp	r2, #255	; 0xff
 8009cf8:	bf85      	ittet	hi
 8009cfa:	238a      	movhi	r3, #138	; 0x8a
 8009cfc:	6003      	strhi	r3, [r0, #0]
 8009cfe:	700a      	strbls	r2, [r1, #0]
 8009d00:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d04:	bf98      	it	ls
 8009d06:	2001      	movls	r0, #1
 8009d08:	4770      	bx	lr
 8009d0a:	4608      	mov	r0, r1
 8009d0c:	4770      	bx	lr
	...

08009d10 <__swsetup_r>:
 8009d10:	4b32      	ldr	r3, [pc, #200]	; (8009ddc <__swsetup_r+0xcc>)
 8009d12:	b570      	push	{r4, r5, r6, lr}
 8009d14:	681d      	ldr	r5, [r3, #0]
 8009d16:	4606      	mov	r6, r0
 8009d18:	460c      	mov	r4, r1
 8009d1a:	b125      	cbz	r5, 8009d26 <__swsetup_r+0x16>
 8009d1c:	69ab      	ldr	r3, [r5, #24]
 8009d1e:	b913      	cbnz	r3, 8009d26 <__swsetup_r+0x16>
 8009d20:	4628      	mov	r0, r5
 8009d22:	f000 f985 	bl	800a030 <__sinit>
 8009d26:	4b2e      	ldr	r3, [pc, #184]	; (8009de0 <__swsetup_r+0xd0>)
 8009d28:	429c      	cmp	r4, r3
 8009d2a:	d10f      	bne.n	8009d4c <__swsetup_r+0x3c>
 8009d2c:	686c      	ldr	r4, [r5, #4]
 8009d2e:	89a3      	ldrh	r3, [r4, #12]
 8009d30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d34:	0719      	lsls	r1, r3, #28
 8009d36:	d42c      	bmi.n	8009d92 <__swsetup_r+0x82>
 8009d38:	06dd      	lsls	r5, r3, #27
 8009d3a:	d411      	bmi.n	8009d60 <__swsetup_r+0x50>
 8009d3c:	2309      	movs	r3, #9
 8009d3e:	6033      	str	r3, [r6, #0]
 8009d40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d44:	81a3      	strh	r3, [r4, #12]
 8009d46:	f04f 30ff 	mov.w	r0, #4294967295
 8009d4a:	e03e      	b.n	8009dca <__swsetup_r+0xba>
 8009d4c:	4b25      	ldr	r3, [pc, #148]	; (8009de4 <__swsetup_r+0xd4>)
 8009d4e:	429c      	cmp	r4, r3
 8009d50:	d101      	bne.n	8009d56 <__swsetup_r+0x46>
 8009d52:	68ac      	ldr	r4, [r5, #8]
 8009d54:	e7eb      	b.n	8009d2e <__swsetup_r+0x1e>
 8009d56:	4b24      	ldr	r3, [pc, #144]	; (8009de8 <__swsetup_r+0xd8>)
 8009d58:	429c      	cmp	r4, r3
 8009d5a:	bf08      	it	eq
 8009d5c:	68ec      	ldreq	r4, [r5, #12]
 8009d5e:	e7e6      	b.n	8009d2e <__swsetup_r+0x1e>
 8009d60:	0758      	lsls	r0, r3, #29
 8009d62:	d512      	bpl.n	8009d8a <__swsetup_r+0x7a>
 8009d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d66:	b141      	cbz	r1, 8009d7a <__swsetup_r+0x6a>
 8009d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d6c:	4299      	cmp	r1, r3
 8009d6e:	d002      	beq.n	8009d76 <__swsetup_r+0x66>
 8009d70:	4630      	mov	r0, r6
 8009d72:	f7ff fb31 	bl	80093d8 <_free_r>
 8009d76:	2300      	movs	r3, #0
 8009d78:	6363      	str	r3, [r4, #52]	; 0x34
 8009d7a:	89a3      	ldrh	r3, [r4, #12]
 8009d7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d80:	81a3      	strh	r3, [r4, #12]
 8009d82:	2300      	movs	r3, #0
 8009d84:	6063      	str	r3, [r4, #4]
 8009d86:	6923      	ldr	r3, [r4, #16]
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	f043 0308 	orr.w	r3, r3, #8
 8009d90:	81a3      	strh	r3, [r4, #12]
 8009d92:	6923      	ldr	r3, [r4, #16]
 8009d94:	b94b      	cbnz	r3, 8009daa <__swsetup_r+0x9a>
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009da0:	d003      	beq.n	8009daa <__swsetup_r+0x9a>
 8009da2:	4621      	mov	r1, r4
 8009da4:	4630      	mov	r0, r6
 8009da6:	f000 fa09 	bl	800a1bc <__smakebuf_r>
 8009daa:	89a0      	ldrh	r0, [r4, #12]
 8009dac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009db0:	f010 0301 	ands.w	r3, r0, #1
 8009db4:	d00a      	beq.n	8009dcc <__swsetup_r+0xbc>
 8009db6:	2300      	movs	r3, #0
 8009db8:	60a3      	str	r3, [r4, #8]
 8009dba:	6963      	ldr	r3, [r4, #20]
 8009dbc:	425b      	negs	r3, r3
 8009dbe:	61a3      	str	r3, [r4, #24]
 8009dc0:	6923      	ldr	r3, [r4, #16]
 8009dc2:	b943      	cbnz	r3, 8009dd6 <__swsetup_r+0xc6>
 8009dc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009dc8:	d1ba      	bne.n	8009d40 <__swsetup_r+0x30>
 8009dca:	bd70      	pop	{r4, r5, r6, pc}
 8009dcc:	0781      	lsls	r1, r0, #30
 8009dce:	bf58      	it	pl
 8009dd0:	6963      	ldrpl	r3, [r4, #20]
 8009dd2:	60a3      	str	r3, [r4, #8]
 8009dd4:	e7f4      	b.n	8009dc0 <__swsetup_r+0xb0>
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	e7f7      	b.n	8009dca <__swsetup_r+0xba>
 8009dda:	bf00      	nop
 8009ddc:	20000014 	.word	0x20000014
 8009de0:	0800bd6c 	.word	0x0800bd6c
 8009de4:	0800bd8c 	.word	0x0800bd8c
 8009de8:	0800bd4c 	.word	0x0800bd4c

08009dec <abort>:
 8009dec:	b508      	push	{r3, lr}
 8009dee:	2006      	movs	r0, #6
 8009df0:	f000 fa54 	bl	800a29c <raise>
 8009df4:	2001      	movs	r0, #1
 8009df6:	f001 fdb7 	bl	800b968 <_exit>
	...

08009dfc <__sflush_r>:
 8009dfc:	898a      	ldrh	r2, [r1, #12]
 8009dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e02:	4605      	mov	r5, r0
 8009e04:	0710      	lsls	r0, r2, #28
 8009e06:	460c      	mov	r4, r1
 8009e08:	d458      	bmi.n	8009ebc <__sflush_r+0xc0>
 8009e0a:	684b      	ldr	r3, [r1, #4]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	dc05      	bgt.n	8009e1c <__sflush_r+0x20>
 8009e10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dc02      	bgt.n	8009e1c <__sflush_r+0x20>
 8009e16:	2000      	movs	r0, #0
 8009e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e1e:	2e00      	cmp	r6, #0
 8009e20:	d0f9      	beq.n	8009e16 <__sflush_r+0x1a>
 8009e22:	2300      	movs	r3, #0
 8009e24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e28:	682f      	ldr	r7, [r5, #0]
 8009e2a:	602b      	str	r3, [r5, #0]
 8009e2c:	d032      	beq.n	8009e94 <__sflush_r+0x98>
 8009e2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	075a      	lsls	r2, r3, #29
 8009e34:	d505      	bpl.n	8009e42 <__sflush_r+0x46>
 8009e36:	6863      	ldr	r3, [r4, #4]
 8009e38:	1ac0      	subs	r0, r0, r3
 8009e3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e3c:	b10b      	cbz	r3, 8009e42 <__sflush_r+0x46>
 8009e3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e40:	1ac0      	subs	r0, r0, r3
 8009e42:	2300      	movs	r3, #0
 8009e44:	4602      	mov	r2, r0
 8009e46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e48:	6a21      	ldr	r1, [r4, #32]
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	47b0      	blx	r6
 8009e4e:	1c43      	adds	r3, r0, #1
 8009e50:	89a3      	ldrh	r3, [r4, #12]
 8009e52:	d106      	bne.n	8009e62 <__sflush_r+0x66>
 8009e54:	6829      	ldr	r1, [r5, #0]
 8009e56:	291d      	cmp	r1, #29
 8009e58:	d82c      	bhi.n	8009eb4 <__sflush_r+0xb8>
 8009e5a:	4a2a      	ldr	r2, [pc, #168]	; (8009f04 <__sflush_r+0x108>)
 8009e5c:	40ca      	lsrs	r2, r1
 8009e5e:	07d6      	lsls	r6, r2, #31
 8009e60:	d528      	bpl.n	8009eb4 <__sflush_r+0xb8>
 8009e62:	2200      	movs	r2, #0
 8009e64:	6062      	str	r2, [r4, #4]
 8009e66:	04d9      	lsls	r1, r3, #19
 8009e68:	6922      	ldr	r2, [r4, #16]
 8009e6a:	6022      	str	r2, [r4, #0]
 8009e6c:	d504      	bpl.n	8009e78 <__sflush_r+0x7c>
 8009e6e:	1c42      	adds	r2, r0, #1
 8009e70:	d101      	bne.n	8009e76 <__sflush_r+0x7a>
 8009e72:	682b      	ldr	r3, [r5, #0]
 8009e74:	b903      	cbnz	r3, 8009e78 <__sflush_r+0x7c>
 8009e76:	6560      	str	r0, [r4, #84]	; 0x54
 8009e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e7a:	602f      	str	r7, [r5, #0]
 8009e7c:	2900      	cmp	r1, #0
 8009e7e:	d0ca      	beq.n	8009e16 <__sflush_r+0x1a>
 8009e80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e84:	4299      	cmp	r1, r3
 8009e86:	d002      	beq.n	8009e8e <__sflush_r+0x92>
 8009e88:	4628      	mov	r0, r5
 8009e8a:	f7ff faa5 	bl	80093d8 <_free_r>
 8009e8e:	2000      	movs	r0, #0
 8009e90:	6360      	str	r0, [r4, #52]	; 0x34
 8009e92:	e7c1      	b.n	8009e18 <__sflush_r+0x1c>
 8009e94:	6a21      	ldr	r1, [r4, #32]
 8009e96:	2301      	movs	r3, #1
 8009e98:	4628      	mov	r0, r5
 8009e9a:	47b0      	blx	r6
 8009e9c:	1c41      	adds	r1, r0, #1
 8009e9e:	d1c7      	bne.n	8009e30 <__sflush_r+0x34>
 8009ea0:	682b      	ldr	r3, [r5, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0c4      	beq.n	8009e30 <__sflush_r+0x34>
 8009ea6:	2b1d      	cmp	r3, #29
 8009ea8:	d001      	beq.n	8009eae <__sflush_r+0xb2>
 8009eaa:	2b16      	cmp	r3, #22
 8009eac:	d101      	bne.n	8009eb2 <__sflush_r+0xb6>
 8009eae:	602f      	str	r7, [r5, #0]
 8009eb0:	e7b1      	b.n	8009e16 <__sflush_r+0x1a>
 8009eb2:	89a3      	ldrh	r3, [r4, #12]
 8009eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eb8:	81a3      	strh	r3, [r4, #12]
 8009eba:	e7ad      	b.n	8009e18 <__sflush_r+0x1c>
 8009ebc:	690f      	ldr	r7, [r1, #16]
 8009ebe:	2f00      	cmp	r7, #0
 8009ec0:	d0a9      	beq.n	8009e16 <__sflush_r+0x1a>
 8009ec2:	0793      	lsls	r3, r2, #30
 8009ec4:	680e      	ldr	r6, [r1, #0]
 8009ec6:	bf08      	it	eq
 8009ec8:	694b      	ldreq	r3, [r1, #20]
 8009eca:	600f      	str	r7, [r1, #0]
 8009ecc:	bf18      	it	ne
 8009ece:	2300      	movne	r3, #0
 8009ed0:	eba6 0807 	sub.w	r8, r6, r7
 8009ed4:	608b      	str	r3, [r1, #8]
 8009ed6:	f1b8 0f00 	cmp.w	r8, #0
 8009eda:	dd9c      	ble.n	8009e16 <__sflush_r+0x1a>
 8009edc:	6a21      	ldr	r1, [r4, #32]
 8009ede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ee0:	4643      	mov	r3, r8
 8009ee2:	463a      	mov	r2, r7
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	47b0      	blx	r6
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	dc06      	bgt.n	8009efa <__sflush_r+0xfe>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ef2:	81a3      	strh	r3, [r4, #12]
 8009ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef8:	e78e      	b.n	8009e18 <__sflush_r+0x1c>
 8009efa:	4407      	add	r7, r0
 8009efc:	eba8 0800 	sub.w	r8, r8, r0
 8009f00:	e7e9      	b.n	8009ed6 <__sflush_r+0xda>
 8009f02:	bf00      	nop
 8009f04:	20400001 	.word	0x20400001

08009f08 <_fflush_r>:
 8009f08:	b538      	push	{r3, r4, r5, lr}
 8009f0a:	690b      	ldr	r3, [r1, #16]
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	460c      	mov	r4, r1
 8009f10:	b913      	cbnz	r3, 8009f18 <_fflush_r+0x10>
 8009f12:	2500      	movs	r5, #0
 8009f14:	4628      	mov	r0, r5
 8009f16:	bd38      	pop	{r3, r4, r5, pc}
 8009f18:	b118      	cbz	r0, 8009f22 <_fflush_r+0x1a>
 8009f1a:	6983      	ldr	r3, [r0, #24]
 8009f1c:	b90b      	cbnz	r3, 8009f22 <_fflush_r+0x1a>
 8009f1e:	f000 f887 	bl	800a030 <__sinit>
 8009f22:	4b14      	ldr	r3, [pc, #80]	; (8009f74 <_fflush_r+0x6c>)
 8009f24:	429c      	cmp	r4, r3
 8009f26:	d11b      	bne.n	8009f60 <_fflush_r+0x58>
 8009f28:	686c      	ldr	r4, [r5, #4]
 8009f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d0ef      	beq.n	8009f12 <_fflush_r+0xa>
 8009f32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f34:	07d0      	lsls	r0, r2, #31
 8009f36:	d404      	bmi.n	8009f42 <_fflush_r+0x3a>
 8009f38:	0599      	lsls	r1, r3, #22
 8009f3a:	d402      	bmi.n	8009f42 <_fflush_r+0x3a>
 8009f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f3e:	f000 f915 	bl	800a16c <__retarget_lock_acquire_recursive>
 8009f42:	4628      	mov	r0, r5
 8009f44:	4621      	mov	r1, r4
 8009f46:	f7ff ff59 	bl	8009dfc <__sflush_r>
 8009f4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f4c:	07da      	lsls	r2, r3, #31
 8009f4e:	4605      	mov	r5, r0
 8009f50:	d4e0      	bmi.n	8009f14 <_fflush_r+0xc>
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	059b      	lsls	r3, r3, #22
 8009f56:	d4dd      	bmi.n	8009f14 <_fflush_r+0xc>
 8009f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f5a:	f000 f908 	bl	800a16e <__retarget_lock_release_recursive>
 8009f5e:	e7d9      	b.n	8009f14 <_fflush_r+0xc>
 8009f60:	4b05      	ldr	r3, [pc, #20]	; (8009f78 <_fflush_r+0x70>)
 8009f62:	429c      	cmp	r4, r3
 8009f64:	d101      	bne.n	8009f6a <_fflush_r+0x62>
 8009f66:	68ac      	ldr	r4, [r5, #8]
 8009f68:	e7df      	b.n	8009f2a <_fflush_r+0x22>
 8009f6a:	4b04      	ldr	r3, [pc, #16]	; (8009f7c <_fflush_r+0x74>)
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	bf08      	it	eq
 8009f70:	68ec      	ldreq	r4, [r5, #12]
 8009f72:	e7da      	b.n	8009f2a <_fflush_r+0x22>
 8009f74:	0800bd6c 	.word	0x0800bd6c
 8009f78:	0800bd8c 	.word	0x0800bd8c
 8009f7c:	0800bd4c 	.word	0x0800bd4c

08009f80 <std>:
 8009f80:	2300      	movs	r3, #0
 8009f82:	b510      	push	{r4, lr}
 8009f84:	4604      	mov	r4, r0
 8009f86:	e9c0 3300 	strd	r3, r3, [r0]
 8009f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f8e:	6083      	str	r3, [r0, #8]
 8009f90:	8181      	strh	r1, [r0, #12]
 8009f92:	6643      	str	r3, [r0, #100]	; 0x64
 8009f94:	81c2      	strh	r2, [r0, #14]
 8009f96:	6183      	str	r3, [r0, #24]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	2208      	movs	r2, #8
 8009f9c:	305c      	adds	r0, #92	; 0x5c
 8009f9e:	f7fd fb67 	bl	8007670 <memset>
 8009fa2:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <std+0x38>)
 8009fa4:	6263      	str	r3, [r4, #36]	; 0x24
 8009fa6:	4b05      	ldr	r3, [pc, #20]	; (8009fbc <std+0x3c>)
 8009fa8:	62a3      	str	r3, [r4, #40]	; 0x28
 8009faa:	4b05      	ldr	r3, [pc, #20]	; (8009fc0 <std+0x40>)
 8009fac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009fae:	4b05      	ldr	r3, [pc, #20]	; (8009fc4 <std+0x44>)
 8009fb0:	6224      	str	r4, [r4, #32]
 8009fb2:	6323      	str	r3, [r4, #48]	; 0x30
 8009fb4:	bd10      	pop	{r4, pc}
 8009fb6:	bf00      	nop
 8009fb8:	0800a2d5 	.word	0x0800a2d5
 8009fbc:	0800a2f7 	.word	0x0800a2f7
 8009fc0:	0800a32f 	.word	0x0800a32f
 8009fc4:	0800a353 	.word	0x0800a353

08009fc8 <_cleanup_r>:
 8009fc8:	4901      	ldr	r1, [pc, #4]	; (8009fd0 <_cleanup_r+0x8>)
 8009fca:	f000 b8af 	b.w	800a12c <_fwalk_reent>
 8009fce:	bf00      	nop
 8009fd0:	08009f09 	.word	0x08009f09

08009fd4 <__sfmoreglue>:
 8009fd4:	b570      	push	{r4, r5, r6, lr}
 8009fd6:	2268      	movs	r2, #104	; 0x68
 8009fd8:	1e4d      	subs	r5, r1, #1
 8009fda:	4355      	muls	r5, r2
 8009fdc:	460e      	mov	r6, r1
 8009fde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fe2:	f7ff fa65 	bl	80094b0 <_malloc_r>
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	b140      	cbz	r0, 8009ffc <__sfmoreglue+0x28>
 8009fea:	2100      	movs	r1, #0
 8009fec:	e9c0 1600 	strd	r1, r6, [r0]
 8009ff0:	300c      	adds	r0, #12
 8009ff2:	60a0      	str	r0, [r4, #8]
 8009ff4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ff8:	f7fd fb3a 	bl	8007670 <memset>
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	bd70      	pop	{r4, r5, r6, pc}

0800a000 <__sfp_lock_acquire>:
 800a000:	4801      	ldr	r0, [pc, #4]	; (800a008 <__sfp_lock_acquire+0x8>)
 800a002:	f000 b8b3 	b.w	800a16c <__retarget_lock_acquire_recursive>
 800a006:	bf00      	nop
 800a008:	20000781 	.word	0x20000781

0800a00c <__sfp_lock_release>:
 800a00c:	4801      	ldr	r0, [pc, #4]	; (800a014 <__sfp_lock_release+0x8>)
 800a00e:	f000 b8ae 	b.w	800a16e <__retarget_lock_release_recursive>
 800a012:	bf00      	nop
 800a014:	20000781 	.word	0x20000781

0800a018 <__sinit_lock_acquire>:
 800a018:	4801      	ldr	r0, [pc, #4]	; (800a020 <__sinit_lock_acquire+0x8>)
 800a01a:	f000 b8a7 	b.w	800a16c <__retarget_lock_acquire_recursive>
 800a01e:	bf00      	nop
 800a020:	20000782 	.word	0x20000782

0800a024 <__sinit_lock_release>:
 800a024:	4801      	ldr	r0, [pc, #4]	; (800a02c <__sinit_lock_release+0x8>)
 800a026:	f000 b8a2 	b.w	800a16e <__retarget_lock_release_recursive>
 800a02a:	bf00      	nop
 800a02c:	20000782 	.word	0x20000782

0800a030 <__sinit>:
 800a030:	b510      	push	{r4, lr}
 800a032:	4604      	mov	r4, r0
 800a034:	f7ff fff0 	bl	800a018 <__sinit_lock_acquire>
 800a038:	69a3      	ldr	r3, [r4, #24]
 800a03a:	b11b      	cbz	r3, 800a044 <__sinit+0x14>
 800a03c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a040:	f7ff bff0 	b.w	800a024 <__sinit_lock_release>
 800a044:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a048:	6523      	str	r3, [r4, #80]	; 0x50
 800a04a:	4b13      	ldr	r3, [pc, #76]	; (800a098 <__sinit+0x68>)
 800a04c:	4a13      	ldr	r2, [pc, #76]	; (800a09c <__sinit+0x6c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	62a2      	str	r2, [r4, #40]	; 0x28
 800a052:	42a3      	cmp	r3, r4
 800a054:	bf04      	itt	eq
 800a056:	2301      	moveq	r3, #1
 800a058:	61a3      	streq	r3, [r4, #24]
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 f820 	bl	800a0a0 <__sfp>
 800a060:	6060      	str	r0, [r4, #4]
 800a062:	4620      	mov	r0, r4
 800a064:	f000 f81c 	bl	800a0a0 <__sfp>
 800a068:	60a0      	str	r0, [r4, #8]
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 f818 	bl	800a0a0 <__sfp>
 800a070:	2200      	movs	r2, #0
 800a072:	60e0      	str	r0, [r4, #12]
 800a074:	2104      	movs	r1, #4
 800a076:	6860      	ldr	r0, [r4, #4]
 800a078:	f7ff ff82 	bl	8009f80 <std>
 800a07c:	68a0      	ldr	r0, [r4, #8]
 800a07e:	2201      	movs	r2, #1
 800a080:	2109      	movs	r1, #9
 800a082:	f7ff ff7d 	bl	8009f80 <std>
 800a086:	68e0      	ldr	r0, [r4, #12]
 800a088:	2202      	movs	r2, #2
 800a08a:	2112      	movs	r1, #18
 800a08c:	f7ff ff78 	bl	8009f80 <std>
 800a090:	2301      	movs	r3, #1
 800a092:	61a3      	str	r3, [r4, #24]
 800a094:	e7d2      	b.n	800a03c <__sinit+0xc>
 800a096:	bf00      	nop
 800a098:	0800b9d0 	.word	0x0800b9d0
 800a09c:	08009fc9 	.word	0x08009fc9

0800a0a0 <__sfp>:
 800a0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0a2:	4607      	mov	r7, r0
 800a0a4:	f7ff ffac 	bl	800a000 <__sfp_lock_acquire>
 800a0a8:	4b1e      	ldr	r3, [pc, #120]	; (800a124 <__sfp+0x84>)
 800a0aa:	681e      	ldr	r6, [r3, #0]
 800a0ac:	69b3      	ldr	r3, [r6, #24]
 800a0ae:	b913      	cbnz	r3, 800a0b6 <__sfp+0x16>
 800a0b0:	4630      	mov	r0, r6
 800a0b2:	f7ff ffbd 	bl	800a030 <__sinit>
 800a0b6:	3648      	adds	r6, #72	; 0x48
 800a0b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	d503      	bpl.n	800a0c8 <__sfp+0x28>
 800a0c0:	6833      	ldr	r3, [r6, #0]
 800a0c2:	b30b      	cbz	r3, 800a108 <__sfp+0x68>
 800a0c4:	6836      	ldr	r6, [r6, #0]
 800a0c6:	e7f7      	b.n	800a0b8 <__sfp+0x18>
 800a0c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0cc:	b9d5      	cbnz	r5, 800a104 <__sfp+0x64>
 800a0ce:	4b16      	ldr	r3, [pc, #88]	; (800a128 <__sfp+0x88>)
 800a0d0:	60e3      	str	r3, [r4, #12]
 800a0d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0d6:	6665      	str	r5, [r4, #100]	; 0x64
 800a0d8:	f000 f847 	bl	800a16a <__retarget_lock_init_recursive>
 800a0dc:	f7ff ff96 	bl	800a00c <__sfp_lock_release>
 800a0e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0e8:	6025      	str	r5, [r4, #0]
 800a0ea:	61a5      	str	r5, [r4, #24]
 800a0ec:	2208      	movs	r2, #8
 800a0ee:	4629      	mov	r1, r5
 800a0f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0f4:	f7fd fabc 	bl	8007670 <memset>
 800a0f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a100:	4620      	mov	r0, r4
 800a102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a104:	3468      	adds	r4, #104	; 0x68
 800a106:	e7d9      	b.n	800a0bc <__sfp+0x1c>
 800a108:	2104      	movs	r1, #4
 800a10a:	4638      	mov	r0, r7
 800a10c:	f7ff ff62 	bl	8009fd4 <__sfmoreglue>
 800a110:	4604      	mov	r4, r0
 800a112:	6030      	str	r0, [r6, #0]
 800a114:	2800      	cmp	r0, #0
 800a116:	d1d5      	bne.n	800a0c4 <__sfp+0x24>
 800a118:	f7ff ff78 	bl	800a00c <__sfp_lock_release>
 800a11c:	230c      	movs	r3, #12
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	e7ee      	b.n	800a100 <__sfp+0x60>
 800a122:	bf00      	nop
 800a124:	0800b9d0 	.word	0x0800b9d0
 800a128:	ffff0001 	.word	0xffff0001

0800a12c <_fwalk_reent>:
 800a12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a130:	4606      	mov	r6, r0
 800a132:	4688      	mov	r8, r1
 800a134:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a138:	2700      	movs	r7, #0
 800a13a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a13e:	f1b9 0901 	subs.w	r9, r9, #1
 800a142:	d505      	bpl.n	800a150 <_fwalk_reent+0x24>
 800a144:	6824      	ldr	r4, [r4, #0]
 800a146:	2c00      	cmp	r4, #0
 800a148:	d1f7      	bne.n	800a13a <_fwalk_reent+0xe>
 800a14a:	4638      	mov	r0, r7
 800a14c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a150:	89ab      	ldrh	r3, [r5, #12]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d907      	bls.n	800a166 <_fwalk_reent+0x3a>
 800a156:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a15a:	3301      	adds	r3, #1
 800a15c:	d003      	beq.n	800a166 <_fwalk_reent+0x3a>
 800a15e:	4629      	mov	r1, r5
 800a160:	4630      	mov	r0, r6
 800a162:	47c0      	blx	r8
 800a164:	4307      	orrs	r7, r0
 800a166:	3568      	adds	r5, #104	; 0x68
 800a168:	e7e9      	b.n	800a13e <_fwalk_reent+0x12>

0800a16a <__retarget_lock_init_recursive>:
 800a16a:	4770      	bx	lr

0800a16c <__retarget_lock_acquire_recursive>:
 800a16c:	4770      	bx	lr

0800a16e <__retarget_lock_release_recursive>:
 800a16e:	4770      	bx	lr

0800a170 <__swhatbuf_r>:
 800a170:	b570      	push	{r4, r5, r6, lr}
 800a172:	460e      	mov	r6, r1
 800a174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a178:	2900      	cmp	r1, #0
 800a17a:	b096      	sub	sp, #88	; 0x58
 800a17c:	4614      	mov	r4, r2
 800a17e:	461d      	mov	r5, r3
 800a180:	da08      	bge.n	800a194 <__swhatbuf_r+0x24>
 800a182:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a186:	2200      	movs	r2, #0
 800a188:	602a      	str	r2, [r5, #0]
 800a18a:	061a      	lsls	r2, r3, #24
 800a18c:	d410      	bmi.n	800a1b0 <__swhatbuf_r+0x40>
 800a18e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a192:	e00e      	b.n	800a1b2 <__swhatbuf_r+0x42>
 800a194:	466a      	mov	r2, sp
 800a196:	f000 f903 	bl	800a3a0 <_fstat_r>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	dbf1      	blt.n	800a182 <__swhatbuf_r+0x12>
 800a19e:	9a01      	ldr	r2, [sp, #4]
 800a1a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1a8:	425a      	negs	r2, r3
 800a1aa:	415a      	adcs	r2, r3
 800a1ac:	602a      	str	r2, [r5, #0]
 800a1ae:	e7ee      	b.n	800a18e <__swhatbuf_r+0x1e>
 800a1b0:	2340      	movs	r3, #64	; 0x40
 800a1b2:	2000      	movs	r0, #0
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	b016      	add	sp, #88	; 0x58
 800a1b8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1bc <__smakebuf_r>:
 800a1bc:	898b      	ldrh	r3, [r1, #12]
 800a1be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1c0:	079d      	lsls	r5, r3, #30
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	460c      	mov	r4, r1
 800a1c6:	d507      	bpl.n	800a1d8 <__smakebuf_r+0x1c>
 800a1c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1cc:	6023      	str	r3, [r4, #0]
 800a1ce:	6123      	str	r3, [r4, #16]
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	6163      	str	r3, [r4, #20]
 800a1d4:	b002      	add	sp, #8
 800a1d6:	bd70      	pop	{r4, r5, r6, pc}
 800a1d8:	ab01      	add	r3, sp, #4
 800a1da:	466a      	mov	r2, sp
 800a1dc:	f7ff ffc8 	bl	800a170 <__swhatbuf_r>
 800a1e0:	9900      	ldr	r1, [sp, #0]
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f7ff f963 	bl	80094b0 <_malloc_r>
 800a1ea:	b948      	cbnz	r0, 800a200 <__smakebuf_r+0x44>
 800a1ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f0:	059a      	lsls	r2, r3, #22
 800a1f2:	d4ef      	bmi.n	800a1d4 <__smakebuf_r+0x18>
 800a1f4:	f023 0303 	bic.w	r3, r3, #3
 800a1f8:	f043 0302 	orr.w	r3, r3, #2
 800a1fc:	81a3      	strh	r3, [r4, #12]
 800a1fe:	e7e3      	b.n	800a1c8 <__smakebuf_r+0xc>
 800a200:	4b0d      	ldr	r3, [pc, #52]	; (800a238 <__smakebuf_r+0x7c>)
 800a202:	62b3      	str	r3, [r6, #40]	; 0x28
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	6020      	str	r0, [r4, #0]
 800a208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a20c:	81a3      	strh	r3, [r4, #12]
 800a20e:	9b00      	ldr	r3, [sp, #0]
 800a210:	6163      	str	r3, [r4, #20]
 800a212:	9b01      	ldr	r3, [sp, #4]
 800a214:	6120      	str	r0, [r4, #16]
 800a216:	b15b      	cbz	r3, 800a230 <__smakebuf_r+0x74>
 800a218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a21c:	4630      	mov	r0, r6
 800a21e:	f000 f8d1 	bl	800a3c4 <_isatty_r>
 800a222:	b128      	cbz	r0, 800a230 <__smakebuf_r+0x74>
 800a224:	89a3      	ldrh	r3, [r4, #12]
 800a226:	f023 0303 	bic.w	r3, r3, #3
 800a22a:	f043 0301 	orr.w	r3, r3, #1
 800a22e:	81a3      	strh	r3, [r4, #12]
 800a230:	89a0      	ldrh	r0, [r4, #12]
 800a232:	4305      	orrs	r5, r0
 800a234:	81a5      	strh	r5, [r4, #12]
 800a236:	e7cd      	b.n	800a1d4 <__smakebuf_r+0x18>
 800a238:	08009fc9 	.word	0x08009fc9

0800a23c <_malloc_usable_size_r>:
 800a23c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a240:	1f18      	subs	r0, r3, #4
 800a242:	2b00      	cmp	r3, #0
 800a244:	bfbc      	itt	lt
 800a246:	580b      	ldrlt	r3, [r1, r0]
 800a248:	18c0      	addlt	r0, r0, r3
 800a24a:	4770      	bx	lr

0800a24c <_raise_r>:
 800a24c:	291f      	cmp	r1, #31
 800a24e:	b538      	push	{r3, r4, r5, lr}
 800a250:	4604      	mov	r4, r0
 800a252:	460d      	mov	r5, r1
 800a254:	d904      	bls.n	800a260 <_raise_r+0x14>
 800a256:	2316      	movs	r3, #22
 800a258:	6003      	str	r3, [r0, #0]
 800a25a:	f04f 30ff 	mov.w	r0, #4294967295
 800a25e:	bd38      	pop	{r3, r4, r5, pc}
 800a260:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a262:	b112      	cbz	r2, 800a26a <_raise_r+0x1e>
 800a264:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a268:	b94b      	cbnz	r3, 800a27e <_raise_r+0x32>
 800a26a:	4620      	mov	r0, r4
 800a26c:	f000 f830 	bl	800a2d0 <_getpid_r>
 800a270:	462a      	mov	r2, r5
 800a272:	4601      	mov	r1, r0
 800a274:	4620      	mov	r0, r4
 800a276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a27a:	f000 b817 	b.w	800a2ac <_kill_r>
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d00a      	beq.n	800a298 <_raise_r+0x4c>
 800a282:	1c59      	adds	r1, r3, #1
 800a284:	d103      	bne.n	800a28e <_raise_r+0x42>
 800a286:	2316      	movs	r3, #22
 800a288:	6003      	str	r3, [r0, #0]
 800a28a:	2001      	movs	r0, #1
 800a28c:	e7e7      	b.n	800a25e <_raise_r+0x12>
 800a28e:	2400      	movs	r4, #0
 800a290:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a294:	4628      	mov	r0, r5
 800a296:	4798      	blx	r3
 800a298:	2000      	movs	r0, #0
 800a29a:	e7e0      	b.n	800a25e <_raise_r+0x12>

0800a29c <raise>:
 800a29c:	4b02      	ldr	r3, [pc, #8]	; (800a2a8 <raise+0xc>)
 800a29e:	4601      	mov	r1, r0
 800a2a0:	6818      	ldr	r0, [r3, #0]
 800a2a2:	f7ff bfd3 	b.w	800a24c <_raise_r>
 800a2a6:	bf00      	nop
 800a2a8:	20000014 	.word	0x20000014

0800a2ac <_kill_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4d07      	ldr	r5, [pc, #28]	; (800a2cc <_kill_r+0x20>)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	602b      	str	r3, [r5, #0]
 800a2ba:	f001 fb27 	bl	800b90c <_kill>
 800a2be:	1c43      	adds	r3, r0, #1
 800a2c0:	d102      	bne.n	800a2c8 <_kill_r+0x1c>
 800a2c2:	682b      	ldr	r3, [r5, #0]
 800a2c4:	b103      	cbz	r3, 800a2c8 <_kill_r+0x1c>
 800a2c6:	6023      	str	r3, [r4, #0]
 800a2c8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ca:	bf00      	nop
 800a2cc:	2000077c 	.word	0x2000077c

0800a2d0 <_getpid_r>:
 800a2d0:	f001 bb0c 	b.w	800b8ec <_getpid>

0800a2d4 <__sread>:
 800a2d4:	b510      	push	{r4, lr}
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2dc:	f000 f894 	bl	800a408 <_read_r>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	bfab      	itete	ge
 800a2e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a2e6:	89a3      	ldrhlt	r3, [r4, #12]
 800a2e8:	181b      	addge	r3, r3, r0
 800a2ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a2ee:	bfac      	ite	ge
 800a2f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a2f2:	81a3      	strhlt	r3, [r4, #12]
 800a2f4:	bd10      	pop	{r4, pc}

0800a2f6 <__swrite>:
 800a2f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2fa:	461f      	mov	r7, r3
 800a2fc:	898b      	ldrh	r3, [r1, #12]
 800a2fe:	05db      	lsls	r3, r3, #23
 800a300:	4605      	mov	r5, r0
 800a302:	460c      	mov	r4, r1
 800a304:	4616      	mov	r6, r2
 800a306:	d505      	bpl.n	800a314 <__swrite+0x1e>
 800a308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a30c:	2302      	movs	r3, #2
 800a30e:	2200      	movs	r2, #0
 800a310:	f000 f868 	bl	800a3e4 <_lseek_r>
 800a314:	89a3      	ldrh	r3, [r4, #12]
 800a316:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a31a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a31e:	81a3      	strh	r3, [r4, #12]
 800a320:	4632      	mov	r2, r6
 800a322:	463b      	mov	r3, r7
 800a324:	4628      	mov	r0, r5
 800a326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a32a:	f000 b817 	b.w	800a35c <_write_r>

0800a32e <__sseek>:
 800a32e:	b510      	push	{r4, lr}
 800a330:	460c      	mov	r4, r1
 800a332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a336:	f000 f855 	bl	800a3e4 <_lseek_r>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	89a3      	ldrh	r3, [r4, #12]
 800a33e:	bf15      	itete	ne
 800a340:	6560      	strne	r0, [r4, #84]	; 0x54
 800a342:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a346:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a34a:	81a3      	strheq	r3, [r4, #12]
 800a34c:	bf18      	it	ne
 800a34e:	81a3      	strhne	r3, [r4, #12]
 800a350:	bd10      	pop	{r4, pc}

0800a352 <__sclose>:
 800a352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a356:	f000 b813 	b.w	800a380 <_close_r>
	...

0800a35c <_write_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d07      	ldr	r5, [pc, #28]	; (800a37c <_write_r+0x20>)
 800a360:	4604      	mov	r4, r0
 800a362:	4608      	mov	r0, r1
 800a364:	4611      	mov	r1, r2
 800a366:	2200      	movs	r2, #0
 800a368:	602a      	str	r2, [r5, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	f001 faf4 	bl	800b958 <_write>
 800a370:	1c43      	adds	r3, r0, #1
 800a372:	d102      	bne.n	800a37a <_write_r+0x1e>
 800a374:	682b      	ldr	r3, [r5, #0]
 800a376:	b103      	cbz	r3, 800a37a <_write_r+0x1e>
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	bd38      	pop	{r3, r4, r5, pc}
 800a37c:	2000077c 	.word	0x2000077c

0800a380 <_close_r>:
 800a380:	b538      	push	{r3, r4, r5, lr}
 800a382:	4d06      	ldr	r5, [pc, #24]	; (800a39c <_close_r+0x1c>)
 800a384:	2300      	movs	r3, #0
 800a386:	4604      	mov	r4, r0
 800a388:	4608      	mov	r0, r1
 800a38a:	602b      	str	r3, [r5, #0]
 800a38c:	f001 fa9e 	bl	800b8cc <_close>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d102      	bne.n	800a39a <_close_r+0x1a>
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	b103      	cbz	r3, 800a39a <_close_r+0x1a>
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	bd38      	pop	{r3, r4, r5, pc}
 800a39c:	2000077c 	.word	0x2000077c

0800a3a0 <_fstat_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4d07      	ldr	r5, [pc, #28]	; (800a3c0 <_fstat_r+0x20>)
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	602b      	str	r3, [r5, #0]
 800a3ae:	f001 fa95 	bl	800b8dc <_fstat>
 800a3b2:	1c43      	adds	r3, r0, #1
 800a3b4:	d102      	bne.n	800a3bc <_fstat_r+0x1c>
 800a3b6:	682b      	ldr	r3, [r5, #0]
 800a3b8:	b103      	cbz	r3, 800a3bc <_fstat_r+0x1c>
 800a3ba:	6023      	str	r3, [r4, #0]
 800a3bc:	bd38      	pop	{r3, r4, r5, pc}
 800a3be:	bf00      	nop
 800a3c0:	2000077c 	.word	0x2000077c

0800a3c4 <_isatty_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d06      	ldr	r5, [pc, #24]	; (800a3e0 <_isatty_r+0x1c>)
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	602b      	str	r3, [r5, #0]
 800a3d0:	f001 fa94 	bl	800b8fc <_isatty>
 800a3d4:	1c43      	adds	r3, r0, #1
 800a3d6:	d102      	bne.n	800a3de <_isatty_r+0x1a>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	b103      	cbz	r3, 800a3de <_isatty_r+0x1a>
 800a3dc:	6023      	str	r3, [r4, #0]
 800a3de:	bd38      	pop	{r3, r4, r5, pc}
 800a3e0:	2000077c 	.word	0x2000077c

0800a3e4 <_lseek_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4d07      	ldr	r5, [pc, #28]	; (800a404 <_lseek_r+0x20>)
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	4608      	mov	r0, r1
 800a3ec:	4611      	mov	r1, r2
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	602a      	str	r2, [r5, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	f001 fa92 	bl	800b91c <_lseek>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d102      	bne.n	800a402 <_lseek_r+0x1e>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	b103      	cbz	r3, 800a402 <_lseek_r+0x1e>
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	bd38      	pop	{r3, r4, r5, pc}
 800a404:	2000077c 	.word	0x2000077c

0800a408 <_read_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	4d07      	ldr	r5, [pc, #28]	; (800a428 <_read_r+0x20>)
 800a40c:	4604      	mov	r4, r0
 800a40e:	4608      	mov	r0, r1
 800a410:	4611      	mov	r1, r2
 800a412:	2200      	movs	r2, #0
 800a414:	602a      	str	r2, [r5, #0]
 800a416:	461a      	mov	r2, r3
 800a418:	f001 fa88 	bl	800b92c <_read>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d102      	bne.n	800a426 <_read_r+0x1e>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	b103      	cbz	r3, 800a426 <_read_r+0x1e>
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	2000077c 	.word	0x2000077c
 800a42c:	00000000 	.word	0x00000000

0800a430 <atan>:
 800a430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a434:	ec55 4b10 	vmov	r4, r5, d0
 800a438:	4bc3      	ldr	r3, [pc, #780]	; (800a748 <atan+0x318>)
 800a43a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a43e:	429e      	cmp	r6, r3
 800a440:	46ab      	mov	fp, r5
 800a442:	dd18      	ble.n	800a476 <atan+0x46>
 800a444:	4bc1      	ldr	r3, [pc, #772]	; (800a74c <atan+0x31c>)
 800a446:	429e      	cmp	r6, r3
 800a448:	dc01      	bgt.n	800a44e <atan+0x1e>
 800a44a:	d109      	bne.n	800a460 <atan+0x30>
 800a44c:	b144      	cbz	r4, 800a460 <atan+0x30>
 800a44e:	4622      	mov	r2, r4
 800a450:	462b      	mov	r3, r5
 800a452:	4620      	mov	r0, r4
 800a454:	4629      	mov	r1, r5
 800a456:	f7f5 ff39 	bl	80002cc <__adddf3>
 800a45a:	4604      	mov	r4, r0
 800a45c:	460d      	mov	r5, r1
 800a45e:	e006      	b.n	800a46e <atan+0x3e>
 800a460:	f1bb 0f00 	cmp.w	fp, #0
 800a464:	f300 8131 	bgt.w	800a6ca <atan+0x29a>
 800a468:	a59b      	add	r5, pc, #620	; (adr r5, 800a6d8 <atan+0x2a8>)
 800a46a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a46e:	ec45 4b10 	vmov	d0, r4, r5
 800a472:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a476:	4bb6      	ldr	r3, [pc, #728]	; (800a750 <atan+0x320>)
 800a478:	429e      	cmp	r6, r3
 800a47a:	dc14      	bgt.n	800a4a6 <atan+0x76>
 800a47c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a480:	429e      	cmp	r6, r3
 800a482:	dc0d      	bgt.n	800a4a0 <atan+0x70>
 800a484:	a396      	add	r3, pc, #600	; (adr r3, 800a6e0 <atan+0x2b0>)
 800a486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48a:	ee10 0a10 	vmov	r0, s0
 800a48e:	4629      	mov	r1, r5
 800a490:	f7f5 ff1c 	bl	80002cc <__adddf3>
 800a494:	4baf      	ldr	r3, [pc, #700]	; (800a754 <atan+0x324>)
 800a496:	2200      	movs	r2, #0
 800a498:	f7f6 fb5e 	bl	8000b58 <__aeabi_dcmpgt>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d1e6      	bne.n	800a46e <atan+0x3e>
 800a4a0:	f04f 3aff 	mov.w	sl, #4294967295
 800a4a4:	e02b      	b.n	800a4fe <atan+0xce>
 800a4a6:	f000 f963 	bl	800a770 <fabs>
 800a4aa:	4bab      	ldr	r3, [pc, #684]	; (800a758 <atan+0x328>)
 800a4ac:	429e      	cmp	r6, r3
 800a4ae:	ec55 4b10 	vmov	r4, r5, d0
 800a4b2:	f300 80bf 	bgt.w	800a634 <atan+0x204>
 800a4b6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a4ba:	429e      	cmp	r6, r3
 800a4bc:	f300 80a0 	bgt.w	800a600 <atan+0x1d0>
 800a4c0:	ee10 2a10 	vmov	r2, s0
 800a4c4:	ee10 0a10 	vmov	r0, s0
 800a4c8:	462b      	mov	r3, r5
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	f7f5 fefe 	bl	80002cc <__adddf3>
 800a4d0:	4ba0      	ldr	r3, [pc, #640]	; (800a754 <atan+0x324>)
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	f7f5 fef8 	bl	80002c8 <__aeabi_dsub>
 800a4d8:	2200      	movs	r2, #0
 800a4da:	4606      	mov	r6, r0
 800a4dc:	460f      	mov	r7, r1
 800a4de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a4e2:	4620      	mov	r0, r4
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	f7f5 fef1 	bl	80002cc <__adddf3>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4630      	mov	r0, r6
 800a4f0:	4639      	mov	r1, r7
 800a4f2:	f7f6 f9cb 	bl	800088c <__aeabi_ddiv>
 800a4f6:	f04f 0a00 	mov.w	sl, #0
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	460d      	mov	r5, r1
 800a4fe:	4622      	mov	r2, r4
 800a500:	462b      	mov	r3, r5
 800a502:	4620      	mov	r0, r4
 800a504:	4629      	mov	r1, r5
 800a506:	f7f6 f897 	bl	8000638 <__aeabi_dmul>
 800a50a:	4602      	mov	r2, r0
 800a50c:	460b      	mov	r3, r1
 800a50e:	4680      	mov	r8, r0
 800a510:	4689      	mov	r9, r1
 800a512:	f7f6 f891 	bl	8000638 <__aeabi_dmul>
 800a516:	a374      	add	r3, pc, #464	; (adr r3, 800a6e8 <atan+0x2b8>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	4606      	mov	r6, r0
 800a51e:	460f      	mov	r7, r1
 800a520:	f7f6 f88a 	bl	8000638 <__aeabi_dmul>
 800a524:	a372      	add	r3, pc, #456	; (adr r3, 800a6f0 <atan+0x2c0>)
 800a526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52a:	f7f5 fecf 	bl	80002cc <__adddf3>
 800a52e:	4632      	mov	r2, r6
 800a530:	463b      	mov	r3, r7
 800a532:	f7f6 f881 	bl	8000638 <__aeabi_dmul>
 800a536:	a370      	add	r3, pc, #448	; (adr r3, 800a6f8 <atan+0x2c8>)
 800a538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53c:	f7f5 fec6 	bl	80002cc <__adddf3>
 800a540:	4632      	mov	r2, r6
 800a542:	463b      	mov	r3, r7
 800a544:	f7f6 f878 	bl	8000638 <__aeabi_dmul>
 800a548:	a36d      	add	r3, pc, #436	; (adr r3, 800a700 <atan+0x2d0>)
 800a54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54e:	f7f5 febd 	bl	80002cc <__adddf3>
 800a552:	4632      	mov	r2, r6
 800a554:	463b      	mov	r3, r7
 800a556:	f7f6 f86f 	bl	8000638 <__aeabi_dmul>
 800a55a:	a36b      	add	r3, pc, #428	; (adr r3, 800a708 <atan+0x2d8>)
 800a55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a560:	f7f5 feb4 	bl	80002cc <__adddf3>
 800a564:	4632      	mov	r2, r6
 800a566:	463b      	mov	r3, r7
 800a568:	f7f6 f866 	bl	8000638 <__aeabi_dmul>
 800a56c:	a368      	add	r3, pc, #416	; (adr r3, 800a710 <atan+0x2e0>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	f7f5 feab 	bl	80002cc <__adddf3>
 800a576:	4642      	mov	r2, r8
 800a578:	464b      	mov	r3, r9
 800a57a:	f7f6 f85d 	bl	8000638 <__aeabi_dmul>
 800a57e:	a366      	add	r3, pc, #408	; (adr r3, 800a718 <atan+0x2e8>)
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	4680      	mov	r8, r0
 800a586:	4689      	mov	r9, r1
 800a588:	4630      	mov	r0, r6
 800a58a:	4639      	mov	r1, r7
 800a58c:	f7f6 f854 	bl	8000638 <__aeabi_dmul>
 800a590:	a363      	add	r3, pc, #396	; (adr r3, 800a720 <atan+0x2f0>)
 800a592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a596:	f7f5 fe97 	bl	80002c8 <__aeabi_dsub>
 800a59a:	4632      	mov	r2, r6
 800a59c:	463b      	mov	r3, r7
 800a59e:	f7f6 f84b 	bl	8000638 <__aeabi_dmul>
 800a5a2:	a361      	add	r3, pc, #388	; (adr r3, 800a728 <atan+0x2f8>)
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	f7f5 fe8e 	bl	80002c8 <__aeabi_dsub>
 800a5ac:	4632      	mov	r2, r6
 800a5ae:	463b      	mov	r3, r7
 800a5b0:	f7f6 f842 	bl	8000638 <__aeabi_dmul>
 800a5b4:	a35e      	add	r3, pc, #376	; (adr r3, 800a730 <atan+0x300>)
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	f7f5 fe85 	bl	80002c8 <__aeabi_dsub>
 800a5be:	4632      	mov	r2, r6
 800a5c0:	463b      	mov	r3, r7
 800a5c2:	f7f6 f839 	bl	8000638 <__aeabi_dmul>
 800a5c6:	a35c      	add	r3, pc, #368	; (adr r3, 800a738 <atan+0x308>)
 800a5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5cc:	f7f5 fe7c 	bl	80002c8 <__aeabi_dsub>
 800a5d0:	4632      	mov	r2, r6
 800a5d2:	463b      	mov	r3, r7
 800a5d4:	f7f6 f830 	bl	8000638 <__aeabi_dmul>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	4640      	mov	r0, r8
 800a5de:	4649      	mov	r1, r9
 800a5e0:	f7f5 fe74 	bl	80002cc <__adddf3>
 800a5e4:	4622      	mov	r2, r4
 800a5e6:	462b      	mov	r3, r5
 800a5e8:	f7f6 f826 	bl	8000638 <__aeabi_dmul>
 800a5ec:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	d14b      	bne.n	800a68e <atan+0x25e>
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	f7f5 fe65 	bl	80002c8 <__aeabi_dsub>
 800a5fe:	e72c      	b.n	800a45a <atan+0x2a>
 800a600:	ee10 0a10 	vmov	r0, s0
 800a604:	4b53      	ldr	r3, [pc, #332]	; (800a754 <atan+0x324>)
 800a606:	2200      	movs	r2, #0
 800a608:	4629      	mov	r1, r5
 800a60a:	f7f5 fe5d 	bl	80002c8 <__aeabi_dsub>
 800a60e:	4b51      	ldr	r3, [pc, #324]	; (800a754 <atan+0x324>)
 800a610:	4606      	mov	r6, r0
 800a612:	460f      	mov	r7, r1
 800a614:	2200      	movs	r2, #0
 800a616:	4620      	mov	r0, r4
 800a618:	4629      	mov	r1, r5
 800a61a:	f7f5 fe57 	bl	80002cc <__adddf3>
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	4630      	mov	r0, r6
 800a624:	4639      	mov	r1, r7
 800a626:	f7f6 f931 	bl	800088c <__aeabi_ddiv>
 800a62a:	f04f 0a01 	mov.w	sl, #1
 800a62e:	4604      	mov	r4, r0
 800a630:	460d      	mov	r5, r1
 800a632:	e764      	b.n	800a4fe <atan+0xce>
 800a634:	4b49      	ldr	r3, [pc, #292]	; (800a75c <atan+0x32c>)
 800a636:	429e      	cmp	r6, r3
 800a638:	da1d      	bge.n	800a676 <atan+0x246>
 800a63a:	ee10 0a10 	vmov	r0, s0
 800a63e:	4b48      	ldr	r3, [pc, #288]	; (800a760 <atan+0x330>)
 800a640:	2200      	movs	r2, #0
 800a642:	4629      	mov	r1, r5
 800a644:	f7f5 fe40 	bl	80002c8 <__aeabi_dsub>
 800a648:	4b45      	ldr	r3, [pc, #276]	; (800a760 <atan+0x330>)
 800a64a:	4606      	mov	r6, r0
 800a64c:	460f      	mov	r7, r1
 800a64e:	2200      	movs	r2, #0
 800a650:	4620      	mov	r0, r4
 800a652:	4629      	mov	r1, r5
 800a654:	f7f5 fff0 	bl	8000638 <__aeabi_dmul>
 800a658:	4b3e      	ldr	r3, [pc, #248]	; (800a754 <atan+0x324>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	f7f5 fe36 	bl	80002cc <__adddf3>
 800a660:	4602      	mov	r2, r0
 800a662:	460b      	mov	r3, r1
 800a664:	4630      	mov	r0, r6
 800a666:	4639      	mov	r1, r7
 800a668:	f7f6 f910 	bl	800088c <__aeabi_ddiv>
 800a66c:	f04f 0a02 	mov.w	sl, #2
 800a670:	4604      	mov	r4, r0
 800a672:	460d      	mov	r5, r1
 800a674:	e743      	b.n	800a4fe <atan+0xce>
 800a676:	462b      	mov	r3, r5
 800a678:	ee10 2a10 	vmov	r2, s0
 800a67c:	4939      	ldr	r1, [pc, #228]	; (800a764 <atan+0x334>)
 800a67e:	2000      	movs	r0, #0
 800a680:	f7f6 f904 	bl	800088c <__aeabi_ddiv>
 800a684:	f04f 0a03 	mov.w	sl, #3
 800a688:	4604      	mov	r4, r0
 800a68a:	460d      	mov	r5, r1
 800a68c:	e737      	b.n	800a4fe <atan+0xce>
 800a68e:	4b36      	ldr	r3, [pc, #216]	; (800a768 <atan+0x338>)
 800a690:	4e36      	ldr	r6, [pc, #216]	; (800a76c <atan+0x33c>)
 800a692:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a696:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a69a:	e9da 2300 	ldrd	r2, r3, [sl]
 800a69e:	f7f5 fe13 	bl	80002c8 <__aeabi_dsub>
 800a6a2:	4622      	mov	r2, r4
 800a6a4:	462b      	mov	r3, r5
 800a6a6:	f7f5 fe0f 	bl	80002c8 <__aeabi_dsub>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a6b2:	f7f5 fe09 	bl	80002c8 <__aeabi_dsub>
 800a6b6:	f1bb 0f00 	cmp.w	fp, #0
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	460d      	mov	r5, r1
 800a6be:	f6bf aed6 	bge.w	800a46e <atan+0x3e>
 800a6c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6c6:	461d      	mov	r5, r3
 800a6c8:	e6d1      	b.n	800a46e <atan+0x3e>
 800a6ca:	a51d      	add	r5, pc, #116	; (adr r5, 800a740 <atan+0x310>)
 800a6cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a6d0:	e6cd      	b.n	800a46e <atan+0x3e>
 800a6d2:	bf00      	nop
 800a6d4:	f3af 8000 	nop.w
 800a6d8:	54442d18 	.word	0x54442d18
 800a6dc:	bff921fb 	.word	0xbff921fb
 800a6e0:	8800759c 	.word	0x8800759c
 800a6e4:	7e37e43c 	.word	0x7e37e43c
 800a6e8:	e322da11 	.word	0xe322da11
 800a6ec:	3f90ad3a 	.word	0x3f90ad3a
 800a6f0:	24760deb 	.word	0x24760deb
 800a6f4:	3fa97b4b 	.word	0x3fa97b4b
 800a6f8:	a0d03d51 	.word	0xa0d03d51
 800a6fc:	3fb10d66 	.word	0x3fb10d66
 800a700:	c54c206e 	.word	0xc54c206e
 800a704:	3fb745cd 	.word	0x3fb745cd
 800a708:	920083ff 	.word	0x920083ff
 800a70c:	3fc24924 	.word	0x3fc24924
 800a710:	5555550d 	.word	0x5555550d
 800a714:	3fd55555 	.word	0x3fd55555
 800a718:	2c6a6c2f 	.word	0x2c6a6c2f
 800a71c:	bfa2b444 	.word	0xbfa2b444
 800a720:	52defd9a 	.word	0x52defd9a
 800a724:	3fadde2d 	.word	0x3fadde2d
 800a728:	af749a6d 	.word	0xaf749a6d
 800a72c:	3fb3b0f2 	.word	0x3fb3b0f2
 800a730:	fe231671 	.word	0xfe231671
 800a734:	3fbc71c6 	.word	0x3fbc71c6
 800a738:	9998ebc4 	.word	0x9998ebc4
 800a73c:	3fc99999 	.word	0x3fc99999
 800a740:	54442d18 	.word	0x54442d18
 800a744:	3ff921fb 	.word	0x3ff921fb
 800a748:	440fffff 	.word	0x440fffff
 800a74c:	7ff00000 	.word	0x7ff00000
 800a750:	3fdbffff 	.word	0x3fdbffff
 800a754:	3ff00000 	.word	0x3ff00000
 800a758:	3ff2ffff 	.word	0x3ff2ffff
 800a75c:	40038000 	.word	0x40038000
 800a760:	3ff80000 	.word	0x3ff80000
 800a764:	bff00000 	.word	0xbff00000
 800a768:	0800bdd0 	.word	0x0800bdd0
 800a76c:	0800bdb0 	.word	0x0800bdb0

0800a770 <fabs>:
 800a770:	ec51 0b10 	vmov	r0, r1, d0
 800a774:	ee10 2a10 	vmov	r2, s0
 800a778:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a77c:	ec43 2b10 	vmov	d0, r2, r3
 800a780:	4770      	bx	lr
 800a782:	0000      	movs	r0, r0
 800a784:	0000      	movs	r0, r0
	...

0800a788 <tan>:
 800a788:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a78a:	ec53 2b10 	vmov	r2, r3, d0
 800a78e:	4816      	ldr	r0, [pc, #88]	; (800a7e8 <tan+0x60>)
 800a790:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a794:	4281      	cmp	r1, r0
 800a796:	dc07      	bgt.n	800a7a8 <tan+0x20>
 800a798:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800a7e0 <tan+0x58>
 800a79c:	2001      	movs	r0, #1
 800a79e:	b005      	add	sp, #20
 800a7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7a4:	f000 bd80 	b.w	800b2a8 <__kernel_tan>
 800a7a8:	4810      	ldr	r0, [pc, #64]	; (800a7ec <tan+0x64>)
 800a7aa:	4281      	cmp	r1, r0
 800a7ac:	dd09      	ble.n	800a7c2 <tan+0x3a>
 800a7ae:	ee10 0a10 	vmov	r0, s0
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	f7f5 fd88 	bl	80002c8 <__aeabi_dsub>
 800a7b8:	ec41 0b10 	vmov	d0, r0, r1
 800a7bc:	b005      	add	sp, #20
 800a7be:	f85d fb04 	ldr.w	pc, [sp], #4
 800a7c2:	4668      	mov	r0, sp
 800a7c4:	f000 f814 	bl	800a7f0 <__ieee754_rem_pio2>
 800a7c8:	0040      	lsls	r0, r0, #1
 800a7ca:	f000 0002 	and.w	r0, r0, #2
 800a7ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a7d2:	ed9d 0b00 	vldr	d0, [sp]
 800a7d6:	f1c0 0001 	rsb	r0, r0, #1
 800a7da:	f000 fd65 	bl	800b2a8 <__kernel_tan>
 800a7de:	e7ed      	b.n	800a7bc <tan+0x34>
	...
 800a7e8:	3fe921fb 	.word	0x3fe921fb
 800a7ec:	7fefffff 	.word	0x7fefffff

0800a7f0 <__ieee754_rem_pio2>:
 800a7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f4:	ed2d 8b02 	vpush	{d8}
 800a7f8:	ec55 4b10 	vmov	r4, r5, d0
 800a7fc:	4bca      	ldr	r3, [pc, #808]	; (800ab28 <__ieee754_rem_pio2+0x338>)
 800a7fe:	b08b      	sub	sp, #44	; 0x2c
 800a800:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a804:	4598      	cmp	r8, r3
 800a806:	4682      	mov	sl, r0
 800a808:	9502      	str	r5, [sp, #8]
 800a80a:	dc08      	bgt.n	800a81e <__ieee754_rem_pio2+0x2e>
 800a80c:	2200      	movs	r2, #0
 800a80e:	2300      	movs	r3, #0
 800a810:	ed80 0b00 	vstr	d0, [r0]
 800a814:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a818:	f04f 0b00 	mov.w	fp, #0
 800a81c:	e028      	b.n	800a870 <__ieee754_rem_pio2+0x80>
 800a81e:	4bc3      	ldr	r3, [pc, #780]	; (800ab2c <__ieee754_rem_pio2+0x33c>)
 800a820:	4598      	cmp	r8, r3
 800a822:	dc78      	bgt.n	800a916 <__ieee754_rem_pio2+0x126>
 800a824:	9b02      	ldr	r3, [sp, #8]
 800a826:	4ec2      	ldr	r6, [pc, #776]	; (800ab30 <__ieee754_rem_pio2+0x340>)
 800a828:	2b00      	cmp	r3, #0
 800a82a:	ee10 0a10 	vmov	r0, s0
 800a82e:	a3b0      	add	r3, pc, #704	; (adr r3, 800aaf0 <__ieee754_rem_pio2+0x300>)
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	4629      	mov	r1, r5
 800a836:	dd39      	ble.n	800a8ac <__ieee754_rem_pio2+0xbc>
 800a838:	f7f5 fd46 	bl	80002c8 <__aeabi_dsub>
 800a83c:	45b0      	cmp	r8, r6
 800a83e:	4604      	mov	r4, r0
 800a840:	460d      	mov	r5, r1
 800a842:	d01b      	beq.n	800a87c <__ieee754_rem_pio2+0x8c>
 800a844:	a3ac      	add	r3, pc, #688	; (adr r3, 800aaf8 <__ieee754_rem_pio2+0x308>)
 800a846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84a:	f7f5 fd3d 	bl	80002c8 <__aeabi_dsub>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	e9ca 2300 	strd	r2, r3, [sl]
 800a856:	4620      	mov	r0, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	f7f5 fd35 	bl	80002c8 <__aeabi_dsub>
 800a85e:	a3a6      	add	r3, pc, #664	; (adr r3, 800aaf8 <__ieee754_rem_pio2+0x308>)
 800a860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a864:	f7f5 fd30 	bl	80002c8 <__aeabi_dsub>
 800a868:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a86c:	f04f 0b01 	mov.w	fp, #1
 800a870:	4658      	mov	r0, fp
 800a872:	b00b      	add	sp, #44	; 0x2c
 800a874:	ecbd 8b02 	vpop	{d8}
 800a878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87c:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab00 <__ieee754_rem_pio2+0x310>)
 800a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a882:	f7f5 fd21 	bl	80002c8 <__aeabi_dsub>
 800a886:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x318>)
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	4604      	mov	r4, r0
 800a88e:	460d      	mov	r5, r1
 800a890:	f7f5 fd1a 	bl	80002c8 <__aeabi_dsub>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	e9ca 2300 	strd	r2, r3, [sl]
 800a89c:	4620      	mov	r0, r4
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7f5 fd12 	bl	80002c8 <__aeabi_dsub>
 800a8a4:	a398      	add	r3, pc, #608	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x318>)
 800a8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8aa:	e7db      	b.n	800a864 <__ieee754_rem_pio2+0x74>
 800a8ac:	f7f5 fd0e 	bl	80002cc <__adddf3>
 800a8b0:	45b0      	cmp	r8, r6
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	460d      	mov	r5, r1
 800a8b6:	d016      	beq.n	800a8e6 <__ieee754_rem_pio2+0xf6>
 800a8b8:	a38f      	add	r3, pc, #572	; (adr r3, 800aaf8 <__ieee754_rem_pio2+0x308>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f7f5 fd05 	bl	80002cc <__adddf3>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	e9ca 2300 	strd	r2, r3, [sl]
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	f7f5 fcfb 	bl	80002c8 <__aeabi_dsub>
 800a8d2:	a389      	add	r3, pc, #548	; (adr r3, 800aaf8 <__ieee754_rem_pio2+0x308>)
 800a8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d8:	f7f5 fcf8 	bl	80002cc <__adddf3>
 800a8dc:	f04f 3bff 	mov.w	fp, #4294967295
 800a8e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a8e4:	e7c4      	b.n	800a870 <__ieee754_rem_pio2+0x80>
 800a8e6:	a386      	add	r3, pc, #536	; (adr r3, 800ab00 <__ieee754_rem_pio2+0x310>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f7f5 fcee 	bl	80002cc <__adddf3>
 800a8f0:	a385      	add	r3, pc, #532	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x318>)
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	460d      	mov	r5, r1
 800a8fa:	f7f5 fce7 	bl	80002cc <__adddf3>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	e9ca 2300 	strd	r2, r3, [sl]
 800a906:	4620      	mov	r0, r4
 800a908:	4629      	mov	r1, r5
 800a90a:	f7f5 fcdd 	bl	80002c8 <__aeabi_dsub>
 800a90e:	a37e      	add	r3, pc, #504	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x318>)
 800a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a914:	e7e0      	b.n	800a8d8 <__ieee754_rem_pio2+0xe8>
 800a916:	4b87      	ldr	r3, [pc, #540]	; (800ab34 <__ieee754_rem_pio2+0x344>)
 800a918:	4598      	cmp	r8, r3
 800a91a:	f300 80d9 	bgt.w	800aad0 <__ieee754_rem_pio2+0x2e0>
 800a91e:	f7ff ff27 	bl	800a770 <fabs>
 800a922:	ec55 4b10 	vmov	r4, r5, d0
 800a926:	ee10 0a10 	vmov	r0, s0
 800a92a:	a379      	add	r3, pc, #484	; (adr r3, 800ab10 <__ieee754_rem_pio2+0x320>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	4629      	mov	r1, r5
 800a932:	f7f5 fe81 	bl	8000638 <__aeabi_dmul>
 800a936:	4b80      	ldr	r3, [pc, #512]	; (800ab38 <__ieee754_rem_pio2+0x348>)
 800a938:	2200      	movs	r2, #0
 800a93a:	f7f5 fcc7 	bl	80002cc <__adddf3>
 800a93e:	f7f6 f92b 	bl	8000b98 <__aeabi_d2iz>
 800a942:	4683      	mov	fp, r0
 800a944:	f7f5 fe0e 	bl	8000564 <__aeabi_i2d>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	ec43 2b18 	vmov	d8, r2, r3
 800a950:	a367      	add	r3, pc, #412	; (adr r3, 800aaf0 <__ieee754_rem_pio2+0x300>)
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f7f5 fe6f 	bl	8000638 <__aeabi_dmul>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	f7f5 fcb1 	bl	80002c8 <__aeabi_dsub>
 800a966:	a364      	add	r3, pc, #400	; (adr r3, 800aaf8 <__ieee754_rem_pio2+0x308>)
 800a968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96c:	4606      	mov	r6, r0
 800a96e:	460f      	mov	r7, r1
 800a970:	ec51 0b18 	vmov	r0, r1, d8
 800a974:	f7f5 fe60 	bl	8000638 <__aeabi_dmul>
 800a978:	f1bb 0f1f 	cmp.w	fp, #31
 800a97c:	4604      	mov	r4, r0
 800a97e:	460d      	mov	r5, r1
 800a980:	dc0d      	bgt.n	800a99e <__ieee754_rem_pio2+0x1ae>
 800a982:	4b6e      	ldr	r3, [pc, #440]	; (800ab3c <__ieee754_rem_pio2+0x34c>)
 800a984:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98c:	4543      	cmp	r3, r8
 800a98e:	d006      	beq.n	800a99e <__ieee754_rem_pio2+0x1ae>
 800a990:	4622      	mov	r2, r4
 800a992:	462b      	mov	r3, r5
 800a994:	4630      	mov	r0, r6
 800a996:	4639      	mov	r1, r7
 800a998:	f7f5 fc96 	bl	80002c8 <__aeabi_dsub>
 800a99c:	e00f      	b.n	800a9be <__ieee754_rem_pio2+0x1ce>
 800a99e:	462b      	mov	r3, r5
 800a9a0:	4622      	mov	r2, r4
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f5 fc8f 	bl	80002c8 <__aeabi_dsub>
 800a9aa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a9ae:	9303      	str	r3, [sp, #12]
 800a9b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a9b4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a9b8:	f1b8 0f10 	cmp.w	r8, #16
 800a9bc:	dc02      	bgt.n	800a9c4 <__ieee754_rem_pio2+0x1d4>
 800a9be:	e9ca 0100 	strd	r0, r1, [sl]
 800a9c2:	e039      	b.n	800aa38 <__ieee754_rem_pio2+0x248>
 800a9c4:	a34e      	add	r3, pc, #312	; (adr r3, 800ab00 <__ieee754_rem_pio2+0x310>)
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	ec51 0b18 	vmov	r0, r1, d8
 800a9ce:	f7f5 fe33 	bl	8000638 <__aeabi_dmul>
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	460d      	mov	r5, r1
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	4630      	mov	r0, r6
 800a9dc:	4639      	mov	r1, r7
 800a9de:	f7f5 fc73 	bl	80002c8 <__aeabi_dsub>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4680      	mov	r8, r0
 800a9e8:	4689      	mov	r9, r1
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	4639      	mov	r1, r7
 800a9ee:	f7f5 fc6b 	bl	80002c8 <__aeabi_dsub>
 800a9f2:	4622      	mov	r2, r4
 800a9f4:	462b      	mov	r3, r5
 800a9f6:	f7f5 fc67 	bl	80002c8 <__aeabi_dsub>
 800a9fa:	a343      	add	r3, pc, #268	; (adr r3, 800ab08 <__ieee754_rem_pio2+0x318>)
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	4604      	mov	r4, r0
 800aa02:	460d      	mov	r5, r1
 800aa04:	ec51 0b18 	vmov	r0, r1, d8
 800aa08:	f7f5 fe16 	bl	8000638 <__aeabi_dmul>
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	462b      	mov	r3, r5
 800aa10:	f7f5 fc5a 	bl	80002c8 <__aeabi_dsub>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	4604      	mov	r4, r0
 800aa1a:	460d      	mov	r5, r1
 800aa1c:	4640      	mov	r0, r8
 800aa1e:	4649      	mov	r1, r9
 800aa20:	f7f5 fc52 	bl	80002c8 <__aeabi_dsub>
 800aa24:	9a03      	ldr	r2, [sp, #12]
 800aa26:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	2b31      	cmp	r3, #49	; 0x31
 800aa2e:	dc24      	bgt.n	800aa7a <__ieee754_rem_pio2+0x28a>
 800aa30:	e9ca 0100 	strd	r0, r1, [sl]
 800aa34:	4646      	mov	r6, r8
 800aa36:	464f      	mov	r7, r9
 800aa38:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	4642      	mov	r2, r8
 800aa40:	464b      	mov	r3, r9
 800aa42:	4639      	mov	r1, r7
 800aa44:	f7f5 fc40 	bl	80002c8 <__aeabi_dsub>
 800aa48:	462b      	mov	r3, r5
 800aa4a:	4622      	mov	r2, r4
 800aa4c:	f7f5 fc3c 	bl	80002c8 <__aeabi_dsub>
 800aa50:	9b02      	ldr	r3, [sp, #8]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aa58:	f6bf af0a 	bge.w	800a870 <__ieee754_rem_pio2+0x80>
 800aa5c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aa60:	f8ca 3004 	str.w	r3, [sl, #4]
 800aa64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa68:	f8ca 8000 	str.w	r8, [sl]
 800aa6c:	f8ca 0008 	str.w	r0, [sl, #8]
 800aa70:	f8ca 300c 	str.w	r3, [sl, #12]
 800aa74:	f1cb 0b00 	rsb	fp, fp, #0
 800aa78:	e6fa      	b.n	800a870 <__ieee754_rem_pio2+0x80>
 800aa7a:	a327      	add	r3, pc, #156	; (adr r3, 800ab18 <__ieee754_rem_pio2+0x328>)
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	ec51 0b18 	vmov	r0, r1, d8
 800aa84:	f7f5 fdd8 	bl	8000638 <__aeabi_dmul>
 800aa88:	4604      	mov	r4, r0
 800aa8a:	460d      	mov	r5, r1
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4640      	mov	r0, r8
 800aa92:	4649      	mov	r1, r9
 800aa94:	f7f5 fc18 	bl	80002c8 <__aeabi_dsub>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4606      	mov	r6, r0
 800aa9e:	460f      	mov	r7, r1
 800aaa0:	4640      	mov	r0, r8
 800aaa2:	4649      	mov	r1, r9
 800aaa4:	f7f5 fc10 	bl	80002c8 <__aeabi_dsub>
 800aaa8:	4622      	mov	r2, r4
 800aaaa:	462b      	mov	r3, r5
 800aaac:	f7f5 fc0c 	bl	80002c8 <__aeabi_dsub>
 800aab0:	a31b      	add	r3, pc, #108	; (adr r3, 800ab20 <__ieee754_rem_pio2+0x330>)
 800aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aab6:	4604      	mov	r4, r0
 800aab8:	460d      	mov	r5, r1
 800aaba:	ec51 0b18 	vmov	r0, r1, d8
 800aabe:	f7f5 fdbb 	bl	8000638 <__aeabi_dmul>
 800aac2:	4622      	mov	r2, r4
 800aac4:	462b      	mov	r3, r5
 800aac6:	f7f5 fbff 	bl	80002c8 <__aeabi_dsub>
 800aaca:	4604      	mov	r4, r0
 800aacc:	460d      	mov	r5, r1
 800aace:	e75f      	b.n	800a990 <__ieee754_rem_pio2+0x1a0>
 800aad0:	4b1b      	ldr	r3, [pc, #108]	; (800ab40 <__ieee754_rem_pio2+0x350>)
 800aad2:	4598      	cmp	r8, r3
 800aad4:	dd36      	ble.n	800ab44 <__ieee754_rem_pio2+0x354>
 800aad6:	ee10 2a10 	vmov	r2, s0
 800aada:	462b      	mov	r3, r5
 800aadc:	4620      	mov	r0, r4
 800aade:	4629      	mov	r1, r5
 800aae0:	f7f5 fbf2 	bl	80002c8 <__aeabi_dsub>
 800aae4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aae8:	e9ca 0100 	strd	r0, r1, [sl]
 800aaec:	e694      	b.n	800a818 <__ieee754_rem_pio2+0x28>
 800aaee:	bf00      	nop
 800aaf0:	54400000 	.word	0x54400000
 800aaf4:	3ff921fb 	.word	0x3ff921fb
 800aaf8:	1a626331 	.word	0x1a626331
 800aafc:	3dd0b461 	.word	0x3dd0b461
 800ab00:	1a600000 	.word	0x1a600000
 800ab04:	3dd0b461 	.word	0x3dd0b461
 800ab08:	2e037073 	.word	0x2e037073
 800ab0c:	3ba3198a 	.word	0x3ba3198a
 800ab10:	6dc9c883 	.word	0x6dc9c883
 800ab14:	3fe45f30 	.word	0x3fe45f30
 800ab18:	2e000000 	.word	0x2e000000
 800ab1c:	3ba3198a 	.word	0x3ba3198a
 800ab20:	252049c1 	.word	0x252049c1
 800ab24:	397b839a 	.word	0x397b839a
 800ab28:	3fe921fb 	.word	0x3fe921fb
 800ab2c:	4002d97b 	.word	0x4002d97b
 800ab30:	3ff921fb 	.word	0x3ff921fb
 800ab34:	413921fb 	.word	0x413921fb
 800ab38:	3fe00000 	.word	0x3fe00000
 800ab3c:	0800bdf0 	.word	0x0800bdf0
 800ab40:	7fefffff 	.word	0x7fefffff
 800ab44:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ab48:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ab4c:	ee10 0a10 	vmov	r0, s0
 800ab50:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ab54:	ee10 6a10 	vmov	r6, s0
 800ab58:	460f      	mov	r7, r1
 800ab5a:	f7f6 f81d 	bl	8000b98 <__aeabi_d2iz>
 800ab5e:	f7f5 fd01 	bl	8000564 <__aeabi_i2d>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	4630      	mov	r0, r6
 800ab68:	4639      	mov	r1, r7
 800ab6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab6e:	f7f5 fbab 	bl	80002c8 <__aeabi_dsub>
 800ab72:	4b23      	ldr	r3, [pc, #140]	; (800ac00 <__ieee754_rem_pio2+0x410>)
 800ab74:	2200      	movs	r2, #0
 800ab76:	f7f5 fd5f 	bl	8000638 <__aeabi_dmul>
 800ab7a:	460f      	mov	r7, r1
 800ab7c:	4606      	mov	r6, r0
 800ab7e:	f7f6 f80b 	bl	8000b98 <__aeabi_d2iz>
 800ab82:	f7f5 fcef 	bl	8000564 <__aeabi_i2d>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	4639      	mov	r1, r7
 800ab8e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab92:	f7f5 fb99 	bl	80002c8 <__aeabi_dsub>
 800ab96:	4b1a      	ldr	r3, [pc, #104]	; (800ac00 <__ieee754_rem_pio2+0x410>)
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f7f5 fd4d 	bl	8000638 <__aeabi_dmul>
 800ab9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aba2:	ad04      	add	r5, sp, #16
 800aba4:	f04f 0803 	mov.w	r8, #3
 800aba8:	46a9      	mov	r9, r5
 800abaa:	2600      	movs	r6, #0
 800abac:	2700      	movs	r7, #0
 800abae:	4632      	mov	r2, r6
 800abb0:	463b      	mov	r3, r7
 800abb2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800abb6:	46c3      	mov	fp, r8
 800abb8:	3d08      	subs	r5, #8
 800abba:	f108 38ff 	add.w	r8, r8, #4294967295
 800abbe:	f7f5 ffa3 	bl	8000b08 <__aeabi_dcmpeq>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d1f3      	bne.n	800abae <__ieee754_rem_pio2+0x3be>
 800abc6:	4b0f      	ldr	r3, [pc, #60]	; (800ac04 <__ieee754_rem_pio2+0x414>)
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	2302      	movs	r3, #2
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	4622      	mov	r2, r4
 800abd0:	465b      	mov	r3, fp
 800abd2:	4651      	mov	r1, sl
 800abd4:	4648      	mov	r0, r9
 800abd6:	f000 f817 	bl	800ac08 <__kernel_rem_pio2>
 800abda:	9b02      	ldr	r3, [sp, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	4683      	mov	fp, r0
 800abe0:	f6bf ae46 	bge.w	800a870 <__ieee754_rem_pio2+0x80>
 800abe4:	e9da 2100 	ldrd	r2, r1, [sl]
 800abe8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abec:	e9ca 2300 	strd	r2, r3, [sl]
 800abf0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800abf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abf8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800abfc:	e73a      	b.n	800aa74 <__ieee754_rem_pio2+0x284>
 800abfe:	bf00      	nop
 800ac00:	41700000 	.word	0x41700000
 800ac04:	0800be70 	.word	0x0800be70

0800ac08 <__kernel_rem_pio2>:
 800ac08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac0c:	ed2d 8b02 	vpush	{d8}
 800ac10:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ac14:	f112 0f14 	cmn.w	r2, #20
 800ac18:	9308      	str	r3, [sp, #32]
 800ac1a:	9101      	str	r1, [sp, #4]
 800ac1c:	4bc4      	ldr	r3, [pc, #784]	; (800af30 <__kernel_rem_pio2+0x328>)
 800ac1e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ac20:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac26:	9302      	str	r3, [sp, #8]
 800ac28:	9b08      	ldr	r3, [sp, #32]
 800ac2a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac2e:	bfa8      	it	ge
 800ac30:	1ed4      	subge	r4, r2, #3
 800ac32:	9306      	str	r3, [sp, #24]
 800ac34:	bfb2      	itee	lt
 800ac36:	2400      	movlt	r4, #0
 800ac38:	2318      	movge	r3, #24
 800ac3a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ac3e:	f06f 0317 	mvn.w	r3, #23
 800ac42:	fb04 3303 	mla	r3, r4, r3, r3
 800ac46:	eb03 0a02 	add.w	sl, r3, r2
 800ac4a:	9b02      	ldr	r3, [sp, #8]
 800ac4c:	9a06      	ldr	r2, [sp, #24]
 800ac4e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800af20 <__kernel_rem_pio2+0x318>
 800ac52:	eb03 0802 	add.w	r8, r3, r2
 800ac56:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ac58:	1aa7      	subs	r7, r4, r2
 800ac5a:	ae22      	add	r6, sp, #136	; 0x88
 800ac5c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ac60:	2500      	movs	r5, #0
 800ac62:	4545      	cmp	r5, r8
 800ac64:	dd13      	ble.n	800ac8e <__kernel_rem_pio2+0x86>
 800ac66:	9b08      	ldr	r3, [sp, #32]
 800ac68:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800af20 <__kernel_rem_pio2+0x318>
 800ac6c:	aa22      	add	r2, sp, #136	; 0x88
 800ac6e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ac72:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ac76:	f04f 0800 	mov.w	r8, #0
 800ac7a:	9b02      	ldr	r3, [sp, #8]
 800ac7c:	4598      	cmp	r8, r3
 800ac7e:	dc2f      	bgt.n	800ace0 <__kernel_rem_pio2+0xd8>
 800ac80:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ac84:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ac88:	462f      	mov	r7, r5
 800ac8a:	2600      	movs	r6, #0
 800ac8c:	e01b      	b.n	800acc6 <__kernel_rem_pio2+0xbe>
 800ac8e:	42ef      	cmn	r7, r5
 800ac90:	d407      	bmi.n	800aca2 <__kernel_rem_pio2+0x9a>
 800ac92:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ac96:	f7f5 fc65 	bl	8000564 <__aeabi_i2d>
 800ac9a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ac9e:	3501      	adds	r5, #1
 800aca0:	e7df      	b.n	800ac62 <__kernel_rem_pio2+0x5a>
 800aca2:	ec51 0b18 	vmov	r0, r1, d8
 800aca6:	e7f8      	b.n	800ac9a <__kernel_rem_pio2+0x92>
 800aca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800acb0:	f7f5 fcc2 	bl	8000638 <__aeabi_dmul>
 800acb4:	4602      	mov	r2, r0
 800acb6:	460b      	mov	r3, r1
 800acb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800acbc:	f7f5 fb06 	bl	80002cc <__adddf3>
 800acc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acc4:	3601      	adds	r6, #1
 800acc6:	9b06      	ldr	r3, [sp, #24]
 800acc8:	429e      	cmp	r6, r3
 800acca:	f1a7 0708 	sub.w	r7, r7, #8
 800acce:	ddeb      	ble.n	800aca8 <__kernel_rem_pio2+0xa0>
 800acd0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800acd4:	f108 0801 	add.w	r8, r8, #1
 800acd8:	ecab 7b02 	vstmia	fp!, {d7}
 800acdc:	3508      	adds	r5, #8
 800acde:	e7cc      	b.n	800ac7a <__kernel_rem_pio2+0x72>
 800ace0:	9b02      	ldr	r3, [sp, #8]
 800ace2:	aa0e      	add	r2, sp, #56	; 0x38
 800ace4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ace8:	930d      	str	r3, [sp, #52]	; 0x34
 800acea:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800acec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800acf0:	9c02      	ldr	r4, [sp, #8]
 800acf2:	930c      	str	r3, [sp, #48]	; 0x30
 800acf4:	00e3      	lsls	r3, r4, #3
 800acf6:	930a      	str	r3, [sp, #40]	; 0x28
 800acf8:	ab9a      	add	r3, sp, #616	; 0x268
 800acfa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800acfe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ad02:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ad06:	ab72      	add	r3, sp, #456	; 0x1c8
 800ad08:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ad0c:	46c3      	mov	fp, r8
 800ad0e:	46a1      	mov	r9, r4
 800ad10:	f1b9 0f00 	cmp.w	r9, #0
 800ad14:	f1a5 0508 	sub.w	r5, r5, #8
 800ad18:	dc77      	bgt.n	800ae0a <__kernel_rem_pio2+0x202>
 800ad1a:	ec47 6b10 	vmov	d0, r6, r7
 800ad1e:	4650      	mov	r0, sl
 800ad20:	f000 fd4e 	bl	800b7c0 <scalbn>
 800ad24:	ec57 6b10 	vmov	r6, r7, d0
 800ad28:	2200      	movs	r2, #0
 800ad2a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ad2e:	ee10 0a10 	vmov	r0, s0
 800ad32:	4639      	mov	r1, r7
 800ad34:	f7f5 fc80 	bl	8000638 <__aeabi_dmul>
 800ad38:	ec41 0b10 	vmov	d0, r0, r1
 800ad3c:	f000 fcc0 	bl	800b6c0 <floor>
 800ad40:	4b7c      	ldr	r3, [pc, #496]	; (800af34 <__kernel_rem_pio2+0x32c>)
 800ad42:	ec51 0b10 	vmov	r0, r1, d0
 800ad46:	2200      	movs	r2, #0
 800ad48:	f7f5 fc76 	bl	8000638 <__aeabi_dmul>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4630      	mov	r0, r6
 800ad52:	4639      	mov	r1, r7
 800ad54:	f7f5 fab8 	bl	80002c8 <__aeabi_dsub>
 800ad58:	460f      	mov	r7, r1
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	f7f5 ff1c 	bl	8000b98 <__aeabi_d2iz>
 800ad60:	9004      	str	r0, [sp, #16]
 800ad62:	f7f5 fbff 	bl	8000564 <__aeabi_i2d>
 800ad66:	4602      	mov	r2, r0
 800ad68:	460b      	mov	r3, r1
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	4639      	mov	r1, r7
 800ad6e:	f7f5 faab 	bl	80002c8 <__aeabi_dsub>
 800ad72:	f1ba 0f00 	cmp.w	sl, #0
 800ad76:	4606      	mov	r6, r0
 800ad78:	460f      	mov	r7, r1
 800ad7a:	dd6d      	ble.n	800ae58 <__kernel_rem_pio2+0x250>
 800ad7c:	1e62      	subs	r2, r4, #1
 800ad7e:	ab0e      	add	r3, sp, #56	; 0x38
 800ad80:	9d04      	ldr	r5, [sp, #16]
 800ad82:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ad86:	f1ca 0118 	rsb	r1, sl, #24
 800ad8a:	fa40 f301 	asr.w	r3, r0, r1
 800ad8e:	441d      	add	r5, r3
 800ad90:	408b      	lsls	r3, r1
 800ad92:	1ac0      	subs	r0, r0, r3
 800ad94:	ab0e      	add	r3, sp, #56	; 0x38
 800ad96:	9504      	str	r5, [sp, #16]
 800ad98:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ad9c:	f1ca 0317 	rsb	r3, sl, #23
 800ada0:	fa40 fb03 	asr.w	fp, r0, r3
 800ada4:	f1bb 0f00 	cmp.w	fp, #0
 800ada8:	dd65      	ble.n	800ae76 <__kernel_rem_pio2+0x26e>
 800adaa:	9b04      	ldr	r3, [sp, #16]
 800adac:	2200      	movs	r2, #0
 800adae:	3301      	adds	r3, #1
 800adb0:	9304      	str	r3, [sp, #16]
 800adb2:	4615      	mov	r5, r2
 800adb4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800adb8:	4294      	cmp	r4, r2
 800adba:	f300 809c 	bgt.w	800aef6 <__kernel_rem_pio2+0x2ee>
 800adbe:	f1ba 0f00 	cmp.w	sl, #0
 800adc2:	dd07      	ble.n	800add4 <__kernel_rem_pio2+0x1cc>
 800adc4:	f1ba 0f01 	cmp.w	sl, #1
 800adc8:	f000 80c0 	beq.w	800af4c <__kernel_rem_pio2+0x344>
 800adcc:	f1ba 0f02 	cmp.w	sl, #2
 800add0:	f000 80c6 	beq.w	800af60 <__kernel_rem_pio2+0x358>
 800add4:	f1bb 0f02 	cmp.w	fp, #2
 800add8:	d14d      	bne.n	800ae76 <__kernel_rem_pio2+0x26e>
 800adda:	4632      	mov	r2, r6
 800addc:	463b      	mov	r3, r7
 800adde:	4956      	ldr	r1, [pc, #344]	; (800af38 <__kernel_rem_pio2+0x330>)
 800ade0:	2000      	movs	r0, #0
 800ade2:	f7f5 fa71 	bl	80002c8 <__aeabi_dsub>
 800ade6:	4606      	mov	r6, r0
 800ade8:	460f      	mov	r7, r1
 800adea:	2d00      	cmp	r5, #0
 800adec:	d043      	beq.n	800ae76 <__kernel_rem_pio2+0x26e>
 800adee:	4650      	mov	r0, sl
 800adf0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800af28 <__kernel_rem_pio2+0x320>
 800adf4:	f000 fce4 	bl	800b7c0 <scalbn>
 800adf8:	4630      	mov	r0, r6
 800adfa:	4639      	mov	r1, r7
 800adfc:	ec53 2b10 	vmov	r2, r3, d0
 800ae00:	f7f5 fa62 	bl	80002c8 <__aeabi_dsub>
 800ae04:	4606      	mov	r6, r0
 800ae06:	460f      	mov	r7, r1
 800ae08:	e035      	b.n	800ae76 <__kernel_rem_pio2+0x26e>
 800ae0a:	4b4c      	ldr	r3, [pc, #304]	; (800af3c <__kernel_rem_pio2+0x334>)
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	4630      	mov	r0, r6
 800ae10:	4639      	mov	r1, r7
 800ae12:	f7f5 fc11 	bl	8000638 <__aeabi_dmul>
 800ae16:	f7f5 febf 	bl	8000b98 <__aeabi_d2iz>
 800ae1a:	f7f5 fba3 	bl	8000564 <__aeabi_i2d>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	460b      	mov	r3, r1
 800ae22:	ec43 2b18 	vmov	d8, r2, r3
 800ae26:	4b46      	ldr	r3, [pc, #280]	; (800af40 <__kernel_rem_pio2+0x338>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f7f5 fc05 	bl	8000638 <__aeabi_dmul>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	460b      	mov	r3, r1
 800ae32:	4630      	mov	r0, r6
 800ae34:	4639      	mov	r1, r7
 800ae36:	f7f5 fa47 	bl	80002c8 <__aeabi_dsub>
 800ae3a:	f7f5 fead 	bl	8000b98 <__aeabi_d2iz>
 800ae3e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ae42:	f84b 0b04 	str.w	r0, [fp], #4
 800ae46:	ec51 0b18 	vmov	r0, r1, d8
 800ae4a:	f7f5 fa3f 	bl	80002cc <__adddf3>
 800ae4e:	f109 39ff 	add.w	r9, r9, #4294967295
 800ae52:	4606      	mov	r6, r0
 800ae54:	460f      	mov	r7, r1
 800ae56:	e75b      	b.n	800ad10 <__kernel_rem_pio2+0x108>
 800ae58:	d106      	bne.n	800ae68 <__kernel_rem_pio2+0x260>
 800ae5a:	1e63      	subs	r3, r4, #1
 800ae5c:	aa0e      	add	r2, sp, #56	; 0x38
 800ae5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ae62:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ae66:	e79d      	b.n	800ada4 <__kernel_rem_pio2+0x19c>
 800ae68:	4b36      	ldr	r3, [pc, #216]	; (800af44 <__kernel_rem_pio2+0x33c>)
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f7f5 fe6a 	bl	8000b44 <__aeabi_dcmpge>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	d13d      	bne.n	800aef0 <__kernel_rem_pio2+0x2e8>
 800ae74:	4683      	mov	fp, r0
 800ae76:	2200      	movs	r2, #0
 800ae78:	2300      	movs	r3, #0
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	f7f5 fe43 	bl	8000b08 <__aeabi_dcmpeq>
 800ae82:	2800      	cmp	r0, #0
 800ae84:	f000 80c0 	beq.w	800b008 <__kernel_rem_pio2+0x400>
 800ae88:	1e65      	subs	r5, r4, #1
 800ae8a:	462b      	mov	r3, r5
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	9902      	ldr	r1, [sp, #8]
 800ae90:	428b      	cmp	r3, r1
 800ae92:	da6c      	bge.n	800af6e <__kernel_rem_pio2+0x366>
 800ae94:	2a00      	cmp	r2, #0
 800ae96:	f000 8089 	beq.w	800afac <__kernel_rem_pio2+0x3a4>
 800ae9a:	ab0e      	add	r3, sp, #56	; 0x38
 800ae9c:	f1aa 0a18 	sub.w	sl, sl, #24
 800aea0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f000 80ad 	beq.w	800b004 <__kernel_rem_pio2+0x3fc>
 800aeaa:	4650      	mov	r0, sl
 800aeac:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800af28 <__kernel_rem_pio2+0x320>
 800aeb0:	f000 fc86 	bl	800b7c0 <scalbn>
 800aeb4:	ab9a      	add	r3, sp, #616	; 0x268
 800aeb6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aeba:	ec57 6b10 	vmov	r6, r7, d0
 800aebe:	00ec      	lsls	r4, r5, #3
 800aec0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800aec4:	46aa      	mov	sl, r5
 800aec6:	f1ba 0f00 	cmp.w	sl, #0
 800aeca:	f280 80d6 	bge.w	800b07a <__kernel_rem_pio2+0x472>
 800aece:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800af20 <__kernel_rem_pio2+0x318>
 800aed2:	462e      	mov	r6, r5
 800aed4:	2e00      	cmp	r6, #0
 800aed6:	f2c0 8104 	blt.w	800b0e2 <__kernel_rem_pio2+0x4da>
 800aeda:	ab72      	add	r3, sp, #456	; 0x1c8
 800aedc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800aee0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800af48 <__kernel_rem_pio2+0x340>
 800aee4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800aee8:	f04f 0800 	mov.w	r8, #0
 800aeec:	1baf      	subs	r7, r5, r6
 800aeee:	e0ea      	b.n	800b0c6 <__kernel_rem_pio2+0x4be>
 800aef0:	f04f 0b02 	mov.w	fp, #2
 800aef4:	e759      	b.n	800adaa <__kernel_rem_pio2+0x1a2>
 800aef6:	f8d8 3000 	ldr.w	r3, [r8]
 800aefa:	b955      	cbnz	r5, 800af12 <__kernel_rem_pio2+0x30a>
 800aefc:	b123      	cbz	r3, 800af08 <__kernel_rem_pio2+0x300>
 800aefe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800af02:	f8c8 3000 	str.w	r3, [r8]
 800af06:	2301      	movs	r3, #1
 800af08:	3201      	adds	r2, #1
 800af0a:	f108 0804 	add.w	r8, r8, #4
 800af0e:	461d      	mov	r5, r3
 800af10:	e752      	b.n	800adb8 <__kernel_rem_pio2+0x1b0>
 800af12:	1acb      	subs	r3, r1, r3
 800af14:	f8c8 3000 	str.w	r3, [r8]
 800af18:	462b      	mov	r3, r5
 800af1a:	e7f5      	b.n	800af08 <__kernel_rem_pio2+0x300>
 800af1c:	f3af 8000 	nop.w
	...
 800af2c:	3ff00000 	.word	0x3ff00000
 800af30:	0800bfb8 	.word	0x0800bfb8
 800af34:	40200000 	.word	0x40200000
 800af38:	3ff00000 	.word	0x3ff00000
 800af3c:	3e700000 	.word	0x3e700000
 800af40:	41700000 	.word	0x41700000
 800af44:	3fe00000 	.word	0x3fe00000
 800af48:	0800bf78 	.word	0x0800bf78
 800af4c:	1e62      	subs	r2, r4, #1
 800af4e:	ab0e      	add	r3, sp, #56	; 0x38
 800af50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af54:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800af58:	a90e      	add	r1, sp, #56	; 0x38
 800af5a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800af5e:	e739      	b.n	800add4 <__kernel_rem_pio2+0x1cc>
 800af60:	1e62      	subs	r2, r4, #1
 800af62:	ab0e      	add	r3, sp, #56	; 0x38
 800af64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af68:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800af6c:	e7f4      	b.n	800af58 <__kernel_rem_pio2+0x350>
 800af6e:	a90e      	add	r1, sp, #56	; 0x38
 800af70:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800af74:	3b01      	subs	r3, #1
 800af76:	430a      	orrs	r2, r1
 800af78:	e789      	b.n	800ae8e <__kernel_rem_pio2+0x286>
 800af7a:	3301      	adds	r3, #1
 800af7c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800af80:	2900      	cmp	r1, #0
 800af82:	d0fa      	beq.n	800af7a <__kernel_rem_pio2+0x372>
 800af84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af86:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800af8a:	446a      	add	r2, sp
 800af8c:	3a98      	subs	r2, #152	; 0x98
 800af8e:	920a      	str	r2, [sp, #40]	; 0x28
 800af90:	9a08      	ldr	r2, [sp, #32]
 800af92:	18e3      	adds	r3, r4, r3
 800af94:	18a5      	adds	r5, r4, r2
 800af96:	aa22      	add	r2, sp, #136	; 0x88
 800af98:	f104 0801 	add.w	r8, r4, #1
 800af9c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800afa0:	9304      	str	r3, [sp, #16]
 800afa2:	9b04      	ldr	r3, [sp, #16]
 800afa4:	4543      	cmp	r3, r8
 800afa6:	da04      	bge.n	800afb2 <__kernel_rem_pio2+0x3aa>
 800afa8:	461c      	mov	r4, r3
 800afaa:	e6a3      	b.n	800acf4 <__kernel_rem_pio2+0xec>
 800afac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800afae:	2301      	movs	r3, #1
 800afb0:	e7e4      	b.n	800af7c <__kernel_rem_pio2+0x374>
 800afb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afb4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800afb8:	f7f5 fad4 	bl	8000564 <__aeabi_i2d>
 800afbc:	e8e5 0102 	strd	r0, r1, [r5], #8
 800afc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afc2:	46ab      	mov	fp, r5
 800afc4:	461c      	mov	r4, r3
 800afc6:	f04f 0900 	mov.w	r9, #0
 800afca:	2600      	movs	r6, #0
 800afcc:	2700      	movs	r7, #0
 800afce:	9b06      	ldr	r3, [sp, #24]
 800afd0:	4599      	cmp	r9, r3
 800afd2:	dd06      	ble.n	800afe2 <__kernel_rem_pio2+0x3da>
 800afd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800afda:	f108 0801 	add.w	r8, r8, #1
 800afde:	930a      	str	r3, [sp, #40]	; 0x28
 800afe0:	e7df      	b.n	800afa2 <__kernel_rem_pio2+0x39a>
 800afe2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800afe6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800afea:	f7f5 fb25 	bl	8000638 <__aeabi_dmul>
 800afee:	4602      	mov	r2, r0
 800aff0:	460b      	mov	r3, r1
 800aff2:	4630      	mov	r0, r6
 800aff4:	4639      	mov	r1, r7
 800aff6:	f7f5 f969 	bl	80002cc <__adddf3>
 800affa:	f109 0901 	add.w	r9, r9, #1
 800affe:	4606      	mov	r6, r0
 800b000:	460f      	mov	r7, r1
 800b002:	e7e4      	b.n	800afce <__kernel_rem_pio2+0x3c6>
 800b004:	3d01      	subs	r5, #1
 800b006:	e748      	b.n	800ae9a <__kernel_rem_pio2+0x292>
 800b008:	ec47 6b10 	vmov	d0, r6, r7
 800b00c:	f1ca 0000 	rsb	r0, sl, #0
 800b010:	f000 fbd6 	bl	800b7c0 <scalbn>
 800b014:	ec57 6b10 	vmov	r6, r7, d0
 800b018:	4ba0      	ldr	r3, [pc, #640]	; (800b29c <__kernel_rem_pio2+0x694>)
 800b01a:	ee10 0a10 	vmov	r0, s0
 800b01e:	2200      	movs	r2, #0
 800b020:	4639      	mov	r1, r7
 800b022:	f7f5 fd8f 	bl	8000b44 <__aeabi_dcmpge>
 800b026:	b1f8      	cbz	r0, 800b068 <__kernel_rem_pio2+0x460>
 800b028:	4b9d      	ldr	r3, [pc, #628]	; (800b2a0 <__kernel_rem_pio2+0x698>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	4630      	mov	r0, r6
 800b02e:	4639      	mov	r1, r7
 800b030:	f7f5 fb02 	bl	8000638 <__aeabi_dmul>
 800b034:	f7f5 fdb0 	bl	8000b98 <__aeabi_d2iz>
 800b038:	4680      	mov	r8, r0
 800b03a:	f7f5 fa93 	bl	8000564 <__aeabi_i2d>
 800b03e:	4b97      	ldr	r3, [pc, #604]	; (800b29c <__kernel_rem_pio2+0x694>)
 800b040:	2200      	movs	r2, #0
 800b042:	f7f5 faf9 	bl	8000638 <__aeabi_dmul>
 800b046:	460b      	mov	r3, r1
 800b048:	4602      	mov	r2, r0
 800b04a:	4639      	mov	r1, r7
 800b04c:	4630      	mov	r0, r6
 800b04e:	f7f5 f93b 	bl	80002c8 <__aeabi_dsub>
 800b052:	f7f5 fda1 	bl	8000b98 <__aeabi_d2iz>
 800b056:	1c65      	adds	r5, r4, #1
 800b058:	ab0e      	add	r3, sp, #56	; 0x38
 800b05a:	f10a 0a18 	add.w	sl, sl, #24
 800b05e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b062:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b066:	e720      	b.n	800aeaa <__kernel_rem_pio2+0x2a2>
 800b068:	4630      	mov	r0, r6
 800b06a:	4639      	mov	r1, r7
 800b06c:	f7f5 fd94 	bl	8000b98 <__aeabi_d2iz>
 800b070:	ab0e      	add	r3, sp, #56	; 0x38
 800b072:	4625      	mov	r5, r4
 800b074:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b078:	e717      	b.n	800aeaa <__kernel_rem_pio2+0x2a2>
 800b07a:	ab0e      	add	r3, sp, #56	; 0x38
 800b07c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b080:	f7f5 fa70 	bl	8000564 <__aeabi_i2d>
 800b084:	4632      	mov	r2, r6
 800b086:	463b      	mov	r3, r7
 800b088:	f7f5 fad6 	bl	8000638 <__aeabi_dmul>
 800b08c:	4b84      	ldr	r3, [pc, #528]	; (800b2a0 <__kernel_rem_pio2+0x698>)
 800b08e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b092:	2200      	movs	r2, #0
 800b094:	4630      	mov	r0, r6
 800b096:	4639      	mov	r1, r7
 800b098:	f7f5 face 	bl	8000638 <__aeabi_dmul>
 800b09c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0a0:	4606      	mov	r6, r0
 800b0a2:	460f      	mov	r7, r1
 800b0a4:	e70f      	b.n	800aec6 <__kernel_rem_pio2+0x2be>
 800b0a6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b0aa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b0ae:	f7f5 fac3 	bl	8000638 <__aeabi_dmul>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0ba:	f7f5 f907 	bl	80002cc <__adddf3>
 800b0be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b0c2:	f108 0801 	add.w	r8, r8, #1
 800b0c6:	9b02      	ldr	r3, [sp, #8]
 800b0c8:	4598      	cmp	r8, r3
 800b0ca:	dc01      	bgt.n	800b0d0 <__kernel_rem_pio2+0x4c8>
 800b0cc:	45b8      	cmp	r8, r7
 800b0ce:	ddea      	ble.n	800b0a6 <__kernel_rem_pio2+0x49e>
 800b0d0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b0d4:	ab4a      	add	r3, sp, #296	; 0x128
 800b0d6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b0da:	ed87 7b00 	vstr	d7, [r7]
 800b0de:	3e01      	subs	r6, #1
 800b0e0:	e6f8      	b.n	800aed4 <__kernel_rem_pio2+0x2cc>
 800b0e2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	dc0b      	bgt.n	800b100 <__kernel_rem_pio2+0x4f8>
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	dc35      	bgt.n	800b158 <__kernel_rem_pio2+0x550>
 800b0ec:	d059      	beq.n	800b1a2 <__kernel_rem_pio2+0x59a>
 800b0ee:	9b04      	ldr	r3, [sp, #16]
 800b0f0:	f003 0007 	and.w	r0, r3, #7
 800b0f4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b0f8:	ecbd 8b02 	vpop	{d8}
 800b0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b100:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b102:	2b03      	cmp	r3, #3
 800b104:	d1f3      	bne.n	800b0ee <__kernel_rem_pio2+0x4e6>
 800b106:	ab4a      	add	r3, sp, #296	; 0x128
 800b108:	4423      	add	r3, r4
 800b10a:	9306      	str	r3, [sp, #24]
 800b10c:	461c      	mov	r4, r3
 800b10e:	469a      	mov	sl, r3
 800b110:	9502      	str	r5, [sp, #8]
 800b112:	9b02      	ldr	r3, [sp, #8]
 800b114:	2b00      	cmp	r3, #0
 800b116:	f1aa 0a08 	sub.w	sl, sl, #8
 800b11a:	dc6b      	bgt.n	800b1f4 <__kernel_rem_pio2+0x5ec>
 800b11c:	46aa      	mov	sl, r5
 800b11e:	f1ba 0f01 	cmp.w	sl, #1
 800b122:	f1a4 0408 	sub.w	r4, r4, #8
 800b126:	f300 8085 	bgt.w	800b234 <__kernel_rem_pio2+0x62c>
 800b12a:	9c06      	ldr	r4, [sp, #24]
 800b12c:	2000      	movs	r0, #0
 800b12e:	3408      	adds	r4, #8
 800b130:	2100      	movs	r1, #0
 800b132:	2d01      	cmp	r5, #1
 800b134:	f300 809d 	bgt.w	800b272 <__kernel_rem_pio2+0x66a>
 800b138:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b13c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b140:	f1bb 0f00 	cmp.w	fp, #0
 800b144:	f040 809b 	bne.w	800b27e <__kernel_rem_pio2+0x676>
 800b148:	9b01      	ldr	r3, [sp, #4]
 800b14a:	e9c3 5600 	strd	r5, r6, [r3]
 800b14e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b152:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b156:	e7ca      	b.n	800b0ee <__kernel_rem_pio2+0x4e6>
 800b158:	3408      	adds	r4, #8
 800b15a:	ab4a      	add	r3, sp, #296	; 0x128
 800b15c:	441c      	add	r4, r3
 800b15e:	462e      	mov	r6, r5
 800b160:	2000      	movs	r0, #0
 800b162:	2100      	movs	r1, #0
 800b164:	2e00      	cmp	r6, #0
 800b166:	da36      	bge.n	800b1d6 <__kernel_rem_pio2+0x5ce>
 800b168:	f1bb 0f00 	cmp.w	fp, #0
 800b16c:	d039      	beq.n	800b1e2 <__kernel_rem_pio2+0x5da>
 800b16e:	4602      	mov	r2, r0
 800b170:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b174:	9c01      	ldr	r4, [sp, #4]
 800b176:	e9c4 2300 	strd	r2, r3, [r4]
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b182:	f7f5 f8a1 	bl	80002c8 <__aeabi_dsub>
 800b186:	ae4c      	add	r6, sp, #304	; 0x130
 800b188:	2401      	movs	r4, #1
 800b18a:	42a5      	cmp	r5, r4
 800b18c:	da2c      	bge.n	800b1e8 <__kernel_rem_pio2+0x5e0>
 800b18e:	f1bb 0f00 	cmp.w	fp, #0
 800b192:	d002      	beq.n	800b19a <__kernel_rem_pio2+0x592>
 800b194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b198:	4619      	mov	r1, r3
 800b19a:	9b01      	ldr	r3, [sp, #4]
 800b19c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b1a0:	e7a5      	b.n	800b0ee <__kernel_rem_pio2+0x4e6>
 800b1a2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b1a6:	eb0d 0403 	add.w	r4, sp, r3
 800b1aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	2100      	movs	r1, #0
 800b1b2:	2d00      	cmp	r5, #0
 800b1b4:	da09      	bge.n	800b1ca <__kernel_rem_pio2+0x5c2>
 800b1b6:	f1bb 0f00 	cmp.w	fp, #0
 800b1ba:	d002      	beq.n	800b1c2 <__kernel_rem_pio2+0x5ba>
 800b1bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	9b01      	ldr	r3, [sp, #4]
 800b1c4:	e9c3 0100 	strd	r0, r1, [r3]
 800b1c8:	e791      	b.n	800b0ee <__kernel_rem_pio2+0x4e6>
 800b1ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b1ce:	f7f5 f87d 	bl	80002cc <__adddf3>
 800b1d2:	3d01      	subs	r5, #1
 800b1d4:	e7ed      	b.n	800b1b2 <__kernel_rem_pio2+0x5aa>
 800b1d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b1da:	f7f5 f877 	bl	80002cc <__adddf3>
 800b1de:	3e01      	subs	r6, #1
 800b1e0:	e7c0      	b.n	800b164 <__kernel_rem_pio2+0x55c>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	e7c5      	b.n	800b174 <__kernel_rem_pio2+0x56c>
 800b1e8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b1ec:	f7f5 f86e 	bl	80002cc <__adddf3>
 800b1f0:	3401      	adds	r4, #1
 800b1f2:	e7ca      	b.n	800b18a <__kernel_rem_pio2+0x582>
 800b1f4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b1f8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b1fc:	9b02      	ldr	r3, [sp, #8]
 800b1fe:	3b01      	subs	r3, #1
 800b200:	9302      	str	r3, [sp, #8]
 800b202:	4632      	mov	r2, r6
 800b204:	463b      	mov	r3, r7
 800b206:	4640      	mov	r0, r8
 800b208:	4649      	mov	r1, r9
 800b20a:	f7f5 f85f 	bl	80002cc <__adddf3>
 800b20e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	4640      	mov	r0, r8
 800b218:	4649      	mov	r1, r9
 800b21a:	f7f5 f855 	bl	80002c8 <__aeabi_dsub>
 800b21e:	4632      	mov	r2, r6
 800b220:	463b      	mov	r3, r7
 800b222:	f7f5 f853 	bl	80002cc <__adddf3>
 800b226:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b22a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b22e:	ed8a 7b00 	vstr	d7, [sl]
 800b232:	e76e      	b.n	800b112 <__kernel_rem_pio2+0x50a>
 800b234:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b238:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b23c:	4640      	mov	r0, r8
 800b23e:	4632      	mov	r2, r6
 800b240:	463b      	mov	r3, r7
 800b242:	4649      	mov	r1, r9
 800b244:	f7f5 f842 	bl	80002cc <__adddf3>
 800b248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	4640      	mov	r0, r8
 800b252:	4649      	mov	r1, r9
 800b254:	f7f5 f838 	bl	80002c8 <__aeabi_dsub>
 800b258:	4632      	mov	r2, r6
 800b25a:	463b      	mov	r3, r7
 800b25c:	f7f5 f836 	bl	80002cc <__adddf3>
 800b260:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b264:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b268:	ed84 7b00 	vstr	d7, [r4]
 800b26c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b270:	e755      	b.n	800b11e <__kernel_rem_pio2+0x516>
 800b272:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b276:	f7f5 f829 	bl	80002cc <__adddf3>
 800b27a:	3d01      	subs	r5, #1
 800b27c:	e759      	b.n	800b132 <__kernel_rem_pio2+0x52a>
 800b27e:	9b01      	ldr	r3, [sp, #4]
 800b280:	9a01      	ldr	r2, [sp, #4]
 800b282:	601d      	str	r5, [r3, #0]
 800b284:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b288:	605c      	str	r4, [r3, #4]
 800b28a:	609f      	str	r7, [r3, #8]
 800b28c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b290:	60d3      	str	r3, [r2, #12]
 800b292:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b296:	6110      	str	r0, [r2, #16]
 800b298:	6153      	str	r3, [r2, #20]
 800b29a:	e728      	b.n	800b0ee <__kernel_rem_pio2+0x4e6>
 800b29c:	41700000 	.word	0x41700000
 800b2a0:	3e700000 	.word	0x3e700000
 800b2a4:	00000000 	.word	0x00000000

0800b2a8 <__kernel_tan>:
 800b2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ac:	ed2d 8b06 	vpush	{d8-d10}
 800b2b0:	ec5b ab10 	vmov	sl, fp, d0
 800b2b4:	4be0      	ldr	r3, [pc, #896]	; (800b638 <__kernel_tan+0x390>)
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800b2bc:	429f      	cmp	r7, r3
 800b2be:	ec59 8b11 	vmov	r8, r9, d1
 800b2c2:	4606      	mov	r6, r0
 800b2c4:	f8cd b000 	str.w	fp, [sp]
 800b2c8:	dc61      	bgt.n	800b38e <__kernel_tan+0xe6>
 800b2ca:	ee10 0a10 	vmov	r0, s0
 800b2ce:	4659      	mov	r1, fp
 800b2d0:	f7f5 fc62 	bl	8000b98 <__aeabi_d2iz>
 800b2d4:	4605      	mov	r5, r0
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	f040 8083 	bne.w	800b3e2 <__kernel_tan+0x13a>
 800b2dc:	1c73      	adds	r3, r6, #1
 800b2de:	4652      	mov	r2, sl
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	433b      	orrs	r3, r7
 800b2e4:	d112      	bne.n	800b30c <__kernel_tan+0x64>
 800b2e6:	ec4b ab10 	vmov	d0, sl, fp
 800b2ea:	f7ff fa41 	bl	800a770 <fabs>
 800b2ee:	49d3      	ldr	r1, [pc, #844]	; (800b63c <__kernel_tan+0x394>)
 800b2f0:	ec53 2b10 	vmov	r2, r3, d0
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	f7f5 fac9 	bl	800088c <__aeabi_ddiv>
 800b2fa:	4682      	mov	sl, r0
 800b2fc:	468b      	mov	fp, r1
 800b2fe:	ec4b ab10 	vmov	d0, sl, fp
 800b302:	b003      	add	sp, #12
 800b304:	ecbd 8b06 	vpop	{d8-d10}
 800b308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30c:	2e01      	cmp	r6, #1
 800b30e:	d0f6      	beq.n	800b2fe <__kernel_tan+0x56>
 800b310:	4642      	mov	r2, r8
 800b312:	464b      	mov	r3, r9
 800b314:	4650      	mov	r0, sl
 800b316:	4659      	mov	r1, fp
 800b318:	f7f4 ffd8 	bl	80002cc <__adddf3>
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	460f      	mov	r7, r1
 800b322:	2000      	movs	r0, #0
 800b324:	49c6      	ldr	r1, [pc, #792]	; (800b640 <__kernel_tan+0x398>)
 800b326:	f7f5 fab1 	bl	800088c <__aeabi_ddiv>
 800b32a:	e9cd 0100 	strd	r0, r1, [sp]
 800b32e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b332:	462e      	mov	r6, r5
 800b334:	4652      	mov	r2, sl
 800b336:	462c      	mov	r4, r5
 800b338:	4630      	mov	r0, r6
 800b33a:	461d      	mov	r5, r3
 800b33c:	4639      	mov	r1, r7
 800b33e:	465b      	mov	r3, fp
 800b340:	f7f4 ffc2 	bl	80002c8 <__aeabi_dsub>
 800b344:	4602      	mov	r2, r0
 800b346:	460b      	mov	r3, r1
 800b348:	4640      	mov	r0, r8
 800b34a:	4649      	mov	r1, r9
 800b34c:	f7f4 ffbc 	bl	80002c8 <__aeabi_dsub>
 800b350:	4632      	mov	r2, r6
 800b352:	462b      	mov	r3, r5
 800b354:	f7f5 f970 	bl	8000638 <__aeabi_dmul>
 800b358:	4632      	mov	r2, r6
 800b35a:	4680      	mov	r8, r0
 800b35c:	4689      	mov	r9, r1
 800b35e:	462b      	mov	r3, r5
 800b360:	4630      	mov	r0, r6
 800b362:	4639      	mov	r1, r7
 800b364:	f7f5 f968 	bl	8000638 <__aeabi_dmul>
 800b368:	4bb4      	ldr	r3, [pc, #720]	; (800b63c <__kernel_tan+0x394>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	f7f4 ffae 	bl	80002cc <__adddf3>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	4640      	mov	r0, r8
 800b376:	4649      	mov	r1, r9
 800b378:	f7f4 ffa8 	bl	80002cc <__adddf3>
 800b37c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b380:	f7f5 f95a 	bl	8000638 <__aeabi_dmul>
 800b384:	4622      	mov	r2, r4
 800b386:	462b      	mov	r3, r5
 800b388:	f7f4 ffa0 	bl	80002cc <__adddf3>
 800b38c:	e7b5      	b.n	800b2fa <__kernel_tan+0x52>
 800b38e:	4bad      	ldr	r3, [pc, #692]	; (800b644 <__kernel_tan+0x39c>)
 800b390:	429f      	cmp	r7, r3
 800b392:	dd26      	ble.n	800b3e2 <__kernel_tan+0x13a>
 800b394:	9b00      	ldr	r3, [sp, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	da09      	bge.n	800b3ae <__kernel_tan+0x106>
 800b39a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b39e:	469b      	mov	fp, r3
 800b3a0:	ee10 aa10 	vmov	sl, s0
 800b3a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b3a8:	ee11 8a10 	vmov	r8, s2
 800b3ac:	4699      	mov	r9, r3
 800b3ae:	4652      	mov	r2, sl
 800b3b0:	465b      	mov	r3, fp
 800b3b2:	a183      	add	r1, pc, #524	; (adr r1, 800b5c0 <__kernel_tan+0x318>)
 800b3b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3b8:	f7f4 ff86 	bl	80002c8 <__aeabi_dsub>
 800b3bc:	4642      	mov	r2, r8
 800b3be:	464b      	mov	r3, r9
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	a180      	add	r1, pc, #512	; (adr r1, 800b5c8 <__kernel_tan+0x320>)
 800b3c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ca:	f7f4 ff7d 	bl	80002c8 <__aeabi_dsub>
 800b3ce:	4622      	mov	r2, r4
 800b3d0:	462b      	mov	r3, r5
 800b3d2:	f7f4 ff7b 	bl	80002cc <__adddf3>
 800b3d6:	f04f 0800 	mov.w	r8, #0
 800b3da:	4682      	mov	sl, r0
 800b3dc:	468b      	mov	fp, r1
 800b3de:	f04f 0900 	mov.w	r9, #0
 800b3e2:	4652      	mov	r2, sl
 800b3e4:	465b      	mov	r3, fp
 800b3e6:	4650      	mov	r0, sl
 800b3e8:	4659      	mov	r1, fp
 800b3ea:	f7f5 f925 	bl	8000638 <__aeabi_dmul>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	ec43 2b18 	vmov	d8, r2, r3
 800b3f6:	f7f5 f91f 	bl	8000638 <__aeabi_dmul>
 800b3fa:	ec53 2b18 	vmov	r2, r3, d8
 800b3fe:	4604      	mov	r4, r0
 800b400:	460d      	mov	r5, r1
 800b402:	4650      	mov	r0, sl
 800b404:	4659      	mov	r1, fp
 800b406:	f7f5 f917 	bl	8000638 <__aeabi_dmul>
 800b40a:	a371      	add	r3, pc, #452	; (adr r3, 800b5d0 <__kernel_tan+0x328>)
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	ec41 0b19 	vmov	d9, r0, r1
 800b414:	4620      	mov	r0, r4
 800b416:	4629      	mov	r1, r5
 800b418:	f7f5 f90e 	bl	8000638 <__aeabi_dmul>
 800b41c:	a36e      	add	r3, pc, #440	; (adr r3, 800b5d8 <__kernel_tan+0x330>)
 800b41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b422:	f7f4 ff53 	bl	80002cc <__adddf3>
 800b426:	4622      	mov	r2, r4
 800b428:	462b      	mov	r3, r5
 800b42a:	f7f5 f905 	bl	8000638 <__aeabi_dmul>
 800b42e:	a36c      	add	r3, pc, #432	; (adr r3, 800b5e0 <__kernel_tan+0x338>)
 800b430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b434:	f7f4 ff4a 	bl	80002cc <__adddf3>
 800b438:	4622      	mov	r2, r4
 800b43a:	462b      	mov	r3, r5
 800b43c:	f7f5 f8fc 	bl	8000638 <__aeabi_dmul>
 800b440:	a369      	add	r3, pc, #420	; (adr r3, 800b5e8 <__kernel_tan+0x340>)
 800b442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b446:	f7f4 ff41 	bl	80002cc <__adddf3>
 800b44a:	4622      	mov	r2, r4
 800b44c:	462b      	mov	r3, r5
 800b44e:	f7f5 f8f3 	bl	8000638 <__aeabi_dmul>
 800b452:	a367      	add	r3, pc, #412	; (adr r3, 800b5f0 <__kernel_tan+0x348>)
 800b454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b458:	f7f4 ff38 	bl	80002cc <__adddf3>
 800b45c:	4622      	mov	r2, r4
 800b45e:	462b      	mov	r3, r5
 800b460:	f7f5 f8ea 	bl	8000638 <__aeabi_dmul>
 800b464:	a364      	add	r3, pc, #400	; (adr r3, 800b5f8 <__kernel_tan+0x350>)
 800b466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46a:	f7f4 ff2f 	bl	80002cc <__adddf3>
 800b46e:	ec53 2b18 	vmov	r2, r3, d8
 800b472:	f7f5 f8e1 	bl	8000638 <__aeabi_dmul>
 800b476:	a362      	add	r3, pc, #392	; (adr r3, 800b600 <__kernel_tan+0x358>)
 800b478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47c:	ec41 0b1a 	vmov	d10, r0, r1
 800b480:	4620      	mov	r0, r4
 800b482:	4629      	mov	r1, r5
 800b484:	f7f5 f8d8 	bl	8000638 <__aeabi_dmul>
 800b488:	a35f      	add	r3, pc, #380	; (adr r3, 800b608 <__kernel_tan+0x360>)
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	f7f4 ff1d 	bl	80002cc <__adddf3>
 800b492:	4622      	mov	r2, r4
 800b494:	462b      	mov	r3, r5
 800b496:	f7f5 f8cf 	bl	8000638 <__aeabi_dmul>
 800b49a:	a35d      	add	r3, pc, #372	; (adr r3, 800b610 <__kernel_tan+0x368>)
 800b49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a0:	f7f4 ff14 	bl	80002cc <__adddf3>
 800b4a4:	4622      	mov	r2, r4
 800b4a6:	462b      	mov	r3, r5
 800b4a8:	f7f5 f8c6 	bl	8000638 <__aeabi_dmul>
 800b4ac:	a35a      	add	r3, pc, #360	; (adr r3, 800b618 <__kernel_tan+0x370>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	f7f4 ff0b 	bl	80002cc <__adddf3>
 800b4b6:	4622      	mov	r2, r4
 800b4b8:	462b      	mov	r3, r5
 800b4ba:	f7f5 f8bd 	bl	8000638 <__aeabi_dmul>
 800b4be:	a358      	add	r3, pc, #352	; (adr r3, 800b620 <__kernel_tan+0x378>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f7f4 ff02 	bl	80002cc <__adddf3>
 800b4c8:	4622      	mov	r2, r4
 800b4ca:	462b      	mov	r3, r5
 800b4cc:	f7f5 f8b4 	bl	8000638 <__aeabi_dmul>
 800b4d0:	a355      	add	r3, pc, #340	; (adr r3, 800b628 <__kernel_tan+0x380>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	f7f4 fef9 	bl	80002cc <__adddf3>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	ec51 0b1a 	vmov	r0, r1, d10
 800b4e2:	f7f4 fef3 	bl	80002cc <__adddf3>
 800b4e6:	ec53 2b19 	vmov	r2, r3, d9
 800b4ea:	f7f5 f8a5 	bl	8000638 <__aeabi_dmul>
 800b4ee:	4642      	mov	r2, r8
 800b4f0:	464b      	mov	r3, r9
 800b4f2:	f7f4 feeb 	bl	80002cc <__adddf3>
 800b4f6:	ec53 2b18 	vmov	r2, r3, d8
 800b4fa:	f7f5 f89d 	bl	8000638 <__aeabi_dmul>
 800b4fe:	4642      	mov	r2, r8
 800b500:	464b      	mov	r3, r9
 800b502:	f7f4 fee3 	bl	80002cc <__adddf3>
 800b506:	a34a      	add	r3, pc, #296	; (adr r3, 800b630 <__kernel_tan+0x388>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	4604      	mov	r4, r0
 800b50e:	460d      	mov	r5, r1
 800b510:	ec51 0b19 	vmov	r0, r1, d9
 800b514:	f7f5 f890 	bl	8000638 <__aeabi_dmul>
 800b518:	4622      	mov	r2, r4
 800b51a:	462b      	mov	r3, r5
 800b51c:	f7f4 fed6 	bl	80002cc <__adddf3>
 800b520:	460b      	mov	r3, r1
 800b522:	ec41 0b18 	vmov	d8, r0, r1
 800b526:	4602      	mov	r2, r0
 800b528:	4659      	mov	r1, fp
 800b52a:	4650      	mov	r0, sl
 800b52c:	f7f4 fece 	bl	80002cc <__adddf3>
 800b530:	4b44      	ldr	r3, [pc, #272]	; (800b644 <__kernel_tan+0x39c>)
 800b532:	429f      	cmp	r7, r3
 800b534:	4604      	mov	r4, r0
 800b536:	460d      	mov	r5, r1
 800b538:	f340 8086 	ble.w	800b648 <__kernel_tan+0x3a0>
 800b53c:	4630      	mov	r0, r6
 800b53e:	f7f5 f811 	bl	8000564 <__aeabi_i2d>
 800b542:	4622      	mov	r2, r4
 800b544:	4680      	mov	r8, r0
 800b546:	4689      	mov	r9, r1
 800b548:	462b      	mov	r3, r5
 800b54a:	4620      	mov	r0, r4
 800b54c:	4629      	mov	r1, r5
 800b54e:	f7f5 f873 	bl	8000638 <__aeabi_dmul>
 800b552:	4642      	mov	r2, r8
 800b554:	4606      	mov	r6, r0
 800b556:	460f      	mov	r7, r1
 800b558:	464b      	mov	r3, r9
 800b55a:	4620      	mov	r0, r4
 800b55c:	4629      	mov	r1, r5
 800b55e:	f7f4 feb5 	bl	80002cc <__adddf3>
 800b562:	4602      	mov	r2, r0
 800b564:	460b      	mov	r3, r1
 800b566:	4630      	mov	r0, r6
 800b568:	4639      	mov	r1, r7
 800b56a:	f7f5 f98f 	bl	800088c <__aeabi_ddiv>
 800b56e:	ec53 2b18 	vmov	r2, r3, d8
 800b572:	f7f4 fea9 	bl	80002c8 <__aeabi_dsub>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4650      	mov	r0, sl
 800b57c:	4659      	mov	r1, fp
 800b57e:	f7f4 fea3 	bl	80002c8 <__aeabi_dsub>
 800b582:	4602      	mov	r2, r0
 800b584:	460b      	mov	r3, r1
 800b586:	f7f4 fea1 	bl	80002cc <__adddf3>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	4640      	mov	r0, r8
 800b590:	4649      	mov	r1, r9
 800b592:	f7f4 fe99 	bl	80002c8 <__aeabi_dsub>
 800b596:	9b00      	ldr	r3, [sp, #0]
 800b598:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800b59c:	f00a 0a02 	and.w	sl, sl, #2
 800b5a0:	4604      	mov	r4, r0
 800b5a2:	f1ca 0001 	rsb	r0, sl, #1
 800b5a6:	460d      	mov	r5, r1
 800b5a8:	f7f4 ffdc 	bl	8000564 <__aeabi_i2d>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	4629      	mov	r1, r5
 800b5b4:	f7f5 f840 	bl	8000638 <__aeabi_dmul>
 800b5b8:	e69f      	b.n	800b2fa <__kernel_tan+0x52>
 800b5ba:	bf00      	nop
 800b5bc:	f3af 8000 	nop.w
 800b5c0:	54442d18 	.word	0x54442d18
 800b5c4:	3fe921fb 	.word	0x3fe921fb
 800b5c8:	33145c07 	.word	0x33145c07
 800b5cc:	3c81a626 	.word	0x3c81a626
 800b5d0:	74bf7ad4 	.word	0x74bf7ad4
 800b5d4:	3efb2a70 	.word	0x3efb2a70
 800b5d8:	32f0a7e9 	.word	0x32f0a7e9
 800b5dc:	3f12b80f 	.word	0x3f12b80f
 800b5e0:	1a8d1068 	.word	0x1a8d1068
 800b5e4:	3f3026f7 	.word	0x3f3026f7
 800b5e8:	fee08315 	.word	0xfee08315
 800b5ec:	3f57dbc8 	.word	0x3f57dbc8
 800b5f0:	e96e8493 	.word	0xe96e8493
 800b5f4:	3f8226e3 	.word	0x3f8226e3
 800b5f8:	1bb341fe 	.word	0x1bb341fe
 800b5fc:	3faba1ba 	.word	0x3faba1ba
 800b600:	db605373 	.word	0xdb605373
 800b604:	bef375cb 	.word	0xbef375cb
 800b608:	a03792a6 	.word	0xa03792a6
 800b60c:	3f147e88 	.word	0x3f147e88
 800b610:	f2f26501 	.word	0xf2f26501
 800b614:	3f4344d8 	.word	0x3f4344d8
 800b618:	c9560328 	.word	0xc9560328
 800b61c:	3f6d6d22 	.word	0x3f6d6d22
 800b620:	8406d637 	.word	0x8406d637
 800b624:	3f9664f4 	.word	0x3f9664f4
 800b628:	1110fe7a 	.word	0x1110fe7a
 800b62c:	3fc11111 	.word	0x3fc11111
 800b630:	55555563 	.word	0x55555563
 800b634:	3fd55555 	.word	0x3fd55555
 800b638:	3e2fffff 	.word	0x3e2fffff
 800b63c:	3ff00000 	.word	0x3ff00000
 800b640:	bff00000 	.word	0xbff00000
 800b644:	3fe59427 	.word	0x3fe59427
 800b648:	2e01      	cmp	r6, #1
 800b64a:	d02f      	beq.n	800b6ac <__kernel_tan+0x404>
 800b64c:	460f      	mov	r7, r1
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	4689      	mov	r9, r1
 800b654:	2000      	movs	r0, #0
 800b656:	4917      	ldr	r1, [pc, #92]	; (800b6b4 <__kernel_tan+0x40c>)
 800b658:	f7f5 f918 	bl	800088c <__aeabi_ddiv>
 800b65c:	2600      	movs	r6, #0
 800b65e:	e9cd 0100 	strd	r0, r1, [sp]
 800b662:	4652      	mov	r2, sl
 800b664:	465b      	mov	r3, fp
 800b666:	4630      	mov	r0, r6
 800b668:	4639      	mov	r1, r7
 800b66a:	f7f4 fe2d 	bl	80002c8 <__aeabi_dsub>
 800b66e:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b672:	4602      	mov	r2, r0
 800b674:	460b      	mov	r3, r1
 800b676:	ec51 0b18 	vmov	r0, r1, d8
 800b67a:	f7f4 fe25 	bl	80002c8 <__aeabi_dsub>
 800b67e:	4632      	mov	r2, r6
 800b680:	462b      	mov	r3, r5
 800b682:	f7f4 ffd9 	bl	8000638 <__aeabi_dmul>
 800b686:	46b0      	mov	r8, r6
 800b688:	460f      	mov	r7, r1
 800b68a:	4642      	mov	r2, r8
 800b68c:	462b      	mov	r3, r5
 800b68e:	4634      	mov	r4, r6
 800b690:	4649      	mov	r1, r9
 800b692:	4606      	mov	r6, r0
 800b694:	4640      	mov	r0, r8
 800b696:	f7f4 ffcf 	bl	8000638 <__aeabi_dmul>
 800b69a:	4b07      	ldr	r3, [pc, #28]	; (800b6b8 <__kernel_tan+0x410>)
 800b69c:	2200      	movs	r2, #0
 800b69e:	f7f4 fe15 	bl	80002cc <__adddf3>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	4639      	mov	r1, r7
 800b6aa:	e665      	b.n	800b378 <__kernel_tan+0xd0>
 800b6ac:	4682      	mov	sl, r0
 800b6ae:	468b      	mov	fp, r1
 800b6b0:	e625      	b.n	800b2fe <__kernel_tan+0x56>
 800b6b2:	bf00      	nop
 800b6b4:	bff00000 	.word	0xbff00000
 800b6b8:	3ff00000 	.word	0x3ff00000
 800b6bc:	00000000 	.word	0x00000000

0800b6c0 <floor>:
 800b6c0:	ec51 0b10 	vmov	r0, r1, d0
 800b6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b6cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b6d0:	2e13      	cmp	r6, #19
 800b6d2:	ee10 5a10 	vmov	r5, s0
 800b6d6:	ee10 8a10 	vmov	r8, s0
 800b6da:	460c      	mov	r4, r1
 800b6dc:	dc32      	bgt.n	800b744 <floor+0x84>
 800b6de:	2e00      	cmp	r6, #0
 800b6e0:	da14      	bge.n	800b70c <floor+0x4c>
 800b6e2:	a333      	add	r3, pc, #204	; (adr r3, 800b7b0 <floor+0xf0>)
 800b6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e8:	f7f4 fdf0 	bl	80002cc <__adddf3>
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	f7f5 fa32 	bl	8000b58 <__aeabi_dcmpgt>
 800b6f4:	b138      	cbz	r0, 800b706 <floor+0x46>
 800b6f6:	2c00      	cmp	r4, #0
 800b6f8:	da57      	bge.n	800b7aa <floor+0xea>
 800b6fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b6fe:	431d      	orrs	r5, r3
 800b700:	d001      	beq.n	800b706 <floor+0x46>
 800b702:	4c2d      	ldr	r4, [pc, #180]	; (800b7b8 <floor+0xf8>)
 800b704:	2500      	movs	r5, #0
 800b706:	4621      	mov	r1, r4
 800b708:	4628      	mov	r0, r5
 800b70a:	e025      	b.n	800b758 <floor+0x98>
 800b70c:	4f2b      	ldr	r7, [pc, #172]	; (800b7bc <floor+0xfc>)
 800b70e:	4137      	asrs	r7, r6
 800b710:	ea01 0307 	and.w	r3, r1, r7
 800b714:	4303      	orrs	r3, r0
 800b716:	d01f      	beq.n	800b758 <floor+0x98>
 800b718:	a325      	add	r3, pc, #148	; (adr r3, 800b7b0 <floor+0xf0>)
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	f7f4 fdd5 	bl	80002cc <__adddf3>
 800b722:	2200      	movs	r2, #0
 800b724:	2300      	movs	r3, #0
 800b726:	f7f5 fa17 	bl	8000b58 <__aeabi_dcmpgt>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d0eb      	beq.n	800b706 <floor+0x46>
 800b72e:	2c00      	cmp	r4, #0
 800b730:	bfbe      	ittt	lt
 800b732:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b736:	fa43 f606 	asrlt.w	r6, r3, r6
 800b73a:	19a4      	addlt	r4, r4, r6
 800b73c:	ea24 0407 	bic.w	r4, r4, r7
 800b740:	2500      	movs	r5, #0
 800b742:	e7e0      	b.n	800b706 <floor+0x46>
 800b744:	2e33      	cmp	r6, #51	; 0x33
 800b746:	dd0b      	ble.n	800b760 <floor+0xa0>
 800b748:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b74c:	d104      	bne.n	800b758 <floor+0x98>
 800b74e:	ee10 2a10 	vmov	r2, s0
 800b752:	460b      	mov	r3, r1
 800b754:	f7f4 fdba 	bl	80002cc <__adddf3>
 800b758:	ec41 0b10 	vmov	d0, r0, r1
 800b75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b760:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b764:	f04f 33ff 	mov.w	r3, #4294967295
 800b768:	fa23 f707 	lsr.w	r7, r3, r7
 800b76c:	4207      	tst	r7, r0
 800b76e:	d0f3      	beq.n	800b758 <floor+0x98>
 800b770:	a30f      	add	r3, pc, #60	; (adr r3, 800b7b0 <floor+0xf0>)
 800b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b776:	f7f4 fda9 	bl	80002cc <__adddf3>
 800b77a:	2200      	movs	r2, #0
 800b77c:	2300      	movs	r3, #0
 800b77e:	f7f5 f9eb 	bl	8000b58 <__aeabi_dcmpgt>
 800b782:	2800      	cmp	r0, #0
 800b784:	d0bf      	beq.n	800b706 <floor+0x46>
 800b786:	2c00      	cmp	r4, #0
 800b788:	da02      	bge.n	800b790 <floor+0xd0>
 800b78a:	2e14      	cmp	r6, #20
 800b78c:	d103      	bne.n	800b796 <floor+0xd6>
 800b78e:	3401      	adds	r4, #1
 800b790:	ea25 0507 	bic.w	r5, r5, r7
 800b794:	e7b7      	b.n	800b706 <floor+0x46>
 800b796:	2301      	movs	r3, #1
 800b798:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b79c:	fa03 f606 	lsl.w	r6, r3, r6
 800b7a0:	4435      	add	r5, r6
 800b7a2:	4545      	cmp	r5, r8
 800b7a4:	bf38      	it	cc
 800b7a6:	18e4      	addcc	r4, r4, r3
 800b7a8:	e7f2      	b.n	800b790 <floor+0xd0>
 800b7aa:	2500      	movs	r5, #0
 800b7ac:	462c      	mov	r4, r5
 800b7ae:	e7aa      	b.n	800b706 <floor+0x46>
 800b7b0:	8800759c 	.word	0x8800759c
 800b7b4:	7e37e43c 	.word	0x7e37e43c
 800b7b8:	bff00000 	.word	0xbff00000
 800b7bc:	000fffff 	.word	0x000fffff

0800b7c0 <scalbn>:
 800b7c0:	b570      	push	{r4, r5, r6, lr}
 800b7c2:	ec55 4b10 	vmov	r4, r5, d0
 800b7c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b7ca:	4606      	mov	r6, r0
 800b7cc:	462b      	mov	r3, r5
 800b7ce:	b99a      	cbnz	r2, 800b7f8 <scalbn+0x38>
 800b7d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b7d4:	4323      	orrs	r3, r4
 800b7d6:	d036      	beq.n	800b846 <scalbn+0x86>
 800b7d8:	4b39      	ldr	r3, [pc, #228]	; (800b8c0 <scalbn+0x100>)
 800b7da:	4629      	mov	r1, r5
 800b7dc:	ee10 0a10 	vmov	r0, s0
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f7f4 ff29 	bl	8000638 <__aeabi_dmul>
 800b7e6:	4b37      	ldr	r3, [pc, #220]	; (800b8c4 <scalbn+0x104>)
 800b7e8:	429e      	cmp	r6, r3
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	460d      	mov	r5, r1
 800b7ee:	da10      	bge.n	800b812 <scalbn+0x52>
 800b7f0:	a32b      	add	r3, pc, #172	; (adr r3, 800b8a0 <scalbn+0xe0>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	e03a      	b.n	800b86e <scalbn+0xae>
 800b7f8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b7fc:	428a      	cmp	r2, r1
 800b7fe:	d10c      	bne.n	800b81a <scalbn+0x5a>
 800b800:	ee10 2a10 	vmov	r2, s0
 800b804:	4620      	mov	r0, r4
 800b806:	4629      	mov	r1, r5
 800b808:	f7f4 fd60 	bl	80002cc <__adddf3>
 800b80c:	4604      	mov	r4, r0
 800b80e:	460d      	mov	r5, r1
 800b810:	e019      	b.n	800b846 <scalbn+0x86>
 800b812:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b816:	460b      	mov	r3, r1
 800b818:	3a36      	subs	r2, #54	; 0x36
 800b81a:	4432      	add	r2, r6
 800b81c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b820:	428a      	cmp	r2, r1
 800b822:	dd08      	ble.n	800b836 <scalbn+0x76>
 800b824:	2d00      	cmp	r5, #0
 800b826:	a120      	add	r1, pc, #128	; (adr r1, 800b8a8 <scalbn+0xe8>)
 800b828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b82c:	da1c      	bge.n	800b868 <scalbn+0xa8>
 800b82e:	a120      	add	r1, pc, #128	; (adr r1, 800b8b0 <scalbn+0xf0>)
 800b830:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b834:	e018      	b.n	800b868 <scalbn+0xa8>
 800b836:	2a00      	cmp	r2, #0
 800b838:	dd08      	ble.n	800b84c <scalbn+0x8c>
 800b83a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b83e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b842:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b846:	ec45 4b10 	vmov	d0, r4, r5
 800b84a:	bd70      	pop	{r4, r5, r6, pc}
 800b84c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b850:	da19      	bge.n	800b886 <scalbn+0xc6>
 800b852:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b856:	429e      	cmp	r6, r3
 800b858:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b85c:	dd0a      	ble.n	800b874 <scalbn+0xb4>
 800b85e:	a112      	add	r1, pc, #72	; (adr r1, 800b8a8 <scalbn+0xe8>)
 800b860:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1e2      	bne.n	800b82e <scalbn+0x6e>
 800b868:	a30f      	add	r3, pc, #60	; (adr r3, 800b8a8 <scalbn+0xe8>)
 800b86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86e:	f7f4 fee3 	bl	8000638 <__aeabi_dmul>
 800b872:	e7cb      	b.n	800b80c <scalbn+0x4c>
 800b874:	a10a      	add	r1, pc, #40	; (adr r1, 800b8a0 <scalbn+0xe0>)
 800b876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d0b8      	beq.n	800b7f0 <scalbn+0x30>
 800b87e:	a10e      	add	r1, pc, #56	; (adr r1, 800b8b8 <scalbn+0xf8>)
 800b880:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b884:	e7b4      	b.n	800b7f0 <scalbn+0x30>
 800b886:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b88a:	3236      	adds	r2, #54	; 0x36
 800b88c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b890:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b894:	4620      	mov	r0, r4
 800b896:	4b0c      	ldr	r3, [pc, #48]	; (800b8c8 <scalbn+0x108>)
 800b898:	2200      	movs	r2, #0
 800b89a:	e7e8      	b.n	800b86e <scalbn+0xae>
 800b89c:	f3af 8000 	nop.w
 800b8a0:	c2f8f359 	.word	0xc2f8f359
 800b8a4:	01a56e1f 	.word	0x01a56e1f
 800b8a8:	8800759c 	.word	0x8800759c
 800b8ac:	7e37e43c 	.word	0x7e37e43c
 800b8b0:	8800759c 	.word	0x8800759c
 800b8b4:	fe37e43c 	.word	0xfe37e43c
 800b8b8:	c2f8f359 	.word	0xc2f8f359
 800b8bc:	81a56e1f 	.word	0x81a56e1f
 800b8c0:	43500000 	.word	0x43500000
 800b8c4:	ffff3cb0 	.word	0xffff3cb0
 800b8c8:	3c900000 	.word	0x3c900000

0800b8cc <_close>:
 800b8cc:	4b02      	ldr	r3, [pc, #8]	; (800b8d8 <_close+0xc>)
 800b8ce:	2258      	movs	r2, #88	; 0x58
 800b8d0:	601a      	str	r2, [r3, #0]
 800b8d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d6:	4770      	bx	lr
 800b8d8:	2000077c 	.word	0x2000077c

0800b8dc <_fstat>:
 800b8dc:	4b02      	ldr	r3, [pc, #8]	; (800b8e8 <_fstat+0xc>)
 800b8de:	2258      	movs	r2, #88	; 0x58
 800b8e0:	601a      	str	r2, [r3, #0]
 800b8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8e6:	4770      	bx	lr
 800b8e8:	2000077c 	.word	0x2000077c

0800b8ec <_getpid>:
 800b8ec:	4b02      	ldr	r3, [pc, #8]	; (800b8f8 <_getpid+0xc>)
 800b8ee:	2258      	movs	r2, #88	; 0x58
 800b8f0:	601a      	str	r2, [r3, #0]
 800b8f2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f6:	4770      	bx	lr
 800b8f8:	2000077c 	.word	0x2000077c

0800b8fc <_isatty>:
 800b8fc:	4b02      	ldr	r3, [pc, #8]	; (800b908 <_isatty+0xc>)
 800b8fe:	2258      	movs	r2, #88	; 0x58
 800b900:	601a      	str	r2, [r3, #0]
 800b902:	2000      	movs	r0, #0
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	2000077c 	.word	0x2000077c

0800b90c <_kill>:
 800b90c:	4b02      	ldr	r3, [pc, #8]	; (800b918 <_kill+0xc>)
 800b90e:	2258      	movs	r2, #88	; 0x58
 800b910:	601a      	str	r2, [r3, #0]
 800b912:	f04f 30ff 	mov.w	r0, #4294967295
 800b916:	4770      	bx	lr
 800b918:	2000077c 	.word	0x2000077c

0800b91c <_lseek>:
 800b91c:	4b02      	ldr	r3, [pc, #8]	; (800b928 <_lseek+0xc>)
 800b91e:	2258      	movs	r2, #88	; 0x58
 800b920:	601a      	str	r2, [r3, #0]
 800b922:	f04f 30ff 	mov.w	r0, #4294967295
 800b926:	4770      	bx	lr
 800b928:	2000077c 	.word	0x2000077c

0800b92c <_read>:
 800b92c:	4b02      	ldr	r3, [pc, #8]	; (800b938 <_read+0xc>)
 800b92e:	2258      	movs	r2, #88	; 0x58
 800b930:	601a      	str	r2, [r3, #0]
 800b932:	f04f 30ff 	mov.w	r0, #4294967295
 800b936:	4770      	bx	lr
 800b938:	2000077c 	.word	0x2000077c

0800b93c <_sbrk>:
 800b93c:	4a04      	ldr	r2, [pc, #16]	; (800b950 <_sbrk+0x14>)
 800b93e:	6811      	ldr	r1, [r2, #0]
 800b940:	4603      	mov	r3, r0
 800b942:	b909      	cbnz	r1, 800b948 <_sbrk+0xc>
 800b944:	4903      	ldr	r1, [pc, #12]	; (800b954 <_sbrk+0x18>)
 800b946:	6011      	str	r1, [r2, #0]
 800b948:	6810      	ldr	r0, [r2, #0]
 800b94a:	4403      	add	r3, r0
 800b94c:	6013      	str	r3, [r2, #0]
 800b94e:	4770      	bx	lr
 800b950:	20000784 	.word	0x20000784
 800b954:	20000788 	.word	0x20000788

0800b958 <_write>:
 800b958:	4b02      	ldr	r3, [pc, #8]	; (800b964 <_write+0xc>)
 800b95a:	2258      	movs	r2, #88	; 0x58
 800b95c:	601a      	str	r2, [r3, #0]
 800b95e:	f04f 30ff 	mov.w	r0, #4294967295
 800b962:	4770      	bx	lr
 800b964:	2000077c 	.word	0x2000077c

0800b968 <_exit>:
 800b968:	e7fe      	b.n	800b968 <_exit>
	...

0800b96c <_init>:
 800b96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b96e:	bf00      	nop
 800b970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b972:	bc08      	pop	{r3}
 800b974:	469e      	mov	lr, r3
 800b976:	4770      	bx	lr

0800b978 <_fini>:
 800b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b97a:	bf00      	nop
 800b97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b97e:	bc08      	pop	{r3}
 800b980:	469e      	mov	lr, r3
 800b982:	4770      	bx	lr
