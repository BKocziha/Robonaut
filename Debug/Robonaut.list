
Robonaut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005988  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bac  08005bac  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005bac  08005bac  00015bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb4  08005bb4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000053c  20000078  08005c34  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08005c34  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014eb1  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002687  00000000  00000000  00034f59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  000375e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  00038898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247a2  00000000  00000000  00039a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017325  00000000  00000000  0005e212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1c02  00000000  00000000  00075537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157139  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005470  00000000  00000000  0015718c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005b40 	.word	0x08005b40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005b40 	.word	0x08005b40

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <BT_TransmitMsg>:

#include <string.h>
#include "main.h"

void BT_TransmitMsg(UART_HandleTypeDef *huart, unsigned char *msg_to_send)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
	uint32_t len = strlen((char*)msg_to_send);
 80005ce:	6838      	ldr	r0, [r7, #0]
 80005d0:	f7ff fe1e 	bl	8000210 <strlen>
 80005d4:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t*)msg_to_send, len, 100);
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	b29a      	uxth	r2, r3
 80005da:	2364      	movs	r3, #100	; 0x64
 80005dc:	6839      	ldr	r1, [r7, #0]
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f004 fa83 	bl	8004aea <HAL_UART_Transmit>
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <LS_LED_Send>:
#include "bluetooth.h"
#include <string.h>
#include <stdio.h>

void LS_LED_Send(SPI_HandleTypeDef *hspi, uint8_t *leds_on)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 80005f6:	2364      	movs	r3, #100	; 0x64
 80005f8:	2204      	movs	r2, #4
 80005fa:	6839      	ldr	r1, [r7, #0]
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f003 f9ac 	bl	800395a <HAL_SPI_Transmit>

	// Latch enable
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000608:	481a      	ldr	r0, [pc, #104]	; (8000674 <LS_LED_Send+0x88>)
 800060a:	f002 f96f 	bl	80028ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000614:	4817      	ldr	r0, [pc, #92]	; (8000674 <LS_LED_Send+0x88>)
 8000616:	f002 f969 	bl	80028ec <HAL_GPIO_WritePin>

	//Output enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2104      	movs	r1, #4
 800061e:	4816      	ldr	r0, [pc, #88]	; (8000678 <LS_LED_Send+0x8c>)
 8000620:	f002 f964 	bl	80028ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2104      	movs	r1, #4
 8000628:	4813      	ldr	r0, [pc, #76]	; (8000678 <LS_LED_Send+0x8c>)
 800062a:	f002 f95f 	bl	80028ec <HAL_GPIO_WritePin>

	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	2204      	movs	r2, #4
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f003 f990 	bl	800395a <HAL_SPI_Transmit>

	// Inf Latch enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800063a:	2201      	movs	r2, #1
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	480e      	ldr	r0, [pc, #56]	; (800067c <LS_LED_Send+0x90>)
 8000642:	f002 f953 	bl	80028ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064c:	480b      	ldr	r0, [pc, #44]	; (800067c <LS_LED_Send+0x90>)
 800064e:	f002 f94d 	bl	80028ec <HAL_GPIO_WritePin>

	// Inf Output enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000652:	2201      	movs	r2, #1
 8000654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000658:	4808      	ldr	r0, [pc, #32]	; (800067c <LS_LED_Send+0x90>)
 800065a:	f002 f947 	bl	80028ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <LS_LED_Send+0x90>)
 8000666:	f002 f941 	bl	80028ec <HAL_GPIO_WritePin>
}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40020800 	.word	0x40020800
 8000678:	40020c00 	.word	0x40020c00
 800067c:	40020000 	.word	0x40020000

08000680 <LS_ADC_ChipSelect>:
			  HAL_Delay(100);
		  }
}

void LS_ADC_ChipSelect(int CS)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	switch(CS) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	3b01      	subs	r3, #1
 800068c:	2b03      	cmp	r3, #3
 800068e:	d826      	bhi.n	80006de <LS_ADC_ChipSelect+0x5e>
 8000690:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <LS_ADC_ChipSelect+0x18>)
 8000692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000696:	bf00      	nop
 8000698:	080006a9 	.word	0x080006a9
 800069c:	080006b7 	.word	0x080006b7
 80006a0:	080006c5 	.word	0x080006c5
 80006a4:	080006d3 	.word	0x080006d3
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ae:	481a      	ldr	r0, [pc, #104]	; (8000718 <LS_ADC_ChipSelect+0x98>)
 80006b0:	f002 f91c 	bl	80028ec <HAL_GPIO_WritePin>
		break;
 80006b4:	e02c      	b.n	8000710 <LS_ADC_ChipSelect+0x90>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006bc:	4817      	ldr	r0, [pc, #92]	; (800071c <LS_ADC_ChipSelect+0x9c>)
 80006be:	f002 f915 	bl	80028ec <HAL_GPIO_WritePin>
		break;
 80006c2:	e025      	b.n	8000710 <LS_ADC_ChipSelect+0x90>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <LS_ADC_ChipSelect+0x9c>)
 80006cc:	f002 f90e 	bl	80028ec <HAL_GPIO_WritePin>
		break;
 80006d0:	e01e      	b.n	8000710 <LS_ADC_ChipSelect+0x90>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d8:	4810      	ldr	r0, [pc, #64]	; (800071c <LS_ADC_ChipSelect+0x9c>)
 80006da:	f002 f907 	bl	80028ec <HAL_GPIO_WritePin>
	default:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <LS_ADC_ChipSelect+0x98>)
 80006e6:	f002 f901 	bl	80028ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80006ea:	2201      	movs	r2, #1
 80006ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <LS_ADC_ChipSelect+0x98>)
 80006f2:	f002 f8fb 	bl	80028ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fc:	4806      	ldr	r0, [pc, #24]	; (8000718 <LS_ADC_ChipSelect+0x98>)
 80006fe:	f002 f8f5 	bl	80028ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000708:	4803      	ldr	r0, [pc, #12]	; (8000718 <LS_ADC_ChipSelect+0x98>)
 800070a:	f002 f8ef 	bl	80028ec <HAL_GPIO_WritePin>
	}
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020800 	.word	0x40020800
 800071c:	40020400 	.word	0x40020400

08000720 <LS_BT_SendData>:

void LS_BT_SendData(UART_HandleTypeDef *huart, unsigned char *BT_send_msg_buff, uint16_t *ADC_values, unsigned char *ADC_value_string)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
 800072c:	603b      	str	r3, [r7, #0]
	BT_send_msg_buff[0] = '\0';
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
	for (int k=0; k<16; k++){
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	e010      	b.n	800075c <LS_BT_SendData+0x3c>
	  sprintf((char*)ADC_value_string, "%d ", ADC_values[k]);
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4920      	ldr	r1, [pc, #128]	; (80007c8 <LS_BT_SendData+0xa8>)
 8000748:	6838      	ldr	r0, [r7, #0]
 800074a:	f004 fd6f 	bl	800522c <siprintf>
	  strcat((char*)BT_send_msg_buff, (char*)ADC_value_string);
 800074e:	6839      	ldr	r1, [r7, #0]
 8000750:	68b8      	ldr	r0, [r7, #8]
 8000752:	f004 fd8b 	bl	800526c <strcat>
	for (int k=0; k<16; k++){
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3301      	adds	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	2b0f      	cmp	r3, #15
 8000760:	ddeb      	ble.n	800073a <LS_BT_SendData+0x1a>
	}
	BT_TransmitMsg(huart, BT_send_msg_buff);
 8000762:	68b9      	ldr	r1, [r7, #8]
 8000764:	68f8      	ldr	r0, [r7, #12]
 8000766:	f7ff ff2d 	bl	80005c4 <BT_TransmitMsg>
	BT_send_msg_buff[0] = '\0';
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	for (int k=16; k<32; k++){
 8000770:	2310      	movs	r3, #16
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	e010      	b.n	8000798 <LS_BT_SendData+0x78>
	  sprintf((char*)ADC_value_string, "%d ", ADC_values[k]);
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	461a      	mov	r2, r3
 8000782:	4911      	ldr	r1, [pc, #68]	; (80007c8 <LS_BT_SendData+0xa8>)
 8000784:	6838      	ldr	r0, [r7, #0]
 8000786:	f004 fd51 	bl	800522c <siprintf>
	  strcat((char*)BT_send_msg_buff, (char*)ADC_value_string);
 800078a:	6839      	ldr	r1, [r7, #0]
 800078c:	68b8      	ldr	r0, [r7, #8]
 800078e:	f004 fd6d 	bl	800526c <strcat>
	for (int k=16; k<32; k++){
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	3301      	adds	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
 800079a:	2b1f      	cmp	r3, #31
 800079c:	ddeb      	ble.n	8000776 <LS_BT_SendData+0x56>
	}
	strcat((char*)BT_send_msg_buff, "\n\r");
 800079e:	68b8      	ldr	r0, [r7, #8]
 80007a0:	f7ff fd36 	bl	8000210 <strlen>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	4413      	add	r3, r2
 80007ac:	4a07      	ldr	r2, [pc, #28]	; (80007cc <LS_BT_SendData+0xac>)
 80007ae:	8811      	ldrh	r1, [r2, #0]
 80007b0:	7892      	ldrb	r2, [r2, #2]
 80007b2:	8019      	strh	r1, [r3, #0]
 80007b4:	709a      	strb	r2, [r3, #2]
	BT_TransmitMsg(huart, BT_send_msg_buff);
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	68f8      	ldr	r0, [r7, #12]
 80007ba:	f7ff ff03 	bl	80005c4 <BT_TransmitMsg>
}
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	08005b58 	.word	0x08005b58
 80007cc:	08005b5c 	.word	0x08005b5c

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b09e      	sub	sp, #120	; 0x78
 80007d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f001 fadb 	bl	8001d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f937 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f000 fd2b 	bl	8001238 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007e2:	f000 f9f7 	bl	8000bd4 <MX_I2C1_Init>
  MX_I2C3_Init();
 80007e6:	f000 fa51 	bl	8000c8c <MX_I2C3_Init>
  MX_SPI1_Init();
 80007ea:	f000 fa7d 	bl	8000ce8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007ee:	f000 fab1 	bl	8000d54 <MX_SPI2_Init>
  MX_SPI3_Init();
 80007f2:	f000 fae5 	bl	8000dc0 <MX_SPI3_Init>
  MX_ADC1_Init();
 80007f6:	f000 f99b 	bl	8000b30 <MX_ADC1_Init>
  MX_TIM2_Init();
 80007fa:	f000 fb19 	bl	8000e30 <MX_TIM2_Init>
  MX_TIM3_Init();
 80007fe:	f000 fb6b 	bl	8000ed8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000802:	f000 fbc3 	bl	8000f8c <MX_TIM4_Init>
  MX_TIM13_Init();
 8000806:	f000 fc75 	bl	80010f4 <MX_TIM13_Init>
  MX_TIM5_Init();
 800080a:	f000 fc19 	bl	8001040 <MX_TIM5_Init>
  MX_I2C2_Init();
 800080e:	f000 fa0f 	bl	8000c30 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8000812:	f000 fcbd 	bl	8001190 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000816:	f000 fce5 	bl	80011e4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  unsigned char ADC_value_string[10];
  uint8_t leds_on[4];// = {1, 1, 1, 1};
  uint8_t leds_off[] = {0, 0, 0, 0};
 800081a:	2300      	movs	r3, #0
 800081c:	64bb      	str	r3, [r7, #72]	; 0x48
  uint8_t leds_all_on[] = {255, 255, 255, 255};
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  uint16_t ADC_values[32];

  LS_LED_Send(&hspi3, leds_off);
 8000824:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000828:	4619      	mov	r1, r3
 800082a:	4880      	ldr	r0, [pc, #512]	; (8000a2c <main+0x25c>)
 800082c:	f7ff fede 	bl	80005ec <LS_LED_Send>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Turn on first set of LEDs
	  leds_on[0] = 1;leds_on[1] = 1;leds_on[2] = 1;leds_on[3] = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8000836:	2301      	movs	r3, #1
 8000838:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800083c:	2301      	movs	r3, #1
 800083e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8000842:	2301      	movs	r3, #1
 8000844:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	  LS_LED_Send(&hspi3, leds_on);
 8000848:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800084c:	4619      	mov	r1, r3
 800084e:	4877      	ldr	r0, [pc, #476]	; (8000a2c <main+0x25c>)
 8000850:	f7ff fecc 	bl	80005ec <LS_LED_Send>
	  HAL_Delay(10);
 8000854:	200a      	movs	r0, #10
 8000856:	f001 fb0d 	bl	8001e74 <HAL_Delay>
	  // Retrieve data from first set of ADCs
	  for (int i=1; i<5; i++)
 800085a:	2301      	movs	r3, #1
 800085c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800085e:	e022      	b.n	80008a6 <main+0xd6>
	  {
		  LS_ADC_ChipSelect(i);
 8000860:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8000862:	f7ff ff0d 	bl	8000680 <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(&hspi1, &ADC_inputs[0], ADC_received_msg, 2, 100);
 8000866:	2364      	movs	r3, #100	; 0x64
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	2302      	movs	r3, #2
 800086c:	4a70      	ldr	r2, [pc, #448]	; (8000a30 <main+0x260>)
 800086e:	4971      	ldr	r1, [pc, #452]	; (8000a34 <main+0x264>)
 8000870:	4871      	ldr	r0, [pc, #452]	; (8000a38 <main+0x268>)
 8000872:	f003 f9ae 	bl	8003bd2 <HAL_SPI_TransmitReceive>
		  ADC_values[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8000876:	4b6e      	ldr	r3, [pc, #440]	; (8000a30 <main+0x260>)
 8000878:	785b      	ldrb	r3, [r3, #1]
 800087a:	b21a      	sxth	r2, r3
 800087c:	4b6c      	ldr	r3, [pc, #432]	; (8000a30 <main+0x260>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	021b      	lsls	r3, r3, #8
 8000882:	b21b      	sxth	r3, r3
 8000884:	4313      	orrs	r3, r2
 8000886:	b21a      	sxth	r2, r3
 8000888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800088a:	3b01      	subs	r3, #1
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	b292      	uxth	r2, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	3370      	adds	r3, #112	; 0x70
 8000894:	443b      	add	r3, r7
 8000896:	f823 2c6c 	strh.w	r2, [r3, #-108]
		  LS_ADC_ChipSelect(0);
 800089a:	2000      	movs	r0, #0
 800089c:	f7ff fef0 	bl	8000680 <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 80008a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008a2:	3301      	adds	r3, #1
 80008a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80008a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	ddd9      	ble.n	8000860 <main+0x90>
	  }
	  for (int k=0; k<7; k++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80008b0:	e052      	b.n	8000958 <main+0x188>
	  {
		  leds_on[0] <<= 1;
 80008b2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		  leds_on[1] <<= 1;
 80008be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		  leds_on[2] <<= 1;
 80008ca:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		  leds_on[3] <<= 1;
 80008d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  LS_LED_Send(&hspi3, leds_on);
 80008e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008e6:	4619      	mov	r1, r3
 80008e8:	4850      	ldr	r0, [pc, #320]	; (8000a2c <main+0x25c>)
 80008ea:	f7ff fe7f 	bl	80005ec <LS_LED_Send>
		  HAL_Delay(10);
 80008ee:	200a      	movs	r0, #10
 80008f0:	f001 fac0 	bl	8001e74 <HAL_Delay>

		  //Retrieve data from the ADCs at the active LEDs
		  for (int i=1; i<5; i++)
 80008f4:	2301      	movs	r3, #1
 80008f6:	667b      	str	r3, [r7, #100]	; 0x64
 80008f8:	e028      	b.n	800094c <main+0x17c>
		  {
			  LS_ADC_ChipSelect(i);
 80008fa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80008fc:	f7ff fec0 	bl	8000680 <LS_ADC_ChipSelect>
			  HAL_SPI_TransmitReceive(&hspi1, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 8000900:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000902:	3301      	adds	r3, #1
 8000904:	4a4b      	ldr	r2, [pc, #300]	; (8000a34 <main+0x264>)
 8000906:	1899      	adds	r1, r3, r2
 8000908:	2364      	movs	r3, #100	; 0x64
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2302      	movs	r3, #2
 800090e:	4a48      	ldr	r2, [pc, #288]	; (8000a30 <main+0x260>)
 8000910:	4849      	ldr	r0, [pc, #292]	; (8000a38 <main+0x268>)
 8000912:	f003 f95e 	bl	8003bd2 <HAL_SPI_TransmitReceive>
			  ADC_values[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8000916:	4b46      	ldr	r3, [pc, #280]	; (8000a30 <main+0x260>)
 8000918:	785b      	ldrb	r3, [r3, #1]
 800091a:	b21a      	sxth	r2, r3
 800091c:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <main+0x260>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	021b      	lsls	r3, r3, #8
 8000922:	b21b      	sxth	r3, r3
 8000924:	4313      	orrs	r3, r2
 8000926:	b219      	sxth	r1, r3
 8000928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800092a:	3b01      	subs	r3, #1
 800092c:	00da      	lsls	r2, r3, #3
 800092e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000930:	4413      	add	r3, r2
 8000932:	3301      	adds	r3, #1
 8000934:	b28a      	uxth	r2, r1
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	3370      	adds	r3, #112	; 0x70
 800093a:	443b      	add	r3, r7
 800093c:	f823 2c6c 	strh.w	r2, [r3, #-108]
			  LS_ADC_ChipSelect(0);
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fe9d 	bl	8000680 <LS_ADC_ChipSelect>
		  for (int i=1; i<5; i++)
 8000946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000948:	3301      	adds	r3, #1
 800094a:	667b      	str	r3, [r7, #100]	; 0x64
 800094c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800094e:	2b04      	cmp	r3, #4
 8000950:	ddd3      	ble.n	80008fa <main+0x12a>
	  for (int k=0; k<7; k++)
 8000952:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000954:	3301      	adds	r3, #1
 8000956:	66bb      	str	r3, [r7, #104]	; 0x68
 8000958:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800095a:	2b06      	cmp	r3, #6
 800095c:	dda9      	ble.n	80008b2 <main+0xe2>





	  for (int i=1; i<5; i++)
 800095e:	2301      	movs	r3, #1
 8000960:	663b      	str	r3, [r7, #96]	; 0x60
 8000962:	e02f      	b.n	80009c4 <main+0x1f4>
	  {
		  LS_ADC_ChipSelect(i);
 8000964:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000966:	f7ff fe8b 	bl	8000680 <LS_ADC_ChipSelect>
		  for (int j=0; j<8; j++){
 800096a:	2300      	movs	r3, #0
 800096c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800096e:	e020      	b.n	80009b2 <main+0x1e2>
			  HAL_SPI_TransmitReceive(&hspi1, &ADC_inputs[j], ADC_received_msg, 2, 100);
 8000970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000972:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <main+0x264>)
 8000974:	1899      	adds	r1, r3, r2
 8000976:	2364      	movs	r3, #100	; 0x64
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	2302      	movs	r3, #2
 800097c:	4a2c      	ldr	r2, [pc, #176]	; (8000a30 <main+0x260>)
 800097e:	482e      	ldr	r0, [pc, #184]	; (8000a38 <main+0x268>)
 8000980:	f003 f927 	bl	8003bd2 <HAL_SPI_TransmitReceive>
			  ADC_values[(i-1)*8+j] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8000984:	4b2a      	ldr	r3, [pc, #168]	; (8000a30 <main+0x260>)
 8000986:	785b      	ldrb	r3, [r3, #1]
 8000988:	b21a      	sxth	r2, r3
 800098a:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <main+0x260>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21b      	sxth	r3, r3
 8000992:	4313      	orrs	r3, r2
 8000994:	b219      	sxth	r1, r3
 8000996:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000998:	3b01      	subs	r3, #1
 800099a:	00da      	lsls	r2, r3, #3
 800099c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800099e:	4413      	add	r3, r2
 80009a0:	b28a      	uxth	r2, r1
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	3370      	adds	r3, #112	; 0x70
 80009a6:	443b      	add	r3, r7
 80009a8:	f823 2c6c 	strh.w	r2, [r3, #-108]
		  for (int j=0; j<8; j++){
 80009ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009ae:	3301      	adds	r3, #1
 80009b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80009b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009b4:	2b07      	cmp	r3, #7
 80009b6:	dddb      	ble.n	8000970 <main+0x1a0>
		  }
		  LS_ADC_ChipSelect(0);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff fe61 	bl	8000680 <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 80009be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009c0:	3301      	adds	r3, #1
 80009c2:	663b      	str	r3, [r7, #96]	; 0x60
 80009c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009c6:	2b04      	cmp	r3, #4
 80009c8:	ddcc      	ble.n	8000964 <main+0x194>
	  }


	  // Valamiért egy UART Transmitban csak a 100. elemig küldi el - Miért lehet?
	  LS_LED_Send(&hspi3, leds_off);
 80009ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009ce:	4619      	mov	r1, r3
 80009d0:	4816      	ldr	r0, [pc, #88]	; (8000a2c <main+0x25c>)
 80009d2:	f7ff fe0b 	bl	80005ec <LS_LED_Send>
	  LS_BT_SendData(&huart2, BT_send_msg_buff, ADC_values, ADC_value_string);
 80009d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009da:	1d3a      	adds	r2, r7, #4
 80009dc:	4917      	ldr	r1, [pc, #92]	; (8000a3c <main+0x26c>)
 80009de:	4818      	ldr	r0, [pc, #96]	; (8000a40 <main+0x270>)
 80009e0:	f7ff fe9e 	bl	8000720 <LS_BT_SendData>
	  HAL_Delay(10);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f001 fa45 	bl	8001e74 <HAL_Delay>

	  if (buttonMessageFlag){
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <main+0x274>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f43f af1e 	beq.w	8000830 <main+0x60>
		  if(lightIsOn){
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <main+0x278>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d009      	beq.n	8000a10 <main+0x240>
			  LS_LED_Send(&hspi3, leds_off);
 80009fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a00:	4619      	mov	r1, r3
 8000a02:	480a      	ldr	r0, [pc, #40]	; (8000a2c <main+0x25c>)
 8000a04:	f7ff fdf2 	bl	80005ec <LS_LED_Send>
			  lightIsOn = false;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <main+0x278>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
 8000a0e:	e008      	b.n	8000a22 <main+0x252>
		  }
		  else{
			  LS_LED_Send(&hspi3, leds_all_on);
 8000a10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a14:	4619      	mov	r1, r3
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <main+0x25c>)
 8000a18:	f7ff fde8 	bl	80005ec <LS_LED_Send>
			  lightIsOn = true;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <main+0x278>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	701a      	strb	r2, [r3, #0]
		  }
		  buttonMessageFlag = false;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <main+0x274>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
	  leds_on[0] = 1;leds_on[1] = 1;leds_on[2] = 1;leds_on[3] = 1;
 8000a28:	e702      	b.n	8000830 <main+0x60>
 8000a2a:	bf00      	nop
 8000a2c:	20000288 	.word	0x20000288
 8000a30:	20000598 	.word	0x20000598
 8000a34:	20000000 	.word	0x20000000
 8000a38:	200001d8 	.word	0x200001d8
 8000a3c:	200004d0 	.word	0x200004d0
 8000a40:	20000448 	.word	0x20000448
 8000a44:	2000059b 	.word	0x2000059b
 8000a48:	2000059a 	.word	0x2000059a

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b094      	sub	sp, #80	; 0x50
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2234      	movs	r2, #52	; 0x34
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f004 fbde 	bl	800521c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	4b2c      	ldr	r3, [pc, #176]	; (8000b28 <SystemClock_Config+0xdc>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a2b      	ldr	r2, [pc, #172]	; (8000b28 <SystemClock_Config+0xdc>)
 8000a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a80:	4b29      	ldr	r3, [pc, #164]	; (8000b28 <SystemClock_Config+0xdc>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <SystemClock_Config+0xe0>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a25      	ldr	r2, [pc, #148]	; (8000b2c <SystemClock_Config+0xe0>)
 8000a96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a9a:	6013      	str	r3, [r2, #0]
 8000a9c:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <SystemClock_Config+0xe0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000ac0:	23b4      	movs	r3, #180	; 0xb4
 8000ac2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f002 fc19 	bl	800330c <HAL_RCC_OscConfig>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ae0:	f000 fc9a 	bl	8001418 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ae4:	f002 f878 	bl	8002bd8 <HAL_PWREx_EnableOverDrive>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000aee:	f000 fc93 	bl	8001418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	230f      	movs	r3, #15
 8000af4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af6:	2302      	movs	r3, #2
 8000af8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000afe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b08:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	2105      	movs	r1, #5
 8000b10:	4618      	mov	r0, r3
 8000b12:	f002 f8b1 	bl	8002c78 <HAL_RCC_ClockConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000b1c:	f000 fc7c 	bl	8001418 <Error_Handler>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3750      	adds	r7, #80	; 0x50
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000

08000b30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b36:	463b      	mov	r3, r7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b42:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b44:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <MX_ADC1_Init+0x9c>)
 8000b46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b50:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b56:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <MX_ADC1_Init+0xa0>)
 8000b74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000b92:	f001 f993 	bl	8001ebc <HAL_ADC_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b9c:	f000 fc3c 	bl	8001418 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bac:	463b      	mov	r3, r7
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_ADC1_Init+0x98>)
 8000bb2:	f001 f9c7 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000bbc:	f000 fc2c 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000094 	.word	0x20000094
 8000bcc:	40012000 	.word	0x40012000
 8000bd0:	0f000001 	.word	0x0f000001

08000bd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bda:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <MX_I2C1_Init+0x54>)
 8000bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000be0:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_I2C1_Init+0x58>)
 8000be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_I2C1_Init+0x50>)
 8000c12:	f001 fe9d 	bl	8002950 <HAL_I2C_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c1c:	f000 fbfc 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000dc 	.word	0x200000dc
 8000c28:	40005400 	.word	0x40005400
 8000c2c:	000186a0 	.word	0x000186a0

08000c30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c34:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <MX_I2C2_Init+0x50>)
 8000c36:	4a13      	ldr	r2, [pc, #76]	; (8000c84 <MX_I2C2_Init+0x54>)
 8000c38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_I2C2_Init+0x50>)
 8000c3c:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <MX_I2C2_Init+0x58>)
 8000c3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_I2C2_Init+0x50>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_I2C2_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_I2C2_Init+0x50>)
 8000c4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c52:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c54:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <MX_I2C2_Init+0x50>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_I2C2_Init+0x50>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <MX_I2C2_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_I2C2_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <MX_I2C2_Init+0x50>)
 8000c6e:	f001 fe6f 	bl	8002950 <HAL_I2C_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c78:	f000 fbce 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000130 	.word	0x20000130
 8000c84:	40005800 	.word	0x40005800
 8000c88:	000186a0 	.word	0x000186a0

08000c8c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_I2C3_Init+0x50>)
 8000c92:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <MX_I2C3_Init+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_I2C3_Init+0x50>)
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MX_I2C3_Init+0x58>)
 8000c9a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_I2C3_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_I2C3_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_I2C3_Init+0x50>)
 8000caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cae:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <MX_I2C3_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_I2C3_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <MX_I2C3_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_I2C3_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_I2C3_Init+0x50>)
 8000cca:	f001 fe41 	bl	8002950 <HAL_I2C_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000cd4:	f000 fba0 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000184 	.word	0x20000184
 8000ce0:	40005c00 	.word	0x40005c00
 8000ce4:	000186a0 	.word	0x000186a0

08000ce8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000cee:	4a18      	ldr	r2, [pc, #96]	; (8000d50 <MX_SPI1_Init+0x68>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000cf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d1c:	2218      	movs	r2, #24
 8000d1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d34:	220a      	movs	r2, #10
 8000d36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <MX_SPI1_Init+0x64>)
 8000d3a:	f002 fd85 	bl	8003848 <HAL_SPI_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d44:	f000 fb68 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200001d8 	.word	0x200001d8
 8000d50:	40013000 	.word	0x40013000

08000d54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000d5a:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <MX_SPI2_Init+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d66:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d78:	4b0f      	ldr	r3, [pc, #60]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000da0:	220a      	movs	r2, #10
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_SPI2_Init+0x64>)
 8000da6:	f002 fd4f 	bl	8003848 <HAL_SPI_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000db0:	f000 fb32 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20000230 	.word	0x20000230
 8000dbc:	40003800 	.word	0x40003800

08000dc0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000dc6:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <MX_SPI3_Init+0x6c>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dca:	4b17      	ldr	r3, [pc, #92]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000dcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000dd0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000dd4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dd8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000df2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000e0e:	220a      	movs	r2, #10
 8000e10:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_SPI3_Init+0x68>)
 8000e14:	f002 fd18 	bl	8003848 <HAL_SPI_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000e1e:	f000 fafb 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000288 	.word	0x20000288
 8000e2c:	40003c00 	.word	0x40003c00

08000e30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08c      	sub	sp, #48	; 0x30
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2224      	movs	r2, #36	; 0x24
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f004 f9ec 	bl	800521c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000e62:	f04f 32ff 	mov.w	r2, #4294967295
 8000e66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b1a      	ldr	r3, [pc, #104]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e74:	2301      	movs	r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000ea0:	f003 f9a2 	bl	80041e8 <HAL_TIM_Encoder_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000eaa:	f000 fab5 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <MX_TIM2_Init+0xa4>)
 8000ebc:	f003 fd4c 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ec6:	f000 faa7 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	3730      	adds	r7, #48	; 0x30
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200002e0 	.word	0x200002e0

08000ed8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ede:	f107 0320 	add.w	r3, r7, #32
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	60da      	str	r2, [r3, #12]
 8000ef4:	611a      	str	r2, [r3, #16]
 8000ef6:	615a      	str	r2, [r3, #20]
 8000ef8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <MX_TIM3_Init+0xac>)
 8000efc:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <MX_TIM3_Init+0xb0>)
 8000efe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f00:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <MX_TIM3_Init+0xac>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f06:	4b1f      	ldr	r3, [pc, #124]	; (8000f84 <MX_TIM3_Init+0xac>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <MX_TIM3_Init+0xac>)
 8000f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_TIM3_Init+0xac>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <MX_TIM3_Init+0xac>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f20:	4818      	ldr	r0, [pc, #96]	; (8000f84 <MX_TIM3_Init+0xac>)
 8000f22:	f003 f912 	bl	800414a <HAL_TIM_PWM_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f2c:	f000 fa74 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4811      	ldr	r0, [pc, #68]	; (8000f84 <MX_TIM3_Init+0xac>)
 8000f40:	f003 fd0a 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f4a:	f000 fa65 	bl	8001418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f4e:	2360      	movs	r3, #96	; 0x60
 8000f50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2204      	movs	r2, #4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4807      	ldr	r0, [pc, #28]	; (8000f84 <MX_TIM3_Init+0xac>)
 8000f66:	f003 f9e5 	bl	8004334 <HAL_TIM_PWM_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000f70:	f000 fa52 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f74:	4803      	ldr	r0, [pc, #12]	; (8000f84 <MX_TIM3_Init+0xac>)
 8000f76:	f000 fd71 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000328 	.word	0x20000328
 8000f88:	40000400 	.word	0x40000400

08000f8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f92:	f107 0320 	add.w	r3, r7, #32
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <MX_TIM4_Init+0xac>)
 8000fb0:	4a22      	ldr	r2, [pc, #136]	; (800103c <MX_TIM4_Init+0xb0>)
 8000fb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <MX_TIM4_Init+0xac>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_TIM4_Init+0xac>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_TIM4_Init+0xac>)
 8000fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <MX_TIM4_Init+0xac>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_TIM4_Init+0xac>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fd4:	4818      	ldr	r0, [pc, #96]	; (8001038 <MX_TIM4_Init+0xac>)
 8000fd6:	f003 f8b8 	bl	800414a <HAL_TIM_PWM_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000fe0:	f000 fa1a 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fec:	f107 0320 	add.w	r3, r7, #32
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4811      	ldr	r0, [pc, #68]	; (8001038 <MX_TIM4_Init+0xac>)
 8000ff4:	f003 fcb0 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000ffe:	f000 fa0b 	bl	8001418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001002:	2360      	movs	r3, #96	; 0x60
 8001004:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	4619      	mov	r1, r3
 8001018:	4807      	ldr	r0, [pc, #28]	; (8001038 <MX_TIM4_Init+0xac>)
 800101a:	f003 f98b 	bl	8004334 <HAL_TIM_PWM_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001024:	f000 f9f8 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <MX_TIM4_Init+0xac>)
 800102a:	f000 fd17 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	; 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000370 	.word	0x20000370
 800103c:	40000800 	.word	0x40000800

08001040 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
 800105e:	615a      	str	r2, [r3, #20]
 8001060:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001062:	4b22      	ldr	r3, [pc, #136]	; (80010ec <MX_TIM5_Init+0xac>)
 8001064:	4a22      	ldr	r2, [pc, #136]	; (80010f0 <MX_TIM5_Init+0xb0>)
 8001066:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <MX_TIM5_Init+0xac>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106e:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MX_TIM5_Init+0xac>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001074:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <MX_TIM5_Init+0xac>)
 8001076:	f04f 32ff 	mov.w	r2, #4294967295
 800107a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_TIM5_Init+0xac>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_TIM5_Init+0xac>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001088:	4818      	ldr	r0, [pc, #96]	; (80010ec <MX_TIM5_Init+0xac>)
 800108a:	f003 f85e 	bl	800414a <HAL_TIM_PWM_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001094:	f000 f9c0 	bl	8001418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010a0:	f107 0320 	add.w	r3, r7, #32
 80010a4:	4619      	mov	r1, r3
 80010a6:	4811      	ldr	r0, [pc, #68]	; (80010ec <MX_TIM5_Init+0xac>)
 80010a8:	f003 fc56 	bl	8004958 <HAL_TIMEx_MasterConfigSynchronization>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80010b2:	f000 f9b1 	bl	8001418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b6:	2360      	movs	r3, #96	; 0x60
 80010b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4807      	ldr	r0, [pc, #28]	; (80010ec <MX_TIM5_Init+0xac>)
 80010ce:	f003 f931 	bl	8004334 <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80010d8:	f000 f99e 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <MX_TIM5_Init+0xac>)
 80010de:	f000 fcbd 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200003b8 	.word	0x200003b8
 80010f0:	40000c00 	.word	0x40000c00

080010f4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
 8001108:	615a      	str	r2, [r3, #20]
 800110a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800110c:	4b1e      	ldr	r3, [pc, #120]	; (8001188 <MX_TIM13_Init+0x94>)
 800110e:	4a1f      	ldr	r2, [pc, #124]	; (800118c <MX_TIM13_Init+0x98>)
 8001110:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <MX_TIM13_Init+0x94>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_TIM13_Init+0x94>)
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_TIM13_Init+0x94>)
 8001120:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001124:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <MX_TIM13_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_TIM13_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001132:	4815      	ldr	r0, [pc, #84]	; (8001188 <MX_TIM13_Init+0x94>)
 8001134:	f002 ffba 	bl	80040ac <HAL_TIM_Base_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800113e:	f000 f96b 	bl	8001418 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001142:	4811      	ldr	r0, [pc, #68]	; (8001188 <MX_TIM13_Init+0x94>)
 8001144:	f003 f801 	bl	800414a <HAL_TIM_PWM_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800114e:	f000 f963 	bl	8001418 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001152:	2360      	movs	r3, #96	; 0x60
 8001154:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	4619      	mov	r1, r3
 8001168:	4807      	ldr	r0, [pc, #28]	; (8001188 <MX_TIM13_Init+0x94>)
 800116a:	f003 f8e3 	bl	8004334 <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001174:	f000 f950 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001178:	4803      	ldr	r0, [pc, #12]	; (8001188 <MX_TIM13_Init+0x94>)
 800117a:	f000 fc6f 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000400 	.word	0x20000400
 800118c:	40001c00 	.word	0x40001c00

08001190 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_USART2_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 800119c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c8:	f003 fc42 	bl	8004a50 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011d2:	f000 f921 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000448 	.word	0x20000448
 80011e0:	40004400 	.word	0x40004400

080011e4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_USART6_UART_Init+0x4c>)
 80011ea:	4a12      	ldr	r2, [pc, #72]	; (8001234 <MX_USART6_UART_Init+0x50>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <MX_USART6_UART_Init+0x4c>)
 80011f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <MX_USART6_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_USART6_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <MX_USART6_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_USART6_UART_Init+0x4c>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <MX_USART6_UART_Init+0x4c>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b06      	ldr	r3, [pc, #24]	; (8001230 <MX_USART6_UART_Init+0x4c>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART6_UART_Init+0x4c>)
 800121c:	f003 fc18 	bl	8004a50 <HAL_UART_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001226:	f000 f8f7 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000048c 	.word	0x2000048c
 8001234:	40011400 	.word	0x40011400

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	4b64      	ldr	r3, [pc, #400]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a63      	ldr	r2, [pc, #396]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b5d      	ldr	r3, [pc, #372]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a5c      	ldr	r2, [pc, #368]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 8001274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b5a      	ldr	r3, [pc, #360]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a55      	ldr	r2, [pc, #340]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b53      	ldr	r3, [pc, #332]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a4e      	ldr	r2, [pc, #312]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b48      	ldr	r3, [pc, #288]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a47      	ldr	r2, [pc, #284]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b45      	ldr	r3, [pc, #276]	; (80013e4 <MX_GPIO_Init+0x1ac>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 80012da:	2200      	movs	r2, #0
 80012dc:	f24d 0107 	movw	r1, #53255	; 0xd007
 80012e0:	4841      	ldr	r0, [pc, #260]	; (80013e8 <MX_GPIO_Init+0x1b0>)
 80012e2:	f001 fb03 	bl	80028ec <HAL_GPIO_WritePin>
                          |AD_CS3_Pin|AD_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_CS1_Pin|LED_LE_Pin, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80012ec:	483f      	ldr	r0, [pc, #252]	; (80013ec <MX_GPIO_Init+0x1b4>)
 80012ee:	f001 fafd 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 80012f8:	483d      	ldr	r0, [pc, #244]	; (80013f0 <MX_GPIO_Init+0x1b8>)
 80012fa:	f001 faf7 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	2104      	movs	r1, #4
 8001302:	483c      	ldr	r0, [pc, #240]	; (80013f4 <MX_GPIO_Init+0x1bc>)
 8001304:	f001 faf2 	bl	80028ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800130e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	4833      	ldr	r0, [pc, #204]	; (80013ec <MX_GPIO_Init+0x1b4>)
 8001320:	f001 f950 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_PWR_FB_Pin */
  GPIO_InitStruct.Pin = DRV_PWR_FB_Pin;
 8001324:	2310      	movs	r3, #16
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_PWR_FB_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	482d      	ldr	r0, [pc, #180]	; (80013ec <MX_GPIO_Init+0x1b4>)
 8001338:	f001 f944 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_XSDN_36_Pin ToF_XSDN_25_Pin ToF_XSDN_14_Pin AD_CS4_Pin
                           AD_CS3_Pin AD_CS2_Pin */
  GPIO_InitStruct.Pin = ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 800133c:	f24d 0307 	movw	r3, #53255	; 0xd007
 8001340:	617b      	str	r3, [r7, #20]
                          |AD_CS3_Pin|AD_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4824      	ldr	r0, [pc, #144]	; (80013e8 <MX_GPIO_Init+0x1b0>)
 8001356:	f001 f935 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_CS1_Pin LED_LE_Pin */
  GPIO_InitStruct.Pin = AD_CS1_Pin|LED_LE_Pin;
 800135a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800135e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	481e      	ldr	r0, [pc, #120]	; (80013ec <MX_GPIO_Init+0x1b4>)
 8001374:	f001 f926 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INF_LE_Pin INF_OE_Pin DRV_EN_Pin */
  GPIO_InitStruct.Pin = INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin;
 8001378:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	4619      	mov	r1, r3
 8001390:	4817      	ldr	r0, [pc, #92]	; (80013f0 <MX_GPIO_Init+0x1b8>)
 8001392:	f001 f917 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_FB_Pin */
  GPIO_InitStruct.Pin = DRV_EN_FB_Pin;
 8001396:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_EN_FB_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4811      	ldr	r0, [pc, #68]	; (80013f0 <MX_GPIO_Init+0x1b8>)
 80013ac:	f001 f90a 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_OE_Pin;
 80013b0:	2304      	movs	r3, #4
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OE_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	480b      	ldr	r0, [pc, #44]	; (80013f4 <MX_GPIO_Init+0x1bc>)
 80013c8:	f001 f8fc 	bl	80025c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2028      	movs	r0, #40	; 0x28
 80013d2:	f001 f8c0 	bl	8002556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d6:	2028      	movs	r0, #40	; 0x28
 80013d8:	f001 f8d9 	bl	800258e <HAL_NVIC_EnableIRQ>

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020c00 	.word	0x40020c00

080013f8 <HAL_GPIO_EXTI_Callback>:
//{
//	  BTMessageFlag = true;
//	  BT_ReceiveMsg(&huart2, BT_received_msg);
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
	buttonMessageFlag = true;
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001404:	2201      	movs	r2, #1
 8001406:	701a      	strb	r2, [r3, #0]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	2000059b 	.word	0x2000059b

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800141c:	b672      	cpsid	i
}
 800141e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001420:	e7fe      	b.n	8001420 <Error_Handler+0x8>
	...

08001424 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <HAL_MspInit+0x4c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	4a0f      	ldr	r2, [pc, #60]	; (8001470 <HAL_MspInit+0x4c>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001438:	6453      	str	r3, [r2, #68]	; 0x44
 800143a:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <HAL_MspInit+0x4c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <HAL_MspInit+0x4c>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	4a08      	ldr	r2, [pc, #32]	; (8001470 <HAL_MspInit+0x4c>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6413      	str	r3, [r2, #64]	; 0x40
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_MspInit+0x4c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001462:	2007      	movs	r0, #7
 8001464:	f001 f86c 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800

08001474 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <HAL_ADC_MspInit+0x7c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d127      	bne.n	80014e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <HAL_ADC_MspInit+0x80>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <HAL_ADC_MspInit+0x80>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_ADC_MspInit+0x80>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <HAL_ADC_MspInit+0x80>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <HAL_ADC_MspInit+0x80>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_ADC_MspInit+0x80>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IMotor_Pin|UBatt_Pin;
 80014ce:	2312      	movs	r3, #18
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d2:	2303      	movs	r3, #3
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4805      	ldr	r0, [pc, #20]	; (80014f8 <HAL_ADC_MspInit+0x84>)
 80014e2:	f001 f86f 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014e6:	bf00      	nop
 80014e8:	3728      	adds	r7, #40	; 0x28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40012000 	.word	0x40012000
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000

080014fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	; 0x38
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a5c      	ldr	r2, [pc, #368]	; (800168c <HAL_I2C_MspInit+0x190>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d12d      	bne.n	800157a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
 8001522:	4b5b      	ldr	r3, [pc, #364]	; (8001690 <HAL_I2C_MspInit+0x194>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a5a      	ldr	r2, [pc, #360]	; (8001690 <HAL_I2C_MspInit+0x194>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b58      	ldr	r3, [pc, #352]	; (8001690 <HAL_I2C_MspInit+0x194>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	623b      	str	r3, [r7, #32]
 8001538:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800153a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001540:	2312      	movs	r3, #18
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800154c:	2304      	movs	r3, #4
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	484f      	ldr	r0, [pc, #316]	; (8001694 <HAL_I2C_MspInit+0x198>)
 8001558:	f001 f834 	bl	80025c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <HAL_I2C_MspInit+0x194>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a4a      	ldr	r2, [pc, #296]	; (8001690 <HAL_I2C_MspInit+0x194>)
 8001566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
 800156c:	4b48      	ldr	r3, [pc, #288]	; (8001690 <HAL_I2C_MspInit+0x194>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001578:	e083      	b.n	8001682 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a46      	ldr	r2, [pc, #280]	; (8001698 <HAL_I2C_MspInit+0x19c>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d12d      	bne.n	80015e0 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	4b41      	ldr	r3, [pc, #260]	; (8001690 <HAL_I2C_MspInit+0x194>)
 800158a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158c:	4a40      	ldr	r2, [pc, #256]	; (8001690 <HAL_I2C_MspInit+0x194>)
 800158e:	f043 0302 	orr.w	r3, r3, #2
 8001592:	6313      	str	r3, [r2, #48]	; 0x30
 8001594:	4b3e      	ldr	r3, [pc, #248]	; (8001690 <HAL_I2C_MspInit+0x194>)
 8001596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80015a0:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a6:	2312      	movs	r3, #18
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015b2:	2304      	movs	r3, #4
 80015b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ba:	4619      	mov	r1, r3
 80015bc:	4835      	ldr	r0, [pc, #212]	; (8001694 <HAL_I2C_MspInit+0x198>)
 80015be:	f001 f801 	bl	80025c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <HAL_I2C_MspInit+0x194>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a31      	ldr	r2, [pc, #196]	; (8001690 <HAL_I2C_MspInit+0x194>)
 80015cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b2f      	ldr	r3, [pc, #188]	; (8001690 <HAL_I2C_MspInit+0x194>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	697b      	ldr	r3, [r7, #20]
}
 80015de:	e050      	b.n	8001682 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a2d      	ldr	r2, [pc, #180]	; (800169c <HAL_I2C_MspInit+0x1a0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d14b      	bne.n	8001682 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b28      	ldr	r3, [pc, #160]	; (8001690 <HAL_I2C_MspInit+0x194>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a27      	ldr	r2, [pc, #156]	; (8001690 <HAL_I2C_MspInit+0x194>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b25      	ldr	r3, [pc, #148]	; (8001690 <HAL_I2C_MspInit+0x194>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b21      	ldr	r3, [pc, #132]	; (8001690 <HAL_I2C_MspInit+0x194>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a20      	ldr	r2, [pc, #128]	; (8001690 <HAL_I2C_MspInit+0x194>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <HAL_I2C_MspInit+0x194>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001628:	2312      	movs	r3, #18
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001634:	2304      	movs	r3, #4
 8001636:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	4619      	mov	r1, r3
 800163e:	4818      	ldr	r0, [pc, #96]	; (80016a0 <HAL_I2C_MspInit+0x1a4>)
 8001640:	f000 ffc0 	bl	80025c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001644:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164a:	2312      	movs	r3, #18
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001656:	2304      	movs	r3, #4
 8001658:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165e:	4619      	mov	r1, r3
 8001660:	4810      	ldr	r0, [pc, #64]	; (80016a4 <HAL_I2C_MspInit+0x1a8>)
 8001662:	f000 ffaf 	bl	80025c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <HAL_I2C_MspInit+0x194>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a08      	ldr	r2, [pc, #32]	; (8001690 <HAL_I2C_MspInit+0x194>)
 8001670:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_I2C_MspInit+0x194>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
}
 8001682:	bf00      	nop
 8001684:	3738      	adds	r7, #56	; 0x38
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40005400 	.word	0x40005400
 8001690:	40023800 	.word	0x40023800
 8001694:	40020400 	.word	0x40020400
 8001698:	40005800 	.word	0x40005800
 800169c:	40005c00 	.word	0x40005c00
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40020000 	.word	0x40020000

080016a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b090      	sub	sp, #64	; 0x40
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a72      	ldr	r2, [pc, #456]	; (8001890 <HAL_SPI_MspInit+0x1e8>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d14a      	bne.n	8001760 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80016ce:	4b71      	ldr	r3, [pc, #452]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a70      	ldr	r2, [pc, #448]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 80016d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b6e      	ldr	r3, [pc, #440]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016e4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
 80016ea:	4b6a      	ldr	r3, [pc, #424]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a69      	ldr	r2, [pc, #420]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b67      	ldr	r3, [pc, #412]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
 8001706:	4b63      	ldr	r3, [pc, #396]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a62      	ldr	r2, [pc, #392]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 800170c:	f043 0302 	orr.w	r3, r3, #2
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b60      	ldr	r3, [pc, #384]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	623b      	str	r3, [r7, #32]
 800171c:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800171e:	23a0      	movs	r3, #160	; 0xa0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800172e:	2305      	movs	r3, #5
 8001730:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001736:	4619      	mov	r1, r3
 8001738:	4857      	ldr	r0, [pc, #348]	; (8001898 <HAL_SPI_MspInit+0x1f0>)
 800173a:	f000 ff43 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800173e:	2310      	movs	r3, #16
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800174e:	2305      	movs	r3, #5
 8001750:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001756:	4619      	mov	r1, r3
 8001758:	4850      	ldr	r0, [pc, #320]	; (800189c <HAL_SPI_MspInit+0x1f4>)
 800175a:	f000 ff33 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800175e:	e092      	b.n	8001886 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a4e      	ldr	r2, [pc, #312]	; (80018a0 <HAL_SPI_MspInit+0x1f8>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d15b      	bne.n	8001822 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	4b49      	ldr	r3, [pc, #292]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a48      	ldr	r2, [pc, #288]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 8001774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b46      	ldr	r3, [pc, #280]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	4b42      	ldr	r3, [pc, #264]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a41      	ldr	r2, [pc, #260]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 8001790:	f043 0304 	orr.w	r3, r3, #4
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b3f      	ldr	r3, [pc, #252]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	4b3b      	ldr	r3, [pc, #236]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a3a      	ldr	r2, [pc, #232]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b38      	ldr	r3, [pc, #224]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017be:	2302      	movs	r3, #2
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80017ce:	2307      	movs	r3, #7
 80017d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d6:	4619      	mov	r1, r3
 80017d8:	4832      	ldr	r0, [pc, #200]	; (80018a4 <HAL_SPI_MspInit+0x1fc>)
 80017da:	f000 fef3 	bl	80025c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017de:	2304      	movs	r3, #4
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ee:	2305      	movs	r3, #5
 80017f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f6:	4619      	mov	r1, r3
 80017f8:	482a      	ldr	r0, [pc, #168]	; (80018a4 <HAL_SPI_MspInit+0x1fc>)
 80017fa:	f000 fee3 	bl	80025c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001810:	2305      	movs	r3, #5
 8001812:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001818:	4619      	mov	r1, r3
 800181a:	4820      	ldr	r0, [pc, #128]	; (800189c <HAL_SPI_MspInit+0x1f4>)
 800181c:	f000 fed2 	bl	80025c4 <HAL_GPIO_Init>
}
 8001820:	e031      	b.n	8001886 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <HAL_SPI_MspInit+0x200>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d12c      	bne.n	8001886 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	4a17      	ldr	r2, [pc, #92]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 8001836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183a:	6413      	str	r3, [r2, #64]	; 0x40
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 8001852:	f043 0304 	orr.w	r3, r3, #4
 8001856:	6313      	str	r3, [r2, #48]	; 0x30
 8001858:	4b0e      	ldr	r3, [pc, #56]	; (8001894 <HAL_SPI_MspInit+0x1ec>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001864:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001876:	2306      	movs	r3, #6
 8001878:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800187e:	4619      	mov	r1, r3
 8001880:	4808      	ldr	r0, [pc, #32]	; (80018a4 <HAL_SPI_MspInit+0x1fc>)
 8001882:	f000 fe9f 	bl	80025c4 <HAL_GPIO_Init>
}
 8001886:	bf00      	nop
 8001888:	3740      	adds	r7, #64	; 0x40
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40013000 	.word	0x40013000
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000
 800189c:	40020400 	.word	0x40020400
 80018a0:	40003800 	.word	0x40003800
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40003c00 	.word	0x40003c00

080018ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018cc:	d14b      	bne.n	8001966 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
 80018d2:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_TIM_Encoder_MspInit+0xc4>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	4a26      	ldr	r2, [pc, #152]	; (8001970 <HAL_TIM_Encoder_MspInit+0xc4>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6413      	str	r3, [r2, #64]	; 0x40
 80018de:	4b24      	ldr	r3, [pc, #144]	; (8001970 <HAL_TIM_Encoder_MspInit+0xc4>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
 80018e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_TIM_Encoder_MspInit+0xc4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_TIM_Encoder_MspInit+0xc4>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <HAL_TIM_Encoder_MspInit+0xc4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_TIM_Encoder_MspInit+0xc4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a18      	ldr	r2, [pc, #96]	; (8001970 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin;
 8001922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001934:	2301      	movs	r3, #1
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001940:	f000 fe40 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_B_Pin;
 8001944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001956:	2301      	movs	r3, #1
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	4619      	mov	r1, r3
 8001960:	4805      	ldr	r0, [pc, #20]	; (8001978 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001962:	f000 fe2f 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001966:	bf00      	nop
 8001968:	3728      	adds	r7, #40	; 0x28
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40020000 	.word	0x40020000
 8001978:	40020400 	.word	0x40020400

0800197c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <HAL_TIM_PWM_MspInit+0x8c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10e      	bne.n	80019ac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_TIM_PWM_MspInit+0x90>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_TIM_PWM_MspInit+0x90>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	6413      	str	r3, [r2, #64]	; 0x40
 800199e:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_TIM_PWM_MspInit+0x90>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019aa:	e026      	b.n	80019fa <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <HAL_TIM_PWM_MspInit+0x94>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10e      	bne.n	80019d4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_TIM_PWM_MspInit+0x90>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <HAL_TIM_PWM_MspInit+0x90>)
 80019c0:	f043 0304 	orr.w	r3, r3, #4
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_TIM_PWM_MspInit+0x90>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	613b      	str	r3, [r7, #16]
 80019d0:	693b      	ldr	r3, [r7, #16]
}
 80019d2:	e012      	b.n	80019fa <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0e      	ldr	r2, [pc, #56]	; (8001a14 <HAL_TIM_PWM_MspInit+0x98>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d10d      	bne.n	80019fa <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_TIM_PWM_MspInit+0x90>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <HAL_TIM_PWM_MspInit+0x90>)
 80019e8:	f043 0308 	orr.w	r3, r3, #8
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <HAL_TIM_PWM_MspInit+0x90>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
}
 80019fa:	bf00      	nop
 80019fc:	371c      	adds	r7, #28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40000800 	.word	0x40000800
 8001a14:	40000c00 	.word	0x40000c00

08001a18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0b      	ldr	r2, [pc, #44]	; (8001a54 <HAL_TIM_Base_MspInit+0x3c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10d      	bne.n	8001a46 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_TIM_Base_MspInit+0x40>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_TIM_Base_MspInit+0x40>)
 8001a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_TIM_Base_MspInit+0x40>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40001c00 	.word	0x40001c00
 8001a58:	40023800 	.word	0x40023800

08001a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08c      	sub	sp, #48	; 0x30
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a48      	ldr	r2, [pc, #288]	; (8001b9c <HAL_TIM_MspPostInit+0x140>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d11e      	bne.n	8001abc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61bb      	str	r3, [r7, #24]
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_TIM_MspPostInit+0x144>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a46      	ldr	r2, [pc, #280]	; (8001ba0 <HAL_TIM_MspPostInit+0x144>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b44      	ldr	r3, [pc, #272]	; (8001ba0 <HAL_TIM_MspPostInit+0x144>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	61bb      	str	r3, [r7, #24]
 8001a98:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_PMW1_Pin;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PMW1_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	483b      	ldr	r0, [pc, #236]	; (8001ba4 <HAL_TIM_MspPostInit+0x148>)
 8001ab6:	f000 fd85 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001aba:	e06a      	b.n	8001b92 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a39      	ldr	r2, [pc, #228]	; (8001ba8 <HAL_TIM_MspPostInit+0x14c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d11e      	bne.n	8001b04 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	4b35      	ldr	r3, [pc, #212]	; (8001ba0 <HAL_TIM_MspPostInit+0x144>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a34      	ldr	r2, [pc, #208]	; (8001ba0 <HAL_TIM_MspPostInit+0x144>)
 8001ad0:	f043 0302 	orr.w	r3, r3, #2
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b32      	ldr	r3, [pc, #200]	; (8001ba0 <HAL_TIM_MspPostInit+0x144>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DRV_PWM2_Pin;
 8001ae2:	2340      	movs	r3, #64	; 0x40
 8001ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001af2:	2302      	movs	r3, #2
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PWM2_GPIO_Port, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	4829      	ldr	r0, [pc, #164]	; (8001ba4 <HAL_TIM_MspPostInit+0x148>)
 8001afe:	f000 fd61 	bl	80025c4 <HAL_GPIO_Init>
}
 8001b02:	e046      	b.n	8001b92 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a28      	ldr	r2, [pc, #160]	; (8001bac <HAL_TIM_MspPostInit+0x150>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d11e      	bne.n	8001b4c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <HAL_TIM_MspPostInit+0x144>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <HAL_TIM_MspPostInit+0x144>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_TIM_MspPostInit+0x144>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM2_Pin;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM2_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	481a      	ldr	r0, [pc, #104]	; (8001bb0 <HAL_TIM_MspPostInit+0x154>)
 8001b46:	f000 fd3d 	bl	80025c4 <HAL_GPIO_Init>
}
 8001b4a:	e022      	b.n	8001b92 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM13)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_TIM_MspPostInit+0x158>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d11d      	bne.n	8001b92 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_TIM_MspPostInit+0x144>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <HAL_TIM_MspPostInit+0x144>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_TIM_MspPostInit+0x144>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM_Pin;
 8001b72:	2340      	movs	r3, #64	; 0x40
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001b82:	2309      	movs	r3, #9
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4808      	ldr	r0, [pc, #32]	; (8001bb0 <HAL_TIM_MspPostInit+0x154>)
 8001b8e:	f000 fd19 	bl	80025c4 <HAL_GPIO_Init>
}
 8001b92:	bf00      	nop
 8001b94:	3730      	adds	r7, #48	; 0x30
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40000800 	.word	0x40000800
 8001bac:	40000c00 	.word	0x40000c00
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	40001c00 	.word	0x40001c00

08001bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	; 0x30
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 031c 	add.w	r3, r7, #28
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <HAL_UART_MspInit+0xe8>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12c      	bne.n	8001c34 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
 8001bde:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_UART_MspInit+0xec>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a30      	ldr	r2, [pc, #192]	; (8001ca4 <HAL_UART_MspInit+0xec>)
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <HAL_UART_MspInit+0xec>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	61bb      	str	r3, [r7, #24]
 8001bf4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_UART_MspInit+0xec>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a29      	ldr	r2, [pc, #164]	; (8001ca4 <HAL_UART_MspInit+0xec>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <HAL_UART_MspInit+0xec>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c12:	230c      	movs	r3, #12
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c22:	2307      	movs	r3, #7
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	481e      	ldr	r0, [pc, #120]	; (8001ca8 <HAL_UART_MspInit+0xf0>)
 8001c2e:	f000 fcc9 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c32:	e030      	b.n	8001c96 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_UART_MspInit+0xf4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d12b      	bne.n	8001c96 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_UART_MspInit+0xec>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	4a17      	ldr	r2, [pc, #92]	; (8001ca4 <HAL_UART_MspInit+0xec>)
 8001c48:	f043 0320 	orr.w	r3, r3, #32
 8001c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_UART_MspInit+0xec>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_UART_MspInit+0xec>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a10      	ldr	r2, [pc, #64]	; (8001ca4 <HAL_UART_MspInit+0xec>)
 8001c64:	f043 0304 	orr.w	r3, r3, #4
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <HAL_UART_MspInit+0xec>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0304 	and.w	r3, r3, #4
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|RADIO_RX_Pin;
 8001c76:	23c0      	movs	r3, #192	; 0xc0
 8001c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c86:	2308      	movs	r3, #8
 8001c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8a:	f107 031c 	add.w	r3, r7, #28
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4807      	ldr	r0, [pc, #28]	; (8001cb0 <HAL_UART_MspInit+0xf8>)
 8001c92:	f000 fc97 	bl	80025c4 <HAL_GPIO_Init>
}
 8001c96:	bf00      	nop
 8001c98:	3730      	adds	r7, #48	; 0x30
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40004400 	.word	0x40004400
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	40011400 	.word	0x40011400
 8001cb0:	40020800 	.word	0x40020800

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 f898 	bl	8001e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d10:	f000 fe06 	bl	8002920 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <SystemInit+0x20>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <SystemInit+0x20>)
 8001d24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d40:	480d      	ldr	r0, [pc, #52]	; (8001d78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d42:	490e      	ldr	r1, [pc, #56]	; (8001d7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d44:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d48:	e002      	b.n	8001d50 <LoopCopyDataInit>

08001d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d4e:	3304      	adds	r3, #4

08001d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d54:	d3f9      	bcc.n	8001d4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d58:	4c0b      	ldr	r4, [pc, #44]	; (8001d88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d5c:	e001      	b.n	8001d62 <LoopFillZerobss>

08001d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d60:	3204      	adds	r2, #4

08001d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d64:	d3fb      	bcc.n	8001d5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d66:	f7ff ffd7 	bl	8001d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d6a:	f003 fa33 	bl	80051d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d6e:	f7fe fd2f 	bl	80007d0 <main>
  bx  lr    
 8001d72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d80:	08005bbc 	.word	0x08005bbc
  ldr r2, =_sbss
 8001d84:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d88:	200005b4 	.word	0x200005b4

08001d8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC_IRQHandler>
	...

08001d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_Init+0x40>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <HAL_Init+0x40>)
 8001d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da0:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0a      	ldr	r2, [pc, #40]	; (8001dd0 <HAL_Init+0x40>)
 8001da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dac:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a07      	ldr	r2, [pc, #28]	; (8001dd0 <HAL_Init+0x40>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db8:	2003      	movs	r0, #3
 8001dba:	f000 fbc1 	bl	8002540 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f000 f808 	bl	8001dd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc4:	f7ff fb2e 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023c00 	.word	0x40023c00

08001dd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ddc:	4b12      	ldr	r3, [pc, #72]	; (8001e28 <HAL_InitTick+0x54>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	4b12      	ldr	r3, [pc, #72]	; (8001e2c <HAL_InitTick+0x58>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 fbd9 	bl	80025aa <HAL_SYSTICK_Config>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e00e      	b.n	8001e20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b0f      	cmp	r3, #15
 8001e06:	d80a      	bhi.n	8001e1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e10:	f000 fba1 	bl	8002556 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e14:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <HAL_InitTick+0x5c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e000      	b.n	8001e20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000008 	.word	0x20000008
 8001e2c:	20000010 	.word	0x20000010
 8001e30:	2000000c 	.word	0x2000000c

08001e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_IncTick+0x20>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_IncTick+0x24>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_IncTick+0x24>)
 8001e46:	6013      	str	r3, [r2, #0]
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000010 	.word	0x20000010
 8001e58:	2000059c 	.word	0x2000059c

08001e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_GetTick+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	2000059c 	.word	0x2000059c

08001e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff ffee 	bl	8001e5c <HAL_GetTick>
 8001e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d005      	beq.n	8001e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <HAL_Delay+0x44>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e9a:	bf00      	nop
 8001e9c:	f7ff ffde 	bl	8001e5c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d8f7      	bhi.n	8001e9c <HAL_Delay+0x28>
  {
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000010 	.word	0x20000010

08001ebc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e033      	b.n	8001f3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff faca 	bl	8001474 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d118      	bne.n	8001f2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f02:	f023 0302 	bic.w	r3, r3, #2
 8001f06:	f043 0202 	orr.w	r2, r3, #2
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f000 f94a 	bl	80021a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f023 0303 	bic.w	r3, r3, #3
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	; 0x40
 8001f2a:	e001      	b.n	8001f30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1c>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e113      	b.n	8002188 <HAL_ADC_ConfigChannel+0x244>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	d925      	bls.n	8001fbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68d9      	ldr	r1, [r3, #12]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	3b1e      	subs	r3, #30
 8001f86:	2207      	movs	r2, #7
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43da      	mvns	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	400a      	ands	r2, r1
 8001f94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68d9      	ldr	r1, [r3, #12]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	4603      	mov	r3, r0
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4403      	add	r3, r0
 8001fae:	3b1e      	subs	r3, #30
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	e022      	b.n	8002002 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6919      	ldr	r1, [r3, #16]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	400a      	ands	r2, r1
 8001fde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6919      	ldr	r1, [r3, #16]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	4403      	add	r3, r0
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b06      	cmp	r3, #6
 8002008:	d824      	bhi.n	8002054 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	3b05      	subs	r3, #5
 800201c:	221f      	movs	r2, #31
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43da      	mvns	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	400a      	ands	r2, r1
 800202a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	4618      	mov	r0, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685a      	ldr	r2, [r3, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	3b05      	subs	r3, #5
 8002046:	fa00 f203 	lsl.w	r2, r0, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	635a      	str	r2, [r3, #52]	; 0x34
 8002052:	e04c      	b.n	80020ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b0c      	cmp	r3, #12
 800205a:	d824      	bhi.n	80020a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	3b23      	subs	r3, #35	; 0x23
 800206e:	221f      	movs	r2, #31
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43da      	mvns	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	400a      	ands	r2, r1
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	b29b      	uxth	r3, r3
 800208a:	4618      	mov	r0, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	3b23      	subs	r3, #35	; 0x23
 8002098:	fa00 f203 	lsl.w	r2, r0, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	631a      	str	r2, [r3, #48]	; 0x30
 80020a4:	e023      	b.n	80020ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	3b41      	subs	r3, #65	; 0x41
 80020b8:	221f      	movs	r2, #31
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	400a      	ands	r2, r1
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	3b41      	subs	r3, #65	; 0x41
 80020e2:	fa00 f203 	lsl.w	r2, r0, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ee:	4b29      	ldr	r3, [pc, #164]	; (8002194 <HAL_ADC_ConfigChannel+0x250>)
 80020f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a28      	ldr	r2, [pc, #160]	; (8002198 <HAL_ADC_ConfigChannel+0x254>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d10f      	bne.n	800211c <HAL_ADC_ConfigChannel+0x1d8>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b12      	cmp	r3, #18
 8002102:	d10b      	bne.n	800211c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1d      	ldr	r2, [pc, #116]	; (8002198 <HAL_ADC_ConfigChannel+0x254>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d12b      	bne.n	800217e <HAL_ADC_ConfigChannel+0x23a>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a1c      	ldr	r2, [pc, #112]	; (800219c <HAL_ADC_ConfigChannel+0x258>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d003      	beq.n	8002138 <HAL_ADC_ConfigChannel+0x1f4>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b11      	cmp	r3, #17
 8002136:	d122      	bne.n	800217e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_ADC_ConfigChannel+0x258>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d111      	bne.n	800217e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_ADC_ConfigChannel+0x25c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a11      	ldr	r2, [pc, #68]	; (80021a4 <HAL_ADC_ConfigChannel+0x260>)
 8002160:	fba2 2303 	umull	r2, r3, r2, r3
 8002164:	0c9a      	lsrs	r2, r3, #18
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002170:	e002      	b.n	8002178 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	3b01      	subs	r3, #1
 8002176:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d1f9      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	40012300 	.word	0x40012300
 8002198:	40012000 	.word	0x40012000
 800219c:	10000012 	.word	0x10000012
 80021a0:	20000008 	.word	0x20000008
 80021a4:	431bde83 	.word	0x431bde83

080021a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021b0:	4b79      	ldr	r3, [pc, #484]	; (8002398 <ADC_Init+0x1f0>)
 80021b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6859      	ldr	r1, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	021a      	lsls	r2, r3, #8
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002200:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	430a      	orrs	r2, r1
 8002212:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002222:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6899      	ldr	r1, [r3, #8]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	4a58      	ldr	r2, [pc, #352]	; (800239c <ADC_Init+0x1f4>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d022      	beq.n	8002286 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800224e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6899      	ldr	r1, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002270:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6899      	ldr	r1, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	609a      	str	r2, [r3, #8]
 8002284:	e00f      	b.n	80022a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002294:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0202 	bic.w	r2, r2, #2
 80022b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6899      	ldr	r1, [r3, #8]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7e1b      	ldrb	r3, [r3, #24]
 80022c0:	005a      	lsls	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01b      	beq.n	800230c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6859      	ldr	r1, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fe:	3b01      	subs	r3, #1
 8002300:	035a      	lsls	r2, r3, #13
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	e007      	b.n	800231c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800231a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	3b01      	subs	r3, #1
 8002338:	051a      	lsls	r2, r3, #20
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6899      	ldr	r1, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800235e:	025a      	lsls	r2, r3, #9
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6899      	ldr	r1, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	029a      	lsls	r2, r3, #10
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	609a      	str	r2, [r3, #8]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40012300 	.word	0x40012300
 800239c:	0f000001 	.word	0x0f000001

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	; (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0b      	blt.n	800242e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4907      	ldr	r1, [pc, #28]	; (800243c <__NVIC_EnableIRQ+0x38>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100

08002440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	6039      	str	r1, [r7, #0]
 800244a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002450:	2b00      	cmp	r3, #0
 8002452:	db0a      	blt.n	800246a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	490c      	ldr	r1, [pc, #48]	; (800248c <__NVIC_SetPriority+0x4c>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	0112      	lsls	r2, r2, #4
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	440b      	add	r3, r1
 8002464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002468:	e00a      	b.n	8002480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b2da      	uxtb	r2, r3
 800246e:	4908      	ldr	r1, [pc, #32]	; (8002490 <__NVIC_SetPriority+0x50>)
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3b04      	subs	r3, #4
 8002478:	0112      	lsls	r2, r2, #4
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	440b      	add	r3, r1
 800247e:	761a      	strb	r2, [r3, #24]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000e100 	.word	0xe000e100
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f1c3 0307 	rsb	r3, r3, #7
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	bf28      	it	cs
 80024b2:	2304      	movcs	r3, #4
 80024b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	3304      	adds	r3, #4
 80024ba:	2b06      	cmp	r3, #6
 80024bc:	d902      	bls.n	80024c4 <NVIC_EncodePriority+0x30>
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	3b03      	subs	r3, #3
 80024c2:	e000      	b.n	80024c6 <NVIC_EncodePriority+0x32>
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43da      	mvns	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	401a      	ands	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024dc:	f04f 31ff 	mov.w	r1, #4294967295
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa01 f303 	lsl.w	r3, r1, r3
 80024e6:	43d9      	mvns	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	4313      	orrs	r3, r2
         );
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3724      	adds	r7, #36	; 0x24
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800250c:	d301      	bcc.n	8002512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800250e:	2301      	movs	r3, #1
 8002510:	e00f      	b.n	8002532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <SysTick_Config+0x40>)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800251a:	210f      	movs	r1, #15
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f7ff ff8e 	bl	8002440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <SysTick_Config+0x40>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800252a:	4b04      	ldr	r3, [pc, #16]	; (800253c <SysTick_Config+0x40>)
 800252c:	2207      	movs	r2, #7
 800252e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	e000e010 	.word	0xe000e010

08002540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff ff29 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	4603      	mov	r3, r0
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
 8002562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002568:	f7ff ff3e 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 800256c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	6978      	ldr	r0, [r7, #20]
 8002574:	f7ff ff8e 	bl	8002494 <NVIC_EncodePriority>
 8002578:	4602      	mov	r2, r0
 800257a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff5d 	bl	8002440 <__NVIC_SetPriority>
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	4603      	mov	r3, r0
 8002596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ff31 	bl	8002404 <__NVIC_EnableIRQ>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff ffa2 	bl	80024fc <SysTick_Config>
 80025b8:	4603      	mov	r3, r0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e165      	b.n	80028ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f040 8154 	bne.w	80028a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d005      	beq.n	8002616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002612:	2b02      	cmp	r3, #2
 8002614:	d130      	bne.n	8002678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 0201 	and.w	r2, r3, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b03      	cmp	r3, #3
 8002682:	d017      	beq.n	80026b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d123      	bne.n	8002708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80ae 	beq.w	80028a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b5d      	ldr	r3, [pc, #372]	; (80028c4 <HAL_GPIO_Init+0x300>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a5c      	ldr	r2, [pc, #368]	; (80028c4 <HAL_GPIO_Init+0x300>)
 8002754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b5a      	ldr	r3, [pc, #360]	; (80028c4 <HAL_GPIO_Init+0x300>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002766:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_GPIO_Init+0x304>)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	220f      	movs	r2, #15
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a4f      	ldr	r2, [pc, #316]	; (80028cc <HAL_GPIO_Init+0x308>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d025      	beq.n	80027de <HAL_GPIO_Init+0x21a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a4e      	ldr	r2, [pc, #312]	; (80028d0 <HAL_GPIO_Init+0x30c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01f      	beq.n	80027da <HAL_GPIO_Init+0x216>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a4d      	ldr	r2, [pc, #308]	; (80028d4 <HAL_GPIO_Init+0x310>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d019      	beq.n	80027d6 <HAL_GPIO_Init+0x212>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a4c      	ldr	r2, [pc, #304]	; (80028d8 <HAL_GPIO_Init+0x314>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d013      	beq.n	80027d2 <HAL_GPIO_Init+0x20e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4b      	ldr	r2, [pc, #300]	; (80028dc <HAL_GPIO_Init+0x318>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00d      	beq.n	80027ce <HAL_GPIO_Init+0x20a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a4a      	ldr	r2, [pc, #296]	; (80028e0 <HAL_GPIO_Init+0x31c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <HAL_GPIO_Init+0x206>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a49      	ldr	r2, [pc, #292]	; (80028e4 <HAL_GPIO_Init+0x320>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_GPIO_Init+0x202>
 80027c2:	2306      	movs	r3, #6
 80027c4:	e00c      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027c6:	2307      	movs	r3, #7
 80027c8:	e00a      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027ca:	2305      	movs	r3, #5
 80027cc:	e008      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027ce:	2304      	movs	r3, #4
 80027d0:	e006      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027d2:	2303      	movs	r3, #3
 80027d4:	e004      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e002      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_GPIO_Init+0x21c>
 80027de:	2300      	movs	r3, #0
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	f002 0203 	and.w	r2, r2, #3
 80027e6:	0092      	lsls	r2, r2, #2
 80027e8:	4093      	lsls	r3, r2
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027f0:	4935      	ldr	r1, [pc, #212]	; (80028c8 <HAL_GPIO_Init+0x304>)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fe:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <HAL_GPIO_Init+0x324>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	43db      	mvns	r3, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4013      	ands	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002822:	4a31      	ldr	r2, [pc, #196]	; (80028e8 <HAL_GPIO_Init+0x324>)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002828:	4b2f      	ldr	r3, [pc, #188]	; (80028e8 <HAL_GPIO_Init+0x324>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	43db      	mvns	r3, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800284c:	4a26      	ldr	r2, [pc, #152]	; (80028e8 <HAL_GPIO_Init+0x324>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002852:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <HAL_GPIO_Init+0x324>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	43db      	mvns	r3, r3
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	4013      	ands	r3, r2
 8002860:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002876:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <HAL_GPIO_Init+0x324>)
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287c:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_GPIO_Init+0x324>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a0:	4a11      	ldr	r2, [pc, #68]	; (80028e8 <HAL_GPIO_Init+0x324>)
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3301      	adds	r3, #1
 80028aa:	61fb      	str	r3, [r7, #28]
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	f67f ae96 	bls.w	80025e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40013800 	.word	0x40013800
 80028cc:	40020000 	.word	0x40020000
 80028d0:	40020400 	.word	0x40020400
 80028d4:	40020800 	.word	0x40020800
 80028d8:	40020c00 	.word	0x40020c00
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40021400 	.word	0x40021400
 80028e4:	40021800 	.word	0x40021800
 80028e8:	40013c00 	.word	0x40013c00

080028ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	460b      	mov	r3, r1
 80028f6:	807b      	strh	r3, [r7, #2]
 80028f8:	4613      	mov	r3, r2
 80028fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028fc:	787b      	ldrb	r3, [r7, #1]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002908:	e003      	b.n	8002912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	041a      	lsls	r2, r3, #16
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	619a      	str	r2, [r3, #24]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800292c:	695a      	ldr	r2, [r3, #20]
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	4013      	ands	r3, r2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d006      	beq.n	8002944 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002936:	4a05      	ldr	r2, [pc, #20]	; (800294c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe fd5a 	bl	80013f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40013c00 	.word	0x40013c00

08002950 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e12b      	b.n	8002bba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fdc0 	bl	80014fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2224      	movs	r2, #36	; 0x24
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029b4:	f000 fa52 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 80029b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4a81      	ldr	r2, [pc, #516]	; (8002bc4 <HAL_I2C_Init+0x274>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d807      	bhi.n	80029d4 <HAL_I2C_Init+0x84>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4a80      	ldr	r2, [pc, #512]	; (8002bc8 <HAL_I2C_Init+0x278>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	bf94      	ite	ls
 80029cc:	2301      	movls	r3, #1
 80029ce:	2300      	movhi	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	e006      	b.n	80029e2 <HAL_I2C_Init+0x92>
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a7d      	ldr	r2, [pc, #500]	; (8002bcc <HAL_I2C_Init+0x27c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	bf94      	ite	ls
 80029dc:	2301      	movls	r3, #1
 80029de:	2300      	movhi	r3, #0
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e0e7      	b.n	8002bba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4a78      	ldr	r2, [pc, #480]	; (8002bd0 <HAL_I2C_Init+0x280>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0c9b      	lsrs	r3, r3, #18
 80029f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	4a6a      	ldr	r2, [pc, #424]	; (8002bc4 <HAL_I2C_Init+0x274>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d802      	bhi.n	8002a24 <HAL_I2C_Init+0xd4>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	3301      	adds	r3, #1
 8002a22:	e009      	b.n	8002a38 <HAL_I2C_Init+0xe8>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	4a69      	ldr	r2, [pc, #420]	; (8002bd4 <HAL_I2C_Init+0x284>)
 8002a30:	fba2 2303 	umull	r2, r3, r2, r3
 8002a34:	099b      	lsrs	r3, r3, #6
 8002a36:	3301      	adds	r3, #1
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	495c      	ldr	r1, [pc, #368]	; (8002bc4 <HAL_I2C_Init+0x274>)
 8002a54:	428b      	cmp	r3, r1
 8002a56:	d819      	bhi.n	8002a8c <HAL_I2C_Init+0x13c>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1e59      	subs	r1, r3, #1
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a66:	1c59      	adds	r1, r3, #1
 8002a68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a6c:	400b      	ands	r3, r1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_I2C_Init+0x138>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1e59      	subs	r1, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a80:	3301      	adds	r3, #1
 8002a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a86:	e051      	b.n	8002b2c <HAL_I2C_Init+0x1dc>
 8002a88:	2304      	movs	r3, #4
 8002a8a:	e04f      	b.n	8002b2c <HAL_I2C_Init+0x1dc>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d111      	bne.n	8002ab8 <HAL_I2C_Init+0x168>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e58      	subs	r0, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	440b      	add	r3, r1
 8002aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e012      	b.n	8002ade <HAL_I2C_Init+0x18e>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1e58      	subs	r0, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6859      	ldr	r1, [r3, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	0099      	lsls	r1, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	bf0c      	ite	eq
 8002ad8:	2301      	moveq	r3, #1
 8002ada:	2300      	movne	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Init+0x196>
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e022      	b.n	8002b2c <HAL_I2C_Init+0x1dc>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10e      	bne.n	8002b0c <HAL_I2C_Init+0x1bc>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1e58      	subs	r0, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6859      	ldr	r1, [r3, #4]
 8002af6:	460b      	mov	r3, r1
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	440b      	add	r3, r1
 8002afc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b0a:	e00f      	b.n	8002b2c <HAL_I2C_Init+0x1dc>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1e58      	subs	r0, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	0099      	lsls	r1, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	6809      	ldr	r1, [r1, #0]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69da      	ldr	r2, [r3, #28]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	431a      	orrs	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6911      	ldr	r1, [r2, #16]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68d2      	ldr	r2, [r2, #12]
 8002b66:	4311      	orrs	r1, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	430b      	orrs	r3, r1
 8002b6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	000186a0 	.word	0x000186a0
 8002bc8:	001e847f 	.word	0x001e847f
 8002bcc:	003d08ff 	.word	0x003d08ff
 8002bd0:	431bde83 	.word	0x431bde83
 8002bd4:	10624dd3 	.word	0x10624dd3

08002bd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	603b      	str	r3, [r7, #0]
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_PWREx_EnableOverDrive+0x90>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a1f      	ldr	r2, [pc, #124]	; (8002c68 <HAL_PWREx_EnableOverDrive+0x90>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b1d      	ldr	r3, [pc, #116]	; (8002c68 <HAL_PWREx_EnableOverDrive+0x90>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <HAL_PWREx_EnableOverDrive+0x94>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c04:	f7ff f92a 	bl	8001e5c <HAL_GetTick>
 8002c08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c0a:	e009      	b.n	8002c20 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c0c:	f7ff f926 	bl	8001e5c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c1a:	d901      	bls.n	8002c20 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e01f      	b.n	8002c60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d1ee      	bne.n	8002c0c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c2e:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c34:	f7ff f912 	bl	8001e5c <HAL_GetTick>
 8002c38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c3a:	e009      	b.n	8002c50 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c3c:	f7ff f90e 	bl	8001e5c <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c4a:	d901      	bls.n	8002c50 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e007      	b.n	8002c60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002c50:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c5c:	d1ee      	bne.n	8002c3c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	420e0040 	.word	0x420e0040
 8002c70:	40007000 	.word	0x40007000
 8002c74:	420e0044 	.word	0x420e0044

08002c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0cc      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b68      	ldr	r3, [pc, #416]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d90c      	bls.n	8002cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b65      	ldr	r3, [pc, #404]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca2:	4b63      	ldr	r3, [pc, #396]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0b8      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0302 	and.w	r3, r3, #2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d020      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ccc:	4b59      	ldr	r3, [pc, #356]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a58      	ldr	r2, [pc, #352]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce4:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a52      	ldr	r2, [pc, #328]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf0:	4b50      	ldr	r3, [pc, #320]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	494d      	ldr	r1, [pc, #308]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d044      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d119      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e07f      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d003      	beq.n	8002d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d107      	bne.n	8002d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d36:	4b3f      	ldr	r3, [pc, #252]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e06f      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d46:	4b3b      	ldr	r3, [pc, #236]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e067      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d56:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f023 0203 	bic.w	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4934      	ldr	r1, [pc, #208]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d68:	f7ff f878 	bl	8001e5c <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	e00a      	b.n	8002d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d70:	f7ff f874 	bl	8001e5c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e04f      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d86:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 020c 	and.w	r2, r3, #12
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d1eb      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d20c      	bcs.n	8002dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <HAL_RCC_ClockConfig+0x1b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e032      	b.n	8002e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dcc:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4916      	ldr	r1, [pc, #88]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	490e      	ldr	r1, [pc, #56]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dfe:	f000 f855 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e02:	4602      	mov	r2, r0
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_RCC_ClockConfig+0x1bc>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	490a      	ldr	r1, [pc, #40]	; (8002e38 <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	5ccb      	ldrb	r3, [r1, r3]
 8002e12:	fa22 f303 	lsr.w	r3, r2, r3
 8002e16:	4a09      	ldr	r2, [pc, #36]	; (8002e3c <HAL_RCC_ClockConfig+0x1c4>)
 8002e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fe ffd8 	bl	8001dd4 <HAL_InitTick>

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023c00 	.word	0x40023c00
 8002e34:	40023800 	.word	0x40023800
 8002e38:	08005b60 	.word	0x08005b60
 8002e3c:	20000008 	.word	0x20000008
 8002e40:	2000000c 	.word	0x2000000c

08002e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	20000008 	.word	0x20000008

08002e5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e60:	f7ff fff0 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	0a9b      	lsrs	r3, r3, #10
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	4903      	ldr	r1, [pc, #12]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e72:	5ccb      	ldrb	r3, [r1, r3]
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	08005b70 	.word	0x08005b70

08002e84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e88:	f7ff ffdc 	bl	8002e44 <HAL_RCC_GetHCLKFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	0b5b      	lsrs	r3, r3, #13
 8002e94:	f003 0307 	and.w	r3, r3, #7
 8002e98:	4903      	ldr	r1, [pc, #12]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	08005b70 	.word	0x08005b70

08002eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb0:	b0ae      	sub	sp, #184	; 0xb8
 8002eb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed2:	4bcb      	ldr	r3, [pc, #812]	; (8003200 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b0c      	cmp	r3, #12
 8002edc:	f200 8206 	bhi.w	80032ec <HAL_RCC_GetSysClockFreq+0x440>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08002f1d 	.word	0x08002f1d
 8002eec:	080032ed 	.word	0x080032ed
 8002ef0:	080032ed 	.word	0x080032ed
 8002ef4:	080032ed 	.word	0x080032ed
 8002ef8:	08002f25 	.word	0x08002f25
 8002efc:	080032ed 	.word	0x080032ed
 8002f00:	080032ed 	.word	0x080032ed
 8002f04:	080032ed 	.word	0x080032ed
 8002f08:	08002f2d 	.word	0x08002f2d
 8002f0c:	080032ed 	.word	0x080032ed
 8002f10:	080032ed 	.word	0x080032ed
 8002f14:	080032ed 	.word	0x080032ed
 8002f18:	0800311d 	.word	0x0800311d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f1c:	4bb9      	ldr	r3, [pc, #740]	; (8003204 <HAL_RCC_GetSysClockFreq+0x358>)
 8002f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002f22:	e1e7      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f24:	4bb8      	ldr	r3, [pc, #736]	; (8003208 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002f26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f2a:	e1e3      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f2c:	4bb4      	ldr	r3, [pc, #720]	; (8003200 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f38:	4bb1      	ldr	r3, [pc, #708]	; (8003200 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d071      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f44:	4bae      	ldr	r3, [pc, #696]	; (8003200 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f50:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f60:	2300      	movs	r3, #0
 8002f62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	462b      	mov	r3, r5
 8002f6e:	f04f 0000 	mov.w	r0, #0
 8002f72:	f04f 0100 	mov.w	r1, #0
 8002f76:	0159      	lsls	r1, r3, #5
 8002f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7c:	0150      	lsls	r0, r2, #5
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4621      	mov	r1, r4
 8002f84:	1a51      	subs	r1, r2, r1
 8002f86:	6439      	str	r1, [r7, #64]	; 0x40
 8002f88:	4629      	mov	r1, r5
 8002f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f9c:	4649      	mov	r1, r9
 8002f9e:	018b      	lsls	r3, r1, #6
 8002fa0:	4641      	mov	r1, r8
 8002fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fa6:	4641      	mov	r1, r8
 8002fa8:	018a      	lsls	r2, r1, #6
 8002faa:	4641      	mov	r1, r8
 8002fac:	1a51      	subs	r1, r2, r1
 8002fae:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002fc4:	4649      	mov	r1, r9
 8002fc6:	00cb      	lsls	r3, r1, #3
 8002fc8:	4641      	mov	r1, r8
 8002fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fce:	4641      	mov	r1, r8
 8002fd0:	00ca      	lsls	r2, r1, #3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4622      	mov	r2, r4
 8002fda:	189b      	adds	r3, r3, r2
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fde:	462b      	mov	r3, r5
 8002fe0:	460a      	mov	r2, r1
 8002fe2:	eb42 0303 	adc.w	r3, r2, r3
 8002fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	024b      	lsls	r3, r1, #9
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ffe:	4621      	mov	r1, r4
 8003000:	024a      	lsls	r2, r1, #9
 8003002:	4610      	mov	r0, r2
 8003004:	4619      	mov	r1, r3
 8003006:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800300a:	2200      	movs	r2, #0
 800300c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003010:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003014:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003018:	f7fd f952 	bl	80002c0 <__aeabi_uldivmod>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4613      	mov	r3, r2
 8003022:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003026:	e067      	b.n	80030f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003028:	4b75      	ldr	r3, [pc, #468]	; (8003200 <HAL_RCC_GetSysClockFreq+0x354>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	099b      	lsrs	r3, r3, #6
 800302e:	2200      	movs	r2, #0
 8003030:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003034:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003038:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800303c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003040:	67bb      	str	r3, [r7, #120]	; 0x78
 8003042:	2300      	movs	r3, #0
 8003044:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003046:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800304a:	4622      	mov	r2, r4
 800304c:	462b      	mov	r3, r5
 800304e:	f04f 0000 	mov.w	r0, #0
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	0159      	lsls	r1, r3, #5
 8003058:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800305c:	0150      	lsls	r0, r2, #5
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4621      	mov	r1, r4
 8003064:	1a51      	subs	r1, r2, r1
 8003066:	62b9      	str	r1, [r7, #40]	; 0x28
 8003068:	4629      	mov	r1, r5
 800306a:	eb63 0301 	sbc.w	r3, r3, r1
 800306e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800307c:	4649      	mov	r1, r9
 800307e:	018b      	lsls	r3, r1, #6
 8003080:	4641      	mov	r1, r8
 8003082:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003086:	4641      	mov	r1, r8
 8003088:	018a      	lsls	r2, r1, #6
 800308a:	4641      	mov	r1, r8
 800308c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003090:	4649      	mov	r1, r9
 8003092:	eb63 0b01 	sbc.w	fp, r3, r1
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030aa:	4692      	mov	sl, r2
 80030ac:	469b      	mov	fp, r3
 80030ae:	4623      	mov	r3, r4
 80030b0:	eb1a 0303 	adds.w	r3, sl, r3
 80030b4:	623b      	str	r3, [r7, #32]
 80030b6:	462b      	mov	r3, r5
 80030b8:	eb4b 0303 	adc.w	r3, fp, r3
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80030ca:	4629      	mov	r1, r5
 80030cc:	028b      	lsls	r3, r1, #10
 80030ce:	4621      	mov	r1, r4
 80030d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030d4:	4621      	mov	r1, r4
 80030d6:	028a      	lsls	r2, r1, #10
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030e0:	2200      	movs	r2, #0
 80030e2:	673b      	str	r3, [r7, #112]	; 0x70
 80030e4:	677a      	str	r2, [r7, #116]	; 0x74
 80030e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80030ea:	f7fd f8e9 	bl	80002c0 <__aeabi_uldivmod>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4613      	mov	r3, r2
 80030f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030f8:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_RCC_GetSysClockFreq+0x354>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	0c1b      	lsrs	r3, r3, #16
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	3301      	adds	r3, #1
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800310a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800310e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003112:	fbb2 f3f3 	udiv	r3, r2, r3
 8003116:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800311a:	e0eb      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800311c:	4b38      	ldr	r3, [pc, #224]	; (8003200 <HAL_RCC_GetSysClockFreq+0x354>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003124:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003128:	4b35      	ldr	r3, [pc, #212]	; (8003200 <HAL_RCC_GetSysClockFreq+0x354>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d06b      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003134:	4b32      	ldr	r3, [pc, #200]	; (8003200 <HAL_RCC_GetSysClockFreq+0x354>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	099b      	lsrs	r3, r3, #6
 800313a:	2200      	movs	r2, #0
 800313c:	66bb      	str	r3, [r7, #104]	; 0x68
 800313e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003140:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003146:	663b      	str	r3, [r7, #96]	; 0x60
 8003148:	2300      	movs	r3, #0
 800314a:	667b      	str	r3, [r7, #100]	; 0x64
 800314c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003150:	4622      	mov	r2, r4
 8003152:	462b      	mov	r3, r5
 8003154:	f04f 0000 	mov.w	r0, #0
 8003158:	f04f 0100 	mov.w	r1, #0
 800315c:	0159      	lsls	r1, r3, #5
 800315e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003162:	0150      	lsls	r0, r2, #5
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4621      	mov	r1, r4
 800316a:	1a51      	subs	r1, r2, r1
 800316c:	61b9      	str	r1, [r7, #24]
 800316e:	4629      	mov	r1, r5
 8003170:	eb63 0301 	sbc.w	r3, r3, r1
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003182:	4659      	mov	r1, fp
 8003184:	018b      	lsls	r3, r1, #6
 8003186:	4651      	mov	r1, sl
 8003188:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800318c:	4651      	mov	r1, sl
 800318e:	018a      	lsls	r2, r1, #6
 8003190:	4651      	mov	r1, sl
 8003192:	ebb2 0801 	subs.w	r8, r2, r1
 8003196:	4659      	mov	r1, fp
 8003198:	eb63 0901 	sbc.w	r9, r3, r1
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031b0:	4690      	mov	r8, r2
 80031b2:	4699      	mov	r9, r3
 80031b4:	4623      	mov	r3, r4
 80031b6:	eb18 0303 	adds.w	r3, r8, r3
 80031ba:	613b      	str	r3, [r7, #16]
 80031bc:	462b      	mov	r3, r5
 80031be:	eb49 0303 	adc.w	r3, r9, r3
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80031d0:	4629      	mov	r1, r5
 80031d2:	024b      	lsls	r3, r1, #9
 80031d4:	4621      	mov	r1, r4
 80031d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031da:	4621      	mov	r1, r4
 80031dc:	024a      	lsls	r2, r1, #9
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031e6:	2200      	movs	r2, #0
 80031e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80031ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031f0:	f7fd f866 	bl	80002c0 <__aeabi_uldivmod>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4613      	mov	r3, r2
 80031fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031fe:	e065      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x420>
 8003200:	40023800 	.word	0x40023800
 8003204:	00f42400 	.word	0x00f42400
 8003208:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320c:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <HAL_RCC_GetSysClockFreq+0x458>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	099b      	lsrs	r3, r3, #6
 8003212:	2200      	movs	r2, #0
 8003214:	4618      	mov	r0, r3
 8003216:	4611      	mov	r1, r2
 8003218:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800321c:	653b      	str	r3, [r7, #80]	; 0x50
 800321e:	2300      	movs	r3, #0
 8003220:	657b      	str	r3, [r7, #84]	; 0x54
 8003222:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003226:	4642      	mov	r2, r8
 8003228:	464b      	mov	r3, r9
 800322a:	f04f 0000 	mov.w	r0, #0
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	0159      	lsls	r1, r3, #5
 8003234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003238:	0150      	lsls	r0, r2, #5
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4641      	mov	r1, r8
 8003240:	1a51      	subs	r1, r2, r1
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	4649      	mov	r1, r9
 8003246:	eb63 0301 	sbc.w	r3, r3, r1
 800324a:	60fb      	str	r3, [r7, #12]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003258:	4659      	mov	r1, fp
 800325a:	018b      	lsls	r3, r1, #6
 800325c:	4651      	mov	r1, sl
 800325e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003262:	4651      	mov	r1, sl
 8003264:	018a      	lsls	r2, r1, #6
 8003266:	4651      	mov	r1, sl
 8003268:	1a54      	subs	r4, r2, r1
 800326a:	4659      	mov	r1, fp
 800326c:	eb63 0501 	sbc.w	r5, r3, r1
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	00eb      	lsls	r3, r5, #3
 800327a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800327e:	00e2      	lsls	r2, r4, #3
 8003280:	4614      	mov	r4, r2
 8003282:	461d      	mov	r5, r3
 8003284:	4643      	mov	r3, r8
 8003286:	18e3      	adds	r3, r4, r3
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	464b      	mov	r3, r9
 800328c:	eb45 0303 	adc.w	r3, r5, r3
 8003290:	607b      	str	r3, [r7, #4]
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800329e:	4629      	mov	r1, r5
 80032a0:	028b      	lsls	r3, r1, #10
 80032a2:	4621      	mov	r1, r4
 80032a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a8:	4621      	mov	r1, r4
 80032aa:	028a      	lsls	r2, r1, #10
 80032ac:	4610      	mov	r0, r2
 80032ae:	4619      	mov	r1, r3
 80032b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032b4:	2200      	movs	r2, #0
 80032b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80032ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80032be:	f7fc ffff 	bl	80002c0 <__aeabi_uldivmod>
 80032c2:	4602      	mov	r2, r0
 80032c4:	460b      	mov	r3, r1
 80032c6:	4613      	mov	r3, r2
 80032c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80032cc:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <HAL_RCC_GetSysClockFreq+0x458>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	0f1b      	lsrs	r3, r3, #28
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80032da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032ea:	e003      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_RCC_GetSysClockFreq+0x45c>)
 80032ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	37b8      	adds	r7, #184	; 0xb8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	00f42400 	.word	0x00f42400

0800330c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e28d      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8083 	beq.w	8003432 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800332c:	4b94      	ldr	r3, [pc, #592]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b04      	cmp	r3, #4
 8003336:	d019      	beq.n	800336c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003338:	4b91      	ldr	r3, [pc, #580]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003340:	2b08      	cmp	r3, #8
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003344:	4b8e      	ldr	r3, [pc, #568]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003350:	d00c      	beq.n	800336c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003352:	4b8b      	ldr	r3, [pc, #556]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d112      	bne.n	8003384 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335e:	4b88      	ldr	r3, [pc, #544]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003366:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800336a:	d10b      	bne.n	8003384 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	4b84      	ldr	r3, [pc, #528]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d05b      	beq.n	8003430 <HAL_RCC_OscConfig+0x124>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d157      	bne.n	8003430 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e25a      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338c:	d106      	bne.n	800339c <HAL_RCC_OscConfig+0x90>
 800338e:	4b7c      	ldr	r3, [pc, #496]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7b      	ldr	r2, [pc, #492]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e01d      	b.n	80033d8 <HAL_RCC_OscConfig+0xcc>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCC_OscConfig+0xb4>
 80033a6:	4b76      	ldr	r3, [pc, #472]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a75      	ldr	r2, [pc, #468]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80033ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	4b73      	ldr	r3, [pc, #460]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a72      	ldr	r2, [pc, #456]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80033b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	e00b      	b.n	80033d8 <HAL_RCC_OscConfig+0xcc>
 80033c0:	4b6f      	ldr	r3, [pc, #444]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a6e      	ldr	r2, [pc, #440]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80033c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b6c      	ldr	r3, [pc, #432]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6b      	ldr	r2, [pc, #428]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80033d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d013      	beq.n	8003408 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e0:	f7fe fd3c 	bl	8001e5c <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e8:	f7fe fd38 	bl	8001e5c <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b64      	cmp	r3, #100	; 0x64
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e21f      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	4b61      	ldr	r3, [pc, #388]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0f0      	beq.n	80033e8 <HAL_RCC_OscConfig+0xdc>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003408:	f7fe fd28 	bl	8001e5c <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003410:	f7fe fd24 	bl	8001e5c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b64      	cmp	r3, #100	; 0x64
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e20b      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	4b57      	ldr	r3, [pc, #348]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x104>
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d06f      	beq.n	800351e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800343e:	4b50      	ldr	r3, [pc, #320]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b00      	cmp	r3, #0
 8003448:	d017      	beq.n	800347a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800344a:	4b4d      	ldr	r3, [pc, #308]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003452:	2b08      	cmp	r3, #8
 8003454:	d105      	bne.n	8003462 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003456:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003462:	4b47      	ldr	r3, [pc, #284]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800346a:	2b0c      	cmp	r3, #12
 800346c:	d11c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800346e:	4b44      	ldr	r3, [pc, #272]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d116      	bne.n	80034a8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347a:	4b41      	ldr	r3, [pc, #260]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_RCC_OscConfig+0x186>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d001      	beq.n	8003492 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e1d3      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003492:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4937      	ldr	r1, [pc, #220]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a6:	e03a      	b.n	800351e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d020      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034b0:	4b34      	ldr	r3, [pc, #208]	; (8003584 <HAL_RCC_OscConfig+0x278>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b6:	f7fe fcd1 	bl	8001e5c <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034be:	f7fe fccd 	bl	8001e5c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e1b4      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	4b2b      	ldr	r3, [pc, #172]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0f0      	beq.n	80034be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034dc:	4b28      	ldr	r3, [pc, #160]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4925      	ldr	r1, [pc, #148]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	600b      	str	r3, [r1, #0]
 80034f0:	e015      	b.n	800351e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034f2:	4b24      	ldr	r3, [pc, #144]	; (8003584 <HAL_RCC_OscConfig+0x278>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fcb0 	bl	8001e5c <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003500:	f7fe fcac 	bl	8001e5c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e193      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d036      	beq.n	8003598 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d016      	beq.n	8003560 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003532:	4b15      	ldr	r3, [pc, #84]	; (8003588 <HAL_RCC_OscConfig+0x27c>)
 8003534:	2201      	movs	r2, #1
 8003536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003538:	f7fe fc90 	bl	8001e5c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003540:	f7fe fc8c 	bl	8001e5c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e173      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_OscConfig+0x274>)
 8003554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x234>
 800355e:	e01b      	b.n	8003598 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_OscConfig+0x27c>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fe fc79 	bl	8001e5c <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356c:	e00e      	b.n	800358c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800356e:	f7fe fc75 	bl	8001e5c <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d907      	bls.n	800358c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e15c      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
 8003580:	40023800 	.word	0x40023800
 8003584:	42470000 	.word	0x42470000
 8003588:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800358c:	4b8a      	ldr	r3, [pc, #552]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 800358e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ea      	bne.n	800356e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8097 	beq.w	80036d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a6:	2300      	movs	r3, #0
 80035a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035aa:	4b83      	ldr	r3, [pc, #524]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	4b7f      	ldr	r3, [pc, #508]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	4a7e      	ldr	r2, [pc, #504]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 80035c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c4:	6413      	str	r3, [r2, #64]	; 0x40
 80035c6:	4b7c      	ldr	r3, [pc, #496]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b79      	ldr	r3, [pc, #484]	; (80037bc <HAL_RCC_OscConfig+0x4b0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d118      	bne.n	8003614 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e2:	4b76      	ldr	r3, [pc, #472]	; (80037bc <HAL_RCC_OscConfig+0x4b0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a75      	ldr	r2, [pc, #468]	; (80037bc <HAL_RCC_OscConfig+0x4b0>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7fe fc35 	bl	8001e5c <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f6:	f7fe fc31 	bl	8001e5c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e118      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	4b6c      	ldr	r3, [pc, #432]	; (80037bc <HAL_RCC_OscConfig+0x4b0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d106      	bne.n	800362a <HAL_RCC_OscConfig+0x31e>
 800361c:	4b66      	ldr	r3, [pc, #408]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 800361e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003620:	4a65      	ldr	r2, [pc, #404]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6713      	str	r3, [r2, #112]	; 0x70
 8003628:	e01c      	b.n	8003664 <HAL_RCC_OscConfig+0x358>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	2b05      	cmp	r3, #5
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x340>
 8003632:	4b61      	ldr	r3, [pc, #388]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4a60      	ldr	r2, [pc, #384]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 8003638:	f043 0304 	orr.w	r3, r3, #4
 800363c:	6713      	str	r3, [r2, #112]	; 0x70
 800363e:	4b5e      	ldr	r3, [pc, #376]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 8003640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003642:	4a5d      	ldr	r2, [pc, #372]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6713      	str	r3, [r2, #112]	; 0x70
 800364a:	e00b      	b.n	8003664 <HAL_RCC_OscConfig+0x358>
 800364c:	4b5a      	ldr	r3, [pc, #360]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	4a59      	ldr	r2, [pc, #356]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	6713      	str	r3, [r2, #112]	; 0x70
 8003658:	4b57      	ldr	r3, [pc, #348]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a56      	ldr	r2, [pc, #344]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 800365e:	f023 0304 	bic.w	r3, r3, #4
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d015      	beq.n	8003698 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fe fbf6 	bl	8001e5c <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003672:	e00a      	b.n	800368a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003674:	f7fe fbf2 	bl	8001e5c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e0d7      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368a:	4b4b      	ldr	r3, [pc, #300]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ee      	beq.n	8003674 <HAL_RCC_OscConfig+0x368>
 8003696:	e014      	b.n	80036c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003698:	f7fe fbe0 	bl	8001e5c <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800369e:	e00a      	b.n	80036b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036a0:	f7fe fbdc 	bl	8001e5c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e0c1      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b6:	4b40      	ldr	r3, [pc, #256]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 80036b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ba:	f003 0302 	and.w	r3, r3, #2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1ee      	bne.n	80036a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036c2:	7dfb      	ldrb	r3, [r7, #23]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d105      	bne.n	80036d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c8:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	4a3a      	ldr	r2, [pc, #232]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 80036ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80ad 	beq.w	8003838 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036de:	4b36      	ldr	r3, [pc, #216]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d060      	beq.n	80037ac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d145      	bne.n	800377e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f2:	4b33      	ldr	r3, [pc, #204]	; (80037c0 <HAL_RCC_OscConfig+0x4b4>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fe fbb0 	bl	8001e5c <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003700:	f7fe fbac 	bl	8001e5c <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e093      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372c:	019b      	lsls	r3, r3, #6
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	3b01      	subs	r3, #1
 8003738:	041b      	lsls	r3, r3, #16
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	061b      	lsls	r3, r3, #24
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	071b      	lsls	r3, r3, #28
 800374a:	491b      	ldr	r1, [pc, #108]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 800374c:	4313      	orrs	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003750:	4b1b      	ldr	r3, [pc, #108]	; (80037c0 <HAL_RCC_OscConfig+0x4b4>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fe fb81 	bl	8001e5c <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375e:	f7fe fb7d 	bl	8001e5c <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e064      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x452>
 800377c:	e05c      	b.n	8003838 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <HAL_RCC_OscConfig+0x4b4>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe fb6a 	bl	8001e5c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe fb66 	bl	8001e5c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e04d      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <HAL_RCC_OscConfig+0x4ac>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x480>
 80037aa:	e045      	b.n	8003838 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d107      	bne.n	80037c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e040      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40007000 	.word	0x40007000
 80037c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037c4:	4b1f      	ldr	r3, [pc, #124]	; (8003844 <HAL_RCC_OscConfig+0x538>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d030      	beq.n	8003834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d129      	bne.n	8003834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d122      	bne.n	8003834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037f4:	4013      	ands	r3, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d119      	bne.n	8003834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	085b      	lsrs	r3, r3, #1
 800380c:	3b01      	subs	r3, #1
 800380e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d10f      	bne.n	8003834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d107      	bne.n	8003834 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800

08003848 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e07b      	b.n	8003952 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	2b00      	cmp	r3, #0
 8003860:	d108      	bne.n	8003874 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800386a:	d009      	beq.n	8003880 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	61da      	str	r2, [r3, #28]
 8003872:	e005      	b.n	8003880 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd ff04 	bl	80016a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038c8:	431a      	orrs	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	ea42 0103 	orr.w	r1, r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	f003 0104 	and.w	r1, r3, #4
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f003 0210 	and.w	r2, r3, #16
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003940:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b088      	sub	sp, #32
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	4613      	mov	r3, r2
 8003968:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_SPI_Transmit+0x22>
 8003978:	2302      	movs	r3, #2
 800397a:	e126      	b.n	8003bca <HAL_SPI_Transmit+0x270>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003984:	f7fe fa6a 	bl	8001e5c <HAL_GetTick>
 8003988:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d002      	beq.n	80039a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800399a:	2302      	movs	r3, #2
 800399c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800399e:	e10b      	b.n	8003bb8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_SPI_Transmit+0x52>
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039b0:	e102      	b.n	8003bb8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2203      	movs	r2, #3
 80039b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	88fa      	ldrh	r2, [r7, #6]
 80039ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	88fa      	ldrh	r2, [r7, #6]
 80039d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f8:	d10f      	bne.n	8003a1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d007      	beq.n	8003a38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a40:	d14b      	bne.n	8003ada <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_SPI_Transmit+0xf6>
 8003a4a:	8afb      	ldrh	r3, [r7, #22]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d13e      	bne.n	8003ace <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	881a      	ldrh	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	1c9a      	adds	r2, r3, #2
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a74:	e02b      	b.n	8003ace <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d112      	bne.n	8003aaa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	881a      	ldrh	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	1c9a      	adds	r2, r3, #2
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003aa8:	e011      	b.n	8003ace <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003aaa:	f7fe f9d7 	bl	8001e5c <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d803      	bhi.n	8003ac2 <HAL_SPI_Transmit+0x168>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac0:	d102      	bne.n	8003ac8 <HAL_SPI_Transmit+0x16e>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003acc:	e074      	b.n	8003bb8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ce      	bne.n	8003a76 <HAL_SPI_Transmit+0x11c>
 8003ad8:	e04c      	b.n	8003b74 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_SPI_Transmit+0x18e>
 8003ae2:	8afb      	ldrh	r3, [r7, #22]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d140      	bne.n	8003b6a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	7812      	ldrb	r2, [r2, #0]
 8003af4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b04:	b29b      	uxth	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b0e:	e02c      	b.n	8003b6a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d113      	bne.n	8003b46 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	7812      	ldrb	r2, [r2, #0]
 8003b2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b44:	e011      	b.n	8003b6a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b46:	f7fe f989 	bl	8001e5c <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d803      	bhi.n	8003b5e <HAL_SPI_Transmit+0x204>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d102      	bne.n	8003b64 <HAL_SPI_Transmit+0x20a>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b68:	e026      	b.n	8003bb8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1cd      	bne.n	8003b10 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	6839      	ldr	r1, [r7, #0]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fa55 	bl	8004028 <SPI_EndRxTxTransaction>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e000      	b.n	8003bb8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003bb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b08c      	sub	sp, #48	; 0x30
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003be0:	2301      	movs	r3, #1
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x26>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e18a      	b.n	8003f0e <HAL_SPI_TransmitReceive+0x33c>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c00:	f7fe f92c 	bl	8001e5c <HAL_GetTick>
 8003c04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c16:	887b      	ldrh	r3, [r7, #2]
 8003c18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d00f      	beq.n	8003c42 <HAL_SPI_TransmitReceive+0x70>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c28:	d107      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x68>
 8003c32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d003      	beq.n	8003c42 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c40:	e15b      	b.n	8003efa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_SPI_TransmitReceive+0x82>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_SPI_TransmitReceive+0x82>
 8003c4e:	887b      	ldrh	r3, [r7, #2]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d103      	bne.n	8003c5c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c5a:	e14e      	b.n	8003efa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d003      	beq.n	8003c70 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	887a      	ldrh	r2, [r7, #2]
 8003c80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	887a      	ldrh	r2, [r7, #2]
 8003c86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	887a      	ldrh	r2, [r7, #2]
 8003c92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	887a      	ldrh	r2, [r7, #2]
 8003c98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d007      	beq.n	8003cc4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ccc:	d178      	bne.n	8003dc0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_SPI_TransmitReceive+0x10a>
 8003cd6:	8b7b      	ldrh	r3, [r7, #26]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d166      	bne.n	8003daa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	881a      	ldrh	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	1c9a      	adds	r2, r3, #2
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d00:	e053      	b.n	8003daa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d11b      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x176>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <HAL_SPI_TransmitReceive+0x176>
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d113      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	881a      	ldrh	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	1c9a      	adds	r2, r3, #2
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d119      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x1b8>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d014      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	b292      	uxth	r2, r2
 8003d6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d86:	2301      	movs	r3, #1
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d8a:	f7fe f867 	bl	8001e5c <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d807      	bhi.n	8003daa <HAL_SPI_TransmitReceive+0x1d8>
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d003      	beq.n	8003daa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003da8:	e0a7      	b.n	8003efa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1a6      	bne.n	8003d02 <HAL_SPI_TransmitReceive+0x130>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1a1      	bne.n	8003d02 <HAL_SPI_TransmitReceive+0x130>
 8003dbe:	e07c      	b.n	8003eba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_SPI_TransmitReceive+0x1fc>
 8003dc8:	8b7b      	ldrh	r3, [r7, #26]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d16b      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	330c      	adds	r3, #12
 8003dd8:	7812      	ldrb	r2, [r2, #0]
 8003dda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003df4:	e057      	b.n	8003ea6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d11c      	bne.n	8003e3e <HAL_SPI_TransmitReceive+0x26c>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d017      	beq.n	8003e3e <HAL_SPI_TransmitReceive+0x26c>
 8003e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d114      	bne.n	8003e3e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	7812      	ldrb	r2, [r2, #0]
 8003e20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d119      	bne.n	8003e80 <HAL_SPI_TransmitReceive+0x2ae>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d014      	beq.n	8003e80 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e80:	f7fd ffec 	bl	8001e5c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d803      	bhi.n	8003e98 <HAL_SPI_TransmitReceive+0x2c6>
 8003e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d102      	bne.n	8003e9e <HAL_SPI_TransmitReceive+0x2cc>
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d103      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ea4:	e029      	b.n	8003efa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1a2      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x224>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d19d      	bne.n	8003df6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ebc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f8b2 	bl	8004028 <SPI_EndRxTxTransaction>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d006      	beq.n	8003ed8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ed6:	e010      	b.n	8003efa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10b      	bne.n	8003ef8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	e000      	b.n	8003efa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003ef8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3730      	adds	r7, #48	; 0x30
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f28:	f7fd ff98 	bl	8001e5c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	4413      	add	r3, r2
 8003f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f38:	f7fd ff90 	bl	8001e5c <HAL_GetTick>
 8003f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f3e:	4b39      	ldr	r3, [pc, #228]	; (8004024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	015b      	lsls	r3, r3, #5
 8003f44:	0d1b      	lsrs	r3, r3, #20
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f4e:	e054      	b.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d050      	beq.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f58:	f7fd ff80 	bl	8001e5c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d902      	bls.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d13d      	bne.n	8003fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f86:	d111      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f90:	d004      	beq.n	8003f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9a:	d107      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb4:	d10f      	bne.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e017      	b.n	800401a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	429a      	cmp	r2, r3
 8004016:	d19b      	bne.n	8003f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000008 	.word	0x20000008

08004028 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <SPI_EndRxTxTransaction+0x7c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1b      	ldr	r2, [pc, #108]	; (80040a8 <SPI_EndRxTxTransaction+0x80>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	0d5b      	lsrs	r3, r3, #21
 8004040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004052:	d112      	bne.n	800407a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2200      	movs	r2, #0
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7ff ff5a 	bl	8003f18 <SPI_WaitFlagStateUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d016      	beq.n	8004098 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e00f      	b.n	800409a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	3b01      	subs	r3, #1
 8004084:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004090:	2b80      	cmp	r3, #128	; 0x80
 8004092:	d0f2      	beq.n	800407a <SPI_EndRxTxTransaction+0x52>
 8004094:	e000      	b.n	8004098 <SPI_EndRxTxTransaction+0x70>
        break;
 8004096:	bf00      	nop
  }

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000008 	.word	0x20000008
 80040a8:	165e9f81 	.word	0x165e9f81

080040ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e041      	b.n	8004142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd fca0 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 f9e4 	bl	80044b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e041      	b.n	80041e0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d106      	bne.n	8004176 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7fd fc03 	bl	800197c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3304      	adds	r3, #4
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f000 f995 	bl	80044b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3708      	adds	r7, #8
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e097      	b.n	800432c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d106      	bne.n	8004216 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7fd fb4b 	bl	80018ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800422c:	f023 0307 	bic.w	r3, r3, #7
 8004230:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3304      	adds	r3, #4
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f000 f93b 	bl	80044b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	4313      	orrs	r3, r2
 8004262:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	f023 0303 	bic.w	r3, r3, #3
 800426e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	4313      	orrs	r3, r2
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004288:	f023 030c 	bic.w	r3, r3, #12
 800428c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004294:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	4313      	orrs	r3, r2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	011a      	lsls	r2, r3, #4
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	031b      	lsls	r3, r3, #12
 80042b8:	4313      	orrs	r3, r2
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80042c6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80042ce:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	4313      	orrs	r3, r2
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3718      	adds	r7, #24
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800434e:	2302      	movs	r3, #2
 8004350:	e0ae      	b.n	80044b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b0c      	cmp	r3, #12
 800435e:	f200 809f 	bhi.w	80044a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	0800439d 	.word	0x0800439d
 800436c:	080044a1 	.word	0x080044a1
 8004370:	080044a1 	.word	0x080044a1
 8004374:	080044a1 	.word	0x080044a1
 8004378:	080043dd 	.word	0x080043dd
 800437c:	080044a1 	.word	0x080044a1
 8004380:	080044a1 	.word	0x080044a1
 8004384:	080044a1 	.word	0x080044a1
 8004388:	0800441f 	.word	0x0800441f
 800438c:	080044a1 	.word	0x080044a1
 8004390:	080044a1 	.word	0x080044a1
 8004394:	080044a1 	.word	0x080044a1
 8004398:	0800445f 	.word	0x0800445f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f928 	bl	80045f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0208 	orr.w	r2, r2, #8
 80043b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0204 	bic.w	r2, r2, #4
 80043c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6999      	ldr	r1, [r3, #24]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	619a      	str	r2, [r3, #24]
      break;
 80043da:	e064      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f978 	bl	80046d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6999      	ldr	r1, [r3, #24]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	021a      	lsls	r2, r3, #8
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	619a      	str	r2, [r3, #24]
      break;
 800441c:	e043      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f9cd 	bl	80047c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0208 	orr.w	r2, r2, #8
 8004438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0204 	bic.w	r2, r2, #4
 8004448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69d9      	ldr	r1, [r3, #28]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	61da      	str	r2, [r3, #28]
      break;
 800445c:	e023      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fa21 	bl	80048ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69d9      	ldr	r1, [r3, #28]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	021a      	lsls	r2, r3, #8
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	61da      	str	r2, [r3, #28]
      break;
 800449e:	e002      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
      break;
 80044a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a40      	ldr	r2, [pc, #256]	; (80045cc <TIM_Base_SetConfig+0x114>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d013      	beq.n	80044f8 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d6:	d00f      	beq.n	80044f8 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3d      	ldr	r2, [pc, #244]	; (80045d0 <TIM_Base_SetConfig+0x118>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00b      	beq.n	80044f8 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3c      	ldr	r2, [pc, #240]	; (80045d4 <TIM_Base_SetConfig+0x11c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a3b      	ldr	r2, [pc, #236]	; (80045d8 <TIM_Base_SetConfig+0x120>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_Base_SetConfig+0x40>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a3a      	ldr	r2, [pc, #232]	; (80045dc <TIM_Base_SetConfig+0x124>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d108      	bne.n	800450a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2f      	ldr	r2, [pc, #188]	; (80045cc <TIM_Base_SetConfig+0x114>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d02b      	beq.n	800456a <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004518:	d027      	beq.n	800456a <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2c      	ldr	r2, [pc, #176]	; (80045d0 <TIM_Base_SetConfig+0x118>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d023      	beq.n	800456a <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2b      	ldr	r2, [pc, #172]	; (80045d4 <TIM_Base_SetConfig+0x11c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01f      	beq.n	800456a <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a2a      	ldr	r2, [pc, #168]	; (80045d8 <TIM_Base_SetConfig+0x120>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01b      	beq.n	800456a <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a29      	ldr	r2, [pc, #164]	; (80045dc <TIM_Base_SetConfig+0x124>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d017      	beq.n	800456a <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a28      	ldr	r2, [pc, #160]	; (80045e0 <TIM_Base_SetConfig+0x128>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a27      	ldr	r2, [pc, #156]	; (80045e4 <TIM_Base_SetConfig+0x12c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00f      	beq.n	800456a <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a26      	ldr	r2, [pc, #152]	; (80045e8 <TIM_Base_SetConfig+0x130>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00b      	beq.n	800456a <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a25      	ldr	r2, [pc, #148]	; (80045ec <TIM_Base_SetConfig+0x134>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d007      	beq.n	800456a <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a24      	ldr	r2, [pc, #144]	; (80045f0 <TIM_Base_SetConfig+0x138>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d003      	beq.n	800456a <TIM_Base_SetConfig+0xb2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a23      	ldr	r2, [pc, #140]	; (80045f4 <TIM_Base_SetConfig+0x13c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d108      	bne.n	800457c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a0a      	ldr	r2, [pc, #40]	; (80045cc <TIM_Base_SetConfig+0x114>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d003      	beq.n	80045b0 <TIM_Base_SetConfig+0xf8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a0c      	ldr	r2, [pc, #48]	; (80045dc <TIM_Base_SetConfig+0x124>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d103      	bne.n	80045b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	615a      	str	r2, [r3, #20]
}
 80045be:	bf00      	nop
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40000400 	.word	0x40000400
 80045d4:	40000800 	.word	0x40000800
 80045d8:	40000c00 	.word	0x40000c00
 80045dc:	40010400 	.word	0x40010400
 80045e0:	40014000 	.word	0x40014000
 80045e4:	40014400 	.word	0x40014400
 80045e8:	40014800 	.word	0x40014800
 80045ec:	40001800 	.word	0x40001800
 80045f0:	40001c00 	.word	0x40001c00
 80045f4:	40002000 	.word	0x40002000

080045f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0201 	bic.w	r2, r3, #1
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 0302 	bic.w	r3, r3, #2
 8004640:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a20      	ldr	r2, [pc, #128]	; (80046d0 <TIM_OC1_SetConfig+0xd8>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d003      	beq.n	800465c <TIM_OC1_SetConfig+0x64>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <TIM_OC1_SetConfig+0xdc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d10c      	bne.n	8004676 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f023 0308 	bic.w	r3, r3, #8
 8004662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f023 0304 	bic.w	r3, r3, #4
 8004674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a15      	ldr	r2, [pc, #84]	; (80046d0 <TIM_OC1_SetConfig+0xd8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_OC1_SetConfig+0x8e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a14      	ldr	r2, [pc, #80]	; (80046d4 <TIM_OC1_SetConfig+0xdc>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d111      	bne.n	80046aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800468c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	621a      	str	r2, [r3, #32]
}
 80046c4:	bf00      	nop
 80046c6:	371c      	adds	r7, #28
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	40010000 	.word	0x40010000
 80046d4:	40010400 	.word	0x40010400

080046d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f023 0210 	bic.w	r2, r3, #16
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f023 0320 	bic.w	r3, r3, #32
 8004722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4313      	orrs	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a22      	ldr	r2, [pc, #136]	; (80047bc <TIM_OC2_SetConfig+0xe4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_OC2_SetConfig+0x68>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a21      	ldr	r2, [pc, #132]	; (80047c0 <TIM_OC2_SetConfig+0xe8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10d      	bne.n	800475c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	4313      	orrs	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a17      	ldr	r2, [pc, #92]	; (80047bc <TIM_OC2_SetConfig+0xe4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_OC2_SetConfig+0x94>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a16      	ldr	r2, [pc, #88]	; (80047c0 <TIM_OC2_SetConfig+0xe8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d113      	bne.n	8004794 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004772:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800477a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4313      	orrs	r3, r2
 8004792:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	621a      	str	r2, [r3, #32]
}
 80047ae:	bf00      	nop
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40010000 	.word	0x40010000
 80047c0:	40010400 	.word	0x40010400

080047c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0303 	bic.w	r3, r3, #3
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800480c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	021b      	lsls	r3, r3, #8
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a21      	ldr	r2, [pc, #132]	; (80048a4 <TIM_OC3_SetConfig+0xe0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <TIM_OC3_SetConfig+0x66>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a20      	ldr	r2, [pc, #128]	; (80048a8 <TIM_OC3_SetConfig+0xe4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d10d      	bne.n	8004846 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	021b      	lsls	r3, r3, #8
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a16      	ldr	r2, [pc, #88]	; (80048a4 <TIM_OC3_SetConfig+0xe0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d003      	beq.n	8004856 <TIM_OC3_SetConfig+0x92>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a15      	ldr	r2, [pc, #84]	; (80048a8 <TIM_OC3_SetConfig+0xe4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d113      	bne.n	800487e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800485c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	621a      	str	r2, [r3, #32]
}
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	40010000 	.word	0x40010000
 80048a8:	40010400 	.word	0x40010400

080048ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	031b      	lsls	r3, r3, #12
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a12      	ldr	r2, [pc, #72]	; (8004950 <TIM_OC4_SetConfig+0xa4>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d003      	beq.n	8004914 <TIM_OC4_SetConfig+0x68>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a11      	ldr	r2, [pc, #68]	; (8004954 <TIM_OC4_SetConfig+0xa8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d109      	bne.n	8004928 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800491a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	019b      	lsls	r3, r3, #6
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	621a      	str	r2, [r3, #32]
}
 8004942:	bf00      	nop
 8004944:	371c      	adds	r7, #28
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	40010000 	.word	0x40010000
 8004954:	40010400 	.word	0x40010400

08004958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800496c:	2302      	movs	r3, #2
 800496e:	e05a      	b.n	8004a26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004996:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a21      	ldr	r2, [pc, #132]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d022      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049bc:	d01d      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d018      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1b      	ldr	r2, [pc, #108]	; (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d013      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1a      	ldr	r2, [pc, #104]	; (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d00e      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d009      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a17      	ldr	r2, [pc, #92]	; (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d004      	beq.n	80049fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d10c      	bne.n	8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40010000 	.word	0x40010000
 8004a38:	40000400 	.word	0x40000400
 8004a3c:	40000800 	.word	0x40000800
 8004a40:	40000c00 	.word	0x40000c00
 8004a44:	40010400 	.word	0x40010400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40001800 	.word	0x40001800

08004a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e03f      	b.n	8004ae2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fd f89e 	bl	8001bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2224      	movs	r2, #36	; 0x24
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f929 	bl	8004cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b08a      	sub	sp, #40	; 0x28
 8004aee:	af02      	add	r7, sp, #8
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d17c      	bne.n	8004c04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_UART_Transmit+0x2c>
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e075      	b.n	8004c06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_UART_Transmit+0x3e>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e06e      	b.n	8004c06 <HAL_UART_Transmit+0x11c>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2221      	movs	r2, #33	; 0x21
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b3e:	f7fd f98d 	bl	8001e5c <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	88fa      	ldrh	r2, [r7, #6]
 8004b4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b58:	d108      	bne.n	8004b6c <HAL_UART_Transmit+0x82>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	e003      	b.n	8004b74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b7c:	e02a      	b.n	8004bd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2200      	movs	r2, #0
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f840 	bl	8004c0e <UART_WaitOnFlagUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e036      	b.n	8004c06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10b      	bne.n	8004bb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	61bb      	str	r3, [r7, #24]
 8004bb4:	e007      	b.n	8004bc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	781a      	ldrb	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1cf      	bne.n	8004b7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2200      	movs	r2, #0
 8004be6:	2140      	movs	r1, #64	; 0x40
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f810 	bl	8004c0e <UART_WaitOnFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e006      	b.n	8004c06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e000      	b.n	8004c06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b090      	sub	sp, #64	; 0x40
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1e:	e050      	b.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c26:	d04c      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c2e:	f7fd f915 	bl	8001e5c <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d241      	bcs.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c5e:	637a      	str	r2, [r7, #52]	; 0x34
 8004c60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e5      	bne.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3314      	adds	r3, #20
 8004c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	613b      	str	r3, [r7, #16]
   return(result);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3314      	adds	r3, #20
 8004c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c92:	623a      	str	r2, [r7, #32]
 8004c94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	69f9      	ldr	r1, [r7, #28]
 8004c98:	6a3a      	ldr	r2, [r7, #32]
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e5      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e00f      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d09f      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3740      	adds	r7, #64	; 0x40
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cf0:	b0c0      	sub	sp, #256	; 0x100
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	68d9      	ldr	r1, [r3, #12]
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	ea40 0301 	orr.w	r3, r0, r1
 8004d14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d44:	f021 010c 	bic.w	r1, r1, #12
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d52:	430b      	orrs	r3, r1
 8004d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d66:	6999      	ldr	r1, [r3, #24]
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	ea40 0301 	orr.w	r3, r0, r1
 8004d72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b8f      	ldr	r3, [pc, #572]	; (8004fb8 <UART_SetConfig+0x2cc>)
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d005      	beq.n	8004d8c <UART_SetConfig+0xa0>
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b8d      	ldr	r3, [pc, #564]	; (8004fbc <UART_SetConfig+0x2d0>)
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d104      	bne.n	8004d96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d8c:	f7fe f87a 	bl	8002e84 <HAL_RCC_GetPCLK2Freq>
 8004d90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d94:	e003      	b.n	8004d9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d96:	f7fe f861 	bl	8002e5c <HAL_RCC_GetPCLK1Freq>
 8004d9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da8:	f040 810c 	bne.w	8004fc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db0:	2200      	movs	r2, #0
 8004db2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004db6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	1891      	adds	r1, r2, r2
 8004dc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dc6:	415b      	adcs	r3, r3
 8004dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dce:	4621      	mov	r1, r4
 8004dd0:	eb12 0801 	adds.w	r8, r2, r1
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	eb43 0901 	adc.w	r9, r3, r1
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dee:	4690      	mov	r8, r2
 8004df0:	4699      	mov	r9, r3
 8004df2:	4623      	mov	r3, r4
 8004df4:	eb18 0303 	adds.w	r3, r8, r3
 8004df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	eb49 0303 	adc.w	r3, r9, r3
 8004e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	18db      	adds	r3, r3, r3
 8004e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e20:	4613      	mov	r3, r2
 8004e22:	eb42 0303 	adc.w	r3, r2, r3
 8004e26:	657b      	str	r3, [r7, #84]	; 0x54
 8004e28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e30:	f7fb fa46 	bl	80002c0 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4b61      	ldr	r3, [pc, #388]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	011c      	lsls	r4, r3, #4
 8004e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e64:	4641      	mov	r1, r8
 8004e66:	eb12 0a01 	adds.w	sl, r2, r1
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e84:	4692      	mov	sl, r2
 8004e86:	469b      	mov	fp, r3
 8004e88:	4643      	mov	r3, r8
 8004e8a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e92:	464b      	mov	r3, r9
 8004e94:	eb4b 0303 	adc.w	r3, fp, r3
 8004e98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ea8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004eac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	18db      	adds	r3, r3, r3
 8004eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	eb42 0303 	adc.w	r3, r2, r3
 8004ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ebe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ec2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ec6:	f7fb f9fb 	bl	80002c0 <__aeabi_uldivmod>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	4b3b      	ldr	r3, [pc, #236]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	2264      	movs	r2, #100	; 0x64
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	1acb      	subs	r3, r1, r3
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ee6:	4b36      	ldr	r3, [pc, #216]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ef4:	441c      	add	r4, r3
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	1891      	adds	r1, r2, r2
 8004f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f10:	415b      	adcs	r3, r3
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f18:	4641      	mov	r1, r8
 8004f1a:	1851      	adds	r1, r2, r1
 8004f1c:	6339      	str	r1, [r7, #48]	; 0x30
 8004f1e:	4649      	mov	r1, r9
 8004f20:	414b      	adcs	r3, r1
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f30:	4659      	mov	r1, fp
 8004f32:	00cb      	lsls	r3, r1, #3
 8004f34:	4651      	mov	r1, sl
 8004f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	00ca      	lsls	r2, r1, #3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	4642      	mov	r2, r8
 8004f46:	189b      	adds	r3, r3, r2
 8004f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	460a      	mov	r2, r1
 8004f50:	eb42 0303 	adc.w	r3, r2, r3
 8004f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	18db      	adds	r3, r3, r3
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f72:	4613      	mov	r3, r2
 8004f74:	eb42 0303 	adc.w	r3, r2, r3
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f82:	f7fb f99d 	bl	80002c0 <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	2164      	movs	r1, #100	; 0x64
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	3332      	adds	r3, #50	; 0x32
 8004f9e:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f003 0207 	and.w	r2, r3, #7
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4422      	add	r2, r4
 8004fb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fb4:	e105      	b.n	80051c2 <UART_SetConfig+0x4d6>
 8004fb6:	bf00      	nop
 8004fb8:	40011000 	.word	0x40011000
 8004fbc:	40011400 	.word	0x40011400
 8004fc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fd6:	4642      	mov	r2, r8
 8004fd8:	464b      	mov	r3, r9
 8004fda:	1891      	adds	r1, r2, r2
 8004fdc:	6239      	str	r1, [r7, #32]
 8004fde:	415b      	adcs	r3, r3
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	1854      	adds	r4, r2, r1
 8004fea:	4649      	mov	r1, r9
 8004fec:	eb43 0501 	adc.w	r5, r3, r1
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	00eb      	lsls	r3, r5, #3
 8004ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffe:	00e2      	lsls	r2, r4, #3
 8005000:	4614      	mov	r4, r2
 8005002:	461d      	mov	r5, r3
 8005004:	4643      	mov	r3, r8
 8005006:	18e3      	adds	r3, r4, r3
 8005008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800500c:	464b      	mov	r3, r9
 800500e:	eb45 0303 	adc.w	r3, r5, r3
 8005012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005022:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005032:	4629      	mov	r1, r5
 8005034:	008b      	lsls	r3, r1, #2
 8005036:	4621      	mov	r1, r4
 8005038:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800503c:	4621      	mov	r1, r4
 800503e:	008a      	lsls	r2, r1, #2
 8005040:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005044:	f7fb f93c 	bl	80002c0 <__aeabi_uldivmod>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4b60      	ldr	r3, [pc, #384]	; (80051d0 <UART_SetConfig+0x4e4>)
 800504e:	fba3 2302 	umull	r2, r3, r3, r2
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	011c      	lsls	r4, r3, #4
 8005056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800505a:	2200      	movs	r2, #0
 800505c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005060:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005064:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005068:	4642      	mov	r2, r8
 800506a:	464b      	mov	r3, r9
 800506c:	1891      	adds	r1, r2, r2
 800506e:	61b9      	str	r1, [r7, #24]
 8005070:	415b      	adcs	r3, r3
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005078:	4641      	mov	r1, r8
 800507a:	1851      	adds	r1, r2, r1
 800507c:	6139      	str	r1, [r7, #16]
 800507e:	4649      	mov	r1, r9
 8005080:	414b      	adcs	r3, r1
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005090:	4659      	mov	r1, fp
 8005092:	00cb      	lsls	r3, r1, #3
 8005094:	4651      	mov	r1, sl
 8005096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800509a:	4651      	mov	r1, sl
 800509c:	00ca      	lsls	r2, r1, #3
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	4642      	mov	r2, r8
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050ac:	464b      	mov	r3, r9
 80050ae:	460a      	mov	r2, r1
 80050b0:	eb42 0303 	adc.w	r3, r2, r3
 80050b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80050c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050d0:	4649      	mov	r1, r9
 80050d2:	008b      	lsls	r3, r1, #2
 80050d4:	4641      	mov	r1, r8
 80050d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050da:	4641      	mov	r1, r8
 80050dc:	008a      	lsls	r2, r1, #2
 80050de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050e2:	f7fb f8ed 	bl	80002c0 <__aeabi_uldivmod>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4b39      	ldr	r3, [pc, #228]	; (80051d0 <UART_SetConfig+0x4e4>)
 80050ec:	fba3 1302 	umull	r1, r3, r3, r2
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	2164      	movs	r1, #100	; 0x64
 80050f4:	fb01 f303 	mul.w	r3, r1, r3
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	011b      	lsls	r3, r3, #4
 80050fc:	3332      	adds	r3, #50	; 0x32
 80050fe:	4a34      	ldr	r2, [pc, #208]	; (80051d0 <UART_SetConfig+0x4e4>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	095b      	lsrs	r3, r3, #5
 8005106:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800510a:	441c      	add	r4, r3
 800510c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005110:	2200      	movs	r2, #0
 8005112:	673b      	str	r3, [r7, #112]	; 0x70
 8005114:	677a      	str	r2, [r7, #116]	; 0x74
 8005116:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800511a:	4642      	mov	r2, r8
 800511c:	464b      	mov	r3, r9
 800511e:	1891      	adds	r1, r2, r2
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	415b      	adcs	r3, r3
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800512a:	4641      	mov	r1, r8
 800512c:	1851      	adds	r1, r2, r1
 800512e:	6039      	str	r1, [r7, #0]
 8005130:	4649      	mov	r1, r9
 8005132:	414b      	adcs	r3, r1
 8005134:	607b      	str	r3, [r7, #4]
 8005136:	f04f 0200 	mov.w	r2, #0
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005142:	4659      	mov	r1, fp
 8005144:	00cb      	lsls	r3, r1, #3
 8005146:	4651      	mov	r1, sl
 8005148:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800514c:	4651      	mov	r1, sl
 800514e:	00ca      	lsls	r2, r1, #3
 8005150:	4610      	mov	r0, r2
 8005152:	4619      	mov	r1, r3
 8005154:	4603      	mov	r3, r0
 8005156:	4642      	mov	r2, r8
 8005158:	189b      	adds	r3, r3, r2
 800515a:	66bb      	str	r3, [r7, #104]	; 0x68
 800515c:	464b      	mov	r3, r9
 800515e:	460a      	mov	r2, r1
 8005160:	eb42 0303 	adc.w	r3, r2, r3
 8005164:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	663b      	str	r3, [r7, #96]	; 0x60
 8005170:	667a      	str	r2, [r7, #100]	; 0x64
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800517e:	4649      	mov	r1, r9
 8005180:	008b      	lsls	r3, r1, #2
 8005182:	4641      	mov	r1, r8
 8005184:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005188:	4641      	mov	r1, r8
 800518a:	008a      	lsls	r2, r1, #2
 800518c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005190:	f7fb f896 	bl	80002c0 <__aeabi_uldivmod>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <UART_SetConfig+0x4e4>)
 800519a:	fba3 1302 	umull	r1, r3, r3, r2
 800519e:	095b      	lsrs	r3, r3, #5
 80051a0:	2164      	movs	r1, #100	; 0x64
 80051a2:	fb01 f303 	mul.w	r3, r1, r3
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	011b      	lsls	r3, r3, #4
 80051aa:	3332      	adds	r3, #50	; 0x32
 80051ac:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <UART_SetConfig+0x4e4>)
 80051ae:	fba2 2303 	umull	r2, r3, r2, r3
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	f003 020f 	and.w	r2, r3, #15
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4422      	add	r2, r4
 80051c0:	609a      	str	r2, [r3, #8]
}
 80051c2:	bf00      	nop
 80051c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051c8:	46bd      	mov	sp, r7
 80051ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ce:	bf00      	nop
 80051d0:	51eb851f 	.word	0x51eb851f

080051d4 <__libc_init_array>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4d0d      	ldr	r5, [pc, #52]	; (800520c <__libc_init_array+0x38>)
 80051d8:	4c0d      	ldr	r4, [pc, #52]	; (8005210 <__libc_init_array+0x3c>)
 80051da:	1b64      	subs	r4, r4, r5
 80051dc:	10a4      	asrs	r4, r4, #2
 80051de:	2600      	movs	r6, #0
 80051e0:	42a6      	cmp	r6, r4
 80051e2:	d109      	bne.n	80051f8 <__libc_init_array+0x24>
 80051e4:	4d0b      	ldr	r5, [pc, #44]	; (8005214 <__libc_init_array+0x40>)
 80051e6:	4c0c      	ldr	r4, [pc, #48]	; (8005218 <__libc_init_array+0x44>)
 80051e8:	f000 fcaa 	bl	8005b40 <_init>
 80051ec:	1b64      	subs	r4, r4, r5
 80051ee:	10a4      	asrs	r4, r4, #2
 80051f0:	2600      	movs	r6, #0
 80051f2:	42a6      	cmp	r6, r4
 80051f4:	d105      	bne.n	8005202 <__libc_init_array+0x2e>
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fc:	4798      	blx	r3
 80051fe:	3601      	adds	r6, #1
 8005200:	e7ee      	b.n	80051e0 <__libc_init_array+0xc>
 8005202:	f855 3b04 	ldr.w	r3, [r5], #4
 8005206:	4798      	blx	r3
 8005208:	3601      	adds	r6, #1
 800520a:	e7f2      	b.n	80051f2 <__libc_init_array+0x1e>
 800520c:	08005bb4 	.word	0x08005bb4
 8005210:	08005bb4 	.word	0x08005bb4
 8005214:	08005bb4 	.word	0x08005bb4
 8005218:	08005bb8 	.word	0x08005bb8

0800521c <memset>:
 800521c:	4402      	add	r2, r0
 800521e:	4603      	mov	r3, r0
 8005220:	4293      	cmp	r3, r2
 8005222:	d100      	bne.n	8005226 <memset+0xa>
 8005224:	4770      	bx	lr
 8005226:	f803 1b01 	strb.w	r1, [r3], #1
 800522a:	e7f9      	b.n	8005220 <memset+0x4>

0800522c <siprintf>:
 800522c:	b40e      	push	{r1, r2, r3}
 800522e:	b500      	push	{lr}
 8005230:	b09c      	sub	sp, #112	; 0x70
 8005232:	ab1d      	add	r3, sp, #116	; 0x74
 8005234:	9002      	str	r0, [sp, #8]
 8005236:	9006      	str	r0, [sp, #24]
 8005238:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800523c:	4809      	ldr	r0, [pc, #36]	; (8005264 <siprintf+0x38>)
 800523e:	9107      	str	r1, [sp, #28]
 8005240:	9104      	str	r1, [sp, #16]
 8005242:	4909      	ldr	r1, [pc, #36]	; (8005268 <siprintf+0x3c>)
 8005244:	f853 2b04 	ldr.w	r2, [r3], #4
 8005248:	9105      	str	r1, [sp, #20]
 800524a:	6800      	ldr	r0, [r0, #0]
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	a902      	add	r1, sp, #8
 8005250:	f000 f876 	bl	8005340 <_svfiprintf_r>
 8005254:	9b02      	ldr	r3, [sp, #8]
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	b01c      	add	sp, #112	; 0x70
 800525c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005260:	b003      	add	sp, #12
 8005262:	4770      	bx	lr
 8005264:	20000014 	.word	0x20000014
 8005268:	ffff0208 	.word	0xffff0208

0800526c <strcat>:
 800526c:	b510      	push	{r4, lr}
 800526e:	4602      	mov	r2, r0
 8005270:	7814      	ldrb	r4, [r2, #0]
 8005272:	4613      	mov	r3, r2
 8005274:	3201      	adds	r2, #1
 8005276:	2c00      	cmp	r4, #0
 8005278:	d1fa      	bne.n	8005270 <strcat+0x4>
 800527a:	3b01      	subs	r3, #1
 800527c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005280:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005284:	2a00      	cmp	r2, #0
 8005286:	d1f9      	bne.n	800527c <strcat+0x10>
 8005288:	bd10      	pop	{r4, pc}

0800528a <__ssputs_r>:
 800528a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800528e:	688e      	ldr	r6, [r1, #8]
 8005290:	429e      	cmp	r6, r3
 8005292:	4682      	mov	sl, r0
 8005294:	460c      	mov	r4, r1
 8005296:	4690      	mov	r8, r2
 8005298:	461f      	mov	r7, r3
 800529a:	d838      	bhi.n	800530e <__ssputs_r+0x84>
 800529c:	898a      	ldrh	r2, [r1, #12]
 800529e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80052a2:	d032      	beq.n	800530a <__ssputs_r+0x80>
 80052a4:	6825      	ldr	r5, [r4, #0]
 80052a6:	6909      	ldr	r1, [r1, #16]
 80052a8:	eba5 0901 	sub.w	r9, r5, r1
 80052ac:	6965      	ldr	r5, [r4, #20]
 80052ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052b6:	3301      	adds	r3, #1
 80052b8:	444b      	add	r3, r9
 80052ba:	106d      	asrs	r5, r5, #1
 80052bc:	429d      	cmp	r5, r3
 80052be:	bf38      	it	cc
 80052c0:	461d      	movcc	r5, r3
 80052c2:	0553      	lsls	r3, r2, #21
 80052c4:	d531      	bpl.n	800532a <__ssputs_r+0xa0>
 80052c6:	4629      	mov	r1, r5
 80052c8:	f000 fb62 	bl	8005990 <_malloc_r>
 80052cc:	4606      	mov	r6, r0
 80052ce:	b950      	cbnz	r0, 80052e6 <__ssputs_r+0x5c>
 80052d0:	230c      	movs	r3, #12
 80052d2:	f8ca 3000 	str.w	r3, [sl]
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	f04f 30ff 	mov.w	r0, #4294967295
 80052e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e6:	6921      	ldr	r1, [r4, #16]
 80052e8:	464a      	mov	r2, r9
 80052ea:	f000 fabd 	bl	8005868 <memcpy>
 80052ee:	89a3      	ldrh	r3, [r4, #12]
 80052f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f8:	81a3      	strh	r3, [r4, #12]
 80052fa:	6126      	str	r6, [r4, #16]
 80052fc:	6165      	str	r5, [r4, #20]
 80052fe:	444e      	add	r6, r9
 8005300:	eba5 0509 	sub.w	r5, r5, r9
 8005304:	6026      	str	r6, [r4, #0]
 8005306:	60a5      	str	r5, [r4, #8]
 8005308:	463e      	mov	r6, r7
 800530a:	42be      	cmp	r6, r7
 800530c:	d900      	bls.n	8005310 <__ssputs_r+0x86>
 800530e:	463e      	mov	r6, r7
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	4632      	mov	r2, r6
 8005314:	4641      	mov	r1, r8
 8005316:	f000 fab5 	bl	8005884 <memmove>
 800531a:	68a3      	ldr	r3, [r4, #8]
 800531c:	1b9b      	subs	r3, r3, r6
 800531e:	60a3      	str	r3, [r4, #8]
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	4433      	add	r3, r6
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	2000      	movs	r0, #0
 8005328:	e7db      	b.n	80052e2 <__ssputs_r+0x58>
 800532a:	462a      	mov	r2, r5
 800532c:	f000 fba4 	bl	8005a78 <_realloc_r>
 8005330:	4606      	mov	r6, r0
 8005332:	2800      	cmp	r0, #0
 8005334:	d1e1      	bne.n	80052fa <__ssputs_r+0x70>
 8005336:	6921      	ldr	r1, [r4, #16]
 8005338:	4650      	mov	r0, sl
 800533a:	f000 fabd 	bl	80058b8 <_free_r>
 800533e:	e7c7      	b.n	80052d0 <__ssputs_r+0x46>

08005340 <_svfiprintf_r>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	4698      	mov	r8, r3
 8005346:	898b      	ldrh	r3, [r1, #12]
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	b09d      	sub	sp, #116	; 0x74
 800534c:	4607      	mov	r7, r0
 800534e:	460d      	mov	r5, r1
 8005350:	4614      	mov	r4, r2
 8005352:	d50e      	bpl.n	8005372 <_svfiprintf_r+0x32>
 8005354:	690b      	ldr	r3, [r1, #16]
 8005356:	b963      	cbnz	r3, 8005372 <_svfiprintf_r+0x32>
 8005358:	2140      	movs	r1, #64	; 0x40
 800535a:	f000 fb19 	bl	8005990 <_malloc_r>
 800535e:	6028      	str	r0, [r5, #0]
 8005360:	6128      	str	r0, [r5, #16]
 8005362:	b920      	cbnz	r0, 800536e <_svfiprintf_r+0x2e>
 8005364:	230c      	movs	r3, #12
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	f04f 30ff 	mov.w	r0, #4294967295
 800536c:	e0d1      	b.n	8005512 <_svfiprintf_r+0x1d2>
 800536e:	2340      	movs	r3, #64	; 0x40
 8005370:	616b      	str	r3, [r5, #20]
 8005372:	2300      	movs	r3, #0
 8005374:	9309      	str	r3, [sp, #36]	; 0x24
 8005376:	2320      	movs	r3, #32
 8005378:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800537c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005380:	2330      	movs	r3, #48	; 0x30
 8005382:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800552c <_svfiprintf_r+0x1ec>
 8005386:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800538a:	f04f 0901 	mov.w	r9, #1
 800538e:	4623      	mov	r3, r4
 8005390:	469a      	mov	sl, r3
 8005392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005396:	b10a      	cbz	r2, 800539c <_svfiprintf_r+0x5c>
 8005398:	2a25      	cmp	r2, #37	; 0x25
 800539a:	d1f9      	bne.n	8005390 <_svfiprintf_r+0x50>
 800539c:	ebba 0b04 	subs.w	fp, sl, r4
 80053a0:	d00b      	beq.n	80053ba <_svfiprintf_r+0x7a>
 80053a2:	465b      	mov	r3, fp
 80053a4:	4622      	mov	r2, r4
 80053a6:	4629      	mov	r1, r5
 80053a8:	4638      	mov	r0, r7
 80053aa:	f7ff ff6e 	bl	800528a <__ssputs_r>
 80053ae:	3001      	adds	r0, #1
 80053b0:	f000 80aa 	beq.w	8005508 <_svfiprintf_r+0x1c8>
 80053b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053b6:	445a      	add	r2, fp
 80053b8:	9209      	str	r2, [sp, #36]	; 0x24
 80053ba:	f89a 3000 	ldrb.w	r3, [sl]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 80a2 	beq.w	8005508 <_svfiprintf_r+0x1c8>
 80053c4:	2300      	movs	r3, #0
 80053c6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053ce:	f10a 0a01 	add.w	sl, sl, #1
 80053d2:	9304      	str	r3, [sp, #16]
 80053d4:	9307      	str	r3, [sp, #28]
 80053d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053da:	931a      	str	r3, [sp, #104]	; 0x68
 80053dc:	4654      	mov	r4, sl
 80053de:	2205      	movs	r2, #5
 80053e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053e4:	4851      	ldr	r0, [pc, #324]	; (800552c <_svfiprintf_r+0x1ec>)
 80053e6:	f7fa ff1b 	bl	8000220 <memchr>
 80053ea:	9a04      	ldr	r2, [sp, #16]
 80053ec:	b9d8      	cbnz	r0, 8005426 <_svfiprintf_r+0xe6>
 80053ee:	06d0      	lsls	r0, r2, #27
 80053f0:	bf44      	itt	mi
 80053f2:	2320      	movmi	r3, #32
 80053f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f8:	0711      	lsls	r1, r2, #28
 80053fa:	bf44      	itt	mi
 80053fc:	232b      	movmi	r3, #43	; 0x2b
 80053fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005402:	f89a 3000 	ldrb.w	r3, [sl]
 8005406:	2b2a      	cmp	r3, #42	; 0x2a
 8005408:	d015      	beq.n	8005436 <_svfiprintf_r+0xf6>
 800540a:	9a07      	ldr	r2, [sp, #28]
 800540c:	4654      	mov	r4, sl
 800540e:	2000      	movs	r0, #0
 8005410:	f04f 0c0a 	mov.w	ip, #10
 8005414:	4621      	mov	r1, r4
 8005416:	f811 3b01 	ldrb.w	r3, [r1], #1
 800541a:	3b30      	subs	r3, #48	; 0x30
 800541c:	2b09      	cmp	r3, #9
 800541e:	d94e      	bls.n	80054be <_svfiprintf_r+0x17e>
 8005420:	b1b0      	cbz	r0, 8005450 <_svfiprintf_r+0x110>
 8005422:	9207      	str	r2, [sp, #28]
 8005424:	e014      	b.n	8005450 <_svfiprintf_r+0x110>
 8005426:	eba0 0308 	sub.w	r3, r0, r8
 800542a:	fa09 f303 	lsl.w	r3, r9, r3
 800542e:	4313      	orrs	r3, r2
 8005430:	9304      	str	r3, [sp, #16]
 8005432:	46a2      	mov	sl, r4
 8005434:	e7d2      	b.n	80053dc <_svfiprintf_r+0x9c>
 8005436:	9b03      	ldr	r3, [sp, #12]
 8005438:	1d19      	adds	r1, r3, #4
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	9103      	str	r1, [sp, #12]
 800543e:	2b00      	cmp	r3, #0
 8005440:	bfbb      	ittet	lt
 8005442:	425b      	neglt	r3, r3
 8005444:	f042 0202 	orrlt.w	r2, r2, #2
 8005448:	9307      	strge	r3, [sp, #28]
 800544a:	9307      	strlt	r3, [sp, #28]
 800544c:	bfb8      	it	lt
 800544e:	9204      	strlt	r2, [sp, #16]
 8005450:	7823      	ldrb	r3, [r4, #0]
 8005452:	2b2e      	cmp	r3, #46	; 0x2e
 8005454:	d10c      	bne.n	8005470 <_svfiprintf_r+0x130>
 8005456:	7863      	ldrb	r3, [r4, #1]
 8005458:	2b2a      	cmp	r3, #42	; 0x2a
 800545a:	d135      	bne.n	80054c8 <_svfiprintf_r+0x188>
 800545c:	9b03      	ldr	r3, [sp, #12]
 800545e:	1d1a      	adds	r2, r3, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	9203      	str	r2, [sp, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	bfb8      	it	lt
 8005468:	f04f 33ff 	movlt.w	r3, #4294967295
 800546c:	3402      	adds	r4, #2
 800546e:	9305      	str	r3, [sp, #20]
 8005470:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800553c <_svfiprintf_r+0x1fc>
 8005474:	7821      	ldrb	r1, [r4, #0]
 8005476:	2203      	movs	r2, #3
 8005478:	4650      	mov	r0, sl
 800547a:	f7fa fed1 	bl	8000220 <memchr>
 800547e:	b140      	cbz	r0, 8005492 <_svfiprintf_r+0x152>
 8005480:	2340      	movs	r3, #64	; 0x40
 8005482:	eba0 000a 	sub.w	r0, r0, sl
 8005486:	fa03 f000 	lsl.w	r0, r3, r0
 800548a:	9b04      	ldr	r3, [sp, #16]
 800548c:	4303      	orrs	r3, r0
 800548e:	3401      	adds	r4, #1
 8005490:	9304      	str	r3, [sp, #16]
 8005492:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005496:	4826      	ldr	r0, [pc, #152]	; (8005530 <_svfiprintf_r+0x1f0>)
 8005498:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800549c:	2206      	movs	r2, #6
 800549e:	f7fa febf 	bl	8000220 <memchr>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d038      	beq.n	8005518 <_svfiprintf_r+0x1d8>
 80054a6:	4b23      	ldr	r3, [pc, #140]	; (8005534 <_svfiprintf_r+0x1f4>)
 80054a8:	bb1b      	cbnz	r3, 80054f2 <_svfiprintf_r+0x1b2>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	3307      	adds	r3, #7
 80054ae:	f023 0307 	bic.w	r3, r3, #7
 80054b2:	3308      	adds	r3, #8
 80054b4:	9303      	str	r3, [sp, #12]
 80054b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054b8:	4433      	add	r3, r6
 80054ba:	9309      	str	r3, [sp, #36]	; 0x24
 80054bc:	e767      	b.n	800538e <_svfiprintf_r+0x4e>
 80054be:	fb0c 3202 	mla	r2, ip, r2, r3
 80054c2:	460c      	mov	r4, r1
 80054c4:	2001      	movs	r0, #1
 80054c6:	e7a5      	b.n	8005414 <_svfiprintf_r+0xd4>
 80054c8:	2300      	movs	r3, #0
 80054ca:	3401      	adds	r4, #1
 80054cc:	9305      	str	r3, [sp, #20]
 80054ce:	4619      	mov	r1, r3
 80054d0:	f04f 0c0a 	mov.w	ip, #10
 80054d4:	4620      	mov	r0, r4
 80054d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054da:	3a30      	subs	r2, #48	; 0x30
 80054dc:	2a09      	cmp	r2, #9
 80054de:	d903      	bls.n	80054e8 <_svfiprintf_r+0x1a8>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0c5      	beq.n	8005470 <_svfiprintf_r+0x130>
 80054e4:	9105      	str	r1, [sp, #20]
 80054e6:	e7c3      	b.n	8005470 <_svfiprintf_r+0x130>
 80054e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80054ec:	4604      	mov	r4, r0
 80054ee:	2301      	movs	r3, #1
 80054f0:	e7f0      	b.n	80054d4 <_svfiprintf_r+0x194>
 80054f2:	ab03      	add	r3, sp, #12
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	462a      	mov	r2, r5
 80054f8:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <_svfiprintf_r+0x1f8>)
 80054fa:	a904      	add	r1, sp, #16
 80054fc:	4638      	mov	r0, r7
 80054fe:	f3af 8000 	nop.w
 8005502:	1c42      	adds	r2, r0, #1
 8005504:	4606      	mov	r6, r0
 8005506:	d1d6      	bne.n	80054b6 <_svfiprintf_r+0x176>
 8005508:	89ab      	ldrh	r3, [r5, #12]
 800550a:	065b      	lsls	r3, r3, #25
 800550c:	f53f af2c 	bmi.w	8005368 <_svfiprintf_r+0x28>
 8005510:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005512:	b01d      	add	sp, #116	; 0x74
 8005514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005518:	ab03      	add	r3, sp, #12
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	462a      	mov	r2, r5
 800551e:	4b06      	ldr	r3, [pc, #24]	; (8005538 <_svfiprintf_r+0x1f8>)
 8005520:	a904      	add	r1, sp, #16
 8005522:	4638      	mov	r0, r7
 8005524:	f000 f87a 	bl	800561c <_printf_i>
 8005528:	e7eb      	b.n	8005502 <_svfiprintf_r+0x1c2>
 800552a:	bf00      	nop
 800552c:	08005b78 	.word	0x08005b78
 8005530:	08005b82 	.word	0x08005b82
 8005534:	00000000 	.word	0x00000000
 8005538:	0800528b 	.word	0x0800528b
 800553c:	08005b7e 	.word	0x08005b7e

08005540 <_printf_common>:
 8005540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	4616      	mov	r6, r2
 8005546:	4699      	mov	r9, r3
 8005548:	688a      	ldr	r2, [r1, #8]
 800554a:	690b      	ldr	r3, [r1, #16]
 800554c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005550:	4293      	cmp	r3, r2
 8005552:	bfb8      	it	lt
 8005554:	4613      	movlt	r3, r2
 8005556:	6033      	str	r3, [r6, #0]
 8005558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800555c:	4607      	mov	r7, r0
 800555e:	460c      	mov	r4, r1
 8005560:	b10a      	cbz	r2, 8005566 <_printf_common+0x26>
 8005562:	3301      	adds	r3, #1
 8005564:	6033      	str	r3, [r6, #0]
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	0699      	lsls	r1, r3, #26
 800556a:	bf42      	ittt	mi
 800556c:	6833      	ldrmi	r3, [r6, #0]
 800556e:	3302      	addmi	r3, #2
 8005570:	6033      	strmi	r3, [r6, #0]
 8005572:	6825      	ldr	r5, [r4, #0]
 8005574:	f015 0506 	ands.w	r5, r5, #6
 8005578:	d106      	bne.n	8005588 <_printf_common+0x48>
 800557a:	f104 0a19 	add.w	sl, r4, #25
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	6832      	ldr	r2, [r6, #0]
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	42ab      	cmp	r3, r5
 8005586:	dc26      	bgt.n	80055d6 <_printf_common+0x96>
 8005588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800558c:	1e13      	subs	r3, r2, #0
 800558e:	6822      	ldr	r2, [r4, #0]
 8005590:	bf18      	it	ne
 8005592:	2301      	movne	r3, #1
 8005594:	0692      	lsls	r2, r2, #26
 8005596:	d42b      	bmi.n	80055f0 <_printf_common+0xb0>
 8005598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800559c:	4649      	mov	r1, r9
 800559e:	4638      	mov	r0, r7
 80055a0:	47c0      	blx	r8
 80055a2:	3001      	adds	r0, #1
 80055a4:	d01e      	beq.n	80055e4 <_printf_common+0xa4>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	68e5      	ldr	r5, [r4, #12]
 80055aa:	6832      	ldr	r2, [r6, #0]
 80055ac:	f003 0306 	and.w	r3, r3, #6
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	bf08      	it	eq
 80055b4:	1aad      	subeq	r5, r5, r2
 80055b6:	68a3      	ldr	r3, [r4, #8]
 80055b8:	6922      	ldr	r2, [r4, #16]
 80055ba:	bf0c      	ite	eq
 80055bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055c0:	2500      	movne	r5, #0
 80055c2:	4293      	cmp	r3, r2
 80055c4:	bfc4      	itt	gt
 80055c6:	1a9b      	subgt	r3, r3, r2
 80055c8:	18ed      	addgt	r5, r5, r3
 80055ca:	2600      	movs	r6, #0
 80055cc:	341a      	adds	r4, #26
 80055ce:	42b5      	cmp	r5, r6
 80055d0:	d11a      	bne.n	8005608 <_printf_common+0xc8>
 80055d2:	2000      	movs	r0, #0
 80055d4:	e008      	b.n	80055e8 <_printf_common+0xa8>
 80055d6:	2301      	movs	r3, #1
 80055d8:	4652      	mov	r2, sl
 80055da:	4649      	mov	r1, r9
 80055dc:	4638      	mov	r0, r7
 80055de:	47c0      	blx	r8
 80055e0:	3001      	adds	r0, #1
 80055e2:	d103      	bne.n	80055ec <_printf_common+0xac>
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ec:	3501      	adds	r5, #1
 80055ee:	e7c6      	b.n	800557e <_printf_common+0x3e>
 80055f0:	18e1      	adds	r1, r4, r3
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	2030      	movs	r0, #48	; 0x30
 80055f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055fa:	4422      	add	r2, r4
 80055fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005604:	3302      	adds	r3, #2
 8005606:	e7c7      	b.n	8005598 <_printf_common+0x58>
 8005608:	2301      	movs	r3, #1
 800560a:	4622      	mov	r2, r4
 800560c:	4649      	mov	r1, r9
 800560e:	4638      	mov	r0, r7
 8005610:	47c0      	blx	r8
 8005612:	3001      	adds	r0, #1
 8005614:	d0e6      	beq.n	80055e4 <_printf_common+0xa4>
 8005616:	3601      	adds	r6, #1
 8005618:	e7d9      	b.n	80055ce <_printf_common+0x8e>
	...

0800561c <_printf_i>:
 800561c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	7e0f      	ldrb	r7, [r1, #24]
 8005622:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005624:	2f78      	cmp	r7, #120	; 0x78
 8005626:	4691      	mov	r9, r2
 8005628:	4680      	mov	r8, r0
 800562a:	460c      	mov	r4, r1
 800562c:	469a      	mov	sl, r3
 800562e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005632:	d807      	bhi.n	8005644 <_printf_i+0x28>
 8005634:	2f62      	cmp	r7, #98	; 0x62
 8005636:	d80a      	bhi.n	800564e <_printf_i+0x32>
 8005638:	2f00      	cmp	r7, #0
 800563a:	f000 80d8 	beq.w	80057ee <_printf_i+0x1d2>
 800563e:	2f58      	cmp	r7, #88	; 0x58
 8005640:	f000 80a3 	beq.w	800578a <_printf_i+0x16e>
 8005644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800564c:	e03a      	b.n	80056c4 <_printf_i+0xa8>
 800564e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005652:	2b15      	cmp	r3, #21
 8005654:	d8f6      	bhi.n	8005644 <_printf_i+0x28>
 8005656:	a101      	add	r1, pc, #4	; (adr r1, 800565c <_printf_i+0x40>)
 8005658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800565c:	080056b5 	.word	0x080056b5
 8005660:	080056c9 	.word	0x080056c9
 8005664:	08005645 	.word	0x08005645
 8005668:	08005645 	.word	0x08005645
 800566c:	08005645 	.word	0x08005645
 8005670:	08005645 	.word	0x08005645
 8005674:	080056c9 	.word	0x080056c9
 8005678:	08005645 	.word	0x08005645
 800567c:	08005645 	.word	0x08005645
 8005680:	08005645 	.word	0x08005645
 8005684:	08005645 	.word	0x08005645
 8005688:	080057d5 	.word	0x080057d5
 800568c:	080056f9 	.word	0x080056f9
 8005690:	080057b7 	.word	0x080057b7
 8005694:	08005645 	.word	0x08005645
 8005698:	08005645 	.word	0x08005645
 800569c:	080057f7 	.word	0x080057f7
 80056a0:	08005645 	.word	0x08005645
 80056a4:	080056f9 	.word	0x080056f9
 80056a8:	08005645 	.word	0x08005645
 80056ac:	08005645 	.word	0x08005645
 80056b0:	080057bf 	.word	0x080057bf
 80056b4:	682b      	ldr	r3, [r5, #0]
 80056b6:	1d1a      	adds	r2, r3, #4
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	602a      	str	r2, [r5, #0]
 80056bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0a3      	b.n	8005810 <_printf_i+0x1f4>
 80056c8:	6820      	ldr	r0, [r4, #0]
 80056ca:	6829      	ldr	r1, [r5, #0]
 80056cc:	0606      	lsls	r6, r0, #24
 80056ce:	f101 0304 	add.w	r3, r1, #4
 80056d2:	d50a      	bpl.n	80056ea <_printf_i+0xce>
 80056d4:	680e      	ldr	r6, [r1, #0]
 80056d6:	602b      	str	r3, [r5, #0]
 80056d8:	2e00      	cmp	r6, #0
 80056da:	da03      	bge.n	80056e4 <_printf_i+0xc8>
 80056dc:	232d      	movs	r3, #45	; 0x2d
 80056de:	4276      	negs	r6, r6
 80056e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e4:	485e      	ldr	r0, [pc, #376]	; (8005860 <_printf_i+0x244>)
 80056e6:	230a      	movs	r3, #10
 80056e8:	e019      	b.n	800571e <_printf_i+0x102>
 80056ea:	680e      	ldr	r6, [r1, #0]
 80056ec:	602b      	str	r3, [r5, #0]
 80056ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056f2:	bf18      	it	ne
 80056f4:	b236      	sxthne	r6, r6
 80056f6:	e7ef      	b.n	80056d8 <_printf_i+0xbc>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	1d19      	adds	r1, r3, #4
 80056fe:	6029      	str	r1, [r5, #0]
 8005700:	0601      	lsls	r1, r0, #24
 8005702:	d501      	bpl.n	8005708 <_printf_i+0xec>
 8005704:	681e      	ldr	r6, [r3, #0]
 8005706:	e002      	b.n	800570e <_printf_i+0xf2>
 8005708:	0646      	lsls	r6, r0, #25
 800570a:	d5fb      	bpl.n	8005704 <_printf_i+0xe8>
 800570c:	881e      	ldrh	r6, [r3, #0]
 800570e:	4854      	ldr	r0, [pc, #336]	; (8005860 <_printf_i+0x244>)
 8005710:	2f6f      	cmp	r7, #111	; 0x6f
 8005712:	bf0c      	ite	eq
 8005714:	2308      	moveq	r3, #8
 8005716:	230a      	movne	r3, #10
 8005718:	2100      	movs	r1, #0
 800571a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800571e:	6865      	ldr	r5, [r4, #4]
 8005720:	60a5      	str	r5, [r4, #8]
 8005722:	2d00      	cmp	r5, #0
 8005724:	bfa2      	ittt	ge
 8005726:	6821      	ldrge	r1, [r4, #0]
 8005728:	f021 0104 	bicge.w	r1, r1, #4
 800572c:	6021      	strge	r1, [r4, #0]
 800572e:	b90e      	cbnz	r6, 8005734 <_printf_i+0x118>
 8005730:	2d00      	cmp	r5, #0
 8005732:	d04d      	beq.n	80057d0 <_printf_i+0x1b4>
 8005734:	4615      	mov	r5, r2
 8005736:	fbb6 f1f3 	udiv	r1, r6, r3
 800573a:	fb03 6711 	mls	r7, r3, r1, r6
 800573e:	5dc7      	ldrb	r7, [r0, r7]
 8005740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005744:	4637      	mov	r7, r6
 8005746:	42bb      	cmp	r3, r7
 8005748:	460e      	mov	r6, r1
 800574a:	d9f4      	bls.n	8005736 <_printf_i+0x11a>
 800574c:	2b08      	cmp	r3, #8
 800574e:	d10b      	bne.n	8005768 <_printf_i+0x14c>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	07de      	lsls	r6, r3, #31
 8005754:	d508      	bpl.n	8005768 <_printf_i+0x14c>
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	6861      	ldr	r1, [r4, #4]
 800575a:	4299      	cmp	r1, r3
 800575c:	bfde      	ittt	le
 800575e:	2330      	movle	r3, #48	; 0x30
 8005760:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005764:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005768:	1b52      	subs	r2, r2, r5
 800576a:	6122      	str	r2, [r4, #16]
 800576c:	f8cd a000 	str.w	sl, [sp]
 8005770:	464b      	mov	r3, r9
 8005772:	aa03      	add	r2, sp, #12
 8005774:	4621      	mov	r1, r4
 8005776:	4640      	mov	r0, r8
 8005778:	f7ff fee2 	bl	8005540 <_printf_common>
 800577c:	3001      	adds	r0, #1
 800577e:	d14c      	bne.n	800581a <_printf_i+0x1fe>
 8005780:	f04f 30ff 	mov.w	r0, #4294967295
 8005784:	b004      	add	sp, #16
 8005786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578a:	4835      	ldr	r0, [pc, #212]	; (8005860 <_printf_i+0x244>)
 800578c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005790:	6829      	ldr	r1, [r5, #0]
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	f851 6b04 	ldr.w	r6, [r1], #4
 8005798:	6029      	str	r1, [r5, #0]
 800579a:	061d      	lsls	r5, r3, #24
 800579c:	d514      	bpl.n	80057c8 <_printf_i+0x1ac>
 800579e:	07df      	lsls	r7, r3, #31
 80057a0:	bf44      	itt	mi
 80057a2:	f043 0320 	orrmi.w	r3, r3, #32
 80057a6:	6023      	strmi	r3, [r4, #0]
 80057a8:	b91e      	cbnz	r6, 80057b2 <_printf_i+0x196>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	f023 0320 	bic.w	r3, r3, #32
 80057b0:	6023      	str	r3, [r4, #0]
 80057b2:	2310      	movs	r3, #16
 80057b4:	e7b0      	b.n	8005718 <_printf_i+0xfc>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	f043 0320 	orr.w	r3, r3, #32
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	2378      	movs	r3, #120	; 0x78
 80057c0:	4828      	ldr	r0, [pc, #160]	; (8005864 <_printf_i+0x248>)
 80057c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057c6:	e7e3      	b.n	8005790 <_printf_i+0x174>
 80057c8:	0659      	lsls	r1, r3, #25
 80057ca:	bf48      	it	mi
 80057cc:	b2b6      	uxthmi	r6, r6
 80057ce:	e7e6      	b.n	800579e <_printf_i+0x182>
 80057d0:	4615      	mov	r5, r2
 80057d2:	e7bb      	b.n	800574c <_printf_i+0x130>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	6826      	ldr	r6, [r4, #0]
 80057d8:	6961      	ldr	r1, [r4, #20]
 80057da:	1d18      	adds	r0, r3, #4
 80057dc:	6028      	str	r0, [r5, #0]
 80057de:	0635      	lsls	r5, r6, #24
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	d501      	bpl.n	80057e8 <_printf_i+0x1cc>
 80057e4:	6019      	str	r1, [r3, #0]
 80057e6:	e002      	b.n	80057ee <_printf_i+0x1d2>
 80057e8:	0670      	lsls	r0, r6, #25
 80057ea:	d5fb      	bpl.n	80057e4 <_printf_i+0x1c8>
 80057ec:	8019      	strh	r1, [r3, #0]
 80057ee:	2300      	movs	r3, #0
 80057f0:	6123      	str	r3, [r4, #16]
 80057f2:	4615      	mov	r5, r2
 80057f4:	e7ba      	b.n	800576c <_printf_i+0x150>
 80057f6:	682b      	ldr	r3, [r5, #0]
 80057f8:	1d1a      	adds	r2, r3, #4
 80057fa:	602a      	str	r2, [r5, #0]
 80057fc:	681d      	ldr	r5, [r3, #0]
 80057fe:	6862      	ldr	r2, [r4, #4]
 8005800:	2100      	movs	r1, #0
 8005802:	4628      	mov	r0, r5
 8005804:	f7fa fd0c 	bl	8000220 <memchr>
 8005808:	b108      	cbz	r0, 800580e <_printf_i+0x1f2>
 800580a:	1b40      	subs	r0, r0, r5
 800580c:	6060      	str	r0, [r4, #4]
 800580e:	6863      	ldr	r3, [r4, #4]
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	2300      	movs	r3, #0
 8005814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005818:	e7a8      	b.n	800576c <_printf_i+0x150>
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	462a      	mov	r2, r5
 800581e:	4649      	mov	r1, r9
 8005820:	4640      	mov	r0, r8
 8005822:	47d0      	blx	sl
 8005824:	3001      	adds	r0, #1
 8005826:	d0ab      	beq.n	8005780 <_printf_i+0x164>
 8005828:	6823      	ldr	r3, [r4, #0]
 800582a:	079b      	lsls	r3, r3, #30
 800582c:	d413      	bmi.n	8005856 <_printf_i+0x23a>
 800582e:	68e0      	ldr	r0, [r4, #12]
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	4298      	cmp	r0, r3
 8005834:	bfb8      	it	lt
 8005836:	4618      	movlt	r0, r3
 8005838:	e7a4      	b.n	8005784 <_printf_i+0x168>
 800583a:	2301      	movs	r3, #1
 800583c:	4632      	mov	r2, r6
 800583e:	4649      	mov	r1, r9
 8005840:	4640      	mov	r0, r8
 8005842:	47d0      	blx	sl
 8005844:	3001      	adds	r0, #1
 8005846:	d09b      	beq.n	8005780 <_printf_i+0x164>
 8005848:	3501      	adds	r5, #1
 800584a:	68e3      	ldr	r3, [r4, #12]
 800584c:	9903      	ldr	r1, [sp, #12]
 800584e:	1a5b      	subs	r3, r3, r1
 8005850:	42ab      	cmp	r3, r5
 8005852:	dcf2      	bgt.n	800583a <_printf_i+0x21e>
 8005854:	e7eb      	b.n	800582e <_printf_i+0x212>
 8005856:	2500      	movs	r5, #0
 8005858:	f104 0619 	add.w	r6, r4, #25
 800585c:	e7f5      	b.n	800584a <_printf_i+0x22e>
 800585e:	bf00      	nop
 8005860:	08005b89 	.word	0x08005b89
 8005864:	08005b9a 	.word	0x08005b9a

08005868 <memcpy>:
 8005868:	440a      	add	r2, r1
 800586a:	4291      	cmp	r1, r2
 800586c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005870:	d100      	bne.n	8005874 <memcpy+0xc>
 8005872:	4770      	bx	lr
 8005874:	b510      	push	{r4, lr}
 8005876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800587a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800587e:	4291      	cmp	r1, r2
 8005880:	d1f9      	bne.n	8005876 <memcpy+0xe>
 8005882:	bd10      	pop	{r4, pc}

08005884 <memmove>:
 8005884:	4288      	cmp	r0, r1
 8005886:	b510      	push	{r4, lr}
 8005888:	eb01 0402 	add.w	r4, r1, r2
 800588c:	d902      	bls.n	8005894 <memmove+0x10>
 800588e:	4284      	cmp	r4, r0
 8005890:	4623      	mov	r3, r4
 8005892:	d807      	bhi.n	80058a4 <memmove+0x20>
 8005894:	1e43      	subs	r3, r0, #1
 8005896:	42a1      	cmp	r1, r4
 8005898:	d008      	beq.n	80058ac <memmove+0x28>
 800589a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800589e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058a2:	e7f8      	b.n	8005896 <memmove+0x12>
 80058a4:	4402      	add	r2, r0
 80058a6:	4601      	mov	r1, r0
 80058a8:	428a      	cmp	r2, r1
 80058aa:	d100      	bne.n	80058ae <memmove+0x2a>
 80058ac:	bd10      	pop	{r4, pc}
 80058ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058b6:	e7f7      	b.n	80058a8 <memmove+0x24>

080058b8 <_free_r>:
 80058b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ba:	2900      	cmp	r1, #0
 80058bc:	d044      	beq.n	8005948 <_free_r+0x90>
 80058be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c2:	9001      	str	r0, [sp, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f1a1 0404 	sub.w	r4, r1, #4
 80058ca:	bfb8      	it	lt
 80058cc:	18e4      	addlt	r4, r4, r3
 80058ce:	f000 f913 	bl	8005af8 <__malloc_lock>
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <_free_r+0x94>)
 80058d4:	9801      	ldr	r0, [sp, #4]
 80058d6:	6813      	ldr	r3, [r2, #0]
 80058d8:	b933      	cbnz	r3, 80058e8 <_free_r+0x30>
 80058da:	6063      	str	r3, [r4, #4]
 80058dc:	6014      	str	r4, [r2, #0]
 80058de:	b003      	add	sp, #12
 80058e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058e4:	f000 b90e 	b.w	8005b04 <__malloc_unlock>
 80058e8:	42a3      	cmp	r3, r4
 80058ea:	d908      	bls.n	80058fe <_free_r+0x46>
 80058ec:	6825      	ldr	r5, [r4, #0]
 80058ee:	1961      	adds	r1, r4, r5
 80058f0:	428b      	cmp	r3, r1
 80058f2:	bf01      	itttt	eq
 80058f4:	6819      	ldreq	r1, [r3, #0]
 80058f6:	685b      	ldreq	r3, [r3, #4]
 80058f8:	1949      	addeq	r1, r1, r5
 80058fa:	6021      	streq	r1, [r4, #0]
 80058fc:	e7ed      	b.n	80058da <_free_r+0x22>
 80058fe:	461a      	mov	r2, r3
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	b10b      	cbz	r3, 8005908 <_free_r+0x50>
 8005904:	42a3      	cmp	r3, r4
 8005906:	d9fa      	bls.n	80058fe <_free_r+0x46>
 8005908:	6811      	ldr	r1, [r2, #0]
 800590a:	1855      	adds	r5, r2, r1
 800590c:	42a5      	cmp	r5, r4
 800590e:	d10b      	bne.n	8005928 <_free_r+0x70>
 8005910:	6824      	ldr	r4, [r4, #0]
 8005912:	4421      	add	r1, r4
 8005914:	1854      	adds	r4, r2, r1
 8005916:	42a3      	cmp	r3, r4
 8005918:	6011      	str	r1, [r2, #0]
 800591a:	d1e0      	bne.n	80058de <_free_r+0x26>
 800591c:	681c      	ldr	r4, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	6053      	str	r3, [r2, #4]
 8005922:	4421      	add	r1, r4
 8005924:	6011      	str	r1, [r2, #0]
 8005926:	e7da      	b.n	80058de <_free_r+0x26>
 8005928:	d902      	bls.n	8005930 <_free_r+0x78>
 800592a:	230c      	movs	r3, #12
 800592c:	6003      	str	r3, [r0, #0]
 800592e:	e7d6      	b.n	80058de <_free_r+0x26>
 8005930:	6825      	ldr	r5, [r4, #0]
 8005932:	1961      	adds	r1, r4, r5
 8005934:	428b      	cmp	r3, r1
 8005936:	bf04      	itt	eq
 8005938:	6819      	ldreq	r1, [r3, #0]
 800593a:	685b      	ldreq	r3, [r3, #4]
 800593c:	6063      	str	r3, [r4, #4]
 800593e:	bf04      	itt	eq
 8005940:	1949      	addeq	r1, r1, r5
 8005942:	6021      	streq	r1, [r4, #0]
 8005944:	6054      	str	r4, [r2, #4]
 8005946:	e7ca      	b.n	80058de <_free_r+0x26>
 8005948:	b003      	add	sp, #12
 800594a:	bd30      	pop	{r4, r5, pc}
 800594c:	200005a0 	.word	0x200005a0

08005950 <sbrk_aligned>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	4e0e      	ldr	r6, [pc, #56]	; (800598c <sbrk_aligned+0x3c>)
 8005954:	460c      	mov	r4, r1
 8005956:	6831      	ldr	r1, [r6, #0]
 8005958:	4605      	mov	r5, r0
 800595a:	b911      	cbnz	r1, 8005962 <sbrk_aligned+0x12>
 800595c:	f000 f8bc 	bl	8005ad8 <_sbrk_r>
 8005960:	6030      	str	r0, [r6, #0]
 8005962:	4621      	mov	r1, r4
 8005964:	4628      	mov	r0, r5
 8005966:	f000 f8b7 	bl	8005ad8 <_sbrk_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d00a      	beq.n	8005984 <sbrk_aligned+0x34>
 800596e:	1cc4      	adds	r4, r0, #3
 8005970:	f024 0403 	bic.w	r4, r4, #3
 8005974:	42a0      	cmp	r0, r4
 8005976:	d007      	beq.n	8005988 <sbrk_aligned+0x38>
 8005978:	1a21      	subs	r1, r4, r0
 800597a:	4628      	mov	r0, r5
 800597c:	f000 f8ac 	bl	8005ad8 <_sbrk_r>
 8005980:	3001      	adds	r0, #1
 8005982:	d101      	bne.n	8005988 <sbrk_aligned+0x38>
 8005984:	f04f 34ff 	mov.w	r4, #4294967295
 8005988:	4620      	mov	r0, r4
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	200005a4 	.word	0x200005a4

08005990 <_malloc_r>:
 8005990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005994:	1ccd      	adds	r5, r1, #3
 8005996:	f025 0503 	bic.w	r5, r5, #3
 800599a:	3508      	adds	r5, #8
 800599c:	2d0c      	cmp	r5, #12
 800599e:	bf38      	it	cc
 80059a0:	250c      	movcc	r5, #12
 80059a2:	2d00      	cmp	r5, #0
 80059a4:	4607      	mov	r7, r0
 80059a6:	db01      	blt.n	80059ac <_malloc_r+0x1c>
 80059a8:	42a9      	cmp	r1, r5
 80059aa:	d905      	bls.n	80059b8 <_malloc_r+0x28>
 80059ac:	230c      	movs	r3, #12
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	2600      	movs	r6, #0
 80059b2:	4630      	mov	r0, r6
 80059b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b8:	4e2e      	ldr	r6, [pc, #184]	; (8005a74 <_malloc_r+0xe4>)
 80059ba:	f000 f89d 	bl	8005af8 <__malloc_lock>
 80059be:	6833      	ldr	r3, [r6, #0]
 80059c0:	461c      	mov	r4, r3
 80059c2:	bb34      	cbnz	r4, 8005a12 <_malloc_r+0x82>
 80059c4:	4629      	mov	r1, r5
 80059c6:	4638      	mov	r0, r7
 80059c8:	f7ff ffc2 	bl	8005950 <sbrk_aligned>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	4604      	mov	r4, r0
 80059d0:	d14d      	bne.n	8005a6e <_malloc_r+0xde>
 80059d2:	6834      	ldr	r4, [r6, #0]
 80059d4:	4626      	mov	r6, r4
 80059d6:	2e00      	cmp	r6, #0
 80059d8:	d140      	bne.n	8005a5c <_malloc_r+0xcc>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	4631      	mov	r1, r6
 80059de:	4638      	mov	r0, r7
 80059e0:	eb04 0803 	add.w	r8, r4, r3
 80059e4:	f000 f878 	bl	8005ad8 <_sbrk_r>
 80059e8:	4580      	cmp	r8, r0
 80059ea:	d13a      	bne.n	8005a62 <_malloc_r+0xd2>
 80059ec:	6821      	ldr	r1, [r4, #0]
 80059ee:	3503      	adds	r5, #3
 80059f0:	1a6d      	subs	r5, r5, r1
 80059f2:	f025 0503 	bic.w	r5, r5, #3
 80059f6:	3508      	adds	r5, #8
 80059f8:	2d0c      	cmp	r5, #12
 80059fa:	bf38      	it	cc
 80059fc:	250c      	movcc	r5, #12
 80059fe:	4629      	mov	r1, r5
 8005a00:	4638      	mov	r0, r7
 8005a02:	f7ff ffa5 	bl	8005950 <sbrk_aligned>
 8005a06:	3001      	adds	r0, #1
 8005a08:	d02b      	beq.n	8005a62 <_malloc_r+0xd2>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	442b      	add	r3, r5
 8005a0e:	6023      	str	r3, [r4, #0]
 8005a10:	e00e      	b.n	8005a30 <_malloc_r+0xa0>
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	1b52      	subs	r2, r2, r5
 8005a16:	d41e      	bmi.n	8005a56 <_malloc_r+0xc6>
 8005a18:	2a0b      	cmp	r2, #11
 8005a1a:	d916      	bls.n	8005a4a <_malloc_r+0xba>
 8005a1c:	1961      	adds	r1, r4, r5
 8005a1e:	42a3      	cmp	r3, r4
 8005a20:	6025      	str	r5, [r4, #0]
 8005a22:	bf18      	it	ne
 8005a24:	6059      	strne	r1, [r3, #4]
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	bf08      	it	eq
 8005a2a:	6031      	streq	r1, [r6, #0]
 8005a2c:	5162      	str	r2, [r4, r5]
 8005a2e:	604b      	str	r3, [r1, #4]
 8005a30:	4638      	mov	r0, r7
 8005a32:	f104 060b 	add.w	r6, r4, #11
 8005a36:	f000 f865 	bl	8005b04 <__malloc_unlock>
 8005a3a:	f026 0607 	bic.w	r6, r6, #7
 8005a3e:	1d23      	adds	r3, r4, #4
 8005a40:	1af2      	subs	r2, r6, r3
 8005a42:	d0b6      	beq.n	80059b2 <_malloc_r+0x22>
 8005a44:	1b9b      	subs	r3, r3, r6
 8005a46:	50a3      	str	r3, [r4, r2]
 8005a48:	e7b3      	b.n	80059b2 <_malloc_r+0x22>
 8005a4a:	6862      	ldr	r2, [r4, #4]
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	bf0c      	ite	eq
 8005a50:	6032      	streq	r2, [r6, #0]
 8005a52:	605a      	strne	r2, [r3, #4]
 8005a54:	e7ec      	b.n	8005a30 <_malloc_r+0xa0>
 8005a56:	4623      	mov	r3, r4
 8005a58:	6864      	ldr	r4, [r4, #4]
 8005a5a:	e7b2      	b.n	80059c2 <_malloc_r+0x32>
 8005a5c:	4634      	mov	r4, r6
 8005a5e:	6876      	ldr	r6, [r6, #4]
 8005a60:	e7b9      	b.n	80059d6 <_malloc_r+0x46>
 8005a62:	230c      	movs	r3, #12
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	4638      	mov	r0, r7
 8005a68:	f000 f84c 	bl	8005b04 <__malloc_unlock>
 8005a6c:	e7a1      	b.n	80059b2 <_malloc_r+0x22>
 8005a6e:	6025      	str	r5, [r4, #0]
 8005a70:	e7de      	b.n	8005a30 <_malloc_r+0xa0>
 8005a72:	bf00      	nop
 8005a74:	200005a0 	.word	0x200005a0

08005a78 <_realloc_r>:
 8005a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a7c:	4680      	mov	r8, r0
 8005a7e:	4614      	mov	r4, r2
 8005a80:	460e      	mov	r6, r1
 8005a82:	b921      	cbnz	r1, 8005a8e <_realloc_r+0x16>
 8005a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a88:	4611      	mov	r1, r2
 8005a8a:	f7ff bf81 	b.w	8005990 <_malloc_r>
 8005a8e:	b92a      	cbnz	r2, 8005a9c <_realloc_r+0x24>
 8005a90:	f7ff ff12 	bl	80058b8 <_free_r>
 8005a94:	4625      	mov	r5, r4
 8005a96:	4628      	mov	r0, r5
 8005a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a9c:	f000 f838 	bl	8005b10 <_malloc_usable_size_r>
 8005aa0:	4284      	cmp	r4, r0
 8005aa2:	4607      	mov	r7, r0
 8005aa4:	d802      	bhi.n	8005aac <_realloc_r+0x34>
 8005aa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005aaa:	d812      	bhi.n	8005ad2 <_realloc_r+0x5a>
 8005aac:	4621      	mov	r1, r4
 8005aae:	4640      	mov	r0, r8
 8005ab0:	f7ff ff6e 	bl	8005990 <_malloc_r>
 8005ab4:	4605      	mov	r5, r0
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	d0ed      	beq.n	8005a96 <_realloc_r+0x1e>
 8005aba:	42bc      	cmp	r4, r7
 8005abc:	4622      	mov	r2, r4
 8005abe:	4631      	mov	r1, r6
 8005ac0:	bf28      	it	cs
 8005ac2:	463a      	movcs	r2, r7
 8005ac4:	f7ff fed0 	bl	8005868 <memcpy>
 8005ac8:	4631      	mov	r1, r6
 8005aca:	4640      	mov	r0, r8
 8005acc:	f7ff fef4 	bl	80058b8 <_free_r>
 8005ad0:	e7e1      	b.n	8005a96 <_realloc_r+0x1e>
 8005ad2:	4635      	mov	r5, r6
 8005ad4:	e7df      	b.n	8005a96 <_realloc_r+0x1e>
	...

08005ad8 <_sbrk_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	4d06      	ldr	r5, [pc, #24]	; (8005af4 <_sbrk_r+0x1c>)
 8005adc:	2300      	movs	r3, #0
 8005ade:	4604      	mov	r4, r0
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	602b      	str	r3, [r5, #0]
 8005ae4:	f000 f81e 	bl	8005b24 <_sbrk>
 8005ae8:	1c43      	adds	r3, r0, #1
 8005aea:	d102      	bne.n	8005af2 <_sbrk_r+0x1a>
 8005aec:	682b      	ldr	r3, [r5, #0]
 8005aee:	b103      	cbz	r3, 8005af2 <_sbrk_r+0x1a>
 8005af0:	6023      	str	r3, [r4, #0]
 8005af2:	bd38      	pop	{r3, r4, r5, pc}
 8005af4:	200005a8 	.word	0x200005a8

08005af8 <__malloc_lock>:
 8005af8:	4801      	ldr	r0, [pc, #4]	; (8005b00 <__malloc_lock+0x8>)
 8005afa:	f000 b811 	b.w	8005b20 <__retarget_lock_acquire_recursive>
 8005afe:	bf00      	nop
 8005b00:	200005ac 	.word	0x200005ac

08005b04 <__malloc_unlock>:
 8005b04:	4801      	ldr	r0, [pc, #4]	; (8005b0c <__malloc_unlock+0x8>)
 8005b06:	f000 b80c 	b.w	8005b22 <__retarget_lock_release_recursive>
 8005b0a:	bf00      	nop
 8005b0c:	200005ac 	.word	0x200005ac

08005b10 <_malloc_usable_size_r>:
 8005b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b14:	1f18      	subs	r0, r3, #4
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfbc      	itt	lt
 8005b1a:	580b      	ldrlt	r3, [r1, r0]
 8005b1c:	18c0      	addlt	r0, r0, r3
 8005b1e:	4770      	bx	lr

08005b20 <__retarget_lock_acquire_recursive>:
 8005b20:	4770      	bx	lr

08005b22 <__retarget_lock_release_recursive>:
 8005b22:	4770      	bx	lr

08005b24 <_sbrk>:
 8005b24:	4a04      	ldr	r2, [pc, #16]	; (8005b38 <_sbrk+0x14>)
 8005b26:	6811      	ldr	r1, [r2, #0]
 8005b28:	4603      	mov	r3, r0
 8005b2a:	b909      	cbnz	r1, 8005b30 <_sbrk+0xc>
 8005b2c:	4903      	ldr	r1, [pc, #12]	; (8005b3c <_sbrk+0x18>)
 8005b2e:	6011      	str	r1, [r2, #0]
 8005b30:	6810      	ldr	r0, [r2, #0]
 8005b32:	4403      	add	r3, r0
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	4770      	bx	lr
 8005b38:	200005b0 	.word	0x200005b0
 8005b3c:	200005b8 	.word	0x200005b8

08005b40 <_init>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	bf00      	nop
 8005b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b46:	bc08      	pop	{r3}
 8005b48:	469e      	mov	lr, r3
 8005b4a:	4770      	bx	lr

08005b4c <_fini>:
 8005b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4e:	bf00      	nop
 8005b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b52:	bc08      	pop	{r3}
 8005b54:	469e      	mov	lr, r3
 8005b56:	4770      	bx	lr
