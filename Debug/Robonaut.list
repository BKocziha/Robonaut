
Robonaut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08012028  08012028  00022028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126a8  080126a8  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  080126a8  080126a8  000226a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080126b0  080126b0  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080126b0  080126b0  000226b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080126b4  080126b4  000226b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  080126b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab8  20000214  080128cc  00030214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ccc  080128cc  00030ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002eee5  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d38  00000000  00000000  0005f129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  00062e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa0  00000000  00000000  00064a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002adfa  00000000  00000000  00066528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023e14  00000000  00000000  00091322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010283a  00000000  00000000  000b5136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b7970  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e04  00000000  00000000  001b79c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c07c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c0890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000214 	.word	0x20000214
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801200c 	.word	0x0801200c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000218 	.word	0x20000218
 800020c:	0801200c 	.word	0x0801200c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <BT_TransmitMsg>:

#include <string.h>
#include "main.h"

void BT_TransmitMsg(UART_HandleTypeDef *huart, unsigned char *msg_to_send)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	uint32_t len = strlen((char*)msg_to_send);
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f7ff f93a 	bl	8000210 <strlen>
 8000f9c:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t*)msg_to_send, len, 100);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	2364      	movs	r3, #100	; 0x64
 8000fa4:	6839      	ldr	r1, [r7, #0]
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f006 ffa1 	bl	8007eee <HAL_UART_Transmit>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <LS_LED_Light>:
#include <stdbool.h>
#include <math.h>

// Az utolsó beadott érték mindig 33-nál nagyobb legyen!
void LS_LED_Light(SPI_HandleTypeDef *hspi, uint8_t *leds_to_light)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_on[4] = {0};
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
	uint8_t fb_leds_on_temp[4] = {0};
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
	for (int i=0; leds_to_light[i]<33; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fca:	e082      	b.n	80010d2 <LS_LED_Light+0x11e>
	{
		switch(leds_to_light[i]/8) {
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	08db      	lsrs	r3, r3, #3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d877      	bhi.n	80010cc <LS_LED_Light+0x118>
 8000fdc:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <LS_LED_Light+0x30>)
 8000fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe2:	bf00      	nop
 8000fe4:	08000ff5 	.word	0x08000ff5
 8000fe8:	0800102b 	.word	0x0800102b
 8000fec:	08001061 	.word	0x08001061
 8000ff0:	08001097 	.word	0x08001097
		case 0:
			fb_leds_on_temp[3] = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
 8000ffc:	e006      	b.n	800100c <LS_LED_Light+0x58>
				fb_leds_on_temp[3] <<= 1;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	3301      	adds	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	6a3a      	ldr	r2, [r7, #32]
 800101a:	429a      	cmp	r2, r3
 800101c:	dbef      	blt.n	8000ffe <LS_LED_Light+0x4a>
			}
			fb_leds_on[3] |= fb_leds_on_temp[3];
 800101e:	7cfa      	ldrb	r2, [r7, #19]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	4313      	orrs	r3, r2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	74fb      	strb	r3, [r7, #19]
			break;
 8001028:	e050      	b.n	80010cc <LS_LED_Light+0x118>
		case 1:
			fb_leds_on_temp[2] = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	e006      	b.n	8001042 <LS_LED_Light+0x8e>
				fb_leds_on_temp[2] <<= 1;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	3301      	adds	r3, #1
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbef      	blt.n	8001034 <LS_LED_Light+0x80>
			}
			fb_leds_on[2] |= fb_leds_on_temp[2];
 8001054:	7cba      	ldrb	r2, [r7, #18]
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	4313      	orrs	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	74bb      	strb	r3, [r7, #18]
			break;
 800105e:	e035      	b.n	80010cc <LS_LED_Light+0x118>
		case 2:
			fb_leds_on_temp[1] = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	e006      	b.n	8001078 <LS_LED_Light+0xc4>
				fb_leds_on_temp[1] <<= 1;
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	3301      	adds	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	429a      	cmp	r2, r3
 8001088:	dbef      	blt.n	800106a <LS_LED_Light+0xb6>
			}
			fb_leds_on[1] |= fb_leds_on_temp[1];
 800108a:	7c7a      	ldrb	r2, [r7, #17]
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	4313      	orrs	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	747b      	strb	r3, [r7, #17]
			break;
 8001094:	e01a      	b.n	80010cc <LS_LED_Light+0x118>
		case 3:
			fb_leds_on_temp[0] = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e006      	b.n	80010ae <LS_LED_Light+0xfa>
				fb_leds_on_temp[0] <<= 1;
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbef      	blt.n	80010a0 <LS_LED_Light+0xec>
			}
			fb_leds_on[0] |= fb_leds_on_temp[0];
 80010c0:	7c3a      	ldrb	r2, [r7, #16]
 80010c2:	7b3b      	ldrb	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	743b      	strb	r3, [r7, #16]
			break;
 80010ca:	bf00      	nop
	for (int i=0; leds_to_light[i]<33; i++)
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	3301      	adds	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b20      	cmp	r3, #32
 80010dc:	f67f af76 	bls.w	8000fcc <LS_LED_Light+0x18>
		}
	}
	LS_LED_Send(hspi, fb_leds_on);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f804 	bl	80010f4 <LS_LED_Send>
}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <LS_LED_Send>:

void LS_LED_Send(SPI_HandleTypeDef *hspi, uint8_t *leds_on)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 80010fe:	2364      	movs	r3, #100	; 0x64
 8001100:	2204      	movs	r2, #4
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f004 fd6a 	bl	8005bde <HAL_SPI_Transmit>

	// Latch enable
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <LS_LED_Send+0x4c>)
 8001112:	f002 fef3 	bl	8003efc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <LS_LED_Send+0x4c>)
 800111e:	f002 feed 	bl	8003efc <HAL_GPIO_WritePin>

	//Output enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2104      	movs	r1, #4
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <LS_LED_Send+0x50>)
 8001128:	f002 fee8 	bl	8003efc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2104      	movs	r1, #4
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <LS_LED_Send+0x50>)
 8001132:	f002 fee3 	bl	8003efc <HAL_GPIO_WritePin>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00

08001148 <LS_INF_Send>:

void LS_INF_Send(SPI_HandleTypeDef *hspi, uint8_t *infs_on)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, infs_on, 4, 100);
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	2204      	movs	r2, #4
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f004 fd40 	bl	8005bde <HAL_SPI_Transmit>

	// Inf Latch enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <LS_INF_Send+0x50>)
 8001166:	f002 fec9 	bl	8003efc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <LS_INF_Send+0x50>)
 8001172:	f002 fec3 	bl	8003efc <HAL_GPIO_WritePin>

	// Inf Output enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <LS_INF_Send+0x50>)
 800117e:	f002 febd 	bl	8003efc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <LS_INF_Send+0x50>)
 800118a:	f002 feb7 	bl	8003efc <HAL_GPIO_WritePin>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020000 	.word	0x40020000

0800119c <LS_ADC_ChipSelect>:
			  HAL_Delay(100);
		  }
}

void LS_ADC_ChipSelect(int CS)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	switch(CS) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d827      	bhi.n	80011fc <LS_ADC_ChipSelect+0x60>
 80011ac:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <LS_ADC_ChipSelect+0x18>)
 80011ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b2:	bf00      	nop
 80011b4:	080011c5 	.word	0x080011c5
 80011b8:	080011d3 	.word	0x080011d3
 80011bc:	080011e1 	.word	0x080011e1
 80011c0:	080011ef 	.word	0x080011ef
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ca:	481b      	ldr	r0, [pc, #108]	; (8001238 <LS_ADC_ChipSelect+0x9c>)
 80011cc:	f002 fe96 	bl	8003efc <HAL_GPIO_WritePin>
		break;
 80011d0:	e02d      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d8:	4818      	ldr	r0, [pc, #96]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011da:	f002 fe8f 	bl	8003efc <HAL_GPIO_WritePin>
		break;
 80011de:	e026      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011e8:	f002 fe88 	bl	8003efc <HAL_GPIO_WritePin>
		break;
 80011ec:	e01f      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011f6:	f002 fe81 	bl	8003efc <HAL_GPIO_WritePin>
		break;
 80011fa:	e018      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	default:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <LS_ADC_ChipSelect+0x9c>)
 8001204:	f002 fe7a 	bl	8003efc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 8001210:	f002 fe74 	bl	8003efc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 800121c:	f002 fe6e 	bl	8003efc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 8001228:	f002 fe68 	bl	8003efc <HAL_GPIO_WritePin>
	}
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020800 	.word	0x40020800
 800123c:	40020400 	.word	0x40020400

08001240 <LS_Holavonal_favago>:
	sum -= 32*250;
	line = (double)weighted_sum/sum;
	return line;
}

float LS_Holavonal_favago(uint16_t *ADC_values, int prev_value, int* summ, int* MA_sum){
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
    int m = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    int sum = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
    float alpha = 0.1;
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <LS_Holavonal_favago+0xd8>)
 8001258:	613b      	str	r3, [r7, #16]
    *summ = 0;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
    for(int i=0; i<32; i++){
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e01c      	b.n	80012a0 <LS_Holavonal_favago+0x60>
        if (ADC_values[i] > 2500){
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4413      	add	r3, r2
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001274:	4293      	cmp	r3, r2
 8001276:	d910      	bls.n	800129a <LS_Holavonal_favago+0x5a>
        	*summ += ADC_values[i];
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	0052      	lsls	r2, r2, #1
 8001280:	68f9      	ldr	r1, [r7, #12]
 8001282:	440a      	add	r2, r1
 8001284:	8812      	ldrh	r2, [r2, #0]
 8001286:	441a      	add	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	601a      	str	r2, [r3, #0]
            sum += i;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	4413      	add	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
            m++;
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	3301      	adds	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<32; i++){
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b1f      	cmp	r3, #31
 80012a4:	dddf      	ble.n	8001266 <LS_Holavonal_favago+0x26>
        }
    }
    if(m == 0)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <LS_Holavonal_favago+0x78>
		return prev_value;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	e027      	b.n	8001308 <LS_Holavonal_favago+0xc8>
    *MA_sum = alpha * *summ + (1-alpha) * *MA_sum;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f0:	ee17 2a90 	vmov	r2, s15
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	601a      	str	r2, [r3, #0]
    return sum/m;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	3dcccccd 	.word	0x3dcccccd

0800131c <LineSensor_FrontAndBack>:
	}
}

void LineSensor_FrontAndBack(UART_HandleTypeDef *huart, SPI_HandleTypeDef *hspi_led, SPI_HandleTypeDef *hspi_sense_front,
		SPI_HandleTypeDef *hspi_sense_rear, uint16_t *ADC_values_front, uint16_t *ADC_values_rear)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b090      	sub	sp, #64	; 0x40
 8001320:	af02      	add	r7, sp, #8
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
	uint8_t leds_on[4];// = {1, 1, 1, 1};

	uint8_t ADC_inputs[] = {0, 8, 16, 24, 32, 40, 48, 56};
 800132a:	4a92      	ldr	r2, [pc, #584]	; (8001574 <LineSensor_FrontAndBack+0x258>)
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001334:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ADC_received_msg[2];

	//LS_INF_Send(&hspi3, leds_off);

	// Turn on first set of LEDs
	leds_on[0] = 1;leds_on[1] = 1;leds_on[2] = 1;leds_on[3] = 1;
 8001338:	2301      	movs	r3, #1
 800133a:	f887 3020 	strb.w	r3, [r7, #32]
 800133e:	2301      	movs	r3, #1
 8001340:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001344:	2301      	movs	r3, #1
 8001346:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800134a:	2301      	movs	r3, #1
 800134c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	LS_INF_Send(hspi_led, leds_on);
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	4619      	mov	r1, r3
 8001356:	68b8      	ldr	r0, [r7, #8]
 8001358:	f7ff fef6 	bl	8001148 <LS_INF_Send>
	HAL_Delay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f002 f891 	bl	8003484 <HAL_Delay>
	// Retrieve data from first set of ADCs - Front
	for (int i=1; i<5; i++)
 8001362:	2301      	movs	r3, #1
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
 8001366:	e02a      	b.n	80013be <LineSensor_FrontAndBack+0xa2>
	{
	  LS_ADC_ChipSelect(i);
 8001368:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800136a:	f7ff ff17 	bl	800119c <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 800136e:	f107 0214 	add.w	r2, r7, #20
 8001372:	f107 0118 	add.w	r1, r7, #24
 8001376:	2364      	movs	r3, #100	; 0x64
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2302      	movs	r3, #2
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f004 fd6a 	bl	8005e56 <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 8001382:	f107 0214 	add.w	r2, r7, #20
 8001386:	f107 0118 	add.w	r1, r7, #24
 800138a:	2364      	movs	r3, #100	; 0x64
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2302      	movs	r3, #2
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f004 fd60 	bl	8005e56 <HAL_SPI_TransmitReceive>
	  ADC_values_front[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001396:	7d7b      	ldrb	r3, [r7, #21]
 8001398:	b21a      	sxth	r2, r3
 800139a:	7d3b      	ldrb	r3, [r7, #20]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b219      	sxth	r1, r3
 80013a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a6:	3b01      	subs	r3, #1
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013ac:	4413      	add	r3, r2
 80013ae:	b28a      	uxth	r2, r1
 80013b0:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fef2 	bl	800119c <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 80013b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ba:	3301      	adds	r3, #1
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
 80013be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	ddd1      	ble.n	8001368 <LineSensor_FrontAndBack+0x4c>
	}
	// Ez működjön, aztán lehet optimalizálni, hogy egy loopon belül kérjük be az adatokat mindettőtől
	// Retrieve data from first set of ADCs - Rear
	for (int i=1; i<5; i++)
 80013c4:	2301      	movs	r3, #1
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
 80013c8:	e02a      	b.n	8001420 <LineSensor_FrontAndBack+0x104>
	{
	  LS_ADC_ChipSelect(i);
 80013ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013cc:	f7ff fee6 	bl	800119c <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013d0:	f107 0214 	add.w	r2, r7, #20
 80013d4:	f107 0118 	add.w	r1, r7, #24
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2302      	movs	r3, #2
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f004 fd39 	bl	8005e56 <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013e4:	f107 0214 	add.w	r2, r7, #20
 80013e8:	f107 0118 	add.w	r1, r7, #24
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2302      	movs	r3, #2
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f004 fd2f 	bl	8005e56 <HAL_SPI_TransmitReceive>
	  ADC_values_rear[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80013f8:	7d7b      	ldrb	r3, [r7, #21]
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	7d3b      	ldrb	r3, [r7, #20]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21b      	sxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b219      	sxth	r1, r3
 8001406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001408:	3b01      	subs	r3, #1
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800140e:	4413      	add	r3, r2
 8001410:	b28a      	uxth	r2, r1
 8001412:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fec1 	bl	800119c <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 800141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141c:	3301      	adds	r3, #1
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
 8001420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001422:	2b04      	cmp	r3, #4
 8001424:	ddd1      	ble.n	80013ca <LineSensor_FrontAndBack+0xae>
	}

	// Shift the LEDs by one
	for (int k=0; k<7; k++)
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142a:	e099      	b.n	8001560 <LineSensor_FrontAndBack+0x244>
	{
	  leds_on[0] <<= 1;
 800142c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f887 3020 	strb.w	r3, [r7, #32]
	  leds_on[1] <<= 1;
 8001438:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  leds_on[2] <<= 1;
 8001444:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  leds_on[3] <<= 1;
 8001450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  LS_INF_Send(hspi_led, leds_on);
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	4619      	mov	r1, r3
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f7ff fe70 	bl	8001148 <LS_INF_Send>
	  HAL_Delay(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f002 f80b 	bl	8003484 <HAL_Delay>

	  //Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 800146e:	2301      	movs	r3, #1
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
 8001472:	e034      	b.n	80014de <LineSensor_FrontAndBack+0x1c2>
	  {
		  LS_ADC_ChipSelect(i);
 8001474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001476:	f7ff fe91 	bl	800119c <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 800147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147c:	3301      	adds	r3, #1
 800147e:	f107 0218 	add.w	r2, r7, #24
 8001482:	18d1      	adds	r1, r2, r3
 8001484:	f107 0214 	add.w	r2, r7, #20
 8001488:	2364      	movs	r3, #100	; 0x64
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2302      	movs	r3, #2
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f004 fce1 	bl	8005e56 <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 8001494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001496:	3301      	adds	r3, #1
 8001498:	f107 0218 	add.w	r2, r7, #24
 800149c:	18d1      	adds	r1, r2, r3
 800149e:	f107 0214 	add.w	r2, r7, #20
 80014a2:	2364      	movs	r3, #100	; 0x64
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2302      	movs	r3, #2
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f004 fcd4 	bl	8005e56 <HAL_SPI_TransmitReceive>
		  ADC_values_front[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80014ae:	7d7b      	ldrb	r3, [r7, #21]
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	7d3b      	ldrb	r3, [r7, #20]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b219      	sxth	r1, r3
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	3b01      	subs	r3, #1
 80014c0:	00da      	lsls	r2, r3, #3
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	4413      	add	r3, r2
 80014c6:	3301      	adds	r3, #1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014cc:	4413      	add	r3, r2
 80014ce:	b28a      	uxth	r2, r1
 80014d0:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fe62 	bl	800119c <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	3301      	adds	r3, #1
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	ddc7      	ble.n	8001474 <LineSensor_FrontAndBack+0x158>
	  }

	  // Szintén lehet optimalizálni
	  // Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 80014e4:	2301      	movs	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
 80014e8:	e034      	b.n	8001554 <LineSensor_FrontAndBack+0x238>
	  {
		  LS_ADC_ChipSelect(i);
 80014ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014ec:	f7ff fe56 	bl	800119c <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	3301      	adds	r3, #1
 80014f4:	f107 0218 	add.w	r2, r7, #24
 80014f8:	18d1      	adds	r1, r2, r3
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	2364      	movs	r3, #100	; 0x64
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2302      	movs	r3, #2
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f004 fca6 	bl	8005e56 <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	3301      	adds	r3, #1
 800150e:	f107 0218 	add.w	r2, r7, #24
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	f107 0214 	add.w	r2, r7, #20
 8001518:	2364      	movs	r3, #100	; 0x64
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2302      	movs	r3, #2
 800151e:	6838      	ldr	r0, [r7, #0]
 8001520:	f004 fc99 	bl	8005e56 <HAL_SPI_TransmitReceive>
		  ADC_values_rear[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001524:	7d7b      	ldrb	r3, [r7, #21]
 8001526:	b21a      	sxth	r2, r3
 8001528:	7d3b      	ldrb	r3, [r7, #20]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b219      	sxth	r1, r3
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	3b01      	subs	r3, #1
 8001536:	00da      	lsls	r2, r3, #3
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	4413      	add	r3, r2
 800153c:	3301      	adds	r3, #1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001542:	4413      	add	r3, r2
 8001544:	b28a      	uxth	r2, r1
 8001546:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fe27 	bl	800119c <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	3301      	adds	r3, #1
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	2b04      	cmp	r3, #4
 8001558:	ddc7      	ble.n	80014ea <LineSensor_FrontAndBack+0x1ce>
	for (int k=0; k<7; k++)
 800155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155c:	3301      	adds	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	2b06      	cmp	r3, #6
 8001564:	f77f af62 	ble.w	800142c <LineSensor_FrontAndBack+0x110>
//			line_pos[0] = ADC_values_rear[i];
//	}

//	unsigned char BT_send_msg_buff[200];
//	LS_BT_SendData(huart, BT_send_msg_buff, ADC_values_rear);
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3738      	adds	r7, #56	; 0x38
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	08012030 	.word	0x08012030

08001578 <LS_feedback_all>:

void LS_feedback_all(SPI_HandleTypeDef *hspi_led, uint16_t *ADC_values)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
 8001582:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <LS_feedback_all+0x7c>)
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800158c:	6018      	str	r0, [r3, #0]
 800158e:	3304      	adds	r3, #4
 8001590:	7019      	strb	r1, [r3, #0]
	uint8_t leds_off[4] = {0};
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	e016      	b.n	80015ce <LS_feedback_all+0x56>
			if (ADC_values[i]>2500){
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d90a      	bls.n	80015c8 <LS_feedback_all+0x50>
				fb_leds_to_light[j] = i;
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	b2d9      	uxtb	r1, r3
 80015b6:	f107 0210 	add.w	r2, r7, #16
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	460a      	mov	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
				j++;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	3301      	adds	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b1f      	cmp	r3, #31
 80015d2:	dde5      	ble.n	80015a0 <LS_feedback_all+0x28>
			}
		}

	LS_LED_Send(hspi_led, leds_off);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fd8a 	bl	80010f4 <LS_LED_Send>
	LS_LED_Light(hspi_led, fb_leds_to_light);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fce4 	bl	8000fb4 <LS_LED_Light>
}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	08012038 	.word	0x08012038

080015f8 <LS_delta_angle>:
	}
	LS_LED_Send(hspi_led, leds_off);
	LS_LED_Light(hspi_led, fb_leds_to_light);
}

float LS_delta_angle(float p1, float p2){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001602:	edc7 0a00 	vstr	s1, [r7]
    float delta = atan((p2-(31-p1))*6.5/460);
 8001606:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800160a:	edd7 7a01 	vldr	s15, [r7, #4]
 800160e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001612:	ed97 7a00 	vldr	s14, [r7]
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	ee17 0a90 	vmov	r0, s15
 800161e:	f7fe ffb3 	bl	8000588 <__aeabi_f2d>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <LS_delta_angle+0x88>)
 8001628:	f7ff f806 	bl	8000638 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	a310      	add	r3, pc, #64	; (adr r3, 8001678 <LS_delta_angle+0x80>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff f927 	bl	800088c <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ec43 2b17 	vmov	d7, r2, r3
 8001646:	eeb0 0a47 	vmov.f32	s0, s14
 800164a:	eef0 0a67 	vmov.f32	s1, s15
 800164e:	f00f fa3f 	bl	8010ad0 <atan>
 8001652:	ec53 2b10 	vmov	r2, r3, d0
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fac5 	bl	8000be8 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	60fb      	str	r3, [r7, #12]
    return delta;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	ee07 3a90 	vmov	s15, r3
}
 8001668:	eeb0 0a67 	vmov.f32	s0, s15
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	00000000 	.word	0x00000000
 800167c:	407cc000 	.word	0x407cc000
 8001680:	401a0000 	.word	0x401a0000
 8001684:	00000000 	.word	0x00000000

08001688 <LS_p>:



float LS_p(float f1){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0a01 	vstr	s0, [r7, #4]
    float p = (15.5-f1)*0.0065;//m-ben adja vissza a p-t
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ff78 	bl	8000588 <__aeabi_f2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	f04f 0000 	mov.w	r0, #0
 80016a0:	490f      	ldr	r1, [pc, #60]	; (80016e0 <LS_p+0x58>)
 80016a2:	f7fe fe11 	bl	80002c8 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	a30a      	add	r3, pc, #40	; (adr r3, 80016d8 <LS_p+0x50>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe ffc0 	bl	8000638 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa92 	bl	8000be8 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	60fb      	str	r3, [r7, #12]
    return p;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	ee07 3a90 	vmov	s15, r3
}
 80016ce:	eeb0 0a67 	vmov.f32	s0, s15
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	76c8b439 	.word	0x76c8b439
 80016dc:	3f7a9fbe 	.word	0x3f7a9fbe
 80016e0:	402f0000 	.word	0x402f0000
 80016e4:	00000000 	.word	0x00000000

080016e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016ec:	b0ac      	sub	sp, #176	; 0xb0
 80016ee:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f0:	f001 fe56 	bl	80033a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f4:	f000 fa16 	bl	8001b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f8:	f000 ff04 	bl	8002504 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016fc:	f000 fad6 	bl	8001cac <MX_I2C1_Init>
  MX_I2C3_Init();
 8001700:	f000 fb30 	bl	8001d64 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001704:	f000 fb5c 	bl	8001dc0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001708:	f000 fb90 	bl	8001e2c <MX_SPI2_Init>
  MX_SPI3_Init();
 800170c:	f000 fbc4 	bl	8001e98 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001710:	f000 fa7a 	bl	8001c08 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001714:	f000 fbf8 	bl	8001f08 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001718:	f000 fc76 	bl	8002008 <MX_TIM3_Init>
  MX_TIM4_Init();
 800171c:	f000 fcee 	bl	80020fc <MX_TIM4_Init>
  MX_TIM13_Init();
 8001720:	f000 fe4e 	bl	80023c0 <MX_TIM13_Init>
  MX_TIM5_Init();
 8001724:	f000 fd7c 	bl	8002220 <MX_TIM5_Init>
  MX_I2C2_Init();
 8001728:	f000 faee 	bl	8001d08 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800172c:	f000 fe96 	bl	800245c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001730:	f000 febe 	bl	80024b0 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8001734:	f000 fdea 	bl	800230c <MX_TIM7_Init>
  MX_TIM10_Init();
 8001738:	f000 fe1e 	bl	8002378 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // initialize vl53l1x communication parameters
  Dev1->I2cHandle = &hi2c2;
 800173c:	4bc0      	ldr	r3, [pc, #768]	; (8001a40 <main+0x358>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4ac0      	ldr	r2, [pc, #768]	; (8001a44 <main+0x35c>)
 8001742:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  Dev1->I2cDevAddr = 0x52;
 8001746:	4bbe      	ldr	r3, [pc, #760]	; (8001a40 <main+0x358>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2252      	movs	r2, #82	; 0x52
 800174c:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
//  HAL_Delay(2); // 2ms reset time
//  HAL_GPIO_WritePin(XSHUT1_GPIO_Port, XSHUT1_Pin, GPIO_PIN_RESET);
//  HAL_Delay(2); // 2ms reset time

  // set ToF1
  HAL_GPIO_WritePin(ToF_XSDN_36_GPIO_Port, ToF_XSDN_36_Pin, GPIO_PIN_SET);
 8001750:	2201      	movs	r2, #1
 8001752:	2101      	movs	r1, #1
 8001754:	48bc      	ldr	r0, [pc, #752]	; (8001a48 <main+0x360>)
 8001756:	f002 fbd1 	bl	8003efc <HAL_GPIO_WritePin>
  HAL_Delay(2);
 800175a:	2002      	movs	r0, #2
 800175c:	f001 fe92 	bl	8003484 <HAL_Delay>
//  HAL_Delay(10);
//  Dev2->I2cDevAddr = 0x50; // set Dev2 0x50

//  /*** VL53L1X Initialization ***/
//  // Dev1
  VL53L1_WaitDeviceBooted( Dev1 );
 8001760:	4bb7      	ldr	r3, [pc, #732]	; (8001a40 <main+0x358>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f006 ff8f 	bl	8008688 <VL53L1_WaitDeviceBooted>
  VL53L1_DataInit( Dev1 );
 800176a:	4bb5      	ldr	r3, [pc, #724]	; (8001a40 <main+0x358>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f006 ff32 	bl	80085d8 <VL53L1_DataInit>
  VL53L1_StaticInit( Dev1 );
 8001774:	4bb2      	ldr	r3, [pc, #712]	; (8001a40 <main+0x358>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f006 ff66 	bl	800864a <VL53L1_StaticInit>
  VL53L1_SetDistanceMode( Dev1, VL53L1_DISTANCEMODE_LONG );
 800177e:	4bb0      	ldr	r3, [pc, #704]	; (8001a40 <main+0x358>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2103      	movs	r1, #3
 8001784:	4618      	mov	r0, r3
 8001786:	f007 f8af 	bl	80088e8 <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev1, 20000 );
 800178a:	4bad      	ldr	r3, [pc, #692]	; (8001a40 <main+0x358>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001792:	4618      	mov	r0, r3
 8001794:	f007 f91e 	bl	80089d4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
  VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev1, 25 );
 8001798:	4ba9      	ldr	r3, [pc, #676]	; (8001a40 <main+0x358>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2119      	movs	r1, #25
 800179e:	4618      	mov	r0, r3
 80017a0:	f007 faa4 	bl	8008cec <VL53L1_SetInterMeasurementPeriodMilliSeconds>
  VL53L1_StartMeasurement( Dev1 );
 80017a4:	4ba6      	ldr	r3, [pc, #664]	; (8001a40 <main+0x358>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f007 fbdd 	bl	8008f68 <VL53L1_StartMeasurement>

  //unsigned char ADC_value_string[10];
  //uint8_t leds_on[4];// = {1, 1, 1, 1};
  //uint8_t fb_leds_on[4] = {0};
  //uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
  uint16_t ADC_values_front[32] = {0};
 80017ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017b2:	2240      	movs	r2, #64	; 0x40
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f00c fa9a 	bl	800dcf0 <memset>
  uint16_t ADC_values_rear[32] = {0};
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2240      	movs	r2, #64	; 0x40
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f00c fa93 	bl	800dcf0 <memset>
  float line_pos[2];
//  bool feedback_rear = false;
  float delta, p, str_angle;
  int pwm_val;
  enum circuit_section circuit_Section = Fast_section;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
//  circuit_Section = Fast_section;
  //LS_INF_Send(&hspi3, leds_off);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Dead man switch PWM input
 80017d0:	2100      	movs	r1, #0
 80017d2:	489e      	ldr	r0, [pc, #632]	; (8001a4c <main+0x364>)
 80017d4:	f005 f8e8 	bl	80069a8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);    // Dead man switch PWM input
 80017d8:	2104      	movs	r1, #4
 80017da:	489c      	ldr	r0, [pc, #624]	; (8001a4c <main+0x364>)
 80017dc:	f005 f808 	bl	80067f0 <HAL_TIM_IC_Start>

  HAL_TIM_Base_Start_IT(&htim10);
 80017e0:	489b      	ldr	r0, [pc, #620]	; (8001a50 <main+0x368>)
 80017e2:	f004 fdf5 	bl	80063d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80017e6:	2100      	movs	r1, #0
 80017e8:	489a      	ldr	r0, [pc, #616]	; (8001a54 <main+0x36c>)
 80017ea:	f004 fee9 	bl	80065c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80017ee:	2104      	movs	r1, #4
 80017f0:	4899      	ldr	r0, [pc, #612]	; (8001a58 <main+0x370>)
 80017f2:	f004 fee5 	bl	80065c0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80017f6:	2100      	movs	r1, #0
 80017f8:	4898      	ldr	r0, [pc, #608]	; (8001a5c <main+0x374>)
 80017fa:	f004 fee1 	bl	80065c0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	4b95      	ldr	r3, [pc, #596]	; (8001a60 <main+0x378>)
 800180c:	4a95      	ldr	r2, [pc, #596]	; (8001a64 <main+0x37c>)
 800180e:	4996      	ldr	r1, [pc, #600]	; (8001a68 <main+0x380>)
 8001810:	4896      	ldr	r0, [pc, #600]	; (8001a6c <main+0x384>)
 8001812:	f7ff fd83 	bl	800131c <LineSensor_FrontAndBack>
	  line_pos[0] = LS_Holavonal_favago(ADC_values_front, line_pos[0], &summ, &MA_sum_front);
 8001816:	edd7 7a01 	vldr	s15, [r7, #4]
 800181a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8001822:	4b93      	ldr	r3, [pc, #588]	; (8001a70 <main+0x388>)
 8001824:	4a93      	ldr	r2, [pc, #588]	; (8001a74 <main+0x38c>)
 8001826:	ee17 1a90 	vmov	r1, s15
 800182a:	f7ff fd09 	bl	8001240 <LS_Holavonal_favago>
 800182e:	eef0 7a40 	vmov.f32	s15, s0
 8001832:	edc7 7a01 	vstr	s15, [r7, #4]
	  line_pos[1] = LS_Holavonal_favago(ADC_values_rear, line_pos[1], &summ2, &MA_sum_rear);
 8001836:	edd7 7a02 	vldr	s15, [r7, #8]
 800183a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800183e:	f107 000c 	add.w	r0, r7, #12
 8001842:	4b8d      	ldr	r3, [pc, #564]	; (8001a78 <main+0x390>)
 8001844:	4a8d      	ldr	r2, [pc, #564]	; (8001a7c <main+0x394>)
 8001846:	ee17 1a90 	vmov	r1, s15
 800184a:	f7ff fcf9 	bl	8001240 <LS_Holavonal_favago>
 800184e:	eef0 7a40 	vmov.f32	s15, s0
 8001852:	edc7 7a02 	vstr	s15, [r7, #8]
	  LS_feedback_all(&hspi3, ADC_values_front);
 8001856:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800185a:	4619      	mov	r1, r3
 800185c:	4882      	ldr	r0, [pc, #520]	; (8001a68 <main+0x380>)
 800185e:	f7ff fe8b 	bl	8001578 <LS_feedback_all>
//	  //LS_feedback_led(&hspi3, line_pos, feedback_rear);

	  delta = LS_delta_angle(line_pos[0], line_pos[1]);
 8001862:	edd7 7a01 	vldr	s15, [r7, #4]
 8001866:	ed97 7a02 	vldr	s14, [r7, #8]
 800186a:	eef0 0a47 	vmov.f32	s1, s14
 800186e:	eeb0 0a67 	vmov.f32	s0, s15
 8001872:	f7ff fec1 	bl	80015f8 <LS_delta_angle>
 8001876:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	  p = LS_p(line_pos[0]);
 800187a:	edd7 7a01 	vldr	s15, [r7, #4]
 800187e:	eeb0 0a67 	vmov.f32	s0, s15
 8001882:	f7ff ff01 	bl	8001688 <LS_p>
 8001886:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
	  pwm_val = MotorDrive(&htim4, duty_motor);
 800188a:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <main+0x398>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	4872      	ldr	r0, [pc, #456]	; (8001a5c <main+0x374>)
 8001892:	f000 ffb0 	bl	80027f6 <MotorDrive>
 8001896:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	  ServoPosition(&htim5, str_angle);
 800189a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800189e:	f7fe fe73 	bl	8000588 <__aeabi_f2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	ec43 2b10 	vmov	d0, r2, r3
 80018aa:	486a      	ldr	r0, [pc, #424]	; (8001a54 <main+0x36c>)
 80018ac:	f000 ffbc 	bl	8002828 <ServoPosition>
	  if(duty_MA>10){
 80018b0:	4b74      	ldr	r3, [pc, #464]	; (8001a84 <main+0x39c>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c2:	dd06      	ble.n	80018d2 <main+0x1ea>
		  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 80018c4:	2201      	movs	r2, #1
 80018c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ca:	486f      	ldr	r0, [pc, #444]	; (8001a88 <main+0x3a0>)
 80018cc:	f002 fb16 	bl	8003efc <HAL_GPIO_WritePin>
 80018d0:	e005      	b.n	80018de <main+0x1f6>
		  }
	  else
		  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d8:	486b      	ldr	r0, [pc, #428]	; (8001a88 <main+0x3a0>)
 80018da:	f002 fb0f 	bl	8003efc <HAL_GPIO_WritePin>
	  //	float kp=-0.75;
	  //	float kd=1.0;
	  //	float kp=-10;
	  //	float kd=0.0;

	  switch(circuit_Section) {
 80018de:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	f200 80dd 	bhi.w	8001aa2 <main+0x3ba>
 80018e8:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <main+0x208>)
 80018ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ee:	bf00      	nop
 80018f0:	08001987 	.word	0x08001987
 80018f4:	08001905 	.word	0x08001905
 80018f8:	08001947 	.word	0x08001947
 80018fc:	080019b7 	.word	0x080019b7
 8001900:	080019f7 	.word	0x080019f7
	  	  case Fast_section:
			duty_motor = 60;
 8001904:	4b5e      	ldr	r3, [pc, #376]	; (8001a80 <main+0x398>)
 8001906:	223c      	movs	r2, #60	; 0x3c
 8001908:	601a      	str	r2, [r3, #0]
			str_angle = SteeringAngle(p, delta, KP_FAST, KD_FAST);
 800190a:	eddf 1a60 	vldr	s3, [pc, #384]	; 8001a8c <main+0x3a4>
 800190e:	ed9f 1a60 	vldr	s2, [pc, #384]	; 8001a90 <main+0x3a8>
 8001912:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 8001916:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 800191a:	f000 ffe5 	bl	80028e8 <SteeringAngle>
 800191e:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c
			if (decel_end_flag == 0 && 10000 < MA_sum_front){
 8001922:	4b5c      	ldr	r3, [pc, #368]	; (8001a94 <main+0x3ac>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 8082 	bne.w	8001a30 <main+0x348>
 800192c:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <main+0x388>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f242 7210 	movw	r2, #10000	; 0x2710
 8001934:	4293      	cmp	r3, r2
 8001936:	dd7b      	ble.n	8001a30 <main+0x348>
			  // kb. 2 másodpercenkétn előidéz egy interruptot
			  HAL_TIM_Base_Start_IT(&htim7);
 8001938:	4857      	ldr	r0, [pc, #348]	; (8001a98 <main+0x3b0>)
 800193a:	f004 fd49 	bl	80063d0 <HAL_TIM_Base_Start_IT>
			  circuit_Section = Braking;
 800193e:	2302      	movs	r3, #2
 8001940:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			}
			break;
 8001944:	e074      	b.n	8001a30 <main+0x348>
	  	  case Braking:
	  		chicane_coming=true;
 8001946:	4b55      	ldr	r3, [pc, #340]	; (8001a9c <main+0x3b4>)
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
	  		duty_motor = 8;
 800194c:	4b4c      	ldr	r3, [pc, #304]	; (8001a80 <main+0x398>)
 800194e:	2208      	movs	r2, #8
 8001950:	601a      	str	r2, [r3, #0]
	  		str_angle = SteeringAngle(p, delta, KP_FAST, KD_FAST);
 8001952:	eddf 1a4e 	vldr	s3, [pc, #312]	; 8001a8c <main+0x3a4>
 8001956:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8001a90 <main+0x3a8>
 800195a:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 800195e:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8001962:	f000 ffc1 	bl	80028e8 <SteeringAngle>
 8001966:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c
	  		if (decel_end_flag == 3){
 800196a:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <main+0x3ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b03      	cmp	r3, #3
 8001970:	d160      	bne.n	8001a34 <main+0x34c>
				HAL_TIM_Base_Stop_IT(&htim7);
 8001972:	4849      	ldr	r0, [pc, #292]	; (8001a98 <main+0x3b0>)
 8001974:	f004 fd9c 	bl	80064b0 <HAL_TIM_Base_Stop_IT>
				decel_end_flag =0;
 8001978:	4b46      	ldr	r3, [pc, #280]	; (8001a94 <main+0x3ac>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
				circuit_Section = Slow_section;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			}
	  		break;
 8001984:	e056      	b.n	8001a34 <main+0x34c>
//				decel_end_flag =0;
//				circuit_Section = Slow_section;
//			}
//	  		break;
	  	  case Slow_section:
	  		duty_motor = 20;
 8001986:	4b3e      	ldr	r3, [pc, #248]	; (8001a80 <main+0x398>)
 8001988:	2214      	movs	r2, #20
 800198a:	601a      	str	r2, [r3, #0]
	  		str_angle = SteeringAngle(p, delta, KP_SLOW, KD_SLOW);
 800198c:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8001990:	eeb9 1a04 	vmov.f32	s2, #148	; 0xc0a00000 -5.0
 8001994:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 8001998:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 800199c:	f000 ffa4 	bl	80028e8 <SteeringAngle>
 80019a0:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c
	  		if (MA_sum_front < 8000){
 80019a4:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <main+0x388>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80019ac:	da44      	bge.n	8001a38 <main+0x350>
	  			 circuit_Section = Slow_waiting;
 80019ae:	2303      	movs	r3, #3
 80019b0:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	  		}
	  		break;
 80019b4:	e040      	b.n	8001a38 <main+0x350>
	  	  case Slow_waiting:
	  		duty_motor = 20;
 80019b6:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <main+0x398>)
 80019b8:	2214      	movs	r2, #20
 80019ba:	601a      	str	r2, [r3, #0]
			str_angle = SteeringAngle(p, delta, KP_SLOW, KD_SLOW);
 80019bc:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80019c0:	eeb9 1a04 	vmov.f32	s2, #148	; 0xc0a00000 -5.0
 80019c4:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 80019c8:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 80019cc:	f000 ff8c 	bl	80028e8 <SteeringAngle>
 80019d0:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c
	  		if (decel_end_flag == 0 && 10000 < MA_sum_front){
 80019d4:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <main+0x3ac>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d12f      	bne.n	8001a3c <main+0x354>
 80019dc:	4b24      	ldr	r3, [pc, #144]	; (8001a70 <main+0x388>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80019e4:	4293      	cmp	r3, r2
 80019e6:	dd29      	ble.n	8001a3c <main+0x354>
	  			HAL_TIM_Base_Start_IT(&htim7);
 80019e8:	482b      	ldr	r0, [pc, #172]	; (8001a98 <main+0x3b0>)
 80019ea:	f004 fcf1 	bl	80063d0 <HAL_TIM_Base_Start_IT>
	  			circuit_Section = Acceleration;
 80019ee:	2304      	movs	r3, #4
 80019f0:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	  		}
	  		break;
 80019f4:	e022      	b.n	8001a3c <main+0x354>
//			if (MA_sum_front < 8000){
//				 circuit_Section = Acceleration;
//			}
//			break;
	  	  case Acceleration:
	  		duty_motor = 60;
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <main+0x398>)
 80019f8:	223c      	movs	r2, #60	; 0x3c
 80019fa:	601a      	str	r2, [r3, #0]
	  		str_angle = SteeringAngle(p, delta, KP_FAST, KD_FAST);
 80019fc:	eddf 1a23 	vldr	s3, [pc, #140]	; 8001a8c <main+0x3a4>
 8001a00:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8001a90 <main+0x3a8>
 8001a04:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 8001a08:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 8001a0c:	f000 ff6c 	bl	80028e8 <SteeringAngle>
 8001a10:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c
	  		if (decel_end_flag == 2){
 8001a14:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <main+0x3ac>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d141      	bne.n	8001aa0 <main+0x3b8>
				HAL_TIM_Base_Stop_IT(&htim7);
 8001a1c:	481e      	ldr	r0, [pc, #120]	; (8001a98 <main+0x3b0>)
 8001a1e:	f004 fd47 	bl	80064b0 <HAL_TIM_Base_Stop_IT>
				decel_end_flag =0;
 8001a22:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <main+0x3ac>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
				circuit_Section = Fast_section;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
			}
	  		break;
 8001a2e:	e037      	b.n	8001aa0 <main+0x3b8>
			break;
 8001a30:	bf00      	nop
 8001a32:	e036      	b.n	8001aa2 <main+0x3ba>
	  		break;
 8001a34:	bf00      	nop
 8001a36:	e034      	b.n	8001aa2 <main+0x3ba>
	  		break;
 8001a38:	bf00      	nop
 8001a3a:	e032      	b.n	8001aa2 <main+0x3ba>
	  		break;
 8001a3c:	bf00      	nop
 8001a3e:	e030      	b.n	8001aa2 <main+0x3ba>
 8001a40:	20000000 	.word	0x20000000
 8001a44:	200002cc 	.word	0x200002cc
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	2000047c 	.word	0x2000047c
 8001a50:	200005e4 	.word	0x200005e4
 8001a54:	20000554 	.word	0x20000554
 8001a58:	200004c4 	.word	0x200004c4
 8001a5c:	2000050c 	.word	0x2000050c
 8001a60:	200003cc 	.word	0x200003cc
 8001a64:	20000374 	.word	0x20000374
 8001a68:	20000424 	.word	0x20000424
 8001a6c:	20000674 	.word	0x20000674
 8001a70:	200007c4 	.word	0x200007c4
 8001a74:	200007cc 	.word	0x200007cc
 8001a78:	200007c8 	.word	0x200007c8
 8001a7c:	200007d0 	.word	0x200007d0
 8001a80:	20000bb0 	.word	0x20000bb0
 8001a84:	20000bac 	.word	0x20000bac
 8001a88:	40020000 	.word	0x40020000
 8001a8c:	3f333333 	.word	0x3f333333
 8001a90:	bf19999a 	.word	0xbf19999a
 8001a94:	20000b98 	.word	0x20000b98
 8001a98:	2000059c 	.word	0x2000059c
 8001a9c:	20000b9c 	.word	0x20000b9c
	  		break;
 8001aa0:	bf00      	nop
	  }
	  sprintf( (char*)BT_send_msg_buff, "ToF1: %d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 8001aa2:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <main+0x428>)
 8001aa4:	7edb      	ldrb	r3, [r3, #27]
 8001aa6:	461e      	mov	r6, r3
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <main+0x428>)
 8001aaa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001aae:	4698      	mov	r8, r3
			  	  	  ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
 8001ab0:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <main+0x428>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
	  sprintf( (char*)BT_send_msg_buff, "ToF1: %d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fd45 	bl	8000544 <__aeabi_ui2d>
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	4b15      	ldr	r3, [pc, #84]	; (8001b14 <main+0x42c>)
 8001ac0:	f7fe fee4 	bl	800088c <__aeabi_ddiv>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4614      	mov	r4, r2
 8001aca:	461d      	mov	r5, r3
			  	  	  ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <main+0x428>)
 8001ace:	68db      	ldr	r3, [r3, #12]
	  sprintf( (char*)BT_send_msg_buff, "ToF1: %d, %d, %.2f, %.2f\n\r", RangingData.RangeStatus, RangingData.RangeMilliMeter,
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fd37 	bl	8000544 <__aeabi_ui2d>
 8001ad6:	a30c      	add	r3, pc, #48	; (adr r3, 8001b08 <main+0x420>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe fed6 	bl	800088c <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ae8:	e9cd 4500 	strd	r4, r5, [sp]
 8001aec:	4643      	mov	r3, r8
 8001aee:	4632      	mov	r2, r6
 8001af0:	4909      	ldr	r1, [pc, #36]	; (8001b18 <main+0x430>)
 8001af2:	480a      	ldr	r0, [pc, #40]	; (8001b1c <main+0x434>)
 8001af4:	f00c fd6e 	bl	800e5d4 <siprintf>
	  BT_TransmitMsg(&huart2, BT_send_msg_buff);
 8001af8:	4908      	ldr	r1, [pc, #32]	; (8001b1c <main+0x434>)
 8001afa:	4809      	ldr	r0, [pc, #36]	; (8001b20 <main+0x438>)
 8001afc:	f7ff fa46 	bl	8000f8c <BT_TransmitMsg>
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 8001b00:	e67d      	b.n	80017fe <main+0x116>
 8001b02:	bf00      	nop
 8001b04:	f3af 8000 	nop.w
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40efe700 	.word	0x40efe700
 8001b10:	200007d4 	.word	0x200007d4
 8001b14:	40f00000 	.word	0x40f00000
 8001b18:	08012040 	.word	0x08012040
 8001b1c:	200006fc 	.word	0x200006fc
 8001b20:	20000674 	.word	0x20000674

08001b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b094      	sub	sp, #80	; 0x50
 8001b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	2234      	movs	r2, #52	; 0x34
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f00c f8dc 	bl	800dcf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
 8001b4c:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <SystemClock_Config+0xdc>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	4a2b      	ldr	r2, [pc, #172]	; (8001c00 <SystemClock_Config+0xdc>)
 8001b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b56:	6413      	str	r3, [r2, #64]	; 0x40
 8001b58:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <SystemClock_Config+0xdc>)
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b64:	2300      	movs	r3, #0
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <SystemClock_Config+0xe0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a25      	ldr	r2, [pc, #148]	; (8001c04 <SystemClock_Config+0xe0>)
 8001b6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <SystemClock_Config+0xe0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b80:	2301      	movs	r3, #1
 8001b82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b88:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b94:	2304      	movs	r3, #4
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b98:	23b4      	movs	r3, #180	; 0xb4
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ba8:	f107 031c 	add.w	r3, r7, #28
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 fcef 	bl	8005590 <HAL_RCC_OscConfig>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001bb8:	f000 fe18 	bl	80027ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001bbc:	f003 f94e 	bl	8004e5c <HAL_PWREx_EnableOverDrive>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001bc6:	f000 fe11 	bl	80027ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bca:	230f      	movs	r3, #15
 8001bcc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bd6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	2105      	movs	r1, #5
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 f987 	bl	8004efc <HAL_RCC_ClockConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001bf4:	f000 fdfa 	bl	80027ec <Error_Handler>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3750      	adds	r7, #80	; 0x50
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40007000 	.word	0x40007000

08001c08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c1a:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c1c:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <MX_ADC1_Init+0x9c>)
 8001c1e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c26:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001c2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c34:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c48:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c4a:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <MX_ADC1_Init+0xa0>)
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c6a:	f001 fc2f 	bl	80034cc <HAL_ADC_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c74:	f000 fdba 	bl	80027ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c84:	463b      	mov	r3, r7
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_ADC1_Init+0x98>)
 8001c8a:	f001 fc63 	bl	8003554 <HAL_ADC_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c94:	f000 fdaa 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000230 	.word	0x20000230
 8001ca4:	40012000 	.word	0x40012000
 8001ca8:	0f000001 	.word	0x0f000001

08001cac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cb2:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <MX_I2C1_Init+0x54>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cb8:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <MX_I2C1_Init+0x58>)
 8001cba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cbc:	4b0f      	ldr	r3, [pc, #60]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ce8:	4804      	ldr	r0, [pc, #16]	; (8001cfc <MX_I2C1_Init+0x50>)
 8001cea:	f002 f921 	bl	8003f30 <HAL_I2C_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cf4:	f000 fd7a 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000278 	.word	0x20000278
 8001d00:	40005400 	.word	0x40005400
 8001d04:	000186a0 	.word	0x000186a0

08001d08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <MX_I2C2_Init+0x50>)
 8001d0e:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <MX_I2C2_Init+0x54>)
 8001d10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_I2C2_Init+0x50>)
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <MX_I2C2_Init+0x58>)
 8001d16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_I2C2_Init+0x50>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_I2C2_Init+0x50>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_I2C2_Init+0x50>)
 8001d26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <MX_I2C2_Init+0x50>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_I2C2_Init+0x50>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <MX_I2C2_Init+0x50>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d3e:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_I2C2_Init+0x50>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d44:	4804      	ldr	r0, [pc, #16]	; (8001d58 <MX_I2C2_Init+0x50>)
 8001d46:	f002 f8f3 	bl	8003f30 <HAL_I2C_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d50:	f000 fd4c 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200002cc 	.word	0x200002cc
 8001d5c:	40005800 	.word	0x40005800
 8001d60:	000186a0 	.word	0x000186a0

08001d64 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <MX_I2C3_Init+0x50>)
 8001d6a:	4a13      	ldr	r2, [pc, #76]	; (8001db8 <MX_I2C3_Init+0x54>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_I2C3_Init+0x50>)
 8001d70:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <MX_I2C3_Init+0x58>)
 8001d72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <MX_I2C3_Init+0x50>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_I2C3_Init+0x50>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_I2C3_Init+0x50>)
 8001d82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d86:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <MX_I2C3_Init+0x50>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_I2C3_Init+0x50>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <MX_I2C3_Init+0x50>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9a:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_I2C3_Init+0x50>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <MX_I2C3_Init+0x50>)
 8001da2:	f002 f8c5 	bl	8003f30 <HAL_I2C_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001dac:	f000 fd1e 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000320 	.word	0x20000320
 8001db8:	40005c00 	.word	0x40005c00
 8001dbc:	000186a0 	.word	0x000186a0

08001dc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001dc6:	4a18      	ldr	r2, [pc, #96]	; (8001e28 <MX_SPI1_Init+0x68>)
 8001dc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dca:	4b16      	ldr	r3, [pc, #88]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001dcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001dd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001dec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001df4:	2228      	movs	r2, #40	; 0x28
 8001df6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001e0c:	220a      	movs	r2, #10
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <MX_SPI1_Init+0x64>)
 8001e12:	f003 fe5b 	bl	8005acc <HAL_SPI_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e1c:	f000 fce6 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000374 	.word	0x20000374
 8001e28:	40013000 	.word	0x40013000

08001e2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e32:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <MX_SPI2_Init+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e36:	4b16      	ldr	r3, [pc, #88]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e60:	2220      	movs	r2, #32
 8001e62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e70:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e78:	220a      	movs	r2, #10
 8001e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	; (8001e90 <MX_SPI2_Init+0x64>)
 8001e7e:	f003 fe25 	bl	8005acc <HAL_SPI_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e88:	f000 fcb0 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200003cc 	.word	0x200003cc
 8001e94:	40003800 	.word	0x40003800

08001e98 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001e9e:	4a19      	ldr	r2, [pc, #100]	; (8001f04 <MX_SPI3_Init+0x6c>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ea4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ea8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001eac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001eb0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ece:	2210      	movs	r2, #16
 8001ed0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001ee6:	220a      	movs	r2, #10
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_SPI3_Init+0x68>)
 8001eec:	f003 fdee 	bl	8005acc <HAL_SPI_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001ef6:	f000 fc79 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000424 	.word	0x20000424
 8001f04:	40003c00 	.word	0x40003c00

08001f08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	; 0x30
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	605a      	str	r2, [r3, #4]
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	60da      	str	r2, [r3, #12]
 8001f1c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f34:	4b33      	ldr	r3, [pc, #204]	; (8002004 <MX_TIM2_Init+0xfc>)
 8001f36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8001f3c:	4b31      	ldr	r3, [pc, #196]	; (8002004 <MX_TIM2_Init+0xfc>)
 8001f3e:	2208      	movs	r2, #8
 8001f40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <MX_TIM2_Init+0xfc>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f48:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <MX_TIM2_Init+0xfc>)
 8001f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <MX_TIM2_Init+0xfc>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <MX_TIM2_Init+0xfc>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001f5c:	4829      	ldr	r0, [pc, #164]	; (8002004 <MX_TIM2_Init+0xfc>)
 8001f5e:	f004 fbf7 	bl	8006750 <HAL_TIM_IC_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001f68:	f000 fc40 	bl	80027ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001f70:	2350      	movs	r3, #80	; 0x50
 8001f72:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	4619      	mov	r1, r3
 8001f86:	481f      	ldr	r0, [pc, #124]	; (8002004 <MX_TIM2_Init+0xfc>)
 8001f88:	f005 f963 	bl	8007252 <HAL_TIM_SlaveConfigSynchro>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f92:	f000 fc2b 	bl	80027ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	2200      	movs	r2, #0
 8001fac:	4619      	mov	r1, r3
 8001fae:	4815      	ldr	r0, [pc, #84]	; (8002004 <MX_TIM2_Init+0xfc>)
 8001fb0:	f004 ff2a 	bl	8006e08 <HAL_TIM_IC_ConfigChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001fba:	f000 fc17 	bl	80027ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	2204      	movs	r2, #4
 8001fcc:	4619      	mov	r1, r3
 8001fce:	480d      	ldr	r0, [pc, #52]	; (8002004 <MX_TIM2_Init+0xfc>)
 8001fd0:	f004 ff1a 	bl	8006e08 <HAL_TIM_IC_ConfigChannel>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001fda:	f000 fc07 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4806      	ldr	r0, [pc, #24]	; (8002004 <MX_TIM2_Init+0xfc>)
 8001fec:	f005 fea2 	bl	8007d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001ff6:	f000 fbf9 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	3730      	adds	r7, #48	; 0x30
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	2000047c 	.word	0x2000047c

08002008 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08e      	sub	sp, #56	; 0x38
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800200e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002012:	2200      	movs	r2, #0
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	609a      	str	r2, [r3, #8]
 800201a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201c:	f107 0320 	add.w	r3, r7, #32
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
 8002034:	615a      	str	r2, [r3, #20]
 8002036:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002038:	4b2e      	ldr	r3, [pc, #184]	; (80020f4 <MX_TIM3_Init+0xec>)
 800203a:	4a2f      	ldr	r2, [pc, #188]	; (80020f8 <MX_TIM3_Init+0xf0>)
 800203c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800203e:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <MX_TIM3_Init+0xec>)
 8002040:	2200      	movs	r2, #0
 8002042:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002044:	4b2b      	ldr	r3, [pc, #172]	; (80020f4 <MX_TIM3_Init+0xec>)
 8002046:	2220      	movs	r2, #32
 8002048:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <MX_TIM3_Init+0xec>)
 800204c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002050:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002052:	4b28      	ldr	r3, [pc, #160]	; (80020f4 <MX_TIM3_Init+0xec>)
 8002054:	2200      	movs	r2, #0
 8002056:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002058:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <MX_TIM3_Init+0xec>)
 800205a:	2200      	movs	r2, #0
 800205c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800205e:	4825      	ldr	r0, [pc, #148]	; (80020f4 <MX_TIM3_Init+0xec>)
 8002060:	f004 f966 	bl	8006330 <HAL_TIM_Base_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800206a:	f000 fbbf 	bl	80027ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800206e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002074:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002078:	4619      	mov	r1, r3
 800207a:	481e      	ldr	r0, [pc, #120]	; (80020f4 <MX_TIM3_Init+0xec>)
 800207c:	f005 f822 	bl	80070c4 <HAL_TIM_ConfigClockSource>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002086:	f000 fbb1 	bl	80027ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800208a:	481a      	ldr	r0, [pc, #104]	; (80020f4 <MX_TIM3_Init+0xec>)
 800208c:	f004 fa3f 	bl	800650e <HAL_TIM_PWM_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002096:	f000 fba9 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800209a:	2320      	movs	r3, #32
 800209c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020a2:	f107 0320 	add.w	r3, r7, #32
 80020a6:	4619      	mov	r1, r3
 80020a8:	4812      	ldr	r0, [pc, #72]	; (80020f4 <MX_TIM3_Init+0xec>)
 80020aa:	f005 fe43 	bl	8007d34 <HAL_TIMEx_MasterConfigSynchronization>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80020b4:	f000 fb9a 	bl	80027ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020b8:	2360      	movs	r3, #96	; 0x60
 80020ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80020bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80020c2:	2302      	movs	r3, #2
 80020c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	2204      	movs	r2, #4
 80020ce:	4619      	mov	r1, r3
 80020d0:	4808      	ldr	r0, [pc, #32]	; (80020f4 <MX_TIM3_Init+0xec>)
 80020d2:	f004 ff35 	bl	8006f40 <HAL_TIM_PWM_ConfigChannel>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80020dc:	f000 fb86 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <MX_TIM3_Init+0xec>)
 80020e2:	f004 f975 	bl	80063d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020e6:	4803      	ldr	r0, [pc, #12]	; (80020f4 <MX_TIM3_Init+0xec>)
 80020e8:	f000 ffa0 	bl	800302c <HAL_TIM_MspPostInit>

}
 80020ec:	bf00      	nop
 80020ee:	3738      	adds	r7, #56	; 0x38
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200004c4 	.word	0x200004c4
 80020f8:	40000400 	.word	0x40000400

080020fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b092      	sub	sp, #72	; 0x48
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002120:	f107 031c 	add.w	r3, r7, #28
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800212a:	463b      	mov	r3, r7
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
 8002138:	615a      	str	r2, [r3, #20]
 800213a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800213c:	4b36      	ldr	r3, [pc, #216]	; (8002218 <MX_TIM4_Init+0x11c>)
 800213e:	4a37      	ldr	r2, [pc, #220]	; (800221c <MX_TIM4_Init+0x120>)
 8002140:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002142:	4b35      	ldr	r3, [pc, #212]	; (8002218 <MX_TIM4_Init+0x11c>)
 8002144:	2200      	movs	r2, #0
 8002146:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002148:	4b33      	ldr	r3, [pc, #204]	; (8002218 <MX_TIM4_Init+0x11c>)
 800214a:	2240      	movs	r2, #64	; 0x40
 800214c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 800214e:	4b32      	ldr	r3, [pc, #200]	; (8002218 <MX_TIM4_Init+0x11c>)
 8002150:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002154:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002156:	4b30      	ldr	r3, [pc, #192]	; (8002218 <MX_TIM4_Init+0x11c>)
 8002158:	2200      	movs	r2, #0
 800215a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215c:	4b2e      	ldr	r3, [pc, #184]	; (8002218 <MX_TIM4_Init+0x11c>)
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002162:	482d      	ldr	r0, [pc, #180]	; (8002218 <MX_TIM4_Init+0x11c>)
 8002164:	f004 f8e4 	bl	8006330 <HAL_TIM_Base_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800216e:	f000 fb3d 	bl	80027ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002178:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800217c:	4619      	mov	r1, r3
 800217e:	4826      	ldr	r0, [pc, #152]	; (8002218 <MX_TIM4_Init+0x11c>)
 8002180:	f004 ffa0 	bl	80070c4 <HAL_TIM_ConfigClockSource>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800218a:	f000 fb2f 	bl	80027ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800218e:	4822      	ldr	r0, [pc, #136]	; (8002218 <MX_TIM4_Init+0x11c>)
 8002190:	f004 f9bd 	bl	800650e <HAL_TIM_PWM_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800219a:	f000 fb27 	bl	80027ec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800219e:	2306      	movs	r3, #6
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 80021a2:	2320      	movs	r3, #32
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80021a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021aa:	4619      	mov	r1, r3
 80021ac:	481a      	ldr	r0, [pc, #104]	; (8002218 <MX_TIM4_Init+0x11c>)
 80021ae:	f005 f850 	bl	8007252 <HAL_TIM_SlaveConfigSynchro>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 80021b8:	f000 fb18 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80021bc:	2320      	movs	r3, #32
 80021be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021c4:	f107 031c 	add.w	r3, r7, #28
 80021c8:	4619      	mov	r1, r3
 80021ca:	4813      	ldr	r0, [pc, #76]	; (8002218 <MX_TIM4_Init+0x11c>)
 80021cc:	f005 fdb2 	bl	8007d34 <HAL_TIMEx_MasterConfigSynchronization>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80021d6:	f000 fb09 	bl	80027ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021da:	2360      	movs	r3, #96	; 0x60
 80021dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 80021de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ec:	463b      	mov	r3, r7
 80021ee:	2200      	movs	r2, #0
 80021f0:	4619      	mov	r1, r3
 80021f2:	4809      	ldr	r0, [pc, #36]	; (8002218 <MX_TIM4_Init+0x11c>)
 80021f4:	f004 fea4 	bl	8006f40 <HAL_TIM_PWM_ConfigChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 80021fe:	f000 faf5 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8002202:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_TIM4_Init+0x11c>)
 8002204:	f004 f8e4 	bl	80063d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002208:	4803      	ldr	r0, [pc, #12]	; (8002218 <MX_TIM4_Init+0x11c>)
 800220a:	f000 ff0f 	bl	800302c <HAL_TIM_MspPostInit>

}
 800220e:	bf00      	nop
 8002210:	3748      	adds	r7, #72	; 0x48
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	2000050c 	.word	0x2000050c
 800221c:	40000800 	.word	0x40000800

08002220 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08e      	sub	sp, #56	; 0x38
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002234:	f107 0320 	add.w	r3, r7, #32
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
 800224c:	615a      	str	r2, [r3, #20]
 800224e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002250:	4b2c      	ldr	r3, [pc, #176]	; (8002304 <MX_TIM5_Init+0xe4>)
 8002252:	4a2d      	ldr	r2, [pc, #180]	; (8002308 <MX_TIM5_Init+0xe8>)
 8002254:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 30-1;
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <MX_TIM5_Init+0xe4>)
 8002258:	221d      	movs	r2, #29
 800225a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800225c:	4b29      	ldr	r3, [pc, #164]	; (8002304 <MX_TIM5_Init+0xe4>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000-1;
 8002262:	4b28      	ldr	r3, [pc, #160]	; (8002304 <MX_TIM5_Init+0xe4>)
 8002264:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002268:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226a:	4b26      	ldr	r3, [pc, #152]	; (8002304 <MX_TIM5_Init+0xe4>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <MX_TIM5_Init+0xe4>)
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002276:	4823      	ldr	r0, [pc, #140]	; (8002304 <MX_TIM5_Init+0xe4>)
 8002278:	f004 f85a 	bl	8006330 <HAL_TIM_Base_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002282:	f000 fab3 	bl	80027ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800228c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002290:	4619      	mov	r1, r3
 8002292:	481c      	ldr	r0, [pc, #112]	; (8002304 <MX_TIM5_Init+0xe4>)
 8002294:	f004 ff16 	bl	80070c4 <HAL_TIM_ConfigClockSource>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 800229e:	f000 faa5 	bl	80027ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80022a2:	4818      	ldr	r0, [pc, #96]	; (8002304 <MX_TIM5_Init+0xe4>)
 80022a4:	f004 f933 	bl	800650e <HAL_TIM_PWM_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80022ae:	f000 fa9d 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022ba:	f107 0320 	add.w	r3, r7, #32
 80022be:	4619      	mov	r1, r3
 80022c0:	4810      	ldr	r0, [pc, #64]	; (8002304 <MX_TIM5_Init+0xe4>)
 80022c2:	f005 fd37 	bl	8007d34 <HAL_TIMEx_MasterConfigSynchronization>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 80022cc:	f000 fa8e 	bl	80027ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022d0:	2360      	movs	r3, #96	; 0x60
 80022d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	2200      	movs	r2, #0
 80022e4:	4619      	mov	r1, r3
 80022e6:	4807      	ldr	r0, [pc, #28]	; (8002304 <MX_TIM5_Init+0xe4>)
 80022e8:	f004 fe2a 	bl	8006f40 <HAL_TIM_PWM_ConfigChannel>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80022f2:	f000 fa7b 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022f6:	4803      	ldr	r0, [pc, #12]	; (8002304 <MX_TIM5_Init+0xe4>)
 80022f8:	f000 fe98 	bl	800302c <HAL_TIM_MspPostInit>

}
 80022fc:	bf00      	nop
 80022fe:	3738      	adds	r7, #56	; 0x38
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000554 	.word	0x20000554
 8002308:	40000c00 	.word	0x40000c00

0800230c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002312:	463b      	mov	r3, r7
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <MX_TIM7_Init+0x64>)
 800231c:	4a15      	ldr	r2, [pc, #84]	; (8002374 <MX_TIM7_Init+0x68>)
 800231e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <MX_TIM7_Init+0x64>)
 8002322:	f242 720f 	movw	r2, #9999	; 0x270f
 8002326:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <MX_TIM7_Init+0x64>)
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <MX_TIM7_Init+0x64>)
 8002330:	f241 3287 	movw	r2, #4999	; 0x1387
 8002334:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_TIM7_Init+0x64>)
 8002338:	2200      	movs	r2, #0
 800233a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800233c:	480c      	ldr	r0, [pc, #48]	; (8002370 <MX_TIM7_Init+0x64>)
 800233e:	f003 fff7 	bl	8006330 <HAL_TIM_Base_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002348:	f000 fa50 	bl	80027ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800234c:	2300      	movs	r3, #0
 800234e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002350:	2300      	movs	r3, #0
 8002352:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002354:	463b      	mov	r3, r7
 8002356:	4619      	mov	r1, r3
 8002358:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_TIM7_Init+0x64>)
 800235a:	f005 fceb 	bl	8007d34 <HAL_TIMEx_MasterConfigSynchronization>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002364:	f000 fa42 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	2000059c 	.word	0x2000059c
 8002374:	40001400 	.word	0x40001400

08002378 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <MX_TIM10_Init+0x40>)
 800237e:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <MX_TIM10_Init+0x44>)
 8002380:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 45000-1;
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <MX_TIM10_Init+0x40>)
 8002384:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002388:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <MX_TIM10_Init+0x40>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 400-1;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <MX_TIM10_Init+0x40>)
 8002392:	f240 128f 	movw	r2, #399	; 0x18f
 8002396:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <MX_TIM10_Init+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <MX_TIM10_Init+0x40>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <MX_TIM10_Init+0x40>)
 80023a6:	f003 ffc3 	bl	8006330 <HAL_TIM_Base_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80023b0:	f000 fa1c 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	200005e4 	.word	0x200005e4
 80023bc:	40014400 	.word	0x40014400

080023c0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023c6:	1d3b      	adds	r3, r7, #4
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
 80023d2:	611a      	str	r2, [r3, #16]
 80023d4:	615a      	str	r2, [r3, #20]
 80023d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80023d8:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <MX_TIM13_Init+0x94>)
 80023da:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <MX_TIM13_Init+0x98>)
 80023dc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <MX_TIM13_Init+0x94>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <MX_TIM13_Init+0x94>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80023ea:	4b1a      	ldr	r3, [pc, #104]	; (8002454 <MX_TIM13_Init+0x94>)
 80023ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023f0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <MX_TIM13_Init+0x94>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <MX_TIM13_Init+0x94>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80023fe:	4815      	ldr	r0, [pc, #84]	; (8002454 <MX_TIM13_Init+0x94>)
 8002400:	f003 ff96 	bl	8006330 <HAL_TIM_Base_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800240a:	f000 f9ef 	bl	80027ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800240e:	4811      	ldr	r0, [pc, #68]	; (8002454 <MX_TIM13_Init+0x94>)
 8002410:	f004 f87d 	bl	800650e <HAL_TIM_PWM_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800241a:	f000 f9e7 	bl	80027ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800241e:	2360      	movs	r3, #96	; 0x60
 8002420:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	2200      	movs	r2, #0
 8002432:	4619      	mov	r1, r3
 8002434:	4807      	ldr	r0, [pc, #28]	; (8002454 <MX_TIM13_Init+0x94>)
 8002436:	f004 fd83 	bl	8006f40 <HAL_TIM_PWM_ConfigChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002440:	f000 f9d4 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <MX_TIM13_Init+0x94>)
 8002446:	f000 fdf1 	bl	800302c <HAL_TIM_MspPostInit>

}
 800244a:	bf00      	nop
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	2000062c 	.word	0x2000062c
 8002458:	40001c00 	.word	0x40001c00

0800245c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <MX_USART2_UART_Init+0x50>)
 8002464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002468:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800246c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002494:	f005 fcde 	bl	8007e54 <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800249e:	f000 f9a5 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000674 	.word	0x20000674
 80024ac:	40004400 	.word	0x40004400

080024b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <MX_USART6_UART_Init+0x4c>)
 80024b6:	4a12      	ldr	r2, [pc, #72]	; (8002500 <MX_USART6_UART_Init+0x50>)
 80024b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <MX_USART6_UART_Init+0x4c>)
 80024bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024c2:	4b0e      	ldr	r3, [pc, #56]	; (80024fc <MX_USART6_UART_Init+0x4c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <MX_USART6_UART_Init+0x4c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024ce:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <MX_USART6_UART_Init+0x4c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <MX_USART6_UART_Init+0x4c>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <MX_USART6_UART_Init+0x4c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <MX_USART6_UART_Init+0x4c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80024e6:	4805      	ldr	r0, [pc, #20]	; (80024fc <MX_USART6_UART_Init+0x4c>)
 80024e8:	f005 fcb4 	bl	8007e54 <HAL_UART_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024f2:	f000 f97b 	bl	80027ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200006b8 	.word	0x200006b8
 8002500:	40011400 	.word	0x40011400

08002504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	; 0x28
 8002508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	609a      	str	r2, [r3, #8]
 8002516:	60da      	str	r2, [r3, #12]
 8002518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
 800251e:	4b67      	ldr	r3, [pc, #412]	; (80026bc <MX_GPIO_Init+0x1b8>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a66      	ldr	r2, [pc, #408]	; (80026bc <MX_GPIO_Init+0x1b8>)
 8002524:	f043 0304 	orr.w	r3, r3, #4
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b64      	ldr	r3, [pc, #400]	; (80026bc <MX_GPIO_Init+0x1b8>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	613b      	str	r3, [r7, #16]
 8002534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b60      	ldr	r3, [pc, #384]	; (80026bc <MX_GPIO_Init+0x1b8>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a5f      	ldr	r2, [pc, #380]	; (80026bc <MX_GPIO_Init+0x1b8>)
 8002540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b5d      	ldr	r3, [pc, #372]	; (80026bc <MX_GPIO_Init+0x1b8>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	4b59      	ldr	r3, [pc, #356]	; (80026bc <MX_GPIO_Init+0x1b8>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a58      	ldr	r2, [pc, #352]	; (80026bc <MX_GPIO_Init+0x1b8>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b56      	ldr	r3, [pc, #344]	; (80026bc <MX_GPIO_Init+0x1b8>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	4b52      	ldr	r3, [pc, #328]	; (80026bc <MX_GPIO_Init+0x1b8>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a51      	ldr	r2, [pc, #324]	; (80026bc <MX_GPIO_Init+0x1b8>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b4f      	ldr	r3, [pc, #316]	; (80026bc <MX_GPIO_Init+0x1b8>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <MX_GPIO_Init+0x1b8>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a4a      	ldr	r2, [pc, #296]	; (80026bc <MX_GPIO_Init+0x1b8>)
 8002594:	f043 0308 	orr.w	r3, r3, #8
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b48      	ldr	r3, [pc, #288]	; (80026bc <MX_GPIO_Init+0x1b8>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 80025a6:	2200      	movs	r2, #0
 80025a8:	f24d 0107 	movw	r1, #53255	; 0xd007
 80025ac:	4844      	ldr	r0, [pc, #272]	; (80026c0 <MX_GPIO_Init+0x1bc>)
 80025ae:	f001 fca5 	bl	8003efc <HAL_GPIO_WritePin>
                          |AD_CS3_Pin|AD_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_CS1_Pin|LED_LE_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80025b8:	4842      	ldr	r0, [pc, #264]	; (80026c4 <MX_GPIO_Init+0x1c0>)
 80025ba:	f001 fc9f 	bl	8003efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin, GPIO_PIN_RESET);
 80025be:	2200      	movs	r2, #0
 80025c0:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 80025c4:	4840      	ldr	r0, [pc, #256]	; (80026c8 <MX_GPIO_Init+0x1c4>)
 80025c6:	f001 fc99 	bl	8003efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_RESET);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2104      	movs	r1, #4
 80025ce:	483f      	ldr	r0, [pc, #252]	; (80026cc <MX_GPIO_Init+0x1c8>)
 80025d0:	f001 fc94 	bl	8003efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80025de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	4619      	mov	r1, r3
 80025ea:	4836      	ldr	r0, [pc, #216]	; (80026c4 <MX_GPIO_Init+0x1c0>)
 80025ec:	f001 faf2 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dead_man_SW_Pin DRV_PWR_FB_Pin */
  GPIO_InitStruct.Pin = Dead_man_SW_Pin|DRV_PWR_FB_Pin;
 80025f0:	2311      	movs	r3, #17
 80025f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	4619      	mov	r1, r3
 8002602:	4830      	ldr	r0, [pc, #192]	; (80026c4 <MX_GPIO_Init+0x1c0>)
 8002604:	f001 fae6 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_INT_Pin */
  GPIO_InitStruct.Pin = I2C_INT_Pin;
 8002608:	2320      	movs	r3, #32
 800260a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800260c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002610:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2C_INT_GPIO_Port, &GPIO_InitStruct);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4619      	mov	r1, r3
 800261c:	4829      	ldr	r0, [pc, #164]	; (80026c4 <MX_GPIO_Init+0x1c0>)
 800261e:	f001 fad9 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_XSDN_36_Pin ToF_XSDN_25_Pin ToF_XSDN_14_Pin AD_CS4_Pin
                           AD_CS3_Pin AD_CS2_Pin */
  GPIO_InitStruct.Pin = ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 8002622:	f24d 0307 	movw	r3, #53255	; 0xd007
 8002626:	617b      	str	r3, [r7, #20]
                          |AD_CS3_Pin|AD_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002628:	2301      	movs	r3, #1
 800262a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262c:	2300      	movs	r3, #0
 800262e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002630:	2300      	movs	r3, #0
 8002632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4619      	mov	r1, r3
 800263a:	4821      	ldr	r0, [pc, #132]	; (80026c0 <MX_GPIO_Init+0x1bc>)
 800263c:	f001 faca 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_CS1_Pin LED_LE_Pin */
  GPIO_InitStruct.Pin = AD_CS1_Pin|LED_LE_Pin;
 8002640:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002646:	2301      	movs	r3, #1
 8002648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002652:	f107 0314 	add.w	r3, r7, #20
 8002656:	4619      	mov	r1, r3
 8002658:	481a      	ldr	r0, [pc, #104]	; (80026c4 <MX_GPIO_Init+0x1c0>)
 800265a:	f001 fabb 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INF_LE_Pin INF_OE_Pin DRV_EN_Pin */
  GPIO_InitStruct.Pin = INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin;
 800265e:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8002662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002664:	2301      	movs	r3, #1
 8002666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4619      	mov	r1, r3
 8002676:	4814      	ldr	r0, [pc, #80]	; (80026c8 <MX_GPIO_Init+0x1c4>)
 8002678:	f001 faac 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_FB_Pin */
  GPIO_InitStruct.Pin = DRV_EN_FB_Pin;
 800267c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002682:	2300      	movs	r3, #0
 8002684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_EN_FB_GPIO_Port, &GPIO_InitStruct);
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	4619      	mov	r1, r3
 8002690:	480d      	ldr	r0, [pc, #52]	; (80026c8 <MX_GPIO_Init+0x1c4>)
 8002692:	f001 fa9f 	bl	8003bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_OE_Pin;
 8002696:	2304      	movs	r3, #4
 8002698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800269a:	2301      	movs	r3, #1
 800269c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OE_GPIO_Port, &GPIO_InitStruct);
 80026a6:	f107 0314 	add.w	r3, r7, #20
 80026aa:	4619      	mov	r1, r3
 80026ac:	4807      	ldr	r0, [pc, #28]	; (80026cc <MX_GPIO_Init+0x1c8>)
 80026ae:	f001 fa91 	bl	8003bd4 <HAL_GPIO_Init>

}
 80026b2:	bf00      	nop
 80026b4:	3728      	adds	r7, #40	; 0x28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020400 	.word	0x40020400
 80026c4:	40020800 	.word	0x40020800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020c00 	.word	0x40020c00

080026d0 <HAL_TIM_PeriodElapsedCallback>:
//			   ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
//	VL53L1_ClearInterruptAndStartMeasurement(Dev1);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
	if (htim == &htim7)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d104      	bne.n	80026ea <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		decel_end_flag++;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	3301      	adds	r3, #1
 80026e6:	4a10      	ldr	r2, [pc, #64]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80026e8:	6013      	str	r3, [r2, #0]
//			LS_LED_Send(&hspi3, leds_all_on);
//			lightIsOn = true;
//		}
//		}
	}
	if (htim == &htim10 )
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a0f      	ldr	r2, [pc, #60]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d114      	bne.n	800271c <HAL_TIM_PeriodElapsedCallback+0x4c>
	  {
		VL53L1_GetMeasurementDataReady  ( Dev1,  &DataReady ) ;
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	490f      	ldr	r1, [pc, #60]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80026f8:	4618      	mov	r0, r3
 80026fa:	f006 fcb7 	bl	800906c <VL53L1_GetMeasurementDataReady>
		if(DataReady == 1){
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d105      	bne.n	8002712 <HAL_TIM_PeriodElapsedCallback+0x42>
			VL53L1_GetRangingMeasurementData( Dev1, &RangingData );
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	490b      	ldr	r1, [pc, #44]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800270c:	4618      	mov	r0, r3
 800270e:	f006 fe69 	bl	80093e4 <VL53L1_GetRangingMeasurementData>
		}

		VL53L1_ClearInterruptAndStartMeasurement( Dev1 );
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f006 fc92 	bl	8009040 <VL53L1_ClearInterruptAndStartMeasurement>
	  }
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	2000059c 	.word	0x2000059c
 8002728:	20000b98 	.word	0x20000b98
 800272c:	200005e4 	.word	0x200005e4
 8002730:	20000000 	.word	0x20000000
 8002734:	20000b94 	.word	0x20000b94
 8002738:	200007d4 	.word	0x200007d4

0800273c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800274c:	d13d      	bne.n	80027ca <HAL_TIM_IC_CaptureCallback+0x8e>
		cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 2;
 800274e:	2100      	movs	r1, #0
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f004 fdc1 	bl	80072d8 <HAL_TIM_ReadCapturedValue>
 8002756:	4603      	mov	r3, r0
 8002758:	3302      	adds	r3, #2
 800275a:	4a1e      	ldr	r2, [pc, #120]	; (80027d4 <HAL_TIM_IC_CaptureCallback+0x98>)
 800275c:	6013      	str	r3, [r2, #0]
		cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + 2;
 800275e:	2104      	movs	r1, #4
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f004 fdb9 	bl	80072d8 <HAL_TIM_ReadCapturedValue>
 8002766:	4603      	mov	r3, r0
 8002768:	3302      	adds	r3, #2
 800276a:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800276c:	6013      	str	r3, [r2, #0]

		duty_deadman = (float) 100 * cnt_high / cnt_full;
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800277a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80027dc <HAL_TIM_IC_CaptureCallback+0xa0>
 800277e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	ee07 3a90 	vmov	s15, r3
 800278a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800278e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002794:	edc3 7a00 	vstr	s15, [r3]
		duty_MA = duty_alpha * duty_deadman + (1-duty_alpha) * duty_MA;
 8002798:	4b12      	ldr	r3, [pc, #72]	; (80027e4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800279a:	ed93 7a00 	vldr	s14, [r3]
 800279e:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80027a0:	edd3 7a00 	vldr	s15, [r3]
 80027a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a8:	4b0e      	ldr	r3, [pc, #56]	; (80027e4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80027aa:	edd3 7a00 	vldr	s15, [r3]
 80027ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027b2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027b6:	4b0c      	ldr	r3, [pc, #48]	; (80027e8 <HAL_TIM_IC_CaptureCallback+0xac>)
 80027b8:	edd3 7a00 	vldr	s15, [r3]
 80027bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c4:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <HAL_TIM_IC_CaptureCallback+0xac>)
 80027c6:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000ba0 	.word	0x20000ba0
 80027d8:	20000ba4 	.word	0x20000ba4
 80027dc:	42c80000 	.word	0x42c80000
 80027e0:	20000ba8 	.word	0x20000ba8
 80027e4:	20000004 	.word	0x20000004
 80027e8:	20000bac 	.word	0x20000bac

080027ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f0:	b672      	cpsid	i
}
 80027f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <Error_Handler+0x8>

080027f6 <MotorDrive>:
#include "main.h"

int MotorDrive(TIM_HandleTypeDef* const pwmHandle, int duty)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
 80027fe:	6039      	str	r1, [r7, #0]
	int pwm_val = 1000+(duty*20);
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800280e:	60fb      	str	r3, [r7, #12]
	pwmHandle -> Instance -> CCR1 = pwm_val;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	635a      	str	r2, [r3, #52]	; 0x34
	return pwm_val;
 8002818:	68fb      	ldr	r3, [r7, #12]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <ServoPosition>:
#include "main.h"
#include <math.h>

void ServoPosition(TIM_HandleTypeDef* const pwmHandle, double    angle){
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	ed87 0b00 	vstr	d0, [r7]
    if(angle < 20){angle = 20;}
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	4b27      	ldr	r3, [pc, #156]	; (80028d8 <ServoPosition+0xb0>)
 800283a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800283e:	f7fe f96d 	bl	8000b1c <__aeabi_dcmplt>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d004      	beq.n	8002852 <ServoPosition+0x2a>
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <ServoPosition+0xb0>)
 800284e:	e9c7 2300 	strd	r2, r3, [r7]
    if(angle>160){angle = 160;}
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <ServoPosition+0xb4>)
 8002858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800285c:	f7fe f97c 	bl	8000b58 <__aeabi_dcmpgt>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <ServoPosition+0x48>
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <ServoPosition+0xb4>)
 800286c:	e9c7 2300 	strd	r2, r3, [r7]
    //angle2CCR = ((angle/180+1)/20*60000);
    pwmHandle->Instance->CCR1 = (int)((angle/180+1)/20*60000);//angle2CCR;
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <ServoPosition+0xb8>)
 8002876:	e9d7 0100 	ldrd	r0, r1, [r7]
 800287a:	f7fe f807 	bl	800088c <__aeabi_ddiv>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <ServoPosition+0xbc>)
 800288c:	f7fd fd1e 	bl	80002cc <__adddf3>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <ServoPosition+0xb0>)
 800289e:	f7fd fff5 	bl	800088c <__aeabi_ddiv>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	a309      	add	r3, pc, #36	; (adr r3, 80028d0 <ServoPosition+0xa8>)
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f7fd fec2 	bl	8000638 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7fe f96c 	bl	8000b98 <__aeabi_d2iz>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	00000000 	.word	0x00000000
 80028d4:	40ed4c00 	.word	0x40ed4c00
 80028d8:	40340000 	.word	0x40340000
 80028dc:	40640000 	.word	0x40640000
 80028e0:	40668000 	.word	0x40668000
 80028e4:	3ff00000 	.word	0x3ff00000

080028e8 <SteeringAngle>:


float SteeringAngle(float p, float delta, float kp, float kd){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80028f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80028f6:	ed87 1a01 	vstr	s2, [r7, #4]
 80028fa:	edc7 1a00 	vstr	s3, [r7]
	float phi = atan(0.7826*tan(-kp*p-kd*delta));
 80028fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002902:	eeb1 7a67 	vneg.f32	s14, s15
 8002906:	edd7 7a03 	vldr	s15, [r7, #12]
 800290a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800290e:	edd7 6a00 	vldr	s13, [r7]
 8002912:	edd7 7a02 	vldr	s15, [r7, #8]
 8002916:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800291a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800291e:	ee17 0a90 	vmov	r0, s15
 8002922:	f7fd fe31 	bl	8000588 <__aeabi_f2d>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	ec43 2b10 	vmov	d0, r2, r3
 800292e:	f00e fa7b 	bl	8010e28 <tan>
 8002932:	ec51 0b10 	vmov	r0, r1, d0
 8002936:	a31d      	add	r3, pc, #116	; (adr r3, 80029ac <SteeringAngle+0xc4>)
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f7fd fe7c 	bl	8000638 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	ec43 2b17 	vmov	d7, r2, r3
 8002948:	eeb0 0a47 	vmov.f32	s0, s14
 800294c:	eef0 0a67 	vmov.f32	s1, s15
 8002950:	f00e f8be 	bl	8010ad0 <atan>
 8002954:	ec53 2b10 	vmov	r2, r3, d0
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	f7fe f944 	bl	8000be8 <__aeabi_d2f>
 8002960:	4603      	mov	r3, r0
 8002962:	617b      	str	r3, [r7, #20]
	float servoangle=90-phi*269.04;
 8002964:	6978      	ldr	r0, [r7, #20]
 8002966:	f7fd fe0f 	bl	8000588 <__aeabi_f2d>
 800296a:	a312      	add	r3, pc, #72	; (adr r3, 80029b4 <SteeringAngle+0xcc>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	f7fd fe62 	bl	8000638 <__aeabi_dmul>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	f04f 0000 	mov.w	r0, #0
 800297c:	490a      	ldr	r1, [pc, #40]	; (80029a8 <SteeringAngle+0xc0>)
 800297e:	f7fd fca3 	bl	80002c8 <__aeabi_dsub>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4610      	mov	r0, r2
 8002988:	4619      	mov	r1, r3
 800298a:	f7fe f92d 	bl	8000be8 <__aeabi_d2f>
 800298e:	4603      	mov	r3, r0
 8002990:	613b      	str	r3, [r7, #16]
	return servoangle;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	ee07 3a90 	vmov	s15, r3
}
 8002998:	eeb0 0a67 	vmov.f32	s0, s15
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	f3af 8000 	nop.w
 80029a8:	40568000 	.word	0x40568000
 80029ac:	27bb2fec 	.word	0x27bb2fec
 80029b0:	3fe90b0f 	.word	0x3fe90b0f
 80029b4:	d70a3d71 	.word	0xd70a3d71
 80029b8:	4070d0a3 	.word	0x4070d0a3

080029bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	607b      	str	r3, [r7, #4]
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <HAL_MspInit+0x4c>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	4a0f      	ldr	r2, [pc, #60]	; (8002a08 <HAL_MspInit+0x4c>)
 80029cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d0:	6453      	str	r3, [r2, #68]	; 0x44
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <HAL_MspInit+0x4c>)
 80029d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	4b09      	ldr	r3, [pc, #36]	; (8002a08 <HAL_MspInit+0x4c>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	4a08      	ldr	r2, [pc, #32]	; (8002a08 <HAL_MspInit+0x4c>)
 80029e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6413      	str	r3, [r2, #64]	; 0x40
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_MspInit+0x4c>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029fa:	2007      	movs	r0, #7
 80029fc:	f001 f8a8 	bl	8003b50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40023800 	.word	0x40023800

08002a0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a17      	ldr	r2, [pc, #92]	; (8002a88 <HAL_ADC_MspInit+0x7c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d127      	bne.n	8002a7e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <HAL_ADC_MspInit+0x80>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a15      	ldr	r2, [pc, #84]	; (8002a8c <HAL_ADC_MspInit+0x80>)
 8002a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <HAL_ADC_MspInit+0x80>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_ADC_MspInit+0x80>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <HAL_ADC_MspInit+0x80>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <HAL_ADC_MspInit+0x80>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IMotor_Pin|UBatt_Pin;
 8002a66:	2312      	movs	r3, #18
 8002a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a72:	f107 0314 	add.w	r3, r7, #20
 8002a76:	4619      	mov	r1, r3
 8002a78:	4805      	ldr	r0, [pc, #20]	; (8002a90 <HAL_ADC_MspInit+0x84>)
 8002a7a:	f001 f8ab 	bl	8003bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a7e:	bf00      	nop
 8002a80:	3728      	adds	r7, #40	; 0x28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40012000 	.word	0x40012000
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40020000 	.word	0x40020000

08002a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08e      	sub	sp, #56	; 0x38
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a5c      	ldr	r2, [pc, #368]	; (8002c24 <HAL_I2C_MspInit+0x190>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d12d      	bne.n	8002b12 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
 8002aba:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a5a      	ldr	r2, [pc, #360]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002ac0:	f043 0302 	orr.w	r3, r3, #2
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b58      	ldr	r3, [pc, #352]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	623b      	str	r3, [r7, #32]
 8002ad0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002ad2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad8:	2312      	movs	r3, #18
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aec:	4619      	mov	r1, r3
 8002aee:	484f      	ldr	r0, [pc, #316]	; (8002c2c <HAL_I2C_MspInit+0x198>)
 8002af0:	f001 f870 	bl	8003bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
 8002af8:	4b4b      	ldr	r3, [pc, #300]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	4a4a      	ldr	r2, [pc, #296]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002afe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b02:	6413      	str	r3, [r2, #64]	; 0x40
 8002b04:	4b48      	ldr	r3, [pc, #288]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b10:	e083      	b.n	8002c1a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a46      	ldr	r2, [pc, #280]	; (8002c30 <HAL_I2C_MspInit+0x19c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d12d      	bne.n	8002b78 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
 8002b20:	4b41      	ldr	r3, [pc, #260]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4a40      	ldr	r2, [pc, #256]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002b26:	f043 0302 	orr.w	r3, r3, #2
 8002b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2c:	4b3e      	ldr	r3, [pc, #248]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8002b38:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b3e:	2312      	movs	r3, #18
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b46:	2303      	movs	r3, #3
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b52:	4619      	mov	r1, r3
 8002b54:	4835      	ldr	r0, [pc, #212]	; (8002c2c <HAL_I2C_MspInit+0x198>)
 8002b56:	f001 f83d 	bl	8003bd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	4b32      	ldr	r3, [pc, #200]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	4a31      	ldr	r2, [pc, #196]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002b64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b68:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6a:	4b2f      	ldr	r3, [pc, #188]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	697b      	ldr	r3, [r7, #20]
}
 8002b76:	e050      	b.n	8002c1a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2d      	ldr	r2, [pc, #180]	; (8002c34 <HAL_I2C_MspInit+0x1a0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d14b      	bne.n	8002c1a <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	4b28      	ldr	r3, [pc, #160]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a27      	ldr	r2, [pc, #156]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b25      	ldr	r3, [pc, #148]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a20      	ldr	r2, [pc, #128]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b1e      	ldr	r3, [pc, #120]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bc0:	2312      	movs	r3, #18
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bcc:	2304      	movs	r3, #4
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4818      	ldr	r0, [pc, #96]	; (8002c38 <HAL_I2C_MspInit+0x1a4>)
 8002bd8:	f000 fffc 	bl	8003bd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002be2:	2312      	movs	r3, #18
 8002be4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	2300      	movs	r3, #0
 8002be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bea:	2303      	movs	r3, #3
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bee:	2304      	movs	r3, #4
 8002bf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4810      	ldr	r0, [pc, #64]	; (8002c3c <HAL_I2C_MspInit+0x1a8>)
 8002bfa:	f000 ffeb 	bl	8003bd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002c08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_I2C_MspInit+0x194>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
}
 8002c1a:	bf00      	nop
 8002c1c:	3738      	adds	r7, #56	; 0x38
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40005400 	.word	0x40005400
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	40005800 	.word	0x40005800
 8002c34:	40005c00 	.word	0x40005c00
 8002c38:	40020800 	.word	0x40020800
 8002c3c:	40020000 	.word	0x40020000

08002c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b090      	sub	sp, #64	; 0x40
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a72      	ldr	r2, [pc, #456]	; (8002e28 <HAL_SPI_MspInit+0x1e8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d14a      	bne.n	8002cf8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c66:	4b71      	ldr	r3, [pc, #452]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a70      	ldr	r2, [pc, #448]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b6e      	ldr	r3, [pc, #440]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
 8002c82:	4b6a      	ldr	r3, [pc, #424]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a69      	ldr	r2, [pc, #420]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b67      	ldr	r3, [pc, #412]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
 8002c9e:	4b63      	ldr	r3, [pc, #396]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a62      	ldr	r2, [pc, #392]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b60      	ldr	r3, [pc, #384]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	623b      	str	r3, [r7, #32]
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002cb6:	23a0      	movs	r3, #160	; 0xa0
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cc6:	2305      	movs	r3, #5
 8002cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4857      	ldr	r0, [pc, #348]	; (8002e30 <HAL_SPI_MspInit+0x1f0>)
 8002cd2:	f000 ff7f 	bl	8003bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cd6:	2310      	movs	r3, #16
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ce6:	2305      	movs	r3, #5
 8002ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4850      	ldr	r0, [pc, #320]	; (8002e34 <HAL_SPI_MspInit+0x1f4>)
 8002cf2:	f000 ff6f 	bl	8003bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002cf6:	e092      	b.n	8002e1e <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a4e      	ldr	r2, [pc, #312]	; (8002e38 <HAL_SPI_MspInit+0x1f8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d15b      	bne.n	8002dba <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	4b49      	ldr	r3, [pc, #292]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a48      	ldr	r2, [pc, #288]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b46      	ldr	r3, [pc, #280]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	4b42      	ldr	r3, [pc, #264]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a41      	ldr	r2, [pc, #260]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b3f      	ldr	r3, [pc, #252]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	4b3b      	ldr	r3, [pc, #236]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	4a3a      	ldr	r2, [pc, #232]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002d44:	f043 0302 	orr.w	r3, r3, #2
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	4b38      	ldr	r3, [pc, #224]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d56:	2302      	movs	r3, #2
 8002d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d62:	2303      	movs	r3, #3
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002d66:	2307      	movs	r3, #7
 8002d68:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4832      	ldr	r0, [pc, #200]	; (8002e3c <HAL_SPI_MspInit+0x1fc>)
 8002d72:	f000 ff2f 	bl	8003bd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d76:	2304      	movs	r3, #4
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d82:	2303      	movs	r3, #3
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d86:	2305      	movs	r3, #5
 8002d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d8e:	4619      	mov	r1, r3
 8002d90:	482a      	ldr	r0, [pc, #168]	; (8002e3c <HAL_SPI_MspInit+0x1fc>)
 8002d92:	f000 ff1f 	bl	8003bd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da0:	2300      	movs	r3, #0
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da4:	2303      	movs	r3, #3
 8002da6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002da8:	2305      	movs	r3, #5
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002db0:	4619      	mov	r1, r3
 8002db2:	4820      	ldr	r0, [pc, #128]	; (8002e34 <HAL_SPI_MspInit+0x1f4>)
 8002db4:	f000 ff0e 	bl	8003bd4 <HAL_GPIO_Init>
}
 8002db8:	e031      	b.n	8002e1e <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a20      	ldr	r2, [pc, #128]	; (8002e40 <HAL_SPI_MspInit+0x200>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d12c      	bne.n	8002e1e <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	4a17      	ldr	r2, [pc, #92]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de0:	2300      	movs	r3, #0
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4a10      	ldr	r2, [pc, #64]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002dea:	f043 0304 	orr.w	r3, r3, #4
 8002dee:	6313      	str	r3, [r2, #48]	; 0x30
 8002df0:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <HAL_SPI_MspInit+0x1ec>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002dfc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e02:	2302      	movs	r3, #2
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e0e:	2306      	movs	r3, #6
 8002e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e16:	4619      	mov	r1, r3
 8002e18:	4808      	ldr	r0, [pc, #32]	; (8002e3c <HAL_SPI_MspInit+0x1fc>)
 8002e1a:	f000 fedb 	bl	8003bd4 <HAL_GPIO_Init>
}
 8002e1e:	bf00      	nop
 8002e20:	3740      	adds	r7, #64	; 0x40
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40013000 	.word	0x40013000
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40020000 	.word	0x40020000
 8002e34:	40020400 	.word	0x40020400
 8002e38:	40003800 	.word	0x40003800
 8002e3c:	40020800 	.word	0x40020800
 8002e40:	40003c00 	.word	0x40003c00

08002e44 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	; 0x28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	f107 0314 	add.w	r3, r7, #20
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e64:	d134      	bne.n	8002ed0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ed8 <HAL_TIM_IC_MspInit+0x94>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4a1a      	ldr	r2, [pc, #104]	; (8002ed8 <HAL_TIM_IC_MspInit+0x94>)
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	6413      	str	r3, [r2, #64]	; 0x40
 8002e76:	4b18      	ldr	r3, [pc, #96]	; (8002ed8 <HAL_TIM_IC_MspInit+0x94>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	613b      	str	r3, [r7, #16]
 8002e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <HAL_TIM_IC_MspInit+0x94>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	4a13      	ldr	r2, [pc, #76]	; (8002ed8 <HAL_TIM_IC_MspInit+0x94>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6313      	str	r3, [r2, #48]	; 0x30
 8002e92:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_TIM_IC_MspInit+0x94>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eac:	2300      	movs	r3, #0
 8002eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb4:	f107 0314 	add.w	r3, r7, #20
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4808      	ldr	r0, [pc, #32]	; (8002edc <HAL_TIM_IC_MspInit+0x98>)
 8002ebc:	f000 fe8a 	bl	8003bd4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	201c      	movs	r0, #28
 8002ec6:	f000 fe4e 	bl	8003b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002eca:	201c      	movs	r0, #28
 8002ecc:	f000 fe67 	bl	8003b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ed0:	bf00      	nop
 8002ed2:	3728      	adds	r7, #40	; 0x28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40020000 	.word	0x40020000

08002ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a48      	ldr	r2, [pc, #288]	; (8003010 <HAL_TIM_Base_MspInit+0x130>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10e      	bne.n	8002f10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	4b47      	ldr	r3, [pc, #284]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	4a46      	ldr	r2, [pc, #280]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
 8002f02:	4b44      	ldr	r3, [pc, #272]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002f0e:	e07a      	b.n	8003006 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a40      	ldr	r2, [pc, #256]	; (8003018 <HAL_TIM_Base_MspInit+0x138>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10e      	bne.n	8002f38 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61bb      	str	r3, [r7, #24]
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a3c      	ldr	r2, [pc, #240]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2a:	4b3a      	ldr	r3, [pc, #232]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	69bb      	ldr	r3, [r7, #24]
}
 8002f36:	e066      	b.n	8003006 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a37      	ldr	r2, [pc, #220]	; (800301c <HAL_TIM_Base_MspInit+0x13c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d116      	bne.n	8002f70 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	4b33      	ldr	r3, [pc, #204]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a32      	ldr	r2, [pc, #200]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b30      	ldr	r3, [pc, #192]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	2032      	movs	r0, #50	; 0x32
 8002f64:	f000 fdff 	bl	8003b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002f68:	2032      	movs	r0, #50	; 0x32
 8002f6a:	f000 fe18 	bl	8003b9e <HAL_NVIC_EnableIRQ>
}
 8002f6e:	e04a      	b.n	8003006 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM7)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2a      	ldr	r2, [pc, #168]	; (8003020 <HAL_TIM_Base_MspInit+0x140>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d116      	bne.n	8002fa8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	4a24      	ldr	r2, [pc, #144]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002f84:	f043 0320 	orr.w	r3, r3, #32
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2100      	movs	r1, #0
 8002f9a:	2037      	movs	r0, #55	; 0x37
 8002f9c:	f000 fde3 	bl	8003b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002fa0:	2037      	movs	r0, #55	; 0x37
 8002fa2:	f000 fdfc 	bl	8003b9e <HAL_NVIC_EnableIRQ>
}
 8002fa6:	e02e      	b.n	8003006 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM10)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <HAL_TIM_Base_MspInit+0x144>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d116      	bne.n	8002fe0 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	4a16      	ldr	r2, [pc, #88]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc2:	4b14      	ldr	r3, [pc, #80]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	2019      	movs	r0, #25
 8002fd4:	f000 fdc7 	bl	8003b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fd8:	2019      	movs	r0, #25
 8002fda:	f000 fde0 	bl	8003b9e <HAL_NVIC_EnableIRQ>
}
 8002fde:	e012      	b.n	8003006 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM13)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a10      	ldr	r2, [pc, #64]	; (8003028 <HAL_TIM_Base_MspInit+0x148>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d10d      	bne.n	8003006 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	4b09      	ldr	r3, [pc, #36]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a08      	ldr	r2, [pc, #32]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffa:	4b06      	ldr	r3, [pc, #24]	; (8003014 <HAL_TIM_Base_MspInit+0x134>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	68bb      	ldr	r3, [r7, #8]
}
 8003006:	bf00      	nop
 8003008:	3720      	adds	r7, #32
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40000400 	.word	0x40000400
 8003014:	40023800 	.word	0x40023800
 8003018:	40000800 	.word	0x40000800
 800301c:	40000c00 	.word	0x40000c00
 8003020:	40001400 	.word	0x40001400
 8003024:	40014400 	.word	0x40014400
 8003028:	40001c00 	.word	0x40001c00

0800302c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08c      	sub	sp, #48	; 0x30
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003034:	f107 031c 	add.w	r3, r7, #28
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a48      	ldr	r2, [pc, #288]	; (800316c <HAL_TIM_MspPostInit+0x140>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d11e      	bne.n	800308c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	4b47      	ldr	r3, [pc, #284]	; (8003170 <HAL_TIM_MspPostInit+0x144>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	4a46      	ldr	r2, [pc, #280]	; (8003170 <HAL_TIM_MspPostInit+0x144>)
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	6313      	str	r3, [r2, #48]	; 0x30
 800305e:	4b44      	ldr	r3, [pc, #272]	; (8003170 <HAL_TIM_MspPostInit+0x144>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_PMW1_Pin;
 800306a:	2320      	movs	r3, #32
 800306c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	2302      	movs	r3, #2
 8003070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003072:	2300      	movs	r3, #0
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003076:	2300      	movs	r3, #0
 8003078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800307a:	2302      	movs	r3, #2
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PMW1_GPIO_Port, &GPIO_InitStruct);
 800307e:	f107 031c 	add.w	r3, r7, #28
 8003082:	4619      	mov	r1, r3
 8003084:	483b      	ldr	r0, [pc, #236]	; (8003174 <HAL_TIM_MspPostInit+0x148>)
 8003086:	f000 fda5 	bl	8003bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800308a:	e06a      	b.n	8003162 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a39      	ldr	r2, [pc, #228]	; (8003178 <HAL_TIM_MspPostInit+0x14c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d11e      	bne.n	80030d4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	4b35      	ldr	r3, [pc, #212]	; (8003170 <HAL_TIM_MspPostInit+0x144>)
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4a34      	ldr	r2, [pc, #208]	; (8003170 <HAL_TIM_MspPostInit+0x144>)
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	6313      	str	r3, [r2, #48]	; 0x30
 80030a6:	4b32      	ldr	r3, [pc, #200]	; (8003170 <HAL_TIM_MspPostInit+0x144>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DRV_PWM2_Pin;
 80030b2:	2340      	movs	r3, #64	; 0x40
 80030b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b6:	2302      	movs	r3, #2
 80030b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030be:	2300      	movs	r3, #0
 80030c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030c2:	2302      	movs	r3, #2
 80030c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PWM2_GPIO_Port, &GPIO_InitStruct);
 80030c6:	f107 031c 	add.w	r3, r7, #28
 80030ca:	4619      	mov	r1, r3
 80030cc:	4829      	ldr	r0, [pc, #164]	; (8003174 <HAL_TIM_MspPostInit+0x148>)
 80030ce:	f000 fd81 	bl	8003bd4 <HAL_GPIO_Init>
}
 80030d2:	e046      	b.n	8003162 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a28      	ldr	r2, [pc, #160]	; (800317c <HAL_TIM_MspPostInit+0x150>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d11e      	bne.n	800311c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	4b23      	ldr	r3, [pc, #140]	; (8003170 <HAL_TIM_MspPostInit+0x144>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a22      	ldr	r2, [pc, #136]	; (8003170 <HAL_TIM_MspPostInit+0x144>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b20      	ldr	r3, [pc, #128]	; (8003170 <HAL_TIM_MspPostInit+0x144>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM2_Pin;
 80030fa:	2301      	movs	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	2302      	movs	r3, #2
 8003100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003106:	2300      	movs	r3, #0
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800310a:	2302      	movs	r3, #2
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM2_GPIO_Port, &GPIO_InitStruct);
 800310e:	f107 031c 	add.w	r3, r7, #28
 8003112:	4619      	mov	r1, r3
 8003114:	481a      	ldr	r0, [pc, #104]	; (8003180 <HAL_TIM_MspPostInit+0x154>)
 8003116:	f000 fd5d 	bl	8003bd4 <HAL_GPIO_Init>
}
 800311a:	e022      	b.n	8003162 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM13)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a18      	ldr	r2, [pc, #96]	; (8003184 <HAL_TIM_MspPostInit+0x158>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d11d      	bne.n	8003162 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	60fb      	str	r3, [r7, #12]
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_TIM_MspPostInit+0x144>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <HAL_TIM_MspPostInit+0x144>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6313      	str	r3, [r2, #48]	; 0x30
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <HAL_TIM_MspPostInit+0x144>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM_Pin;
 8003142:	2340      	movs	r3, #64	; 0x40
 8003144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314a:	2300      	movs	r3, #0
 800314c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314e:	2300      	movs	r3, #0
 8003150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003152:	2309      	movs	r3, #9
 8003154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_GPIO_Port, &GPIO_InitStruct);
 8003156:	f107 031c 	add.w	r3, r7, #28
 800315a:	4619      	mov	r1, r3
 800315c:	4808      	ldr	r0, [pc, #32]	; (8003180 <HAL_TIM_MspPostInit+0x154>)
 800315e:	f000 fd39 	bl	8003bd4 <HAL_GPIO_Init>
}
 8003162:	bf00      	nop
 8003164:	3730      	adds	r7, #48	; 0x30
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40000400 	.word	0x40000400
 8003170:	40023800 	.word	0x40023800
 8003174:	40020400 	.word	0x40020400
 8003178:	40000800 	.word	0x40000800
 800317c:	40000c00 	.word	0x40000c00
 8003180:	40020000 	.word	0x40020000
 8003184:	40001c00 	.word	0x40001c00

08003188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08c      	sub	sp, #48	; 0x30
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 031c 	add.w	r3, r7, #28
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a32      	ldr	r2, [pc, #200]	; (8003270 <HAL_UART_MspInit+0xe8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d12c      	bne.n	8003204 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <HAL_UART_MspInit+0xec>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	4a30      	ldr	r2, [pc, #192]	; (8003274 <HAL_UART_MspInit+0xec>)
 80031b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ba:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <HAL_UART_MspInit+0xec>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <HAL_UART_MspInit+0xec>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	4a29      	ldr	r2, [pc, #164]	; (8003274 <HAL_UART_MspInit+0xec>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	6313      	str	r3, [r2, #48]	; 0x30
 80031d6:	4b27      	ldr	r3, [pc, #156]	; (8003274 <HAL_UART_MspInit+0xec>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031e2:	230c      	movs	r3, #12
 80031e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e6:	2302      	movs	r3, #2
 80031e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ee:	2303      	movs	r3, #3
 80031f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031f2:	2307      	movs	r3, #7
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f6:	f107 031c 	add.w	r3, r7, #28
 80031fa:	4619      	mov	r1, r3
 80031fc:	481e      	ldr	r0, [pc, #120]	; (8003278 <HAL_UART_MspInit+0xf0>)
 80031fe:	f000 fce9 	bl	8003bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003202:	e030      	b.n	8003266 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_UART_MspInit+0xf4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d12b      	bne.n	8003266 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	4b18      	ldr	r3, [pc, #96]	; (8003274 <HAL_UART_MspInit+0xec>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	4a17      	ldr	r2, [pc, #92]	; (8003274 <HAL_UART_MspInit+0xec>)
 8003218:	f043 0320 	orr.w	r3, r3, #32
 800321c:	6453      	str	r3, [r2, #68]	; 0x44
 800321e:	4b15      	ldr	r3, [pc, #84]	; (8003274 <HAL_UART_MspInit+0xec>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_UART_MspInit+0xec>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a10      	ldr	r2, [pc, #64]	; (8003274 <HAL_UART_MspInit+0xec>)
 8003234:	f043 0304 	orr.w	r3, r3, #4
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_UART_MspInit+0xec>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|RADIO_RX_Pin;
 8003246:	23c0      	movs	r3, #192	; 0xc0
 8003248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003252:	2303      	movs	r3, #3
 8003254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003256:	2308      	movs	r3, #8
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800325a:	f107 031c 	add.w	r3, r7, #28
 800325e:	4619      	mov	r1, r3
 8003260:	4807      	ldr	r0, [pc, #28]	; (8003280 <HAL_UART_MspInit+0xf8>)
 8003262:	f000 fcb7 	bl	8003bd4 <HAL_GPIO_Init>
}
 8003266:	bf00      	nop
 8003268:	3730      	adds	r7, #48	; 0x30
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40004400 	.word	0x40004400
 8003274:	40023800 	.word	0x40023800
 8003278:	40020000 	.word	0x40020000
 800327c:	40011400 	.word	0x40011400
 8003280:	40020800 	.word	0x40020800

08003284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003288:	e7fe      	b.n	8003288 <NMI_Handler+0x4>

0800328a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800328e:	e7fe      	b.n	800328e <HardFault_Handler+0x4>

08003290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003294:	e7fe      	b.n	8003294 <MemManage_Handler+0x4>

08003296 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800329a:	e7fe      	b.n	800329a <BusFault_Handler+0x4>

0800329c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032a0:	e7fe      	b.n	80032a0 <UsageFault_Handler+0x4>

080032a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032a6:	bf00      	nop
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032d0:	f000 f8b8 	bl	8003444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032d4:	bf00      	nop
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80032dc:	4802      	ldr	r0, [pc, #8]	; (80032e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80032de:	f003 fc8b 	bl	8006bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200005e4 	.word	0x200005e4

080032ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032f0:	4802      	ldr	r0, [pc, #8]	; (80032fc <TIM2_IRQHandler+0x10>)
 80032f2:	f003 fc81 	bl	8006bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	2000047c 	.word	0x2000047c

08003300 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003304:	4802      	ldr	r0, [pc, #8]	; (8003310 <TIM5_IRQHandler+0x10>)
 8003306:	f003 fc77 	bl	8006bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000554 	.word	0x20000554

08003314 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003318:	4802      	ldr	r0, [pc, #8]	; (8003324 <TIM7_IRQHandler+0x10>)
 800331a:	f003 fc6d 	bl	8006bf8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	2000059c 	.word	0x2000059c

08003328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800332c:	4b06      	ldr	r3, [pc, #24]	; (8003348 <SystemInit+0x20>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	4a05      	ldr	r2, [pc, #20]	; (8003348 <SystemInit+0x20>)
 8003334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000ed00 	.word	0xe000ed00

0800334c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800334c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003384 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003350:	480d      	ldr	r0, [pc, #52]	; (8003388 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003352:	490e      	ldr	r1, [pc, #56]	; (800338c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003354:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003358:	e002      	b.n	8003360 <LoopCopyDataInit>

0800335a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800335a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800335c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800335e:	3304      	adds	r3, #4

08003360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003364:	d3f9      	bcc.n	800335a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003366:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003368:	4c0b      	ldr	r4, [pc, #44]	; (8003398 <LoopFillZerobss+0x26>)
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800336c:	e001      	b.n	8003372 <LoopFillZerobss>

0800336e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800336e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003370:	3204      	adds	r2, #4

08003372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003374:	d3fb      	bcc.n	800336e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003376:	f7ff ffd7 	bl	8003328 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800337a:	f00a fc87 	bl	800dc8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800337e:	f7fe f9b3 	bl	80016e8 <main>
  bx  lr    
 8003382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800338c:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8003390:	080126b8 	.word	0x080126b8
  ldr r2, =_sbss
 8003394:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8003398:	20000ccc 	.word	0x20000ccc

0800339c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800339c:	e7fe      	b.n	800339c <ADC_IRQHandler>
	...

080033a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_Init+0x40>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0d      	ldr	r2, [pc, #52]	; (80033e0 <HAL_Init+0x40>)
 80033aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_Init+0x40>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <HAL_Init+0x40>)
 80033b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033bc:	4b08      	ldr	r3, [pc, #32]	; (80033e0 <HAL_Init+0x40>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a07      	ldr	r2, [pc, #28]	; (80033e0 <HAL_Init+0x40>)
 80033c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c8:	2003      	movs	r0, #3
 80033ca:	f000 fbc1 	bl	8003b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033ce:	2000      	movs	r0, #0
 80033d0:	f000 f808 	bl	80033e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033d4:	f7ff faf2 	bl	80029bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023c00 	.word	0x40023c00

080033e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033ec:	4b12      	ldr	r3, [pc, #72]	; (8003438 <HAL_InitTick+0x54>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <HAL_InitTick+0x58>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	4619      	mov	r1, r3
 80033f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80033fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fbd9 	bl	8003bba <HAL_SYSTICK_Config>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e00e      	b.n	8003430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b0f      	cmp	r3, #15
 8003416:	d80a      	bhi.n	800342e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003418:	2200      	movs	r2, #0
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	f04f 30ff 	mov.w	r0, #4294967295
 8003420:	f000 fba1 	bl	8003b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003424:	4a06      	ldr	r2, [pc, #24]	; (8003440 <HAL_InitTick+0x5c>)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	e000      	b.n	8003430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000008 	.word	0x20000008
 800343c:	20000010 	.word	0x20000010
 8003440:	2000000c 	.word	0x2000000c

08003444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <HAL_IncTick+0x20>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_IncTick+0x24>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4413      	add	r3, r2
 8003454:	4a04      	ldr	r2, [pc, #16]	; (8003468 <HAL_IncTick+0x24>)
 8003456:	6013      	str	r3, [r2, #0]
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000010 	.word	0x20000010
 8003468:	20000bb4 	.word	0x20000bb4

0800346c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return uwTick;
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <HAL_GetTick+0x14>)
 8003472:	681b      	ldr	r3, [r3, #0]
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	20000bb4 	.word	0x20000bb4

08003484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800348c:	f7ff ffee 	bl	800346c <HAL_GetTick>
 8003490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d005      	beq.n	80034aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_Delay+0x44>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034aa:	bf00      	nop
 80034ac:	f7ff ffde 	bl	800346c <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d8f7      	bhi.n	80034ac <HAL_Delay+0x28>
  {
  }
}
 80034bc:	bf00      	nop
 80034be:	bf00      	nop
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000010 	.word	0x20000010

080034cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e033      	b.n	800354a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d109      	bne.n	80034fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7ff fa8e 	bl	8002a0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	f003 0310 	and.w	r3, r3, #16
 8003506:	2b00      	cmp	r3, #0
 8003508:	d118      	bne.n	800353c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003512:	f023 0302 	bic.w	r3, r3, #2
 8003516:	f043 0202 	orr.w	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f94a 	bl	80037b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f023 0303 	bic.w	r3, r3, #3
 8003532:	f043 0201 	orr.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	641a      	str	r2, [r3, #64]	; 0x40
 800353a:	e001      	b.n	8003540 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x1c>
 800356c:	2302      	movs	r3, #2
 800356e:	e113      	b.n	8003798 <HAL_ADC_ConfigChannel+0x244>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b09      	cmp	r3, #9
 800357e:	d925      	bls.n	80035cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68d9      	ldr	r1, [r3, #12]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	b29b      	uxth	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	3b1e      	subs	r3, #30
 8003596:	2207      	movs	r2, #7
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43da      	mvns	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	400a      	ands	r2, r1
 80035a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68d9      	ldr	r1, [r3, #12]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	4618      	mov	r0, r3
 80035b8:	4603      	mov	r3, r0
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	4403      	add	r3, r0
 80035be:	3b1e      	subs	r3, #30
 80035c0:	409a      	lsls	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	e022      	b.n	8003612 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6919      	ldr	r1, [r3, #16]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	2207      	movs	r2, #7
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43da      	mvns	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	400a      	ands	r2, r1
 80035ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6919      	ldr	r1, [r3, #16]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	4618      	mov	r0, r3
 8003602:	4603      	mov	r3, r0
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	4403      	add	r3, r0
 8003608:	409a      	lsls	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b06      	cmp	r3, #6
 8003618:	d824      	bhi.n	8003664 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	3b05      	subs	r3, #5
 800362c:	221f      	movs	r2, #31
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	400a      	ands	r2, r1
 800363a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	b29b      	uxth	r3, r3
 8003648:	4618      	mov	r0, r3
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	3b05      	subs	r3, #5
 8003656:	fa00 f203 	lsl.w	r2, r0, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	635a      	str	r2, [r3, #52]	; 0x34
 8003662:	e04c      	b.n	80036fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b0c      	cmp	r3, #12
 800366a:	d824      	bhi.n	80036b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	3b23      	subs	r3, #35	; 0x23
 800367e:	221f      	movs	r2, #31
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	43da      	mvns	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	400a      	ands	r2, r1
 800368c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	4618      	mov	r0, r3
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	3b23      	subs	r3, #35	; 0x23
 80036a8:	fa00 f203 	lsl.w	r2, r0, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
 80036b4:	e023      	b.n	80036fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	3b41      	subs	r3, #65	; 0x41
 80036c8:	221f      	movs	r2, #31
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43da      	mvns	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	400a      	ands	r2, r1
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	4618      	mov	r0, r3
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	3b41      	subs	r3, #65	; 0x41
 80036f2:	fa00 f203 	lsl.w	r2, r0, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036fe:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <HAL_ADC_ConfigChannel+0x250>)
 8003700:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a28      	ldr	r2, [pc, #160]	; (80037a8 <HAL_ADC_ConfigChannel+0x254>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d10f      	bne.n	800372c <HAL_ADC_ConfigChannel+0x1d8>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b12      	cmp	r3, #18
 8003712:	d10b      	bne.n	800372c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <HAL_ADC_ConfigChannel+0x254>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d12b      	bne.n	800378e <HAL_ADC_ConfigChannel+0x23a>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1c      	ldr	r2, [pc, #112]	; (80037ac <HAL_ADC_ConfigChannel+0x258>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <HAL_ADC_ConfigChannel+0x1f4>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b11      	cmp	r3, #17
 8003746:	d122      	bne.n	800378e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a11      	ldr	r2, [pc, #68]	; (80037ac <HAL_ADC_ConfigChannel+0x258>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d111      	bne.n	800378e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <HAL_ADC_ConfigChannel+0x25c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a11      	ldr	r2, [pc, #68]	; (80037b4 <HAL_ADC_ConfigChannel+0x260>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	0c9a      	lsrs	r2, r3, #18
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003780:	e002      	b.n	8003788 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	3b01      	subs	r3, #1
 8003786:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1f9      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	40012300 	.word	0x40012300
 80037a8:	40012000 	.word	0x40012000
 80037ac:	10000012 	.word	0x10000012
 80037b0:	20000008 	.word	0x20000008
 80037b4:	431bde83 	.word	0x431bde83

080037b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037c0:	4b79      	ldr	r3, [pc, #484]	; (80039a8 <ADC_Init+0x1f0>)
 80037c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	431a      	orrs	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	021a      	lsls	r2, r3, #8
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003810:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6899      	ldr	r1, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	4a58      	ldr	r2, [pc, #352]	; (80039ac <ADC_Init+0x1f4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d022      	beq.n	8003896 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800385e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6899      	ldr	r1, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003880:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6899      	ldr	r1, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	e00f      	b.n	80038b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0202 	bic.w	r2, r2, #2
 80038c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6899      	ldr	r1, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	7e1b      	ldrb	r3, [r3, #24]
 80038d0:	005a      	lsls	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01b      	beq.n	800391c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003902:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6859      	ldr	r1, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	3b01      	subs	r3, #1
 8003910:	035a      	lsls	r2, r3, #13
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	e007      	b.n	800392c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800392a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	3b01      	subs	r3, #1
 8003948:	051a      	lsls	r2, r3, #20
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6899      	ldr	r1, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800396e:	025a      	lsls	r2, r3, #9
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003986:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	029a      	lsls	r2, r3, #10
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	609a      	str	r2, [r3, #8]
}
 800399c:	bf00      	nop
 800399e:	3714      	adds	r7, #20
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40012300 	.word	0x40012300
 80039ac:	0f000001 	.word	0x0f000001

080039b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039c0:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039cc:	4013      	ands	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039e2:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <__NVIC_SetPriorityGrouping+0x44>)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	60d3      	str	r3, [r2, #12]
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <__NVIC_GetPriorityGrouping+0x18>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	0a1b      	lsrs	r3, r3, #8
 8003a02:	f003 0307 	and.w	r3, r3, #7
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	db0b      	blt.n	8003a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	f003 021f 	and.w	r2, r3, #31
 8003a2c:	4907      	ldr	r1, [pc, #28]	; (8003a4c <__NVIC_EnableIRQ+0x38>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	095b      	lsrs	r3, r3, #5
 8003a34:	2001      	movs	r0, #1
 8003a36:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	e000e100 	.word	0xe000e100

08003a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	db0a      	blt.n	8003a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	b2da      	uxtb	r2, r3
 8003a68:	490c      	ldr	r1, [pc, #48]	; (8003a9c <__NVIC_SetPriority+0x4c>)
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	440b      	add	r3, r1
 8003a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a78:	e00a      	b.n	8003a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	4908      	ldr	r1, [pc, #32]	; (8003aa0 <__NVIC_SetPriority+0x50>)
 8003a80:	79fb      	ldrb	r3, [r7, #7]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	3b04      	subs	r3, #4
 8003a88:	0112      	lsls	r2, r2, #4
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	761a      	strb	r2, [r3, #24]
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	e000e100 	.word	0xe000e100
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b089      	sub	sp, #36	; 0x24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f1c3 0307 	rsb	r3, r3, #7
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	bf28      	it	cs
 8003ac2:	2304      	movcs	r3, #4
 8003ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	2b06      	cmp	r3, #6
 8003acc:	d902      	bls.n	8003ad4 <NVIC_EncodePriority+0x30>
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	3b03      	subs	r3, #3
 8003ad2:	e000      	b.n	8003ad6 <NVIC_EncodePriority+0x32>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aec:	f04f 31ff 	mov.w	r1, #4294967295
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	fa01 f303 	lsl.w	r3, r1, r3
 8003af6:	43d9      	mvns	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003afc:	4313      	orrs	r3, r2
         );
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b1c:	d301      	bcc.n	8003b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e00f      	b.n	8003b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <SysTick_Config+0x40>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b2a:	210f      	movs	r1, #15
 8003b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b30:	f7ff ff8e 	bl	8003a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <SysTick_Config+0x40>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b3a:	4b04      	ldr	r3, [pc, #16]	; (8003b4c <SysTick_Config+0x40>)
 8003b3c:	2207      	movs	r2, #7
 8003b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	e000e010 	.word	0xe000e010

08003b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff ff29 	bl	80039b0 <__NVIC_SetPriorityGrouping>
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b78:	f7ff ff3e 	bl	80039f8 <__NVIC_GetPriorityGrouping>
 8003b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	6978      	ldr	r0, [r7, #20]
 8003b84:	f7ff ff8e 	bl	8003aa4 <NVIC_EncodePriority>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff5d 	bl	8003a50 <__NVIC_SetPriority>
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff ff31 	bl	8003a14 <__NVIC_EnableIRQ>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f7ff ffa2 	bl	8003b0c <SysTick_Config>
 8003bc8:	4603      	mov	r3, r0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
	...

08003bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e165      	b.n	8003ebc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	f040 8154 	bne.w	8003eb6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d005      	beq.n	8003c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d130      	bne.n	8003c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	2203      	movs	r2, #3
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 0201 	and.w	r2, r3, #1
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d017      	beq.n	8003cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	2203      	movs	r2, #3
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d123      	bne.n	8003d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	08da      	lsrs	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3208      	adds	r2, #8
 8003cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	220f      	movs	r2, #15
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	08da      	lsrs	r2, r3, #3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3208      	adds	r2, #8
 8003d12:	69b9      	ldr	r1, [r7, #24]
 8003d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	2203      	movs	r2, #3
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f003 0203 	and.w	r2, r3, #3
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80ae 	beq.w	8003eb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	4b5d      	ldr	r3, [pc, #372]	; (8003ed4 <HAL_GPIO_Init+0x300>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d62:	4a5c      	ldr	r2, [pc, #368]	; (8003ed4 <HAL_GPIO_Init+0x300>)
 8003d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d68:	6453      	str	r3, [r2, #68]	; 0x44
 8003d6a:	4b5a      	ldr	r3, [pc, #360]	; (8003ed4 <HAL_GPIO_Init+0x300>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d76:	4a58      	ldr	r2, [pc, #352]	; (8003ed8 <HAL_GPIO_Init+0x304>)
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	089b      	lsrs	r3, r3, #2
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	220f      	movs	r2, #15
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4013      	ands	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4f      	ldr	r2, [pc, #316]	; (8003edc <HAL_GPIO_Init+0x308>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d025      	beq.n	8003dee <HAL_GPIO_Init+0x21a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4e      	ldr	r2, [pc, #312]	; (8003ee0 <HAL_GPIO_Init+0x30c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01f      	beq.n	8003dea <HAL_GPIO_Init+0x216>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4d      	ldr	r2, [pc, #308]	; (8003ee4 <HAL_GPIO_Init+0x310>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d019      	beq.n	8003de6 <HAL_GPIO_Init+0x212>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4c      	ldr	r2, [pc, #304]	; (8003ee8 <HAL_GPIO_Init+0x314>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d013      	beq.n	8003de2 <HAL_GPIO_Init+0x20e>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a4b      	ldr	r2, [pc, #300]	; (8003eec <HAL_GPIO_Init+0x318>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00d      	beq.n	8003dde <HAL_GPIO_Init+0x20a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a4a      	ldr	r2, [pc, #296]	; (8003ef0 <HAL_GPIO_Init+0x31c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d007      	beq.n	8003dda <HAL_GPIO_Init+0x206>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a49      	ldr	r2, [pc, #292]	; (8003ef4 <HAL_GPIO_Init+0x320>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d101      	bne.n	8003dd6 <HAL_GPIO_Init+0x202>
 8003dd2:	2306      	movs	r3, #6
 8003dd4:	e00c      	b.n	8003df0 <HAL_GPIO_Init+0x21c>
 8003dd6:	2307      	movs	r3, #7
 8003dd8:	e00a      	b.n	8003df0 <HAL_GPIO_Init+0x21c>
 8003dda:	2305      	movs	r3, #5
 8003ddc:	e008      	b.n	8003df0 <HAL_GPIO_Init+0x21c>
 8003dde:	2304      	movs	r3, #4
 8003de0:	e006      	b.n	8003df0 <HAL_GPIO_Init+0x21c>
 8003de2:	2303      	movs	r3, #3
 8003de4:	e004      	b.n	8003df0 <HAL_GPIO_Init+0x21c>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e002      	b.n	8003df0 <HAL_GPIO_Init+0x21c>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <HAL_GPIO_Init+0x21c>
 8003dee:	2300      	movs	r3, #0
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	f002 0203 	and.w	r2, r2, #3
 8003df6:	0092      	lsls	r2, r2, #2
 8003df8:	4093      	lsls	r3, r2
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e00:	4935      	ldr	r1, [pc, #212]	; (8003ed8 <HAL_GPIO_Init+0x304>)
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	089b      	lsrs	r3, r3, #2
 8003e06:	3302      	adds	r3, #2
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e0e:	4b3a      	ldr	r3, [pc, #232]	; (8003ef8 <HAL_GPIO_Init+0x324>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	43db      	mvns	r3, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e32:	4a31      	ldr	r2, [pc, #196]	; (8003ef8 <HAL_GPIO_Init+0x324>)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e38:	4b2f      	ldr	r3, [pc, #188]	; (8003ef8 <HAL_GPIO_Init+0x324>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e5c:	4a26      	ldr	r2, [pc, #152]	; (8003ef8 <HAL_GPIO_Init+0x324>)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e62:	4b25      	ldr	r3, [pc, #148]	; (8003ef8 <HAL_GPIO_Init+0x324>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e86:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <HAL_GPIO_Init+0x324>)
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <HAL_GPIO_Init+0x324>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eb0:	4a11      	ldr	r2, [pc, #68]	; (8003ef8 <HAL_GPIO_Init+0x324>)
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	2b0f      	cmp	r3, #15
 8003ec0:	f67f ae96 	bls.w	8003bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	3724      	adds	r7, #36	; 0x24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40013800 	.word	0x40013800
 8003edc:	40020000 	.word	0x40020000
 8003ee0:	40020400 	.word	0x40020400
 8003ee4:	40020800 	.word	0x40020800
 8003ee8:	40020c00 	.word	0x40020c00
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40021400 	.word	0x40021400
 8003ef4:	40021800 	.word	0x40021800
 8003ef8:	40013c00 	.word	0x40013c00

08003efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	807b      	strh	r3, [r7, #2]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f0c:	787b      	ldrb	r3, [r7, #1]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f12:	887a      	ldrh	r2, [r7, #2]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f18:	e003      	b.n	8003f22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f1a:	887b      	ldrh	r3, [r7, #2]
 8003f1c:	041a      	lsls	r2, r3, #16
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	619a      	str	r2, [r3, #24]
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e12b      	b.n	800419a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fe fd9c 	bl	8002a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2224      	movs	r2, #36	; 0x24
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f94:	f001 f8a4 	bl	80050e0 <HAL_RCC_GetPCLK1Freq>
 8003f98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	4a81      	ldr	r2, [pc, #516]	; (80041a4 <HAL_I2C_Init+0x274>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d807      	bhi.n	8003fb4 <HAL_I2C_Init+0x84>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4a80      	ldr	r2, [pc, #512]	; (80041a8 <HAL_I2C_Init+0x278>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	bf94      	ite	ls
 8003fac:	2301      	movls	r3, #1
 8003fae:	2300      	movhi	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	e006      	b.n	8003fc2 <HAL_I2C_Init+0x92>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4a7d      	ldr	r2, [pc, #500]	; (80041ac <HAL_I2C_Init+0x27c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	bf94      	ite	ls
 8003fbc:	2301      	movls	r3, #1
 8003fbe:	2300      	movhi	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e0e7      	b.n	800419a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4a78      	ldr	r2, [pc, #480]	; (80041b0 <HAL_I2C_Init+0x280>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	0c9b      	lsrs	r3, r3, #18
 8003fd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68ba      	ldr	r2, [r7, #8]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	4a6a      	ldr	r2, [pc, #424]	; (80041a4 <HAL_I2C_Init+0x274>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d802      	bhi.n	8004004 <HAL_I2C_Init+0xd4>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	3301      	adds	r3, #1
 8004002:	e009      	b.n	8004018 <HAL_I2C_Init+0xe8>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	4a69      	ldr	r2, [pc, #420]	; (80041b4 <HAL_I2C_Init+0x284>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	3301      	adds	r3, #1
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	430b      	orrs	r3, r1
 800401e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800402a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	495c      	ldr	r1, [pc, #368]	; (80041a4 <HAL_I2C_Init+0x274>)
 8004034:	428b      	cmp	r3, r1
 8004036:	d819      	bhi.n	800406c <HAL_I2C_Init+0x13c>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1e59      	subs	r1, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	fbb1 f3f3 	udiv	r3, r1, r3
 8004046:	1c59      	adds	r1, r3, #1
 8004048:	f640 73fc 	movw	r3, #4092	; 0xffc
 800404c:	400b      	ands	r3, r1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_I2C_Init+0x138>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1e59      	subs	r1, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004060:	3301      	adds	r3, #1
 8004062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004066:	e051      	b.n	800410c <HAL_I2C_Init+0x1dc>
 8004068:	2304      	movs	r3, #4
 800406a:	e04f      	b.n	800410c <HAL_I2C_Init+0x1dc>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d111      	bne.n	8004098 <HAL_I2C_Init+0x168>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1e58      	subs	r0, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6859      	ldr	r1, [r3, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	440b      	add	r3, r1
 8004082:	fbb0 f3f3 	udiv	r3, r0, r3
 8004086:	3301      	adds	r3, #1
 8004088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	e012      	b.n	80040be <HAL_I2C_Init+0x18e>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1e58      	subs	r0, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6859      	ldr	r1, [r3, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	0099      	lsls	r1, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ae:	3301      	adds	r3, #1
 80040b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <HAL_I2C_Init+0x196>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e022      	b.n	800410c <HAL_I2C_Init+0x1dc>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10e      	bne.n	80040ec <HAL_I2C_Init+0x1bc>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1e58      	subs	r0, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6859      	ldr	r1, [r3, #4]
 80040d6:	460b      	mov	r3, r1
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	440b      	add	r3, r1
 80040dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e0:	3301      	adds	r3, #1
 80040e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ea:	e00f      	b.n	800410c <HAL_I2C_Init+0x1dc>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1e58      	subs	r0, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6859      	ldr	r1, [r3, #4]
 80040f4:	460b      	mov	r3, r1
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	0099      	lsls	r1, r3, #2
 80040fc:	440b      	add	r3, r1
 80040fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004102:	3301      	adds	r3, #1
 8004104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	6809      	ldr	r1, [r1, #0]
 8004110:	4313      	orrs	r3, r2
 8004112:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800413a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6911      	ldr	r1, [r2, #16]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68d2      	ldr	r2, [r2, #12]
 8004146:	4311      	orrs	r1, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	430b      	orrs	r3, r1
 800414e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695a      	ldr	r2, [r3, #20]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	000186a0 	.word	0x000186a0
 80041a8:	001e847f 	.word	0x001e847f
 80041ac:	003d08ff 	.word	0x003d08ff
 80041b0:	431bde83 	.word	0x431bde83
 80041b4:	10624dd3 	.word	0x10624dd3

080041b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af02      	add	r7, sp, #8
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	461a      	mov	r2, r3
 80041c4:	460b      	mov	r3, r1
 80041c6:	817b      	strh	r3, [r7, #10]
 80041c8:	4613      	mov	r3, r2
 80041ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041cc:	f7ff f94e 	bl	800346c <HAL_GetTick>
 80041d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b20      	cmp	r3, #32
 80041dc:	f040 80e0 	bne.w	80043a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	2319      	movs	r3, #25
 80041e6:	2201      	movs	r2, #1
 80041e8:	4970      	ldr	r1, [pc, #448]	; (80043ac <HAL_I2C_Master_Transmit+0x1f4>)
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fc58 	bl	8004aa0 <I2C_WaitOnFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
 80041f8:	e0d3      	b.n	80043a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_I2C_Master_Transmit+0x50>
 8004204:	2302      	movs	r3, #2
 8004206:	e0cc      	b.n	80043a2 <HAL_I2C_Master_Transmit+0x1ea>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d007      	beq.n	800422e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f042 0201 	orr.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800423c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2221      	movs	r2, #33	; 0x21
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2210      	movs	r2, #16
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	893a      	ldrh	r2, [r7, #8]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a50      	ldr	r2, [pc, #320]	; (80043b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800426e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004270:	8979      	ldrh	r1, [r7, #10]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	6a3a      	ldr	r2, [r7, #32]
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fac2 	bl	8004800 <I2C_MasterRequestWrite>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d001      	beq.n	8004286 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e08d      	b.n	80043a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800429c:	e066      	b.n	800436c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	6a39      	ldr	r1, [r7, #32]
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fcd2 	bl	8004c4c <I2C_WaitOnTXEFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00d      	beq.n	80042ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d107      	bne.n	80042c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e06b      	b.n	80043a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	781a      	ldrb	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b04      	cmp	r3, #4
 8004306:	d11b      	bne.n	8004340 <HAL_I2C_Master_Transmit+0x188>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	d017      	beq.n	8004340 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	6a39      	ldr	r1, [r7, #32]
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fcc2 	bl	8004cce <I2C_WaitOnBTFFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00d      	beq.n	800436c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	2b04      	cmp	r3, #4
 8004356:	d107      	bne.n	8004368 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004366:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e01a      	b.n	80043a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	2b00      	cmp	r3, #0
 8004372:	d194      	bne.n	800429e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	e000      	b.n	80043a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80043a0:	2302      	movs	r3, #2
  }
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	00100002 	.word	0x00100002
 80043b0:	ffff0000 	.word	0xffff0000

080043b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08c      	sub	sp, #48	; 0x30
 80043b8:	af02      	add	r7, sp, #8
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	461a      	mov	r2, r3
 80043c0:	460b      	mov	r3, r1
 80043c2:	817b      	strh	r3, [r7, #10]
 80043c4:	4613      	mov	r3, r2
 80043c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043c8:	f7ff f850 	bl	800346c <HAL_GetTick>
 80043cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	f040 820b 	bne.w	80047f2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2319      	movs	r3, #25
 80043e2:	2201      	movs	r2, #1
 80043e4:	497c      	ldr	r1, [pc, #496]	; (80045d8 <HAL_I2C_Master_Receive+0x224>)
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 fb5a 	bl	8004aa0 <I2C_WaitOnFlagUntilTimeout>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80043f2:	2302      	movs	r3, #2
 80043f4:	e1fe      	b.n	80047f4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d101      	bne.n	8004404 <HAL_I2C_Master_Receive+0x50>
 8004400:	2302      	movs	r3, #2
 8004402:	e1f7      	b.n	80047f4 <HAL_I2C_Master_Receive+0x440>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b01      	cmp	r3, #1
 8004418:	d007      	beq.n	800442a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0201 	orr.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004438:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2222      	movs	r2, #34	; 0x22
 800443e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2210      	movs	r2, #16
 8004446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	893a      	ldrh	r2, [r7, #8]
 800445a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a5c      	ldr	r2, [pc, #368]	; (80045dc <HAL_I2C_Master_Receive+0x228>)
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800446c:	8979      	ldrh	r1, [r7, #10]
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 fa46 	bl	8004904 <I2C_MasterRequestRead>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e1b8      	b.n	80047f4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004486:	2b00      	cmp	r3, #0
 8004488:	d113      	bne.n	80044b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800448a:	2300      	movs	r3, #0
 800448c:	623b      	str	r3, [r7, #32]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	623b      	str	r3, [r7, #32]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	623b      	str	r3, [r7, #32]
 800449e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e18c      	b.n	80047cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d11b      	bne.n	80044f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	61fb      	str	r3, [r7, #28]
 80044de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e16c      	b.n	80047cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d11b      	bne.n	8004532 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004508:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004518:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	e14c      	b.n	80047cc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004540:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	617b      	str	r3, [r7, #20]
 8004556:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004558:	e138      	b.n	80047cc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	2b03      	cmp	r3, #3
 8004560:	f200 80f1 	bhi.w	8004746 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004568:	2b01      	cmp	r3, #1
 800456a:	d123      	bne.n	80045b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800456c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fbed 	bl	8004d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e139      	b.n	80047f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691a      	ldr	r2, [r3, #16]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	1c5a      	adds	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045b2:	e10b      	b.n	80047cc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d14e      	bne.n	800465a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	2200      	movs	r2, #0
 80045c4:	4906      	ldr	r1, [pc, #24]	; (80045e0 <HAL_I2C_Master_Receive+0x22c>)
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 fa6a 	bl	8004aa0 <I2C_WaitOnFlagUntilTimeout>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d008      	beq.n	80045e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e10e      	b.n	80047f4 <HAL_I2C_Master_Receive+0x440>
 80045d6:	bf00      	nop
 80045d8:	00100002 	.word	0x00100002
 80045dc:	ffff0000 	.word	0xffff0000
 80045e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004658:	e0b8      	b.n	80047cc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004660:	2200      	movs	r2, #0
 8004662:	4966      	ldr	r1, [pc, #408]	; (80047fc <HAL_I2C_Master_Receive+0x448>)
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fa1b 	bl	8004aa0 <I2C_WaitOnFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0bf      	b.n	80047f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004682:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691a      	ldr	r2, [r3, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	2200      	movs	r2, #0
 80046be:	494f      	ldr	r1, [pc, #316]	; (80047fc <HAL_I2C_Master_Receive+0x448>)
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f9ed 	bl	8004aa0 <I2C_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e091      	b.n	80047f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29a      	uxth	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	b2d2      	uxtb	r2, r2
 800471e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800472e:	3b01      	subs	r3, #1
 8004730:	b29a      	uxth	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004744:	e042      	b.n	80047cc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f000 fb00 	bl	8004d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e04c      	b.n	80047f4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b04      	cmp	r3, #4
 8004798:	d118      	bne.n	80047cc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	b2d2      	uxtb	r2, r2
 80047a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b6:	3b01      	subs	r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f47f aec2 	bne.w	800455a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e000      	b.n	80047f4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80047f2:	2302      	movs	r3, #2
  }
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3728      	adds	r7, #40	; 0x28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	00010004 	.word	0x00010004

08004800 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	607a      	str	r2, [r7, #4]
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	460b      	mov	r3, r1
 800480e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004814:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d006      	beq.n	800482a <I2C_MasterRequestWrite+0x2a>
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d003      	beq.n	800482a <I2C_MasterRequestWrite+0x2a>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004828:	d108      	bne.n	800483c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	e00b      	b.n	8004854 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004840:	2b12      	cmp	r3, #18
 8004842:	d107      	bne.n	8004854 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004852:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f91d 	bl	8004aa0 <I2C_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00d      	beq.n	8004888 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800487a:	d103      	bne.n	8004884 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004882:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e035      	b.n	80048f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004890:	d108      	bne.n	80048a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004892:	897b      	ldrh	r3, [r7, #10]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80048a0:	611a      	str	r2, [r3, #16]
 80048a2:	e01b      	b.n	80048dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048a4:	897b      	ldrh	r3, [r7, #10]
 80048a6:	11db      	asrs	r3, r3, #7
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f003 0306 	and.w	r3, r3, #6
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	f063 030f 	orn	r3, r3, #15
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	490e      	ldr	r1, [pc, #56]	; (80048fc <I2C_MasterRequestWrite+0xfc>)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f943 	bl	8004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e010      	b.n	80048f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048d2:	897b      	ldrh	r3, [r7, #10]
 80048d4:	b2da      	uxtb	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	4907      	ldr	r1, [pc, #28]	; (8004900 <I2C_MasterRequestWrite+0x100>)
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f933 	bl	8004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3718      	adds	r7, #24
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	00010008 	.word	0x00010008
 8004900:	00010002 	.word	0x00010002

08004904 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	460b      	mov	r3, r1
 8004912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004928:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d006      	beq.n	800493e <I2C_MasterRequestRead+0x3a>
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d003      	beq.n	800493e <I2C_MasterRequestRead+0x3a>
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800493c:	d108      	bne.n	8004950 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	e00b      	b.n	8004968 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004954:	2b11      	cmp	r3, #17
 8004956:	d107      	bne.n	8004968 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004966:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f000 f893 	bl	8004aa0 <I2C_WaitOnFlagUntilTimeout>
 800497a:	4603      	mov	r3, r0
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00d      	beq.n	800499c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800498e:	d103      	bne.n	8004998 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004996:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e079      	b.n	8004a90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049a4:	d108      	bne.n	80049b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80049a6:	897b      	ldrh	r3, [r7, #10]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	f043 0301 	orr.w	r3, r3, #1
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	611a      	str	r2, [r3, #16]
 80049b6:	e05f      	b.n	8004a78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049b8:	897b      	ldrh	r3, [r7, #10]
 80049ba:	11db      	asrs	r3, r3, #7
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	f003 0306 	and.w	r3, r3, #6
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	f063 030f 	orn	r3, r3, #15
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	4930      	ldr	r1, [pc, #192]	; (8004a98 <I2C_MasterRequestRead+0x194>)
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f8b9 	bl	8004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e054      	b.n	8004a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049e6:	897b      	ldrh	r3, [r7, #10]
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4929      	ldr	r1, [pc, #164]	; (8004a9c <I2C_MasterRequestRead+0x198>)
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f8a9 	bl	8004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e044      	b.n	8004a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f831 	bl	8004aa0 <I2C_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a52:	d103      	bne.n	8004a5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a5a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e017      	b.n	8004a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a60:	897b      	ldrh	r3, [r7, #10]
 8004a62:	11db      	asrs	r3, r3, #7
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	f003 0306 	and.w	r3, r3, #6
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	f063 030e 	orn	r3, r3, #14
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4907      	ldr	r1, [pc, #28]	; (8004a9c <I2C_MasterRequestRead+0x198>)
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f865 	bl	8004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	00010008 	.word	0x00010008
 8004a9c:	00010002 	.word	0x00010002

08004aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ab0:	e025      	b.n	8004afe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d021      	beq.n	8004afe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aba:	f7fe fcd7 	bl	800346c <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d116      	bne.n	8004afe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f043 0220 	orr.w	r2, r3, #32
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e023      	b.n	8004b46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	0c1b      	lsrs	r3, r3, #16
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d10d      	bne.n	8004b24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	43da      	mvns	r2, r3
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4013      	ands	r3, r2
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	bf0c      	ite	eq
 8004b1a:	2301      	moveq	r3, #1
 8004b1c:	2300      	movne	r3, #0
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	461a      	mov	r2, r3
 8004b22:	e00c      	b.n	8004b3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	79fb      	ldrb	r3, [r7, #7]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d0b6      	beq.n	8004ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	60f8      	str	r0, [r7, #12]
 8004b56:	60b9      	str	r1, [r7, #8]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b5c:	e051      	b.n	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6c:	d123      	bne.n	8004bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f043 0204 	orr.w	r2, r3, #4
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e046      	b.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d021      	beq.n	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fe fc55 	bl	800346c <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d116      	bne.n	8004c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bee:	f043 0220 	orr.w	r2, r3, #32
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e020      	b.n	8004c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d10c      	bne.n	8004c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	43da      	mvns	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bf14      	ite	ne
 8004c1e:	2301      	movne	r3, #1
 8004c20:	2300      	moveq	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	e00b      	b.n	8004c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	43da      	mvns	r2, r3
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	4013      	ands	r3, r2
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf14      	ite	ne
 8004c38:	2301      	movne	r3, #1
 8004c3a:	2300      	moveq	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d18d      	bne.n	8004b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c58:	e02d      	b.n	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f8ce 	bl	8004dfc <I2C_IsAcknowledgeFailed>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e02d      	b.n	8004cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d021      	beq.n	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c72:	f7fe fbfb 	bl	800346c <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d302      	bcc.n	8004c88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d116      	bne.n	8004cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f043 0220 	orr.w	r2, r3, #32
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e007      	b.n	8004cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc0:	2b80      	cmp	r3, #128	; 0x80
 8004cc2:	d1ca      	bne.n	8004c5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cda:	e02d      	b.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f88d 	bl	8004dfc <I2C_IsAcknowledgeFailed>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e02d      	b.n	8004d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	d021      	beq.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf4:	f7fe fbba 	bl	800346c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d302      	bcc.n	8004d0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d116      	bne.n	8004d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	f043 0220 	orr.w	r2, r3, #32
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e007      	b.n	8004d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d1ca      	bne.n	8004cdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d5c:	e042      	b.n	8004de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f003 0310 	and.w	r3, r3, #16
 8004d68:	2b10      	cmp	r3, #16
 8004d6a:	d119      	bne.n	8004da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0210 	mvn.w	r2, #16
 8004d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e029      	b.n	8004df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da0:	f7fe fb64 	bl	800346c <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d302      	bcc.n	8004db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d116      	bne.n	8004de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd0:	f043 0220 	orr.w	r2, r3, #32
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e007      	b.n	8004df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b40      	cmp	r3, #64	; 0x40
 8004df0:	d1b5      	bne.n	8004d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e12:	d11b      	bne.n	8004e4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e38:	f043 0204 	orr.w	r2, r3, #4
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e000      	b.n	8004e4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
	...

08004e5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004e62:	2300      	movs	r3, #0
 8004e64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e66:	2300      	movs	r3, #0
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	4b20      	ldr	r3, [pc, #128]	; (8004eec <HAL_PWREx_EnableOverDrive+0x90>)
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	4a1f      	ldr	r2, [pc, #124]	; (8004eec <HAL_PWREx_EnableOverDrive+0x90>)
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e74:	6413      	str	r3, [r2, #64]	; 0x40
 8004e76:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <HAL_PWREx_EnableOverDrive+0x90>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e82:	4b1b      	ldr	r3, [pc, #108]	; (8004ef0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004e84:	2201      	movs	r2, #1
 8004e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e88:	f7fe faf0 	bl	800346c <HAL_GetTick>
 8004e8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e8e:	e009      	b.n	8004ea4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e90:	f7fe faec 	bl	800346c <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e9e:	d901      	bls.n	8004ea4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e01f      	b.n	8004ee4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ea4:	4b13      	ldr	r3, [pc, #76]	; (8004ef4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb0:	d1ee      	bne.n	8004e90 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004eb8:	f7fe fad8 	bl	800346c <HAL_GetTick>
 8004ebc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ebe:	e009      	b.n	8004ed4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ec0:	f7fe fad4 	bl	800346c <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ece:	d901      	bls.n	8004ed4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e007      	b.n	8004ee4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ed4:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee0:	d1ee      	bne.n	8004ec0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3708      	adds	r7, #8
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	420e0040 	.word	0x420e0040
 8004ef4:	40007000 	.word	0x40007000
 8004ef8:	420e0044 	.word	0x420e0044

08004efc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d101      	bne.n	8004f10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0cc      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f10:	4b68      	ldr	r3, [pc, #416]	; (80050b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d90c      	bls.n	8004f38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b65      	ldr	r3, [pc, #404]	; (80050b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b63      	ldr	r3, [pc, #396]	; (80050b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e0b8      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d020      	beq.n	8004f86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d005      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f50:	4b59      	ldr	r3, [pc, #356]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	4a58      	ldr	r2, [pc, #352]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0308 	and.w	r3, r3, #8
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f68:	4b53      	ldr	r3, [pc, #332]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	4a52      	ldr	r2, [pc, #328]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f74:	4b50      	ldr	r3, [pc, #320]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	494d      	ldr	r1, [pc, #308]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d044      	beq.n	800501c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d107      	bne.n	8004faa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9a:	4b47      	ldr	r3, [pc, #284]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d119      	bne.n	8004fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e07f      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d003      	beq.n	8004fba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d107      	bne.n	8004fca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fba:	4b3f      	ldr	r3, [pc, #252]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e06f      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fca:	4b3b      	ldr	r3, [pc, #236]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e067      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fda:	4b37      	ldr	r3, [pc, #220]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f023 0203 	bic.w	r2, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	4934      	ldr	r1, [pc, #208]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fec:	f7fe fa3e 	bl	800346c <HAL_GetTick>
 8004ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff2:	e00a      	b.n	800500a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff4:	f7fe fa3a 	bl	800346c <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005002:	4293      	cmp	r3, r2
 8005004:	d901      	bls.n	800500a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e04f      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500a:	4b2b      	ldr	r3, [pc, #172]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f003 020c 	and.w	r2, r3, #12
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	429a      	cmp	r2, r3
 800501a:	d1eb      	bne.n	8004ff4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800501c:	4b25      	ldr	r3, [pc, #148]	; (80050b4 <HAL_RCC_ClockConfig+0x1b8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 030f 	and.w	r3, r3, #15
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d20c      	bcs.n	8005044 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502a:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <HAL_RCC_ClockConfig+0x1b8>)
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	b2d2      	uxtb	r2, r2
 8005030:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005032:	4b20      	ldr	r3, [pc, #128]	; (80050b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 030f 	and.w	r3, r3, #15
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e032      	b.n	80050aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d008      	beq.n	8005062 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005050:	4b19      	ldr	r3, [pc, #100]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	4916      	ldr	r1, [pc, #88]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	4313      	orrs	r3, r2
 8005060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d009      	beq.n	8005082 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800506e:	4b12      	ldr	r3, [pc, #72]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	490e      	ldr	r1, [pc, #56]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 800507e:	4313      	orrs	r3, r2
 8005080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005082:	f000 f855 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 8005086:	4602      	mov	r2, r0
 8005088:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	490a      	ldr	r1, [pc, #40]	; (80050bc <HAL_RCC_ClockConfig+0x1c0>)
 8005094:	5ccb      	ldrb	r3, [r1, r3]
 8005096:	fa22 f303 	lsr.w	r3, r2, r3
 800509a:	4a09      	ldr	r2, [pc, #36]	; (80050c0 <HAL_RCC_ClockConfig+0x1c4>)
 800509c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800509e:	4b09      	ldr	r3, [pc, #36]	; (80050c4 <HAL_RCC_ClockConfig+0x1c8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe f99e 	bl	80033e4 <HAL_InitTick>

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40023c00 	.word	0x40023c00
 80050b8:	40023800 	.word	0x40023800
 80050bc:	08012098 	.word	0x08012098
 80050c0:	20000008 	.word	0x20000008
 80050c4:	2000000c 	.word	0x2000000c

080050c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050cc:	4b03      	ldr	r3, [pc, #12]	; (80050dc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ce:	681b      	ldr	r3, [r3, #0]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	20000008 	.word	0x20000008

080050e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050e4:	f7ff fff0 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 80050e8:	4602      	mov	r2, r0
 80050ea:	4b05      	ldr	r3, [pc, #20]	; (8005100 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	0a9b      	lsrs	r3, r3, #10
 80050f0:	f003 0307 	and.w	r3, r3, #7
 80050f4:	4903      	ldr	r1, [pc, #12]	; (8005104 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050f6:	5ccb      	ldrb	r3, [r1, r3]
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40023800 	.word	0x40023800
 8005104:	080120a8 	.word	0x080120a8

08005108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800510c:	f7ff ffdc 	bl	80050c8 <HAL_RCC_GetHCLKFreq>
 8005110:	4602      	mov	r2, r0
 8005112:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	0b5b      	lsrs	r3, r3, #13
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	4903      	ldr	r1, [pc, #12]	; (800512c <HAL_RCC_GetPCLK2Freq+0x24>)
 800511e:	5ccb      	ldrb	r3, [r1, r3]
 8005120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005124:	4618      	mov	r0, r3
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40023800 	.word	0x40023800
 800512c:	080120a8 	.word	0x080120a8

08005130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005134:	b0ae      	sub	sp, #184	; 0xb8
 8005136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005156:	4bcb      	ldr	r3, [pc, #812]	; (8005484 <HAL_RCC_GetSysClockFreq+0x354>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 030c 	and.w	r3, r3, #12
 800515e:	2b0c      	cmp	r3, #12
 8005160:	f200 8206 	bhi.w	8005570 <HAL_RCC_GetSysClockFreq+0x440>
 8005164:	a201      	add	r2, pc, #4	; (adr r2, 800516c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	080051a1 	.word	0x080051a1
 8005170:	08005571 	.word	0x08005571
 8005174:	08005571 	.word	0x08005571
 8005178:	08005571 	.word	0x08005571
 800517c:	080051a9 	.word	0x080051a9
 8005180:	08005571 	.word	0x08005571
 8005184:	08005571 	.word	0x08005571
 8005188:	08005571 	.word	0x08005571
 800518c:	080051b1 	.word	0x080051b1
 8005190:	08005571 	.word	0x08005571
 8005194:	08005571 	.word	0x08005571
 8005198:	08005571 	.word	0x08005571
 800519c:	080053a1 	.word	0x080053a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051a0:	4bb9      	ldr	r3, [pc, #740]	; (8005488 <HAL_RCC_GetSysClockFreq+0x358>)
 80051a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80051a6:	e1e7      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051a8:	4bb8      	ldr	r3, [pc, #736]	; (800548c <HAL_RCC_GetSysClockFreq+0x35c>)
 80051aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80051ae:	e1e3      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b0:	4bb4      	ldr	r3, [pc, #720]	; (8005484 <HAL_RCC_GetSysClockFreq+0x354>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051bc:	4bb1      	ldr	r3, [pc, #708]	; (8005484 <HAL_RCC_GetSysClockFreq+0x354>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d071      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c8:	4bae      	ldr	r3, [pc, #696]	; (8005484 <HAL_RCC_GetSysClockFreq+0x354>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	099b      	lsrs	r3, r3, #6
 80051ce:	2200      	movs	r2, #0
 80051d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051d4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80051d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051e4:	2300      	movs	r3, #0
 80051e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051ee:	4622      	mov	r2, r4
 80051f0:	462b      	mov	r3, r5
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f04f 0100 	mov.w	r1, #0
 80051fa:	0159      	lsls	r1, r3, #5
 80051fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005200:	0150      	lsls	r0, r2, #5
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4621      	mov	r1, r4
 8005208:	1a51      	subs	r1, r2, r1
 800520a:	6439      	str	r1, [r7, #64]	; 0x40
 800520c:	4629      	mov	r1, r5
 800520e:	eb63 0301 	sbc.w	r3, r3, r1
 8005212:	647b      	str	r3, [r7, #68]	; 0x44
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005220:	4649      	mov	r1, r9
 8005222:	018b      	lsls	r3, r1, #6
 8005224:	4641      	mov	r1, r8
 8005226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800522a:	4641      	mov	r1, r8
 800522c:	018a      	lsls	r2, r1, #6
 800522e:	4641      	mov	r1, r8
 8005230:	1a51      	subs	r1, r2, r1
 8005232:	63b9      	str	r1, [r7, #56]	; 0x38
 8005234:	4649      	mov	r1, r9
 8005236:	eb63 0301 	sbc.w	r3, r3, r1
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005248:	4649      	mov	r1, r9
 800524a:	00cb      	lsls	r3, r1, #3
 800524c:	4641      	mov	r1, r8
 800524e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005252:	4641      	mov	r1, r8
 8005254:	00ca      	lsls	r2, r1, #3
 8005256:	4610      	mov	r0, r2
 8005258:	4619      	mov	r1, r3
 800525a:	4603      	mov	r3, r0
 800525c:	4622      	mov	r2, r4
 800525e:	189b      	adds	r3, r3, r2
 8005260:	633b      	str	r3, [r7, #48]	; 0x30
 8005262:	462b      	mov	r3, r5
 8005264:	460a      	mov	r2, r1
 8005266:	eb42 0303 	adc.w	r3, r2, r3
 800526a:	637b      	str	r3, [r7, #52]	; 0x34
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005278:	4629      	mov	r1, r5
 800527a:	024b      	lsls	r3, r1, #9
 800527c:	4621      	mov	r1, r4
 800527e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005282:	4621      	mov	r1, r4
 8005284:	024a      	lsls	r2, r1, #9
 8005286:	4610      	mov	r0, r2
 8005288:	4619      	mov	r1, r3
 800528a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800528e:	2200      	movs	r2, #0
 8005290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005294:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005298:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800529c:	f7fb fcf4 	bl	8000c88 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4613      	mov	r3, r2
 80052a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052aa:	e067      	b.n	800537c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ac:	4b75      	ldr	r3, [pc, #468]	; (8005484 <HAL_RCC_GetSysClockFreq+0x354>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	099b      	lsrs	r3, r3, #6
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052b8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80052bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80052c6:	2300      	movs	r3, #0
 80052c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052ca:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80052ce:	4622      	mov	r2, r4
 80052d0:	462b      	mov	r3, r5
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f04f 0100 	mov.w	r1, #0
 80052da:	0159      	lsls	r1, r3, #5
 80052dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052e0:	0150      	lsls	r0, r2, #5
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4621      	mov	r1, r4
 80052e8:	1a51      	subs	r1, r2, r1
 80052ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80052ec:	4629      	mov	r1, r5
 80052ee:	eb63 0301 	sbc.w	r3, r3, r1
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	f04f 0300 	mov.w	r3, #0
 80052fc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005300:	4649      	mov	r1, r9
 8005302:	018b      	lsls	r3, r1, #6
 8005304:	4641      	mov	r1, r8
 8005306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800530a:	4641      	mov	r1, r8
 800530c:	018a      	lsls	r2, r1, #6
 800530e:	4641      	mov	r1, r8
 8005310:	ebb2 0a01 	subs.w	sl, r2, r1
 8005314:	4649      	mov	r1, r9
 8005316:	eb63 0b01 	sbc.w	fp, r3, r1
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005326:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800532a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800532e:	4692      	mov	sl, r2
 8005330:	469b      	mov	fp, r3
 8005332:	4623      	mov	r3, r4
 8005334:	eb1a 0303 	adds.w	r3, sl, r3
 8005338:	623b      	str	r3, [r7, #32]
 800533a:	462b      	mov	r3, r5
 800533c:	eb4b 0303 	adc.w	r3, fp, r3
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800534e:	4629      	mov	r1, r5
 8005350:	028b      	lsls	r3, r1, #10
 8005352:	4621      	mov	r1, r4
 8005354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005358:	4621      	mov	r1, r4
 800535a:	028a      	lsls	r2, r1, #10
 800535c:	4610      	mov	r0, r2
 800535e:	4619      	mov	r1, r3
 8005360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005364:	2200      	movs	r2, #0
 8005366:	673b      	str	r3, [r7, #112]	; 0x70
 8005368:	677a      	str	r2, [r7, #116]	; 0x74
 800536a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800536e:	f7fb fc8b 	bl	8000c88 <__aeabi_uldivmod>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4613      	mov	r3, r2
 8005378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800537c:	4b41      	ldr	r3, [pc, #260]	; (8005484 <HAL_RCC_GetSysClockFreq+0x354>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	0c1b      	lsrs	r3, r3, #16
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	3301      	adds	r3, #1
 8005388:	005b      	lsls	r3, r3, #1
 800538a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800538e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005392:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800539e:	e0eb      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a0:	4b38      	ldr	r3, [pc, #224]	; (8005484 <HAL_RCC_GetSysClockFreq+0x354>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053ac:	4b35      	ldr	r3, [pc, #212]	; (8005484 <HAL_RCC_GetSysClockFreq+0x354>)
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d06b      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053b8:	4b32      	ldr	r3, [pc, #200]	; (8005484 <HAL_RCC_GetSysClockFreq+0x354>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	099b      	lsrs	r3, r3, #6
 80053be:	2200      	movs	r2, #0
 80053c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ca:	663b      	str	r3, [r7, #96]	; 0x60
 80053cc:	2300      	movs	r3, #0
 80053ce:	667b      	str	r3, [r7, #100]	; 0x64
 80053d0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80053d4:	4622      	mov	r2, r4
 80053d6:	462b      	mov	r3, r5
 80053d8:	f04f 0000 	mov.w	r0, #0
 80053dc:	f04f 0100 	mov.w	r1, #0
 80053e0:	0159      	lsls	r1, r3, #5
 80053e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053e6:	0150      	lsls	r0, r2, #5
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4621      	mov	r1, r4
 80053ee:	1a51      	subs	r1, r2, r1
 80053f0:	61b9      	str	r1, [r7, #24]
 80053f2:	4629      	mov	r1, r5
 80053f4:	eb63 0301 	sbc.w	r3, r3, r1
 80053f8:	61fb      	str	r3, [r7, #28]
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005406:	4659      	mov	r1, fp
 8005408:	018b      	lsls	r3, r1, #6
 800540a:	4651      	mov	r1, sl
 800540c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005410:	4651      	mov	r1, sl
 8005412:	018a      	lsls	r2, r1, #6
 8005414:	4651      	mov	r1, sl
 8005416:	ebb2 0801 	subs.w	r8, r2, r1
 800541a:	4659      	mov	r1, fp
 800541c:	eb63 0901 	sbc.w	r9, r3, r1
 8005420:	f04f 0200 	mov.w	r2, #0
 8005424:	f04f 0300 	mov.w	r3, #0
 8005428:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800542c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005430:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005434:	4690      	mov	r8, r2
 8005436:	4699      	mov	r9, r3
 8005438:	4623      	mov	r3, r4
 800543a:	eb18 0303 	adds.w	r3, r8, r3
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	462b      	mov	r3, r5
 8005442:	eb49 0303 	adc.w	r3, r9, r3
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005454:	4629      	mov	r1, r5
 8005456:	024b      	lsls	r3, r1, #9
 8005458:	4621      	mov	r1, r4
 800545a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800545e:	4621      	mov	r1, r4
 8005460:	024a      	lsls	r2, r1, #9
 8005462:	4610      	mov	r0, r2
 8005464:	4619      	mov	r1, r3
 8005466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800546a:	2200      	movs	r2, #0
 800546c:	65bb      	str	r3, [r7, #88]	; 0x58
 800546e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005470:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005474:	f7fb fc08 	bl	8000c88 <__aeabi_uldivmod>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4613      	mov	r3, r2
 800547e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005482:	e065      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x420>
 8005484:	40023800 	.word	0x40023800
 8005488:	00f42400 	.word	0x00f42400
 800548c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005490:	4b3d      	ldr	r3, [pc, #244]	; (8005588 <HAL_RCC_GetSysClockFreq+0x458>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	099b      	lsrs	r3, r3, #6
 8005496:	2200      	movs	r2, #0
 8005498:	4618      	mov	r0, r3
 800549a:	4611      	mov	r1, r2
 800549c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054a0:	653b      	str	r3, [r7, #80]	; 0x50
 80054a2:	2300      	movs	r3, #0
 80054a4:	657b      	str	r3, [r7, #84]	; 0x54
 80054a6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80054aa:	4642      	mov	r2, r8
 80054ac:	464b      	mov	r3, r9
 80054ae:	f04f 0000 	mov.w	r0, #0
 80054b2:	f04f 0100 	mov.w	r1, #0
 80054b6:	0159      	lsls	r1, r3, #5
 80054b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054bc:	0150      	lsls	r0, r2, #5
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4641      	mov	r1, r8
 80054c4:	1a51      	subs	r1, r2, r1
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	4649      	mov	r1, r9
 80054ca:	eb63 0301 	sbc.w	r3, r3, r1
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80054dc:	4659      	mov	r1, fp
 80054de:	018b      	lsls	r3, r1, #6
 80054e0:	4651      	mov	r1, sl
 80054e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054e6:	4651      	mov	r1, sl
 80054e8:	018a      	lsls	r2, r1, #6
 80054ea:	4651      	mov	r1, sl
 80054ec:	1a54      	subs	r4, r2, r1
 80054ee:	4659      	mov	r1, fp
 80054f0:	eb63 0501 	sbc.w	r5, r3, r1
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	00eb      	lsls	r3, r5, #3
 80054fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005502:	00e2      	lsls	r2, r4, #3
 8005504:	4614      	mov	r4, r2
 8005506:	461d      	mov	r5, r3
 8005508:	4643      	mov	r3, r8
 800550a:	18e3      	adds	r3, r4, r3
 800550c:	603b      	str	r3, [r7, #0]
 800550e:	464b      	mov	r3, r9
 8005510:	eb45 0303 	adc.w	r3, r5, r3
 8005514:	607b      	str	r3, [r7, #4]
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005522:	4629      	mov	r1, r5
 8005524:	028b      	lsls	r3, r1, #10
 8005526:	4621      	mov	r1, r4
 8005528:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800552c:	4621      	mov	r1, r4
 800552e:	028a      	lsls	r2, r1, #10
 8005530:	4610      	mov	r0, r2
 8005532:	4619      	mov	r1, r3
 8005534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005538:	2200      	movs	r2, #0
 800553a:	64bb      	str	r3, [r7, #72]	; 0x48
 800553c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800553e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005542:	f7fb fba1 	bl	8000c88 <__aeabi_uldivmod>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	4613      	mov	r3, r2
 800554c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005550:	4b0d      	ldr	r3, [pc, #52]	; (8005588 <HAL_RCC_GetSysClockFreq+0x458>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	0f1b      	lsrs	r3, r3, #28
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800555e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005562:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005566:	fbb2 f3f3 	udiv	r3, r2, r3
 800556a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800556e:	e003      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005570:	4b06      	ldr	r3, [pc, #24]	; (800558c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005572:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005576:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005578:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800557c:	4618      	mov	r0, r3
 800557e:	37b8      	adds	r7, #184	; 0xb8
 8005580:	46bd      	mov	sp, r7
 8005582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005586:	bf00      	nop
 8005588:	40023800 	.word	0x40023800
 800558c:	00f42400 	.word	0x00f42400

08005590 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e28d      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8083 	beq.w	80056b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055b0:	4b94      	ldr	r3, [pc, #592]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 030c 	and.w	r3, r3, #12
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d019      	beq.n	80055f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055bc:	4b91      	ldr	r3, [pc, #580]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d106      	bne.n	80055d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055c8:	4b8e      	ldr	r3, [pc, #568]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055d4:	d00c      	beq.n	80055f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055d6:	4b8b      	ldr	r3, [pc, #556]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055de:	2b0c      	cmp	r3, #12
 80055e0:	d112      	bne.n	8005608 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055e2:	4b88      	ldr	r3, [pc, #544]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055ee:	d10b      	bne.n	8005608 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f0:	4b84      	ldr	r3, [pc, #528]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d05b      	beq.n	80056b4 <HAL_RCC_OscConfig+0x124>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d157      	bne.n	80056b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e25a      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005610:	d106      	bne.n	8005620 <HAL_RCC_OscConfig+0x90>
 8005612:	4b7c      	ldr	r3, [pc, #496]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a7b      	ldr	r2, [pc, #492]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	e01d      	b.n	800565c <HAL_RCC_OscConfig+0xcc>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005628:	d10c      	bne.n	8005644 <HAL_RCC_OscConfig+0xb4>
 800562a:	4b76      	ldr	r3, [pc, #472]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a75      	ldr	r2, [pc, #468]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005634:	6013      	str	r3, [r2, #0]
 8005636:	4b73      	ldr	r3, [pc, #460]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a72      	ldr	r2, [pc, #456]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 800563c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e00b      	b.n	800565c <HAL_RCC_OscConfig+0xcc>
 8005644:	4b6f      	ldr	r3, [pc, #444]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a6e      	ldr	r2, [pc, #440]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 800564a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	4b6c      	ldr	r3, [pc, #432]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a6b      	ldr	r2, [pc, #428]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800565a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d013      	beq.n	800568c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005664:	f7fd ff02 	bl	800346c <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800566c:	f7fd fefe 	bl	800346c <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b64      	cmp	r3, #100	; 0x64
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e21f      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567e:	4b61      	ldr	r3, [pc, #388]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d0f0      	beq.n	800566c <HAL_RCC_OscConfig+0xdc>
 800568a:	e014      	b.n	80056b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800568c:	f7fd feee 	bl	800346c <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005694:	f7fd feea 	bl	800346c <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b64      	cmp	r3, #100	; 0x64
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e20b      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056a6:	4b57      	ldr	r3, [pc, #348]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0x104>
 80056b2:	e000      	b.n	80056b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d06f      	beq.n	80057a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056c2:	4b50      	ldr	r3, [pc, #320]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 030c 	and.w	r3, r3, #12
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d017      	beq.n	80056fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056ce:	4b4d      	ldr	r3, [pc, #308]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d105      	bne.n	80056e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056da:	4b4a      	ldr	r3, [pc, #296]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056e6:	4b47      	ldr	r3, [pc, #284]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056ee:	2b0c      	cmp	r3, #12
 80056f0:	d11c      	bne.n	800572c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056f2:	4b44      	ldr	r3, [pc, #272]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d116      	bne.n	800572c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056fe:	4b41      	ldr	r3, [pc, #260]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0302 	and.w	r3, r3, #2
 8005706:	2b00      	cmp	r3, #0
 8005708:	d005      	beq.n	8005716 <HAL_RCC_OscConfig+0x186>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d001      	beq.n	8005716 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e1d3      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005716:	4b3b      	ldr	r3, [pc, #236]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4937      	ldr	r1, [pc, #220]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005726:	4313      	orrs	r3, r2
 8005728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572a:	e03a      	b.n	80057a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d020      	beq.n	8005776 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005734:	4b34      	ldr	r3, [pc, #208]	; (8005808 <HAL_RCC_OscConfig+0x278>)
 8005736:	2201      	movs	r2, #1
 8005738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573a:	f7fd fe97 	bl	800346c <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005742:	f7fd fe93 	bl	800346c <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e1b4      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005754:	4b2b      	ldr	r3, [pc, #172]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005760:	4b28      	ldr	r3, [pc, #160]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	4925      	ldr	r1, [pc, #148]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005770:	4313      	orrs	r3, r2
 8005772:	600b      	str	r3, [r1, #0]
 8005774:	e015      	b.n	80057a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005776:	4b24      	ldr	r3, [pc, #144]	; (8005808 <HAL_RCC_OscConfig+0x278>)
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577c:	f7fd fe76 	bl	800346c <HAL_GetTick>
 8005780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005784:	f7fd fe72 	bl	800346c <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e193      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005796:	4b1b      	ldr	r3, [pc, #108]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d036      	beq.n	800581c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d016      	beq.n	80057e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057b6:	4b15      	ldr	r3, [pc, #84]	; (800580c <HAL_RCC_OscConfig+0x27c>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057bc:	f7fd fe56 	bl	800346c <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057c4:	f7fd fe52 	bl	800346c <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e173      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <HAL_RCC_OscConfig+0x274>)
 80057d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0f0      	beq.n	80057c4 <HAL_RCC_OscConfig+0x234>
 80057e2:	e01b      	b.n	800581c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057e4:	4b09      	ldr	r3, [pc, #36]	; (800580c <HAL_RCC_OscConfig+0x27c>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ea:	f7fd fe3f 	bl	800346c <HAL_GetTick>
 80057ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057f0:	e00e      	b.n	8005810 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057f2:	f7fd fe3b 	bl	800346c <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d907      	bls.n	8005810 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e15c      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
 8005804:	40023800 	.word	0x40023800
 8005808:	42470000 	.word	0x42470000
 800580c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005810:	4b8a      	ldr	r3, [pc, #552]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 8005812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1ea      	bne.n	80057f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 8097 	beq.w	8005958 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800582a:	2300      	movs	r3, #0
 800582c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800582e:	4b83      	ldr	r3, [pc, #524]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10f      	bne.n	800585a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	60bb      	str	r3, [r7, #8]
 800583e:	4b7f      	ldr	r3, [pc, #508]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	4a7e      	ldr	r2, [pc, #504]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 8005844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005848:	6413      	str	r3, [r2, #64]	; 0x40
 800584a:	4b7c      	ldr	r3, [pc, #496]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 800584c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005852:	60bb      	str	r3, [r7, #8]
 8005854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005856:	2301      	movs	r3, #1
 8005858:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800585a:	4b79      	ldr	r3, [pc, #484]	; (8005a40 <HAL_RCC_OscConfig+0x4b0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005862:	2b00      	cmp	r3, #0
 8005864:	d118      	bne.n	8005898 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005866:	4b76      	ldr	r3, [pc, #472]	; (8005a40 <HAL_RCC_OscConfig+0x4b0>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a75      	ldr	r2, [pc, #468]	; (8005a40 <HAL_RCC_OscConfig+0x4b0>)
 800586c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005872:	f7fd fdfb 	bl	800346c <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800587a:	f7fd fdf7 	bl	800346c <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e118      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800588c:	4b6c      	ldr	r3, [pc, #432]	; (8005a40 <HAL_RCC_OscConfig+0x4b0>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0f0      	beq.n	800587a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d106      	bne.n	80058ae <HAL_RCC_OscConfig+0x31e>
 80058a0:	4b66      	ldr	r3, [pc, #408]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80058a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a4:	4a65      	ldr	r2, [pc, #404]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	6713      	str	r3, [r2, #112]	; 0x70
 80058ac:	e01c      	b.n	80058e8 <HAL_RCC_OscConfig+0x358>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b05      	cmp	r3, #5
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCC_OscConfig+0x340>
 80058b6:	4b61      	ldr	r3, [pc, #388]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	4a60      	ldr	r2, [pc, #384]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80058bc:	f043 0304 	orr.w	r3, r3, #4
 80058c0:	6713      	str	r3, [r2, #112]	; 0x70
 80058c2:	4b5e      	ldr	r3, [pc, #376]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	4a5d      	ldr	r2, [pc, #372]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80058c8:	f043 0301 	orr.w	r3, r3, #1
 80058cc:	6713      	str	r3, [r2, #112]	; 0x70
 80058ce:	e00b      	b.n	80058e8 <HAL_RCC_OscConfig+0x358>
 80058d0:	4b5a      	ldr	r3, [pc, #360]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	4a59      	ldr	r2, [pc, #356]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80058d6:	f023 0301 	bic.w	r3, r3, #1
 80058da:	6713      	str	r3, [r2, #112]	; 0x70
 80058dc:	4b57      	ldr	r3, [pc, #348]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	4a56      	ldr	r2, [pc, #344]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80058e2:	f023 0304 	bic.w	r3, r3, #4
 80058e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d015      	beq.n	800591c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f0:	f7fd fdbc 	bl	800346c <HAL_GetTick>
 80058f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f6:	e00a      	b.n	800590e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f8:	f7fd fdb8 	bl	800346c <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	; 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e0d7      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800590e:	4b4b      	ldr	r3, [pc, #300]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0ee      	beq.n	80058f8 <HAL_RCC_OscConfig+0x368>
 800591a:	e014      	b.n	8005946 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7fd fda6 	bl	800346c <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005922:	e00a      	b.n	800593a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005924:	f7fd fda2 	bl	800346c <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e0c1      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800593a:	4b40      	ldr	r3, [pc, #256]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 800593c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1ee      	bne.n	8005924 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005946:	7dfb      	ldrb	r3, [r7, #23]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d105      	bne.n	8005958 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800594c:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	4a3a      	ldr	r2, [pc, #232]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 8005952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005956:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 80ad 	beq.w	8005abc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005962:	4b36      	ldr	r3, [pc, #216]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b08      	cmp	r3, #8
 800596c:	d060      	beq.n	8005a30 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d145      	bne.n	8005a02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005976:	4b33      	ldr	r3, [pc, #204]	; (8005a44 <HAL_RCC_OscConfig+0x4b4>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597c:	f7fd fd76 	bl	800346c <HAL_GetTick>
 8005980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005982:	e008      	b.n	8005996 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005984:	f7fd fd72 	bl	800346c <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e093      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005996:	4b29      	ldr	r3, [pc, #164]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f0      	bne.n	8005984 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	69da      	ldr	r2, [r3, #28]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	019b      	lsls	r3, r3, #6
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	3b01      	subs	r3, #1
 80059bc:	041b      	lsls	r3, r3, #16
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	061b      	lsls	r3, r3, #24
 80059c6:	431a      	orrs	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	071b      	lsls	r3, r3, #28
 80059ce:	491b      	ldr	r1, [pc, #108]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d4:	4b1b      	ldr	r3, [pc, #108]	; (8005a44 <HAL_RCC_OscConfig+0x4b4>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059da:	f7fd fd47 	bl	800346c <HAL_GetTick>
 80059de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e0:	e008      	b.n	80059f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059e2:	f7fd fd43 	bl	800346c <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e064      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f4:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0f0      	beq.n	80059e2 <HAL_RCC_OscConfig+0x452>
 8005a00:	e05c      	b.n	8005abc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a02:	4b10      	ldr	r3, [pc, #64]	; (8005a44 <HAL_RCC_OscConfig+0x4b4>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fd fd30 	bl	800346c <HAL_GetTick>
 8005a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a10:	f7fd fd2c 	bl	800346c <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e04d      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a22:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <HAL_RCC_OscConfig+0x4ac>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1f0      	bne.n	8005a10 <HAL_RCC_OscConfig+0x480>
 8005a2e:	e045      	b.n	8005abc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d107      	bne.n	8005a48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e040      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	40007000 	.word	0x40007000
 8005a44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a48:	4b1f      	ldr	r3, [pc, #124]	; (8005ac8 <HAL_RCC_OscConfig+0x538>)
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d030      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d129      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d122      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a78:	4013      	ands	r3, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d119      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8e:	085b      	lsrs	r3, r3, #1
 8005a90:	3b01      	subs	r3, #1
 8005a92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d10f      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d107      	bne.n	8005ab8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d001      	beq.n	8005abc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e000      	b.n	8005abe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	40023800 	.word	0x40023800

08005acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e07b      	b.n	8005bd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d108      	bne.n	8005af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aee:	d009      	beq.n	8005b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	61da      	str	r2, [r3, #28]
 8005af6:	e005      	b.n	8005b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fd f88e 	bl	8002c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	431a      	orrs	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b88:	ea42 0103 	orr.w	r1, r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	0c1b      	lsrs	r3, r3, #16
 8005ba2:	f003 0104 	and.w	r1, r3, #4
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	f003 0210 	and.w	r2, r3, #16
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69da      	ldr	r2, [r3, #28]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b088      	sub	sp, #32
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	4613      	mov	r3, r2
 8005bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_SPI_Transmit+0x22>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e126      	b.n	8005e4e <HAL_SPI_Transmit+0x270>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c08:	f7fd fc30 	bl	800346c <HAL_GetTick>
 8005c0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d002      	beq.n	8005c24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c1e:	2302      	movs	r3, #2
 8005c20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c22:	e10b      	b.n	8005e3c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d002      	beq.n	8005c30 <HAL_SPI_Transmit+0x52>
 8005c2a:	88fb      	ldrh	r3, [r7, #6]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c34:	e102      	b.n	8005e3c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2203      	movs	r2, #3
 8005c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	88fa      	ldrh	r2, [r7, #6]
 8005c4e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	88fa      	ldrh	r2, [r7, #6]
 8005c54:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c7c:	d10f      	bne.n	8005c9e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c8c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c9c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca8:	2b40      	cmp	r3, #64	; 0x40
 8005caa:	d007      	beq.n	8005cbc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc4:	d14b      	bne.n	8005d5e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d002      	beq.n	8005cd4 <HAL_SPI_Transmit+0xf6>
 8005cce:	8afb      	ldrh	r3, [r7, #22]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d13e      	bne.n	8005d52 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd8:	881a      	ldrh	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce4:	1c9a      	adds	r2, r3, #2
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cf8:	e02b      	b.n	8005d52 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d112      	bne.n	8005d2e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0c:	881a      	ldrh	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d18:	1c9a      	adds	r2, r3, #2
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d2c:	e011      	b.n	8005d52 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d2e:	f7fd fb9d 	bl	800346c <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d803      	bhi.n	8005d46 <HAL_SPI_Transmit+0x168>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d44:	d102      	bne.n	8005d4c <HAL_SPI_Transmit+0x16e>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d50:	e074      	b.n	8005e3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1ce      	bne.n	8005cfa <HAL_SPI_Transmit+0x11c>
 8005d5c:	e04c      	b.n	8005df8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <HAL_SPI_Transmit+0x18e>
 8005d66:	8afb      	ldrh	r3, [r7, #22]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d140      	bne.n	8005dee <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	7812      	ldrb	r2, [r2, #0]
 8005d78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d92:	e02c      	b.n	8005dee <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d113      	bne.n	8005dca <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	330c      	adds	r3, #12
 8005dac:	7812      	ldrb	r2, [r2, #0]
 8005dae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dc8:	e011      	b.n	8005dee <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dca:	f7fd fb4f 	bl	800346c <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d803      	bhi.n	8005de2 <HAL_SPI_Transmit+0x204>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de0:	d102      	bne.n	8005de8 <HAL_SPI_Transmit+0x20a>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dec:	e026      	b.n	8005e3c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1cd      	bne.n	8005d94 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fa55 	bl	80062ac <SPI_EndRxTxTransaction>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2220      	movs	r2, #32
 8005e0c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10a      	bne.n	8005e2c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e16:	2300      	movs	r3, #0
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	77fb      	strb	r3, [r7, #31]
 8005e38:	e000      	b.n	8005e3c <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b08c      	sub	sp, #48	; 0x30
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e64:	2301      	movs	r3, #1
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x26>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e18a      	b.n	8006192 <HAL_SPI_TransmitReceive+0x33c>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e84:	f7fd faf2 	bl	800346c <HAL_GetTick>
 8005e88:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e9a:	887b      	ldrh	r3, [r7, #2]
 8005e9c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d00f      	beq.n	8005ec6 <HAL_SPI_TransmitReceive+0x70>
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eac:	d107      	bne.n	8005ebe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d103      	bne.n	8005ebe <HAL_SPI_TransmitReceive+0x68>
 8005eb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d003      	beq.n	8005ec6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ec4:	e15b      	b.n	800617e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x82>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x82>
 8005ed2:	887b      	ldrh	r3, [r7, #2]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d103      	bne.n	8005ee0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ede:	e14e      	b.n	800617e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d003      	beq.n	8005ef4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2205      	movs	r2, #5
 8005ef0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	887a      	ldrh	r2, [r7, #2]
 8005f04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	887a      	ldrh	r2, [r7, #2]
 8005f0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	887a      	ldrh	r2, [r7, #2]
 8005f16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	887a      	ldrh	r2, [r7, #2]
 8005f1c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f34:	2b40      	cmp	r3, #64	; 0x40
 8005f36:	d007      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f50:	d178      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_SPI_TransmitReceive+0x10a>
 8005f5a:	8b7b      	ldrh	r3, [r7, #26]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d166      	bne.n	800602e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f64:	881a      	ldrh	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	1c9a      	adds	r2, r3, #2
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f84:	e053      	b.n	800602e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d11b      	bne.n	8005fcc <HAL_SPI_TransmitReceive+0x176>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d016      	beq.n	8005fcc <HAL_SPI_TransmitReceive+0x176>
 8005f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d113      	bne.n	8005fcc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	881a      	ldrh	r2, [r3, #0]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	1c9a      	adds	r2, r3, #2
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d119      	bne.n	800600e <HAL_SPI_TransmitReceive+0x1b8>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d014      	beq.n	800600e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	b292      	uxth	r2, r2
 8005ff0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	1c9a      	adds	r2, r3, #2
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800600a:	2301      	movs	r3, #1
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800600e:	f7fd fa2d 	bl	800346c <HAL_GetTick>
 8006012:	4602      	mov	r2, r0
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800601a:	429a      	cmp	r2, r3
 800601c:	d807      	bhi.n	800602e <HAL_SPI_TransmitReceive+0x1d8>
 800601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d003      	beq.n	800602e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800602c:	e0a7      	b.n	800617e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1a6      	bne.n	8005f86 <HAL_SPI_TransmitReceive+0x130>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800603c:	b29b      	uxth	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1a1      	bne.n	8005f86 <HAL_SPI_TransmitReceive+0x130>
 8006042:	e07c      	b.n	800613e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <HAL_SPI_TransmitReceive+0x1fc>
 800604c:	8b7b      	ldrh	r3, [r7, #26]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d16b      	bne.n	800612a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	330c      	adds	r3, #12
 800605c:	7812      	ldrb	r2, [r2, #0]
 800605e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800606e:	b29b      	uxth	r3, r3
 8006070:	3b01      	subs	r3, #1
 8006072:	b29a      	uxth	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006078:	e057      	b.n	800612a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b02      	cmp	r3, #2
 8006086:	d11c      	bne.n	80060c2 <HAL_SPI_TransmitReceive+0x26c>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800608c:	b29b      	uxth	r3, r3
 800608e:	2b00      	cmp	r3, #0
 8006090:	d017      	beq.n	80060c2 <HAL_SPI_TransmitReceive+0x26c>
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d114      	bne.n	80060c2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	330c      	adds	r3, #12
 80060a2:	7812      	ldrb	r2, [r2, #0]
 80060a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d119      	bne.n	8006104 <HAL_SPI_TransmitReceive+0x2ae>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d014      	beq.n	8006104 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006100:	2301      	movs	r3, #1
 8006102:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006104:	f7fd f9b2 	bl	800346c <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006110:	429a      	cmp	r2, r3
 8006112:	d803      	bhi.n	800611c <HAL_SPI_TransmitReceive+0x2c6>
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611a:	d102      	bne.n	8006122 <HAL_SPI_TransmitReceive+0x2cc>
 800611c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800611e:	2b00      	cmp	r3, #0
 8006120:	d103      	bne.n	800612a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006128:	e029      	b.n	800617e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800612e:	b29b      	uxth	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1a2      	bne.n	800607a <HAL_SPI_TransmitReceive+0x224>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d19d      	bne.n	800607a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800613e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006140:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 f8b2 	bl	80062ac <SPI_EndRxTxTransaction>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d006      	beq.n	800615c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2220      	movs	r2, #32
 8006158:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800615a:	e010      	b.n	800617e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10b      	bne.n	800617c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006164:	2300      	movs	r3, #0
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	617b      	str	r3, [r7, #20]
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	e000      	b.n	800617e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800617c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800618e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006192:	4618      	mov	r0, r3
 8006194:	3730      	adds	r7, #48	; 0x30
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	4613      	mov	r3, r2
 80061aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061ac:	f7fd f95e 	bl	800346c <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	1a9b      	subs	r3, r3, r2
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	4413      	add	r3, r2
 80061ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061bc:	f7fd f956 	bl	800346c <HAL_GetTick>
 80061c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061c2:	4b39      	ldr	r3, [pc, #228]	; (80062a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	015b      	lsls	r3, r3, #5
 80061c8:	0d1b      	lsrs	r3, r3, #20
 80061ca:	69fa      	ldr	r2, [r7, #28]
 80061cc:	fb02 f303 	mul.w	r3, r2, r3
 80061d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061d2:	e054      	b.n	800627e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061da:	d050      	beq.n	800627e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061dc:	f7fd f946 	bl	800346c <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	69fa      	ldr	r2, [r7, #28]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d902      	bls.n	80061f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d13d      	bne.n	800626e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685a      	ldr	r2, [r3, #4]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006200:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800620a:	d111      	bne.n	8006230 <SPI_WaitFlagStateUntilTimeout+0x94>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006214:	d004      	beq.n	8006220 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621e:	d107      	bne.n	8006230 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800622e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006238:	d10f      	bne.n	800625a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006258:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e017      	b.n	800629e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	3b01      	subs	r3, #1
 800627c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4013      	ands	r3, r2
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	429a      	cmp	r2, r3
 800628c:	bf0c      	ite	eq
 800628e:	2301      	moveq	r3, #1
 8006290:	2300      	movne	r3, #0
 8006292:	b2db      	uxtb	r3, r3
 8006294:	461a      	mov	r2, r3
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	429a      	cmp	r2, r3
 800629a:	d19b      	bne.n	80061d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3720      	adds	r7, #32
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000008 	.word	0x20000008

080062ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062b8:	4b1b      	ldr	r3, [pc, #108]	; (8006328 <SPI_EndRxTxTransaction+0x7c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a1b      	ldr	r2, [pc, #108]	; (800632c <SPI_EndRxTxTransaction+0x80>)
 80062be:	fba2 2303 	umull	r2, r3, r2, r3
 80062c2:	0d5b      	lsrs	r3, r3, #21
 80062c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062c8:	fb02 f303 	mul.w	r3, r2, r3
 80062cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062d6:	d112      	bne.n	80062fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	2180      	movs	r1, #128	; 0x80
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f7ff ff5a 	bl	800619c <SPI_WaitFlagStateUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d016      	beq.n	800631c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f2:	f043 0220 	orr.w	r2, r3, #32
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e00f      	b.n	800631e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00a      	beq.n	800631a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3b01      	subs	r3, #1
 8006308:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006314:	2b80      	cmp	r3, #128	; 0x80
 8006316:	d0f2      	beq.n	80062fe <SPI_EndRxTxTransaction+0x52>
 8006318:	e000      	b.n	800631c <SPI_EndRxTxTransaction+0x70>
        break;
 800631a:	bf00      	nop
  }

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3718      	adds	r7, #24
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	20000008 	.word	0x20000008
 800632c:	165e9f81 	.word	0x165e9f81

08006330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e041      	b.n	80063c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fc fdc2 	bl	8002ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f001 f814 	bl	800739c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d001      	beq.n	80063e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e04e      	b.n	8006486 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a23      	ldr	r2, [pc, #140]	; (8006494 <HAL_TIM_Base_Start_IT+0xc4>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d022      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006412:	d01d      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a1f      	ldr	r2, [pc, #124]	; (8006498 <HAL_TIM_Base_Start_IT+0xc8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d018      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1e      	ldr	r2, [pc, #120]	; (800649c <HAL_TIM_Base_Start_IT+0xcc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d013      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1c      	ldr	r2, [pc, #112]	; (80064a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00e      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1b      	ldr	r2, [pc, #108]	; (80064a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d009      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a19      	ldr	r2, [pc, #100]	; (80064a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d004      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0x80>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a18      	ldr	r2, [pc, #96]	; (80064ac <HAL_TIM_Base_Start_IT+0xdc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d111      	bne.n	8006474 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b06      	cmp	r3, #6
 8006460:	d010      	beq.n	8006484 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0201 	orr.w	r2, r2, #1
 8006470:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006472:	e007      	b.n	8006484 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	40010000 	.word	0x40010000
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40000c00 	.word	0x40000c00
 80064a4:	40010400 	.word	0x40010400
 80064a8:	40014000 	.word	0x40014000
 80064ac:	40001800 	.word	0x40001800

080064b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0201 	bic.w	r2, r2, #1
 80064c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10f      	bne.n	80064f8 <HAL_TIM_Base_Stop_IT+0x48>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6a1a      	ldr	r2, [r3, #32]
 80064de:	f240 4344 	movw	r3, #1092	; 0x444
 80064e2:	4013      	ands	r3, r2
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d107      	bne.n	80064f8 <HAL_TIM_Base_Stop_IT+0x48>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e041      	b.n	80065a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d106      	bne.n	800653a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f839 	bl	80065ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2202      	movs	r2, #2
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3304      	adds	r3, #4
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f000 ff25 	bl	800739c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d109      	bne.n	80065e4 <HAL_TIM_PWM_Start+0x24>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b01      	cmp	r3, #1
 80065da:	bf14      	ite	ne
 80065dc:	2301      	movne	r3, #1
 80065de:	2300      	moveq	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	e022      	b.n	800662a <HAL_TIM_PWM_Start+0x6a>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b04      	cmp	r3, #4
 80065e8:	d109      	bne.n	80065fe <HAL_TIM_PWM_Start+0x3e>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	bf14      	ite	ne
 80065f6:	2301      	movne	r3, #1
 80065f8:	2300      	moveq	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	e015      	b.n	800662a <HAL_TIM_PWM_Start+0x6a>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b08      	cmp	r3, #8
 8006602:	d109      	bne.n	8006618 <HAL_TIM_PWM_Start+0x58>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b01      	cmp	r3, #1
 800660e:	bf14      	ite	ne
 8006610:	2301      	movne	r3, #1
 8006612:	2300      	moveq	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	e008      	b.n	800662a <HAL_TIM_PWM_Start+0x6a>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	bf14      	ite	ne
 8006624:	2301      	movne	r3, #1
 8006626:	2300      	moveq	r3, #0
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800662e:	2301      	movs	r3, #1
 8006630:	e07c      	b.n	800672c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d104      	bne.n	8006642 <HAL_TIM_PWM_Start+0x82>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2202      	movs	r2, #2
 800663c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006640:	e013      	b.n	800666a <HAL_TIM_PWM_Start+0xaa>
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	2b04      	cmp	r3, #4
 8006646:	d104      	bne.n	8006652 <HAL_TIM_PWM_Start+0x92>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006650:	e00b      	b.n	800666a <HAL_TIM_PWM_Start+0xaa>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b08      	cmp	r3, #8
 8006656:	d104      	bne.n	8006662 <HAL_TIM_PWM_Start+0xa2>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006660:	e003      	b.n	800666a <HAL_TIM_PWM_Start+0xaa>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2202      	movs	r2, #2
 8006666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2201      	movs	r2, #1
 8006670:	6839      	ldr	r1, [r7, #0]
 8006672:	4618      	mov	r0, r3
 8006674:	f001 fb38 	bl	8007ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a2d      	ldr	r2, [pc, #180]	; (8006734 <HAL_TIM_PWM_Start+0x174>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_TIM_PWM_Start+0xcc>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a2c      	ldr	r2, [pc, #176]	; (8006738 <HAL_TIM_PWM_Start+0x178>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d101      	bne.n	8006690 <HAL_TIM_PWM_Start+0xd0>
 800668c:	2301      	movs	r3, #1
 800668e:	e000      	b.n	8006692 <HAL_TIM_PWM_Start+0xd2>
 8006690:	2300      	movs	r3, #0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a22      	ldr	r2, [pc, #136]	; (8006734 <HAL_TIM_PWM_Start+0x174>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d022      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b8:	d01d      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1f      	ldr	r2, [pc, #124]	; (800673c <HAL_TIM_PWM_Start+0x17c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d018      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <HAL_TIM_PWM_Start+0x180>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d013      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <HAL_TIM_PWM_Start+0x184>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00e      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a16      	ldr	r2, [pc, #88]	; (8006738 <HAL_TIM_PWM_Start+0x178>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a18      	ldr	r2, [pc, #96]	; (8006748 <HAL_TIM_PWM_Start+0x188>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d004      	beq.n	80066f6 <HAL_TIM_PWM_Start+0x136>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a16      	ldr	r2, [pc, #88]	; (800674c <HAL_TIM_PWM_Start+0x18c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d111      	bne.n	800671a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b06      	cmp	r3, #6
 8006706:	d010      	beq.n	800672a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f042 0201 	orr.w	r2, r2, #1
 8006716:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006718:	e007      	b.n	800672a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0201 	orr.w	r2, r2, #1
 8006728:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	40010000 	.word	0x40010000
 8006738:	40010400 	.word	0x40010400
 800673c:	40000400 	.word	0x40000400
 8006740:	40000800 	.word	0x40000800
 8006744:	40000c00 	.word	0x40000c00
 8006748:	40014000 	.word	0x40014000
 800674c:	40001800 	.word	0x40001800

08006750 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e041      	b.n	80067e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fc fb64 	bl	8002e44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f000 fe04 	bl	800739c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
	...

080067f0 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d104      	bne.n	800680a <HAL_TIM_IC_Start+0x1a>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006806:	b2db      	uxtb	r3, r3
 8006808:	e013      	b.n	8006832 <HAL_TIM_IC_Start+0x42>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	2b04      	cmp	r3, #4
 800680e:	d104      	bne.n	800681a <HAL_TIM_IC_Start+0x2a>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006816:	b2db      	uxtb	r3, r3
 8006818:	e00b      	b.n	8006832 <HAL_TIM_IC_Start+0x42>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b08      	cmp	r3, #8
 800681e:	d104      	bne.n	800682a <HAL_TIM_IC_Start+0x3a>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006826:	b2db      	uxtb	r3, r3
 8006828:	e003      	b.n	8006832 <HAL_TIM_IC_Start+0x42>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006830:	b2db      	uxtb	r3, r3
 8006832:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d104      	bne.n	8006844 <HAL_TIM_IC_Start+0x54>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006840:	b2db      	uxtb	r3, r3
 8006842:	e013      	b.n	800686c <HAL_TIM_IC_Start+0x7c>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	2b04      	cmp	r3, #4
 8006848:	d104      	bne.n	8006854 <HAL_TIM_IC_Start+0x64>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006850:	b2db      	uxtb	r3, r3
 8006852:	e00b      	b.n	800686c <HAL_TIM_IC_Start+0x7c>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2b08      	cmp	r3, #8
 8006858:	d104      	bne.n	8006864 <HAL_TIM_IC_Start+0x74>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006860:	b2db      	uxtb	r3, r3
 8006862:	e003      	b.n	800686c <HAL_TIM_IC_Start+0x7c>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800686a:	b2db      	uxtb	r3, r3
 800686c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d102      	bne.n	800687a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d001      	beq.n	800687e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e081      	b.n	8006982 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d104      	bne.n	800688e <HAL_TIM_IC_Start+0x9e>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800688c:	e013      	b.n	80068b6 <HAL_TIM_IC_Start+0xc6>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2b04      	cmp	r3, #4
 8006892:	d104      	bne.n	800689e <HAL_TIM_IC_Start+0xae>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800689c:	e00b      	b.n	80068b6 <HAL_TIM_IC_Start+0xc6>
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d104      	bne.n	80068ae <HAL_TIM_IC_Start+0xbe>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2202      	movs	r2, #2
 80068a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068ac:	e003      	b.n	80068b6 <HAL_TIM_IC_Start+0xc6>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2202      	movs	r2, #2
 80068b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <HAL_TIM_IC_Start+0xd6>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068c4:	e013      	b.n	80068ee <HAL_TIM_IC_Start+0xfe>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b04      	cmp	r3, #4
 80068ca:	d104      	bne.n	80068d6 <HAL_TIM_IC_Start+0xe6>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068d4:	e00b      	b.n	80068ee <HAL_TIM_IC_Start+0xfe>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d104      	bne.n	80068e6 <HAL_TIM_IC_Start+0xf6>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e4:	e003      	b.n	80068ee <HAL_TIM_IC_Start+0xfe>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2201      	movs	r2, #1
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 f9f6 	bl	8007ce8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a22      	ldr	r2, [pc, #136]	; (800698c <HAL_TIM_IC_Start+0x19c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d022      	beq.n	800694c <HAL_TIM_IC_Start+0x15c>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800690e:	d01d      	beq.n	800694c <HAL_TIM_IC_Start+0x15c>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <HAL_TIM_IC_Start+0x1a0>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d018      	beq.n	800694c <HAL_TIM_IC_Start+0x15c>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <HAL_TIM_IC_Start+0x1a4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d013      	beq.n	800694c <HAL_TIM_IC_Start+0x15c>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a1b      	ldr	r2, [pc, #108]	; (8006998 <HAL_TIM_IC_Start+0x1a8>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00e      	beq.n	800694c <HAL_TIM_IC_Start+0x15c>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a1a      	ldr	r2, [pc, #104]	; (800699c <HAL_TIM_IC_Start+0x1ac>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d009      	beq.n	800694c <HAL_TIM_IC_Start+0x15c>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a18      	ldr	r2, [pc, #96]	; (80069a0 <HAL_TIM_IC_Start+0x1b0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d004      	beq.n	800694c <HAL_TIM_IC_Start+0x15c>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a17      	ldr	r2, [pc, #92]	; (80069a4 <HAL_TIM_IC_Start+0x1b4>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d111      	bne.n	8006970 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b06      	cmp	r3, #6
 800695c:	d010      	beq.n	8006980 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f042 0201 	orr.w	r2, r2, #1
 800696c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800696e:	e007      	b.n	8006980 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40010000 	.word	0x40010000
 8006990:	40000400 	.word	0x40000400
 8006994:	40000800 	.word	0x40000800
 8006998:	40000c00 	.word	0x40000c00
 800699c:	40010400 	.word	0x40010400
 80069a0:	40014000 	.word	0x40014000
 80069a4:	40001800 	.word	0x40001800

080069a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <HAL_TIM_IC_Start_IT+0x1e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	e013      	b.n	80069ee <HAL_TIM_IC_Start_IT+0x46>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d104      	bne.n	80069d6 <HAL_TIM_IC_Start_IT+0x2e>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	e00b      	b.n	80069ee <HAL_TIM_IC_Start_IT+0x46>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d104      	bne.n	80069e6 <HAL_TIM_IC_Start_IT+0x3e>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	e003      	b.n	80069ee <HAL_TIM_IC_Start_IT+0x46>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d104      	bne.n	8006a00 <HAL_TIM_IC_Start_IT+0x58>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	e013      	b.n	8006a28 <HAL_TIM_IC_Start_IT+0x80>
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	d104      	bne.n	8006a10 <HAL_TIM_IC_Start_IT+0x68>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	e00b      	b.n	8006a28 <HAL_TIM_IC_Start_IT+0x80>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d104      	bne.n	8006a20 <HAL_TIM_IC_Start_IT+0x78>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	e003      	b.n	8006a28 <HAL_TIM_IC_Start_IT+0x80>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d102      	bne.n	8006a36 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a30:	7b7b      	ldrb	r3, [r7, #13]
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d001      	beq.n	8006a3a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e0cc      	b.n	8006bd4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d104      	bne.n	8006a4a <HAL_TIM_IC_Start_IT+0xa2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a48:	e013      	b.n	8006a72 <HAL_TIM_IC_Start_IT+0xca>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b04      	cmp	r3, #4
 8006a4e:	d104      	bne.n	8006a5a <HAL_TIM_IC_Start_IT+0xb2>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a58:	e00b      	b.n	8006a72 <HAL_TIM_IC_Start_IT+0xca>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d104      	bne.n	8006a6a <HAL_TIM_IC_Start_IT+0xc2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a68:	e003      	b.n	8006a72 <HAL_TIM_IC_Start_IT+0xca>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <HAL_TIM_IC_Start_IT+0xda>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2202      	movs	r2, #2
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a80:	e013      	b.n	8006aaa <HAL_TIM_IC_Start_IT+0x102>
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	2b04      	cmp	r3, #4
 8006a86:	d104      	bne.n	8006a92 <HAL_TIM_IC_Start_IT+0xea>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a90:	e00b      	b.n	8006aaa <HAL_TIM_IC_Start_IT+0x102>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d104      	bne.n	8006aa2 <HAL_TIM_IC_Start_IT+0xfa>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aa0:	e003      	b.n	8006aaa <HAL_TIM_IC_Start_IT+0x102>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b0c      	cmp	r3, #12
 8006aae:	d841      	bhi.n	8006b34 <HAL_TIM_IC_Start_IT+0x18c>
 8006ab0:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <HAL_TIM_IC_Start_IT+0x110>)
 8006ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab6:	bf00      	nop
 8006ab8:	08006aed 	.word	0x08006aed
 8006abc:	08006b35 	.word	0x08006b35
 8006ac0:	08006b35 	.word	0x08006b35
 8006ac4:	08006b35 	.word	0x08006b35
 8006ac8:	08006aff 	.word	0x08006aff
 8006acc:	08006b35 	.word	0x08006b35
 8006ad0:	08006b35 	.word	0x08006b35
 8006ad4:	08006b35 	.word	0x08006b35
 8006ad8:	08006b11 	.word	0x08006b11
 8006adc:	08006b35 	.word	0x08006b35
 8006ae0:	08006b35 	.word	0x08006b35
 8006ae4:	08006b35 	.word	0x08006b35
 8006ae8:	08006b23 	.word	0x08006b23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0202 	orr.w	r2, r2, #2
 8006afa:	60da      	str	r2, [r3, #12]
      break;
 8006afc:	e01d      	b.n	8006b3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0204 	orr.w	r2, r2, #4
 8006b0c:	60da      	str	r2, [r3, #12]
      break;
 8006b0e:	e014      	b.n	8006b3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0208 	orr.w	r2, r2, #8
 8006b1e:	60da      	str	r2, [r3, #12]
      break;
 8006b20:	e00b      	b.n	8006b3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68da      	ldr	r2, [r3, #12]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0210 	orr.w	r2, r2, #16
 8006b30:	60da      	str	r2, [r3, #12]
      break;
 8006b32:	e002      	b.n	8006b3a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	73fb      	strb	r3, [r7, #15]
      break;
 8006b38:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d148      	bne.n	8006bd2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2201      	movs	r2, #1
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f001 f8cd 	bl	8007ce8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a22      	ldr	r2, [pc, #136]	; (8006bdc <HAL_TIM_IC_Start_IT+0x234>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d022      	beq.n	8006b9e <HAL_TIM_IC_Start_IT+0x1f6>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b60:	d01d      	beq.n	8006b9e <HAL_TIM_IC_Start_IT+0x1f6>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1e      	ldr	r2, [pc, #120]	; (8006be0 <HAL_TIM_IC_Start_IT+0x238>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d018      	beq.n	8006b9e <HAL_TIM_IC_Start_IT+0x1f6>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a1c      	ldr	r2, [pc, #112]	; (8006be4 <HAL_TIM_IC_Start_IT+0x23c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d013      	beq.n	8006b9e <HAL_TIM_IC_Start_IT+0x1f6>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1b      	ldr	r2, [pc, #108]	; (8006be8 <HAL_TIM_IC_Start_IT+0x240>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00e      	beq.n	8006b9e <HAL_TIM_IC_Start_IT+0x1f6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a19      	ldr	r2, [pc, #100]	; (8006bec <HAL_TIM_IC_Start_IT+0x244>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d009      	beq.n	8006b9e <HAL_TIM_IC_Start_IT+0x1f6>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a18      	ldr	r2, [pc, #96]	; (8006bf0 <HAL_TIM_IC_Start_IT+0x248>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d004      	beq.n	8006b9e <HAL_TIM_IC_Start_IT+0x1f6>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a16      	ldr	r2, [pc, #88]	; (8006bf4 <HAL_TIM_IC_Start_IT+0x24c>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d111      	bne.n	8006bc2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b06      	cmp	r3, #6
 8006bae:	d010      	beq.n	8006bd2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0201 	orr.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc0:	e007      	b.n	8006bd2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f042 0201 	orr.w	r2, r2, #1
 8006bd0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	40010000 	.word	0x40010000
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800
 8006be8:	40000c00 	.word	0x40000c00
 8006bec:	40010400 	.word	0x40010400
 8006bf0:	40014000 	.word	0x40014000
 8006bf4:	40001800 	.word	0x40001800

08006bf8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d122      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d11b      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f06f 0202 	mvn.w	r2, #2
 8006c24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	f003 0303 	and.w	r3, r3, #3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fb fd7e 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8006c40:	e005      	b.n	8006c4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fb8c 	bl	8007360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fb93 	bl	8007374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0304 	and.w	r3, r3, #4
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d122      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	2b04      	cmp	r3, #4
 8006c6e:	d11b      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0204 	mvn.w	r2, #4
 8006c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fb fd54 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8006c94:	e005      	b.n	8006ca2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fb62 	bl	8007360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fb69 	bl	8007374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f003 0308 	and.w	r3, r3, #8
 8006cb2:	2b08      	cmp	r3, #8
 8006cb4:	d122      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d11b      	bne.n	8006cfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f06f 0208 	mvn.w	r2, #8
 8006ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2204      	movs	r2, #4
 8006cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d003      	beq.n	8006cea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7fb fd2a 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8006ce8:	e005      	b.n	8006cf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fb38 	bl	8007360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fb3f 	bl	8007374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	f003 0310 	and.w	r3, r3, #16
 8006d06:	2b10      	cmp	r3, #16
 8006d08:	d122      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b10      	cmp	r3, #16
 8006d16:	d11b      	bne.n	8006d50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f06f 0210 	mvn.w	r2, #16
 8006d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2208      	movs	r2, #8
 8006d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fb fd00 	bl	800273c <HAL_TIM_IC_CaptureCallback>
 8006d3c:	e005      	b.n	8006d4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fb0e 	bl	8007360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fb15 	bl	8007374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d10e      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d107      	bne.n	8006d7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f06f 0201 	mvn.w	r2, #1
 8006d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fb fcaa 	bl	80026d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d86:	2b80      	cmp	r3, #128	; 0x80
 8006d88:	d10e      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d94:	2b80      	cmp	r3, #128	; 0x80
 8006d96:	d107      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 f84c 	bl	8007e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	d10e      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b40      	cmp	r3, #64	; 0x40
 8006dc2:	d107      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fada 	bl	8007388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0320 	and.w	r3, r3, #32
 8006dde:	2b20      	cmp	r3, #32
 8006de0:	d10e      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0320 	and.w	r3, r3, #32
 8006dec:	2b20      	cmp	r3, #32
 8006dee:	d107      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0220 	mvn.w	r2, #32
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 f816 	bl	8007e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e088      	b.n	8006f38 <HAL_TIM_IC_ConfigChannel+0x130>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d11b      	bne.n	8006e6c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	6819      	ldr	r1, [r3, #0]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	f000 fd8c 	bl	8007960 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 020c 	bic.w	r2, r2, #12
 8006e56:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6999      	ldr	r1, [r3, #24]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	619a      	str	r2, [r3, #24]
 8006e6a:	e060      	b.n	8006f2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d11c      	bne.n	8006eac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	6819      	ldr	r1, [r3, #0]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f000 fe10 	bl	8007aa6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e94:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6999      	ldr	r1, [r3, #24]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	021a      	lsls	r2, r3, #8
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	619a      	str	r2, [r3, #24]
 8006eaa:	e040      	b.n	8006f2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2b08      	cmp	r3, #8
 8006eb0:	d11b      	bne.n	8006eea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	6819      	ldr	r1, [r3, #0]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	685a      	ldr	r2, [r3, #4]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	68db      	ldr	r3, [r3, #12]
 8006ec2:	f000 fe5d 	bl	8007b80 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	69da      	ldr	r2, [r3, #28]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 020c 	bic.w	r2, r2, #12
 8006ed4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69d9      	ldr	r1, [r3, #28]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	430a      	orrs	r2, r1
 8006ee6:	61da      	str	r2, [r3, #28]
 8006ee8:	e021      	b.n	8006f2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b0c      	cmp	r3, #12
 8006eee:	d11c      	bne.n	8006f2a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6818      	ldr	r0, [r3, #0]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	6819      	ldr	r1, [r3, #0]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f000 fe7a 	bl	8007bf8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69da      	ldr	r2, [r3, #28]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f12:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69d9      	ldr	r1, [r3, #28]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	021a      	lsls	r2, r3, #8
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	61da      	str	r2, [r3, #28]
 8006f28:	e001      	b.n	8006f2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3718      	adds	r7, #24
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e0ae      	b.n	80070bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2b0c      	cmp	r3, #12
 8006f6a:	f200 809f 	bhi.w	80070ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f6e:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f74:	08006fa9 	.word	0x08006fa9
 8006f78:	080070ad 	.word	0x080070ad
 8006f7c:	080070ad 	.word	0x080070ad
 8006f80:	080070ad 	.word	0x080070ad
 8006f84:	08006fe9 	.word	0x08006fe9
 8006f88:	080070ad 	.word	0x080070ad
 8006f8c:	080070ad 	.word	0x080070ad
 8006f90:	080070ad 	.word	0x080070ad
 8006f94:	0800702b 	.word	0x0800702b
 8006f98:	080070ad 	.word	0x080070ad
 8006f9c:	080070ad 	.word	0x080070ad
 8006fa0:	080070ad 	.word	0x080070ad
 8006fa4:	0800706b 	.word	0x0800706b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68b9      	ldr	r1, [r7, #8]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f000 fa94 	bl	80074dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699a      	ldr	r2, [r3, #24]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0208 	orr.w	r2, r2, #8
 8006fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0204 	bic.w	r2, r2, #4
 8006fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6999      	ldr	r1, [r3, #24]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	691a      	ldr	r2, [r3, #16]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	619a      	str	r2, [r3, #24]
      break;
 8006fe6:	e064      	b.n	80070b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68b9      	ldr	r1, [r7, #8]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fae4 	bl	80075bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699a      	ldr	r2, [r3, #24]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6999      	ldr	r1, [r3, #24]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	021a      	lsls	r2, r3, #8
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	619a      	str	r2, [r3, #24]
      break;
 8007028:	e043      	b.n	80070b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68b9      	ldr	r1, [r7, #8]
 8007030:	4618      	mov	r0, r3
 8007032:	f000 fb39 	bl	80076a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69da      	ldr	r2, [r3, #28]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f042 0208 	orr.w	r2, r2, #8
 8007044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69da      	ldr	r2, [r3, #28]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0204 	bic.w	r2, r2, #4
 8007054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69d9      	ldr	r1, [r3, #28]
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	61da      	str	r2, [r3, #28]
      break;
 8007068:	e023      	b.n	80070b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fb8d 	bl	8007790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69da      	ldr	r2, [r3, #28]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	69da      	ldr	r2, [r3, #28]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69d9      	ldr	r1, [r3, #28]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	021a      	lsls	r2, r3, #8
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	61da      	str	r2, [r3, #28]
      break;
 80070aa:	e002      	b.n	80070b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	75fb      	strb	r3, [r7, #23]
      break;
 80070b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_TIM_ConfigClockSource+0x1c>
 80070dc:	2302      	movs	r3, #2
 80070de:	e0b4      	b.n	800724a <HAL_TIM_ConfigClockSource+0x186>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007106:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007118:	d03e      	beq.n	8007198 <HAL_TIM_ConfigClockSource+0xd4>
 800711a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800711e:	f200 8087 	bhi.w	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007126:	f000 8086 	beq.w	8007236 <HAL_TIM_ConfigClockSource+0x172>
 800712a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712e:	d87f      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007130:	2b70      	cmp	r3, #112	; 0x70
 8007132:	d01a      	beq.n	800716a <HAL_TIM_ConfigClockSource+0xa6>
 8007134:	2b70      	cmp	r3, #112	; 0x70
 8007136:	d87b      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007138:	2b60      	cmp	r3, #96	; 0x60
 800713a:	d050      	beq.n	80071de <HAL_TIM_ConfigClockSource+0x11a>
 800713c:	2b60      	cmp	r3, #96	; 0x60
 800713e:	d877      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007140:	2b50      	cmp	r3, #80	; 0x50
 8007142:	d03c      	beq.n	80071be <HAL_TIM_ConfigClockSource+0xfa>
 8007144:	2b50      	cmp	r3, #80	; 0x50
 8007146:	d873      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007148:	2b40      	cmp	r3, #64	; 0x40
 800714a:	d058      	beq.n	80071fe <HAL_TIM_ConfigClockSource+0x13a>
 800714c:	2b40      	cmp	r3, #64	; 0x40
 800714e:	d86f      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007150:	2b30      	cmp	r3, #48	; 0x30
 8007152:	d064      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x15a>
 8007154:	2b30      	cmp	r3, #48	; 0x30
 8007156:	d86b      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007158:	2b20      	cmp	r3, #32
 800715a:	d060      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x15a>
 800715c:	2b20      	cmp	r3, #32
 800715e:	d867      	bhi.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
 8007160:	2b00      	cmp	r3, #0
 8007162:	d05c      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x15a>
 8007164:	2b10      	cmp	r3, #16
 8007166:	d05a      	beq.n	800721e <HAL_TIM_ConfigClockSource+0x15a>
 8007168:	e062      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6818      	ldr	r0, [r3, #0]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	6899      	ldr	r1, [r3, #8]
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f000 fd95 	bl	8007ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800718c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	609a      	str	r2, [r3, #8]
      break;
 8007196:	e04f      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	6899      	ldr	r1, [r3, #8]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f000 fd7e 	bl	8007ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689a      	ldr	r2, [r3, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071ba:	609a      	str	r2, [r3, #8]
      break;
 80071bc:	e03c      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6818      	ldr	r0, [r3, #0]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	6859      	ldr	r1, [r3, #4]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	461a      	mov	r2, r3
 80071cc:	f000 fc3c 	bl	8007a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2150      	movs	r1, #80	; 0x50
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 fd4b 	bl	8007c72 <TIM_ITRx_SetConfig>
      break;
 80071dc:	e02c      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6818      	ldr	r0, [r3, #0]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	6859      	ldr	r1, [r3, #4]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	461a      	mov	r2, r3
 80071ec:	f000 fc98 	bl	8007b20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2160      	movs	r1, #96	; 0x60
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fd3b 	bl	8007c72 <TIM_ITRx_SetConfig>
      break;
 80071fc:	e01c      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6818      	ldr	r0, [r3, #0]
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	6859      	ldr	r1, [r3, #4]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	461a      	mov	r2, r3
 800720c:	f000 fc1c 	bl	8007a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2140      	movs	r1, #64	; 0x40
 8007216:	4618      	mov	r0, r3
 8007218:	f000 fd2b 	bl	8007c72 <TIM_ITRx_SetConfig>
      break;
 800721c:	e00c      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4619      	mov	r1, r3
 8007228:	4610      	mov	r0, r2
 800722a:	f000 fd22 	bl	8007c72 <TIM_ITRx_SetConfig>
      break;
 800722e:	e003      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	73fb      	strb	r3, [r7, #15]
      break;
 8007234:	e000      	b.n	8007238 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007236:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007248:	7bfb      	ldrb	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b082      	sub	sp, #8
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007262:	2b01      	cmp	r3, #1
 8007264:	d101      	bne.n	800726a <HAL_TIM_SlaveConfigSynchro+0x18>
 8007266:	2302      	movs	r3, #2
 8007268:	e031      	b.n	80072ce <HAL_TIM_SlaveConfigSynchro+0x7c>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2202      	movs	r2, #2
 8007276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fadd 	bl	800783c <TIM_SlaveTimer_SetConfig>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d009      	beq.n	800729c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e018      	b.n	80072ce <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072aa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072ba:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b0c      	cmp	r3, #12
 80072ea:	d831      	bhi.n	8007350 <HAL_TIM_ReadCapturedValue+0x78>
 80072ec:	a201      	add	r2, pc, #4	; (adr r2, 80072f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80072ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f2:	bf00      	nop
 80072f4:	08007329 	.word	0x08007329
 80072f8:	08007351 	.word	0x08007351
 80072fc:	08007351 	.word	0x08007351
 8007300:	08007351 	.word	0x08007351
 8007304:	08007333 	.word	0x08007333
 8007308:	08007351 	.word	0x08007351
 800730c:	08007351 	.word	0x08007351
 8007310:	08007351 	.word	0x08007351
 8007314:	0800733d 	.word	0x0800733d
 8007318:	08007351 	.word	0x08007351
 800731c:	08007351 	.word	0x08007351
 8007320:	08007351 	.word	0x08007351
 8007324:	08007347 	.word	0x08007347
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800732e:	60fb      	str	r3, [r7, #12]

      break;
 8007330:	e00f      	b.n	8007352 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	60fb      	str	r3, [r7, #12]

      break;
 800733a:	e00a      	b.n	8007352 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007342:	60fb      	str	r3, [r7, #12]

      break;
 8007344:	e005      	b.n	8007352 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734c:	60fb      	str	r3, [r7, #12]

      break;
 800734e:	e000      	b.n	8007352 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007350:	bf00      	nop
  }

  return tmpreg;
 8007352:	68fb      	ldr	r3, [r7, #12]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a40      	ldr	r2, [pc, #256]	; (80074b0 <TIM_Base_SetConfig+0x114>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d013      	beq.n	80073dc <TIM_Base_SetConfig+0x40>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ba:	d00f      	beq.n	80073dc <TIM_Base_SetConfig+0x40>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a3d      	ldr	r2, [pc, #244]	; (80074b4 <TIM_Base_SetConfig+0x118>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00b      	beq.n	80073dc <TIM_Base_SetConfig+0x40>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a3c      	ldr	r2, [pc, #240]	; (80074b8 <TIM_Base_SetConfig+0x11c>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d007      	beq.n	80073dc <TIM_Base_SetConfig+0x40>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a3b      	ldr	r2, [pc, #236]	; (80074bc <TIM_Base_SetConfig+0x120>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d003      	beq.n	80073dc <TIM_Base_SetConfig+0x40>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a3a      	ldr	r2, [pc, #232]	; (80074c0 <TIM_Base_SetConfig+0x124>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d108      	bne.n	80073ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a2f      	ldr	r2, [pc, #188]	; (80074b0 <TIM_Base_SetConfig+0x114>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d02b      	beq.n	800744e <TIM_Base_SetConfig+0xb2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073fc:	d027      	beq.n	800744e <TIM_Base_SetConfig+0xb2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a2c      	ldr	r2, [pc, #176]	; (80074b4 <TIM_Base_SetConfig+0x118>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d023      	beq.n	800744e <TIM_Base_SetConfig+0xb2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a2b      	ldr	r2, [pc, #172]	; (80074b8 <TIM_Base_SetConfig+0x11c>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d01f      	beq.n	800744e <TIM_Base_SetConfig+0xb2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a2a      	ldr	r2, [pc, #168]	; (80074bc <TIM_Base_SetConfig+0x120>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d01b      	beq.n	800744e <TIM_Base_SetConfig+0xb2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a29      	ldr	r2, [pc, #164]	; (80074c0 <TIM_Base_SetConfig+0x124>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d017      	beq.n	800744e <TIM_Base_SetConfig+0xb2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a28      	ldr	r2, [pc, #160]	; (80074c4 <TIM_Base_SetConfig+0x128>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d013      	beq.n	800744e <TIM_Base_SetConfig+0xb2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a27      	ldr	r2, [pc, #156]	; (80074c8 <TIM_Base_SetConfig+0x12c>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00f      	beq.n	800744e <TIM_Base_SetConfig+0xb2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a26      	ldr	r2, [pc, #152]	; (80074cc <TIM_Base_SetConfig+0x130>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d00b      	beq.n	800744e <TIM_Base_SetConfig+0xb2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a25      	ldr	r2, [pc, #148]	; (80074d0 <TIM_Base_SetConfig+0x134>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d007      	beq.n	800744e <TIM_Base_SetConfig+0xb2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a24      	ldr	r2, [pc, #144]	; (80074d4 <TIM_Base_SetConfig+0x138>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d003      	beq.n	800744e <TIM_Base_SetConfig+0xb2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a23      	ldr	r2, [pc, #140]	; (80074d8 <TIM_Base_SetConfig+0x13c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d108      	bne.n	8007460 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <TIM_Base_SetConfig+0x114>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d003      	beq.n	8007494 <TIM_Base_SetConfig+0xf8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a0c      	ldr	r2, [pc, #48]	; (80074c0 <TIM_Base_SetConfig+0x124>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d103      	bne.n	800749c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	691a      	ldr	r2, [r3, #16]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	615a      	str	r2, [r3, #20]
}
 80074a2:	bf00      	nop
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	40010000 	.word	0x40010000
 80074b4:	40000400 	.word	0x40000400
 80074b8:	40000800 	.word	0x40000800
 80074bc:	40000c00 	.word	0x40000c00
 80074c0:	40010400 	.word	0x40010400
 80074c4:	40014000 	.word	0x40014000
 80074c8:	40014400 	.word	0x40014400
 80074cc:	40014800 	.word	0x40014800
 80074d0:	40001800 	.word	0x40001800
 80074d4:	40001c00 	.word	0x40001c00
 80074d8:	40002000 	.word	0x40002000

080074dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074dc:	b480      	push	{r7}
 80074de:	b087      	sub	sp, #28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	f023 0201 	bic.w	r2, r3, #1
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800750a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0303 	bic.w	r3, r3, #3
 8007512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	4313      	orrs	r3, r2
 800751c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f023 0302 	bic.w	r3, r3, #2
 8007524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4313      	orrs	r3, r2
 800752e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a20      	ldr	r2, [pc, #128]	; (80075b4 <TIM_OC1_SetConfig+0xd8>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d003      	beq.n	8007540 <TIM_OC1_SetConfig+0x64>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a1f      	ldr	r2, [pc, #124]	; (80075b8 <TIM_OC1_SetConfig+0xdc>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d10c      	bne.n	800755a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f023 0308 	bic.w	r3, r3, #8
 8007546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	4313      	orrs	r3, r2
 8007550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f023 0304 	bic.w	r3, r3, #4
 8007558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a15      	ldr	r2, [pc, #84]	; (80075b4 <TIM_OC1_SetConfig+0xd8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d003      	beq.n	800756a <TIM_OC1_SetConfig+0x8e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a14      	ldr	r2, [pc, #80]	; (80075b8 <TIM_OC1_SetConfig+0xdc>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d111      	bne.n	800758e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	621a      	str	r2, [r3, #32]
}
 80075a8:	bf00      	nop
 80075aa:	371c      	adds	r7, #28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	40010000 	.word	0x40010000
 80075b8:	40010400 	.word	0x40010400

080075bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f023 0210 	bic.w	r2, r3, #16
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	021b      	lsls	r3, r3, #8
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f023 0320 	bic.w	r3, r3, #32
 8007606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	011b      	lsls	r3, r3, #4
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	4313      	orrs	r3, r2
 8007612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a22      	ldr	r2, [pc, #136]	; (80076a0 <TIM_OC2_SetConfig+0xe4>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d003      	beq.n	8007624 <TIM_OC2_SetConfig+0x68>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a21      	ldr	r2, [pc, #132]	; (80076a4 <TIM_OC2_SetConfig+0xe8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d10d      	bne.n	8007640 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800762a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	4313      	orrs	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800763e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a17      	ldr	r2, [pc, #92]	; (80076a0 <TIM_OC2_SetConfig+0xe4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_OC2_SetConfig+0x94>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a16      	ldr	r2, [pc, #88]	; (80076a4 <TIM_OC2_SetConfig+0xe8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d113      	bne.n	8007678 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007656:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800765e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	695b      	ldr	r3, [r3, #20]
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	4313      	orrs	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	621a      	str	r2, [r3, #32]
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	40010000 	.word	0x40010000
 80076a4:	40010400 	.word	0x40010400

080076a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0303 	bic.w	r3, r3, #3
 80076de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a21      	ldr	r2, [pc, #132]	; (8007788 <TIM_OC3_SetConfig+0xe0>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d003      	beq.n	800770e <TIM_OC3_SetConfig+0x66>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a20      	ldr	r2, [pc, #128]	; (800778c <TIM_OC3_SetConfig+0xe4>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d10d      	bne.n	800772a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	021b      	lsls	r3, r3, #8
 800771c:	697a      	ldr	r2, [r7, #20]
 800771e:	4313      	orrs	r3, r2
 8007720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a16      	ldr	r2, [pc, #88]	; (8007788 <TIM_OC3_SetConfig+0xe0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d003      	beq.n	800773a <TIM_OC3_SetConfig+0x92>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a15      	ldr	r2, [pc, #84]	; (800778c <TIM_OC3_SetConfig+0xe4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d113      	bne.n	8007762 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007740:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007748:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	011b      	lsls	r3, r3, #4
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	4313      	orrs	r3, r2
 8007754:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	011b      	lsls	r3, r3, #4
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	4313      	orrs	r3, r2
 8007760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	621a      	str	r2, [r3, #32]
}
 800777c:	bf00      	nop
 800777e:	371c      	adds	r7, #28
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	40010000 	.word	0x40010000
 800778c:	40010400 	.word	0x40010400

08007790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007790:	b480      	push	{r7}
 8007792:	b087      	sub	sp, #28
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	021b      	lsls	r3, r3, #8
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	031b      	lsls	r3, r3, #12
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a12      	ldr	r2, [pc, #72]	; (8007834 <TIM_OC4_SetConfig+0xa4>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d003      	beq.n	80077f8 <TIM_OC4_SetConfig+0x68>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a11      	ldr	r2, [pc, #68]	; (8007838 <TIM_OC4_SetConfig+0xa8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d109      	bne.n	800780c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	019b      	lsls	r3, r3, #6
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	4313      	orrs	r3, r2
 800780a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	621a      	str	r2, [r3, #32]
}
 8007826:	bf00      	nop
 8007828:	371c      	adds	r7, #28
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	40010000 	.word	0x40010000
 8007838:	40010400 	.word	0x40010400

0800783c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007858:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	4313      	orrs	r3, r2
 8007862:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	f023 0307 	bic.w	r3, r3, #7
 800786a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	4313      	orrs	r3, r2
 8007874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b70      	cmp	r3, #112	; 0x70
 8007884:	d01a      	beq.n	80078bc <TIM_SlaveTimer_SetConfig+0x80>
 8007886:	2b70      	cmp	r3, #112	; 0x70
 8007888:	d860      	bhi.n	800794c <TIM_SlaveTimer_SetConfig+0x110>
 800788a:	2b60      	cmp	r3, #96	; 0x60
 800788c:	d054      	beq.n	8007938 <TIM_SlaveTimer_SetConfig+0xfc>
 800788e:	2b60      	cmp	r3, #96	; 0x60
 8007890:	d85c      	bhi.n	800794c <TIM_SlaveTimer_SetConfig+0x110>
 8007892:	2b50      	cmp	r3, #80	; 0x50
 8007894:	d046      	beq.n	8007924 <TIM_SlaveTimer_SetConfig+0xe8>
 8007896:	2b50      	cmp	r3, #80	; 0x50
 8007898:	d858      	bhi.n	800794c <TIM_SlaveTimer_SetConfig+0x110>
 800789a:	2b40      	cmp	r3, #64	; 0x40
 800789c:	d019      	beq.n	80078d2 <TIM_SlaveTimer_SetConfig+0x96>
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d854      	bhi.n	800794c <TIM_SlaveTimer_SetConfig+0x110>
 80078a2:	2b30      	cmp	r3, #48	; 0x30
 80078a4:	d055      	beq.n	8007952 <TIM_SlaveTimer_SetConfig+0x116>
 80078a6:	2b30      	cmp	r3, #48	; 0x30
 80078a8:	d850      	bhi.n	800794c <TIM_SlaveTimer_SetConfig+0x110>
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d051      	beq.n	8007952 <TIM_SlaveTimer_SetConfig+0x116>
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	d84c      	bhi.n	800794c <TIM_SlaveTimer_SetConfig+0x110>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d04d      	beq.n	8007952 <TIM_SlaveTimer_SetConfig+0x116>
 80078b6:	2b10      	cmp	r3, #16
 80078b8:	d04b      	beq.n	8007952 <TIM_SlaveTimer_SetConfig+0x116>
 80078ba:	e047      	b.n	800794c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6818      	ldr	r0, [r3, #0]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68d9      	ldr	r1, [r3, #12]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	f000 f9ec 	bl	8007ca8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80078d0:	e040      	b.n	8007954 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b05      	cmp	r3, #5
 80078d8:	d101      	bne.n	80078de <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e03b      	b.n	8007956 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6a1a      	ldr	r2, [r3, #32]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f022 0201 	bic.w	r2, r2, #1
 80078f4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007904:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	4313      	orrs	r3, r2
 8007910:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	621a      	str	r2, [r3, #32]
      break;
 8007922:	e017      	b.n	8007954 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6818      	ldr	r0, [r3, #0]
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	6899      	ldr	r1, [r3, #8]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	461a      	mov	r2, r3
 8007932:	f000 f889 	bl	8007a48 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007936:	e00d      	b.n	8007954 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	6899      	ldr	r1, [r3, #8]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	461a      	mov	r2, r3
 8007946:	f000 f8eb 	bl	8007b20 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800794a:	e003      	b.n	8007954 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	75fb      	strb	r3, [r7, #23]
      break;
 8007950:	e000      	b.n	8007954 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007952:	bf00      	nop
  }

  return status;
 8007954:	7dfb      	ldrb	r3, [r7, #23]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	f023 0201 	bic.w	r2, r3, #1
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	699b      	ldr	r3, [r3, #24]
 800797e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a1b      	ldr	r3, [r3, #32]
 8007984:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	4a28      	ldr	r2, [pc, #160]	; (8007a2c <TIM_TI1_SetConfig+0xcc>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d01b      	beq.n	80079c6 <TIM_TI1_SetConfig+0x66>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007994:	d017      	beq.n	80079c6 <TIM_TI1_SetConfig+0x66>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4a25      	ldr	r2, [pc, #148]	; (8007a30 <TIM_TI1_SetConfig+0xd0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d013      	beq.n	80079c6 <TIM_TI1_SetConfig+0x66>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4a24      	ldr	r2, [pc, #144]	; (8007a34 <TIM_TI1_SetConfig+0xd4>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00f      	beq.n	80079c6 <TIM_TI1_SetConfig+0x66>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4a23      	ldr	r2, [pc, #140]	; (8007a38 <TIM_TI1_SetConfig+0xd8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00b      	beq.n	80079c6 <TIM_TI1_SetConfig+0x66>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4a22      	ldr	r2, [pc, #136]	; (8007a3c <TIM_TI1_SetConfig+0xdc>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d007      	beq.n	80079c6 <TIM_TI1_SetConfig+0x66>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	4a21      	ldr	r2, [pc, #132]	; (8007a40 <TIM_TI1_SetConfig+0xe0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d003      	beq.n	80079c6 <TIM_TI1_SetConfig+0x66>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	4a20      	ldr	r2, [pc, #128]	; (8007a44 <TIM_TI1_SetConfig+0xe4>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d101      	bne.n	80079ca <TIM_TI1_SetConfig+0x6a>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e000      	b.n	80079cc <TIM_TI1_SetConfig+0x6c>
 80079ca:	2300      	movs	r3, #0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d008      	beq.n	80079e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f023 0303 	bic.w	r3, r3, #3
 80079d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4313      	orrs	r3, r2
 80079de:	617b      	str	r3, [r7, #20]
 80079e0:	e003      	b.n	80079ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f043 0301 	orr.w	r3, r3, #1
 80079e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f023 030a 	bic.w	r3, r3, #10
 8007a04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f003 030a 	and.w	r3, r3, #10
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	697a      	ldr	r2, [r7, #20]
 8007a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	621a      	str	r2, [r3, #32]
}
 8007a1e:	bf00      	nop
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	40010000 	.word	0x40010000
 8007a30:	40000400 	.word	0x40000400
 8007a34:	40000800 	.word	0x40000800
 8007a38:	40000c00 	.word	0x40000c00
 8007a3c:	40010400 	.word	0x40010400
 8007a40:	40014000 	.word	0x40014000
 8007a44:	40001800 	.word	0x40001800

08007a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	f023 0201 	bic.w	r2, r3, #1
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f023 030a 	bic.w	r3, r3, #10
 8007a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	621a      	str	r2, [r3, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b087      	sub	sp, #28
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	60f8      	str	r0, [r7, #12]
 8007aae:	60b9      	str	r1, [r7, #8]
 8007ab0:	607a      	str	r2, [r7, #4]
 8007ab2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	f023 0210 	bic.w	r2, r3, #16
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	021b      	lsls	r3, r3, #8
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ae4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	031b      	lsls	r3, r3, #12
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007af8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	621a      	str	r2, [r3, #32]
}
 8007b14:	bf00      	nop
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	f023 0210 	bic.w	r2, r3, #16
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	031b      	lsls	r3, r3, #12
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	011b      	lsls	r3, r3, #4
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	621a      	str	r2, [r3, #32]
}
 8007b74:	bf00      	nop
 8007b76:	371c      	adds	r7, #28
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6a1b      	ldr	r3, [r3, #32]
 8007b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	69db      	ldr	r3, [r3, #28]
 8007b9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6a1b      	ldr	r3, [r3, #32]
 8007ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f023 0303 	bic.w	r3, r3, #3
 8007bac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007bd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	021b      	lsls	r3, r3, #8
 8007bd6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	621a      	str	r2, [r3, #32]
}
 8007bec:	bf00      	nop
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	021b      	lsls	r3, r3, #8
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	031b      	lsls	r3, r3, #12
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	031b      	lsls	r3, r3, #12
 8007c50:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	621a      	str	r2, [r3, #32]
}
 8007c66:	bf00      	nop
 8007c68:	371c      	adds	r7, #28
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b085      	sub	sp, #20
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
 8007c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	f043 0307 	orr.w	r3, r3, #7
 8007c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	609a      	str	r2, [r3, #8]
}
 8007c9c:	bf00      	nop
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	021a      	lsls	r2, r3, #8
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	609a      	str	r2, [r3, #8]
}
 8007cdc:	bf00      	nop
 8007cde:	371c      	adds	r7, #28
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	f003 031f 	and.w	r3, r3, #31
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a1a      	ldr	r2, [r3, #32]
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	43db      	mvns	r3, r3
 8007d0a:	401a      	ands	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a1a      	ldr	r2, [r3, #32]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f003 031f 	and.w	r3, r3, #31
 8007d1a:	6879      	ldr	r1, [r7, #4]
 8007d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d20:	431a      	orrs	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	621a      	str	r2, [r3, #32]
}
 8007d26:	bf00      	nop
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
	...

08007d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d101      	bne.n	8007d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d48:	2302      	movs	r3, #2
 8007d4a:	e05a      	b.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2202      	movs	r2, #2
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a21      	ldr	r2, [pc, #132]	; (8007e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d022      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d98:	d01d      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a1d      	ldr	r2, [pc, #116]	; (8007e14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d018      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a1b      	ldr	r2, [pc, #108]	; (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d013      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a1a      	ldr	r2, [pc, #104]	; (8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00e      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a18      	ldr	r2, [pc, #96]	; (8007e20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d009      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a17      	ldr	r2, [pc, #92]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d004      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a15      	ldr	r2, [pc, #84]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d10c      	bne.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	40010000 	.word	0x40010000
 8007e14:	40000400 	.word	0x40000400
 8007e18:	40000800 	.word	0x40000800
 8007e1c:	40000c00 	.word	0x40000c00
 8007e20:	40010400 	.word	0x40010400
 8007e24:	40014000 	.word	0x40014000
 8007e28:	40001800 	.word	0x40001800

08007e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e03f      	b.n	8007ee6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d106      	bne.n	8007e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7fb f984 	bl	8003188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2224      	movs	r2, #36	; 0x24
 8007e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 f929 	bl	80080f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	691a      	ldr	r2, [r3, #16]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	695a      	ldr	r2, [r3, #20]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b08a      	sub	sp, #40	; 0x28
 8007ef2:	af02      	add	r7, sp, #8
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	603b      	str	r3, [r7, #0]
 8007efa:	4613      	mov	r3, r2
 8007efc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007efe:	2300      	movs	r3, #0
 8007f00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d17c      	bne.n	8008008 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <HAL_UART_Transmit+0x2c>
 8007f14:	88fb      	ldrh	r3, [r7, #6]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e075      	b.n	800800a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d101      	bne.n	8007f2c <HAL_UART_Transmit+0x3e>
 8007f28:	2302      	movs	r3, #2
 8007f2a:	e06e      	b.n	800800a <HAL_UART_Transmit+0x11c>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2221      	movs	r2, #33	; 0x21
 8007f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f42:	f7fb fa93 	bl	800346c <HAL_GetTick>
 8007f46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	88fa      	ldrh	r2, [r7, #6]
 8007f4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	88fa      	ldrh	r2, [r7, #6]
 8007f52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f5c:	d108      	bne.n	8007f70 <HAL_UART_Transmit+0x82>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d104      	bne.n	8007f70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	61bb      	str	r3, [r7, #24]
 8007f6e:	e003      	b.n	8007f78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f80:	e02a      	b.n	8007fd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2180      	movs	r1, #128	; 0x80
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f840 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e036      	b.n	800800a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10b      	bne.n	8007fba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	881b      	ldrh	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	3302      	adds	r3, #2
 8007fb6:	61bb      	str	r3, [r7, #24]
 8007fb8:	e007      	b.n	8007fca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	781a      	ldrb	r2, [r3, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	3b01      	subs	r3, #1
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1cf      	bne.n	8007f82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2140      	movs	r1, #64	; 0x40
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f000 f810 	bl	8008012 <UART_WaitOnFlagUntilTimeout>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007ff8:	2303      	movs	r3, #3
 8007ffa:	e006      	b.n	800800a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2220      	movs	r2, #32
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008004:	2300      	movs	r3, #0
 8008006:	e000      	b.n	800800a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008008:	2302      	movs	r3, #2
  }
}
 800800a:	4618      	mov	r0, r3
 800800c:	3720      	adds	r7, #32
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b090      	sub	sp, #64	; 0x40
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	603b      	str	r3, [r7, #0]
 800801e:	4613      	mov	r3, r2
 8008020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008022:	e050      	b.n	80080c6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802a:	d04c      	beq.n	80080c6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800802c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800802e:	2b00      	cmp	r3, #0
 8008030:	d007      	beq.n	8008042 <UART_WaitOnFlagUntilTimeout+0x30>
 8008032:	f7fb fa1b 	bl	800346c <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800803e:	429a      	cmp	r2, r3
 8008040:	d241      	bcs.n	80080c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	330c      	adds	r3, #12
 8008048:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008058:	63fb      	str	r3, [r7, #60]	; 0x3c
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	330c      	adds	r3, #12
 8008060:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008062:	637a      	str	r2, [r7, #52]	; 0x34
 8008064:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008066:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800806a:	e841 2300 	strex	r3, r2, [r1]
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1e5      	bne.n	8008042 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3314      	adds	r3, #20
 800807c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	e853 3f00 	ldrex	r3, [r3]
 8008084:	613b      	str	r3, [r7, #16]
   return(result);
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f023 0301 	bic.w	r3, r3, #1
 800808c:	63bb      	str	r3, [r7, #56]	; 0x38
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3314      	adds	r3, #20
 8008094:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008096:	623a      	str	r2, [r7, #32]
 8008098:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809a:	69f9      	ldr	r1, [r7, #28]
 800809c:	6a3a      	ldr	r2, [r7, #32]
 800809e:	e841 2300 	strex	r3, r2, [r1]
 80080a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d1e5      	bne.n	8008076 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e00f      	b.n	80080e6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4013      	ands	r3, r2
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	bf0c      	ite	eq
 80080d6:	2301      	moveq	r3, #1
 80080d8:	2300      	movne	r3, #0
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	461a      	mov	r2, r3
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d09f      	beq.n	8008024 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3740      	adds	r7, #64	; 0x40
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080f4:	b0c0      	sub	sp, #256	; 0x100
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810c:	68d9      	ldr	r1, [r3, #12]
 800810e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	ea40 0301 	orr.w	r3, r0, r1
 8008118:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800811a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	431a      	orrs	r2, r3
 8008128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812c:	695b      	ldr	r3, [r3, #20]
 800812e:	431a      	orrs	r2, r3
 8008130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	4313      	orrs	r3, r2
 8008138:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800813c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008148:	f021 010c 	bic.w	r1, r1, #12
 800814c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008156:	430b      	orrs	r3, r1
 8008158:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800815a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	695b      	ldr	r3, [r3, #20]
 8008162:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816a:	6999      	ldr	r1, [r3, #24]
 800816c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	ea40 0301 	orr.w	r3, r0, r1
 8008176:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	4b8f      	ldr	r3, [pc, #572]	; (80083bc <UART_SetConfig+0x2cc>)
 8008180:	429a      	cmp	r2, r3
 8008182:	d005      	beq.n	8008190 <UART_SetConfig+0xa0>
 8008184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	4b8d      	ldr	r3, [pc, #564]	; (80083c0 <UART_SetConfig+0x2d0>)
 800818c:	429a      	cmp	r2, r3
 800818e:	d104      	bne.n	800819a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008190:	f7fc ffba 	bl	8005108 <HAL_RCC_GetPCLK2Freq>
 8008194:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008198:	e003      	b.n	80081a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800819a:	f7fc ffa1 	bl	80050e0 <HAL_RCC_GetPCLK1Freq>
 800819e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081ac:	f040 810c 	bne.w	80083c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081b4:	2200      	movs	r2, #0
 80081b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80081be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80081c2:	4622      	mov	r2, r4
 80081c4:	462b      	mov	r3, r5
 80081c6:	1891      	adds	r1, r2, r2
 80081c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80081ca:	415b      	adcs	r3, r3
 80081cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081d2:	4621      	mov	r1, r4
 80081d4:	eb12 0801 	adds.w	r8, r2, r1
 80081d8:	4629      	mov	r1, r5
 80081da:	eb43 0901 	adc.w	r9, r3, r1
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081f2:	4690      	mov	r8, r2
 80081f4:	4699      	mov	r9, r3
 80081f6:	4623      	mov	r3, r4
 80081f8:	eb18 0303 	adds.w	r3, r8, r3
 80081fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008200:	462b      	mov	r3, r5
 8008202:	eb49 0303 	adc.w	r3, r9, r3
 8008206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800820a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008216:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800821a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800821e:	460b      	mov	r3, r1
 8008220:	18db      	adds	r3, r3, r3
 8008222:	653b      	str	r3, [r7, #80]	; 0x50
 8008224:	4613      	mov	r3, r2
 8008226:	eb42 0303 	adc.w	r3, r2, r3
 800822a:	657b      	str	r3, [r7, #84]	; 0x54
 800822c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008230:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008234:	f7f8 fd28 	bl	8000c88 <__aeabi_uldivmod>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4b61      	ldr	r3, [pc, #388]	; (80083c4 <UART_SetConfig+0x2d4>)
 800823e:	fba3 2302 	umull	r2, r3, r3, r2
 8008242:	095b      	lsrs	r3, r3, #5
 8008244:	011c      	lsls	r4, r3, #4
 8008246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800824a:	2200      	movs	r2, #0
 800824c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008250:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008254:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008258:	4642      	mov	r2, r8
 800825a:	464b      	mov	r3, r9
 800825c:	1891      	adds	r1, r2, r2
 800825e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008260:	415b      	adcs	r3, r3
 8008262:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008264:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008268:	4641      	mov	r1, r8
 800826a:	eb12 0a01 	adds.w	sl, r2, r1
 800826e:	4649      	mov	r1, r9
 8008270:	eb43 0b01 	adc.w	fp, r3, r1
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	f04f 0300 	mov.w	r3, #0
 800827c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008280:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008284:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008288:	4692      	mov	sl, r2
 800828a:	469b      	mov	fp, r3
 800828c:	4643      	mov	r3, r8
 800828e:	eb1a 0303 	adds.w	r3, sl, r3
 8008292:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008296:	464b      	mov	r3, r9
 8008298:	eb4b 0303 	adc.w	r3, fp, r3
 800829c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80082a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80082b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80082b4:	460b      	mov	r3, r1
 80082b6:	18db      	adds	r3, r3, r3
 80082b8:	643b      	str	r3, [r7, #64]	; 0x40
 80082ba:	4613      	mov	r3, r2
 80082bc:	eb42 0303 	adc.w	r3, r2, r3
 80082c0:	647b      	str	r3, [r7, #68]	; 0x44
 80082c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80082ca:	f7f8 fcdd 	bl	8000c88 <__aeabi_uldivmod>
 80082ce:	4602      	mov	r2, r0
 80082d0:	460b      	mov	r3, r1
 80082d2:	4611      	mov	r1, r2
 80082d4:	4b3b      	ldr	r3, [pc, #236]	; (80083c4 <UART_SetConfig+0x2d4>)
 80082d6:	fba3 2301 	umull	r2, r3, r3, r1
 80082da:	095b      	lsrs	r3, r3, #5
 80082dc:	2264      	movs	r2, #100	; 0x64
 80082de:	fb02 f303 	mul.w	r3, r2, r3
 80082e2:	1acb      	subs	r3, r1, r3
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082ea:	4b36      	ldr	r3, [pc, #216]	; (80083c4 <UART_SetConfig+0x2d4>)
 80082ec:	fba3 2302 	umull	r2, r3, r3, r2
 80082f0:	095b      	lsrs	r3, r3, #5
 80082f2:	005b      	lsls	r3, r3, #1
 80082f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082f8:	441c      	add	r4, r3
 80082fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008304:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008308:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800830c:	4642      	mov	r2, r8
 800830e:	464b      	mov	r3, r9
 8008310:	1891      	adds	r1, r2, r2
 8008312:	63b9      	str	r1, [r7, #56]	; 0x38
 8008314:	415b      	adcs	r3, r3
 8008316:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008318:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800831c:	4641      	mov	r1, r8
 800831e:	1851      	adds	r1, r2, r1
 8008320:	6339      	str	r1, [r7, #48]	; 0x30
 8008322:	4649      	mov	r1, r9
 8008324:	414b      	adcs	r3, r1
 8008326:	637b      	str	r3, [r7, #52]	; 0x34
 8008328:	f04f 0200 	mov.w	r2, #0
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008334:	4659      	mov	r1, fp
 8008336:	00cb      	lsls	r3, r1, #3
 8008338:	4651      	mov	r1, sl
 800833a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800833e:	4651      	mov	r1, sl
 8008340:	00ca      	lsls	r2, r1, #3
 8008342:	4610      	mov	r0, r2
 8008344:	4619      	mov	r1, r3
 8008346:	4603      	mov	r3, r0
 8008348:	4642      	mov	r2, r8
 800834a:	189b      	adds	r3, r3, r2
 800834c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008350:	464b      	mov	r3, r9
 8008352:	460a      	mov	r2, r1
 8008354:	eb42 0303 	adc.w	r3, r2, r3
 8008358:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800835c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008368:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800836c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008370:	460b      	mov	r3, r1
 8008372:	18db      	adds	r3, r3, r3
 8008374:	62bb      	str	r3, [r7, #40]	; 0x28
 8008376:	4613      	mov	r3, r2
 8008378:	eb42 0303 	adc.w	r3, r2, r3
 800837c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800837e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008382:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008386:	f7f8 fc7f 	bl	8000c88 <__aeabi_uldivmod>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	4b0d      	ldr	r3, [pc, #52]	; (80083c4 <UART_SetConfig+0x2d4>)
 8008390:	fba3 1302 	umull	r1, r3, r3, r2
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	2164      	movs	r1, #100	; 0x64
 8008398:	fb01 f303 	mul.w	r3, r1, r3
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	3332      	adds	r3, #50	; 0x32
 80083a2:	4a08      	ldr	r2, [pc, #32]	; (80083c4 <UART_SetConfig+0x2d4>)
 80083a4:	fba2 2303 	umull	r2, r3, r2, r3
 80083a8:	095b      	lsrs	r3, r3, #5
 80083aa:	f003 0207 	and.w	r2, r3, #7
 80083ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4422      	add	r2, r4
 80083b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083b8:	e105      	b.n	80085c6 <UART_SetConfig+0x4d6>
 80083ba:	bf00      	nop
 80083bc:	40011000 	.word	0x40011000
 80083c0:	40011400 	.word	0x40011400
 80083c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083cc:	2200      	movs	r2, #0
 80083ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083da:	4642      	mov	r2, r8
 80083dc:	464b      	mov	r3, r9
 80083de:	1891      	adds	r1, r2, r2
 80083e0:	6239      	str	r1, [r7, #32]
 80083e2:	415b      	adcs	r3, r3
 80083e4:	627b      	str	r3, [r7, #36]	; 0x24
 80083e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083ea:	4641      	mov	r1, r8
 80083ec:	1854      	adds	r4, r2, r1
 80083ee:	4649      	mov	r1, r9
 80083f0:	eb43 0501 	adc.w	r5, r3, r1
 80083f4:	f04f 0200 	mov.w	r2, #0
 80083f8:	f04f 0300 	mov.w	r3, #0
 80083fc:	00eb      	lsls	r3, r5, #3
 80083fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008402:	00e2      	lsls	r2, r4, #3
 8008404:	4614      	mov	r4, r2
 8008406:	461d      	mov	r5, r3
 8008408:	4643      	mov	r3, r8
 800840a:	18e3      	adds	r3, r4, r3
 800840c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008410:	464b      	mov	r3, r9
 8008412:	eb45 0303 	adc.w	r3, r5, r3
 8008416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800841a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008426:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800842a:	f04f 0200 	mov.w	r2, #0
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008436:	4629      	mov	r1, r5
 8008438:	008b      	lsls	r3, r1, #2
 800843a:	4621      	mov	r1, r4
 800843c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008440:	4621      	mov	r1, r4
 8008442:	008a      	lsls	r2, r1, #2
 8008444:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008448:	f7f8 fc1e 	bl	8000c88 <__aeabi_uldivmod>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4b60      	ldr	r3, [pc, #384]	; (80085d4 <UART_SetConfig+0x4e4>)
 8008452:	fba3 2302 	umull	r2, r3, r3, r2
 8008456:	095b      	lsrs	r3, r3, #5
 8008458:	011c      	lsls	r4, r3, #4
 800845a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800845e:	2200      	movs	r2, #0
 8008460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008464:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008468:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800846c:	4642      	mov	r2, r8
 800846e:	464b      	mov	r3, r9
 8008470:	1891      	adds	r1, r2, r2
 8008472:	61b9      	str	r1, [r7, #24]
 8008474:	415b      	adcs	r3, r3
 8008476:	61fb      	str	r3, [r7, #28]
 8008478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800847c:	4641      	mov	r1, r8
 800847e:	1851      	adds	r1, r2, r1
 8008480:	6139      	str	r1, [r7, #16]
 8008482:	4649      	mov	r1, r9
 8008484:	414b      	adcs	r3, r1
 8008486:	617b      	str	r3, [r7, #20]
 8008488:	f04f 0200 	mov.w	r2, #0
 800848c:	f04f 0300 	mov.w	r3, #0
 8008490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008494:	4659      	mov	r1, fp
 8008496:	00cb      	lsls	r3, r1, #3
 8008498:	4651      	mov	r1, sl
 800849a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800849e:	4651      	mov	r1, sl
 80084a0:	00ca      	lsls	r2, r1, #3
 80084a2:	4610      	mov	r0, r2
 80084a4:	4619      	mov	r1, r3
 80084a6:	4603      	mov	r3, r0
 80084a8:	4642      	mov	r2, r8
 80084aa:	189b      	adds	r3, r3, r2
 80084ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084b0:	464b      	mov	r3, r9
 80084b2:	460a      	mov	r2, r1
 80084b4:	eb42 0303 	adc.w	r3, r2, r3
 80084b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80084c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80084c8:	f04f 0200 	mov.w	r2, #0
 80084cc:	f04f 0300 	mov.w	r3, #0
 80084d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084d4:	4649      	mov	r1, r9
 80084d6:	008b      	lsls	r3, r1, #2
 80084d8:	4641      	mov	r1, r8
 80084da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084de:	4641      	mov	r1, r8
 80084e0:	008a      	lsls	r2, r1, #2
 80084e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084e6:	f7f8 fbcf 	bl	8000c88 <__aeabi_uldivmod>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	4b39      	ldr	r3, [pc, #228]	; (80085d4 <UART_SetConfig+0x4e4>)
 80084f0:	fba3 1302 	umull	r1, r3, r3, r2
 80084f4:	095b      	lsrs	r3, r3, #5
 80084f6:	2164      	movs	r1, #100	; 0x64
 80084f8:	fb01 f303 	mul.w	r3, r1, r3
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	011b      	lsls	r3, r3, #4
 8008500:	3332      	adds	r3, #50	; 0x32
 8008502:	4a34      	ldr	r2, [pc, #208]	; (80085d4 <UART_SetConfig+0x4e4>)
 8008504:	fba2 2303 	umull	r2, r3, r2, r3
 8008508:	095b      	lsrs	r3, r3, #5
 800850a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800850e:	441c      	add	r4, r3
 8008510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008514:	2200      	movs	r2, #0
 8008516:	673b      	str	r3, [r7, #112]	; 0x70
 8008518:	677a      	str	r2, [r7, #116]	; 0x74
 800851a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800851e:	4642      	mov	r2, r8
 8008520:	464b      	mov	r3, r9
 8008522:	1891      	adds	r1, r2, r2
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	415b      	adcs	r3, r3
 8008528:	60fb      	str	r3, [r7, #12]
 800852a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800852e:	4641      	mov	r1, r8
 8008530:	1851      	adds	r1, r2, r1
 8008532:	6039      	str	r1, [r7, #0]
 8008534:	4649      	mov	r1, r9
 8008536:	414b      	adcs	r3, r1
 8008538:	607b      	str	r3, [r7, #4]
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008546:	4659      	mov	r1, fp
 8008548:	00cb      	lsls	r3, r1, #3
 800854a:	4651      	mov	r1, sl
 800854c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008550:	4651      	mov	r1, sl
 8008552:	00ca      	lsls	r2, r1, #3
 8008554:	4610      	mov	r0, r2
 8008556:	4619      	mov	r1, r3
 8008558:	4603      	mov	r3, r0
 800855a:	4642      	mov	r2, r8
 800855c:	189b      	adds	r3, r3, r2
 800855e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008560:	464b      	mov	r3, r9
 8008562:	460a      	mov	r2, r1
 8008564:	eb42 0303 	adc.w	r3, r2, r3
 8008568:	66fb      	str	r3, [r7, #108]	; 0x6c
 800856a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	663b      	str	r3, [r7, #96]	; 0x60
 8008574:	667a      	str	r2, [r7, #100]	; 0x64
 8008576:	f04f 0200 	mov.w	r2, #0
 800857a:	f04f 0300 	mov.w	r3, #0
 800857e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008582:	4649      	mov	r1, r9
 8008584:	008b      	lsls	r3, r1, #2
 8008586:	4641      	mov	r1, r8
 8008588:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800858c:	4641      	mov	r1, r8
 800858e:	008a      	lsls	r2, r1, #2
 8008590:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008594:	f7f8 fb78 	bl	8000c88 <__aeabi_uldivmod>
 8008598:	4602      	mov	r2, r0
 800859a:	460b      	mov	r3, r1
 800859c:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <UART_SetConfig+0x4e4>)
 800859e:	fba3 1302 	umull	r1, r3, r3, r2
 80085a2:	095b      	lsrs	r3, r3, #5
 80085a4:	2164      	movs	r1, #100	; 0x64
 80085a6:	fb01 f303 	mul.w	r3, r1, r3
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	011b      	lsls	r3, r3, #4
 80085ae:	3332      	adds	r3, #50	; 0x32
 80085b0:	4a08      	ldr	r2, [pc, #32]	; (80085d4 <UART_SetConfig+0x4e4>)
 80085b2:	fba2 2303 	umull	r2, r3, r2, r3
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	f003 020f 	and.w	r2, r3, #15
 80085bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4422      	add	r2, r4
 80085c4:	609a      	str	r2, [r3, #8]
}
 80085c6:	bf00      	nop
 80085c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80085cc:	46bd      	mov	sp, r7
 80085ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085d2:	bf00      	nop
 80085d4:	51eb851f 	.word	0x51eb851f

080085d8 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 80085e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d105      	bne.n	80085f8 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 80085ec:	2101      	movs	r1, #1
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f001 f85c 	bl	80096ac <VL53L1_data_init>
 80085f4:	4603      	mov	r3, r0
 80085f6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 80085f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d103      	bne.n	8008608 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008608:	2300      	movs	r3, #0
 800860a:	73bb      	strb	r3, [r7, #14]
 800860c:	e012      	b.n	8008634 <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 800860e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d112      	bne.n	800863c <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8008616:	7bbb      	ldrb	r3, [r7, #14]
 8008618:	b29b      	uxth	r3, r3
 800861a:	2201      	movs	r2, #1
 800861c:	4619      	mov	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fbd1 	bl	8008dc6 <VL53L1_SetLimitCheckEnable>
 8008624:	4603      	mov	r3, r0
 8008626:	461a      	mov	r2, r3
 8008628:	7bfb      	ldrb	r3, [r7, #15]
 800862a:	4313      	orrs	r3, r2
 800862c:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800862e:	7bbb      	ldrb	r3, [r7, #14]
 8008630:	3301      	adds	r3, #1
 8008632:	73bb      	strb	r3, [r7, #14]
 8008634:	7bbb      	ldrb	r3, [r7, #14]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d9e9      	bls.n	800860e <VL53L1_DataInit+0x36>
 800863a:	e000      	b.n	800863e <VL53L1_DataInit+0x66>
		else
			break;
 800863c:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 800863e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b084      	sub	sp, #16
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008652:	2300      	movs	r3, #0
 8008654:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2203      	movs	r2, #3
 800865a:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 800865e:	2320      	movs	r3, #32
 8008660:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	7bba      	ldrb	r2, [r7, #14]
 8008666:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8008668:	2108      	movs	r1, #8
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f8f7 	bl	800885e <VL53L1_SetPresetMode>
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2208      	movs	r2, #8
 8008678:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 800867c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8008694:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f005 f89f 	bl	800d7dc <VL53L1_poll_for_boot_completion>
 800869e:	4603      	mov	r3, r0
 80086a0:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 80086a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
	...

080086b0 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	4603      	mov	r3, r0
 80086b8:	603a      	str	r2, [r7, #0]
 80086ba:	71fb      	strb	r3, [r7, #7]
 80086bc:	460b      	mov	r3, r1
 80086be:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80086c0:	2300      	movs	r3, #0
 80086c2:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 80086c4:	4a2b      	ldr	r2, [pc, #172]	; (8008774 <ComputeDevicePresetMode+0xc4>)
 80086c6:	f107 0310 	add.w	r3, r7, #16
 80086ca:	6812      	ldr	r2, [r2, #0]
 80086cc:	4611      	mov	r1, r2
 80086ce:	8019      	strh	r1, [r3, #0]
 80086d0:	3302      	adds	r3, #2
 80086d2:	0c12      	lsrs	r2, r2, #16
 80086d4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 80086d6:	4a28      	ldr	r2, [pc, #160]	; (8008778 <ComputeDevicePresetMode+0xc8>)
 80086d8:	f107 030c 	add.w	r3, r7, #12
 80086dc:	6812      	ldr	r2, [r2, #0]
 80086de:	4611      	mov	r1, r2
 80086e0:	8019      	strh	r1, [r3, #0]
 80086e2:	3302      	adds	r3, #2
 80086e4:	0c12      	lsrs	r2, r2, #16
 80086e6:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80086e8:	4a24      	ldr	r2, [pc, #144]	; (800877c <ComputeDevicePresetMode+0xcc>)
 80086ea:	f107 0308 	add.w	r3, r7, #8
 80086ee:	6812      	ldr	r2, [r2, #0]
 80086f0:	4611      	mov	r1, r2
 80086f2:	8019      	strh	r1, [r3, #0]
 80086f4:	3302      	adds	r3, #2
 80086f6:	0c12      	lsrs	r2, r2, #16
 80086f8:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2201      	movs	r2, #1
 80086fe:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8008700:	79bb      	ldrb	r3, [r7, #6]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d002      	beq.n	800870c <ComputeDevicePresetMode+0x5c>
 8008706:	2b02      	cmp	r3, #2
 8008708:	d003      	beq.n	8008712 <ComputeDevicePresetMode+0x62>
 800870a:	e005      	b.n	8008718 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 800870c:	2300      	movs	r3, #0
 800870e:	75bb      	strb	r3, [r7, #22]
		break;
 8008710:	e004      	b.n	800871c <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8008712:	2301      	movs	r3, #1
 8008714:	75bb      	strb	r3, [r7, #22]
		break;
 8008716:	e001      	b.n	800871c <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8008718:	2302      	movs	r3, #2
 800871a:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	2b08      	cmp	r3, #8
 8008720:	d015      	beq.n	800874e <ComputeDevicePresetMode+0x9e>
 8008722:	2b08      	cmp	r3, #8
 8008724:	dc1b      	bgt.n	800875e <ComputeDevicePresetMode+0xae>
 8008726:	2b03      	cmp	r3, #3
 8008728:	d009      	beq.n	800873e <ComputeDevicePresetMode+0x8e>
 800872a:	2b04      	cmp	r3, #4
 800872c:	d117      	bne.n	800875e <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 800872e:	7dbb      	ldrb	r3, [r7, #22]
 8008730:	3318      	adds	r3, #24
 8008732:	443b      	add	r3, r7
 8008734:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	701a      	strb	r2, [r3, #0]
		break;
 800873c:	e011      	b.n	8008762 <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 800873e:	7dbb      	ldrb	r3, [r7, #22]
 8008740:	3318      	adds	r3, #24
 8008742:	443b      	add	r3, r7
 8008744:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	701a      	strb	r2, [r3, #0]
		break;
 800874c:	e009      	b.n	8008762 <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 800874e:	7dbb      	ldrb	r3, [r7, #22]
 8008750:	3318      	adds	r3, #24
 8008752:	443b      	add	r3, r7
 8008754:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	701a      	strb	r2, [r3, #0]
		break;
 800875c:	e001      	b.n	8008762 <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 800875e:	23f8      	movs	r3, #248	; 0xf8
 8008760:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8008762:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008766:	4618      	mov	r0, r3
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	08012088 	.word	0x08012088
 8008778:	0801208c 	.word	0x0801208c
 800877c:	08012090 	.word	0x08012090

08008780 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8008780:	b5b0      	push	{r4, r5, r7, lr}
 8008782:	b08e      	sub	sp, #56	; 0x38
 8008784:	af04      	add	r7, sp, #16
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	607b      	str	r3, [r7, #4]
 800878a:	460b      	mov	r3, r1
 800878c:	72fb      	strb	r3, [r7, #11]
 800878e:	4613      	mov	r3, r2
 8008790:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008792:	2300      	movs	r3, #0
 8008794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 80087a4:	2300      	movs	r3, #0
 80087a6:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80087a8:	7afb      	ldrb	r3, [r7, #11]
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d002      	beq.n	80087b4 <SetPresetMode+0x34>
 80087ae:	7afb      	ldrb	r3, [r7, #11]
 80087b0:	2b08      	cmp	r3, #8
 80087b2:	d103      	bne.n	80087bc <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80087b4:	2340      	movs	r3, #64	; 0x40
 80087b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80087ba:	e002      	b.n	80087c2 <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80087bc:	2320      	movs	r3, #32
 80087be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 80087c2:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80087c6:	7ab9      	ldrb	r1, [r7, #10]
 80087c8:	7afb      	ldrb	r3, [r7, #11]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff ff70 	bl	80086b0 <ComputeDevicePresetMode>
 80087d0:	4603      	mov	r3, r0
 80087d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 80087d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d112      	bne.n	8008804 <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80087de:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80087e2:	f107 001c 	add.w	r0, r7, #28
 80087e6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80087ea:	f107 0314 	add.w	r3, r7, #20
 80087ee:	9301      	str	r3, [sp, #4]
 80087f0:	f107 0318 	add.w	r3, r7, #24
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	4603      	mov	r3, r0
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f001 fa17 	bl	8009c2c <VL53L1_get_preset_mode_timing_cfg>
 80087fe:	4603      	mov	r3, r0
 8008800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8008804:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008808:	2b00      	cmp	r3, #0
 800880a:	d112      	bne.n	8008832 <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 800880c:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8008810:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8008812:	69fd      	ldr	r5, [r7, #28]
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	6879      	ldr	r1, [r7, #4]
 800881a:	9102      	str	r1, [sp, #8]
 800881c:	9201      	str	r2, [sp, #4]
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	462b      	mov	r3, r5
 8008822:	4622      	mov	r2, r4
 8008824:	4601      	mov	r1, r0
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f001 faaa 	bl	8009d80 <VL53L1_set_preset_mode>
 800882c:	4603      	mov	r3, r0
 800882e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8008832:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008836:	2b00      	cmp	r3, #0
 8008838:	d103      	bne.n	8008842 <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008840:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 8008842:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008846:	2b00      	cmp	r3, #0
 8008848:	d103      	bne.n	8008852 <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	7afa      	ldrb	r2, [r7, #11]
 800884e:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8008852:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008856:	4618      	mov	r0, r3
 8008858:	3728      	adds	r7, #40	; 0x28
 800885a:	46bd      	mov	sp, r7
 800885c:	bdb0      	pop	{r4, r5, r7, pc}

0800885e <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800886a:	2300      	movs	r3, #0
 800886c:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 800886e:	2303      	movs	r3, #3
 8008870:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f003 fdb4 	bl	800c3e0 <VL53L1_low_power_auto_data_init>
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 800887c:	7bba      	ldrb	r2, [r7, #14]
 800887e:	78f9      	ldrb	r1, [r7, #3]
 8008880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff ff7b 	bl	8008780 <SetPresetMode>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 800888e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d117      	bne.n	80088c6 <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8008896:	78fb      	ldrb	r3, [r7, #3]
 8008898:	2b04      	cmp	r3, #4
 800889a:	d005      	beq.n	80088a8 <VL53L1_SetPresetMode+0x4a>
 800889c:	78fb      	ldrb	r3, [r7, #3]
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d002      	beq.n	80088a8 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	2b08      	cmp	r3, #8
 80088a6:	d107      	bne.n	80088b8 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80088a8:	f24a 0128 	movw	r1, #41000	; 0xa028
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f891 	bl	80089d4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73fb      	strb	r3, [r7, #15]
 80088b6:	e006      	b.n	80088c6 <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80088b8:	f248 2135 	movw	r1, #33333	; 0x8235
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f889 	bl	80089d4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80088c2:	4603      	mov	r3, r0
 80088c4:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80088c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 80088ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa0a 	bl	8008cec <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80088dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b088      	sub	sp, #32
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80088f4:	2300      	movs	r3, #0
 80088f6:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 80088f8:	2300      	movs	r3, #0
 80088fa:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80088fc:	2300      	movs	r3, #0
 80088fe:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800890a:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 800890c:	78fb      	ldrb	r3, [r7, #3]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d008      	beq.n	8008924 <VL53L1_SetDistanceMode+0x3c>
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	2b02      	cmp	r3, #2
 8008916:	d005      	beq.n	8008924 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8008918:	78fb      	ldrb	r3, [r7, #3]
 800891a:	2b03      	cmp	r3, #3
 800891c:	d002      	beq.n	8008924 <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 800891e:	f06f 0303 	mvn.w	r3, #3
 8008922:	e052      	b.n	80089ca <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 8008924:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d107      	bne.n	800893c <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 800892c:	f107 0308 	add.w	r3, r7, #8
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f001 f923 	bl	8009b7e <VL53L1_get_user_zone>
 8008938:	4603      	mov	r3, r0
 800893a:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	695b      	ldr	r3, [r3, #20]
 8008940:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8008942:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10a      	bne.n	8008960 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 800894a:	f107 0314 	add.w	r3, r7, #20
 800894e:	f107 0210 	add.w	r2, r7, #16
 8008952:	f107 010c 	add.w	r1, r7, #12
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 f84c 	bl	80099f4 <VL53L1_get_timeouts_us>
 800895c:	4603      	mov	r3, r0
 800895e:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8008960:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d107      	bne.n	8008978 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 8008968:	78fa      	ldrb	r2, [r7, #3]
 800896a:	7fb9      	ldrb	r1, [r7, #30]
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff ff06 	bl	8008780 <SetPresetMode>
 8008974:	4603      	mov	r3, r0
 8008976:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8008978:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d103      	bne.n	8008988 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	78fa      	ldrb	r2, [r7, #3]
 8008984:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8008988:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10e      	bne.n	80089ae <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8008990:	68f9      	ldr	r1, [r7, #12]
 8008992:	693a      	ldr	r2, [r7, #16]
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fff4 	bl	8009984 <VL53L1_set_timeouts_us>
 800899c:	4603      	mov	r3, r0
 800899e:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 80089a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d102      	bne.n	80089ae <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 80089ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d107      	bne.n	80089c6 <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 80089b6:	f107 0308 	add.w	r3, r7, #8
 80089ba:	4619      	mov	r1, r3
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f001 f8bb 	bl	8009b38 <VL53L1_set_user_zone>
 80089c2:	4603      	mov	r3, r0
 80089c4:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 80089c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3720      	adds	r7, #32
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08c      	sub	sp, #48	; 0x30
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80089de:	2300      	movs	r3, #0
 80089e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 80089f4:	2300      	movs	r3, #0
 80089f6:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80089f8:	4b64      	ldr	r3, [pc, #400]	; (8008b8c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 80089fa:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	4a64      	ldr	r2, [pc, #400]	; (8008b90 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d902      	bls.n	8008a0a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008a04:	23fc      	movs	r3, #252	; 0xfc
 8008a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8008a0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d109      	bne.n	8008a26 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008a12:	f107 031a 	add.w	r3, r7, #26
 8008a16:	461a      	mov	r2, r3
 8008a18:	2105      	movs	r1, #5
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa8d 	bl	8008f3a <VL53L1_GetSequenceStepEnable>
 8008a20:	4603      	mov	r3, r0
 8008a22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8008a26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d109      	bne.n	8008a42 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008a2e:	f107 0319 	add.w	r3, r7, #25
 8008a32:	461a      	mov	r2, r3
 8008a34:	2106      	movs	r1, #6
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fa7f 	bl	8008f3a <VL53L1_GetSequenceStepEnable>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8008a42:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8008a4a:	f107 0314 	add.w	r3, r7, #20
 8008a4e:	f107 0210 	add.w	r2, r7, #16
 8008a52:	f107 010c 	add.w	r1, r7, #12
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 ffcc 	bl	80099f4 <VL53L1_get_timeouts_us>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8008a62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f040 8081 	bne.w	8008b6e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8008a72:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8008a7c:	7efb      	ldrb	r3, [r7, #27]
 8008a7e:	2b08      	cmp	r3, #8
 8008a80:	d026      	beq.n	8008ad0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 8008a82:	2b08      	cmp	r3, #8
 8008a84:	dc43      	bgt.n	8008b0e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	d00f      	beq.n	8008aaa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 8008a8a:	2b04      	cmp	r3, #4
 8008a8c:	d13f      	bne.n	8008b0e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008a8e:	7ebb      	ldrb	r3, [r7, #26]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d002      	beq.n	8008a9a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 8008a94:	7e7b      	ldrb	r3, [r7, #25]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d103      	bne.n	8008aa2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 8008a9a:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8008aa0:	e038      	b.n	8008b14 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 8008aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008aa6:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008aa8:	e034      	b.n	8008b14 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	005b      	lsls	r3, r3, #1
 8008aae:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008ab0:	7ebb      	ldrb	r3, [r7, #26]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d002      	beq.n	8008abc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8008ab6:	7e7b      	ldrb	r3, [r7, #25]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d103      	bne.n	8008ac4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8008abc:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8008ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ac2:	e002      	b.n	8008aca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 8008ac4:	f245 4360 	movw	r3, #21600	; 0x5460
 8008ac8:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8008aca:	2302      	movs	r3, #2
 8008acc:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8008ace:	e021      	b.n	8008b14 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8008ad6:	23f5      	movs	r3, #245	; 0xf5
 8008ad8:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8008ada:	f107 0308 	add.w	r3, r7, #8
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f248 0136 	movw	r1, #32822	; 0x8036
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 fffb 	bl	800aae0 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	dd07      	ble.n	8008b00 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	22f5      	movs	r2, #245	; 0xf5
 8008af4:	fb02 f303 	mul.w	r3, r2, r3
 8008af8:	461a      	mov	r2, r3
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	4413      	add	r3, r2
 8008afe:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8008b08:	2302      	movs	r3, #2
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8008b0c:	e002      	b.n	8008b14 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008b0e:	23f8      	movs	r3, #248	; 0xf8
 8008b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8008b14:	683a      	ldr	r2, [r7, #0]
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d803      	bhi.n	8008b24 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8008b1c:	23fc      	movs	r3, #252	; 0xfc
 8008b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b22:	e003      	b.n	8008b2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8008b24:	683a      	ldr	r2, [r7, #0]
 8008b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b28:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8008b2a:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8008b2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d11c      	bne.n	8008b6e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	69fa      	ldr	r2, [r7, #28]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d203      	bcs.n	8008b44 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8008b3c:	23fc      	movs	r3, #252	; 0xfc
 8008b3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b42:	e00d      	b.n	8008b60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 8008b44:	697a      	ldr	r2, [r7, #20]
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b4c:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8008b4e:	68f9      	ldr	r1, [r7, #12]
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 ff15 	bl	8009984 <VL53L1_set_timeouts_us>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8008b60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d102      	bne.n	8008b6e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8008b6e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d103      	bne.n	8008b7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	683a      	ldr	r2, [r7, #0]
 8008b7a:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3730      	adds	r7, #48	; 0x30
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
 8008b8a:	bf00      	nop
 8008b8c:	00086470 	.word	0x00086470
 8008b90:	00989680 	.word	0x00989680

08008b94 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b08c      	sub	sp, #48	; 0x30
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8008bc2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d109      	bne.n	8008bde <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008bca:	f107 031b 	add.w	r3, r7, #27
 8008bce:	461a      	mov	r2, r3
 8008bd0:	2105      	movs	r1, #5
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f9b1 	bl	8008f3a <VL53L1_GetSequenceStepEnable>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8008bde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d109      	bne.n	8008bfa <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008be6:	f107 031a 	add.w	r3, r7, #26
 8008bea:	461a      	mov	r2, r3
 8008bec:	2106      	movs	r1, #6
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f9a3 	bl	8008f3a <VL53L1_GetSequenceStepEnable>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8008bfa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10b      	bne.n	8008c1a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8008c02:	f107 0310 	add.w	r3, r7, #16
 8008c06:	f107 0214 	add.w	r2, r7, #20
 8008c0a:	f107 010c 	add.w	r1, r7, #12
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fef0 	bl	80099f4 <VL53L1_get_timeouts_us>
 8008c14:	4603      	mov	r3, r0
 8008c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8008c1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d156      	bne.n	8008cd0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8008c28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8008c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	d02a      	beq.n	8008c8a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	dc47      	bgt.n	8008cc8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 8008c38:	2b03      	cmp	r3, #3
 8008c3a:	d012      	beq.n	8008c62 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8008c3c:	2b04      	cmp	r3, #4
 8008c3e:	d143      	bne.n	8008cc8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008c40:	7efb      	ldrb	r3, [r7, #27]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d002      	beq.n	8008c4c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 8008c46:	7ebb      	ldrb	r3, [r7, #26]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d105      	bne.n	8008c58 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008c52:	3308      	adds	r3, #8
 8008c54:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8008c56:	e03c      	b.n	8008cd2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008c5e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008c60:	e037      	b.n	8008cd2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008c62:	7efb      	ldrb	r3, [r7, #27]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d002      	beq.n	8008c6e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8008c68:	7ebb      	ldrb	r3, [r7, #26]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d106      	bne.n	8008c7c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8008c74:	3334      	adds	r3, #52	; 0x34
 8008c76:	005b      	lsls	r3, r3, #1
 8008c78:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8008c7a:	e02a      	b.n	8008cd2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8008c82:	3330      	adds	r3, #48	; 0x30
 8008c84:	005b      	lsls	r3, r3, #1
 8008c86:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008c88:	e023      	b.n	8008cd2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8008c8a:	23f5      	movs	r3, #245	; 0xf5
 8008c8c:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8008c8e:	f107 0308 	add.w	r3, r7, #8
 8008c92:	461a      	mov	r2, r3
 8008c94:	f248 0136 	movw	r1, #32822	; 0x8036
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f001 ff21 	bl	800aae0 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	dd07      	ble.n	8008cb4 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	22f5      	movs	r2, #245	; 0xf5
 8008ca8:	fb02 f303 	mul.w	r3, r2, r3
 8008cac:	461a      	mov	r2, r3
 8008cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb0:	4413      	add	r3, r2
 8008cb2:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8008cba:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	69fa      	ldr	r2, [r7, #28]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008cc6:	e004      	b.n	8008cd2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008cc8:	23f8      	movs	r3, #248	; 0xf8
 8008cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008cce:	e000      	b.n	8008cd2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 8008cd0:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 8008cd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d102      	bne.n	8008ce0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cde:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008ce0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3730      	adds	r7, #48	; 0x30
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	019b      	lsls	r3, r3, #6
 8008d02:	4a09      	ldr	r2, [pc, #36]	; (8008d28 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8008d04:	fba2 2303 	umull	r2, r3, r2, r3
 8008d08:	099b      	lsrs	r3, r3, #6
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8008d10:	68b9      	ldr	r1, [r7, #8]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fde7 	bl	80098e6 <VL53L1_set_inter_measurement_period_ms>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8008d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	10624dd3 	.word	0x10624dd3

08008d2c <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008d36:	2300      	movs	r3, #0
 8008d38:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8008d3a:	f107 0308 	add.w	r3, r7, #8
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fdf9 	bl	8009938 <VL53L1_get_inter_measurement_period_ms>
 8008d46:	4603      	mov	r3, r0
 8008d48:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	019b      	lsls	r3, r3, #6
 8008d50:	4907      	ldr	r1, [pc, #28]	; (8008d70 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8008d52:	fba1 1303 	umull	r1, r3, r1, r3
 8008d56:	099b      	lsrs	r3, r3, #6
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8008d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	10624dd3 	.word	0x10624dd3

08008d74 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008d82:	2300      	movs	r3, #0
 8008d84:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008d86:	897b      	ldrh	r3, [r7, #10]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <SetLimitValue+0x1e>
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d009      	beq.n	8008da4 <SetLimitValue+0x30>
 8008d90:	e011      	b.n	8008db6 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	0b9b      	lsrs	r3, r3, #14
 8008d96:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8008d98:	8abb      	ldrh	r3, [r7, #20]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f001 f97b 	bl	800a098 <VL53L1_set_lite_sigma_threshold>
		break;
 8008da2:	e00a      	b.n	8008dba <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	0a5b      	lsrs	r3, r3, #9
 8008da8:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8008daa:	8abb      	ldrh	r3, [r7, #20]
 8008dac:	4619      	mov	r1, r3
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f001 f99e 	bl	800a0f0 <VL53L1_set_lite_min_count_rate>
		break;
 8008db4:	e001      	b.n	8008dba <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008db6:	23fc      	movs	r3, #252	; 0xfc
 8008db8:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	460b      	mov	r3, r1
 8008dd0:	807b      	strh	r3, [r7, #2]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008dde:	887b      	ldrh	r3, [r7, #2]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d902      	bls.n	8008dea <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008de4:	23fc      	movs	r3, #252	; 0xfc
 8008de6:	73fb      	strb	r3, [r7, #15]
 8008de8:	e014      	b.n	8008e14 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8008dea:	787b      	ldrb	r3, [r7, #1]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d102      	bne.n	8008df6 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	60bb      	str	r3, [r7, #8]
 8008df4:	e006      	b.n	8008e04 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008df6:	887b      	ldrh	r3, [r7, #2]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	33e0      	adds	r3, #224	; 0xe0
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8008e04:	887b      	ldrh	r3, [r7, #2]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	4619      	mov	r1, r3
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7ff ffb2 	bl	8008d74 <SetLimitValue>
 8008e10:	4603      	mov	r3, r0
 8008e12:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8008e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10c      	bne.n	8008e36 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008e1c:	787b      	ldrb	r3, [r7, #1]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	bf14      	ite	ne
 8008e22:	2301      	movne	r3, #1
 8008e24:	2300      	moveq	r3, #0
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	887b      	ldrh	r3, [r7, #2]
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	4413      	add	r3, r2
 8008e30:	460a      	mov	r2, r1
 8008e32:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8008e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b087      	sub	sp, #28
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	60f8      	str	r0, [r7, #12]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	607a      	str	r2, [r7, #4]
 8008e4e:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008e50:	2300      	movs	r3, #0
 8008e52:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008e54:	897b      	ldrh	r3, [r7, #10]
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d905      	bls.n	8008e66 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008e5a:	23fc      	movs	r3, #252	; 0xfc
 8008e5c:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	701a      	strb	r2, [r3, #0]
 8008e64:	e008      	b.n	8008e78 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008e66:	897b      	ldrh	r3, [r7, #10]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8008e70:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	7dba      	ldrb	r2, [r7, #22]
 8008e76:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	371c      	adds	r7, #28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b088      	sub	sp, #32
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	460b      	mov	r3, r1
 8008e92:	607a      	str	r2, [r7, #4]
 8008e94:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008e9e:	897b      	ldrh	r3, [r7, #10]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <VL53L1_GetLimitCheckValue+0x22>
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d00c      	beq.n	8008ec2 <VL53L1_GetLimitCheckValue+0x3a>
 8008ea8:	e017      	b.n	8008eda <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8008eaa:	f107 0314 	add.w	r3, r7, #20
 8008eae:	4619      	mov	r1, r3
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f001 f8db 	bl	800a06c <VL53L1_get_lite_sigma_threshold>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8008eba:	8abb      	ldrh	r3, [r7, #20]
 8008ebc:	039b      	lsls	r3, r3, #14
 8008ebe:	61bb      	str	r3, [r7, #24]
		break;
 8008ec0:	e00d      	b.n	8008ede <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8008ec2:	f107 0316 	add.w	r3, r7, #22
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	68f8      	ldr	r0, [r7, #12]
 8008eca:	f001 f8fb 	bl	800a0c4 <VL53L1_get_lite_min_count_rate>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8008ed2:	8afb      	ldrh	r3, [r7, #22]
 8008ed4:	025b      	lsls	r3, r3, #9
 8008ed6:	61bb      	str	r3, [r7, #24]
		break;
 8008ed8:	e001      	b.n	8008ede <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008eda:	23fc      	movs	r3, #252	; 0xfc
 8008edc:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8008ede:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d123      	bne.n	8008f2e <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d110      	bne.n	8008f0e <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8008eec:	897b      	ldrh	r3, [r7, #10]
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	33e0      	adds	r3, #224	; 0xe0
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008f00:	897b      	ldrh	r3, [r7, #10]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	4413      	add	r3, r2
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 8008f0c:	e00f      	b.n	8008f2e <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	69ba      	ldr	r2, [r7, #24]
 8008f12:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008f14:	897b      	ldrh	r3, [r7, #10]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	33e0      	adds	r3, #224	; 0xe0
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4413      	add	r3, r2
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008f22:	897b      	ldrh	r3, [r7, #10]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4413      	add	r3, r2
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8008f2e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3720      	adds	r7, #32
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b086      	sub	sp, #24
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	460b      	mov	r3, r1
 8008f44:	607a      	str	r2, [r7, #4]
 8008f46:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	4619      	mov	r1, r3
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 fdb9 	bl	8009aca <VL53L1_get_sequence_config_bit>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8008f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3718      	adds	r7, #24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	789b      	ldrb	r3, [r3, #2]
 8008f78:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8008f7a:	7dbb      	ldrb	r3, [r7, #22]
 8008f7c:	2b40      	cmp	r3, #64	; 0x40
 8008f7e:	d002      	beq.n	8008f86 <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fa6b 	bl	800945c <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8008f8c:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 8008f8e:	7d7b      	ldrb	r3, [r7, #21]
 8008f90:	2b63      	cmp	r3, #99	; 0x63
 8008f92:	dc12      	bgt.n	8008fba <VL53L1_StartMeasurement+0x52>
 8008f94:	2b62      	cmp	r3, #98	; 0x62
 8008f96:	da0d      	bge.n	8008fb4 <VL53L1_StartMeasurement+0x4c>
 8008f98:	2b05      	cmp	r3, #5
 8008f9a:	dc0e      	bgt.n	8008fba <VL53L1_StartMeasurement+0x52>
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	da09      	bge.n	8008fb4 <VL53L1_StartMeasurement+0x4c>
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	dc02      	bgt.n	8008faa <VL53L1_StartMeasurement+0x42>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	da05      	bge.n	8008fb4 <VL53L1_StartMeasurement+0x4c>
 8008fa8:	e007      	b.n	8008fba <VL53L1_StartMeasurement+0x52>
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	d105      	bne.n	8008fba <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	75fb      	strb	r3, [r7, #23]
		break;
 8008fb2:	e004      	b.n	8008fbe <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8008fb4:	23f2      	movs	r3, #242	; 0xf2
 8008fb6:	75fb      	strb	r3, [r7, #23]
		break;
 8008fb8:	e001      	b.n	8008fbe <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8008fba:	23fd      	movs	r3, #253	; 0xfd
 8008fbc:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 8008fbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d11f      	bne.n	8009006 <VL53L1_StartMeasurement+0x9e>
 8008fc6:	7dbb      	ldrb	r3, [r7, #22]
 8008fc8:	2b40      	cmp	r3, #64	; 0x40
 8008fca:	d11c      	bne.n	8009006 <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8008fcc:	f107 0310 	add.w	r3, r7, #16
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7ff fdde 	bl	8008b94 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	4a17      	ldr	r2, [pc, #92]	; (800903c <VL53L1_StartMeasurement+0xd4>)
 8008fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe4:	099b      	lsrs	r3, r3, #6
 8008fe6:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8008fe8:	f107 030c 	add.w	r3, r7, #12
 8008fec:	4619      	mov	r1, r3
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7ff fe9c 	bl	8008d2c <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	1d1a      	adds	r2, r3, #4
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d901      	bls.n	8009006 <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8009002:	23fc      	movs	r3, #252	; 0xfc
 8009004:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 8009006:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d107      	bne.n	800901e <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 800900e:	7dbb      	ldrb	r3, [r7, #22]
 8009010:	2206      	movs	r2, #6
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 f8a1 	bl	800a15c <VL53L1_init_and_start_range>
 800901a:	4603      	mov	r3, r0
 800901c:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 800901e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d103      	bne.n	800902e <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2204      	movs	r2, #4
 800902a:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 800902e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	10624dd3 	.word	0x10624dd3

08009040 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	789b      	ldrb	r3, [r3, #2]
 8009050:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 8009052:	7bbb      	ldrb	r3, [r7, #14]
 8009054:	4619      	mov	r1, r3
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 fc0e 	bl	800a878 <VL53L1_clear_interrupt_and_enable_next_range>
 800905c:	4603      	mov	r3, r0
 800905e:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8009060:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f004 fb74 	bl	800d76a <VL53L1_is_new_data_ready>
 8009082:	4603      	mov	r3, r0
 8009084:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009086:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
	...

08009094 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8009094:	b480      	push	{r7}
 8009096:	b08d      	sub	sp, #52	; 0x34
 8009098:	af00      	add	r7, sp, #0
 800909a:	4603      	mov	r3, r0
 800909c:	603a      	str	r2, [r7, #0]
 800909e:	71fb      	strb	r3, [r7, #7]
 80090a0:	460b      	mov	r3, r1
 80090a2:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 80090a4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80090a8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 80090aa:	231e      	movs	r3, #30
 80090ac:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 80090ae:	4b33      	ldr	r3, [pc, #204]	; (800917c <ComputeRQL+0xe8>)
 80090b0:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 80090b2:	4b33      	ldr	r3, [pc, #204]	; (8009180 <ComputeRQL+0xec>)
 80090b4:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 80090b6:	f641 139a 	movw	r3, #6554	; 0x199a
 80090ba:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d103      	bne.n	80090ca <ComputeRQL+0x36>
		returnvalue = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090c8:	e04f      	b.n	800916a <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 80090ca:	79bb      	ldrb	r3, [r7, #6]
 80090cc:	2b07      	cmp	r3, #7
 80090ce:	d103      	bne.n	80090d8 <ComputeRQL+0x44>
		returnvalue = 50;
 80090d0:	2332      	movs	r3, #50	; 0x32
 80090d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090d6:	e048      	b.n	800916a <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80090de:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80090e2:	429a      	cmp	r2, r3
 80090e4:	dd03      	ble.n	80090ee <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 80090e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090e8:	041b      	lsls	r3, r3, #16
 80090ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090ec:	e007      	b.n	80090fe <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80090f4:	461a      	mov	r2, r3
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	fb02 f303 	mul.w	r3, r2, r3
 80090fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 80090fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009100:	2b00      	cmp	r3, #0
 8009102:	d020      	beq.n	8009146 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8009108:	461a      	mov	r2, r3
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	fb02 f303 	mul.w	r3, r2, r3
 8009110:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009114:	085b      	lsrs	r3, r3, #1
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	4413      	add	r3, r2
 800911a:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009120:	fbb2 f3f3 	udiv	r3, r2, r3
 8009124:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	041b      	lsls	r3, r3, #16
 800912a:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	429a      	cmp	r2, r3
 8009132:	d804      	bhi.n	800913e <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8009134:	69fa      	ldr	r2, [r7, #28]
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	62bb      	str	r3, [r7, #40]	; 0x28
 800913c:	e006      	b.n	800914c <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 800913e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8009142:	62bb      	str	r3, [r7, #40]	; 0x28
 8009144:	e002      	b.n	800914c <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8009146:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 800914a:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 800914c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914e:	0c1b      	lsrs	r3, r3, #16
 8009150:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	2b32      	cmp	r3, #50	; 0x32
 8009156:	d905      	bls.n	8009164 <ComputeRQL+0xd0>
 8009158:	7bfb      	ldrb	r3, [r7, #15]
 800915a:	2b64      	cmp	r3, #100	; 0x64
 800915c:	bf28      	it	cs
 800915e:	2364      	movcs	r3, #100	; 0x64
 8009160:	b2db      	uxtb	r3, r3
 8009162:	e000      	b.n	8009166 <ComputeRQL+0xd2>
 8009164:	2332      	movs	r3, #50	; 0x32
 8009166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 800916a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800916e:	4618      	mov	r0, r3
 8009170:	3734      	adds	r7, #52	; 0x34
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	0075b333 	.word	0x0075b333
 8009180:	0030cccd 	.word	0x0030cccd

08009184 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 800918e:	79fb      	ldrb	r3, [r7, #7]
 8009190:	3b04      	subs	r3, #4
 8009192:	2b0f      	cmp	r3, #15
 8009194:	d83d      	bhi.n	8009212 <ConvertStatusLite+0x8e>
 8009196:	a201      	add	r2, pc, #4	; (adr r2, 800919c <ConvertStatusLite+0x18>)
 8009198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919c:	080091ef 	.word	0x080091ef
 80091a0:	080091e9 	.word	0x080091e9
 80091a4:	080091f5 	.word	0x080091f5
 80091a8:	080091fb 	.word	0x080091fb
 80091ac:	08009207 	.word	0x08009207
 80091b0:	0800920d 	.word	0x0800920d
 80091b4:	08009213 	.word	0x08009213
 80091b8:	08009213 	.word	0x08009213
 80091bc:	08009201 	.word	0x08009201
 80091c0:	08009213 	.word	0x08009213
 80091c4:	08009213 	.word	0x08009213
 80091c8:	08009213 	.word	0x08009213
 80091cc:	08009213 	.word	0x08009213
 80091d0:	08009213 	.word	0x08009213
 80091d4:	080091dd 	.word	0x080091dd
 80091d8:	080091e3 	.word	0x080091e3
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80091dc:	230a      	movs	r3, #10
 80091de:	73fb      	strb	r3, [r7, #15]
		break;
 80091e0:	e019      	b.n	8009216 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80091e2:	2306      	movs	r3, #6
 80091e4:	73fb      	strb	r3, [r7, #15]
		break;
 80091e6:	e016      	b.n	8009216 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80091e8:	2304      	movs	r3, #4
 80091ea:	73fb      	strb	r3, [r7, #15]
		break;
 80091ec:	e013      	b.n	8009216 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80091ee:	2302      	movs	r3, #2
 80091f0:	73fb      	strb	r3, [r7, #15]
		break;
 80091f2:	e010      	b.n	8009216 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80091f4:	2301      	movs	r3, #1
 80091f6:	73fb      	strb	r3, [r7, #15]
		break;
 80091f8:	e00d      	b.n	8009216 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80091fa:	2307      	movs	r3, #7
 80091fc:	73fb      	strb	r3, [r7, #15]
		break;
 80091fe:	e00a      	b.n	8009216 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8009200:	2309      	movs	r3, #9
 8009202:	73fb      	strb	r3, [r7, #15]
		break;
 8009204:	e007      	b.n	8009216 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8009206:	2303      	movs	r3, #3
 8009208:	73fb      	strb	r3, [r7, #15]
		break;
 800920a:	e004      	b.n	8009216 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]
		break;
 8009210:	e001      	b.n	8009216 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8009212:	23ff      	movs	r3, #255	; 0xff
 8009214:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8009216:	7bfb      	ldrb	r3, [r7, #15]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b08c      	sub	sp, #48	; 0x30
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	607b      	str	r3, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	72fb      	strb	r3, [r7, #11]
 8009232:	4613      	mov	r3, r2
 8009234:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009236:	2300      	movs	r3, #0
 8009238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800924a:	f003 031f 	and.w	r3, r3, #31
 800924e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8009252:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8009256:	7afb      	ldrb	r3, [r7, #11]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	4618      	mov	r0, r3
 800925c:	f7ff ff1a 	bl	8009094 <ComputeRQL>
 8009260:	4603      	mov	r3, r0
 8009262:	461a      	mov	r2, r3
 8009264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009266:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800926c:	025b      	lsls	r3, r3, #9
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8009270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009274:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800927a:	025b      	lsls	r3, r3, #9
 800927c:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009282:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8009288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928a:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8009290:	025b      	lsls	r3, r3, #9
 8009292:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8009294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009296:	6a3a      	ldr	r2, [r7, #32]
 8009298:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80092a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a2:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 80092a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a6:	2200      	movs	r2, #0
 80092a8:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 80092aa:	7abb      	ldrb	r3, [r7, #10]
 80092ac:	2b11      	cmp	r3, #17
 80092ae:	d009      	beq.n	80092c4 <SetSimpleData+0xa0>
 80092b0:	2b11      	cmp	r3, #17
 80092b2:	dc0f      	bgt.n	80092d4 <SetSimpleData+0xb0>
 80092b4:	2b03      	cmp	r3, #3
 80092b6:	dc02      	bgt.n	80092be <SetSimpleData+0x9a>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	dc03      	bgt.n	80092c4 <SetSimpleData+0xa0>
 80092bc:	e00a      	b.n	80092d4 <SetSimpleData+0xb0>
 80092be:	2b0d      	cmp	r3, #13
 80092c0:	d004      	beq.n	80092cc <SetSimpleData+0xa8>
 80092c2:	e007      	b.n	80092d4 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	2205      	movs	r2, #5
 80092c8:	76da      	strb	r2, [r3, #27]
		break;
 80092ca:	e006      	b.n	80092da <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	220d      	movs	r2, #13
 80092d0:	76da      	strb	r2, [r3, #27]
		break;
 80092d2:	e002      	b.n	80092da <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80092d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d6:	2200      	movs	r2, #0
 80092d8:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	7edb      	ldrb	r3, [r3, #27]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d108      	bne.n	80092f4 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 80092e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80092e6:	4618      	mov	r0, r3
 80092e8:	f7ff ff4c 	bl	8009184 <ConvertStatusLite>
 80092ec:	4603      	mov	r3, r0
 80092ee:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80092f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f2:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80092f8:	025b      	lsls	r3, r3, #9
 80092fa:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6a3a      	ldr	r2, [r7, #32]
 8009300:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009308:	025b      	lsls	r3, r3, #9
 800930a:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a3a      	ldr	r2, [r7, #32]
 8009310:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8009314:	f107 0314 	add.w	r3, r7, #20
 8009318:	461a      	mov	r2, r3
 800931a:	2100      	movs	r1, #0
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f7ff fdb3 	bl	8008e88 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8009322:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009326:	2b06      	cmp	r3, #6
 8009328:	bf0c      	ite	eq
 800932a:	2301      	moveq	r3, #1
 800932c:	2300      	movne	r3, #0
 800932e:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8009330:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8009332:	f107 0319 	add.w	r3, r7, #25
 8009336:	461a      	mov	r2, r3
 8009338:	2100      	movs	r1, #0
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	f7ff fd81 	bl	8008e42 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8009340:	7e7b      	ldrb	r3, [r7, #25]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d104      	bne.n	8009350 <SetSimpleData+0x12c>
 8009346:	7ffb      	ldrb	r3, [r7, #31]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d101      	bne.n	8009350 <SetSimpleData+0x12c>
 800934c:	2301      	movs	r3, #1
 800934e:	e000      	b.n	8009352 <SetSimpleData+0x12e>
 8009350:	2300      	movs	r3, #0
 8009352:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	7fba      	ldrb	r2, [r7, #30]
 8009358:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 800935c:	f107 0314 	add.w	r3, r7, #20
 8009360:	461a      	mov	r2, r3
 8009362:	2101      	movs	r1, #1
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f7ff fd8f 	bl	8008e88 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 800936a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800936e:	2b04      	cmp	r3, #4
 8009370:	bf0c      	ite	eq
 8009372:	2301      	moveq	r3, #1
 8009374:	2300      	movne	r3, #0
 8009376:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8009378:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 800937a:	f107 0319 	add.w	r3, r7, #25
 800937e:	461a      	mov	r2, r3
 8009380:	2101      	movs	r1, #1
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f7ff fd5d 	bl	8008e42 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8009388:	7e7b      	ldrb	r3, [r7, #25]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d104      	bne.n	8009398 <SetSimpleData+0x174>
 800938e:	7f7b      	ldrb	r3, [r7, #29]
 8009390:	2b01      	cmp	r3, #1
 8009392:	d101      	bne.n	8009398 <SetSimpleData+0x174>
 8009394:	2301      	movs	r3, #1
 8009396:	e000      	b.n	800939a <SetSimpleData+0x176>
 8009398:	2300      	movs	r3, #0
 800939a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	7fba      	ldrb	r2, [r7, #30]
 80093a0:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80093a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a6:	8b1b      	ldrh	r3, [r3, #24]
 80093a8:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80093aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ac:	7edb      	ldrb	r3, [r3, #27]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d110      	bne.n	80093d4 <SetSimpleData+0x1b0>
 80093b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	da0c      	bge.n	80093d4 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 80093ba:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80093be:	4b08      	ldr	r3, [pc, #32]	; (80093e0 <SetSimpleData+0x1bc>)
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	da03      	bge.n	80093ce <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 80093c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c8:	220e      	movs	r2, #14
 80093ca:	76da      	strb	r2, [r3, #27]
 80093cc:	e002      	b.n	80093d4 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80093ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d0:	2200      	movs	r2, #0
 80093d2:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 80093d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3730      	adds	r7, #48	; 0x30
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	20000014 	.word	0x20000014

080093e4 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b0a8      	sub	sp, #160	; 0xa0
 80093e8:	af02      	add	r7, sp, #8
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80093ee:	2300      	movs	r3, #0
 80093f0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 80093f4:	f107 0308 	add.w	r3, r7, #8
 80093f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 80093fc:	221c      	movs	r2, #28
 80093fe:	21ff      	movs	r1, #255	; 0xff
 8009400:	6838      	ldr	r0, [r7, #0]
 8009402:	f004 fc75 	bl	800dcf0 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8009406:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800940a:	2102      	movs	r1, #2
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 f9c3 	bl	800a798 <VL53L1_get_device_results>
 8009412:	4603      	mov	r3, r0
 8009414:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8009418:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 800941c:	2b00      	cmp	r3, #0
 800941e:	d117      	bne.n	8009450 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8009420:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009424:	789a      	ldrb	r2, [r3, #2]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800942a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800942e:	3304      	adds	r3, #4
 8009430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 8009434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009438:	78da      	ldrb	r2, [r3, #3]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009442:	2101      	movs	r1, #1
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff feed 	bl	8009224 <SetSimpleData>
 800944a:	4603      	mov	r3, r0
 800944c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009450:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8009454:	4618      	mov	r0, r3
 8009456:	3798      	adds	r7, #152	; 0x98
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b0c6      	sub	sp, #280	; 0x118
 8009460:	af00      	add	r7, sp, #0
 8009462:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009466:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800946a:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 800946c:	2300      	movs	r3, #0
 800946e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 8009472:	2300      	movs	r3, #0
 8009474:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8009478:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10b      	bne.n	8009498 <VL53L1_LoadPatch+0x3c>
		status = VL53L1_WrByte(
 8009480:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009484:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009488:	2200      	movs	r2, #0
 800948a:	2185      	movs	r1, #133	; 0x85
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	f004 fa7f 	bl	800d990 <VL53L1_WrByte>
 8009492:	4603      	mov	r3, r0
 8009494:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 8009498:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800949c:	2b00      	cmp	r3, #0
 800949e:	d106      	bne.n	80094ae <VL53L1_LoadPatch+0x52>
		VL53L1_enable_powerforce(Dev);
 80094a0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80094a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80094a8:	6818      	ldr	r0, [r3, #0]
 80094aa:	f002 fd5e 	bl	800bf6a <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 80094ae:	4b7e      	ldr	r3, [pc, #504]	; (80096a8 <VL53L1_LoadPatch+0x24c>)
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	switch(patch_tuning) {
 80094b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d81a      	bhi.n	80094f4 <VL53L1_LoadPatch+0x98>
 80094be:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <VL53L1_LoadPatch+0x68>)
 80094c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	080094dd 	.word	0x080094dd
 80094cc:	080094e5 	.word	0x080094e5
 80094d0:	080094ed 	.word	0x080094ed
	case 0:
		patch_power = 0x00;
 80094d4:	2300      	movs	r3, #0
 80094d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80094da:	e00e      	b.n	80094fa <VL53L1_LoadPatch+0x9e>
	case 1:
		patch_power = 0x10;
 80094dc:	2310      	movs	r3, #16
 80094de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80094e2:	e00a      	b.n	80094fa <VL53L1_LoadPatch+0x9e>
	case 2:
		patch_power = 0x20;
 80094e4:	2320      	movs	r3, #32
 80094e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80094ea:	e006      	b.n	80094fa <VL53L1_LoadPatch+0x9e>
	case 3:
		patch_power = 0x40;
 80094ec:	2340      	movs	r3, #64	; 0x40
 80094ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80094f2:	e002      	b.n	80094fa <VL53L1_LoadPatch+0x9e>
	default:
		patch_power = 0x00;
 80094f4:	2300      	movs	r3, #0
 80094f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 80094fa:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d134      	bne.n	800956c <VL53L1_LoadPatch+0x110>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 8009502:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009506:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800950a:	2229      	movs	r2, #41	; 0x29
 800950c:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 800950e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009512:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009516:	22c9      	movs	r2, #201	; 0xc9
 8009518:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 800951a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800951e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009522:	220e      	movs	r2, #14
 8009524:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8009526:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800952a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800952e:	2240      	movs	r2, #64	; 0x40
 8009530:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8009532:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009536:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800953a:	2228      	movs	r2, #40	; 0x28
 800953c:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 800953e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009542:	b2da      	uxtb	r2, r3
 8009544:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009548:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800954c:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 800954e:	f107 020c 	add.w	r2, r7, #12
 8009552:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009556:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800955a:	2306      	movs	r3, #6
 800955c:	f240 4176 	movw	r1, #1142	; 0x476
 8009560:	6800      	ldr	r0, [r0, #0]
 8009562:	f004 f9a9 	bl	800d8b8 <VL53L1_WriteMulti>
 8009566:	4603      	mov	r3, r0
 8009568:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 800956c:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009570:	2b00      	cmp	r3, #0
 8009572:	d132      	bne.n	80095da <VL53L1_LoadPatch+0x17e>
		comms_buffer[0] = 0x03;
 8009574:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009578:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800957c:	2203      	movs	r2, #3
 800957e:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8009580:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009584:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009588:	226d      	movs	r2, #109	; 0x6d
 800958a:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 800958c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009590:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009594:	2203      	movs	r2, #3
 8009596:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8009598:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800959c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095a0:	226f      	movs	r2, #111	; 0x6f
 80095a2:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 80095a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095ac:	2207      	movs	r2, #7
 80095ae:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80095b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095b8:	2229      	movs	r2, #41	; 0x29
 80095ba:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 80095bc:	f107 020c 	add.w	r2, r7, #12
 80095c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095c4:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80095c8:	2306      	movs	r3, #6
 80095ca:	f240 4196 	movw	r1, #1174	; 0x496
 80095ce:	6800      	ldr	r0, [r0, #0]
 80095d0:	f004 f972 	bl	800d8b8 <VL53L1_WriteMulti>
 80095d4:	4603      	mov	r3, r0
 80095d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 80095da:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d11a      	bne.n	8009618 <VL53L1_LoadPatch+0x1bc>
		comms_buffer[0] = 0x00;
 80095e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095ea:	2200      	movs	r2, #0
 80095ec:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80095ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095f6:	2207      	movs	r2, #7
 80095f8:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 80095fa:	f107 020c 	add.w	r2, r7, #12
 80095fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009602:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009606:	2302      	movs	r3, #2
 8009608:	f240 4172 	movw	r1, #1138	; 0x472
 800960c:	6800      	ldr	r0, [r0, #0]
 800960e:	f004 f953 	bl	800d8b8 <VL53L1_WriteMulti>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 8009618:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800961c:	2b00      	cmp	r3, #0
 800961e:	d11a      	bne.n	8009656 <VL53L1_LoadPatch+0x1fa>
		comms_buffer[0] = 0x00;
 8009620:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009624:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009628:	2200      	movs	r2, #0
 800962a:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 800962c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009630:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009634:	2207      	movs	r2, #7
 8009636:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8009638:	f107 020c 	add.w	r2, r7, #12
 800963c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009640:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009644:	2302      	movs	r3, #2
 8009646:	f240 4174 	movw	r1, #1140	; 0x474
 800964a:	6800      	ldr	r0, [r0, #0]
 800964c:	f004 f934 	bl	800d8b8 <VL53L1_WriteMulti>
 8009650:	4603      	mov	r3, r0
 8009652:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 8009656:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10c      	bne.n	8009678 <VL53L1_LoadPatch+0x21c>
		status = VL53L1_WrByte(
 800965e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009662:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009666:	2201      	movs	r2, #1
 8009668:	f44f 618e 	mov.w	r1, #1136	; 0x470
 800966c:	6818      	ldr	r0, [r3, #0]
 800966e:	f004 f98f 	bl	800d990 <VL53L1_WrByte>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 8009678:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 800967c:	2b00      	cmp	r3, #0
 800967e:	d10b      	bne.n	8009698 <VL53L1_LoadPatch+0x23c>
		status = VL53L1_WrByte(
 8009680:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009684:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009688:	2201      	movs	r2, #1
 800968a:	2185      	movs	r1, #133	; 0x85
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	f004 f97f 	bl	800d990 <VL53L1_WrByte>
 8009692:	4603      	mov	r3, r0
 8009694:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 8009698:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 800969c:	4618      	mov	r0, r3
 800969e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	20000014 	.word	0x20000014

080096ac <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80096ac:	b5b0      	push	{r4, r5, r7, lr}
 80096ae:	b088      	sub	sp, #32
 80096b0:	af04      	add	r7, sp, #16
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	460b      	mov	r3, r1
 80096b6:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 80096c0:	2162      	movs	r1, #98	; 0x62
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f002 f90b 	bl	800b8de <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	2200      	movs	r2, #0
 80096cc:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2201      	movs	r2, #1
 80096d2:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2200      	movs	r2, #0
 80096d8:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2201      	movs	r2, #1
 80096de:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	2201      	movs	r2, #1
 80096e4:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096ec:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80096f4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80096fc:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2264      	movs	r2, #100	; 0x64
 8009702:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800970a:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	2200      	movs	r2, #0
 8009710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	f240 72db 	movw	r2, #2011	; 0x7db
 800971a:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f002 f8c1 	bl	800b8a6 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d008      	beq.n	800973c <VL53L1_data_init+0x90>
 800972a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d104      	bne.n	800973c <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f857 	bl	80097e6 <VL53L1_read_p2p_data>
 8009738:	4603      	mov	r3, r0
 800973a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009742:	4618      	mov	r0, r3
 8009744:	f001 fbf0 	bl	800af28 <VL53L1_init_refspadchar_config_struct>
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8009752:	4618      	mov	r0, r3
 8009754:	f001 fc0c 	bl	800af70 <VL53L1_init_ssc_config_struct>
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	f103 0242 	add.w	r2, r3, #66	; 0x42
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8009768:	4619      	mov	r1, r3
 800976a:	4610      	mov	r0, r2
 800976c:	f001 fc21 	bl	800afb2 <VL53L1_init_xtalk_config_struct>
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800977a:	4618      	mov	r0, r3
 800977c:	f001 fc7b 	bl	800b076 <VL53L1_init_offset_cal_config_struct>
 8009780:	4603      	mov	r3, r0
 8009782:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	33a4      	adds	r3, #164	; 0xa4
 8009788:	4618      	mov	r0, r3
 800978a:	f001 fc9b 	bl	800b0c4 <VL53L1_init_tuning_parm_storage_struct>
 800978e:	4603      	mov	r3, r0
 8009790:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8009792:	2120      	movs	r1, #32
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fcc1 	bl	800a11c <VL53L1_set_vhv_loopbound>
 800979a:	4603      	mov	r3, r0
 800979c:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800979e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d116      	bne.n	80097d4 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	7858      	ldrb	r0, [r3, #1]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	8b1c      	ldrh	r4, [r3, #24]
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	689d      	ldr	r5, [r3, #8]
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	6912      	ldr	r2, [r2, #16]
 80097ba:	68b9      	ldr	r1, [r7, #8]
 80097bc:	6949      	ldr	r1, [r1, #20]
 80097be:	9102      	str	r1, [sp, #8]
 80097c0:	9201      	str	r2, [sp, #4]
 80097c2:	9300      	str	r3, [sp, #0]
 80097c4:	462b      	mov	r3, r5
 80097c6:	4622      	mov	r2, r4
 80097c8:	4601      	mov	r1, r0
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fad8 	bl	8009d80 <VL53L1_set_preset_mode>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f002 fe03 	bl	800c3e0 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80097da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bdb0      	pop	{r4, r5, r7, pc}

080097e6 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80097ee:	2300      	movs	r3, #0
 80097f0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80097f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d108      	bne.n	8009810 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f002 ff87 	bl	800c71a <VL53L1_get_static_nvm_managed>
 800980c:	4603      	mov	r3, r0
 800980e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8009810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d107      	bne.n	8009828 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	3342      	adds	r3, #66	; 0x42
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f003 f8b9 	bl	800c996 <VL53L1_get_customer_nvm_managed>
 8009824:	4603      	mov	r3, r0
 8009826:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8009828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d115      	bne.n	800985c <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f003 ff6b 	bl	800d714 <VL53L1_get_nvm_copy_data>
 800983e:	4603      	mov	r3, r0
 8009840:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8009842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d108      	bne.n	800985c <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	33f0      	adds	r3, #240	; 0xf0
 8009854:	4619      	mov	r1, r3
 8009856:	4610      	mov	r0, r2
 8009858:	f002 f9a3 	bl	800bba2 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800985c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d109      	bne.n	8009878 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800986a:	461a      	mov	r2, r3
 800986c:	21de      	movs	r1, #222	; 0xde
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f004 f8ec 	bl	800da4c <VL53L1_RdWord>
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800987e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009882:	d204      	bcs.n	800988e <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800988a:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800988e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d107      	bne.n	80098a6 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	339e      	adds	r3, #158	; 0x9e
 800989a:	4619      	mov	r1, r3
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f990 	bl	8009bc2 <VL53L1_get_mode_mitigation_roi>
 80098a2:	4603      	mov	r3, r0
 80098a4:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d114      	bne.n	80098da <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10f      	bne.n	80098da <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80098c0:	011b      	lsls	r3, r3, #4
 80098c2:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 80098da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80098e6:	b480      	push	{r7}
 80098e8:	b085      	sub	sp, #20
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098f0:	2300      	movs	r3, #0
 80098f2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d101      	bne.n	8009906 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009902:	23f1      	movs	r3, #241	; 0xf1
 8009904:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8009906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10c      	bne.n	8009928 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800991a:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8009928:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3714      	adds	r7, #20
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr

08009938 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8009938:	b480      	push	{r7}
 800993a:	b085      	sub	sp, #20
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009942:	2300      	movs	r3, #0
 8009944:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009954:	23f1      	movs	r3, #241	; 0xf1
 8009956:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8009958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d109      	bne.n	8009974 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800996c:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8009974:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b088      	sub	sp, #32
 8009988:	af02      	add	r7, sp, #8
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
 8009990:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009992:	2300      	movs	r3, #0
 8009994:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80099a4:	23f1      	movs	r3, #241	; 0xf1
 80099a6:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 80099a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d11b      	bne.n	80099e8 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 80099d4:	9201      	str	r2, [sp, #4]
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	460b      	mov	r3, r1
 80099da:	683a      	ldr	r2, [r7, #0]
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	68b8      	ldr	r0, [r7, #8]
 80099e0:	f002 fc30 	bl	800c244 <VL53L1_calc_timeout_register_values>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 80099e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b088      	sub	sp, #32
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	60f8      	str	r0, [r7, #12]
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009a02:	2300      	movs	r3, #0
 8009a04:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009a1c:	23f1      	movs	r3, #241	; 0xf1
 8009a1e:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8009a20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d14a      	bne.n	8009abe <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 8009a34:	4619      	mov	r1, r3
 8009a36:	4610      	mov	r0, r2
 8009a38:	f002 faa9 	bl	800bf8e <VL53L1_calc_macro_period_us>
 8009a3c:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 8009a44:	6979      	ldr	r1, [r7, #20]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f002 fb61 	bl	800c10e <VL53L1_calc_timeout_us>
 8009a4c:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 8009a58:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8009a5a:	8a7b      	ldrh	r3, [r7, #18]
 8009a5c:	021b      	lsls	r3, r3, #8
 8009a5e:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8009a66:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8009a68:	4413      	add	r3, r2
 8009a6a:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8009a6c:	8a7b      	ldrh	r3, [r7, #18]
 8009a6e:	6979      	ldr	r1, [r7, #20]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f002 fb8c 	bl	800c18e <VL53L1_calc_decoded_timeout_us>
 8009a76:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 8009a82:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8009a84:	8a7b      	ldrh	r3, [r7, #18]
 8009a86:	021b      	lsls	r3, r3, #8
 8009a88:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8009a90:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8009a92:	4413      	add	r3, r2
 8009a94:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8009a96:	8a7b      	ldrh	r3, [r7, #18]
 8009a98:	6979      	ldr	r1, [r7, #20]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f002 fb77 	bl	800c18e <VL53L1_calc_decoded_timeout_us>
 8009aa0:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009abe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3720      	adds	r7, #32
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b087      	sub	sp, #28
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	60f8      	str	r0, [r7, #12]
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	607a      	str	r2, [r7, #4]
 8009ad6:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	2b07      	cmp	r3, #7
 8009ae8:	d81c      	bhi.n	8009b24 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8009aea:	7afb      	ldrb	r3, [r7, #11]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d004      	beq.n	8009afa <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8009af0:	7afb      	ldrb	r3, [r7, #11]
 8009af2:	2201      	movs	r2, #1
 8009af4:	fa02 f303 	lsl.w	r3, r2, r3
 8009af8:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 8009b00:	7dbb      	ldrb	r3, [r7, #22]
 8009b02:	4013      	ands	r3, r2
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8009b0a:	7afb      	ldrb	r3, [r7, #11]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00b      	beq.n	8009b28 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	461a      	mov	r2, r3
 8009b16:	7afb      	ldrb	r3, [r7, #11]
 8009b18:	fa42 f303 	asr.w	r3, r2, r3
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	701a      	strb	r2, [r3, #0]
 8009b22:	e001      	b.n	8009b28 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009b24:	23fc      	movs	r3, #252	; 0xfc
 8009b26:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8009b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	371c      	adds	r7, #28
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	7858      	ldrb	r0, [r3, #1]
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	7819      	ldrb	r1, [r3, #0]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 8009b58:	461a      	mov	r2, r3
 8009b5a:	f002 fbec 	bl	800c336 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	7898      	ldrb	r0, [r3, #2]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	78d9      	ldrb	r1, [r3, #3]
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	f002 fc21 	bl	800c3b4 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8009b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	f002 fcd8 	bl	800c552 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	1c99      	adds	r1, r3, #2
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	3303      	adds	r3, #3
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	f002 fbe7 	bl	800c384 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8009bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b086      	sub	sp, #24
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
 8009bca:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 8009be6:	f107 020e 	add.w	r2, r7, #14
 8009bea:	f107 010d 	add.w	r1, r7, #13
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f002 fcaf 	bl	800c552 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8009bf4:	7bba      	ldrb	r2, [r7, #14]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8009bfa:	7b7a      	ldrb	r2, [r7, #13]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 8009c06:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	091b      	lsrs	r3, r3, #4
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8009c12:	7bfb      	ldrb	r3, [r7, #15]
 8009c14:	f003 030f 	and.w	r3, r3, #15
 8009c18:	b2da      	uxtb	r2, r3
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8009c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3718      	adds	r7, #24
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b087      	sub	sp, #28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	607a      	str	r2, [r7, #4]
 8009c36:	603b      	str	r3, [r7, #0]
 8009c38:	460b      	mov	r3, r1
 8009c3a:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8009c44:	7afb      	ldrb	r3, [r7, #11]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	2b25      	cmp	r3, #37	; 0x25
 8009c4a:	f200 808e 	bhi.w	8009d6a <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8009c4e:	a201      	add	r2, pc, #4	; (adr r2, 8009c54 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8009c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c54:	08009ced 	.word	0x08009ced
 8009c58:	08009ced 	.word	0x08009ced
 8009c5c:	08009ced 	.word	0x08009ced
 8009c60:	08009ced 	.word	0x08009ced
 8009c64:	08009ced 	.word	0x08009ced
 8009c68:	08009d17 	.word	0x08009d17
 8009c6c:	08009d17 	.word	0x08009d17
 8009c70:	08009d17 	.word	0x08009d17
 8009c74:	08009d6b 	.word	0x08009d6b
 8009c78:	08009d6b 	.word	0x08009d6b
 8009c7c:	08009d6b 	.word	0x08009d6b
 8009c80:	08009d6b 	.word	0x08009d6b
 8009c84:	08009d6b 	.word	0x08009d6b
 8009c88:	08009d6b 	.word	0x08009d6b
 8009c8c:	08009d6b 	.word	0x08009d6b
 8009c90:	08009d6b 	.word	0x08009d6b
 8009c94:	08009ced 	.word	0x08009ced
 8009c98:	08009d17 	.word	0x08009d17
 8009c9c:	08009d6b 	.word	0x08009d6b
 8009ca0:	08009d6b 	.word	0x08009d6b
 8009ca4:	08009d6b 	.word	0x08009d6b
 8009ca8:	08009d6b 	.word	0x08009d6b
 8009cac:	08009d6b 	.word	0x08009d6b
 8009cb0:	08009d6b 	.word	0x08009d6b
 8009cb4:	08009d6b 	.word	0x08009d6b
 8009cb8:	08009d6b 	.word	0x08009d6b
 8009cbc:	08009d6b 	.word	0x08009d6b
 8009cc0:	08009d6b 	.word	0x08009d6b
 8009cc4:	08009d6b 	.word	0x08009d6b
 8009cc8:	08009d6b 	.word	0x08009d6b
 8009ccc:	08009d6b 	.word	0x08009d6b
 8009cd0:	08009d6b 	.word	0x08009d6b
 8009cd4:	08009d6b 	.word	0x08009d6b
 8009cd8:	08009d6b 	.word	0x08009d6b
 8009cdc:	08009d6b 	.word	0x08009d6b
 8009ce0:	08009d41 	.word	0x08009d41
 8009ce4:	08009d41 	.word	0x08009d41
 8009ce8:	08009d41 	.word	0x08009d41
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	601a      	str	r2, [r3, #0]
	break;
 8009d14:	e02c      	b.n	8009d70 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 8009d30:	6a3b      	ldr	r3, [r7, #32]
 8009d32:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 8009d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3c:	601a      	str	r2, [r3, #0]
	break;
 8009d3e:	e017      	b.n	8009d70 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 8009d5a:	6a3b      	ldr	r3, [r7, #32]
 8009d5c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	601a      	str	r2, [r3, #0]
	break;
 8009d68:	e002      	b.n	8009d70 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009d6a:	23fc      	movs	r3, #252	; 0xfc
 8009d6c:	75fb      	strb	r3, [r7, #23]
		break;
 8009d6e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8009d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	371c      	adds	r7, #28
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b092      	sub	sp, #72	; 0x48
 8009d84:	af04      	add	r7, sp, #16
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	607b      	str	r3, [r7, #4]
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	72fb      	strb	r3, [r7, #11]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d92:	2300      	movs	r3, #0
 8009d94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009da2:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8009da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009daa:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8009db2:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db6:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8009dba:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbe:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009dc2:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc6:	33a4      	adds	r3, #164	; 0xa4
 8009dc8:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8009dd0:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd4:	7afa      	ldrb	r2, [r7, #11]
 8009dd6:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ddc:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8009dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009de2:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8009de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009de8:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8009dea:	2103      	movs	r1, #3
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f001 fd76 	bl	800b8de <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8009df2:	7afb      	ldrb	r3, [r7, #11]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	2b25      	cmp	r3, #37	; 0x25
 8009df8:	f200 810c 	bhi.w	800a014 <VL53L1_set_preset_mode+0x294>
 8009dfc:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <VL53L1_set_preset_mode+0x84>)
 8009dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e02:	bf00      	nop
 8009e04:	08009e9d 	.word	0x08009e9d
 8009e08:	08009eb9 	.word	0x08009eb9
 8009e0c:	08009ed5 	.word	0x08009ed5
 8009e10:	08009ef1 	.word	0x08009ef1
 8009e14:	08009f0d 	.word	0x08009f0d
 8009e18:	08009f29 	.word	0x08009f29
 8009e1c:	08009f45 	.word	0x08009f45
 8009e20:	08009f61 	.word	0x08009f61
 8009e24:	0800a015 	.word	0x0800a015
 8009e28:	0800a015 	.word	0x0800a015
 8009e2c:	0800a015 	.word	0x0800a015
 8009e30:	0800a015 	.word	0x0800a015
 8009e34:	0800a015 	.word	0x0800a015
 8009e38:	0800a015 	.word	0x0800a015
 8009e3c:	0800a015 	.word	0x0800a015
 8009e40:	0800a015 	.word	0x0800a015
 8009e44:	08009f7d 	.word	0x08009f7d
 8009e48:	08009f99 	.word	0x08009f99
 8009e4c:	0800a015 	.word	0x0800a015
 8009e50:	0800a015 	.word	0x0800a015
 8009e54:	0800a015 	.word	0x0800a015
 8009e58:	0800a015 	.word	0x0800a015
 8009e5c:	0800a015 	.word	0x0800a015
 8009e60:	0800a015 	.word	0x0800a015
 8009e64:	0800a015 	.word	0x0800a015
 8009e68:	0800a015 	.word	0x0800a015
 8009e6c:	0800a015 	.word	0x0800a015
 8009e70:	0800a015 	.word	0x0800a015
 8009e74:	0800a015 	.word	0x0800a015
 8009e78:	0800a015 	.word	0x0800a015
 8009e7c:	0800a015 	.word	0x0800a015
 8009e80:	0800a015 	.word	0x0800a015
 8009e84:	0800a015 	.word	0x0800a015
 8009e88:	0800a015 	.word	0x0800a015
 8009e8c:	0800a015 	.word	0x0800a015
 8009e90:	08009fb5 	.word	0x08009fb5
 8009e94:	08009fd5 	.word	0x08009fd5
 8009e98:	08009ff5 	.word	0x08009ff5

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	9301      	str	r3, [sp, #4]
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009eaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eac:	f001 f999 	bl	800b1e2 <VL53L1_preset_mode_standard_ranging>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009eb6:	e0b1      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	9301      	str	r3, [sp, #4]
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	9300      	str	r3, [sp, #0]
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ec4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ec8:	f001 faa9 	bl	800b41e <VL53L1_preset_mode_standard_ranging_short_range>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009ed2:	e0a3      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	9301      	str	r3, [sp, #4]
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ee0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ee2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ee4:	f001 fadc 	bl	800b4a0 <VL53L1_preset_mode_standard_ranging_long_range>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009eee:	e095      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	9301      	str	r3, [sp, #4]
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009efe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f00:	f001 fb0f 	bl	800b522 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8009f04:	4603      	mov	r3, r0
 8009f06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009f0a:	e087      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	9301      	str	r3, [sp, #4]
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	9300      	str	r3, [sp, #0]
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f1c:	f001 fb26 	bl	800b56c <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009f26:	e079      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	9301      	str	r3, [sp, #4]
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f38:	f001 fb3d 	bl	800b5b6 <VL53L1_preset_mode_timed_ranging>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009f42:	e06b      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	9301      	str	r3, [sp, #4]
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f54:	f001 fb69 	bl	800b62a <VL53L1_preset_mode_timed_ranging_short_range>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009f5e:	e05d      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	9301      	str	r3, [sp, #4]
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	6a3b      	ldr	r3, [r7, #32]
 8009f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f70:	f001 fb95 	bl	800b69e <VL53L1_preset_mode_timed_ranging_long_range>
 8009f74:	4603      	mov	r3, r0
 8009f76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009f7a:	e04f      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	9301      	str	r3, [sp, #4]
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f8c:	f001 fc69 	bl	800b862 <VL53L1_preset_mode_olt>
 8009f90:	4603      	mov	r3, r0
 8009f92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009f96:	e041      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8009f98:	69bb      	ldr	r3, [r7, #24]
 8009f9a:	9301      	str	r3, [sp, #4]
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	6a3b      	ldr	r3, [r7, #32]
 8009fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fa8:	f001 fc25 	bl	800b7f6 <VL53L1_preset_mode_singleshot_ranging>
 8009fac:	4603      	mov	r3, r0
 8009fae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009fb2:	e033      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	9302      	str	r3, [sp, #8]
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	9301      	str	r3, [sp, #4]
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fc8:	f001 fbc9 	bl	800b75e <VL53L1_preset_mode_low_power_auto_short_ranging>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8009fd2:	e023      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	9302      	str	r3, [sp, #8]
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	9301      	str	r3, [sp, #4]
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	6a3b      	ldr	r3, [r7, #32]
 8009fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fe8:	f001 fb93 	bl	800b712 <VL53L1_preset_mode_low_power_auto_ranging>
 8009fec:	4603      	mov	r3, r0
 8009fee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8009ff2:	e013      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	9302      	str	r3, [sp, #8]
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	9301      	str	r3, [sp, #4]
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a006:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a008:	f001 fbcf 	bl	800b7aa <VL53L1_preset_mode_low_power_auto_long_ranging>
 800a00c:	4603      	mov	r3, r0
 800a00e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a012:	e003      	b.n	800a01c <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a014:	23fc      	movs	r3, #252	; 0xfc
 800a016:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800a01a:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800a01c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a020:	2b00      	cmp	r3, #0
 800a022:	d105      	bne.n	800a030 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800a024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a026:	893a      	ldrh	r2, [r7, #8]
 800a028:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	893a      	ldrh	r2, [r7, #8]
 800a02e:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800a030:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a034:	2b00      	cmp	r3, #0
 800a036:	d108      	bne.n	800a04a <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800a038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a03a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a03c:	6879      	ldr	r1, [r7, #4]
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f7ff fca0 	bl	8009984 <VL53L1_set_timeouts_us>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800a04a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d106      	bne.n	800a060 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800a052:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	f7ff fc46 	bl	80098e6 <VL53L1_set_inter_measurement_period_ms>
 800a05a:	4603      	mov	r3, r0
 800a05c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800a060:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a064:	4618      	mov	r0, r3
 800a066:	3738      	adds	r7, #56	; 0x38
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a076:	2300      	movs	r3, #0
 800a078:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a088:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	887a      	ldrh	r2, [r7, #2]
 800a0b0:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800a0b4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a0e0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3714      	adds	r7, #20
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	887a      	ldrh	r2, [r7, #2]
 800a108:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800a10c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a110:	4618      	mov	r0, r3
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b085      	sub	sp, #20
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	460b      	mov	r3, r1
 800a126:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a136:	f003 0303 	and.w	r3, r3, #3
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	78fb      	ldrb	r3, [r7, #3]
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	b2db      	uxtb	r3, r3
 800a142:	4413      	add	r3, r2
 800a144:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800a14c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a150:	4618      	mov	r0, r3
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b0d0      	sub	sp, #320	; 0x140
 800a160:	af00      	add	r7, sp, #0
 800a162:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a166:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a16a:	6018      	str	r0, [r3, #0]
 800a16c:	4608      	mov	r0, r1
 800a16e:	4611      	mov	r1, r2
 800a170:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a174:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800a178:	4602      	mov	r2, r0
 800a17a:	701a      	strb	r2, [r3, #0]
 800a17c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a180:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a184:	460a      	mov	r2, r1
 800a186:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a188:	2300      	movs	r3, #0
 800a18a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a18e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a192:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800a19c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a1a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800a1a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1ac:	3342      	adds	r3, #66	; 0x42
 800a1ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800a1b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800a1be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1c2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800a1c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800a1ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1ce:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a1d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800a1d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1da:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800a1de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800a1e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1e6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a1ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800a1ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1f2:	332c      	adds	r3, #44	; 0x2c
 800a1f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800a1f8:	f107 030c 	add.w	r3, r7, #12
 800a1fc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800a20c:	2300      	movs	r3, #0
 800a20e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800a212:	2300      	movs	r3, #0
 800a214:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800a218:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a21c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a220:	f2a2 123d 	subw	r2, r2, #317	; 0x13d
 800a224:	7812      	ldrb	r2, [r2, #0]
 800a226:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800a228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a22c:	791b      	ldrb	r3, [r3, #4]
 800a22e:	b25b      	sxtb	r3, r3
 800a230:	f003 030f 	and.w	r3, r3, #15
 800a234:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800a236:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a23a:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800a23e:	f993 3000 	ldrsb.w	r3, [r3]
 800a242:	4313      	orrs	r3, r2
 800a244:	b25b      	sxtb	r3, r3
 800a246:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800a248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a24c:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800a24e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a252:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800a256:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a25a:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800a25e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a262:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800a266:	2bff      	cmp	r3, #255	; 0xff
 800a268:	d104      	bne.n	800a274 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800a26a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a274:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a278:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	d139      	bne.n	800a2f4 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800a280:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a284:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d133      	bne.n	800a2f4 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800a28c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a290:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800a294:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a298:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800a29c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2a0:	2220      	movs	r2, #32
 800a2a2:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800a2a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2aa:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800a2ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10c      	bne.n	800a2d0 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800a2b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2ba:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800a2c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800a2ce:	e004      	b.n	800a2da <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800a2d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800a2da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a2de:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	2b04      	cmp	r3, #4
 800a2e6:	d805      	bhi.n	800a2f4 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800a2e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a2ec:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a2f0:	2205      	movs	r2, #5
 800a2f2:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a2f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2f8:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d113      	bne.n	800a328 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800a300:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a304:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d10d      	bne.n	800a328 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800a30c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a310:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800a314:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a318:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800a31c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a320:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a324:	2206      	movs	r2, #6
 800a326:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800a328:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a32c:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	3b01      	subs	r3, #1
 800a334:	2b05      	cmp	r3, #5
 800a336:	d827      	bhi.n	800a388 <VL53L1_init_and_start_range+0x22c>
 800a338:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <VL53L1_init_and_start_range+0x1e4>)
 800a33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33e:	bf00      	nop
 800a340:	0800a381 	.word	0x0800a381
 800a344:	0800a379 	.word	0x0800a379
 800a348:	0800a371 	.word	0x0800a371
 800a34c:	0800a369 	.word	0x0800a369
 800a350:	0800a361 	.word	0x0800a361
 800a354:	0800a359 	.word	0x0800a359
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800a358:	2301      	movs	r3, #1
 800a35a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a35e:	e017      	b.n	800a390 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800a360:	230d      	movs	r3, #13
 800a362:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a366:	e013      	b.n	800a390 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800a368:	2324      	movs	r3, #36	; 0x24
 800a36a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a36e:	e00f      	b.n	800a390 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800a370:	2344      	movs	r3, #68	; 0x44
 800a372:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a376:	e00b      	b.n	800a390 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800a378:	235a      	movs	r3, #90	; 0x5a
 800a37a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a37e:	e007      	b.n	800a390 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800a380:	2371      	movs	r3, #113	; 0x71
 800a382:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a386:	e003      	b.n	800a390 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800a388:	2383      	movs	r3, #131	; 0x83
 800a38a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a38e:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800a390:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a394:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800a398:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800a39c:	f107 030c 	add.w	r3, r7, #12
 800a3a0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800a3aa:	e00b      	b.n	800a3c4 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 800a3ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a3b0:	1c5a      	adds	r2, r3, #1
 800a3b2:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800a3ba:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800a3be:	3301      	adds	r3, #1
 800a3c0:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800a3c4:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800a3c8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d3ed      	bcc.n	800a3ac <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800a3d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a3d4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	2b05      	cmp	r3, #5
 800a3dc:	d917      	bls.n	800a40e <VL53L1_init_and_start_range+0x2b2>
 800a3de:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d113      	bne.n	800a40e <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a3e6:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a3ea:	f1c3 0301 	rsb	r3, r3, #1
 800a3ee:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a3f2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800a3f6:	f107 020c 	add.w	r2, r7, #12
 800a3fa:	4413      	add	r3, r2
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	210b      	movs	r1, #11
 800a400:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800a404:	f002 f8d4 	bl	800c5b0 <VL53L1_i2c_encode_static_nvm_managed>
 800a408:	4603      	mov	r3, r0
 800a40a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800a40e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a412:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	2b04      	cmp	r3, #4
 800a41a:	d917      	bls.n	800a44c <VL53L1_init_and_start_range+0x2f0>
 800a41c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a420:	2b00      	cmp	r3, #0
 800a422:	d113      	bne.n	800a44c <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a424:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a428:	f1c3 030d 	rsb	r3, r3, #13
 800a42c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a430:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800a434:	f107 020c 	add.w	r2, r7, #12
 800a438:	4413      	add	r3, r2
 800a43a:	461a      	mov	r2, r3
 800a43c:	2117      	movs	r1, #23
 800a43e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a442:	f002 f991 	bl	800c768 <VL53L1_i2c_encode_customer_nvm_managed>
 800a446:	4603      	mov	r3, r0
 800a448:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800a44c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a450:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b03      	cmp	r3, #3
 800a458:	d917      	bls.n	800a48a <VL53L1_init_and_start_range+0x32e>
 800a45a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d113      	bne.n	800a48a <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a462:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a466:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800a46a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a46e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800a472:	f107 020c 	add.w	r2, r7, #12
 800a476:	4413      	add	r3, r2
 800a478:	461a      	mov	r2, r3
 800a47a:	2120      	movs	r1, #32
 800a47c:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800a480:	f002 fab0 	bl	800c9e4 <VL53L1_i2c_encode_static_config>
 800a484:	4603      	mov	r3, r0
 800a486:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800a48a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a48e:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b02      	cmp	r3, #2
 800a496:	d917      	bls.n	800a4c8 <VL53L1_init_and_start_range+0x36c>
 800a498:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d113      	bne.n	800a4c8 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800a4a0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a4a4:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800a4a8:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a4ac:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800a4b0:	f107 020c 	add.w	r2, r7, #12
 800a4b4:	4413      	add	r3, r2
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	2116      	movs	r1, #22
 800a4ba:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800a4be:	f002 fb74 	bl	800cbaa <VL53L1_i2c_encode_general_config>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800a4c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a4cc:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d917      	bls.n	800a506 <VL53L1_init_and_start_range+0x3aa>
 800a4d6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d113      	bne.n	800a506 <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a4de:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a4e2:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800a4e6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a4ea:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800a4ee:	f107 020c 	add.w	r2, r7, #12
 800a4f2:	4413      	add	r3, r2
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	2117      	movs	r1, #23
 800a4f8:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a4fc:	f002 fbd9 	bl	800ccb2 <VL53L1_i2c_encode_timing_config>
 800a500:	4603      	mov	r3, r0
 800a502:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800a506:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a50a:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d036      	beq.n	800a582 <VL53L1_init_and_start_range+0x426>
 800a514:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d132      	bne.n	800a582 <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a51c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a520:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800a524:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800a528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a52c:	791b      	ldrb	r3, [r3, #4]
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b00      	cmp	r3, #0
 800a534:	d017      	beq.n	800a566 <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800a536:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a53a:	789b      	ldrb	r3, [r3, #2]
 800a53c:	f043 0301 	orr.w	r3, r3, #1
 800a540:	b2da      	uxtb	r2, r3
 800a542:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a546:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800a548:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a54c:	789b      	ldrb	r3, [r3, #2]
 800a54e:	f043 0301 	orr.w	r3, r3, #1
 800a552:	b2da      	uxtb	r2, r3
 800a554:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a558:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800a55a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a55e:	789a      	ldrb	r2, [r3, #2]
 800a560:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a564:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a566:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800a56a:	f107 020c 	add.w	r2, r7, #12
 800a56e:	4413      	add	r3, r2
 800a570:	461a      	mov	r2, r3
 800a572:	2112      	movs	r1, #18
 800a574:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800a578:	f002 fc1d 	bl	800cdb6 <VL53L1_i2c_encode_dynamic_config>
 800a57c:	4603      	mov	r3, r0
 800a57e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800a582:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a586:	2b00      	cmp	r3, #0
 800a588:	d113      	bne.n	800a5b2 <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 800a58a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a58e:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800a592:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a596:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800a59a:	f107 020c 	add.w	r2, r7, #12
 800a59e:	4413      	add	r3, r2
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	2105      	movs	r1, #5
 800a5a4:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800a5a8:	f002 fc8a 	bl	800cec0 <VL53L1_i2c_encode_system_control>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800a5b2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10f      	bne.n	800a5da <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 800a5ba:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800a5be:	f107 020c 	add.w	r2, r7, #12
 800a5c2:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800a5c6:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800a5ca:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 800a5ce:	6800      	ldr	r0, [r0, #0]
 800a5d0:	f003 f972 	bl	800d8b8 <VL53L1_WriteMulti>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800a5da:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d109      	bne.n	800a5f6 <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800a5e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a5e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a5ea:	6818      	ldr	r0, [r3, #0]
 800a5ec:	f001 f9a0 	bl	800b930 <VL53L1_update_ll_driver_rd_state>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800a5f6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d109      	bne.n	800a612 <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800a5fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a602:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a606:	6818      	ldr	r0, [r3, #0]
 800a608:	f001 fa65 	bl	800bad6 <VL53L1_update_ll_driver_cfg_state>
 800a60c:	4603      	mov	r3, r0
 800a60e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800a612:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800a616:	4618      	mov	r0, r3
 800a618:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b0c8      	sub	sp, #288	; 0x120
 800a624:	af00      	add	r7, sp, #0
 800a626:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a62a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a62e:	6018      	str	r0, [r3, #0]
 800a630:	460a      	mov	r2, r1
 800a632:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a636:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a63a:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a63c:	2300      	movs	r3, #0
 800a63e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a642:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a646:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800a650:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a654:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800a658:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800a65c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a660:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a664:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800a668:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a66c:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800a670:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800a674:	2388      	movs	r3, #136	; 0x88
 800a676:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800a680:	2300      	movs	r3, #0
 800a682:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800a686:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a68a:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d008      	beq.n	800a6a6 <VL53L1_get_measurement_results+0x86>
 800a694:	2b02      	cmp	r3, #2
 800a696:	d10d      	bne.n	800a6b4 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800a698:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a69c:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800a6a0:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800a6a4:	e00a      	b.n	800a6bc <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800a6a6:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a6aa:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800a6ae:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800a6b2:	e003      	b.n	800a6bc <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 800a6b4:	232c      	movs	r3, #44	; 0x2c
 800a6b6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800a6ba:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800a6bc:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10f      	bne.n	800a6e4 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 800a6c4:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800a6c8:	f107 0208 	add.w	r2, r7, #8
 800a6cc:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800a6d0:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800a6d4:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 800a6d8:	6800      	ldr	r0, [r0, #0]
 800a6da:	f003 f923 	bl	800d924 <VL53L1_ReadMulti>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800a6e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a6e8:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d917      	bls.n	800a722 <VL53L1_get_measurement_results+0x102>
 800a6f2:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d113      	bne.n	800a722 <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800a6fa:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a6fe:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800a702:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800a706:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800a70a:	f107 0208 	add.w	r2, r7, #8
 800a70e:	4413      	add	r3, r2
 800a710:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800a714:	4619      	mov	r1, r3
 800a716:	2038      	movs	r0, #56	; 0x38
 800a718:	f002 fd64 	bl	800d1e4 <VL53L1_i2c_decode_debug_results>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800a722:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a726:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d017      	beq.n	800a760 <VL53L1_get_measurement_results+0x140>
 800a730:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800a734:	2b00      	cmp	r3, #0
 800a736:	d113      	bne.n	800a760 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800a738:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a73c:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800a740:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800a744:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800a748:	f107 0208 	add.w	r2, r7, #8
 800a74c:	4413      	add	r3, r2
 800a74e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800a752:	4619      	mov	r1, r3
 800a754:	2021      	movs	r0, #33	; 0x21
 800a756:	f002 fce4 	bl	800d122 <VL53L1_i2c_decode_core_results>
 800a75a:	4603      	mov	r3, r0
 800a75c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800a760:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800a764:	2b00      	cmp	r3, #0
 800a766:	d110      	bne.n	800a78a <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 800a768:	2300      	movs	r3, #0
 800a76a:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800a76e:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800a772:	f107 0208 	add.w	r2, r7, #8
 800a776:	4413      	add	r3, r2
 800a778:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800a77c:	4619      	mov	r1, r3
 800a77e:	202c      	movs	r0, #44	; 0x2c
 800a780:	f002 fbd9 	bl	800cf36 <VL53L1_i2c_decode_system_results>
 800a784:	4603      	mov	r3, r0
 800a786:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a78a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800a78e:	4618      	mov	r0, r3
 800a790:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b088      	sub	sp, #32
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	60f8      	str	r0, [r7, #12]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	607a      	str	r2, [r7, #4]
 800a7a4:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800a7b4:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800a7ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d106      	bne.n	800a7d0 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800a7c2:	7afb      	ldrb	r3, [r7, #11]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f7ff ff2a 	bl	800a620 <VL53L1_get_measurement_results>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800a7d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d10c      	bne.n	800a7f2 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800a7de:	4618      	mov	r0, r3
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	f000 f85d 	bl	800a8ac <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d11f      	bne.n	800a83c <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800a7fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10e      	bne.n	800a822 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d109      	bne.n	800a822 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f001 fe33 	bl	800c47a <VL53L1_low_power_auto_setup_manual_calibration>
 800a814:	4603      	mov	r3, r0
 800a816:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800a820:	e00c      	b.n	800a83c <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800a822:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d108      	bne.n	800a83c <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800a830:	2b01      	cmp	r3, #1
 800a832:	d103      	bne.n	800a83c <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	2202      	movs	r2, #2
 800a838:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800a846:	69bb      	ldr	r3, [r7, #24]
 800a848:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800a850:	2284      	movs	r2, #132	; 0x84
 800a852:	6939      	ldr	r1, [r7, #16]
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f003 fa3d 	bl	800dcd4 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800a85a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d104      	bne.n	800a86c <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f001 f8ec 	bl	800ba40 <VL53L1_check_ll_driver_rd_state>
 800a868:	4603      	mov	r3, r0
 800a86a:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800a86c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3720      	adds	r7, #32
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a884:	2300      	movs	r3, #0
 800a886:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800a888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d107      	bne.n	800a8a0 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800a890:	78fb      	ldrb	r3, [r7, #3]
 800a892:	2203      	movs	r2, #3
 800a894:	4619      	mov	r1, r3
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff fc60 	bl	800a15c <VL53L1_init_and_start_range>
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800a8a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3710      	adds	r7, #16
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b089      	sub	sp, #36	; 0x24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
 800a8b8:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	78da      	ldrb	r2, [r3, #3]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	77fb      	strb	r3, [r7, #31]
 800a8d8:	e0d0      	b.n	800aa7c <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	7ffa      	ldrb	r2, [r7, #31]
 800a8de:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	78db      	ldrb	r3, [r3, #3]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10a      	bne.n	800a904 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	785b      	ldrb	r3, [r3, #1]
 800a8f2:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800a8f6:	2b09      	cmp	r3, #9
 800a8f8:	d104      	bne.n	800a904 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	2213      	movs	r2, #19
 800a8fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a902:	e007      	b.n	800a914 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	785b      	ldrb	r3, [r3, #1]
 800a908:	f003 031f 	and.w	r3, r3, #31
 800a90c:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800a914:	7ffb      	ldrb	r3, [r7, #31]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d05d      	beq.n	800a9da <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800a91e:	e0a7      	b.n	800aa70 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	789b      	ldrb	r3, [r3, #2]
 800a924:	2b07      	cmp	r3, #7
 800a926:	d104      	bne.n	800a932 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	821a      	strh	r2, [r3, #16]
 800a930:	e00c      	b.n	800a94c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	789b      	ldrb	r3, [r3, #2]
 800a936:	2b08      	cmp	r3, #8
 800a938:	d104      	bne.n	800a944 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	821a      	strh	r2, [r3, #16]
 800a942:	e003      	b.n	800a94c <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	895b      	ldrh	r3, [r3, #10]
 800a968:	015b      	lsls	r3, r3, #5
 800a96a:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a972:	d302      	bcc.n	800a97a <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800a974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a978:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800a98e:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	fb02 f303 	mul.w	r3, r2, r3
 800a998:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a9a0:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	da01      	bge.n	800a9ac <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800a9a8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800a9ac:	12db      	asrs	r3, r3, #11
 800a9ae:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	b21a      	sxth	r2, r3
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	621a      	str	r2, [r3, #32]

			break;
 800a9d8:	e04a      	b.n	800aa70 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800a9ea:	69bb      	ldr	r3, [r7, #24]
 800a9ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9f0:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	8bdb      	ldrh	r3, [r3, #30]
 800a9fe:	015b      	lsls	r3, r3, #5
 800aa00:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa08:	d302      	bcc.n	800aa10 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800aa0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa0e:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800aa24:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	fb02 f303 	mul.w	r3, r2, r3
 800aa2e:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa36:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	da01      	bge.n	800aa42 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800aa3e:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800aa42:	12db      	asrs	r3, r3, #11
 800aa44:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	b21a      	sxth	r2, r3
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	621a      	str	r2, [r3, #32]

			break;
 800aa6e:	bf00      	nop
		}

		pdata++;
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	3340      	adds	r3, #64	; 0x40
 800aa74:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800aa76:	7ffb      	ldrb	r3, [r7, #31]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	77fb      	strb	r3, [r7, #31]
 800aa7c:	7ffb      	ldrb	r3, [r7, #31]
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	f67f af2b 	bls.w	800a8da <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	2200      	movs	r2, #0
 800aa88:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	785b      	ldrb	r3, [r3, #1]
 800aa8e:	f003 031f 	and.w	r3, r3, #31
 800aa92:	2b11      	cmp	r3, #17
 800aa94:	bf8c      	ite	hi
 800aa96:	2201      	movhi	r2, #1
 800aa98:	2200      	movls	r2, #0
 800aa9a:	b2d2      	uxtb	r2, r2
 800aa9c:	2a00      	cmp	r2, #0
 800aa9e:	d116      	bne.n	800aace <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	409a      	lsls	r2, r3
 800aaa4:	4b0d      	ldr	r3, [pc, #52]	; (800aadc <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800aaa6:	4013      	ands	r3, r2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	bf14      	ite	ne
 800aaac:	2301      	movne	r3, #1
 800aaae:	2300      	moveq	r3, #0
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00b      	beq.n	800aace <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	785b      	ldrb	r3, [r3, #1]
 800aaba:	f003 031f 	and.w	r3, r3, #31
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800aacc:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800aace:	bf00      	nop
 800aad0:	3724      	adds	r7, #36	; 0x24
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	0002200e 	.word	0x0002200e

0800aae0 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b087      	sub	sp, #28
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	60f8      	str	r0, [r7, #12]
 800aae8:	460b      	mov	r3, r1
 800aaea:	607a      	str	r2, [r7, #4]
 800aaec:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800aaf6:	897b      	ldrh	r3, [r7, #10]
 800aaf8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800aafc:	2b38      	cmp	r3, #56	; 0x38
 800aafe:	f200 8204 	bhi.w	800af0a <VL53L1_get_tuning_parm+0x42a>
 800ab02:	a201      	add	r2, pc, #4	; (adr r2, 800ab08 <VL53L1_get_tuning_parm+0x28>)
 800ab04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab08:	0800abed 	.word	0x0800abed
 800ab0c:	0800abfb 	.word	0x0800abfb
 800ab10:	0800ac09 	.word	0x0800ac09
 800ab14:	0800ac17 	.word	0x0800ac17
 800ab18:	0800ac25 	.word	0x0800ac25
 800ab1c:	0800ac33 	.word	0x0800ac33
 800ab20:	0800ac41 	.word	0x0800ac41
 800ab24:	0800ac4f 	.word	0x0800ac4f
 800ab28:	0800ac5d 	.word	0x0800ac5d
 800ab2c:	0800ac6b 	.word	0x0800ac6b
 800ab30:	0800ac79 	.word	0x0800ac79
 800ab34:	0800ac87 	.word	0x0800ac87
 800ab38:	0800ac95 	.word	0x0800ac95
 800ab3c:	0800aca3 	.word	0x0800aca3
 800ab40:	0800acb1 	.word	0x0800acb1
 800ab44:	0800acbf 	.word	0x0800acbf
 800ab48:	0800accd 	.word	0x0800accd
 800ab4c:	0800acdb 	.word	0x0800acdb
 800ab50:	0800ace9 	.word	0x0800ace9
 800ab54:	0800acf7 	.word	0x0800acf7
 800ab58:	0800ad05 	.word	0x0800ad05
 800ab5c:	0800ad13 	.word	0x0800ad13
 800ab60:	0800ad21 	.word	0x0800ad21
 800ab64:	0800ad2f 	.word	0x0800ad2f
 800ab68:	0800ad3d 	.word	0x0800ad3d
 800ab6c:	0800ad4b 	.word	0x0800ad4b
 800ab70:	0800ad59 	.word	0x0800ad59
 800ab74:	0800ad67 	.word	0x0800ad67
 800ab78:	0800ad75 	.word	0x0800ad75
 800ab7c:	0800ad83 	.word	0x0800ad83
 800ab80:	0800ad91 	.word	0x0800ad91
 800ab84:	0800ad9f 	.word	0x0800ad9f
 800ab88:	0800adad 	.word	0x0800adad
 800ab8c:	0800adbb 	.word	0x0800adbb
 800ab90:	0800adc9 	.word	0x0800adc9
 800ab94:	0800add7 	.word	0x0800add7
 800ab98:	0800ade5 	.word	0x0800ade5
 800ab9c:	0800adf3 	.word	0x0800adf3
 800aba0:	0800ae01 	.word	0x0800ae01
 800aba4:	0800ae0f 	.word	0x0800ae0f
 800aba8:	0800ae1d 	.word	0x0800ae1d
 800abac:	0800ae2b 	.word	0x0800ae2b
 800abb0:	0800ae39 	.word	0x0800ae39
 800abb4:	0800ae47 	.word	0x0800ae47
 800abb8:	0800ae55 	.word	0x0800ae55
 800abbc:	0800ae63 	.word	0x0800ae63
 800abc0:	0800ae71 	.word	0x0800ae71
 800abc4:	0800ae7f 	.word	0x0800ae7f
 800abc8:	0800ae8d 	.word	0x0800ae8d
 800abcc:	0800ae9b 	.word	0x0800ae9b
 800abd0:	0800aea9 	.word	0x0800aea9
 800abd4:	0800aeb7 	.word	0x0800aeb7
 800abd8:	0800aec5 	.word	0x0800aec5
 800abdc:	0800aed3 	.word	0x0800aed3
 800abe0:	0800aee1 	.word	0x0800aee1
 800abe4:	0800aeef 	.word	0x0800aeef
 800abe8:	0800aefd 	.word	0x0800aefd

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800abf2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	601a      	str	r2, [r3, #0]
	break;
 800abf8:	e18e      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800ac00:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	601a      	str	r2, [r3, #0]
	break;
 800ac06:	e187      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800ac0e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	601a      	str	r2, [r3, #0]
	break;
 800ac14:	e180      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800ac1c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	601a      	str	r2, [r3, #0]
	break;
 800ac22:	e179      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ac2a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	601a      	str	r2, [r3, #0]
	break;
 800ac30:	e172      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800ac38:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	601a      	str	r2, [r3, #0]
	break;
 800ac3e:	e16b      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ac46:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	601a      	str	r2, [r3, #0]
	break;
 800ac4c:	e164      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800ac54:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	601a      	str	r2, [r3, #0]
	break;
 800ac5a:	e15d      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800ac62:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	601a      	str	r2, [r3, #0]
	break;
 800ac68:	e156      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800ac70:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	601a      	str	r2, [r3, #0]
	break;
 800ac76:	e14f      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800ac7e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	601a      	str	r2, [r3, #0]
	break;
 800ac84:	e148      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800ac8c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	601a      	str	r2, [r3, #0]
	break;
 800ac92:	e141      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800ac9a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	601a      	str	r2, [r3, #0]
	break;
 800aca0:	e13a      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800aca8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	601a      	str	r2, [r3, #0]
	break;
 800acae:	e133      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800acb6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	601a      	str	r2, [r3, #0]
	break;
 800acbc:	e12c      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800acc4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	601a      	str	r2, [r3, #0]
	break;
 800acca:	e125      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800acd2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	601a      	str	r2, [r3, #0]
	break;
 800acd8:	e11e      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800ace0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	601a      	str	r2, [r3, #0]
	break;
 800ace6:	e117      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800acee:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	601a      	str	r2, [r3, #0]
	break;
 800acf4:	e110      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800acfc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	601a      	str	r2, [r3, #0]
	break;
 800ad02:	e109      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800ad0a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	601a      	str	r2, [r3, #0]
	break;
 800ad10:	e102      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800ad18:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	601a      	str	r2, [r3, #0]
	break;
 800ad1e:	e0fb      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800ad26:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	601a      	str	r2, [r3, #0]
	break;
 800ad2c:	e0f4      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800ad34:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	601a      	str	r2, [r3, #0]
	break;
 800ad3a:	e0ed      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800ad42:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	601a      	str	r2, [r3, #0]
	break;
 800ad48:	e0e6      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800ad4a:	693b      	ldr	r3, [r7, #16]
 800ad4c:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ad50:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	601a      	str	r2, [r3, #0]
	break;
 800ad56:	e0df      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800ad5e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	601a      	str	r2, [r3, #0]
	break;
 800ad64:	e0d8      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800ad6c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	601a      	str	r2, [r3, #0]
	break;
 800ad72:	e0d1      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800ad7a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	601a      	str	r2, [r3, #0]
	break;
 800ad80:	e0ca      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ad88:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	601a      	str	r2, [r3, #0]
	break;
 800ad8e:	e0c3      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ad96:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	601a      	str	r2, [r3, #0]
	break;
 800ad9c:	e0bc      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800ada4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	601a      	str	r2, [r3, #0]
	break;
 800adaa:	e0b5      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800adb2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	601a      	str	r2, [r3, #0]
	break;
 800adb8:	e0ae      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800adc0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	601a      	str	r2, [r3, #0]
	break;
 800adc6:	e0a7      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800adce:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	601a      	str	r2, [r3, #0]
	break;
 800add4:	e0a0      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800addc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	601a      	str	r2, [r3, #0]
	break;
 800ade2:	e099      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800adea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	601a      	str	r2, [r3, #0]
	break;
 800adf0:	e092      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800adf8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	601a      	str	r2, [r3, #0]
	break;
 800adfe:	e08b      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ae06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	601a      	str	r2, [r3, #0]
	break;
 800ae0c:	e084      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800ae14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	601a      	str	r2, [r3, #0]
	break;
 800ae1a:	e07d      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ae22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	601a      	str	r2, [r3, #0]
	break;
 800ae28:	e076      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800ae30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	601a      	str	r2, [r3, #0]
	break;
 800ae36:	e06f      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800ae3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	601a      	str	r2, [r3, #0]
	break;
 800ae44:	e068      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800ae4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	601a      	str	r2, [r3, #0]
	break;
 800ae52:	e061      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800ae5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	601a      	str	r2, [r3, #0]
	break;
 800ae60:	e05a      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800ae68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	601a      	str	r2, [r3, #0]
	break;
 800ae6e:	e053      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800ae76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	601a      	str	r2, [r3, #0]
	break;
 800ae7c:	e04c      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800ae84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	601a      	str	r2, [r3, #0]
	break;
 800ae8a:	e045      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ae92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	601a      	str	r2, [r3, #0]
	break;
 800ae98:	e03e      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800aea0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	601a      	str	r2, [r3, #0]
	break;
 800aea6:	e037      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800aeae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	601a      	str	r2, [r3, #0]
	break;
 800aeb4:	e030      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800aebc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	601a      	str	r2, [r3, #0]
	break;
 800aec2:	e029      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aeca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	601a      	str	r2, [r3, #0]
	break;
 800aed0:	e022      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aed8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	601a      	str	r2, [r3, #0]
	break;
 800aede:	e01b      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800aee6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	601a      	str	r2, [r3, #0]
	break;
 800aeec:	e014      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aef4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	601a      	str	r2, [r3, #0]
	break;
 800aefa:	e00d      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800af02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	601a      	str	r2, [r3, #0]
	break;
 800af08:	e006      	b.n	800af18 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800af10:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800af12:	23fc      	movs	r3, #252	; 0xfc
 800af14:	75fb      	strb	r3, [r7, #23]
	break;
 800af16:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800af18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	371c      	adds	r7, #28
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af30:	2300      	movs	r3, #0
 800af32:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2208      	movs	r2, #8
 800af38:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	220b      	movs	r2, #11
 800af3e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af46:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800af4e:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800af56:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800af5e:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800af60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af78:	2300      	movs	r3, #0
 800af7a:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2200      	movs	r2, #0
 800af80:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2212      	movs	r2, #18
 800af86:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	220f      	movs	r2, #15
 800af8c:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2202      	movs	r2, #2
 800af92:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800af9a:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	220c      	movs	r2, #12
 800afa0:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800afa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3714      	adds	r7, #20
 800afaa:	46bd      	mov	sp, r7
 800afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb0:	4770      	bx	lr

0800afb2 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	895b      	ldrh	r3, [r3, #10]
 800afc4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	895b      	ldrh	r3, [r3, #10]
 800afe2:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	2200      	movs	r2, #0
 800b000:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2240      	movs	r2, #64	; 0x40
 800b006:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10d      	bne.n	800b02c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d108      	bne.n	800b02c <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d103      	bne.n	800b02c <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	2200      	movs	r2, #0
 800b028:	741a      	strb	r2, [r3, #16]
 800b02a:	e002      	b.n	800b032 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	2201      	movs	r2, #1
 800b030:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800b032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d114      	bne.n	800b064 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d110      	bne.n	800b064 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	6818      	ldr	r0, [r3, #0]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	7d1b      	ldrb	r3, [r3, #20]
 800b056:	f000 ffc9 	bl	800bfec <VL53L1_calc_range_ignore_threshold>
 800b05a:	4603      	mov	r3, r0
 800b05c:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	82da      	strh	r2, [r3, #22]
 800b062:	e002      	b.n	800b06a <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	2200      	movs	r2, #0
 800b068:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b06a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}

0800b076 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800b076:	b480      	push	{r7}
 800b078:	b085      	sub	sp, #20
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b07e:	2300      	movs	r3, #0
 800b080:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b088:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b090:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b098:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b0a0:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2208      	movs	r2, #8
 800b0a6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2228      	movs	r2, #40	; 0x28
 800b0ac:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2209      	movs	r2, #9
 800b0b2:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b0b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr

0800b0c4 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	b085      	sub	sp, #20
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f248 0203 	movw	r2, #32771	; 0x8003
 800b0d6:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f248 0201 	movw	r2, #32769	; 0x8001
 800b0de:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f248 0241 	movw	r2, #32833	; 0x8041
 800b0e6:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	220e      	movs	r2, #14
 800b0ec:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2206      	movs	r2, #6
 800b0f8:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	220e      	movs	r2, #14
 800b0fe:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	220a      	movs	r2, #10
 800b104:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2206      	movs	r2, #6
 800b10a:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2202      	movs	r2, #2
 800b110:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2221      	movs	r2, #33	; 0x21
 800b116:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b12a:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b132:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b13a:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	22c0      	movs	r2, #192	; 0xc0
 800b140:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	22c0      	movs	r2, #192	; 0xc0
 800b146:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	22c0      	movs	r2, #192	; 0xc0
 800b14c:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2208      	movs	r2, #8
 800b152:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2210      	movs	r2, #16
 800b158:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2202      	movs	r2, #2
 800b166:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2202      	movs	r2, #2
 800b176:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b188:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b190:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f248 0230 	movw	r2, #32816	; 0x8030
 800b198:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b1a0:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b1a8:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b1b0:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f24f 6218 	movw	r2, #63000	; 0xf618
 800b1b8:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b1c0:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800b1c8:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800b1d0:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800b1d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3714      	adds	r7, #20
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b087      	sub	sp, #28
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]
 800b1ee:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b1fa:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2200      	movs	r2, #0
 800b200:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2200      	movs	r2, #0
 800b218:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2200      	movs	r2, #0
 800b224:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	2200      	movs	r2, #0
 800b22a:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2200      	movs	r2, #0
 800b236:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2211      	movs	r2, #17
 800b23c:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2202      	movs	r2, #2
 800b242:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2202      	movs	r2, #2
 800b24e:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2208      	movs	r2, #8
 800b254:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2200      	movs	r2, #0
 800b25a:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26e:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	2201      	movs	r2, #1
 800b27a:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	22ff      	movs	r2, #255	; 0xff
 800b292:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800b294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b296:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	220b      	movs	r2, #11
 800b2cc:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d0:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	2202      	movs	r2, #2
 800b2da:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	220d      	movs	r2, #13
 800b2e0:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	2200      	movs	r2, #0
 800b300:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800b308:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	2200      	movs	r2, #0
 800b30e:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	2238      	movs	r2, #56	; 0x38
 800b314:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	22ff      	movs	r2, #255	; 0xff
 800b31a:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	2201      	movs	r2, #1
 800b320:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	221a      	movs	r2, #26
 800b32c:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2220      	movs	r2, #32
 800b338:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2201      	movs	r2, #1
 800b33e:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	22cc      	movs	r2, #204	; 0xcc
 800b344:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	220b      	movs	r2, #11
 800b34a:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	22f5      	movs	r2, #245	; 0xf5
 800b356:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2209      	movs	r2, #9
 800b35c:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800b35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b360:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800b366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b368:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2208      	movs	r2, #8
 800b372:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2278      	movs	r2, #120	; 0x78
 800b378:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	2201      	movs	r2, #1
 800b38a:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	2200      	movs	r2, #0
 800b390:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2200      	movs	r2, #0
 800b396:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	2200      	movs	r2, #0
 800b39c:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800b39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	220b      	movs	r2, #11
 800b3ac:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	2209      	movs	r2, #9
 800b3b2:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b6:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	22c7      	movs	r2, #199	; 0xc7
 800b3e2:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	22ff      	movs	r2, #255	; 0xff
 800b3e8:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	22db      	movs	r2, #219	; 0xdb
 800b3ee:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800b3f6:	6a3b      	ldr	r3, [r7, #32]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800b3fc:	6a3b      	ldr	r3, [r7, #32]
 800b3fe:	2201      	movs	r2, #1
 800b400:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800b402:	6a3b      	ldr	r3, [r7, #32]
 800b404:	2201      	movs	r2, #1
 800b406:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800b408:	6a3b      	ldr	r3, [r7, #32]
 800b40a:	2221      	movs	r2, #33	; 0x21
 800b40c:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800b40e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b412:	4618      	mov	r0, r3
 800b414:	371c      	adds	r7, #28
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr

0800b41e <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b41e:	b580      	push	{r7, lr}
 800b420:	b088      	sub	sp, #32
 800b422:	af02      	add	r7, sp, #8
 800b424:	60f8      	str	r0, [r7, #12]
 800b426:	60b9      	str	r1, [r7, #8]
 800b428:	607a      	str	r2, [r7, #4]
 800b42a:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b42c:	2300      	movs	r3, #0
 800b42e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	9301      	str	r3, [sp, #4]
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	9300      	str	r3, [sp, #0]
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	68b9      	ldr	r1, [r7, #8]
 800b43e:	68f8      	ldr	r0, [r7, #12]
 800b440:	f7ff fecf 	bl	800b1e2 <VL53L1_preset_mode_standard_ranging>
 800b444:	4603      	mov	r3, r0
 800b446:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b448:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d121      	bne.n	800b494 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2207      	movs	r2, #7
 800b454:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2205      	movs	r2, #5
 800b45a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800b464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b466:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2208      	movs	r2, #8
 800b470:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2238      	movs	r2, #56	; 0x38
 800b476:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	2207      	movs	r2, #7
 800b47c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	2205      	movs	r2, #5
 800b482:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b494:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b088      	sub	sp, #32
 800b4a4:	af02      	add	r7, sp, #8
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b4:	9301      	str	r3, [sp, #4]
 800b4b6:	6a3b      	ldr	r3, [r7, #32]
 800b4b8:	9300      	str	r3, [sp, #0]
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	68b9      	ldr	r1, [r7, #8]
 800b4c0:	68f8      	ldr	r0, [r7, #12]
 800b4c2:	f7ff fe8e 	bl	800b1e2 <VL53L1_preset_mode_standard_ranging>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b4ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d121      	bne.n	800b516 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	220f      	movs	r2, #15
 800b4d6:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	220d      	movs	r2, #13
 800b4dc:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e8:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2208      	movs	r2, #8
 800b4f2:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	22b8      	movs	r2, #184	; 0xb8
 800b4f8:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	220f      	movs	r2, #15
 800b4fe:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	220d      	movs	r2, #13
 800b504:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800b50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b510:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b516:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3718      	adds	r7, #24
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b088      	sub	sp, #32
 800b526:	af02      	add	r7, sp, #8
 800b528:	60f8      	str	r0, [r7, #12]
 800b52a:	60b9      	str	r1, [r7, #8]
 800b52c:	607a      	str	r2, [r7, #4]
 800b52e:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b530:	2300      	movs	r3, #0
 800b532:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	9301      	str	r3, [sp, #4]
 800b538:	6a3b      	ldr	r3, [r7, #32]
 800b53a:	9300      	str	r3, [sp, #0]
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	68b9      	ldr	r1, [r7, #8]
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f7ff fe4d 	bl	800b1e2 <VL53L1_preset_mode_standard_ranging>
 800b548:	4603      	mov	r3, r0
 800b54a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b54c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d105      	bne.n	800b560 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	2202      	movs	r2, #2
 800b558:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	223b      	movs	r2, #59	; 0x3b
 800b55e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b560:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b564:	4618      	mov	r0, r3
 800b566:	3718      	adds	r7, #24
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}

0800b56c <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af02      	add	r7, sp, #8
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
 800b578:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b57a:	2300      	movs	r3, #0
 800b57c:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b580:	9301      	str	r3, [sp, #4]
 800b582:	6a3b      	ldr	r3, [r7, #32]
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	68b9      	ldr	r1, [r7, #8]
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f7ff fe28 	bl	800b1e2 <VL53L1_preset_mode_standard_ranging>
 800b592:	4603      	mov	r3, r0
 800b594:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b596:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d105      	bne.n	800b5aa <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	2202      	movs	r2, #2
 800b5a2:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	225b      	movs	r2, #91	; 0x5b
 800b5a8:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b5aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3718      	adds	r7, #24
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b088      	sub	sp, #32
 800b5ba:	af02      	add	r7, sp, #8
 800b5bc:	60f8      	str	r0, [r7, #12]
 800b5be:	60b9      	str	r1, [r7, #8]
 800b5c0:	607a      	str	r2, [r7, #4]
 800b5c2:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800b5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ca:	9301      	str	r3, [sp, #4]
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	9300      	str	r3, [sp, #0]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	68b9      	ldr	r1, [r7, #8]
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f7ff fe03 	bl	800b1e2 <VL53L1_preset_mode_standard_ranging>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b5e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d11a      	bne.n	800b61e <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	22b1      	movs	r2, #177	; 0xb1
 800b5f8:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	22d4      	movs	r2, #212	; 0xd4
 800b604:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b60c:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b610:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800b618:	6a3b      	ldr	r3, [r7, #32]
 800b61a:	2240      	movs	r2, #64	; 0x40
 800b61c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b61e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3718      	adds	r7, #24
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b088      	sub	sp, #32
 800b62e:	af02      	add	r7, sp, #8
 800b630:	60f8      	str	r0, [r7, #12]
 800b632:	60b9      	str	r1, [r7, #8]
 800b634:	607a      	str	r2, [r7, #4]
 800b636:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b638:	2300      	movs	r3, #0
 800b63a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800b63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63e:	9301      	str	r3, [sp, #4]
 800b640:	6a3b      	ldr	r3, [r7, #32]
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	687a      	ldr	r2, [r7, #4]
 800b648:	68b9      	ldr	r1, [r7, #8]
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f7ff fee7 	bl	800b41e <VL53L1_preset_mode_standard_ranging_short_range>
 800b650:	4603      	mov	r3, r0
 800b652:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d11a      	bne.n	800b692 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	2200      	movs	r2, #0
 800b660:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2284      	movs	r2, #132	; 0x84
 800b66c:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2201      	movs	r2, #1
 800b672:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	22b1      	movs	r2, #177	; 0xb1
 800b678:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b680:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b684:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800b68c:	6a3b      	ldr	r3, [r7, #32]
 800b68e:	2240      	movs	r2, #64	; 0x40
 800b690:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b696:	4618      	mov	r0, r3
 800b698:	3718      	adds	r7, #24
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b088      	sub	sp, #32
 800b6a2:	af02      	add	r7, sp, #8
 800b6a4:	60f8      	str	r0, [r7, #12]
 800b6a6:	60b9      	str	r1, [r7, #8]
 800b6a8:	607a      	str	r2, [r7, #4]
 800b6aa:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	9301      	str	r3, [sp, #4]
 800b6b4:	6a3b      	ldr	r3, [r7, #32]
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	68b9      	ldr	r1, [r7, #8]
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f7ff feee 	bl	800b4a0 <VL53L1_preset_mode_standard_ranging_long_range>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b6c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d11a      	bne.n	800b706 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2297      	movs	r2, #151	; 0x97
 800b6e0:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	22b1      	movs	r2, #177	; 0xb1
 800b6ec:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b6f4:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	2240      	movs	r2, #64	; 0x40
 800b704:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b706:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3718      	adds	r7, #24
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b088      	sub	sp, #32
 800b716:	af02      	add	r7, sp, #8
 800b718:	60f8      	str	r0, [r7, #12]
 800b71a:	60b9      	str	r1, [r7, #8]
 800b71c:	607a      	str	r2, [r7, #4]
 800b71e:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b720:	2300      	movs	r3, #0
 800b722:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	9301      	str	r3, [sp, #4]
 800b728:	6a3b      	ldr	r3, [r7, #32]
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	68b9      	ldr	r1, [r7, #8]
 800b732:	68f8      	ldr	r0, [r7, #12]
 800b734:	f7ff ff3f 	bl	800b5b6 <VL53L1_preset_mode_timed_ranging>
 800b738:	4603      	mov	r3, r0
 800b73a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800b73c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d106      	bne.n	800b752 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800b744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b746:	6839      	ldr	r1, [r7, #0]
 800b748:	68b8      	ldr	r0, [r7, #8]
 800b74a:	f000 fe7d 	bl	800c448 <VL53L1_config_low_power_auto_mode>
 800b74e:	4603      	mov	r3, r0
 800b750:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3718      	adds	r7, #24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b088      	sub	sp, #32
 800b762:	af02      	add	r7, sp, #8
 800b764:	60f8      	str	r0, [r7, #12]
 800b766:	60b9      	str	r1, [r7, #8]
 800b768:	607a      	str	r2, [r7, #4]
 800b76a:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b76c:	2300      	movs	r3, #0
 800b76e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800b770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b772:	9301      	str	r3, [sp, #4]
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	68b9      	ldr	r1, [r7, #8]
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7ff ff53 	bl	800b62a <VL53L1_preset_mode_timed_ranging_short_range>
 800b784:	4603      	mov	r3, r0
 800b786:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800b788:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d106      	bne.n	800b79e <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800b790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	68b8      	ldr	r0, [r7, #8]
 800b796:	f000 fe57 	bl	800c448 <VL53L1_config_low_power_auto_mode>
 800b79a:	4603      	mov	r3, r0
 800b79c:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b79e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3718      	adds	r7, #24
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b088      	sub	sp, #32
 800b7ae:	af02      	add	r7, sp, #8
 800b7b0:	60f8      	str	r0, [r7, #12]
 800b7b2:	60b9      	str	r1, [r7, #8]
 800b7b4:	607a      	str	r2, [r7, #4]
 800b7b6:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800b7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7be:	9301      	str	r3, [sp, #4]
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	9300      	str	r3, [sp, #0]
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	68b9      	ldr	r1, [r7, #8]
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f7ff ff67 	bl	800b69e <VL53L1_preset_mode_timed_ranging_long_range>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800b7d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d106      	bne.n	800b7ea <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800b7dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	68b8      	ldr	r0, [r7, #8]
 800b7e2:	f000 fe31 	bl	800c448 <VL53L1_config_low_power_auto_mode>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b7ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b088      	sub	sp, #32
 800b7fa:	af02      	add	r7, sp, #8
 800b7fc:	60f8      	str	r0, [r7, #12]
 800b7fe:	60b9      	str	r1, [r7, #8]
 800b800:	607a      	str	r2, [r7, #4]
 800b802:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b804:	2300      	movs	r3, #0
 800b806:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	9301      	str	r3, [sp, #4]
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	68b9      	ldr	r1, [r7, #8]
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f7ff fce3 	bl	800b1e2 <VL53L1_preset_mode_standard_ranging>
 800b81c:	4603      	mov	r3, r0
 800b81e:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b820:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d116      	bne.n	800b856 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	2200      	movs	r2, #0
 800b82c:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2200      	movs	r2, #0
 800b832:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	22b1      	movs	r2, #177	; 0xb1
 800b838:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	22d4      	movs	r2, #212	; 0xd4
 800b844:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b848:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800b850:	6a3b      	ldr	r3, [r7, #32]
 800b852:	2210      	movs	r2, #16
 800b854:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3718      	adds	r7, #24
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b088      	sub	sp, #32
 800b866:	af02      	add	r7, sp, #8
 800b868:	60f8      	str	r0, [r7, #12]
 800b86a:	60b9      	str	r1, [r7, #8]
 800b86c:	607a      	str	r2, [r7, #4]
 800b86e:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b870:	2300      	movs	r3, #0
 800b872:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	9301      	str	r3, [sp, #4]
 800b878:	6a3b      	ldr	r3, [r7, #32]
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	68b9      	ldr	r1, [r7, #8]
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f7ff fcad 	bl	800b1e2 <VL53L1_preset_mode_standard_ranging>
 800b888:	4603      	mov	r3, r0
 800b88a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b88c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d102      	bne.n	800b89a <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800b894:	6a3b      	ldr	r3, [r7, #32]
 800b896:	2201      	movs	r2, #1
 800b898:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b89a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800b8a6:	b480      	push	{r7}
 800b8a8:	b085      	sub	sp, #20
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2202      	movs	r2, #2
 800b8be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	220d      	movs	r2, #13
 800b8c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f640 028e 	movw	r2, #2190	; 0x88e
 800b8d0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b8d2:	bf00      	nop
 800b8d4:	3714      	adds	r7, #20
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr

0800b8de <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800b8de:	b480      	push	{r7}
 800b8e0:	b085      	sub	sp, #20
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	332c      	adds	r3, #44	; 0x2c
 800b8f2:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	78fa      	ldrb	r2, [r7, #3]
 800b8f8:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	2202      	movs	r2, #2
 800b904:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	2200      	movs	r2, #0
 800b90a:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	78fa      	ldrb	r2, [r7, #3]
 800b910:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2200      	movs	r2, #0
 800b916:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	2202      	movs	r2, #2
 800b91c:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2200      	movs	r2, #0
 800b922:	71da      	strb	r2, [r3, #7]

}
 800b924:	bf00      	nop
 800b926:	3714      	adds	r7, #20
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr

0800b930 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800b930:	b480      	push	{r7}
 800b932:	b087      	sub	sp, #28
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800b938:	2300      	movs	r3, #0
 800b93a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	332c      	adds	r3, #44	; 0x2c
 800b944:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800b94c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d10c      	bne.n	800b96e <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2203      	movs	r2, #3
 800b958:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2200      	movs	r2, #0
 800b95e:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2202      	movs	r2, #2
 800b964:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	71da      	strb	r2, [r3, #7]
 800b96c:	e060      	b.n	800ba30 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	795b      	ldrb	r3, [r3, #5]
 800b972:	2bff      	cmp	r3, #255	; 0xff
 800b974:	d103      	bne.n	800b97e <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2280      	movs	r2, #128	; 0x80
 800b97a:	715a      	strb	r2, [r3, #5]
 800b97c:	e005      	b.n	800b98a <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	795b      	ldrb	r3, [r3, #5]
 800b982:	3301      	adds	r3, #1
 800b984:	b2da      	uxtb	r2, r3
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	799b      	ldrb	r3, [r3, #6]
 800b98e:	f083 0302 	eor.w	r3, r3, #2
 800b992:	b2da      	uxtb	r2, r3
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	791b      	ldrb	r3, [r3, #4]
 800b99c:	3b03      	subs	r3, #3
 800b99e:	2b05      	cmp	r3, #5
 800b9a0:	d839      	bhi.n	800ba16 <VL53L1_update_ll_driver_rd_state+0xe6>
 800b9a2:	a201      	add	r2, pc, #4	; (adr r2, 800b9a8 <VL53L1_update_ll_driver_rd_state+0x78>)
 800b9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a8:	0800b9c1 	.word	0x0800b9c1
 800b9ac:	0800ba17 	.word	0x0800ba17
 800b9b0:	0800ba17 	.word	0x0800ba17
 800b9b4:	0800b9eb 	.word	0x0800b9eb
 800b9b8:	0800b9f9 	.word	0x0800b9f9
 800b9bc:	0800ba01 	.word	0x0800ba01

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800b9c6:	f003 0302 	and.w	r3, r3, #2
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	dd03      	ble.n	800b9d6 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2206      	movs	r2, #6
 800b9d2:	711a      	strb	r2, [r3, #4]
 800b9d4:	e002      	b.n	800b9dc <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2208      	movs	r2, #8
 800b9da:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	71da      	strb	r2, [r3, #7]

		break;
 800b9e8:	e022      	b.n	800ba30 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2208      	movs	r2, #8
 800b9f4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800b9f6:	e01b      	b.n	800ba30 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2208      	movs	r2, #8
 800b9fc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800b9fe:	e017      	b.n	800ba30 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	79db      	ldrb	r3, [r3, #7]
 800ba04:	f083 0301 	eor.w	r3, r3, #1
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2208      	movs	r2, #8
 800ba12:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800ba14:	e00c      	b.n	800ba30 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2203      	movs	r2, #3
 800ba1a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2202      	movs	r2, #2
 800ba26:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	71da      	strb	r2, [r3, #7]

		break;
 800ba2e:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800ba30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	371c      	adds	r7, #28
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b089      	sub	sp, #36	; 0x24
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	332c      	adds	r3, #44	; 0x2c
 800ba54:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800ba5c:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800ba66:	2300      	movs	r3, #0
 800ba68:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800ba6e:	f003 031f 	and.w	r3, r3, #31
 800ba72:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	78db      	ldrb	r3, [r3, #3]
 800ba78:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800ba7e:	111b      	asrs	r3, r3, #4
 800ba80:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800ba82:	f003 0302 	and.w	r3, r3, #2
 800ba86:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800ba8e:	f003 0320 	and.w	r3, r3, #32
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d017      	beq.n	800bac6 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	791b      	ldrb	r3, [r3, #4]
 800ba9a:	2b06      	cmp	r3, #6
 800ba9c:	d105      	bne.n	800baaa <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	2b12      	cmp	r3, #18
 800baa2:	d010      	beq.n	800bac6 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800baa4:	23ef      	movs	r3, #239	; 0xef
 800baa6:	77fb      	strb	r3, [r7, #31]
 800baa8:	e00d      	b.n	800bac6 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	795b      	ldrb	r3, [r3, #5]
 800baae:	7bba      	ldrb	r2, [r7, #14]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d001      	beq.n	800bab8 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800bab4:	23ee      	movs	r3, #238	; 0xee
 800bab6:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	799b      	ldrb	r3, [r3, #6]
 800babc:	7b7a      	ldrb	r2, [r7, #13]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d001      	beq.n	800bac6 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800bac2:	23ed      	movs	r3, #237	; 0xed
 800bac4:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800bac6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3724      	adds	r7, #36	; 0x24
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b087      	sub	sp, #28
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800bade:	2300      	movs	r3, #0
 800bae0:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	332c      	adds	r3, #44	; 0x2c
 800baea:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800baf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10c      	bne.n	800bb14 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2203      	movs	r2, #3
 800bafe:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2202      	movs	r2, #2
 800bb0a:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	70da      	strb	r2, [r3, #3]
 800bb12:	e03e      	b.n	800bb92 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	785b      	ldrb	r3, [r3, #1]
 800bb18:	2bff      	cmp	r3, #255	; 0xff
 800bb1a:	d103      	bne.n	800bb24 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	2280      	movs	r2, #128	; 0x80
 800bb20:	705a      	strb	r2, [r3, #1]
 800bb22:	e005      	b.n	800bb30 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	785b      	ldrb	r3, [r3, #1]
 800bb28:	3301      	adds	r3, #1
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	789b      	ldrb	r3, [r3, #2]
 800bb34:	f083 0302 	eor.w	r3, r3, #2
 800bb38:	b2da      	uxtb	r2, r3
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	2b03      	cmp	r3, #3
 800bb44:	d002      	beq.n	800bb4c <VL53L1_update_ll_driver_cfg_state+0x76>
 800bb46:	2b04      	cmp	r3, #4
 800bb48:	d00e      	beq.n	800bb68 <VL53L1_update_ll_driver_cfg_state+0x92>
 800bb4a:	e015      	b.n	800bb78 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	78db      	ldrb	r3, [r3, #3]
 800bb50:	f083 0301 	eor.w	r3, r3, #1
 800bb54:	b2da      	uxtb	r2, r3
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	2204      	movs	r2, #4
 800bb64:	701a      	strb	r2, [r3, #0]
		break;
 800bb66:	e014      	b.n	800bb92 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	78db      	ldrb	r3, [r3, #3]
 800bb6c:	f083 0301 	eor.w	r3, r3, #1
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	70da      	strb	r2, [r3, #3]

		break;
 800bb76:	e00c      	b.n	800bb92 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2203      	movs	r2, #3
 800bb7c:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2200      	movs	r2, #0
 800bb82:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2202      	movs	r2, #2
 800bb88:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	70da      	strb	r2, [r3, #3]

		break;
 800bb90:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800bb92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	371c      	adds	r7, #28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr

0800bba2 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800bba2:	b480      	push	{r7}
 800bba4:	b083      	sub	sp, #12
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	6078      	str	r0, [r7, #4]
 800bbaa:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	7c1a      	ldrb	r2, [r3, #16]
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	7c52      	ldrb	r2, [r2, #17]
 800bbbc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	3302      	adds	r3, #2
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	7c92      	ldrb	r2, [r2, #18]
 800bbc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	3303      	adds	r3, #3
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	7cd2      	ldrb	r2, [r2, #19]
 800bbd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	3304      	adds	r3, #4
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	7d12      	ldrb	r2, [r2, #20]
 800bbda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	3305      	adds	r3, #5
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	7d52      	ldrb	r2, [r2, #21]
 800bbe4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	3306      	adds	r3, #6
 800bbea:	687a      	ldr	r2, [r7, #4]
 800bbec:	7d92      	ldrb	r2, [r2, #22]
 800bbee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	3307      	adds	r3, #7
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	7dd2      	ldrb	r2, [r2, #23]
 800bbf8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	3308      	adds	r3, #8
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	7e12      	ldrb	r2, [r2, #24]
 800bc02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	3309      	adds	r3, #9
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	7e52      	ldrb	r2, [r2, #25]
 800bc0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	330a      	adds	r3, #10
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	7e92      	ldrb	r2, [r2, #26]
 800bc16:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	330b      	adds	r3, #11
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	7ed2      	ldrb	r2, [r2, #27]
 800bc20:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	330c      	adds	r3, #12
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	7f12      	ldrb	r2, [r2, #28]
 800bc2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	330d      	adds	r3, #13
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	7f52      	ldrb	r2, [r2, #29]
 800bc34:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	330e      	adds	r3, #14
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	7f92      	ldrb	r2, [r2, #30]
 800bc3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	330f      	adds	r3, #15
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	7fd2      	ldrb	r2, [r2, #31]
 800bc48:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	3310      	adds	r3, #16
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bc54:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	3311      	adds	r3, #17
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800bc60:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	3312      	adds	r3, #18
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800bc6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	3313      	adds	r3, #19
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800bc78:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	3314      	adds	r3, #20
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800bc84:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	3315      	adds	r3, #21
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800bc90:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	3316      	adds	r3, #22
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800bc9c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	3317      	adds	r3, #23
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800bca8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	3318      	adds	r3, #24
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800bcb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	3319      	adds	r3, #25
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800bcc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	331a      	adds	r3, #26
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800bccc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	331b      	adds	r3, #27
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800bcd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	331c      	adds	r3, #28
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800bce4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	331d      	adds	r3, #29
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800bcf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	331e      	adds	r3, #30
 800bcf6:	687a      	ldr	r2, [r7, #4]
 800bcf8:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800bcfc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	331f      	adds	r3, #31
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800bd08:	701a      	strb	r2, [r3, #0]
}
 800bd0a:	bf00      	nop
 800bd0c:	370c      	adds	r7, #12
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800bd16:	b480      	push	{r7}
 800bd18:	b085      	sub	sp, #20
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	603a      	str	r2, [r7, #0]
 800bd20:	80fb      	strh	r3, [r7, #6]
 800bd22:	460b      	mov	r3, r1
 800bd24:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800bd26:	2300      	movs	r3, #0
 800bd28:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800bd2e:	88fb      	ldrh	r3, [r7, #6]
 800bd30:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800bd32:	2300      	movs	r3, #0
 800bd34:	81fb      	strh	r3, [r7, #14]
 800bd36:	e00e      	b.n	800bd56 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800bd38:	88ba      	ldrh	r2, [r7, #4]
 800bd3a:	89fb      	ldrh	r3, [r7, #14]
 800bd3c:	1ad3      	subs	r3, r2, r3
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	683a      	ldr	r2, [r7, #0]
 800bd42:	4413      	add	r3, r2
 800bd44:	89ba      	ldrh	r2, [r7, #12]
 800bd46:	b2d2      	uxtb	r2, r2
 800bd48:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800bd4a:	89bb      	ldrh	r3, [r7, #12]
 800bd4c:	0a1b      	lsrs	r3, r3, #8
 800bd4e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800bd50:	89fb      	ldrh	r3, [r7, #14]
 800bd52:	3301      	adds	r3, #1
 800bd54:	81fb      	strh	r3, [r7, #14]
 800bd56:	89fa      	ldrh	r2, [r7, #14]
 800bd58:	88bb      	ldrh	r3, [r7, #4]
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d3ec      	bcc.n	800bd38 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800bd5e:	bf00      	nop
 800bd60:	bf00      	nop
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	6039      	str	r1, [r7, #0]
 800bd76:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800bd7c:	e00a      	b.n	800bd94 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800bd7e:	89fb      	ldrh	r3, [r7, #14]
 800bd80:	021b      	lsls	r3, r3, #8
 800bd82:	b21a      	sxth	r2, r3
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	1c59      	adds	r1, r3, #1
 800bd88:	6039      	str	r1, [r7, #0]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	b21b      	sxth	r3, r3
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	b21b      	sxth	r3, r3
 800bd92:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800bd94:	88fb      	ldrh	r3, [r7, #6]
 800bd96:	1e5a      	subs	r2, r3, #1
 800bd98:	80fa      	strh	r2, [r7, #6]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d1ef      	bne.n	800bd7e <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800bd9e:	89fb      	ldrh	r3, [r7, #14]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3714      	adds	r7, #20
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr

0800bdac <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	603a      	str	r2, [r7, #0]
 800bdb6:	80fb      	strh	r3, [r7, #6]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800bdc4:	88fb      	ldrh	r3, [r7, #6]
 800bdc6:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800bdc8:	2300      	movs	r3, #0
 800bdca:	81fb      	strh	r3, [r7, #14]
 800bdcc:	e00f      	b.n	800bdee <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800bdce:	88ba      	ldrh	r2, [r7, #4]
 800bdd0:	89fb      	ldrh	r3, [r7, #14]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	4413      	add	r3, r2
 800bdda:	89ba      	ldrh	r2, [r7, #12]
 800bddc:	b2d2      	uxtb	r2, r2
 800bdde:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800bde0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bde4:	121b      	asrs	r3, r3, #8
 800bde6:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800bde8:	89fb      	ldrh	r3, [r7, #14]
 800bdea:	3301      	adds	r3, #1
 800bdec:	81fb      	strh	r3, [r7, #14]
 800bdee:	89fa      	ldrh	r2, [r7, #14]
 800bdf0:	88bb      	ldrh	r3, [r7, #4]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d3eb      	bcc.n	800bdce <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800bdf6:	bf00      	nop
 800bdf8:	bf00      	nop
 800bdfa:	3714      	adds	r7, #20
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be02:	4770      	bx	lr

0800be04 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	4603      	mov	r3, r0
 800be0c:	6039      	str	r1, [r7, #0]
 800be0e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800be10:	2300      	movs	r3, #0
 800be12:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	b25b      	sxtb	r3, r3
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	da0e      	bge.n	800be3c <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800be1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be22:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800be24:	e00a      	b.n	800be3c <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800be26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800be2a:	021b      	lsls	r3, r3, #8
 800be2c:	b21a      	sxth	r2, r3
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	1c59      	adds	r1, r3, #1
 800be32:	6039      	str	r1, [r7, #0]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	b21b      	sxth	r3, r3
 800be38:	4313      	orrs	r3, r2
 800be3a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800be3c:	88fb      	ldrh	r3, [r7, #6]
 800be3e:	1e5a      	subs	r2, r3, #1
 800be40:	80fa      	strh	r2, [r7, #6]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1ef      	bne.n	800be26 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800be46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3714      	adds	r7, #20
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800be56:	b480      	push	{r7}
 800be58:	b087      	sub	sp, #28
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	60f8      	str	r0, [r7, #12]
 800be5e:	460b      	mov	r3, r1
 800be60:	607a      	str	r2, [r7, #4]
 800be62:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800be70:	2300      	movs	r3, #0
 800be72:	82fb      	strh	r3, [r7, #22]
 800be74:	e00e      	b.n	800be94 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800be76:	897a      	ldrh	r2, [r7, #10]
 800be78:	8afb      	ldrh	r3, [r7, #22]
 800be7a:	1ad3      	subs	r3, r2, r3
 800be7c:	3b01      	subs	r3, #1
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	4413      	add	r3, r2
 800be82:	693a      	ldr	r2, [r7, #16]
 800be84:	b2d2      	uxtb	r2, r2
 800be86:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	0a1b      	lsrs	r3, r3, #8
 800be8c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800be8e:	8afb      	ldrh	r3, [r7, #22]
 800be90:	3301      	adds	r3, #1
 800be92:	82fb      	strh	r3, [r7, #22]
 800be94:	8afa      	ldrh	r2, [r7, #22]
 800be96:	897b      	ldrh	r3, [r7, #10]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d3ec      	bcc.n	800be76 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800be9c:	bf00      	nop
 800be9e:	bf00      	nop
 800bea0:	371c      	adds	r7, #28
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800beaa:	b480      	push	{r7}
 800beac:	b085      	sub	sp, #20
 800beae:	af00      	add	r7, sp, #0
 800beb0:	4603      	mov	r3, r0
 800beb2:	6039      	str	r1, [r7, #0]
 800beb4:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800beb6:	2300      	movs	r3, #0
 800beb8:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800beba:	e007      	b.n	800becc <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	021a      	lsls	r2, r3, #8
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	1c59      	adds	r1, r3, #1
 800bec4:	6039      	str	r1, [r7, #0]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	4313      	orrs	r3, r2
 800beca:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800becc:	88fb      	ldrh	r3, [r7, #6]
 800bece:	1e5a      	subs	r2, r3, #1
 800bed0:	80fa      	strh	r2, [r7, #6]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1f2      	bne.n	800bebc <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800bed6:	68fb      	ldr	r3, [r7, #12]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	4603      	mov	r3, r0
 800beec:	6039      	str	r1, [r7, #0]
 800beee:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800bef0:	2300      	movs	r3, #0
 800bef2:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	b25b      	sxtb	r3, r3
 800befa:	2b00      	cmp	r3, #0
 800befc:	da0b      	bge.n	800bf16 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800befe:	f04f 33ff 	mov.w	r3, #4294967295
 800bf02:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800bf04:	e007      	b.n	800bf16 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	021a      	lsls	r2, r3, #8
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	1c59      	adds	r1, r3, #1
 800bf0e:	6039      	str	r1, [r7, #0]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800bf16:	88fb      	ldrh	r3, [r7, #6]
 800bf18:	1e5a      	subs	r2, r3, #1
 800bf1a:	80fa      	strh	r2, [r7, #6]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d1f2      	bne.n	800bf06 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800bf20:	68fb      	ldr	r3, [r7, #12]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3714      	adds	r7, #20
 800bf26:	46bd      	mov	sp, r7
 800bf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2c:	4770      	bx	lr

0800bf2e <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b084      	sub	sp, #16
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	460b      	mov	r3, r1
 800bf38:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	78fa      	ldrb	r2, [r7, #3]
 800bf46:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800bf50:	461a      	mov	r2, r3
 800bf52:	2183      	movs	r1, #131	; 0x83
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f001 fd1b 	bl	800d990 <VL53L1_WrByte>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800bf5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b084      	sub	sp, #16
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800bf72:	2300      	movs	r3, #0
 800bf74:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800bf76:	2101      	movs	r1, #1
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f7ff ffd8 	bl	800bf2e <VL53L1_set_powerforce_register>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800bf82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b086      	sub	sp, #24
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	4603      	mov	r3, r0
 800bf96:	460a      	mov	r2, r1
 800bf98:	80fb      	strh	r3, [r7, #6]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800bfaa:	88fb      	ldrh	r3, [r7, #6]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f000 faa9 	bl	800c504 <VL53L1_calc_pll_period_us>
 800bfb2:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800bfb4:	797b      	ldrb	r3, [r7, #5]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 fab8 	bl	800c52c <VL53L1_decode_vcsel_period>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	4613      	mov	r3, r2
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	4413      	add	r3, r2
 800bfc8:	021b      	lsls	r3, r3, #8
 800bfca:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	099b      	lsrs	r3, r3, #6
 800bfd0:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800bfd2:	7cfa      	ldrb	r2, [r7, #19]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	fb02 f303 	mul.w	r3, r2, r3
 800bfda:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	099b      	lsrs	r3, r3, #6
 800bfe0:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b089      	sub	sp, #36	; 0x24
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	4608      	mov	r0, r1
 800bff6:	4611      	mov	r1, r2
 800bff8:	461a      	mov	r2, r3
 800bffa:	4603      	mov	r3, r0
 800bffc:	817b      	strh	r3, [r7, #10]
 800bffe:	460b      	mov	r3, r1
 800c000:	813b      	strh	r3, [r7, #8]
 800c002:	4613      	mov	r3, r2
 800c004:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800c00e:	2300      	movs	r3, #0
 800c010:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800c012:	2300      	movs	r3, #0
 800c014:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800c016:	2300      	movs	r3, #0
 800c018:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	011b      	lsls	r3, r3, #4
 800c01e:	4a23      	ldr	r2, [pc, #140]	; (800c0ac <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c020:	fb82 1203 	smull	r1, r2, r2, r3
 800c024:	1192      	asrs	r2, r2, #6
 800c026:	17db      	asrs	r3, r3, #31
 800c028:	1ad3      	subs	r3, r2, r3
 800c02a:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800c02c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c030:	2b00      	cmp	r3, #0
 800c032:	da03      	bge.n	800c03c <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800c034:	897b      	ldrh	r3, [r7, #10]
 800c036:	425b      	negs	r3, r3
 800c038:	b29b      	uxth	r3, r3
 800c03a:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800c03c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	da03      	bge.n	800c04c <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800c044:	893b      	ldrh	r3, [r7, #8]
 800c046:	425b      	negs	r3, r3
 800c048:	b29b      	uxth	r3, r3
 800c04a:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800c04c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800c050:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c054:	4413      	add	r3, r2
 800c056:	015b      	lsls	r3, r3, #5
 800c058:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	4a13      	ldr	r2, [pc, #76]	; (800c0ac <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c05e:	fb82 1203 	smull	r1, r2, r2, r3
 800c062:	1192      	asrs	r2, r2, #6
 800c064:	17db      	asrs	r3, r3, #31
 800c066:	1ad3      	subs	r3, r2, r3
 800c068:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	4413      	add	r3, r2
 800c070:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800c072:	79fa      	ldrb	r2, [r7, #7]
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	fb02 f303 	mul.w	r3, r2, r3
 800c07a:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	3310      	adds	r3, #16
 800c080:	2b00      	cmp	r3, #0
 800c082:	da00      	bge.n	800c086 <VL53L1_calc_range_ignore_threshold+0x9a>
 800c084:	331f      	adds	r3, #31
 800c086:	115b      	asrs	r3, r3, #5
 800c088:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c090:	db03      	blt.n	800c09a <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800c092:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c096:	83fb      	strh	r3, [r7, #30]
 800c098:	e001      	b.n	800c09e <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800c09e:	8bfb      	ldrh	r3, [r7, #30]
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3724      	adds	r7, #36	; 0x24
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr
 800c0ac:	10624dd3 	.word	0x10624dd3

0800c0b0 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b085      	sub	sp, #20
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	031a      	lsls	r2, r3, #12
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	085b      	lsrs	r3, r3, #1
 800c0c6:	441a      	add	r2, r3
	timeout_mclks   =
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0ce:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3714      	adds	r7, #20
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr

0800c0de <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b084      	sub	sp, #16
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
 800c0e6:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f7ff ffdc 	bl	800c0b0 <VL53L1_calc_timeout_mclks>
 800c0f8:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800c0fa:	68f8      	ldr	r0, [r7, #12]
 800c0fc:	f000 f860 	bl	800c1c0 <VL53L1_encode_timeout>
 800c100:	4603      	mov	r3, r0
 800c102:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800c104:	897b      	ldrh	r3, [r7, #10]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800c10e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c112:	b087      	sub	sp, #28
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800c11a:	2100      	movs	r1, #0
 800c11c:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800c11e:	f04f 0000 	mov.w	r0, #0
 800c122:	f04f 0100 	mov.w	r1, #0
 800c126:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800c12a:	6879      	ldr	r1, [r7, #4]
 800c12c:	2000      	movs	r0, #0
 800c12e:	4688      	mov	r8, r1
 800c130:	4681      	mov	r9, r0
 800c132:	6839      	ldr	r1, [r7, #0]
 800c134:	2000      	movs	r0, #0
 800c136:	460c      	mov	r4, r1
 800c138:	4605      	mov	r5, r0
 800c13a:	fb04 f009 	mul.w	r0, r4, r9
 800c13e:	fb08 f105 	mul.w	r1, r8, r5
 800c142:	4401      	add	r1, r0
 800c144:	fba8 2304 	umull	r2, r3, r8, r4
 800c148:	4419      	add	r1, r3
 800c14a:	460b      	mov	r3, r1
 800c14c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800c150:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800c154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c158:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800c15c:	f143 0b00 	adc.w	fp, r3, #0
 800c160:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800c164:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c168:	f04f 0200 	mov.w	r2, #0
 800c16c:	f04f 0300 	mov.w	r3, #0
 800c170:	0b02      	lsrs	r2, r0, #12
 800c172:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c176:	0b0b      	lsrs	r3, r1, #12
 800c178:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c180:	697b      	ldr	r3, [r7, #20]
}
 800c182:	4618      	mov	r0, r3
 800c184:	371c      	adds	r7, #28
 800c186:	46bd      	mov	sp, r7
 800c188:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c18c:	4770      	bx	lr

0800c18e <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b084      	sub	sp, #16
 800c192:	af00      	add	r7, sp, #0
 800c194:	4603      	mov	r3, r0
 800c196:	6039      	str	r1, [r7, #0]
 800c198:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800c1a2:	88fb      	ldrh	r3, [r7, #6]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f000 f837 	bl	800c218 <VL53L1_decode_timeout>
 800c1aa:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	f7ff ffad 	bl	800c10e <VL53L1_calc_timeout_us>
 800c1b4:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c1b6:	68bb      	ldr	r3, [r7, #8]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b087      	sub	sp, #28
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d017      	beq.n	800c20a <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c1e0:	e005      	b.n	800c1ee <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	085b      	lsrs	r3, r3, #1
 800c1e6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c1e8:	89fb      	ldrh	r3, [r7, #14]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d1f4      	bne.n	800c1e2 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c1f8:	89fb      	ldrh	r3, [r7, #14]
 800c1fa:	021b      	lsls	r3, r3, #8
 800c1fc:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	b29b      	uxth	r3, r3
 800c202:	b2db      	uxtb	r3, r3
 800c204:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c206:	4413      	add	r3, r2
 800c208:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c20a:	8afb      	ldrh	r3, [r7, #22]
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	371c      	adds	r7, #28
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800c218:	b480      	push	{r7}
 800c21a:	b085      	sub	sp, #20
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	4603      	mov	r3, r0
 800c220:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c222:	2300      	movs	r3, #0
 800c224:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c226:	88fb      	ldrh	r3, [r7, #6]
 800c228:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c22a:	88fa      	ldrh	r2, [r7, #6]
 800c22c:	0a12      	lsrs	r2, r2, #8
 800c22e:	b292      	uxth	r2, r2
 800c230:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c232:	3301      	adds	r3, #1
 800c234:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c236:	68fb      	ldr	r3, [r7, #12]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b088      	sub	sp, #32
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	60b9      	str	r1, [r7, #8]
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c252:	2300      	movs	r3, #0
 800c254:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800c25e:	2300      	movs	r3, #0
 800c260:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800c262:	887b      	ldrh	r3, [r7, #2]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d102      	bne.n	800c26e <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800c268:	23f1      	movs	r3, #241	; 0xf1
 800c26a:	77fb      	strb	r3, [r7, #31]
 800c26c:	e05d      	b.n	800c32a <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c270:	799a      	ldrb	r2, [r3, #6]
 800c272:	887b      	ldrh	r3, [r7, #2]
 800c274:	4611      	mov	r1, r2
 800c276:	4618      	mov	r0, r3
 800c278:	f7ff fe89 	bl	800bf8e <VL53L1_calc_macro_period_us>
 800c27c:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800c27e:	6979      	ldr	r1, [r7, #20]
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	f7ff ff15 	bl	800c0b0 <VL53L1_calc_timeout_mclks>
 800c286:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	2bff      	cmp	r3, #255	; 0xff
 800c28c:	d901      	bls.n	800c292 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800c28e:	23ff      	movs	r3, #255	; 0xff
 800c290:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800c296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c298:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c29a:	6979      	ldr	r1, [r7, #20]
 800c29c:	68b8      	ldr	r0, [r7, #8]
 800c29e:	f7ff ff1e 	bl	800c0de <VL53L1_calc_encoded_timeout>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c2a6:	8a7b      	ldrh	r3, [r7, #18]
 800c2a8:	0a1b      	lsrs	r3, r3, #8
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800c2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b0:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c2b2:	8a7b      	ldrh	r3, [r7, #18]
 800c2b4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800c2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b8:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c2ba:	6979      	ldr	r1, [r7, #20]
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f7ff ff0e 	bl	800c0de <VL53L1_calc_encoded_timeout>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c2c6:	8a7b      	ldrh	r3, [r7, #18]
 800c2c8:	0a1b      	lsrs	r3, r3, #8
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800c2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c2d2:	8a7b      	ldrh	r3, [r7, #18]
 800c2d4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800c2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d8:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2dc:	7a5a      	ldrb	r2, [r3, #9]
 800c2de:	887b      	ldrh	r3, [r7, #2]
 800c2e0:	4611      	mov	r1, r2
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7ff fe53 	bl	800bf8e <VL53L1_calc_macro_period_us>
 800c2e8:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800c2ea:	6979      	ldr	r1, [r7, #20]
 800c2ec:	68b8      	ldr	r0, [r7, #8]
 800c2ee:	f7ff fef6 	bl	800c0de <VL53L1_calc_encoded_timeout>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c2f6:	8a7b      	ldrh	r3, [r7, #18]
 800c2f8:	0a1b      	lsrs	r3, r3, #8
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800c2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c300:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c302:	8a7b      	ldrh	r3, [r7, #18]
 800c304:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800c306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c308:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800c30a:	6979      	ldr	r1, [r7, #20]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f7ff fee6 	bl	800c0de <VL53L1_calc_encoded_timeout>
 800c312:	4603      	mov	r3, r0
 800c314:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c316:	8a7b      	ldrh	r3, [r7, #18]
 800c318:	0a1b      	lsrs	r3, r3, #8
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800c31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c320:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c322:	8a7b      	ldrh	r3, [r7, #18]
 800c324:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800c326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c328:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800c32a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800c32e:	4618      	mov	r0, r3
 800c330:	3720      	adds	r7, #32
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800c336:	b480      	push	{r7}
 800c338:	b083      	sub	sp, #12
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	4603      	mov	r3, r0
 800c33e:	603a      	str	r2, [r7, #0]
 800c340:	71fb      	strb	r3, [r7, #7]
 800c342:	460b      	mov	r3, r1
 800c344:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800c346:	79fb      	ldrb	r3, [r7, #7]
 800c348:	2b07      	cmp	r3, #7
 800c34a:	d90a      	bls.n	800c362 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800c34c:	79bb      	ldrb	r3, [r7, #6]
 800c34e:	00db      	lsls	r3, r3, #3
 800c350:	b2da      	uxtb	r2, r3
 800c352:	79fb      	ldrb	r3, [r7, #7]
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	b2db      	uxtb	r3, r3
 800c358:	3b71      	subs	r3, #113	; 0x71
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800c360:	e00a      	b.n	800c378 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800c362:	79bb      	ldrb	r3, [r7, #6]
 800c364:	f1c3 030f 	rsb	r3, r3, #15
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	79fb      	ldrb	r3, [r7, #7]
 800c370:	4413      	add	r3, r2
 800c372:	b2da      	uxtb	r2, r3
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	701a      	strb	r2, [r3, #0]
}
 800c378:	bf00      	nop
 800c37a:	370c      	adds	r7, #12
 800c37c:	46bd      	mov	sp, r7
 800c37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c382:	4770      	bx	lr

0800c384 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
 800c38a:	4603      	mov	r3, r0
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
 800c390:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800c392:	7bfb      	ldrb	r3, [r7, #15]
 800c394:	091b      	lsrs	r3, r3, #4
 800c396:	b2da      	uxtb	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
 800c39e:	f003 030f 	and.w	r3, r3, #15
 800c3a2:	b2da      	uxtb	r2, r3
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	701a      	strb	r2, [r3, #0]

}
 800c3a8:	bf00      	nop
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	603a      	str	r2, [r7, #0]
 800c3be:	71fb      	strb	r3, [r7, #7]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800c3c4:	79bb      	ldrb	r3, [r7, #6]
 800c3c6:	011b      	lsls	r3, r3, #4
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	79fb      	ldrb	r3, [r7, #7]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	b2da      	uxtb	r2, r3
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	701a      	strb	r2, [r3, #0]

}
 800c3d4:	bf00      	nop
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2203      	movs	r2, #3
 800c3f4:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2200      	movs	r2, #0
 800c404:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2200      	movs	r2, #0
 800c414:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2200      	movs	r2, #0
 800c424:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	2200      	movs	r2, #0
 800c434:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800c438:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800c448:	b480      	push	{r7}
 800c44a:	b087      	sub	sp, #28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c454:	2300      	movs	r3, #0
 800c456:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2201      	movs	r2, #1
 800c45c:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2200      	movs	r2, #0
 800c462:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	229b      	movs	r2, #155	; 0x9b
 800c468:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800c46a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c46e:	4618      	mov	r0, r3
 800c470:	371c      	adds	r7, #28
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800c47a:	b480      	push	{r7}
 800c47c:	b085      	sub	sp, #20
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c486:	2300      	movs	r3, #0
 800c488:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800c4a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4ac:	b2da      	uxtb	r2, r3
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c4ba:	f003 0303 	and.w	r3, r3, #3
 800c4be:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c4ca:	4413      	add	r3, r2
 800c4cc:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800c4f4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	4603      	mov	r3, r0
 800c50c:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800c50e:	2300      	movs	r3, #0
 800c510:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800c512:	88fb      	ldrh	r3, [r7, #6]
 800c514:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c518:	fb92 f3f3 	sdiv	r3, r2, r3
 800c51c:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800c51e:	68fb      	ldr	r3, [r7, #12]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	4603      	mov	r3, r0
 800c534:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800c536:	2300      	movs	r3, #0
 800c538:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800c53a:	79fb      	ldrb	r3, [r7, #7]
 800c53c:	3301      	adds	r3, #1
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	005b      	lsls	r3, r3, #1
 800c542:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800c544:	7bfb      	ldrb	r3, [r7, #15]
}
 800c546:	4618      	mov	r0, r3
 800c548:	3714      	adds	r7, #20
 800c54a:	46bd      	mov	sp, r7
 800c54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c550:	4770      	bx	lr

0800c552 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800c552:	b480      	push	{r7}
 800c554:	b085      	sub	sp, #20
 800c556:	af00      	add	r7, sp, #0
 800c558:	4603      	mov	r3, r0
 800c55a:	60b9      	str	r1, [r7, #8]
 800c55c:	607a      	str	r2, [r7, #4]
 800c55e:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800c560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c564:	2b00      	cmp	r3, #0
 800c566:	da10      	bge.n	800c58a <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800c568:	7bfb      	ldrb	r3, [r7, #15]
 800c56a:	43db      	mvns	r3, r3
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	f003 0307 	and.w	r3, r3, #7
 800c572:	b2db      	uxtb	r3, r3
 800c574:	3308      	adds	r3, #8
 800c576:	b2da      	uxtb	r2, r3
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800c57c:	7bfb      	ldrb	r3, [r7, #15]
 800c57e:	3b80      	subs	r3, #128	; 0x80
 800c580:	10db      	asrs	r3, r3, #3
 800c582:	b2da      	uxtb	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800c588:	e00c      	b.n	800c5a4 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800c58a:	7bfb      	ldrb	r3, [r7, #15]
 800c58c:	f003 0307 	and.w	r3, r3, #7
 800c590:	b2da      	uxtb	r2, r3
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800c596:	7bfb      	ldrb	r3, [r7, #15]
 800c598:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800c59c:	10db      	asrs	r3, r3, #3
 800c59e:	b2da      	uxtb	r2, r3
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	701a      	strb	r2, [r3, #0]
}
 800c5a4:	bf00      	nop
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	607a      	str	r2, [r7, #4]
 800c5bc:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800c5c2:	897b      	ldrh	r3, [r7, #10]
 800c5c4:	2b0a      	cmp	r3, #10
 800c5c6:	d802      	bhi.n	800c5ce <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c5c8:	f06f 0309 	mvn.w	r3, #9
 800c5cc:	e047      	b.n	800c65e <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5d6:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800c5e4:	f002 020f 	and.w	r2, r2, #15
 800c5e8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800c5ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800c5f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c5f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800c5fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800c604:	f002 0203 	and.w	r2, r2, #3
 800c608:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800c60a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800c614:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c618:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800c61a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	88d8      	ldrh	r0, [r3, #6]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	3305      	adds	r3, #5
 800c624:	461a      	mov	r2, r3
 800c626:	2102      	movs	r1, #2
 800c628:	f7ff fb75 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800c634:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800c63e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800c648:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800c64c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800c64e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800c658:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800c65a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b086      	sub	sp, #24
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	4603      	mov	r3, r0
 800c66e:	60b9      	str	r1, [r7, #8]
 800c670:	607a      	str	r2, [r7, #4]
 800c672:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c674:	2300      	movs	r3, #0
 800c676:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800c678:	89fb      	ldrh	r3, [r7, #14]
 800c67a:	2b0a      	cmp	r3, #10
 800c67c:	d802      	bhi.n	800c684 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c67e:	f06f 0309 	mvn.w	r3, #9
 800c682:	e046      	b.n	800c712 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c68c:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	3301      	adds	r3, #1
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	f003 030f 	and.w	r3, r3, #15
 800c69c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	3302      	adds	r3, #2
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ac:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	3303      	adds	r3, #3
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	f003 0303 	and.w	r3, r3, #3
 800c6bc:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	3304      	adds	r3, #4
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6cc:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	3305      	adds	r3, #5
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	2002      	movs	r0, #2
 800c6da:	f7ff fb47 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	79da      	ldrb	r2, [r3, #7]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	7a1a      	ldrb	r2, [r3, #8]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	3309      	adds	r3, #9
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c700:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	7a9a      	ldrb	r2, [r3, #10]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800c70e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3718      	adds	r7, #24
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b086      	sub	sp, #24
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c724:	2300      	movs	r3, #0
 800c726:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c728:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d108      	bne.n	800c742 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800c730:	f107 020c 	add.w	r2, r7, #12
 800c734:	230b      	movs	r3, #11
 800c736:	2101      	movs	r1, #1
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f001 f8f3 	bl	800d924 <VL53L1_ReadMulti>
 800c73e:	4603      	mov	r3, r0
 800c740:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800c742:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d108      	bne.n	800c75c <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800c74a:	f107 030c 	add.w	r3, r7, #12
 800c74e:	683a      	ldr	r2, [r7, #0]
 800c750:	4619      	mov	r1, r3
 800c752:	200b      	movs	r0, #11
 800c754:	f7ff ff87 	bl	800c666 <VL53L1_i2c_decode_static_nvm_managed>
 800c758:	4603      	mov	r3, r0
 800c75a:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800c75c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c760:	4618      	mov	r0, r3
 800c762:	3718      	adds	r7, #24
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b086      	sub	sp, #24
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	460b      	mov	r3, r1
 800c772:	607a      	str	r2, [r7, #4]
 800c774:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c776:	2300      	movs	r3, #0
 800c778:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800c77a:	897b      	ldrh	r3, [r7, #10]
 800c77c:	2b16      	cmp	r3, #22
 800c77e:	d802      	bhi.n	800c786 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c780:	f06f 0309 	mvn.w	r3, #9
 800c784:	e076      	b.n	800c874 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800c796:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800c7a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800c7aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800c7b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800c7be:	f002 020f 	and.w	r2, r2, #15
 800c7c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800c7c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800c7ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800c7d8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800c7dc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800c7de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800c7e8:	f002 0203 	and.w	r2, r2, #3
 800c7ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800c7ee:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	8958      	ldrh	r0, [r3, #10]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3309      	adds	r3, #9
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	2102      	movs	r1, #2
 800c7fc:	f7ff fa8b 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	330b      	adds	r3, #11
 800c80a:	461a      	mov	r2, r3
 800c80c:	2102      	movs	r1, #2
 800c80e:	f7ff facd 	bl	800bdac <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	330d      	adds	r3, #13
 800c81c:	461a      	mov	r2, r3
 800c81e:	2102      	movs	r1, #2
 800c820:	f7ff fac4 	bl	800bdac <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	8a18      	ldrh	r0, [r3, #16]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	330f      	adds	r3, #15
 800c82c:	461a      	mov	r2, r3
 800c82e:	2102      	movs	r1, #2
 800c830:	f7ff fa71 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800c83a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c83e:	b218      	sxth	r0, r3
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	3311      	adds	r3, #17
 800c844:	461a      	mov	r2, r3
 800c846:	2102      	movs	r1, #2
 800c848:	f7ff fab0 	bl	800bdac <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	3313      	adds	r3, #19
 800c856:	461a      	mov	r2, r3
 800c858:	2102      	movs	r1, #2
 800c85a:	f7ff faa7 	bl	800bdac <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	3315      	adds	r3, #21
 800c868:	461a      	mov	r2, r3
 800c86a:	2102      	movs	r1, #2
 800c86c:	f7ff fa9e 	bl	800bdac <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800c870:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3718      	adds	r7, #24
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b086      	sub	sp, #24
 800c880:	af00      	add	r7, sp, #0
 800c882:	4603      	mov	r3, r0
 800c884:	60b9      	str	r1, [r7, #8]
 800c886:	607a      	str	r2, [r7, #4]
 800c888:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c88a:	2300      	movs	r3, #0
 800c88c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800c88e:	89fb      	ldrh	r3, [r7, #14]
 800c890:	2b16      	cmp	r3, #22
 800c892:	d802      	bhi.n	800c89a <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c894:	f06f 0309 	mvn.w	r3, #9
 800c898:	e079      	b.n	800c98e <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	785a      	ldrb	r2, [r3, #1]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	789a      	ldrb	r2, [r3, #2]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	78da      	ldrb	r2, [r3, #3]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	791a      	ldrb	r2, [r3, #4]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	3305      	adds	r3, #5
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	f003 030f 	and.w	r3, r3, #15
 800c8cc:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	799a      	ldrb	r2, [r3, #6]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	3307      	adds	r3, #7
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8e4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	3308      	adds	r3, #8
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	f003 0303 	and.w	r3, r3, #3
 800c8f4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	3309      	adds	r3, #9
 800c8fe:	4619      	mov	r1, r3
 800c900:	2002      	movs	r0, #2
 800c902:	f7ff fa33 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800c906:	4603      	mov	r3, r0
 800c908:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	330b      	adds	r3, #11
 800c912:	4619      	mov	r1, r3
 800c914:	2002      	movs	r0, #2
 800c916:	f7ff fa75 	bl	800be04 <VL53L1_i2c_decode_int16_t>
 800c91a:	4603      	mov	r3, r0
 800c91c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	330d      	adds	r3, #13
 800c926:	4619      	mov	r1, r3
 800c928:	2002      	movs	r0, #2
 800c92a:	f7ff fa6b 	bl	800be04 <VL53L1_i2c_decode_int16_t>
 800c92e:	4603      	mov	r3, r0
 800c930:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	330f      	adds	r3, #15
 800c93a:	4619      	mov	r1, r3
 800c93c:	2002      	movs	r0, #2
 800c93e:	f7ff fa15 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800c942:	4603      	mov	r3, r0
 800c944:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	3311      	adds	r3, #17
 800c94e:	4619      	mov	r1, r3
 800c950:	2002      	movs	r0, #2
 800c952:	f7ff fa57 	bl	800be04 <VL53L1_i2c_decode_int16_t>
 800c956:	4603      	mov	r3, r0
 800c958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c95c:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	3313      	adds	r3, #19
 800c966:	4619      	mov	r1, r3
 800c968:	2002      	movs	r0, #2
 800c96a:	f7ff fa4b 	bl	800be04 <VL53L1_i2c_decode_int16_t>
 800c96e:	4603      	mov	r3, r0
 800c970:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	3315      	adds	r3, #21
 800c97a:	4619      	mov	r1, r3
 800c97c:	2002      	movs	r0, #2
 800c97e:	f7ff fa41 	bl	800be04 <VL53L1_i2c_decode_int16_t>
 800c982:	4603      	mov	r3, r0
 800c984:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800c98a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3718      	adds	r7, #24
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b088      	sub	sp, #32
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c9a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d108      	bne.n	800c9be <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800c9ac:	f107 0208 	add.w	r2, r7, #8
 800c9b0:	2317      	movs	r3, #23
 800c9b2:	210d      	movs	r1, #13
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 ffb5 	bl	800d924 <VL53L1_ReadMulti>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800c9be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d108      	bne.n	800c9d8 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800c9c6:	f107 0308 	add.w	r3, r7, #8
 800c9ca:	683a      	ldr	r2, [r7, #0]
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	2017      	movs	r0, #23
 800c9d0:	f7ff ff54 	bl	800c87c <VL53L1_i2c_decode_customer_nvm_managed>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800c9d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3720      	adds	r7, #32
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b086      	sub	sp, #24
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	607a      	str	r2, [r7, #4]
 800c9f0:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800c9f6:	897b      	ldrh	r3, [r7, #10]
 800c9f8:	2b1f      	cmp	r3, #31
 800c9fa:	d802      	bhi.n	800ca02 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c9fc:	f06f 0309 	mvn.w	r3, #9
 800ca00:	e0cf      	b.n	800cba2 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	881b      	ldrh	r3, [r3, #0]
 800ca06:	687a      	ldr	r2, [r7, #4]
 800ca08:	2102      	movs	r1, #2
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7ff f983 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800ca18:	f002 0201 	and.w	r2, r2, #1
 800ca1c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ca1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800ca28:	f002 020f 	and.w	r2, r2, #15
 800ca2c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ca2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800ca38:	f002 020f 	and.w	r2, r2, #15
 800ca3c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ca3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800ca48:	f002 021f 	and.w	r2, r2, #31
 800ca4c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ca4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ca58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ca5c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ca5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800ca68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ca6c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ca6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800ca78:	f002 0201 	and.w	r2, r2, #1
 800ca7c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ca7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800ca84:	68fa      	ldr	r2, [r7, #12]
 800ca86:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800ca88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ca92:	f002 0201 	and.w	r2, r2, #1
 800ca96:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ca98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800caa2:	f002 0203 	and.w	r2, r2, #3
 800caa6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800caa8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800cab2:	f002 021f 	and.w	r2, r2, #31
 800cab6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800cab8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800cac2:	f002 0203 	and.w	r2, r2, #3
 800cac6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800cac8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800cad2:	f002 0203 	and.w	r2, r2, #3
 800cad6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800cad8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800cae2:	f002 0207 	and.w	r2, r2, #7
 800cae6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800cae8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800caf2:	f002 021f 	and.w	r2, r2, #31
 800caf6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800caf8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800cb02:	f002 0201 	and.w	r2, r2, #1
 800cb06:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800cb08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800cb12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800cb1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800cb26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800cb30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800cb3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800cb44:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	8b18      	ldrh	r0, [r3, #24]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	3318      	adds	r3, #24
 800cb4e:	461a      	mov	r2, r3
 800cb50:	2102      	movs	r1, #2
 800cb52:	f7ff f8e0 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800cb5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800cb68:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800cb72:	f002 020f 	and.w	r2, r2, #15
 800cb76:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800cb78:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800cb7e:	68fa      	ldr	r2, [r7, #12]
 800cb80:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800cb82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800cb8c:	f002 020f 	and.w	r2, r2, #15
 800cb90:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800cb92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800cb9c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800cb9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3718      	adds	r7, #24
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}

0800cbaa <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b086      	sub	sp, #24
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	60f8      	str	r0, [r7, #12]
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	607a      	str	r2, [r7, #4]
 800cbb6:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800cbbc:	897b      	ldrh	r3, [r7, #10]
 800cbbe:	2b15      	cmp	r3, #21
 800cbc0:	d802      	bhi.n	800cbc8 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cbc2:	f06f 0309 	mvn.w	r3, #9
 800cbc6:	e070      	b.n	800ccaa <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800cbd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800cbde:	68fa      	ldr	r2, [r7, #12]
 800cbe0:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800cbe2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800cbec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cbf0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800cbf2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800cbf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbfc:	b298      	uxth	r0, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	3304      	adds	r3, #4
 800cc02:	461a      	mov	r2, r3
 800cc04:	2102      	movs	r1, #2
 800cc06:	f7ff f886 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800cc12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc16:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800cc18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800cc1e:	68fa      	ldr	r2, [r7, #12]
 800cc20:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800cc22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800cc2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800cc36:	f002 0201 	and.w	r2, r2, #1
 800cc3a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800cc3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800cc46:	f002 0207 	and.w	r2, r2, #7
 800cc4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800cc4c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	8998      	ldrh	r0, [r3, #12]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	330c      	adds	r3, #12
 800cc56:	461a      	mov	r2, r3
 800cc58:	2102      	movs	r1, #2
 800cc5a:	f7ff f85c 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	89d8      	ldrh	r0, [r3, #14]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	330e      	adds	r3, #14
 800cc66:	461a      	mov	r2, r3
 800cc68:	2102      	movs	r1, #2
 800cc6a:	f7ff f854 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	8a18      	ldrh	r0, [r3, #16]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	3310      	adds	r3, #16
 800cc76:	461a      	mov	r2, r3
 800cc78:	2102      	movs	r1, #2
 800cc7a:	f7ff f84c 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800cc86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800cc90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800cc96:	68fa      	ldr	r2, [r7, #12]
 800cc98:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800cc9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800cca4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800cca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3718      	adds	r7, #24
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b086      	sub	sp, #24
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	60f8      	str	r0, [r7, #12]
 800ccba:	460b      	mov	r3, r1
 800ccbc:	607a      	str	r2, [r7, #4]
 800ccbe:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ccc4:	897b      	ldrh	r3, [r7, #10]
 800ccc6:	2b16      	cmp	r3, #22
 800ccc8:	d802      	bhi.n	800ccd0 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ccca:	f06f 0309 	mvn.w	r3, #9
 800ccce:	e06e      	b.n	800cdae <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	f003 030f 	and.w	r3, r3, #15
 800ccd8:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800cce6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800ccf0:	f002 020f 	and.w	r2, r2, #15
 800ccf4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ccf6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800ccfc:	68fa      	ldr	r2, [r7, #12]
 800ccfe:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800cd00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800cd0a:	f002 020f 	and.w	r2, r2, #15
 800cd0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800cd10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800cd16:	68fa      	ldr	r2, [r7, #12]
 800cd18:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800cd1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800cd24:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800cd28:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800cd2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800cd34:	f002 020f 	and.w	r2, r2, #15
 800cd38:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800cd3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800cd40:	68fa      	ldr	r2, [r7, #12]
 800cd42:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800cd44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800cd4e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800cd52:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800cd54:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	8958      	ldrh	r0, [r3, #10]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	330a      	adds	r3, #10
 800cd5e:	461a      	mov	r2, r3
 800cd60:	2102      	movs	r1, #2
 800cd62:	f7fe ffd8 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	8998      	ldrh	r0, [r3, #12]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	330c      	adds	r3, #12
 800cd6e:	461a      	mov	r2, r3
 800cd70:	2102      	movs	r1, #2
 800cd72:	f7fe ffd0 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800cd7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800cd84:	68fa      	ldr	r2, [r7, #12]
 800cd86:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800cd88:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6918      	ldr	r0, [r3, #16]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	3312      	adds	r3, #18
 800cd92:	461a      	mov	r2, r3
 800cd94:	2104      	movs	r1, #4
 800cd96:	f7ff f85e 	bl	800be56 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800cda2:	f002 0201 	and.w	r2, r2, #1
 800cda6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800cda8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800cdaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3718      	adds	r7, #24
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b086      	sub	sp, #24
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	60f8      	str	r0, [r7, #12]
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	607a      	str	r2, [r7, #4]
 800cdc2:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800cdc8:	897b      	ldrh	r3, [r7, #10]
 800cdca:	2b11      	cmp	r3, #17
 800cdcc:	d802      	bhi.n	800cdd4 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cdce:	f06f 0309 	mvn.w	r3, #9
 800cdd2:	e071      	b.n	800ceb8 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	f003 0303 	and.w	r3, r3, #3
 800cddc:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	8858      	ldrh	r0, [r3, #2]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	3301      	adds	r3, #1
 800cdea:	461a      	mov	r2, r3
 800cdec:	2102      	movs	r1, #2
 800cdee:	f7fe ff92 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	8898      	ldrh	r0, [r3, #4]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	3303      	adds	r3, #3
 800cdfa:	461a      	mov	r2, r3
 800cdfc:	2102      	movs	r1, #2
 800cdfe:	f7fe ff8a 	bl	800bd16 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ce0a:	f002 0201 	and.w	r2, r2, #1
 800ce0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ce10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800ce1a:	f002 0207 	and.w	r2, r2, #7
 800ce1e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ce20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800ce26:	68fa      	ldr	r2, [r7, #12]
 800ce28:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800ce2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800ce30:	68fa      	ldr	r2, [r7, #12]
 800ce32:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800ce34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800ce3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ce42:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ce44:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800ce4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ce52:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ce54:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800ce5e:	f002 0203 	and.w	r2, r2, #3
 800ce62:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ce64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800ce6e:	f002 0203 	and.w	r2, r2, #3
 800ce72:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800ce74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800ce7e:	f002 020f 	and.w	r2, r2, #15
 800ce82:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800ce84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800ce8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800ce98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800ce9e:	68fa      	ldr	r2, [r7, #12]
 800cea0:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800cea2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800ceac:	f002 0203 	and.w	r2, r2, #3
 800ceb0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800ceb2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ceb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3718      	adds	r7, #24
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b087      	sub	sp, #28
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	460b      	mov	r3, r1
 800ceca:	607a      	str	r2, [r7, #4]
 800cecc:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cece:	2300      	movs	r3, #0
 800ced0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800ced2:	897b      	ldrh	r3, [r7, #10]
 800ced4:	2b04      	cmp	r3, #4
 800ced6:	d802      	bhi.n	800cede <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ced8:	f06f 0309 	mvn.w	r3, #9
 800cedc:	e025      	b.n	800cf2a <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	781b      	ldrb	r3, [r3, #0]
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800cef4:	f002 0201 	and.w	r2, r2, #1
 800cef8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800cefa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800cf04:	f002 0201 	and.w	r2, r2, #1
 800cf08:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800cf0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800cf14:	f002 0203 	and.w	r2, r2, #3
 800cf18:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800cf1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800cf20:	68fa      	ldr	r2, [r7, #12]
 800cf22:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800cf24:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800cf26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	371c      	adds	r7, #28
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf34:	4770      	bx	lr

0800cf36 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b086      	sub	sp, #24
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	60b9      	str	r1, [r7, #8]
 800cf40:	607a      	str	r2, [r7, #4]
 800cf42:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cf44:	2300      	movs	r3, #0
 800cf46:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800cf48:	89fb      	ldrh	r3, [r7, #14]
 800cf4a:	2b2b      	cmp	r3, #43	; 0x2b
 800cf4c:	d802      	bhi.n	800cf54 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cf4e:	f06f 0309 	mvn.w	r3, #9
 800cf52:	e0e2      	b.n	800d11a <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf5c:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	785a      	ldrb	r2, [r3, #1]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	3302      	adds	r3, #2
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	f003 030f 	and.w	r3, r3, #15
 800cf74:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	78da      	ldrb	r2, [r3, #3]
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	3304      	adds	r3, #4
 800cf86:	4619      	mov	r1, r3
 800cf88:	2002      	movs	r0, #2
 800cf8a:	f7fe feef 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800cf96:	68bb      	ldr	r3, [r7, #8]
 800cf98:	3306      	adds	r3, #6
 800cf9a:	4619      	mov	r1, r3
 800cf9c:	2002      	movs	r0, #2
 800cf9e:	f7fe fee5 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	3308      	adds	r3, #8
 800cfae:	4619      	mov	r1, r3
 800cfb0:	2002      	movs	r0, #2
 800cfb2:	f7fe fedb 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	330a      	adds	r3, #10
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	2002      	movs	r0, #2
 800cfc6:	f7fe fed1 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800cfd2:	68bb      	ldr	r3, [r7, #8]
 800cfd4:	330c      	adds	r3, #12
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	2002      	movs	r0, #2
 800cfda:	f7fe fec7 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	330e      	adds	r3, #14
 800cfea:	4619      	mov	r1, r3
 800cfec:	2002      	movs	r0, #2
 800cfee:	f7fe febd 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800cff2:	4603      	mov	r3, r0
 800cff4:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	3310      	adds	r3, #16
 800cffe:	4619      	mov	r1, r3
 800d000:	2002      	movs	r0, #2
 800d002:	f7fe feb3 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d006:	4603      	mov	r3, r0
 800d008:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	3312      	adds	r3, #18
 800d012:	4619      	mov	r1, r3
 800d014:	2002      	movs	r0, #2
 800d016:	f7fe fea9 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d01a:	4603      	mov	r3, r0
 800d01c:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	3314      	adds	r3, #20
 800d026:	4619      	mov	r1, r3
 800d028:	2002      	movs	r0, #2
 800d02a:	f7fe fe9f 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d02e:	4603      	mov	r3, r0
 800d030:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	3316      	adds	r3, #22
 800d03a:	4619      	mov	r1, r3
 800d03c:	2002      	movs	r0, #2
 800d03e:	f7fe fe95 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d042:	4603      	mov	r3, r0
 800d044:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	3318      	adds	r3, #24
 800d04e:	4619      	mov	r1, r3
 800d050:	2002      	movs	r0, #2
 800d052:	f7fe fe8b 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d056:	4603      	mov	r3, r0
 800d058:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	331a      	adds	r3, #26
 800d062:	4619      	mov	r1, r3
 800d064:	2002      	movs	r0, #2
 800d066:	f7fe fe81 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d06a:	4603      	mov	r3, r0
 800d06c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	331c      	adds	r3, #28
 800d076:	4619      	mov	r1, r3
 800d078:	2002      	movs	r0, #2
 800d07a:	f7fe fe77 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d07e:	4603      	mov	r3, r0
 800d080:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	331e      	adds	r3, #30
 800d08a:	4619      	mov	r1, r3
 800d08c:	2002      	movs	r0, #2
 800d08e:	f7fe fe6d 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d092:	4603      	mov	r3, r0
 800d094:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	3320      	adds	r3, #32
 800d09e:	4619      	mov	r1, r3
 800d0a0:	2002      	movs	r0, #2
 800d0a2:	f7fe fe63 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	3322      	adds	r3, #34	; 0x22
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	2002      	movs	r0, #2
 800d0b6:	f7fe fe59 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	3324      	adds	r3, #36	; 0x24
 800d0c6:	4619      	mov	r1, r3
 800d0c8:	2002      	movs	r0, #2
 800d0ca:	f7fe fe4f 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	3326      	adds	r3, #38	; 0x26
 800d0da:	4619      	mov	r1, r3
 800d0dc:	2002      	movs	r0, #2
 800d0de:	f7fe fe45 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	3328      	adds	r3, #40	; 0x28
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	2002      	movs	r0, #2
 800d0f2:	f7fe fe3b 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800d116:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3718      	adds	r7, #24
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b086      	sub	sp, #24
 800d126:	af00      	add	r7, sp, #0
 800d128:	4603      	mov	r3, r0
 800d12a:	60b9      	str	r1, [r7, #8]
 800d12c:	607a      	str	r2, [r7, #4]
 800d12e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d130:	2300      	movs	r3, #0
 800d132:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800d134:	89fb      	ldrh	r3, [r7, #14]
 800d136:	2b20      	cmp	r3, #32
 800d138:	d802      	bhi.n	800d140 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d13a:	f06f 0309 	mvn.w	r3, #9
 800d13e:	e04d      	b.n	800d1dc <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800d140:	68b9      	ldr	r1, [r7, #8]
 800d142:	2004      	movs	r0, #4
 800d144:	f7fe feb1 	bl	800beaa <VL53L1_i2c_decode_uint32_t>
 800d148:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	3304      	adds	r3, #4
 800d152:	4619      	mov	r1, r3
 800d154:	2004      	movs	r0, #4
 800d156:	f7fe fea8 	bl	800beaa <VL53L1_i2c_decode_uint32_t>
 800d15a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	3308      	adds	r3, #8
 800d164:	4619      	mov	r1, r3
 800d166:	2004      	movs	r0, #4
 800d168:	f7fe febc 	bl	800bee4 <VL53L1_i2c_decode_int32_t>
 800d16c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	330c      	adds	r3, #12
 800d176:	4619      	mov	r1, r3
 800d178:	2004      	movs	r0, #4
 800d17a:	f7fe fe96 	bl	800beaa <VL53L1_i2c_decode_uint32_t>
 800d17e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	3310      	adds	r3, #16
 800d188:	4619      	mov	r1, r3
 800d18a:	2004      	movs	r0, #4
 800d18c:	f7fe fe8d 	bl	800beaa <VL53L1_i2c_decode_uint32_t>
 800d190:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	3314      	adds	r3, #20
 800d19a:	4619      	mov	r1, r3
 800d19c:	2004      	movs	r0, #4
 800d19e:	f7fe fe84 	bl	800beaa <VL53L1_i2c_decode_uint32_t>
 800d1a2:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	3318      	adds	r3, #24
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	2004      	movs	r0, #4
 800d1b0:	f7fe fe98 	bl	800bee4 <VL53L1_i2c_decode_int32_t>
 800d1b4:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	331c      	adds	r3, #28
 800d1be:	4619      	mov	r1, r3
 800d1c0:	2004      	movs	r0, #4
 800d1c2:	f7fe fe72 	bl	800beaa <VL53L1_i2c_decode_uint32_t>
 800d1c6:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	f893 2020 	ldrb.w	r2, [r3, #32]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800d1d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	3718      	adds	r7, #24
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}

0800d1e4 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b086      	sub	sp, #24
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
 800d1f0:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800d1f6:	89fb      	ldrh	r3, [r7, #14]
 800d1f8:	2b37      	cmp	r3, #55	; 0x37
 800d1fa:	d802      	bhi.n	800d202 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d1fc:	f06f 0309 	mvn.w	r3, #9
 800d200:	e15e      	b.n	800d4c0 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800d202:	68b9      	ldr	r1, [r7, #8]
 800d204:	2002      	movs	r0, #2
 800d206:	f7fe fdb1 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d20a:	4603      	mov	r3, r0
 800d20c:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	3302      	adds	r3, #2
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d21c:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	3303      	adds	r3, #3
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d22c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	3304      	adds	r3, #4
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	f003 0303 	and.w	r3, r3, #3
 800d23c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	3305      	adds	r3, #5
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	f003 0301 	and.w	r3, r3, #1
 800d24c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	3306      	adds	r3, #6
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d25c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	3307      	adds	r3, #7
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d26c:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	3308      	adds	r3, #8
 800d276:	4619      	mov	r1, r3
 800d278:	2002      	movs	r0, #2
 800d27a:	f7fe fd77 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d27e:	4603      	mov	r3, r0
 800d280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d284:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	330a      	adds	r3, #10
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	f003 0303 	and.w	r3, r3, #3
 800d294:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	330b      	adds	r3, #11
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	f003 0303 	and.w	r3, r3, #3
 800d2a4:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	330c      	adds	r3, #12
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	f003 030f 	and.w	r3, r3, #15
 800d2b4:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	330d      	adds	r3, #13
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	f003 0307 	and.w	r3, r3, #7
 800d2c4:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	330e      	adds	r3, #14
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	f003 0301 	and.w	r3, r3, #1
 800d2d4:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	330f      	adds	r3, #15
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	f003 0303 	and.w	r3, r3, #3
 800d2e4:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	7c1a      	ldrb	r2, [r3, #16]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	7c5a      	ldrb	r2, [r3, #17]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	3312      	adds	r3, #18
 800d2fe:	4619      	mov	r1, r3
 800d300:	2002      	movs	r0, #2
 800d302:	f7fe fd33 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d306:	4603      	mov	r3, r0
 800d308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d30c:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	3316      	adds	r3, #22
 800d316:	4619      	mov	r1, r3
 800d318:	2002      	movs	r0, #2
 800d31a:	f7fe fd27 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d31e:	4603      	mov	r3, r0
 800d320:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	3318      	adds	r3, #24
 800d32a:	4619      	mov	r1, r3
 800d32c:	2002      	movs	r0, #2
 800d32e:	f7fe fd1d 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d332:	4603      	mov	r3, r0
 800d334:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	331a      	adds	r3, #26
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	f003 0301 	and.w	r3, r3, #1
 800d344:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	331b      	adds	r3, #27
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	f003 0307 	and.w	r3, r3, #7
 800d354:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	7f1a      	ldrb	r2, [r3, #28]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	7f5a      	ldrb	r2, [r3, #29]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	331e      	adds	r3, #30
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d374:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	331f      	adds	r3, #31
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d384:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	3320      	adds	r3, #32
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	f003 0303 	and.w	r3, r3, #3
 800d394:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	3321      	adds	r3, #33	; 0x21
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	f003 030f 	and.w	r3, r3, #15
 800d3a4:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	3325      	adds	r3, #37	; 0x25
 800d3d2:	781b      	ldrb	r3, [r3, #0]
 800d3d4:	f003 0301 	and.w	r3, r3, #1
 800d3d8:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	3326      	adds	r3, #38	; 0x26
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	f003 0303 	and.w	r3, r3, #3
 800d3ea:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	3327      	adds	r3, #39	; 0x27
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	f003 031f 	and.w	r3, r3, #31
 800d3fc:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	3328      	adds	r3, #40	; 0x28
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	f003 031f 	and.w	r3, r3, #31
 800d40e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	3329      	adds	r3, #41	; 0x29
 800d41a:	781b      	ldrb	r3, [r3, #0]
 800d41c:	f003 031f 	and.w	r3, r3, #31
 800d420:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800d428:	68bb      	ldr	r3, [r7, #8]
 800d42a:	332a      	adds	r3, #42	; 0x2a
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	f003 0301 	and.w	r3, r3, #1
 800d432:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800d43a:	68bb      	ldr	r3, [r7, #8]
 800d43c:	332b      	adds	r3, #43	; 0x2b
 800d43e:	781b      	ldrb	r3, [r3, #0]
 800d440:	f003 0301 	and.w	r3, r3, #1
 800d444:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	332c      	adds	r3, #44	; 0x2c
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	f003 0303 	and.w	r3, r3, #3
 800d456:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	332d      	adds	r3, #45	; 0x2d
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d468:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	332e      	adds	r3, #46	; 0x2e
 800d474:	4619      	mov	r1, r3
 800d476:	2004      	movs	r0, #4
 800d478:	f7fe fd17 	bl	800beaa <VL53L1_i2c_decode_uint32_t>
 800d47c:	4603      	mov	r3, r0
 800d47e:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	3332      	adds	r3, #50	; 0x32
 800d48a:	4619      	mov	r1, r3
 800d48c:	2004      	movs	r0, #4
 800d48e:	f7fe fd0c 	bl	800beaa <VL53L1_i2c_decode_uint32_t>
 800d492:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	3336      	adds	r3, #54	; 0x36
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	f003 0301 	and.w	r3, r3, #1
 800d4a2:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	3337      	adds	r3, #55	; 0x37
 800d4ae:	781b      	ldrb	r3, [r3, #0]
 800d4b0:	f003 0301 	and.w	r3, r3, #1
 800d4b4:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800d4bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3718      	adds	r7, #24
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b086      	sub	sp, #24
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	60b9      	str	r1, [r7, #8]
 800d4d2:	607a      	str	r2, [r7, #4]
 800d4d4:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800d4da:	89fb      	ldrh	r3, [r7, #14]
 800d4dc:	2b30      	cmp	r3, #48	; 0x30
 800d4de:	d802      	bhi.n	800d4e6 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d4e0:	f06f 0309 	mvn.w	r3, #9
 800d4e4:	e112      	b.n	800d70c <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	785a      	ldrb	r2, [r3, #1]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	789a      	ldrb	r2, [r3, #2]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	3303      	adds	r3, #3
 800d502:	4619      	mov	r1, r3
 800d504:	2002      	movs	r0, #2
 800d506:	f7fe fc31 	bl	800bd6c <VL53L1_i2c_decode_uint16_t>
 800d50a:	4603      	mov	r3, r0
 800d50c:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	3305      	adds	r3, #5
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d51c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	3306      	adds	r3, #6
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	f003 0307 	and.w	r3, r3, #7
 800d52c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	3307      	adds	r3, #7
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	f003 0307 	and.w	r3, r3, #7
 800d53c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	3308      	adds	r3, #8
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d54c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	3309      	adds	r3, #9
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d55c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	330a      	adds	r3, #10
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	f003 0301 	and.w	r3, r3, #1
 800d56c:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	330b      	adds	r3, #11
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d57c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	330c      	adds	r3, #12
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	f003 0301 	and.w	r3, r3, #1
 800d58c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	330d      	adds	r3, #13
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d59c:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	330e      	adds	r3, #14
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5ac:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	7bda      	ldrb	r2, [r3, #15]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	7c1a      	ldrb	r2, [r3, #16]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	7c5a      	ldrb	r2, [r3, #17]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	7c9a      	ldrb	r2, [r3, #18]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	7cda      	ldrb	r2, [r3, #19]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	7d1a      	ldrb	r2, [r3, #20]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	7d5a      	ldrb	r2, [r3, #21]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	7d9a      	ldrb	r2, [r3, #22]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	7dda      	ldrb	r2, [r3, #23]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	7e1a      	ldrb	r2, [r3, #24]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	7e5a      	ldrb	r2, [r3, #25]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	7e9a      	ldrb	r2, [r3, #26]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	7eda      	ldrb	r2, [r3, #27]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	7f1a      	ldrb	r2, [r3, #28]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	7f5a      	ldrb	r2, [r3, #29]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	7f9a      	ldrb	r2, [r3, #30]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	7fda      	ldrb	r2, [r3, #31]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800d708:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3718      	adds	r7, #24
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b090      	sub	sp, #64	; 0x40
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d71e:	2300      	movs	r3, #0
 800d720:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800d724:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d10a      	bne.n	800d742 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800d72c:	f107 020c 	add.w	r2, r7, #12
 800d730:	2331      	movs	r3, #49	; 0x31
 800d732:	f240 110f 	movw	r1, #271	; 0x10f
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 f8f4 	bl	800d924 <VL53L1_ReadMulti>
 800d73c:	4603      	mov	r3, r0
 800d73e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800d742:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d746:	2b00      	cmp	r3, #0
 800d748:	d109      	bne.n	800d75e <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800d74a:	f107 030c 	add.w	r3, r7, #12
 800d74e:	683a      	ldr	r2, [r7, #0]
 800d750:	4619      	mov	r1, r3
 800d752:	2031      	movs	r0, #49	; 0x31
 800d754:	f7ff feb8 	bl	800d4c8 <VL53L1_i2c_decode_nvm_copy_data>
 800d758:	4603      	mov	r3, r0
 800d75a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800d75e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d762:	4618      	mov	r0, r3
 800d764:	3740      	adds	r7, #64	; 0x40
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}

0800d76a <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b086      	sub	sp, #24
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
 800d772:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d774:	2300      	movs	r3, #0
 800d776:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 800d780:	2300      	movs	r3, #0
 800d782:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 800d784:	2300      	movs	r3, #0
 800d786:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800d78e:	f003 0310 	and.w	r3, r3, #16
 800d792:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800d794:	7bfb      	ldrb	r3, [r7, #15]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d102      	bne.n	800d7a0 <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 800d79a:	2301      	movs	r3, #1
 800d79c:	75fb      	strb	r3, [r7, #23]
 800d79e:	e001      	b.n	800d7a4 <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 800d7a4:	f107 030e 	add.w	r3, r7, #14
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	2131      	movs	r1, #49	; 0x31
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 f919 	bl	800d9e4 <VL53L1_RdByte>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 800d7b6:	7bbb      	ldrb	r3, [r7, #14]
 800d7b8:	f003 0201 	and.w	r2, r3, #1
 800d7bc:	7dfb      	ldrb	r3, [r7, #23]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d103      	bne.n	800d7ca <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	701a      	strb	r2, [r3, #0]
 800d7c8:	e002      	b.n	800d7d0 <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800d7d0:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3718      	adds	r7, #24
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b086      	sub	sp, #24
 800d7e0:	af02      	add	r7, sp, #8
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800d7ea:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 f98c 	bl	800db0c <VL53L1_WaitUs>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800d7f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10b      	bne.n	800d818 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800d800:	2301      	movs	r3, #1
 800d802:	9301      	str	r3, [sp, #4]
 800d804:	2301      	movs	r3, #1
 800d806:	9300      	str	r3, [sp, #0]
 800d808:	2301      	movs	r3, #1
 800d80a:	22e5      	movs	r2, #229	; 0xe5
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f992 	bl	800db38 <VL53L1_WaitValueMaskEx>
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800d818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d103      	bne.n	800d828 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800d820:	2103      	movs	r1, #3
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7fe f85b 	bl	800b8de <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800d828:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d82c:	4618      	mov	r0, r3
 800d82e:	3710      	adds	r7, #16
 800d830:	46bd      	mov	sp, r7
 800d832:	bd80      	pop	{r7, pc}

0800d834 <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af02      	add	r7, sp, #8
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	330a      	adds	r3, #10
 800d844:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800d852:	b299      	uxth	r1, r3
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	b29a      	uxth	r2, r3
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	4613      	mov	r3, r2
 800d85e:	68ba      	ldr	r2, [r7, #8]
 800d860:	f7f6 fcaa 	bl	80041b8 <HAL_I2C_Master_Transmit>
 800d864:	4603      	mov	r3, r0
 800d866:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d868:	693b      	ldr	r3, [r7, #16]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3718      	adds	r7, #24
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d872:	b580      	push	{r7, lr}
 800d874:	b088      	sub	sp, #32
 800d876:	af02      	add	r7, sp, #8
 800d878:	60f8      	str	r0, [r7, #12]
 800d87a:	60b9      	str	r1, [r7, #8]
 800d87c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	330a      	adds	r3, #10
 800d882:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800d890:	f043 0301 	orr.w	r3, r3, #1
 800d894:	b2db      	uxtb	r3, r3
 800d896:	b299      	uxth	r1, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	9300      	str	r3, [sp, #0]
 800d8a0:	4613      	mov	r3, r2
 800d8a2:	68ba      	ldr	r2, [r7, #8]
 800d8a4:	f7f6 fd86 	bl	80043b4 <HAL_I2C_Master_Receive>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d8ac:	693b      	ldr	r3, [r7, #16]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3718      	adds	r7, #24
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
	...

0800d8b8 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b086      	sub	sp, #24
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	607a      	str	r2, [r7, #4]
 800d8c2:	603b      	str	r3, [r7, #0]
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	2bff      	cmp	r3, #255	; 0xff
 800d8d0:	d902      	bls.n	800d8d8 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800d8d2:	f06f 0303 	mvn.w	r3, #3
 800d8d6:	e01d      	b.n	800d914 <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800d8d8:	897b      	ldrh	r3, [r7, #10]
 800d8da:	0a1b      	lsrs	r3, r3, #8
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	b2da      	uxtb	r2, r3
 800d8e0:	4b0e      	ldr	r3, [pc, #56]	; (800d91c <VL53L1_WriteMulti+0x64>)
 800d8e2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800d8e4:	897b      	ldrh	r3, [r7, #10]
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	4b0c      	ldr	r3, [pc, #48]	; (800d91c <VL53L1_WriteMulti+0x64>)
 800d8ea:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800d8ec:	683a      	ldr	r2, [r7, #0]
 800d8ee:	6879      	ldr	r1, [r7, #4]
 800d8f0:	480b      	ldr	r0, [pc, #44]	; (800d920 <VL53L1_WriteMulti+0x68>)
 800d8f2:	f000 f9ef 	bl	800dcd4 <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	3302      	adds	r3, #2
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	4907      	ldr	r1, [pc, #28]	; (800d91c <VL53L1_WriteMulti+0x64>)
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f7ff ff98 	bl	800d834 <_I2CWrite>
 800d904:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d001      	beq.n	800d910 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d90c:	23f3      	movs	r3, #243	; 0xf3
 800d90e:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800d910:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d914:	4618      	mov	r0, r3
 800d916:	3718      	adds	r7, #24
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	20000bb8 	.word	0x20000bb8
 800d920:	20000bba 	.word	0x20000bba

0800d924 <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800d924:	b580      	push	{r7, lr}
 800d926:	b086      	sub	sp, #24
 800d928:	af00      	add	r7, sp, #0
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	607a      	str	r2, [r7, #4]
 800d92e:	603b      	str	r3, [r7, #0]
 800d930:	460b      	mov	r3, r1
 800d932:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d934:	2300      	movs	r3, #0
 800d936:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800d938:	897b      	ldrh	r3, [r7, #10]
 800d93a:	0a1b      	lsrs	r3, r3, #8
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	4b12      	ldr	r3, [pc, #72]	; (800d98c <VL53L1_ReadMulti+0x68>)
 800d942:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800d944:	897b      	ldrh	r3, [r7, #10]
 800d946:	b2da      	uxtb	r2, r3
 800d948:	4b10      	ldr	r3, [pc, #64]	; (800d98c <VL53L1_ReadMulti+0x68>)
 800d94a:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d94c:	2202      	movs	r2, #2
 800d94e:	490f      	ldr	r1, [pc, #60]	; (800d98c <VL53L1_ReadMulti+0x68>)
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f7ff ff6f 	bl	800d834 <_I2CWrite>
 800d956:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d002      	beq.n	800d964 <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d95e:	23f3      	movs	r3, #243	; 0xf3
 800d960:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d962:	e00c      	b.n	800d97e <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	6879      	ldr	r1, [r7, #4]
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f7ff ff82 	bl	800d872 <_I2CRead>
 800d96e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d002      	beq.n	800d97c <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d976:	23f3      	movs	r3, #243	; 0xf3
 800d978:	75fb      	strb	r3, [r7, #23]
 800d97a:	e000      	b.n	800d97e <VL53L1_ReadMulti+0x5a>
    }
done:
 800d97c:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800d97e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d982:	4618      	mov	r0, r3
 800d984:	3718      	adds	r7, #24
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
 800d98a:	bf00      	nop
 800d98c:	20000bb8 	.word	0x20000bb8

0800d990 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	460b      	mov	r3, r1
 800d99a:	807b      	strh	r3, [r7, #2]
 800d99c:	4613      	mov	r3, r2
 800d99e:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800d9a4:	887b      	ldrh	r3, [r7, #2]
 800d9a6:	0a1b      	lsrs	r3, r3, #8
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	4b0c      	ldr	r3, [pc, #48]	; (800d9e0 <VL53L1_WrByte+0x50>)
 800d9ae:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800d9b0:	887b      	ldrh	r3, [r7, #2]
 800d9b2:	b2da      	uxtb	r2, r3
 800d9b4:	4b0a      	ldr	r3, [pc, #40]	; (800d9e0 <VL53L1_WrByte+0x50>)
 800d9b6:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800d9b8:	4a09      	ldr	r2, [pc, #36]	; (800d9e0 <VL53L1_WrByte+0x50>)
 800d9ba:	787b      	ldrb	r3, [r7, #1]
 800d9bc:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800d9be:	2203      	movs	r2, #3
 800d9c0:	4907      	ldr	r1, [pc, #28]	; (800d9e0 <VL53L1_WrByte+0x50>)
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7ff ff36 	bl	800d834 <_I2CWrite>
 800d9c8:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d9d0:	23f3      	movs	r3, #243	; 0xf3
 800d9d2:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800d9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3710      	adds	r7, #16
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}
 800d9e0:	20000bb8 	.word	0x20000bb8

0800d9e4 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b086      	sub	sp, #24
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	607a      	str	r2, [r7, #4]
 800d9f0:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800d9f6:	897b      	ldrh	r3, [r7, #10]
 800d9f8:	0a1b      	lsrs	r3, r3, #8
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	4b12      	ldr	r3, [pc, #72]	; (800da48 <VL53L1_RdByte+0x64>)
 800da00:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800da02:	897b      	ldrh	r3, [r7, #10]
 800da04:	b2da      	uxtb	r2, r3
 800da06:	4b10      	ldr	r3, [pc, #64]	; (800da48 <VL53L1_RdByte+0x64>)
 800da08:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800da0a:	2202      	movs	r2, #2
 800da0c:	490e      	ldr	r1, [pc, #56]	; (800da48 <VL53L1_RdByte+0x64>)
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f7ff ff10 	bl	800d834 <_I2CWrite>
 800da14:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800da16:	693b      	ldr	r3, [r7, #16]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800da1c:	23f3      	movs	r3, #243	; 0xf3
 800da1e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800da20:	e00c      	b.n	800da3c <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800da22:	2201      	movs	r2, #1
 800da24:	6879      	ldr	r1, [r7, #4]
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f7ff ff23 	bl	800d872 <_I2CRead>
 800da2c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d002      	beq.n	800da3a <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800da34:	23f3      	movs	r3, #243	; 0xf3
 800da36:	75fb      	strb	r3, [r7, #23]
 800da38:	e000      	b.n	800da3c <VL53L1_RdByte+0x58>
    }
done:
 800da3a:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800da3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da40:	4618      	mov	r0, r3
 800da42:	3718      	adds	r7, #24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	20000bb8 	.word	0x20000bb8

0800da4c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b086      	sub	sp, #24
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	460b      	mov	r3, r1
 800da56:	607a      	str	r2, [r7, #4]
 800da58:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800da5a:	2300      	movs	r3, #0
 800da5c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800da5e:	897b      	ldrh	r3, [r7, #10]
 800da60:	0a1b      	lsrs	r3, r3, #8
 800da62:	b29b      	uxth	r3, r3
 800da64:	b2da      	uxtb	r2, r3
 800da66:	4b18      	ldr	r3, [pc, #96]	; (800dac8 <VL53L1_RdWord+0x7c>)
 800da68:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800da6a:	897b      	ldrh	r3, [r7, #10]
 800da6c:	b2da      	uxtb	r2, r3
 800da6e:	4b16      	ldr	r3, [pc, #88]	; (800dac8 <VL53L1_RdWord+0x7c>)
 800da70:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800da72:	2202      	movs	r2, #2
 800da74:	4914      	ldr	r1, [pc, #80]	; (800dac8 <VL53L1_RdWord+0x7c>)
 800da76:	68f8      	ldr	r0, [r7, #12]
 800da78:	f7ff fedc 	bl	800d834 <_I2CWrite>
 800da7c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d002      	beq.n	800da8a <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800da84:	23f3      	movs	r3, #243	; 0xf3
 800da86:	75fb      	strb	r3, [r7, #23]
        goto done;
 800da88:	e017      	b.n	800daba <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800da8a:	2202      	movs	r2, #2
 800da8c:	490e      	ldr	r1, [pc, #56]	; (800dac8 <VL53L1_RdWord+0x7c>)
 800da8e:	68f8      	ldr	r0, [r7, #12]
 800da90:	f7ff feef 	bl	800d872 <_I2CRead>
 800da94:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800da9c:	23f3      	movs	r3, #243	; 0xf3
 800da9e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800daa0:	e00b      	b.n	800daba <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800daa2:	4b09      	ldr	r3, [pc, #36]	; (800dac8 <VL53L1_RdWord+0x7c>)
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	021b      	lsls	r3, r3, #8
 800daaa:	b29a      	uxth	r2, r3
 800daac:	4b06      	ldr	r3, [pc, #24]	; (800dac8 <VL53L1_RdWord+0x7c>)
 800daae:	785b      	ldrb	r3, [r3, #1]
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	4413      	add	r3, r2
 800dab4:	b29a      	uxth	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800daba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3718      	adds	r7, #24
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	20000bb8 	.word	0x20000bb8

0800dacc <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800dacc:	b480      	push	{r7}
 800dace:	b085      	sub	sp, #20
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800dad4:	2300      	movs	r3, #0
 800dad6:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800dade:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3714      	adds	r7, #20
 800dae6:	46bd      	mov	sp, r7
 800dae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daec:	4770      	bx	lr

0800daee <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800daee:	b580      	push	{r7, lr}
 800daf0:	b082      	sub	sp, #8
 800daf2:	af00      	add	r7, sp, #0
 800daf4:	6078      	str	r0, [r7, #4]
 800daf6:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7f5 fcc2 	bl	8003484 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800db00:	2300      	movs	r3, #0
}
 800db02:	4618      	mov	r0, r3
 800db04:	3708      	adds	r7, #8
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
	...

0800db0c <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	4a06      	ldr	r2, [pc, #24]	; (800db34 <VL53L1_WaitUs+0x28>)
 800db1a:	fb82 1203 	smull	r1, r2, r2, r3
 800db1e:	1192      	asrs	r2, r2, #6
 800db20:	17db      	asrs	r3, r3, #31
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	4618      	mov	r0, r3
 800db26:	f7f5 fcad 	bl	8003484 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	10624dd3 	.word	0x10624dd3

0800db38 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800db38:	b590      	push	{r4, r7, lr}
 800db3a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800db3e:	af00      	add	r7, sp, #0
 800db40:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800db44:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800db48:	6020      	str	r0, [r4, #0]
 800db4a:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800db4e:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800db52:	6001      	str	r1, [r0, #0]
 800db54:	4619      	mov	r1, r3
 800db56:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800db5a:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800db5e:	801a      	strh	r2, [r3, #0]
 800db60:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800db64:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 800db68:	460a      	mov	r2, r1
 800db6a:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800db6c:	2300      	movs	r3, #0
 800db6e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800db72:	2300      	movs	r3, #0
 800db74:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800db78:	2300      	movs	r3, #0
 800db7a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800db7e:	2300      	movs	r3, #0
 800db80:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800db84:	2300      	movs	r3, #0
 800db86:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800db90:	f107 0310 	add.w	r3, r7, #16
 800db94:	f240 12ff 	movw	r2, #511	; 0x1ff
 800db98:	493b      	ldr	r1, [pc, #236]	; (800dc88 <VL53L1_WaitValueMaskEx+0x150>)
 800db9a:	4618      	mov	r0, r3
 800db9c:	f000 fd3a 	bl	800e614 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800dba0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7ff ff91 	bl	800dacc <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800dbaa:	e049      	b.n	800dc40 <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800dbac:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d110      	bne.n	800dbd6 <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 800dbb4:	f207 2213 	addw	r2, r7, #531	; 0x213
 800dbb8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800dbbc:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800dbc0:	8819      	ldrh	r1, [r3, #0]
 800dbc2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800dbc6:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800dbca:	6818      	ldr	r0, [r3, #0]
 800dbcc:	f7ff ff0a 	bl	800d9e4 <VL53L1_RdByte>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800dbd6:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800dbda:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800dbde:	4013      	ands	r3, r2
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800dbe6:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 800dbea:	7812      	ldrb	r2, [r2, #0]
 800dbec:	429a      	cmp	r2, r3
 800dbee:	d102      	bne.n	800dbf6 <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800dbf6:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d114      	bne.n	800dc28 <VL53L1_WaitValueMaskEx+0xf0>
 800dbfe:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d110      	bne.n	800dc28 <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 800dc06:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d00c      	beq.n	800dc28 <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800dc0e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800dc12:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800dc16:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800dc1a:	4611      	mov	r1, r2
 800dc1c:	6818      	ldr	r0, [r3, #0]
 800dc1e:	f7ff ff66 	bl	800daee <VL53L1_WaitMs>
 800dc22:	4603      	mov	r3, r0
 800dc24:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800dc28:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7ff ff4d 	bl	800dacc <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800dc32:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800dc36:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800dc3a:	1ad3      	subs	r3, r2, r3
 800dc3c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800dc40:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10c      	bne.n	800dc62 <VL53L1_WaitValueMaskEx+0x12a>
 800dc48:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800dc4c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800dc50:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	429a      	cmp	r2, r3
 800dc58:	d203      	bcs.n	800dc62 <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 800dc5a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d0a4      	beq.n	800dbac <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800dc62:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d106      	bne.n	800dc78 <VL53L1_WaitValueMaskEx+0x140>
 800dc6a:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d102      	bne.n	800dc78 <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 800dc72:	23f9      	movs	r3, #249	; 0xf9
 800dc74:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800dc78:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd90      	pop	{r4, r7, pc}
 800dc86:	bf00      	nop
 800dc88:	08012094 	.word	0x08012094

0800dc8c <__libc_init_array>:
 800dc8c:	b570      	push	{r4, r5, r6, lr}
 800dc8e:	4d0d      	ldr	r5, [pc, #52]	; (800dcc4 <__libc_init_array+0x38>)
 800dc90:	4c0d      	ldr	r4, [pc, #52]	; (800dcc8 <__libc_init_array+0x3c>)
 800dc92:	1b64      	subs	r4, r4, r5
 800dc94:	10a4      	asrs	r4, r4, #2
 800dc96:	2600      	movs	r6, #0
 800dc98:	42a6      	cmp	r6, r4
 800dc9a:	d109      	bne.n	800dcb0 <__libc_init_array+0x24>
 800dc9c:	4d0b      	ldr	r5, [pc, #44]	; (800dccc <__libc_init_array+0x40>)
 800dc9e:	4c0c      	ldr	r4, [pc, #48]	; (800dcd0 <__libc_init_array+0x44>)
 800dca0:	f004 f9b4 	bl	801200c <_init>
 800dca4:	1b64      	subs	r4, r4, r5
 800dca6:	10a4      	asrs	r4, r4, #2
 800dca8:	2600      	movs	r6, #0
 800dcaa:	42a6      	cmp	r6, r4
 800dcac:	d105      	bne.n	800dcba <__libc_init_array+0x2e>
 800dcae:	bd70      	pop	{r4, r5, r6, pc}
 800dcb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcb4:	4798      	blx	r3
 800dcb6:	3601      	adds	r6, #1
 800dcb8:	e7ee      	b.n	800dc98 <__libc_init_array+0xc>
 800dcba:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcbe:	4798      	blx	r3
 800dcc0:	3601      	adds	r6, #1
 800dcc2:	e7f2      	b.n	800dcaa <__libc_init_array+0x1e>
 800dcc4:	080126b0 	.word	0x080126b0
 800dcc8:	080126b0 	.word	0x080126b0
 800dccc:	080126b0 	.word	0x080126b0
 800dcd0:	080126b4 	.word	0x080126b4

0800dcd4 <memcpy>:
 800dcd4:	440a      	add	r2, r1
 800dcd6:	4291      	cmp	r1, r2
 800dcd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcdc:	d100      	bne.n	800dce0 <memcpy+0xc>
 800dcde:	4770      	bx	lr
 800dce0:	b510      	push	{r4, lr}
 800dce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dce6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcea:	4291      	cmp	r1, r2
 800dcec:	d1f9      	bne.n	800dce2 <memcpy+0xe>
 800dcee:	bd10      	pop	{r4, pc}

0800dcf0 <memset>:
 800dcf0:	4402      	add	r2, r0
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d100      	bne.n	800dcfa <memset+0xa>
 800dcf8:	4770      	bx	lr
 800dcfa:	f803 1b01 	strb.w	r1, [r3], #1
 800dcfe:	e7f9      	b.n	800dcf4 <memset+0x4>

0800dd00 <__cvt>:
 800dd00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd04:	ec55 4b10 	vmov	r4, r5, d0
 800dd08:	2d00      	cmp	r5, #0
 800dd0a:	460e      	mov	r6, r1
 800dd0c:	4619      	mov	r1, r3
 800dd0e:	462b      	mov	r3, r5
 800dd10:	bfbb      	ittet	lt
 800dd12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dd16:	461d      	movlt	r5, r3
 800dd18:	2300      	movge	r3, #0
 800dd1a:	232d      	movlt	r3, #45	; 0x2d
 800dd1c:	700b      	strb	r3, [r1, #0]
 800dd1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dd24:	4691      	mov	r9, r2
 800dd26:	f023 0820 	bic.w	r8, r3, #32
 800dd2a:	bfbc      	itt	lt
 800dd2c:	4622      	movlt	r2, r4
 800dd2e:	4614      	movlt	r4, r2
 800dd30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd34:	d005      	beq.n	800dd42 <__cvt+0x42>
 800dd36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dd3a:	d100      	bne.n	800dd3e <__cvt+0x3e>
 800dd3c:	3601      	adds	r6, #1
 800dd3e:	2102      	movs	r1, #2
 800dd40:	e000      	b.n	800dd44 <__cvt+0x44>
 800dd42:	2103      	movs	r1, #3
 800dd44:	ab03      	add	r3, sp, #12
 800dd46:	9301      	str	r3, [sp, #4]
 800dd48:	ab02      	add	r3, sp, #8
 800dd4a:	9300      	str	r3, [sp, #0]
 800dd4c:	ec45 4b10 	vmov	d0, r4, r5
 800dd50:	4653      	mov	r3, sl
 800dd52:	4632      	mov	r2, r6
 800dd54:	f000 fcfc 	bl	800e750 <_dtoa_r>
 800dd58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dd5c:	4607      	mov	r7, r0
 800dd5e:	d102      	bne.n	800dd66 <__cvt+0x66>
 800dd60:	f019 0f01 	tst.w	r9, #1
 800dd64:	d022      	beq.n	800ddac <__cvt+0xac>
 800dd66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd6a:	eb07 0906 	add.w	r9, r7, r6
 800dd6e:	d110      	bne.n	800dd92 <__cvt+0x92>
 800dd70:	783b      	ldrb	r3, [r7, #0]
 800dd72:	2b30      	cmp	r3, #48	; 0x30
 800dd74:	d10a      	bne.n	800dd8c <__cvt+0x8c>
 800dd76:	2200      	movs	r2, #0
 800dd78:	2300      	movs	r3, #0
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	f7f2 fec3 	bl	8000b08 <__aeabi_dcmpeq>
 800dd82:	b918      	cbnz	r0, 800dd8c <__cvt+0x8c>
 800dd84:	f1c6 0601 	rsb	r6, r6, #1
 800dd88:	f8ca 6000 	str.w	r6, [sl]
 800dd8c:	f8da 3000 	ldr.w	r3, [sl]
 800dd90:	4499      	add	r9, r3
 800dd92:	2200      	movs	r2, #0
 800dd94:	2300      	movs	r3, #0
 800dd96:	4620      	mov	r0, r4
 800dd98:	4629      	mov	r1, r5
 800dd9a:	f7f2 feb5 	bl	8000b08 <__aeabi_dcmpeq>
 800dd9e:	b108      	cbz	r0, 800dda4 <__cvt+0xa4>
 800dda0:	f8cd 900c 	str.w	r9, [sp, #12]
 800dda4:	2230      	movs	r2, #48	; 0x30
 800dda6:	9b03      	ldr	r3, [sp, #12]
 800dda8:	454b      	cmp	r3, r9
 800ddaa:	d307      	bcc.n	800ddbc <__cvt+0xbc>
 800ddac:	9b03      	ldr	r3, [sp, #12]
 800ddae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddb0:	1bdb      	subs	r3, r3, r7
 800ddb2:	4638      	mov	r0, r7
 800ddb4:	6013      	str	r3, [r2, #0]
 800ddb6:	b004      	add	sp, #16
 800ddb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddbc:	1c59      	adds	r1, r3, #1
 800ddbe:	9103      	str	r1, [sp, #12]
 800ddc0:	701a      	strb	r2, [r3, #0]
 800ddc2:	e7f0      	b.n	800dda6 <__cvt+0xa6>

0800ddc4 <__exponent>:
 800ddc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2900      	cmp	r1, #0
 800ddca:	bfb8      	it	lt
 800ddcc:	4249      	neglt	r1, r1
 800ddce:	f803 2b02 	strb.w	r2, [r3], #2
 800ddd2:	bfb4      	ite	lt
 800ddd4:	222d      	movlt	r2, #45	; 0x2d
 800ddd6:	222b      	movge	r2, #43	; 0x2b
 800ddd8:	2909      	cmp	r1, #9
 800ddda:	7042      	strb	r2, [r0, #1]
 800dddc:	dd2a      	ble.n	800de34 <__exponent+0x70>
 800ddde:	f10d 0407 	add.w	r4, sp, #7
 800dde2:	46a4      	mov	ip, r4
 800dde4:	270a      	movs	r7, #10
 800dde6:	46a6      	mov	lr, r4
 800dde8:	460a      	mov	r2, r1
 800ddea:	fb91 f6f7 	sdiv	r6, r1, r7
 800ddee:	fb07 1516 	mls	r5, r7, r6, r1
 800ddf2:	3530      	adds	r5, #48	; 0x30
 800ddf4:	2a63      	cmp	r2, #99	; 0x63
 800ddf6:	f104 34ff 	add.w	r4, r4, #4294967295
 800ddfa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ddfe:	4631      	mov	r1, r6
 800de00:	dcf1      	bgt.n	800dde6 <__exponent+0x22>
 800de02:	3130      	adds	r1, #48	; 0x30
 800de04:	f1ae 0502 	sub.w	r5, lr, #2
 800de08:	f804 1c01 	strb.w	r1, [r4, #-1]
 800de0c:	1c44      	adds	r4, r0, #1
 800de0e:	4629      	mov	r1, r5
 800de10:	4561      	cmp	r1, ip
 800de12:	d30a      	bcc.n	800de2a <__exponent+0x66>
 800de14:	f10d 0209 	add.w	r2, sp, #9
 800de18:	eba2 020e 	sub.w	r2, r2, lr
 800de1c:	4565      	cmp	r5, ip
 800de1e:	bf88      	it	hi
 800de20:	2200      	movhi	r2, #0
 800de22:	4413      	add	r3, r2
 800de24:	1a18      	subs	r0, r3, r0
 800de26:	b003      	add	sp, #12
 800de28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800de32:	e7ed      	b.n	800de10 <__exponent+0x4c>
 800de34:	2330      	movs	r3, #48	; 0x30
 800de36:	3130      	adds	r1, #48	; 0x30
 800de38:	7083      	strb	r3, [r0, #2]
 800de3a:	70c1      	strb	r1, [r0, #3]
 800de3c:	1d03      	adds	r3, r0, #4
 800de3e:	e7f1      	b.n	800de24 <__exponent+0x60>

0800de40 <_printf_float>:
 800de40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de44:	ed2d 8b02 	vpush	{d8}
 800de48:	b08d      	sub	sp, #52	; 0x34
 800de4a:	460c      	mov	r4, r1
 800de4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800de50:	4616      	mov	r6, r2
 800de52:	461f      	mov	r7, r3
 800de54:	4605      	mov	r5, r0
 800de56:	f001 fa69 	bl	800f32c <_localeconv_r>
 800de5a:	f8d0 a000 	ldr.w	sl, [r0]
 800de5e:	4650      	mov	r0, sl
 800de60:	f7f2 f9d6 	bl	8000210 <strlen>
 800de64:	2300      	movs	r3, #0
 800de66:	930a      	str	r3, [sp, #40]	; 0x28
 800de68:	6823      	ldr	r3, [r4, #0]
 800de6a:	9305      	str	r3, [sp, #20]
 800de6c:	f8d8 3000 	ldr.w	r3, [r8]
 800de70:	f894 b018 	ldrb.w	fp, [r4, #24]
 800de74:	3307      	adds	r3, #7
 800de76:	f023 0307 	bic.w	r3, r3, #7
 800de7a:	f103 0208 	add.w	r2, r3, #8
 800de7e:	f8c8 2000 	str.w	r2, [r8]
 800de82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800de8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800de8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800de92:	9307      	str	r3, [sp, #28]
 800de94:	f8cd 8018 	str.w	r8, [sp, #24]
 800de98:	ee08 0a10 	vmov	s16, r0
 800de9c:	4b9f      	ldr	r3, [pc, #636]	; (800e11c <_printf_float+0x2dc>)
 800de9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dea2:	f04f 32ff 	mov.w	r2, #4294967295
 800dea6:	f7f2 fe61 	bl	8000b6c <__aeabi_dcmpun>
 800deaa:	bb88      	cbnz	r0, 800df10 <_printf_float+0xd0>
 800deac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800deb0:	4b9a      	ldr	r3, [pc, #616]	; (800e11c <_printf_float+0x2dc>)
 800deb2:	f04f 32ff 	mov.w	r2, #4294967295
 800deb6:	f7f2 fe3b 	bl	8000b30 <__aeabi_dcmple>
 800deba:	bb48      	cbnz	r0, 800df10 <_printf_float+0xd0>
 800debc:	2200      	movs	r2, #0
 800debe:	2300      	movs	r3, #0
 800dec0:	4640      	mov	r0, r8
 800dec2:	4649      	mov	r1, r9
 800dec4:	f7f2 fe2a 	bl	8000b1c <__aeabi_dcmplt>
 800dec8:	b110      	cbz	r0, 800ded0 <_printf_float+0x90>
 800deca:	232d      	movs	r3, #45	; 0x2d
 800decc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ded0:	4b93      	ldr	r3, [pc, #588]	; (800e120 <_printf_float+0x2e0>)
 800ded2:	4894      	ldr	r0, [pc, #592]	; (800e124 <_printf_float+0x2e4>)
 800ded4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ded8:	bf94      	ite	ls
 800deda:	4698      	movls	r8, r3
 800dedc:	4680      	movhi	r8, r0
 800dede:	2303      	movs	r3, #3
 800dee0:	6123      	str	r3, [r4, #16]
 800dee2:	9b05      	ldr	r3, [sp, #20]
 800dee4:	f023 0204 	bic.w	r2, r3, #4
 800dee8:	6022      	str	r2, [r4, #0]
 800deea:	f04f 0900 	mov.w	r9, #0
 800deee:	9700      	str	r7, [sp, #0]
 800def0:	4633      	mov	r3, r6
 800def2:	aa0b      	add	r2, sp, #44	; 0x2c
 800def4:	4621      	mov	r1, r4
 800def6:	4628      	mov	r0, r5
 800def8:	f000 f9d8 	bl	800e2ac <_printf_common>
 800defc:	3001      	adds	r0, #1
 800defe:	f040 8090 	bne.w	800e022 <_printf_float+0x1e2>
 800df02:	f04f 30ff 	mov.w	r0, #4294967295
 800df06:	b00d      	add	sp, #52	; 0x34
 800df08:	ecbd 8b02 	vpop	{d8}
 800df0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df10:	4642      	mov	r2, r8
 800df12:	464b      	mov	r3, r9
 800df14:	4640      	mov	r0, r8
 800df16:	4649      	mov	r1, r9
 800df18:	f7f2 fe28 	bl	8000b6c <__aeabi_dcmpun>
 800df1c:	b140      	cbz	r0, 800df30 <_printf_float+0xf0>
 800df1e:	464b      	mov	r3, r9
 800df20:	2b00      	cmp	r3, #0
 800df22:	bfbc      	itt	lt
 800df24:	232d      	movlt	r3, #45	; 0x2d
 800df26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800df2a:	487f      	ldr	r0, [pc, #508]	; (800e128 <_printf_float+0x2e8>)
 800df2c:	4b7f      	ldr	r3, [pc, #508]	; (800e12c <_printf_float+0x2ec>)
 800df2e:	e7d1      	b.n	800ded4 <_printf_float+0x94>
 800df30:	6863      	ldr	r3, [r4, #4]
 800df32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800df36:	9206      	str	r2, [sp, #24]
 800df38:	1c5a      	adds	r2, r3, #1
 800df3a:	d13f      	bne.n	800dfbc <_printf_float+0x17c>
 800df3c:	2306      	movs	r3, #6
 800df3e:	6063      	str	r3, [r4, #4]
 800df40:	9b05      	ldr	r3, [sp, #20]
 800df42:	6861      	ldr	r1, [r4, #4]
 800df44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800df48:	2300      	movs	r3, #0
 800df4a:	9303      	str	r3, [sp, #12]
 800df4c:	ab0a      	add	r3, sp, #40	; 0x28
 800df4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800df52:	ab09      	add	r3, sp, #36	; 0x24
 800df54:	ec49 8b10 	vmov	d0, r8, r9
 800df58:	9300      	str	r3, [sp, #0]
 800df5a:	6022      	str	r2, [r4, #0]
 800df5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800df60:	4628      	mov	r0, r5
 800df62:	f7ff fecd 	bl	800dd00 <__cvt>
 800df66:	9b06      	ldr	r3, [sp, #24]
 800df68:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df6a:	2b47      	cmp	r3, #71	; 0x47
 800df6c:	4680      	mov	r8, r0
 800df6e:	d108      	bne.n	800df82 <_printf_float+0x142>
 800df70:	1cc8      	adds	r0, r1, #3
 800df72:	db02      	blt.n	800df7a <_printf_float+0x13a>
 800df74:	6863      	ldr	r3, [r4, #4]
 800df76:	4299      	cmp	r1, r3
 800df78:	dd41      	ble.n	800dffe <_printf_float+0x1be>
 800df7a:	f1ab 0b02 	sub.w	fp, fp, #2
 800df7e:	fa5f fb8b 	uxtb.w	fp, fp
 800df82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df86:	d820      	bhi.n	800dfca <_printf_float+0x18a>
 800df88:	3901      	subs	r1, #1
 800df8a:	465a      	mov	r2, fp
 800df8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800df90:	9109      	str	r1, [sp, #36]	; 0x24
 800df92:	f7ff ff17 	bl	800ddc4 <__exponent>
 800df96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df98:	1813      	adds	r3, r2, r0
 800df9a:	2a01      	cmp	r2, #1
 800df9c:	4681      	mov	r9, r0
 800df9e:	6123      	str	r3, [r4, #16]
 800dfa0:	dc02      	bgt.n	800dfa8 <_printf_float+0x168>
 800dfa2:	6822      	ldr	r2, [r4, #0]
 800dfa4:	07d2      	lsls	r2, r2, #31
 800dfa6:	d501      	bpl.n	800dfac <_printf_float+0x16c>
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	6123      	str	r3, [r4, #16]
 800dfac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d09c      	beq.n	800deee <_printf_float+0xae>
 800dfb4:	232d      	movs	r3, #45	; 0x2d
 800dfb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfba:	e798      	b.n	800deee <_printf_float+0xae>
 800dfbc:	9a06      	ldr	r2, [sp, #24]
 800dfbe:	2a47      	cmp	r2, #71	; 0x47
 800dfc0:	d1be      	bne.n	800df40 <_printf_float+0x100>
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d1bc      	bne.n	800df40 <_printf_float+0x100>
 800dfc6:	2301      	movs	r3, #1
 800dfc8:	e7b9      	b.n	800df3e <_printf_float+0xfe>
 800dfca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dfce:	d118      	bne.n	800e002 <_printf_float+0x1c2>
 800dfd0:	2900      	cmp	r1, #0
 800dfd2:	6863      	ldr	r3, [r4, #4]
 800dfd4:	dd0b      	ble.n	800dfee <_printf_float+0x1ae>
 800dfd6:	6121      	str	r1, [r4, #16]
 800dfd8:	b913      	cbnz	r3, 800dfe0 <_printf_float+0x1a0>
 800dfda:	6822      	ldr	r2, [r4, #0]
 800dfdc:	07d0      	lsls	r0, r2, #31
 800dfde:	d502      	bpl.n	800dfe6 <_printf_float+0x1a6>
 800dfe0:	3301      	adds	r3, #1
 800dfe2:	440b      	add	r3, r1
 800dfe4:	6123      	str	r3, [r4, #16]
 800dfe6:	65a1      	str	r1, [r4, #88]	; 0x58
 800dfe8:	f04f 0900 	mov.w	r9, #0
 800dfec:	e7de      	b.n	800dfac <_printf_float+0x16c>
 800dfee:	b913      	cbnz	r3, 800dff6 <_printf_float+0x1b6>
 800dff0:	6822      	ldr	r2, [r4, #0]
 800dff2:	07d2      	lsls	r2, r2, #31
 800dff4:	d501      	bpl.n	800dffa <_printf_float+0x1ba>
 800dff6:	3302      	adds	r3, #2
 800dff8:	e7f4      	b.n	800dfe4 <_printf_float+0x1a4>
 800dffa:	2301      	movs	r3, #1
 800dffc:	e7f2      	b.n	800dfe4 <_printf_float+0x1a4>
 800dffe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e004:	4299      	cmp	r1, r3
 800e006:	db05      	blt.n	800e014 <_printf_float+0x1d4>
 800e008:	6823      	ldr	r3, [r4, #0]
 800e00a:	6121      	str	r1, [r4, #16]
 800e00c:	07d8      	lsls	r0, r3, #31
 800e00e:	d5ea      	bpl.n	800dfe6 <_printf_float+0x1a6>
 800e010:	1c4b      	adds	r3, r1, #1
 800e012:	e7e7      	b.n	800dfe4 <_printf_float+0x1a4>
 800e014:	2900      	cmp	r1, #0
 800e016:	bfd4      	ite	le
 800e018:	f1c1 0202 	rsble	r2, r1, #2
 800e01c:	2201      	movgt	r2, #1
 800e01e:	4413      	add	r3, r2
 800e020:	e7e0      	b.n	800dfe4 <_printf_float+0x1a4>
 800e022:	6823      	ldr	r3, [r4, #0]
 800e024:	055a      	lsls	r2, r3, #21
 800e026:	d407      	bmi.n	800e038 <_printf_float+0x1f8>
 800e028:	6923      	ldr	r3, [r4, #16]
 800e02a:	4642      	mov	r2, r8
 800e02c:	4631      	mov	r1, r6
 800e02e:	4628      	mov	r0, r5
 800e030:	47b8      	blx	r7
 800e032:	3001      	adds	r0, #1
 800e034:	d12c      	bne.n	800e090 <_printf_float+0x250>
 800e036:	e764      	b.n	800df02 <_printf_float+0xc2>
 800e038:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e03c:	f240 80e0 	bls.w	800e200 <_printf_float+0x3c0>
 800e040:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e044:	2200      	movs	r2, #0
 800e046:	2300      	movs	r3, #0
 800e048:	f7f2 fd5e 	bl	8000b08 <__aeabi_dcmpeq>
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d034      	beq.n	800e0ba <_printf_float+0x27a>
 800e050:	4a37      	ldr	r2, [pc, #220]	; (800e130 <_printf_float+0x2f0>)
 800e052:	2301      	movs	r3, #1
 800e054:	4631      	mov	r1, r6
 800e056:	4628      	mov	r0, r5
 800e058:	47b8      	blx	r7
 800e05a:	3001      	adds	r0, #1
 800e05c:	f43f af51 	beq.w	800df02 <_printf_float+0xc2>
 800e060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e064:	429a      	cmp	r2, r3
 800e066:	db02      	blt.n	800e06e <_printf_float+0x22e>
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	07d8      	lsls	r0, r3, #31
 800e06c:	d510      	bpl.n	800e090 <_printf_float+0x250>
 800e06e:	ee18 3a10 	vmov	r3, s16
 800e072:	4652      	mov	r2, sl
 800e074:	4631      	mov	r1, r6
 800e076:	4628      	mov	r0, r5
 800e078:	47b8      	blx	r7
 800e07a:	3001      	adds	r0, #1
 800e07c:	f43f af41 	beq.w	800df02 <_printf_float+0xc2>
 800e080:	f04f 0800 	mov.w	r8, #0
 800e084:	f104 091a 	add.w	r9, r4, #26
 800e088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e08a:	3b01      	subs	r3, #1
 800e08c:	4543      	cmp	r3, r8
 800e08e:	dc09      	bgt.n	800e0a4 <_printf_float+0x264>
 800e090:	6823      	ldr	r3, [r4, #0]
 800e092:	079b      	lsls	r3, r3, #30
 800e094:	f100 8105 	bmi.w	800e2a2 <_printf_float+0x462>
 800e098:	68e0      	ldr	r0, [r4, #12]
 800e09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e09c:	4298      	cmp	r0, r3
 800e09e:	bfb8      	it	lt
 800e0a0:	4618      	movlt	r0, r3
 800e0a2:	e730      	b.n	800df06 <_printf_float+0xc6>
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	464a      	mov	r2, r9
 800e0a8:	4631      	mov	r1, r6
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	47b8      	blx	r7
 800e0ae:	3001      	adds	r0, #1
 800e0b0:	f43f af27 	beq.w	800df02 <_printf_float+0xc2>
 800e0b4:	f108 0801 	add.w	r8, r8, #1
 800e0b8:	e7e6      	b.n	800e088 <_printf_float+0x248>
 800e0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	dc39      	bgt.n	800e134 <_printf_float+0x2f4>
 800e0c0:	4a1b      	ldr	r2, [pc, #108]	; (800e130 <_printf_float+0x2f0>)
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	4631      	mov	r1, r6
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	47b8      	blx	r7
 800e0ca:	3001      	adds	r0, #1
 800e0cc:	f43f af19 	beq.w	800df02 <_printf_float+0xc2>
 800e0d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0d4:	4313      	orrs	r3, r2
 800e0d6:	d102      	bne.n	800e0de <_printf_float+0x29e>
 800e0d8:	6823      	ldr	r3, [r4, #0]
 800e0da:	07d9      	lsls	r1, r3, #31
 800e0dc:	d5d8      	bpl.n	800e090 <_printf_float+0x250>
 800e0de:	ee18 3a10 	vmov	r3, s16
 800e0e2:	4652      	mov	r2, sl
 800e0e4:	4631      	mov	r1, r6
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	47b8      	blx	r7
 800e0ea:	3001      	adds	r0, #1
 800e0ec:	f43f af09 	beq.w	800df02 <_printf_float+0xc2>
 800e0f0:	f04f 0900 	mov.w	r9, #0
 800e0f4:	f104 0a1a 	add.w	sl, r4, #26
 800e0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0fa:	425b      	negs	r3, r3
 800e0fc:	454b      	cmp	r3, r9
 800e0fe:	dc01      	bgt.n	800e104 <_printf_float+0x2c4>
 800e100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e102:	e792      	b.n	800e02a <_printf_float+0x1ea>
 800e104:	2301      	movs	r3, #1
 800e106:	4652      	mov	r2, sl
 800e108:	4631      	mov	r1, r6
 800e10a:	4628      	mov	r0, r5
 800e10c:	47b8      	blx	r7
 800e10e:	3001      	adds	r0, #1
 800e110:	f43f aef7 	beq.w	800df02 <_printf_float+0xc2>
 800e114:	f109 0901 	add.w	r9, r9, #1
 800e118:	e7ee      	b.n	800e0f8 <_printf_float+0x2b8>
 800e11a:	bf00      	nop
 800e11c:	7fefffff 	.word	0x7fefffff
 800e120:	080120b4 	.word	0x080120b4
 800e124:	080120b8 	.word	0x080120b8
 800e128:	080120c0 	.word	0x080120c0
 800e12c:	080120bc 	.word	0x080120bc
 800e130:	080120c4 	.word	0x080120c4
 800e134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e136:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e138:	429a      	cmp	r2, r3
 800e13a:	bfa8      	it	ge
 800e13c:	461a      	movge	r2, r3
 800e13e:	2a00      	cmp	r2, #0
 800e140:	4691      	mov	r9, r2
 800e142:	dc37      	bgt.n	800e1b4 <_printf_float+0x374>
 800e144:	f04f 0b00 	mov.w	fp, #0
 800e148:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e14c:	f104 021a 	add.w	r2, r4, #26
 800e150:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e152:	9305      	str	r3, [sp, #20]
 800e154:	eba3 0309 	sub.w	r3, r3, r9
 800e158:	455b      	cmp	r3, fp
 800e15a:	dc33      	bgt.n	800e1c4 <_printf_float+0x384>
 800e15c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e160:	429a      	cmp	r2, r3
 800e162:	db3b      	blt.n	800e1dc <_printf_float+0x39c>
 800e164:	6823      	ldr	r3, [r4, #0]
 800e166:	07da      	lsls	r2, r3, #31
 800e168:	d438      	bmi.n	800e1dc <_printf_float+0x39c>
 800e16a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e16c:	9a05      	ldr	r2, [sp, #20]
 800e16e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e170:	1a9a      	subs	r2, r3, r2
 800e172:	eba3 0901 	sub.w	r9, r3, r1
 800e176:	4591      	cmp	r9, r2
 800e178:	bfa8      	it	ge
 800e17a:	4691      	movge	r9, r2
 800e17c:	f1b9 0f00 	cmp.w	r9, #0
 800e180:	dc35      	bgt.n	800e1ee <_printf_float+0x3ae>
 800e182:	f04f 0800 	mov.w	r8, #0
 800e186:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e18a:	f104 0a1a 	add.w	sl, r4, #26
 800e18e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e192:	1a9b      	subs	r3, r3, r2
 800e194:	eba3 0309 	sub.w	r3, r3, r9
 800e198:	4543      	cmp	r3, r8
 800e19a:	f77f af79 	ble.w	800e090 <_printf_float+0x250>
 800e19e:	2301      	movs	r3, #1
 800e1a0:	4652      	mov	r2, sl
 800e1a2:	4631      	mov	r1, r6
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	47b8      	blx	r7
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	f43f aeaa 	beq.w	800df02 <_printf_float+0xc2>
 800e1ae:	f108 0801 	add.w	r8, r8, #1
 800e1b2:	e7ec      	b.n	800e18e <_printf_float+0x34e>
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	4631      	mov	r1, r6
 800e1b8:	4642      	mov	r2, r8
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	47b8      	blx	r7
 800e1be:	3001      	adds	r0, #1
 800e1c0:	d1c0      	bne.n	800e144 <_printf_float+0x304>
 800e1c2:	e69e      	b.n	800df02 <_printf_float+0xc2>
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	4631      	mov	r1, r6
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	9205      	str	r2, [sp, #20]
 800e1cc:	47b8      	blx	r7
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	f43f ae97 	beq.w	800df02 <_printf_float+0xc2>
 800e1d4:	9a05      	ldr	r2, [sp, #20]
 800e1d6:	f10b 0b01 	add.w	fp, fp, #1
 800e1da:	e7b9      	b.n	800e150 <_printf_float+0x310>
 800e1dc:	ee18 3a10 	vmov	r3, s16
 800e1e0:	4652      	mov	r2, sl
 800e1e2:	4631      	mov	r1, r6
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	47b8      	blx	r7
 800e1e8:	3001      	adds	r0, #1
 800e1ea:	d1be      	bne.n	800e16a <_printf_float+0x32a>
 800e1ec:	e689      	b.n	800df02 <_printf_float+0xc2>
 800e1ee:	9a05      	ldr	r2, [sp, #20]
 800e1f0:	464b      	mov	r3, r9
 800e1f2:	4442      	add	r2, r8
 800e1f4:	4631      	mov	r1, r6
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	47b8      	blx	r7
 800e1fa:	3001      	adds	r0, #1
 800e1fc:	d1c1      	bne.n	800e182 <_printf_float+0x342>
 800e1fe:	e680      	b.n	800df02 <_printf_float+0xc2>
 800e200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e202:	2a01      	cmp	r2, #1
 800e204:	dc01      	bgt.n	800e20a <_printf_float+0x3ca>
 800e206:	07db      	lsls	r3, r3, #31
 800e208:	d538      	bpl.n	800e27c <_printf_float+0x43c>
 800e20a:	2301      	movs	r3, #1
 800e20c:	4642      	mov	r2, r8
 800e20e:	4631      	mov	r1, r6
 800e210:	4628      	mov	r0, r5
 800e212:	47b8      	blx	r7
 800e214:	3001      	adds	r0, #1
 800e216:	f43f ae74 	beq.w	800df02 <_printf_float+0xc2>
 800e21a:	ee18 3a10 	vmov	r3, s16
 800e21e:	4652      	mov	r2, sl
 800e220:	4631      	mov	r1, r6
 800e222:	4628      	mov	r0, r5
 800e224:	47b8      	blx	r7
 800e226:	3001      	adds	r0, #1
 800e228:	f43f ae6b 	beq.w	800df02 <_printf_float+0xc2>
 800e22c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e230:	2200      	movs	r2, #0
 800e232:	2300      	movs	r3, #0
 800e234:	f7f2 fc68 	bl	8000b08 <__aeabi_dcmpeq>
 800e238:	b9d8      	cbnz	r0, 800e272 <_printf_float+0x432>
 800e23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e23c:	f108 0201 	add.w	r2, r8, #1
 800e240:	3b01      	subs	r3, #1
 800e242:	4631      	mov	r1, r6
 800e244:	4628      	mov	r0, r5
 800e246:	47b8      	blx	r7
 800e248:	3001      	adds	r0, #1
 800e24a:	d10e      	bne.n	800e26a <_printf_float+0x42a>
 800e24c:	e659      	b.n	800df02 <_printf_float+0xc2>
 800e24e:	2301      	movs	r3, #1
 800e250:	4652      	mov	r2, sl
 800e252:	4631      	mov	r1, r6
 800e254:	4628      	mov	r0, r5
 800e256:	47b8      	blx	r7
 800e258:	3001      	adds	r0, #1
 800e25a:	f43f ae52 	beq.w	800df02 <_printf_float+0xc2>
 800e25e:	f108 0801 	add.w	r8, r8, #1
 800e262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e264:	3b01      	subs	r3, #1
 800e266:	4543      	cmp	r3, r8
 800e268:	dcf1      	bgt.n	800e24e <_printf_float+0x40e>
 800e26a:	464b      	mov	r3, r9
 800e26c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e270:	e6dc      	b.n	800e02c <_printf_float+0x1ec>
 800e272:	f04f 0800 	mov.w	r8, #0
 800e276:	f104 0a1a 	add.w	sl, r4, #26
 800e27a:	e7f2      	b.n	800e262 <_printf_float+0x422>
 800e27c:	2301      	movs	r3, #1
 800e27e:	4642      	mov	r2, r8
 800e280:	e7df      	b.n	800e242 <_printf_float+0x402>
 800e282:	2301      	movs	r3, #1
 800e284:	464a      	mov	r2, r9
 800e286:	4631      	mov	r1, r6
 800e288:	4628      	mov	r0, r5
 800e28a:	47b8      	blx	r7
 800e28c:	3001      	adds	r0, #1
 800e28e:	f43f ae38 	beq.w	800df02 <_printf_float+0xc2>
 800e292:	f108 0801 	add.w	r8, r8, #1
 800e296:	68e3      	ldr	r3, [r4, #12]
 800e298:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e29a:	1a5b      	subs	r3, r3, r1
 800e29c:	4543      	cmp	r3, r8
 800e29e:	dcf0      	bgt.n	800e282 <_printf_float+0x442>
 800e2a0:	e6fa      	b.n	800e098 <_printf_float+0x258>
 800e2a2:	f04f 0800 	mov.w	r8, #0
 800e2a6:	f104 0919 	add.w	r9, r4, #25
 800e2aa:	e7f4      	b.n	800e296 <_printf_float+0x456>

0800e2ac <_printf_common>:
 800e2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2b0:	4616      	mov	r6, r2
 800e2b2:	4699      	mov	r9, r3
 800e2b4:	688a      	ldr	r2, [r1, #8]
 800e2b6:	690b      	ldr	r3, [r1, #16]
 800e2b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	bfb8      	it	lt
 800e2c0:	4613      	movlt	r3, r2
 800e2c2:	6033      	str	r3, [r6, #0]
 800e2c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2c8:	4607      	mov	r7, r0
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	b10a      	cbz	r2, 800e2d2 <_printf_common+0x26>
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	6033      	str	r3, [r6, #0]
 800e2d2:	6823      	ldr	r3, [r4, #0]
 800e2d4:	0699      	lsls	r1, r3, #26
 800e2d6:	bf42      	ittt	mi
 800e2d8:	6833      	ldrmi	r3, [r6, #0]
 800e2da:	3302      	addmi	r3, #2
 800e2dc:	6033      	strmi	r3, [r6, #0]
 800e2de:	6825      	ldr	r5, [r4, #0]
 800e2e0:	f015 0506 	ands.w	r5, r5, #6
 800e2e4:	d106      	bne.n	800e2f4 <_printf_common+0x48>
 800e2e6:	f104 0a19 	add.w	sl, r4, #25
 800e2ea:	68e3      	ldr	r3, [r4, #12]
 800e2ec:	6832      	ldr	r2, [r6, #0]
 800e2ee:	1a9b      	subs	r3, r3, r2
 800e2f0:	42ab      	cmp	r3, r5
 800e2f2:	dc26      	bgt.n	800e342 <_printf_common+0x96>
 800e2f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e2f8:	1e13      	subs	r3, r2, #0
 800e2fa:	6822      	ldr	r2, [r4, #0]
 800e2fc:	bf18      	it	ne
 800e2fe:	2301      	movne	r3, #1
 800e300:	0692      	lsls	r2, r2, #26
 800e302:	d42b      	bmi.n	800e35c <_printf_common+0xb0>
 800e304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e308:	4649      	mov	r1, r9
 800e30a:	4638      	mov	r0, r7
 800e30c:	47c0      	blx	r8
 800e30e:	3001      	adds	r0, #1
 800e310:	d01e      	beq.n	800e350 <_printf_common+0xa4>
 800e312:	6823      	ldr	r3, [r4, #0]
 800e314:	68e5      	ldr	r5, [r4, #12]
 800e316:	6832      	ldr	r2, [r6, #0]
 800e318:	f003 0306 	and.w	r3, r3, #6
 800e31c:	2b04      	cmp	r3, #4
 800e31e:	bf08      	it	eq
 800e320:	1aad      	subeq	r5, r5, r2
 800e322:	68a3      	ldr	r3, [r4, #8]
 800e324:	6922      	ldr	r2, [r4, #16]
 800e326:	bf0c      	ite	eq
 800e328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e32c:	2500      	movne	r5, #0
 800e32e:	4293      	cmp	r3, r2
 800e330:	bfc4      	itt	gt
 800e332:	1a9b      	subgt	r3, r3, r2
 800e334:	18ed      	addgt	r5, r5, r3
 800e336:	2600      	movs	r6, #0
 800e338:	341a      	adds	r4, #26
 800e33a:	42b5      	cmp	r5, r6
 800e33c:	d11a      	bne.n	800e374 <_printf_common+0xc8>
 800e33e:	2000      	movs	r0, #0
 800e340:	e008      	b.n	800e354 <_printf_common+0xa8>
 800e342:	2301      	movs	r3, #1
 800e344:	4652      	mov	r2, sl
 800e346:	4649      	mov	r1, r9
 800e348:	4638      	mov	r0, r7
 800e34a:	47c0      	blx	r8
 800e34c:	3001      	adds	r0, #1
 800e34e:	d103      	bne.n	800e358 <_printf_common+0xac>
 800e350:	f04f 30ff 	mov.w	r0, #4294967295
 800e354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e358:	3501      	adds	r5, #1
 800e35a:	e7c6      	b.n	800e2ea <_printf_common+0x3e>
 800e35c:	18e1      	adds	r1, r4, r3
 800e35e:	1c5a      	adds	r2, r3, #1
 800e360:	2030      	movs	r0, #48	; 0x30
 800e362:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e366:	4422      	add	r2, r4
 800e368:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e36c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e370:	3302      	adds	r3, #2
 800e372:	e7c7      	b.n	800e304 <_printf_common+0x58>
 800e374:	2301      	movs	r3, #1
 800e376:	4622      	mov	r2, r4
 800e378:	4649      	mov	r1, r9
 800e37a:	4638      	mov	r0, r7
 800e37c:	47c0      	blx	r8
 800e37e:	3001      	adds	r0, #1
 800e380:	d0e6      	beq.n	800e350 <_printf_common+0xa4>
 800e382:	3601      	adds	r6, #1
 800e384:	e7d9      	b.n	800e33a <_printf_common+0x8e>
	...

0800e388 <_printf_i>:
 800e388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e38c:	7e0f      	ldrb	r7, [r1, #24]
 800e38e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e390:	2f78      	cmp	r7, #120	; 0x78
 800e392:	4691      	mov	r9, r2
 800e394:	4680      	mov	r8, r0
 800e396:	460c      	mov	r4, r1
 800e398:	469a      	mov	sl, r3
 800e39a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e39e:	d807      	bhi.n	800e3b0 <_printf_i+0x28>
 800e3a0:	2f62      	cmp	r7, #98	; 0x62
 800e3a2:	d80a      	bhi.n	800e3ba <_printf_i+0x32>
 800e3a4:	2f00      	cmp	r7, #0
 800e3a6:	f000 80d8 	beq.w	800e55a <_printf_i+0x1d2>
 800e3aa:	2f58      	cmp	r7, #88	; 0x58
 800e3ac:	f000 80a3 	beq.w	800e4f6 <_printf_i+0x16e>
 800e3b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3b8:	e03a      	b.n	800e430 <_printf_i+0xa8>
 800e3ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3be:	2b15      	cmp	r3, #21
 800e3c0:	d8f6      	bhi.n	800e3b0 <_printf_i+0x28>
 800e3c2:	a101      	add	r1, pc, #4	; (adr r1, 800e3c8 <_printf_i+0x40>)
 800e3c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3c8:	0800e421 	.word	0x0800e421
 800e3cc:	0800e435 	.word	0x0800e435
 800e3d0:	0800e3b1 	.word	0x0800e3b1
 800e3d4:	0800e3b1 	.word	0x0800e3b1
 800e3d8:	0800e3b1 	.word	0x0800e3b1
 800e3dc:	0800e3b1 	.word	0x0800e3b1
 800e3e0:	0800e435 	.word	0x0800e435
 800e3e4:	0800e3b1 	.word	0x0800e3b1
 800e3e8:	0800e3b1 	.word	0x0800e3b1
 800e3ec:	0800e3b1 	.word	0x0800e3b1
 800e3f0:	0800e3b1 	.word	0x0800e3b1
 800e3f4:	0800e541 	.word	0x0800e541
 800e3f8:	0800e465 	.word	0x0800e465
 800e3fc:	0800e523 	.word	0x0800e523
 800e400:	0800e3b1 	.word	0x0800e3b1
 800e404:	0800e3b1 	.word	0x0800e3b1
 800e408:	0800e563 	.word	0x0800e563
 800e40c:	0800e3b1 	.word	0x0800e3b1
 800e410:	0800e465 	.word	0x0800e465
 800e414:	0800e3b1 	.word	0x0800e3b1
 800e418:	0800e3b1 	.word	0x0800e3b1
 800e41c:	0800e52b 	.word	0x0800e52b
 800e420:	682b      	ldr	r3, [r5, #0]
 800e422:	1d1a      	adds	r2, r3, #4
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	602a      	str	r2, [r5, #0]
 800e428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e42c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e430:	2301      	movs	r3, #1
 800e432:	e0a3      	b.n	800e57c <_printf_i+0x1f4>
 800e434:	6820      	ldr	r0, [r4, #0]
 800e436:	6829      	ldr	r1, [r5, #0]
 800e438:	0606      	lsls	r6, r0, #24
 800e43a:	f101 0304 	add.w	r3, r1, #4
 800e43e:	d50a      	bpl.n	800e456 <_printf_i+0xce>
 800e440:	680e      	ldr	r6, [r1, #0]
 800e442:	602b      	str	r3, [r5, #0]
 800e444:	2e00      	cmp	r6, #0
 800e446:	da03      	bge.n	800e450 <_printf_i+0xc8>
 800e448:	232d      	movs	r3, #45	; 0x2d
 800e44a:	4276      	negs	r6, r6
 800e44c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e450:	485e      	ldr	r0, [pc, #376]	; (800e5cc <_printf_i+0x244>)
 800e452:	230a      	movs	r3, #10
 800e454:	e019      	b.n	800e48a <_printf_i+0x102>
 800e456:	680e      	ldr	r6, [r1, #0]
 800e458:	602b      	str	r3, [r5, #0]
 800e45a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e45e:	bf18      	it	ne
 800e460:	b236      	sxthne	r6, r6
 800e462:	e7ef      	b.n	800e444 <_printf_i+0xbc>
 800e464:	682b      	ldr	r3, [r5, #0]
 800e466:	6820      	ldr	r0, [r4, #0]
 800e468:	1d19      	adds	r1, r3, #4
 800e46a:	6029      	str	r1, [r5, #0]
 800e46c:	0601      	lsls	r1, r0, #24
 800e46e:	d501      	bpl.n	800e474 <_printf_i+0xec>
 800e470:	681e      	ldr	r6, [r3, #0]
 800e472:	e002      	b.n	800e47a <_printf_i+0xf2>
 800e474:	0646      	lsls	r6, r0, #25
 800e476:	d5fb      	bpl.n	800e470 <_printf_i+0xe8>
 800e478:	881e      	ldrh	r6, [r3, #0]
 800e47a:	4854      	ldr	r0, [pc, #336]	; (800e5cc <_printf_i+0x244>)
 800e47c:	2f6f      	cmp	r7, #111	; 0x6f
 800e47e:	bf0c      	ite	eq
 800e480:	2308      	moveq	r3, #8
 800e482:	230a      	movne	r3, #10
 800e484:	2100      	movs	r1, #0
 800e486:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e48a:	6865      	ldr	r5, [r4, #4]
 800e48c:	60a5      	str	r5, [r4, #8]
 800e48e:	2d00      	cmp	r5, #0
 800e490:	bfa2      	ittt	ge
 800e492:	6821      	ldrge	r1, [r4, #0]
 800e494:	f021 0104 	bicge.w	r1, r1, #4
 800e498:	6021      	strge	r1, [r4, #0]
 800e49a:	b90e      	cbnz	r6, 800e4a0 <_printf_i+0x118>
 800e49c:	2d00      	cmp	r5, #0
 800e49e:	d04d      	beq.n	800e53c <_printf_i+0x1b4>
 800e4a0:	4615      	mov	r5, r2
 800e4a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e4a6:	fb03 6711 	mls	r7, r3, r1, r6
 800e4aa:	5dc7      	ldrb	r7, [r0, r7]
 800e4ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4b0:	4637      	mov	r7, r6
 800e4b2:	42bb      	cmp	r3, r7
 800e4b4:	460e      	mov	r6, r1
 800e4b6:	d9f4      	bls.n	800e4a2 <_printf_i+0x11a>
 800e4b8:	2b08      	cmp	r3, #8
 800e4ba:	d10b      	bne.n	800e4d4 <_printf_i+0x14c>
 800e4bc:	6823      	ldr	r3, [r4, #0]
 800e4be:	07de      	lsls	r6, r3, #31
 800e4c0:	d508      	bpl.n	800e4d4 <_printf_i+0x14c>
 800e4c2:	6923      	ldr	r3, [r4, #16]
 800e4c4:	6861      	ldr	r1, [r4, #4]
 800e4c6:	4299      	cmp	r1, r3
 800e4c8:	bfde      	ittt	le
 800e4ca:	2330      	movle	r3, #48	; 0x30
 800e4cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e4d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e4d4:	1b52      	subs	r2, r2, r5
 800e4d6:	6122      	str	r2, [r4, #16]
 800e4d8:	f8cd a000 	str.w	sl, [sp]
 800e4dc:	464b      	mov	r3, r9
 800e4de:	aa03      	add	r2, sp, #12
 800e4e0:	4621      	mov	r1, r4
 800e4e2:	4640      	mov	r0, r8
 800e4e4:	f7ff fee2 	bl	800e2ac <_printf_common>
 800e4e8:	3001      	adds	r0, #1
 800e4ea:	d14c      	bne.n	800e586 <_printf_i+0x1fe>
 800e4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f0:	b004      	add	sp, #16
 800e4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f6:	4835      	ldr	r0, [pc, #212]	; (800e5cc <_printf_i+0x244>)
 800e4f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e4fc:	6829      	ldr	r1, [r5, #0]
 800e4fe:	6823      	ldr	r3, [r4, #0]
 800e500:	f851 6b04 	ldr.w	r6, [r1], #4
 800e504:	6029      	str	r1, [r5, #0]
 800e506:	061d      	lsls	r5, r3, #24
 800e508:	d514      	bpl.n	800e534 <_printf_i+0x1ac>
 800e50a:	07df      	lsls	r7, r3, #31
 800e50c:	bf44      	itt	mi
 800e50e:	f043 0320 	orrmi.w	r3, r3, #32
 800e512:	6023      	strmi	r3, [r4, #0]
 800e514:	b91e      	cbnz	r6, 800e51e <_printf_i+0x196>
 800e516:	6823      	ldr	r3, [r4, #0]
 800e518:	f023 0320 	bic.w	r3, r3, #32
 800e51c:	6023      	str	r3, [r4, #0]
 800e51e:	2310      	movs	r3, #16
 800e520:	e7b0      	b.n	800e484 <_printf_i+0xfc>
 800e522:	6823      	ldr	r3, [r4, #0]
 800e524:	f043 0320 	orr.w	r3, r3, #32
 800e528:	6023      	str	r3, [r4, #0]
 800e52a:	2378      	movs	r3, #120	; 0x78
 800e52c:	4828      	ldr	r0, [pc, #160]	; (800e5d0 <_printf_i+0x248>)
 800e52e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e532:	e7e3      	b.n	800e4fc <_printf_i+0x174>
 800e534:	0659      	lsls	r1, r3, #25
 800e536:	bf48      	it	mi
 800e538:	b2b6      	uxthmi	r6, r6
 800e53a:	e7e6      	b.n	800e50a <_printf_i+0x182>
 800e53c:	4615      	mov	r5, r2
 800e53e:	e7bb      	b.n	800e4b8 <_printf_i+0x130>
 800e540:	682b      	ldr	r3, [r5, #0]
 800e542:	6826      	ldr	r6, [r4, #0]
 800e544:	6961      	ldr	r1, [r4, #20]
 800e546:	1d18      	adds	r0, r3, #4
 800e548:	6028      	str	r0, [r5, #0]
 800e54a:	0635      	lsls	r5, r6, #24
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	d501      	bpl.n	800e554 <_printf_i+0x1cc>
 800e550:	6019      	str	r1, [r3, #0]
 800e552:	e002      	b.n	800e55a <_printf_i+0x1d2>
 800e554:	0670      	lsls	r0, r6, #25
 800e556:	d5fb      	bpl.n	800e550 <_printf_i+0x1c8>
 800e558:	8019      	strh	r1, [r3, #0]
 800e55a:	2300      	movs	r3, #0
 800e55c:	6123      	str	r3, [r4, #16]
 800e55e:	4615      	mov	r5, r2
 800e560:	e7ba      	b.n	800e4d8 <_printf_i+0x150>
 800e562:	682b      	ldr	r3, [r5, #0]
 800e564:	1d1a      	adds	r2, r3, #4
 800e566:	602a      	str	r2, [r5, #0]
 800e568:	681d      	ldr	r5, [r3, #0]
 800e56a:	6862      	ldr	r2, [r4, #4]
 800e56c:	2100      	movs	r1, #0
 800e56e:	4628      	mov	r0, r5
 800e570:	f7f1 fe56 	bl	8000220 <memchr>
 800e574:	b108      	cbz	r0, 800e57a <_printf_i+0x1f2>
 800e576:	1b40      	subs	r0, r0, r5
 800e578:	6060      	str	r0, [r4, #4]
 800e57a:	6863      	ldr	r3, [r4, #4]
 800e57c:	6123      	str	r3, [r4, #16]
 800e57e:	2300      	movs	r3, #0
 800e580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e584:	e7a8      	b.n	800e4d8 <_printf_i+0x150>
 800e586:	6923      	ldr	r3, [r4, #16]
 800e588:	462a      	mov	r2, r5
 800e58a:	4649      	mov	r1, r9
 800e58c:	4640      	mov	r0, r8
 800e58e:	47d0      	blx	sl
 800e590:	3001      	adds	r0, #1
 800e592:	d0ab      	beq.n	800e4ec <_printf_i+0x164>
 800e594:	6823      	ldr	r3, [r4, #0]
 800e596:	079b      	lsls	r3, r3, #30
 800e598:	d413      	bmi.n	800e5c2 <_printf_i+0x23a>
 800e59a:	68e0      	ldr	r0, [r4, #12]
 800e59c:	9b03      	ldr	r3, [sp, #12]
 800e59e:	4298      	cmp	r0, r3
 800e5a0:	bfb8      	it	lt
 800e5a2:	4618      	movlt	r0, r3
 800e5a4:	e7a4      	b.n	800e4f0 <_printf_i+0x168>
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	4632      	mov	r2, r6
 800e5aa:	4649      	mov	r1, r9
 800e5ac:	4640      	mov	r0, r8
 800e5ae:	47d0      	blx	sl
 800e5b0:	3001      	adds	r0, #1
 800e5b2:	d09b      	beq.n	800e4ec <_printf_i+0x164>
 800e5b4:	3501      	adds	r5, #1
 800e5b6:	68e3      	ldr	r3, [r4, #12]
 800e5b8:	9903      	ldr	r1, [sp, #12]
 800e5ba:	1a5b      	subs	r3, r3, r1
 800e5bc:	42ab      	cmp	r3, r5
 800e5be:	dcf2      	bgt.n	800e5a6 <_printf_i+0x21e>
 800e5c0:	e7eb      	b.n	800e59a <_printf_i+0x212>
 800e5c2:	2500      	movs	r5, #0
 800e5c4:	f104 0619 	add.w	r6, r4, #25
 800e5c8:	e7f5      	b.n	800e5b6 <_printf_i+0x22e>
 800e5ca:	bf00      	nop
 800e5cc:	080120c6 	.word	0x080120c6
 800e5d0:	080120d7 	.word	0x080120d7

0800e5d4 <siprintf>:
 800e5d4:	b40e      	push	{r1, r2, r3}
 800e5d6:	b500      	push	{lr}
 800e5d8:	b09c      	sub	sp, #112	; 0x70
 800e5da:	ab1d      	add	r3, sp, #116	; 0x74
 800e5dc:	9002      	str	r0, [sp, #8]
 800e5de:	9006      	str	r0, [sp, #24]
 800e5e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e5e4:	4809      	ldr	r0, [pc, #36]	; (800e60c <siprintf+0x38>)
 800e5e6:	9107      	str	r1, [sp, #28]
 800e5e8:	9104      	str	r1, [sp, #16]
 800e5ea:	4909      	ldr	r1, [pc, #36]	; (800e610 <siprintf+0x3c>)
 800e5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5f0:	9105      	str	r1, [sp, #20]
 800e5f2:	6800      	ldr	r0, [r0, #0]
 800e5f4:	9301      	str	r3, [sp, #4]
 800e5f6:	a902      	add	r1, sp, #8
 800e5f8:	f001 fb7a 	bl	800fcf0 <_svfiprintf_r>
 800e5fc:	9b02      	ldr	r3, [sp, #8]
 800e5fe:	2200      	movs	r2, #0
 800e600:	701a      	strb	r2, [r3, #0]
 800e602:	b01c      	add	sp, #112	; 0x70
 800e604:	f85d eb04 	ldr.w	lr, [sp], #4
 800e608:	b003      	add	sp, #12
 800e60a:	4770      	bx	lr
 800e60c:	20000044 	.word	0x20000044
 800e610:	ffff0208 	.word	0xffff0208

0800e614 <strncpy>:
 800e614:	b510      	push	{r4, lr}
 800e616:	3901      	subs	r1, #1
 800e618:	4603      	mov	r3, r0
 800e61a:	b132      	cbz	r2, 800e62a <strncpy+0x16>
 800e61c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e620:	f803 4b01 	strb.w	r4, [r3], #1
 800e624:	3a01      	subs	r2, #1
 800e626:	2c00      	cmp	r4, #0
 800e628:	d1f7      	bne.n	800e61a <strncpy+0x6>
 800e62a:	441a      	add	r2, r3
 800e62c:	2100      	movs	r1, #0
 800e62e:	4293      	cmp	r3, r2
 800e630:	d100      	bne.n	800e634 <strncpy+0x20>
 800e632:	bd10      	pop	{r4, pc}
 800e634:	f803 1b01 	strb.w	r1, [r3], #1
 800e638:	e7f9      	b.n	800e62e <strncpy+0x1a>

0800e63a <quorem>:
 800e63a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63e:	6903      	ldr	r3, [r0, #16]
 800e640:	690c      	ldr	r4, [r1, #16]
 800e642:	42a3      	cmp	r3, r4
 800e644:	4607      	mov	r7, r0
 800e646:	f2c0 8081 	blt.w	800e74c <quorem+0x112>
 800e64a:	3c01      	subs	r4, #1
 800e64c:	f101 0814 	add.w	r8, r1, #20
 800e650:	f100 0514 	add.w	r5, r0, #20
 800e654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e65e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e662:	3301      	adds	r3, #1
 800e664:	429a      	cmp	r2, r3
 800e666:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e66a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e66e:	fbb2 f6f3 	udiv	r6, r2, r3
 800e672:	d331      	bcc.n	800e6d8 <quorem+0x9e>
 800e674:	f04f 0e00 	mov.w	lr, #0
 800e678:	4640      	mov	r0, r8
 800e67a:	46ac      	mov	ip, r5
 800e67c:	46f2      	mov	sl, lr
 800e67e:	f850 2b04 	ldr.w	r2, [r0], #4
 800e682:	b293      	uxth	r3, r2
 800e684:	fb06 e303 	mla	r3, r6, r3, lr
 800e688:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	ebaa 0303 	sub.w	r3, sl, r3
 800e692:	f8dc a000 	ldr.w	sl, [ip]
 800e696:	0c12      	lsrs	r2, r2, #16
 800e698:	fa13 f38a 	uxtah	r3, r3, sl
 800e69c:	fb06 e202 	mla	r2, r6, r2, lr
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	9b00      	ldr	r3, [sp, #0]
 800e6a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e6a8:	b292      	uxth	r2, r2
 800e6aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e6ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6b2:	f8bd 3000 	ldrh.w	r3, [sp]
 800e6b6:	4581      	cmp	r9, r0
 800e6b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6bc:	f84c 3b04 	str.w	r3, [ip], #4
 800e6c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e6c4:	d2db      	bcs.n	800e67e <quorem+0x44>
 800e6c6:	f855 300b 	ldr.w	r3, [r5, fp]
 800e6ca:	b92b      	cbnz	r3, 800e6d8 <quorem+0x9e>
 800e6cc:	9b01      	ldr	r3, [sp, #4]
 800e6ce:	3b04      	subs	r3, #4
 800e6d0:	429d      	cmp	r5, r3
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	d32e      	bcc.n	800e734 <quorem+0xfa>
 800e6d6:	613c      	str	r4, [r7, #16]
 800e6d8:	4638      	mov	r0, r7
 800e6da:	f001 f8b5 	bl	800f848 <__mcmp>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	db24      	blt.n	800e72c <quorem+0xf2>
 800e6e2:	3601      	adds	r6, #1
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	f04f 0c00 	mov.w	ip, #0
 800e6ea:	f858 2b04 	ldr.w	r2, [r8], #4
 800e6ee:	f8d0 e000 	ldr.w	lr, [r0]
 800e6f2:	b293      	uxth	r3, r2
 800e6f4:	ebac 0303 	sub.w	r3, ip, r3
 800e6f8:	0c12      	lsrs	r2, r2, #16
 800e6fa:	fa13 f38e 	uxtah	r3, r3, lr
 800e6fe:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e702:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e706:	b29b      	uxth	r3, r3
 800e708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e70c:	45c1      	cmp	r9, r8
 800e70e:	f840 3b04 	str.w	r3, [r0], #4
 800e712:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e716:	d2e8      	bcs.n	800e6ea <quorem+0xb0>
 800e718:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e71c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e720:	b922      	cbnz	r2, 800e72c <quorem+0xf2>
 800e722:	3b04      	subs	r3, #4
 800e724:	429d      	cmp	r5, r3
 800e726:	461a      	mov	r2, r3
 800e728:	d30a      	bcc.n	800e740 <quorem+0x106>
 800e72a:	613c      	str	r4, [r7, #16]
 800e72c:	4630      	mov	r0, r6
 800e72e:	b003      	add	sp, #12
 800e730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e734:	6812      	ldr	r2, [r2, #0]
 800e736:	3b04      	subs	r3, #4
 800e738:	2a00      	cmp	r2, #0
 800e73a:	d1cc      	bne.n	800e6d6 <quorem+0x9c>
 800e73c:	3c01      	subs	r4, #1
 800e73e:	e7c7      	b.n	800e6d0 <quorem+0x96>
 800e740:	6812      	ldr	r2, [r2, #0]
 800e742:	3b04      	subs	r3, #4
 800e744:	2a00      	cmp	r2, #0
 800e746:	d1f0      	bne.n	800e72a <quorem+0xf0>
 800e748:	3c01      	subs	r4, #1
 800e74a:	e7eb      	b.n	800e724 <quorem+0xea>
 800e74c:	2000      	movs	r0, #0
 800e74e:	e7ee      	b.n	800e72e <quorem+0xf4>

0800e750 <_dtoa_r>:
 800e750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e754:	ed2d 8b04 	vpush	{d8-d9}
 800e758:	ec57 6b10 	vmov	r6, r7, d0
 800e75c:	b093      	sub	sp, #76	; 0x4c
 800e75e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e760:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e764:	9106      	str	r1, [sp, #24]
 800e766:	ee10 aa10 	vmov	sl, s0
 800e76a:	4604      	mov	r4, r0
 800e76c:	9209      	str	r2, [sp, #36]	; 0x24
 800e76e:	930c      	str	r3, [sp, #48]	; 0x30
 800e770:	46bb      	mov	fp, r7
 800e772:	b975      	cbnz	r5, 800e792 <_dtoa_r+0x42>
 800e774:	2010      	movs	r0, #16
 800e776:	f000 fddd 	bl	800f334 <malloc>
 800e77a:	4602      	mov	r2, r0
 800e77c:	6260      	str	r0, [r4, #36]	; 0x24
 800e77e:	b920      	cbnz	r0, 800e78a <_dtoa_r+0x3a>
 800e780:	4ba7      	ldr	r3, [pc, #668]	; (800ea20 <_dtoa_r+0x2d0>)
 800e782:	21ea      	movs	r1, #234	; 0xea
 800e784:	48a7      	ldr	r0, [pc, #668]	; (800ea24 <_dtoa_r+0x2d4>)
 800e786:	f001 fbc3 	bl	800ff10 <__assert_func>
 800e78a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e78e:	6005      	str	r5, [r0, #0]
 800e790:	60c5      	str	r5, [r0, #12]
 800e792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e794:	6819      	ldr	r1, [r3, #0]
 800e796:	b151      	cbz	r1, 800e7ae <_dtoa_r+0x5e>
 800e798:	685a      	ldr	r2, [r3, #4]
 800e79a:	604a      	str	r2, [r1, #4]
 800e79c:	2301      	movs	r3, #1
 800e79e:	4093      	lsls	r3, r2
 800e7a0:	608b      	str	r3, [r1, #8]
 800e7a2:	4620      	mov	r0, r4
 800e7a4:	f000 fe0e 	bl	800f3c4 <_Bfree>
 800e7a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	1e3b      	subs	r3, r7, #0
 800e7b0:	bfaa      	itet	ge
 800e7b2:	2300      	movge	r3, #0
 800e7b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e7b8:	f8c8 3000 	strge.w	r3, [r8]
 800e7bc:	4b9a      	ldr	r3, [pc, #616]	; (800ea28 <_dtoa_r+0x2d8>)
 800e7be:	bfbc      	itt	lt
 800e7c0:	2201      	movlt	r2, #1
 800e7c2:	f8c8 2000 	strlt.w	r2, [r8]
 800e7c6:	ea33 030b 	bics.w	r3, r3, fp
 800e7ca:	d11b      	bne.n	800e804 <_dtoa_r+0xb4>
 800e7cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e7ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800e7d2:	6013      	str	r3, [r2, #0]
 800e7d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7d8:	4333      	orrs	r3, r6
 800e7da:	f000 8592 	beq.w	800f302 <_dtoa_r+0xbb2>
 800e7de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7e0:	b963      	cbnz	r3, 800e7fc <_dtoa_r+0xac>
 800e7e2:	4b92      	ldr	r3, [pc, #584]	; (800ea2c <_dtoa_r+0x2dc>)
 800e7e4:	e022      	b.n	800e82c <_dtoa_r+0xdc>
 800e7e6:	4b92      	ldr	r3, [pc, #584]	; (800ea30 <_dtoa_r+0x2e0>)
 800e7e8:	9301      	str	r3, [sp, #4]
 800e7ea:	3308      	adds	r3, #8
 800e7ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7ee:	6013      	str	r3, [r2, #0]
 800e7f0:	9801      	ldr	r0, [sp, #4]
 800e7f2:	b013      	add	sp, #76	; 0x4c
 800e7f4:	ecbd 8b04 	vpop	{d8-d9}
 800e7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7fc:	4b8b      	ldr	r3, [pc, #556]	; (800ea2c <_dtoa_r+0x2dc>)
 800e7fe:	9301      	str	r3, [sp, #4]
 800e800:	3303      	adds	r3, #3
 800e802:	e7f3      	b.n	800e7ec <_dtoa_r+0x9c>
 800e804:	2200      	movs	r2, #0
 800e806:	2300      	movs	r3, #0
 800e808:	4650      	mov	r0, sl
 800e80a:	4659      	mov	r1, fp
 800e80c:	f7f2 f97c 	bl	8000b08 <__aeabi_dcmpeq>
 800e810:	ec4b ab19 	vmov	d9, sl, fp
 800e814:	4680      	mov	r8, r0
 800e816:	b158      	cbz	r0, 800e830 <_dtoa_r+0xe0>
 800e818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e81a:	2301      	movs	r3, #1
 800e81c:	6013      	str	r3, [r2, #0]
 800e81e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e820:	2b00      	cmp	r3, #0
 800e822:	f000 856b 	beq.w	800f2fc <_dtoa_r+0xbac>
 800e826:	4883      	ldr	r0, [pc, #524]	; (800ea34 <_dtoa_r+0x2e4>)
 800e828:	6018      	str	r0, [r3, #0]
 800e82a:	1e43      	subs	r3, r0, #1
 800e82c:	9301      	str	r3, [sp, #4]
 800e82e:	e7df      	b.n	800e7f0 <_dtoa_r+0xa0>
 800e830:	ec4b ab10 	vmov	d0, sl, fp
 800e834:	aa10      	add	r2, sp, #64	; 0x40
 800e836:	a911      	add	r1, sp, #68	; 0x44
 800e838:	4620      	mov	r0, r4
 800e83a:	f001 f8ab 	bl	800f994 <__d2b>
 800e83e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e842:	ee08 0a10 	vmov	s16, r0
 800e846:	2d00      	cmp	r5, #0
 800e848:	f000 8084 	beq.w	800e954 <_dtoa_r+0x204>
 800e84c:	ee19 3a90 	vmov	r3, s19
 800e850:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e854:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e858:	4656      	mov	r6, sl
 800e85a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e85e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e862:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e866:	4b74      	ldr	r3, [pc, #464]	; (800ea38 <_dtoa_r+0x2e8>)
 800e868:	2200      	movs	r2, #0
 800e86a:	4630      	mov	r0, r6
 800e86c:	4639      	mov	r1, r7
 800e86e:	f7f1 fd2b 	bl	80002c8 <__aeabi_dsub>
 800e872:	a365      	add	r3, pc, #404	; (adr r3, 800ea08 <_dtoa_r+0x2b8>)
 800e874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e878:	f7f1 fede 	bl	8000638 <__aeabi_dmul>
 800e87c:	a364      	add	r3, pc, #400	; (adr r3, 800ea10 <_dtoa_r+0x2c0>)
 800e87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e882:	f7f1 fd23 	bl	80002cc <__adddf3>
 800e886:	4606      	mov	r6, r0
 800e888:	4628      	mov	r0, r5
 800e88a:	460f      	mov	r7, r1
 800e88c:	f7f1 fe6a 	bl	8000564 <__aeabi_i2d>
 800e890:	a361      	add	r3, pc, #388	; (adr r3, 800ea18 <_dtoa_r+0x2c8>)
 800e892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e896:	f7f1 fecf 	bl	8000638 <__aeabi_dmul>
 800e89a:	4602      	mov	r2, r0
 800e89c:	460b      	mov	r3, r1
 800e89e:	4630      	mov	r0, r6
 800e8a0:	4639      	mov	r1, r7
 800e8a2:	f7f1 fd13 	bl	80002cc <__adddf3>
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	460f      	mov	r7, r1
 800e8aa:	f7f2 f975 	bl	8000b98 <__aeabi_d2iz>
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	9000      	str	r0, [sp, #0]
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	4630      	mov	r0, r6
 800e8b6:	4639      	mov	r1, r7
 800e8b8:	f7f2 f930 	bl	8000b1c <__aeabi_dcmplt>
 800e8bc:	b150      	cbz	r0, 800e8d4 <_dtoa_r+0x184>
 800e8be:	9800      	ldr	r0, [sp, #0]
 800e8c0:	f7f1 fe50 	bl	8000564 <__aeabi_i2d>
 800e8c4:	4632      	mov	r2, r6
 800e8c6:	463b      	mov	r3, r7
 800e8c8:	f7f2 f91e 	bl	8000b08 <__aeabi_dcmpeq>
 800e8cc:	b910      	cbnz	r0, 800e8d4 <_dtoa_r+0x184>
 800e8ce:	9b00      	ldr	r3, [sp, #0]
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	9300      	str	r3, [sp, #0]
 800e8d4:	9b00      	ldr	r3, [sp, #0]
 800e8d6:	2b16      	cmp	r3, #22
 800e8d8:	d85a      	bhi.n	800e990 <_dtoa_r+0x240>
 800e8da:	9a00      	ldr	r2, [sp, #0]
 800e8dc:	4b57      	ldr	r3, [pc, #348]	; (800ea3c <_dtoa_r+0x2ec>)
 800e8de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e6:	ec51 0b19 	vmov	r0, r1, d9
 800e8ea:	f7f2 f917 	bl	8000b1c <__aeabi_dcmplt>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	d050      	beq.n	800e994 <_dtoa_r+0x244>
 800e8f2:	9b00      	ldr	r3, [sp, #0]
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	9300      	str	r3, [sp, #0]
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8fe:	1b5d      	subs	r5, r3, r5
 800e900:	1e6b      	subs	r3, r5, #1
 800e902:	9305      	str	r3, [sp, #20]
 800e904:	bf45      	ittet	mi
 800e906:	f1c5 0301 	rsbmi	r3, r5, #1
 800e90a:	9304      	strmi	r3, [sp, #16]
 800e90c:	2300      	movpl	r3, #0
 800e90e:	2300      	movmi	r3, #0
 800e910:	bf4c      	ite	mi
 800e912:	9305      	strmi	r3, [sp, #20]
 800e914:	9304      	strpl	r3, [sp, #16]
 800e916:	9b00      	ldr	r3, [sp, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	db3d      	blt.n	800e998 <_dtoa_r+0x248>
 800e91c:	9b05      	ldr	r3, [sp, #20]
 800e91e:	9a00      	ldr	r2, [sp, #0]
 800e920:	920a      	str	r2, [sp, #40]	; 0x28
 800e922:	4413      	add	r3, r2
 800e924:	9305      	str	r3, [sp, #20]
 800e926:	2300      	movs	r3, #0
 800e928:	9307      	str	r3, [sp, #28]
 800e92a:	9b06      	ldr	r3, [sp, #24]
 800e92c:	2b09      	cmp	r3, #9
 800e92e:	f200 8089 	bhi.w	800ea44 <_dtoa_r+0x2f4>
 800e932:	2b05      	cmp	r3, #5
 800e934:	bfc4      	itt	gt
 800e936:	3b04      	subgt	r3, #4
 800e938:	9306      	strgt	r3, [sp, #24]
 800e93a:	9b06      	ldr	r3, [sp, #24]
 800e93c:	f1a3 0302 	sub.w	r3, r3, #2
 800e940:	bfcc      	ite	gt
 800e942:	2500      	movgt	r5, #0
 800e944:	2501      	movle	r5, #1
 800e946:	2b03      	cmp	r3, #3
 800e948:	f200 8087 	bhi.w	800ea5a <_dtoa_r+0x30a>
 800e94c:	e8df f003 	tbb	[pc, r3]
 800e950:	59383a2d 	.word	0x59383a2d
 800e954:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e958:	441d      	add	r5, r3
 800e95a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e95e:	2b20      	cmp	r3, #32
 800e960:	bfc1      	itttt	gt
 800e962:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e966:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e96a:	fa0b f303 	lslgt.w	r3, fp, r3
 800e96e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e972:	bfda      	itte	le
 800e974:	f1c3 0320 	rsble	r3, r3, #32
 800e978:	fa06 f003 	lslle.w	r0, r6, r3
 800e97c:	4318      	orrgt	r0, r3
 800e97e:	f7f1 fde1 	bl	8000544 <__aeabi_ui2d>
 800e982:	2301      	movs	r3, #1
 800e984:	4606      	mov	r6, r0
 800e986:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e98a:	3d01      	subs	r5, #1
 800e98c:	930e      	str	r3, [sp, #56]	; 0x38
 800e98e:	e76a      	b.n	800e866 <_dtoa_r+0x116>
 800e990:	2301      	movs	r3, #1
 800e992:	e7b2      	b.n	800e8fa <_dtoa_r+0x1aa>
 800e994:	900b      	str	r0, [sp, #44]	; 0x2c
 800e996:	e7b1      	b.n	800e8fc <_dtoa_r+0x1ac>
 800e998:	9b04      	ldr	r3, [sp, #16]
 800e99a:	9a00      	ldr	r2, [sp, #0]
 800e99c:	1a9b      	subs	r3, r3, r2
 800e99e:	9304      	str	r3, [sp, #16]
 800e9a0:	4253      	negs	r3, r2
 800e9a2:	9307      	str	r3, [sp, #28]
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800e9a8:	e7bf      	b.n	800e92a <_dtoa_r+0x1da>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	9308      	str	r3, [sp, #32]
 800e9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	dc55      	bgt.n	800ea60 <_dtoa_r+0x310>
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	9209      	str	r2, [sp, #36]	; 0x24
 800e9be:	e00c      	b.n	800e9da <_dtoa_r+0x28a>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e7f3      	b.n	800e9ac <_dtoa_r+0x25c>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9c8:	9308      	str	r3, [sp, #32]
 800e9ca:	9b00      	ldr	r3, [sp, #0]
 800e9cc:	4413      	add	r3, r2
 800e9ce:	9302      	str	r3, [sp, #8]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	2b01      	cmp	r3, #1
 800e9d4:	9303      	str	r3, [sp, #12]
 800e9d6:	bfb8      	it	lt
 800e9d8:	2301      	movlt	r3, #1
 800e9da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e9dc:	2200      	movs	r2, #0
 800e9de:	6042      	str	r2, [r0, #4]
 800e9e0:	2204      	movs	r2, #4
 800e9e2:	f102 0614 	add.w	r6, r2, #20
 800e9e6:	429e      	cmp	r6, r3
 800e9e8:	6841      	ldr	r1, [r0, #4]
 800e9ea:	d93d      	bls.n	800ea68 <_dtoa_r+0x318>
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f000 fca9 	bl	800f344 <_Balloc>
 800e9f2:	9001      	str	r0, [sp, #4]
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	d13b      	bne.n	800ea70 <_dtoa_r+0x320>
 800e9f8:	4b11      	ldr	r3, [pc, #68]	; (800ea40 <_dtoa_r+0x2f0>)
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ea00:	e6c0      	b.n	800e784 <_dtoa_r+0x34>
 800ea02:	2301      	movs	r3, #1
 800ea04:	e7df      	b.n	800e9c6 <_dtoa_r+0x276>
 800ea06:	bf00      	nop
 800ea08:	636f4361 	.word	0x636f4361
 800ea0c:	3fd287a7 	.word	0x3fd287a7
 800ea10:	8b60c8b3 	.word	0x8b60c8b3
 800ea14:	3fc68a28 	.word	0x3fc68a28
 800ea18:	509f79fb 	.word	0x509f79fb
 800ea1c:	3fd34413 	.word	0x3fd34413
 800ea20:	080120f5 	.word	0x080120f5
 800ea24:	0801210c 	.word	0x0801210c
 800ea28:	7ff00000 	.word	0x7ff00000
 800ea2c:	080120f1 	.word	0x080120f1
 800ea30:	080120e8 	.word	0x080120e8
 800ea34:	080120c5 	.word	0x080120c5
 800ea38:	3ff80000 	.word	0x3ff80000
 800ea3c:	08012200 	.word	0x08012200
 800ea40:	08012167 	.word	0x08012167
 800ea44:	2501      	movs	r5, #1
 800ea46:	2300      	movs	r3, #0
 800ea48:	9306      	str	r3, [sp, #24]
 800ea4a:	9508      	str	r5, [sp, #32]
 800ea4c:	f04f 33ff 	mov.w	r3, #4294967295
 800ea50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ea54:	2200      	movs	r2, #0
 800ea56:	2312      	movs	r3, #18
 800ea58:	e7b0      	b.n	800e9bc <_dtoa_r+0x26c>
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	9308      	str	r3, [sp, #32]
 800ea5e:	e7f5      	b.n	800ea4c <_dtoa_r+0x2fc>
 800ea60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ea66:	e7b8      	b.n	800e9da <_dtoa_r+0x28a>
 800ea68:	3101      	adds	r1, #1
 800ea6a:	6041      	str	r1, [r0, #4]
 800ea6c:	0052      	lsls	r2, r2, #1
 800ea6e:	e7b8      	b.n	800e9e2 <_dtoa_r+0x292>
 800ea70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea72:	9a01      	ldr	r2, [sp, #4]
 800ea74:	601a      	str	r2, [r3, #0]
 800ea76:	9b03      	ldr	r3, [sp, #12]
 800ea78:	2b0e      	cmp	r3, #14
 800ea7a:	f200 809d 	bhi.w	800ebb8 <_dtoa_r+0x468>
 800ea7e:	2d00      	cmp	r5, #0
 800ea80:	f000 809a 	beq.w	800ebb8 <_dtoa_r+0x468>
 800ea84:	9b00      	ldr	r3, [sp, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	dd32      	ble.n	800eaf0 <_dtoa_r+0x3a0>
 800ea8a:	4ab7      	ldr	r2, [pc, #732]	; (800ed68 <_dtoa_r+0x618>)
 800ea8c:	f003 030f 	and.w	r3, r3, #15
 800ea90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea98:	9b00      	ldr	r3, [sp, #0]
 800ea9a:	05d8      	lsls	r0, r3, #23
 800ea9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800eaa0:	d516      	bpl.n	800ead0 <_dtoa_r+0x380>
 800eaa2:	4bb2      	ldr	r3, [pc, #712]	; (800ed6c <_dtoa_r+0x61c>)
 800eaa4:	ec51 0b19 	vmov	r0, r1, d9
 800eaa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eaac:	f7f1 feee 	bl	800088c <__aeabi_ddiv>
 800eab0:	f007 070f 	and.w	r7, r7, #15
 800eab4:	4682      	mov	sl, r0
 800eab6:	468b      	mov	fp, r1
 800eab8:	2503      	movs	r5, #3
 800eaba:	4eac      	ldr	r6, [pc, #688]	; (800ed6c <_dtoa_r+0x61c>)
 800eabc:	b957      	cbnz	r7, 800ead4 <_dtoa_r+0x384>
 800eabe:	4642      	mov	r2, r8
 800eac0:	464b      	mov	r3, r9
 800eac2:	4650      	mov	r0, sl
 800eac4:	4659      	mov	r1, fp
 800eac6:	f7f1 fee1 	bl	800088c <__aeabi_ddiv>
 800eaca:	4682      	mov	sl, r0
 800eacc:	468b      	mov	fp, r1
 800eace:	e028      	b.n	800eb22 <_dtoa_r+0x3d2>
 800ead0:	2502      	movs	r5, #2
 800ead2:	e7f2      	b.n	800eaba <_dtoa_r+0x36a>
 800ead4:	07f9      	lsls	r1, r7, #31
 800ead6:	d508      	bpl.n	800eaea <_dtoa_r+0x39a>
 800ead8:	4640      	mov	r0, r8
 800eada:	4649      	mov	r1, r9
 800eadc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eae0:	f7f1 fdaa 	bl	8000638 <__aeabi_dmul>
 800eae4:	3501      	adds	r5, #1
 800eae6:	4680      	mov	r8, r0
 800eae8:	4689      	mov	r9, r1
 800eaea:	107f      	asrs	r7, r7, #1
 800eaec:	3608      	adds	r6, #8
 800eaee:	e7e5      	b.n	800eabc <_dtoa_r+0x36c>
 800eaf0:	f000 809b 	beq.w	800ec2a <_dtoa_r+0x4da>
 800eaf4:	9b00      	ldr	r3, [sp, #0]
 800eaf6:	4f9d      	ldr	r7, [pc, #628]	; (800ed6c <_dtoa_r+0x61c>)
 800eaf8:	425e      	negs	r6, r3
 800eafa:	4b9b      	ldr	r3, [pc, #620]	; (800ed68 <_dtoa_r+0x618>)
 800eafc:	f006 020f 	and.w	r2, r6, #15
 800eb00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb08:	ec51 0b19 	vmov	r0, r1, d9
 800eb0c:	f7f1 fd94 	bl	8000638 <__aeabi_dmul>
 800eb10:	1136      	asrs	r6, r6, #4
 800eb12:	4682      	mov	sl, r0
 800eb14:	468b      	mov	fp, r1
 800eb16:	2300      	movs	r3, #0
 800eb18:	2502      	movs	r5, #2
 800eb1a:	2e00      	cmp	r6, #0
 800eb1c:	d17a      	bne.n	800ec14 <_dtoa_r+0x4c4>
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d1d3      	bne.n	800eaca <_dtoa_r+0x37a>
 800eb22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	f000 8082 	beq.w	800ec2e <_dtoa_r+0x4de>
 800eb2a:	4b91      	ldr	r3, [pc, #580]	; (800ed70 <_dtoa_r+0x620>)
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	4650      	mov	r0, sl
 800eb30:	4659      	mov	r1, fp
 800eb32:	f7f1 fff3 	bl	8000b1c <__aeabi_dcmplt>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d079      	beq.n	800ec2e <_dtoa_r+0x4de>
 800eb3a:	9b03      	ldr	r3, [sp, #12]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d076      	beq.n	800ec2e <_dtoa_r+0x4de>
 800eb40:	9b02      	ldr	r3, [sp, #8]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	dd36      	ble.n	800ebb4 <_dtoa_r+0x464>
 800eb46:	9b00      	ldr	r3, [sp, #0]
 800eb48:	4650      	mov	r0, sl
 800eb4a:	4659      	mov	r1, fp
 800eb4c:	1e5f      	subs	r7, r3, #1
 800eb4e:	2200      	movs	r2, #0
 800eb50:	4b88      	ldr	r3, [pc, #544]	; (800ed74 <_dtoa_r+0x624>)
 800eb52:	f7f1 fd71 	bl	8000638 <__aeabi_dmul>
 800eb56:	9e02      	ldr	r6, [sp, #8]
 800eb58:	4682      	mov	sl, r0
 800eb5a:	468b      	mov	fp, r1
 800eb5c:	3501      	adds	r5, #1
 800eb5e:	4628      	mov	r0, r5
 800eb60:	f7f1 fd00 	bl	8000564 <__aeabi_i2d>
 800eb64:	4652      	mov	r2, sl
 800eb66:	465b      	mov	r3, fp
 800eb68:	f7f1 fd66 	bl	8000638 <__aeabi_dmul>
 800eb6c:	4b82      	ldr	r3, [pc, #520]	; (800ed78 <_dtoa_r+0x628>)
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f7f1 fbac 	bl	80002cc <__adddf3>
 800eb74:	46d0      	mov	r8, sl
 800eb76:	46d9      	mov	r9, fp
 800eb78:	4682      	mov	sl, r0
 800eb7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800eb7e:	2e00      	cmp	r6, #0
 800eb80:	d158      	bne.n	800ec34 <_dtoa_r+0x4e4>
 800eb82:	4b7e      	ldr	r3, [pc, #504]	; (800ed7c <_dtoa_r+0x62c>)
 800eb84:	2200      	movs	r2, #0
 800eb86:	4640      	mov	r0, r8
 800eb88:	4649      	mov	r1, r9
 800eb8a:	f7f1 fb9d 	bl	80002c8 <__aeabi_dsub>
 800eb8e:	4652      	mov	r2, sl
 800eb90:	465b      	mov	r3, fp
 800eb92:	4680      	mov	r8, r0
 800eb94:	4689      	mov	r9, r1
 800eb96:	f7f1 ffdf 	bl	8000b58 <__aeabi_dcmpgt>
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	f040 8295 	bne.w	800f0ca <_dtoa_r+0x97a>
 800eba0:	4652      	mov	r2, sl
 800eba2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800eba6:	4640      	mov	r0, r8
 800eba8:	4649      	mov	r1, r9
 800ebaa:	f7f1 ffb7 	bl	8000b1c <__aeabi_dcmplt>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	f040 8289 	bne.w	800f0c6 <_dtoa_r+0x976>
 800ebb4:	ec5b ab19 	vmov	sl, fp, d9
 800ebb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	f2c0 8148 	blt.w	800ee50 <_dtoa_r+0x700>
 800ebc0:	9a00      	ldr	r2, [sp, #0]
 800ebc2:	2a0e      	cmp	r2, #14
 800ebc4:	f300 8144 	bgt.w	800ee50 <_dtoa_r+0x700>
 800ebc8:	4b67      	ldr	r3, [pc, #412]	; (800ed68 <_dtoa_r+0x618>)
 800ebca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	f280 80d5 	bge.w	800ed84 <_dtoa_r+0x634>
 800ebda:	9b03      	ldr	r3, [sp, #12]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f300 80d1 	bgt.w	800ed84 <_dtoa_r+0x634>
 800ebe2:	f040 826f 	bne.w	800f0c4 <_dtoa_r+0x974>
 800ebe6:	4b65      	ldr	r3, [pc, #404]	; (800ed7c <_dtoa_r+0x62c>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	4640      	mov	r0, r8
 800ebec:	4649      	mov	r1, r9
 800ebee:	f7f1 fd23 	bl	8000638 <__aeabi_dmul>
 800ebf2:	4652      	mov	r2, sl
 800ebf4:	465b      	mov	r3, fp
 800ebf6:	f7f1 ffa5 	bl	8000b44 <__aeabi_dcmpge>
 800ebfa:	9e03      	ldr	r6, [sp, #12]
 800ebfc:	4637      	mov	r7, r6
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	f040 8245 	bne.w	800f08e <_dtoa_r+0x93e>
 800ec04:	9d01      	ldr	r5, [sp, #4]
 800ec06:	2331      	movs	r3, #49	; 0x31
 800ec08:	f805 3b01 	strb.w	r3, [r5], #1
 800ec0c:	9b00      	ldr	r3, [sp, #0]
 800ec0e:	3301      	adds	r3, #1
 800ec10:	9300      	str	r3, [sp, #0]
 800ec12:	e240      	b.n	800f096 <_dtoa_r+0x946>
 800ec14:	07f2      	lsls	r2, r6, #31
 800ec16:	d505      	bpl.n	800ec24 <_dtoa_r+0x4d4>
 800ec18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec1c:	f7f1 fd0c 	bl	8000638 <__aeabi_dmul>
 800ec20:	3501      	adds	r5, #1
 800ec22:	2301      	movs	r3, #1
 800ec24:	1076      	asrs	r6, r6, #1
 800ec26:	3708      	adds	r7, #8
 800ec28:	e777      	b.n	800eb1a <_dtoa_r+0x3ca>
 800ec2a:	2502      	movs	r5, #2
 800ec2c:	e779      	b.n	800eb22 <_dtoa_r+0x3d2>
 800ec2e:	9f00      	ldr	r7, [sp, #0]
 800ec30:	9e03      	ldr	r6, [sp, #12]
 800ec32:	e794      	b.n	800eb5e <_dtoa_r+0x40e>
 800ec34:	9901      	ldr	r1, [sp, #4]
 800ec36:	4b4c      	ldr	r3, [pc, #304]	; (800ed68 <_dtoa_r+0x618>)
 800ec38:	4431      	add	r1, r6
 800ec3a:	910d      	str	r1, [sp, #52]	; 0x34
 800ec3c:	9908      	ldr	r1, [sp, #32]
 800ec3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ec42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec46:	2900      	cmp	r1, #0
 800ec48:	d043      	beq.n	800ecd2 <_dtoa_r+0x582>
 800ec4a:	494d      	ldr	r1, [pc, #308]	; (800ed80 <_dtoa_r+0x630>)
 800ec4c:	2000      	movs	r0, #0
 800ec4e:	f7f1 fe1d 	bl	800088c <__aeabi_ddiv>
 800ec52:	4652      	mov	r2, sl
 800ec54:	465b      	mov	r3, fp
 800ec56:	f7f1 fb37 	bl	80002c8 <__aeabi_dsub>
 800ec5a:	9d01      	ldr	r5, [sp, #4]
 800ec5c:	4682      	mov	sl, r0
 800ec5e:	468b      	mov	fp, r1
 800ec60:	4649      	mov	r1, r9
 800ec62:	4640      	mov	r0, r8
 800ec64:	f7f1 ff98 	bl	8000b98 <__aeabi_d2iz>
 800ec68:	4606      	mov	r6, r0
 800ec6a:	f7f1 fc7b 	bl	8000564 <__aeabi_i2d>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	460b      	mov	r3, r1
 800ec72:	4640      	mov	r0, r8
 800ec74:	4649      	mov	r1, r9
 800ec76:	f7f1 fb27 	bl	80002c8 <__aeabi_dsub>
 800ec7a:	3630      	adds	r6, #48	; 0x30
 800ec7c:	f805 6b01 	strb.w	r6, [r5], #1
 800ec80:	4652      	mov	r2, sl
 800ec82:	465b      	mov	r3, fp
 800ec84:	4680      	mov	r8, r0
 800ec86:	4689      	mov	r9, r1
 800ec88:	f7f1 ff48 	bl	8000b1c <__aeabi_dcmplt>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d163      	bne.n	800ed58 <_dtoa_r+0x608>
 800ec90:	4642      	mov	r2, r8
 800ec92:	464b      	mov	r3, r9
 800ec94:	4936      	ldr	r1, [pc, #216]	; (800ed70 <_dtoa_r+0x620>)
 800ec96:	2000      	movs	r0, #0
 800ec98:	f7f1 fb16 	bl	80002c8 <__aeabi_dsub>
 800ec9c:	4652      	mov	r2, sl
 800ec9e:	465b      	mov	r3, fp
 800eca0:	f7f1 ff3c 	bl	8000b1c <__aeabi_dcmplt>
 800eca4:	2800      	cmp	r0, #0
 800eca6:	f040 80b5 	bne.w	800ee14 <_dtoa_r+0x6c4>
 800ecaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecac:	429d      	cmp	r5, r3
 800ecae:	d081      	beq.n	800ebb4 <_dtoa_r+0x464>
 800ecb0:	4b30      	ldr	r3, [pc, #192]	; (800ed74 <_dtoa_r+0x624>)
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	4650      	mov	r0, sl
 800ecb6:	4659      	mov	r1, fp
 800ecb8:	f7f1 fcbe 	bl	8000638 <__aeabi_dmul>
 800ecbc:	4b2d      	ldr	r3, [pc, #180]	; (800ed74 <_dtoa_r+0x624>)
 800ecbe:	4682      	mov	sl, r0
 800ecc0:	468b      	mov	fp, r1
 800ecc2:	4640      	mov	r0, r8
 800ecc4:	4649      	mov	r1, r9
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	f7f1 fcb6 	bl	8000638 <__aeabi_dmul>
 800eccc:	4680      	mov	r8, r0
 800ecce:	4689      	mov	r9, r1
 800ecd0:	e7c6      	b.n	800ec60 <_dtoa_r+0x510>
 800ecd2:	4650      	mov	r0, sl
 800ecd4:	4659      	mov	r1, fp
 800ecd6:	f7f1 fcaf 	bl	8000638 <__aeabi_dmul>
 800ecda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecdc:	9d01      	ldr	r5, [sp, #4]
 800ecde:	930f      	str	r3, [sp, #60]	; 0x3c
 800ece0:	4682      	mov	sl, r0
 800ece2:	468b      	mov	fp, r1
 800ece4:	4649      	mov	r1, r9
 800ece6:	4640      	mov	r0, r8
 800ece8:	f7f1 ff56 	bl	8000b98 <__aeabi_d2iz>
 800ecec:	4606      	mov	r6, r0
 800ecee:	f7f1 fc39 	bl	8000564 <__aeabi_i2d>
 800ecf2:	3630      	adds	r6, #48	; 0x30
 800ecf4:	4602      	mov	r2, r0
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	4640      	mov	r0, r8
 800ecfa:	4649      	mov	r1, r9
 800ecfc:	f7f1 fae4 	bl	80002c8 <__aeabi_dsub>
 800ed00:	f805 6b01 	strb.w	r6, [r5], #1
 800ed04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed06:	429d      	cmp	r5, r3
 800ed08:	4680      	mov	r8, r0
 800ed0a:	4689      	mov	r9, r1
 800ed0c:	f04f 0200 	mov.w	r2, #0
 800ed10:	d124      	bne.n	800ed5c <_dtoa_r+0x60c>
 800ed12:	4b1b      	ldr	r3, [pc, #108]	; (800ed80 <_dtoa_r+0x630>)
 800ed14:	4650      	mov	r0, sl
 800ed16:	4659      	mov	r1, fp
 800ed18:	f7f1 fad8 	bl	80002cc <__adddf3>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	460b      	mov	r3, r1
 800ed20:	4640      	mov	r0, r8
 800ed22:	4649      	mov	r1, r9
 800ed24:	f7f1 ff18 	bl	8000b58 <__aeabi_dcmpgt>
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	d173      	bne.n	800ee14 <_dtoa_r+0x6c4>
 800ed2c:	4652      	mov	r2, sl
 800ed2e:	465b      	mov	r3, fp
 800ed30:	4913      	ldr	r1, [pc, #76]	; (800ed80 <_dtoa_r+0x630>)
 800ed32:	2000      	movs	r0, #0
 800ed34:	f7f1 fac8 	bl	80002c8 <__aeabi_dsub>
 800ed38:	4602      	mov	r2, r0
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	4640      	mov	r0, r8
 800ed3e:	4649      	mov	r1, r9
 800ed40:	f7f1 feec 	bl	8000b1c <__aeabi_dcmplt>
 800ed44:	2800      	cmp	r0, #0
 800ed46:	f43f af35 	beq.w	800ebb4 <_dtoa_r+0x464>
 800ed4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ed4c:	1e6b      	subs	r3, r5, #1
 800ed4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed54:	2b30      	cmp	r3, #48	; 0x30
 800ed56:	d0f8      	beq.n	800ed4a <_dtoa_r+0x5fa>
 800ed58:	9700      	str	r7, [sp, #0]
 800ed5a:	e049      	b.n	800edf0 <_dtoa_r+0x6a0>
 800ed5c:	4b05      	ldr	r3, [pc, #20]	; (800ed74 <_dtoa_r+0x624>)
 800ed5e:	f7f1 fc6b 	bl	8000638 <__aeabi_dmul>
 800ed62:	4680      	mov	r8, r0
 800ed64:	4689      	mov	r9, r1
 800ed66:	e7bd      	b.n	800ece4 <_dtoa_r+0x594>
 800ed68:	08012200 	.word	0x08012200
 800ed6c:	080121d8 	.word	0x080121d8
 800ed70:	3ff00000 	.word	0x3ff00000
 800ed74:	40240000 	.word	0x40240000
 800ed78:	401c0000 	.word	0x401c0000
 800ed7c:	40140000 	.word	0x40140000
 800ed80:	3fe00000 	.word	0x3fe00000
 800ed84:	9d01      	ldr	r5, [sp, #4]
 800ed86:	4656      	mov	r6, sl
 800ed88:	465f      	mov	r7, fp
 800ed8a:	4642      	mov	r2, r8
 800ed8c:	464b      	mov	r3, r9
 800ed8e:	4630      	mov	r0, r6
 800ed90:	4639      	mov	r1, r7
 800ed92:	f7f1 fd7b 	bl	800088c <__aeabi_ddiv>
 800ed96:	f7f1 feff 	bl	8000b98 <__aeabi_d2iz>
 800ed9a:	4682      	mov	sl, r0
 800ed9c:	f7f1 fbe2 	bl	8000564 <__aeabi_i2d>
 800eda0:	4642      	mov	r2, r8
 800eda2:	464b      	mov	r3, r9
 800eda4:	f7f1 fc48 	bl	8000638 <__aeabi_dmul>
 800eda8:	4602      	mov	r2, r0
 800edaa:	460b      	mov	r3, r1
 800edac:	4630      	mov	r0, r6
 800edae:	4639      	mov	r1, r7
 800edb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800edb4:	f7f1 fa88 	bl	80002c8 <__aeabi_dsub>
 800edb8:	f805 6b01 	strb.w	r6, [r5], #1
 800edbc:	9e01      	ldr	r6, [sp, #4]
 800edbe:	9f03      	ldr	r7, [sp, #12]
 800edc0:	1bae      	subs	r6, r5, r6
 800edc2:	42b7      	cmp	r7, r6
 800edc4:	4602      	mov	r2, r0
 800edc6:	460b      	mov	r3, r1
 800edc8:	d135      	bne.n	800ee36 <_dtoa_r+0x6e6>
 800edca:	f7f1 fa7f 	bl	80002cc <__adddf3>
 800edce:	4642      	mov	r2, r8
 800edd0:	464b      	mov	r3, r9
 800edd2:	4606      	mov	r6, r0
 800edd4:	460f      	mov	r7, r1
 800edd6:	f7f1 febf 	bl	8000b58 <__aeabi_dcmpgt>
 800edda:	b9d0      	cbnz	r0, 800ee12 <_dtoa_r+0x6c2>
 800eddc:	4642      	mov	r2, r8
 800edde:	464b      	mov	r3, r9
 800ede0:	4630      	mov	r0, r6
 800ede2:	4639      	mov	r1, r7
 800ede4:	f7f1 fe90 	bl	8000b08 <__aeabi_dcmpeq>
 800ede8:	b110      	cbz	r0, 800edf0 <_dtoa_r+0x6a0>
 800edea:	f01a 0f01 	tst.w	sl, #1
 800edee:	d110      	bne.n	800ee12 <_dtoa_r+0x6c2>
 800edf0:	4620      	mov	r0, r4
 800edf2:	ee18 1a10 	vmov	r1, s16
 800edf6:	f000 fae5 	bl	800f3c4 <_Bfree>
 800edfa:	2300      	movs	r3, #0
 800edfc:	9800      	ldr	r0, [sp, #0]
 800edfe:	702b      	strb	r3, [r5, #0]
 800ee00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee02:	3001      	adds	r0, #1
 800ee04:	6018      	str	r0, [r3, #0]
 800ee06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	f43f acf1 	beq.w	800e7f0 <_dtoa_r+0xa0>
 800ee0e:	601d      	str	r5, [r3, #0]
 800ee10:	e4ee      	b.n	800e7f0 <_dtoa_r+0xa0>
 800ee12:	9f00      	ldr	r7, [sp, #0]
 800ee14:	462b      	mov	r3, r5
 800ee16:	461d      	mov	r5, r3
 800ee18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee1c:	2a39      	cmp	r2, #57	; 0x39
 800ee1e:	d106      	bne.n	800ee2e <_dtoa_r+0x6de>
 800ee20:	9a01      	ldr	r2, [sp, #4]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d1f7      	bne.n	800ee16 <_dtoa_r+0x6c6>
 800ee26:	9901      	ldr	r1, [sp, #4]
 800ee28:	2230      	movs	r2, #48	; 0x30
 800ee2a:	3701      	adds	r7, #1
 800ee2c:	700a      	strb	r2, [r1, #0]
 800ee2e:	781a      	ldrb	r2, [r3, #0]
 800ee30:	3201      	adds	r2, #1
 800ee32:	701a      	strb	r2, [r3, #0]
 800ee34:	e790      	b.n	800ed58 <_dtoa_r+0x608>
 800ee36:	4ba6      	ldr	r3, [pc, #664]	; (800f0d0 <_dtoa_r+0x980>)
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f7f1 fbfd 	bl	8000638 <__aeabi_dmul>
 800ee3e:	2200      	movs	r2, #0
 800ee40:	2300      	movs	r3, #0
 800ee42:	4606      	mov	r6, r0
 800ee44:	460f      	mov	r7, r1
 800ee46:	f7f1 fe5f 	bl	8000b08 <__aeabi_dcmpeq>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d09d      	beq.n	800ed8a <_dtoa_r+0x63a>
 800ee4e:	e7cf      	b.n	800edf0 <_dtoa_r+0x6a0>
 800ee50:	9a08      	ldr	r2, [sp, #32]
 800ee52:	2a00      	cmp	r2, #0
 800ee54:	f000 80d7 	beq.w	800f006 <_dtoa_r+0x8b6>
 800ee58:	9a06      	ldr	r2, [sp, #24]
 800ee5a:	2a01      	cmp	r2, #1
 800ee5c:	f300 80ba 	bgt.w	800efd4 <_dtoa_r+0x884>
 800ee60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee62:	2a00      	cmp	r2, #0
 800ee64:	f000 80b2 	beq.w	800efcc <_dtoa_r+0x87c>
 800ee68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ee6c:	9e07      	ldr	r6, [sp, #28]
 800ee6e:	9d04      	ldr	r5, [sp, #16]
 800ee70:	9a04      	ldr	r2, [sp, #16]
 800ee72:	441a      	add	r2, r3
 800ee74:	9204      	str	r2, [sp, #16]
 800ee76:	9a05      	ldr	r2, [sp, #20]
 800ee78:	2101      	movs	r1, #1
 800ee7a:	441a      	add	r2, r3
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	9205      	str	r2, [sp, #20]
 800ee80:	f000 fb58 	bl	800f534 <__i2b>
 800ee84:	4607      	mov	r7, r0
 800ee86:	2d00      	cmp	r5, #0
 800ee88:	dd0c      	ble.n	800eea4 <_dtoa_r+0x754>
 800ee8a:	9b05      	ldr	r3, [sp, #20]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	dd09      	ble.n	800eea4 <_dtoa_r+0x754>
 800ee90:	42ab      	cmp	r3, r5
 800ee92:	9a04      	ldr	r2, [sp, #16]
 800ee94:	bfa8      	it	ge
 800ee96:	462b      	movge	r3, r5
 800ee98:	1ad2      	subs	r2, r2, r3
 800ee9a:	9204      	str	r2, [sp, #16]
 800ee9c:	9a05      	ldr	r2, [sp, #20]
 800ee9e:	1aed      	subs	r5, r5, r3
 800eea0:	1ad3      	subs	r3, r2, r3
 800eea2:	9305      	str	r3, [sp, #20]
 800eea4:	9b07      	ldr	r3, [sp, #28]
 800eea6:	b31b      	cbz	r3, 800eef0 <_dtoa_r+0x7a0>
 800eea8:	9b08      	ldr	r3, [sp, #32]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	f000 80af 	beq.w	800f00e <_dtoa_r+0x8be>
 800eeb0:	2e00      	cmp	r6, #0
 800eeb2:	dd13      	ble.n	800eedc <_dtoa_r+0x78c>
 800eeb4:	4639      	mov	r1, r7
 800eeb6:	4632      	mov	r2, r6
 800eeb8:	4620      	mov	r0, r4
 800eeba:	f000 fbfb 	bl	800f6b4 <__pow5mult>
 800eebe:	ee18 2a10 	vmov	r2, s16
 800eec2:	4601      	mov	r1, r0
 800eec4:	4607      	mov	r7, r0
 800eec6:	4620      	mov	r0, r4
 800eec8:	f000 fb4a 	bl	800f560 <__multiply>
 800eecc:	ee18 1a10 	vmov	r1, s16
 800eed0:	4680      	mov	r8, r0
 800eed2:	4620      	mov	r0, r4
 800eed4:	f000 fa76 	bl	800f3c4 <_Bfree>
 800eed8:	ee08 8a10 	vmov	s16, r8
 800eedc:	9b07      	ldr	r3, [sp, #28]
 800eede:	1b9a      	subs	r2, r3, r6
 800eee0:	d006      	beq.n	800eef0 <_dtoa_r+0x7a0>
 800eee2:	ee18 1a10 	vmov	r1, s16
 800eee6:	4620      	mov	r0, r4
 800eee8:	f000 fbe4 	bl	800f6b4 <__pow5mult>
 800eeec:	ee08 0a10 	vmov	s16, r0
 800eef0:	2101      	movs	r1, #1
 800eef2:	4620      	mov	r0, r4
 800eef4:	f000 fb1e 	bl	800f534 <__i2b>
 800eef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	4606      	mov	r6, r0
 800eefe:	f340 8088 	ble.w	800f012 <_dtoa_r+0x8c2>
 800ef02:	461a      	mov	r2, r3
 800ef04:	4601      	mov	r1, r0
 800ef06:	4620      	mov	r0, r4
 800ef08:	f000 fbd4 	bl	800f6b4 <__pow5mult>
 800ef0c:	9b06      	ldr	r3, [sp, #24]
 800ef0e:	2b01      	cmp	r3, #1
 800ef10:	4606      	mov	r6, r0
 800ef12:	f340 8081 	ble.w	800f018 <_dtoa_r+0x8c8>
 800ef16:	f04f 0800 	mov.w	r8, #0
 800ef1a:	6933      	ldr	r3, [r6, #16]
 800ef1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ef20:	6918      	ldr	r0, [r3, #16]
 800ef22:	f000 fab7 	bl	800f494 <__hi0bits>
 800ef26:	f1c0 0020 	rsb	r0, r0, #32
 800ef2a:	9b05      	ldr	r3, [sp, #20]
 800ef2c:	4418      	add	r0, r3
 800ef2e:	f010 001f 	ands.w	r0, r0, #31
 800ef32:	f000 8092 	beq.w	800f05a <_dtoa_r+0x90a>
 800ef36:	f1c0 0320 	rsb	r3, r0, #32
 800ef3a:	2b04      	cmp	r3, #4
 800ef3c:	f340 808a 	ble.w	800f054 <_dtoa_r+0x904>
 800ef40:	f1c0 001c 	rsb	r0, r0, #28
 800ef44:	9b04      	ldr	r3, [sp, #16]
 800ef46:	4403      	add	r3, r0
 800ef48:	9304      	str	r3, [sp, #16]
 800ef4a:	9b05      	ldr	r3, [sp, #20]
 800ef4c:	4403      	add	r3, r0
 800ef4e:	4405      	add	r5, r0
 800ef50:	9305      	str	r3, [sp, #20]
 800ef52:	9b04      	ldr	r3, [sp, #16]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	dd07      	ble.n	800ef68 <_dtoa_r+0x818>
 800ef58:	ee18 1a10 	vmov	r1, s16
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	4620      	mov	r0, r4
 800ef60:	f000 fc02 	bl	800f768 <__lshift>
 800ef64:	ee08 0a10 	vmov	s16, r0
 800ef68:	9b05      	ldr	r3, [sp, #20]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	dd05      	ble.n	800ef7a <_dtoa_r+0x82a>
 800ef6e:	4631      	mov	r1, r6
 800ef70:	461a      	mov	r2, r3
 800ef72:	4620      	mov	r0, r4
 800ef74:	f000 fbf8 	bl	800f768 <__lshift>
 800ef78:	4606      	mov	r6, r0
 800ef7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d06e      	beq.n	800f05e <_dtoa_r+0x90e>
 800ef80:	ee18 0a10 	vmov	r0, s16
 800ef84:	4631      	mov	r1, r6
 800ef86:	f000 fc5f 	bl	800f848 <__mcmp>
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	da67      	bge.n	800f05e <_dtoa_r+0x90e>
 800ef8e:	9b00      	ldr	r3, [sp, #0]
 800ef90:	3b01      	subs	r3, #1
 800ef92:	ee18 1a10 	vmov	r1, s16
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	220a      	movs	r2, #10
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	f000 fa33 	bl	800f408 <__multadd>
 800efa2:	9b08      	ldr	r3, [sp, #32]
 800efa4:	ee08 0a10 	vmov	s16, r0
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f000 81b1 	beq.w	800f310 <_dtoa_r+0xbc0>
 800efae:	2300      	movs	r3, #0
 800efb0:	4639      	mov	r1, r7
 800efb2:	220a      	movs	r2, #10
 800efb4:	4620      	mov	r0, r4
 800efb6:	f000 fa27 	bl	800f408 <__multadd>
 800efba:	9b02      	ldr	r3, [sp, #8]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	4607      	mov	r7, r0
 800efc0:	f300 808e 	bgt.w	800f0e0 <_dtoa_r+0x990>
 800efc4:	9b06      	ldr	r3, [sp, #24]
 800efc6:	2b02      	cmp	r3, #2
 800efc8:	dc51      	bgt.n	800f06e <_dtoa_r+0x91e>
 800efca:	e089      	b.n	800f0e0 <_dtoa_r+0x990>
 800efcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800efd2:	e74b      	b.n	800ee6c <_dtoa_r+0x71c>
 800efd4:	9b03      	ldr	r3, [sp, #12]
 800efd6:	1e5e      	subs	r6, r3, #1
 800efd8:	9b07      	ldr	r3, [sp, #28]
 800efda:	42b3      	cmp	r3, r6
 800efdc:	bfbf      	itttt	lt
 800efde:	9b07      	ldrlt	r3, [sp, #28]
 800efe0:	9607      	strlt	r6, [sp, #28]
 800efe2:	1af2      	sublt	r2, r6, r3
 800efe4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800efe6:	bfb6      	itet	lt
 800efe8:	189b      	addlt	r3, r3, r2
 800efea:	1b9e      	subge	r6, r3, r6
 800efec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800efee:	9b03      	ldr	r3, [sp, #12]
 800eff0:	bfb8      	it	lt
 800eff2:	2600      	movlt	r6, #0
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	bfb7      	itett	lt
 800eff8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800effc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f000:	1a9d      	sublt	r5, r3, r2
 800f002:	2300      	movlt	r3, #0
 800f004:	e734      	b.n	800ee70 <_dtoa_r+0x720>
 800f006:	9e07      	ldr	r6, [sp, #28]
 800f008:	9d04      	ldr	r5, [sp, #16]
 800f00a:	9f08      	ldr	r7, [sp, #32]
 800f00c:	e73b      	b.n	800ee86 <_dtoa_r+0x736>
 800f00e:	9a07      	ldr	r2, [sp, #28]
 800f010:	e767      	b.n	800eee2 <_dtoa_r+0x792>
 800f012:	9b06      	ldr	r3, [sp, #24]
 800f014:	2b01      	cmp	r3, #1
 800f016:	dc18      	bgt.n	800f04a <_dtoa_r+0x8fa>
 800f018:	f1ba 0f00 	cmp.w	sl, #0
 800f01c:	d115      	bne.n	800f04a <_dtoa_r+0x8fa>
 800f01e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f022:	b993      	cbnz	r3, 800f04a <_dtoa_r+0x8fa>
 800f024:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f028:	0d1b      	lsrs	r3, r3, #20
 800f02a:	051b      	lsls	r3, r3, #20
 800f02c:	b183      	cbz	r3, 800f050 <_dtoa_r+0x900>
 800f02e:	9b04      	ldr	r3, [sp, #16]
 800f030:	3301      	adds	r3, #1
 800f032:	9304      	str	r3, [sp, #16]
 800f034:	9b05      	ldr	r3, [sp, #20]
 800f036:	3301      	adds	r3, #1
 800f038:	9305      	str	r3, [sp, #20]
 800f03a:	f04f 0801 	mov.w	r8, #1
 800f03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f040:	2b00      	cmp	r3, #0
 800f042:	f47f af6a 	bne.w	800ef1a <_dtoa_r+0x7ca>
 800f046:	2001      	movs	r0, #1
 800f048:	e76f      	b.n	800ef2a <_dtoa_r+0x7da>
 800f04a:	f04f 0800 	mov.w	r8, #0
 800f04e:	e7f6      	b.n	800f03e <_dtoa_r+0x8ee>
 800f050:	4698      	mov	r8, r3
 800f052:	e7f4      	b.n	800f03e <_dtoa_r+0x8ee>
 800f054:	f43f af7d 	beq.w	800ef52 <_dtoa_r+0x802>
 800f058:	4618      	mov	r0, r3
 800f05a:	301c      	adds	r0, #28
 800f05c:	e772      	b.n	800ef44 <_dtoa_r+0x7f4>
 800f05e:	9b03      	ldr	r3, [sp, #12]
 800f060:	2b00      	cmp	r3, #0
 800f062:	dc37      	bgt.n	800f0d4 <_dtoa_r+0x984>
 800f064:	9b06      	ldr	r3, [sp, #24]
 800f066:	2b02      	cmp	r3, #2
 800f068:	dd34      	ble.n	800f0d4 <_dtoa_r+0x984>
 800f06a:	9b03      	ldr	r3, [sp, #12]
 800f06c:	9302      	str	r3, [sp, #8]
 800f06e:	9b02      	ldr	r3, [sp, #8]
 800f070:	b96b      	cbnz	r3, 800f08e <_dtoa_r+0x93e>
 800f072:	4631      	mov	r1, r6
 800f074:	2205      	movs	r2, #5
 800f076:	4620      	mov	r0, r4
 800f078:	f000 f9c6 	bl	800f408 <__multadd>
 800f07c:	4601      	mov	r1, r0
 800f07e:	4606      	mov	r6, r0
 800f080:	ee18 0a10 	vmov	r0, s16
 800f084:	f000 fbe0 	bl	800f848 <__mcmp>
 800f088:	2800      	cmp	r0, #0
 800f08a:	f73f adbb 	bgt.w	800ec04 <_dtoa_r+0x4b4>
 800f08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f090:	9d01      	ldr	r5, [sp, #4]
 800f092:	43db      	mvns	r3, r3
 800f094:	9300      	str	r3, [sp, #0]
 800f096:	f04f 0800 	mov.w	r8, #0
 800f09a:	4631      	mov	r1, r6
 800f09c:	4620      	mov	r0, r4
 800f09e:	f000 f991 	bl	800f3c4 <_Bfree>
 800f0a2:	2f00      	cmp	r7, #0
 800f0a4:	f43f aea4 	beq.w	800edf0 <_dtoa_r+0x6a0>
 800f0a8:	f1b8 0f00 	cmp.w	r8, #0
 800f0ac:	d005      	beq.n	800f0ba <_dtoa_r+0x96a>
 800f0ae:	45b8      	cmp	r8, r7
 800f0b0:	d003      	beq.n	800f0ba <_dtoa_r+0x96a>
 800f0b2:	4641      	mov	r1, r8
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f000 f985 	bl	800f3c4 <_Bfree>
 800f0ba:	4639      	mov	r1, r7
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f000 f981 	bl	800f3c4 <_Bfree>
 800f0c2:	e695      	b.n	800edf0 <_dtoa_r+0x6a0>
 800f0c4:	2600      	movs	r6, #0
 800f0c6:	4637      	mov	r7, r6
 800f0c8:	e7e1      	b.n	800f08e <_dtoa_r+0x93e>
 800f0ca:	9700      	str	r7, [sp, #0]
 800f0cc:	4637      	mov	r7, r6
 800f0ce:	e599      	b.n	800ec04 <_dtoa_r+0x4b4>
 800f0d0:	40240000 	.word	0x40240000
 800f0d4:	9b08      	ldr	r3, [sp, #32]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	f000 80ca 	beq.w	800f270 <_dtoa_r+0xb20>
 800f0dc:	9b03      	ldr	r3, [sp, #12]
 800f0de:	9302      	str	r3, [sp, #8]
 800f0e0:	2d00      	cmp	r5, #0
 800f0e2:	dd05      	ble.n	800f0f0 <_dtoa_r+0x9a0>
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	462a      	mov	r2, r5
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	f000 fb3d 	bl	800f768 <__lshift>
 800f0ee:	4607      	mov	r7, r0
 800f0f0:	f1b8 0f00 	cmp.w	r8, #0
 800f0f4:	d05b      	beq.n	800f1ae <_dtoa_r+0xa5e>
 800f0f6:	6879      	ldr	r1, [r7, #4]
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f000 f923 	bl	800f344 <_Balloc>
 800f0fe:	4605      	mov	r5, r0
 800f100:	b928      	cbnz	r0, 800f10e <_dtoa_r+0x9be>
 800f102:	4b87      	ldr	r3, [pc, #540]	; (800f320 <_dtoa_r+0xbd0>)
 800f104:	4602      	mov	r2, r0
 800f106:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f10a:	f7ff bb3b 	b.w	800e784 <_dtoa_r+0x34>
 800f10e:	693a      	ldr	r2, [r7, #16]
 800f110:	3202      	adds	r2, #2
 800f112:	0092      	lsls	r2, r2, #2
 800f114:	f107 010c 	add.w	r1, r7, #12
 800f118:	300c      	adds	r0, #12
 800f11a:	f7fe fddb 	bl	800dcd4 <memcpy>
 800f11e:	2201      	movs	r2, #1
 800f120:	4629      	mov	r1, r5
 800f122:	4620      	mov	r0, r4
 800f124:	f000 fb20 	bl	800f768 <__lshift>
 800f128:	9b01      	ldr	r3, [sp, #4]
 800f12a:	f103 0901 	add.w	r9, r3, #1
 800f12e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f132:	4413      	add	r3, r2
 800f134:	9305      	str	r3, [sp, #20]
 800f136:	f00a 0301 	and.w	r3, sl, #1
 800f13a:	46b8      	mov	r8, r7
 800f13c:	9304      	str	r3, [sp, #16]
 800f13e:	4607      	mov	r7, r0
 800f140:	4631      	mov	r1, r6
 800f142:	ee18 0a10 	vmov	r0, s16
 800f146:	f7ff fa78 	bl	800e63a <quorem>
 800f14a:	4641      	mov	r1, r8
 800f14c:	9002      	str	r0, [sp, #8]
 800f14e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f152:	ee18 0a10 	vmov	r0, s16
 800f156:	f000 fb77 	bl	800f848 <__mcmp>
 800f15a:	463a      	mov	r2, r7
 800f15c:	9003      	str	r0, [sp, #12]
 800f15e:	4631      	mov	r1, r6
 800f160:	4620      	mov	r0, r4
 800f162:	f000 fb8d 	bl	800f880 <__mdiff>
 800f166:	68c2      	ldr	r2, [r0, #12]
 800f168:	f109 3bff 	add.w	fp, r9, #4294967295
 800f16c:	4605      	mov	r5, r0
 800f16e:	bb02      	cbnz	r2, 800f1b2 <_dtoa_r+0xa62>
 800f170:	4601      	mov	r1, r0
 800f172:	ee18 0a10 	vmov	r0, s16
 800f176:	f000 fb67 	bl	800f848 <__mcmp>
 800f17a:	4602      	mov	r2, r0
 800f17c:	4629      	mov	r1, r5
 800f17e:	4620      	mov	r0, r4
 800f180:	9207      	str	r2, [sp, #28]
 800f182:	f000 f91f 	bl	800f3c4 <_Bfree>
 800f186:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f18a:	ea43 0102 	orr.w	r1, r3, r2
 800f18e:	9b04      	ldr	r3, [sp, #16]
 800f190:	430b      	orrs	r3, r1
 800f192:	464d      	mov	r5, r9
 800f194:	d10f      	bne.n	800f1b6 <_dtoa_r+0xa66>
 800f196:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f19a:	d02a      	beq.n	800f1f2 <_dtoa_r+0xaa2>
 800f19c:	9b03      	ldr	r3, [sp, #12]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	dd02      	ble.n	800f1a8 <_dtoa_r+0xa58>
 800f1a2:	9b02      	ldr	r3, [sp, #8]
 800f1a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f1a8:	f88b a000 	strb.w	sl, [fp]
 800f1ac:	e775      	b.n	800f09a <_dtoa_r+0x94a>
 800f1ae:	4638      	mov	r0, r7
 800f1b0:	e7ba      	b.n	800f128 <_dtoa_r+0x9d8>
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	e7e2      	b.n	800f17c <_dtoa_r+0xa2c>
 800f1b6:	9b03      	ldr	r3, [sp, #12]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	db04      	blt.n	800f1c6 <_dtoa_r+0xa76>
 800f1bc:	9906      	ldr	r1, [sp, #24]
 800f1be:	430b      	orrs	r3, r1
 800f1c0:	9904      	ldr	r1, [sp, #16]
 800f1c2:	430b      	orrs	r3, r1
 800f1c4:	d122      	bne.n	800f20c <_dtoa_r+0xabc>
 800f1c6:	2a00      	cmp	r2, #0
 800f1c8:	ddee      	ble.n	800f1a8 <_dtoa_r+0xa58>
 800f1ca:	ee18 1a10 	vmov	r1, s16
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	4620      	mov	r0, r4
 800f1d2:	f000 fac9 	bl	800f768 <__lshift>
 800f1d6:	4631      	mov	r1, r6
 800f1d8:	ee08 0a10 	vmov	s16, r0
 800f1dc:	f000 fb34 	bl	800f848 <__mcmp>
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	dc03      	bgt.n	800f1ec <_dtoa_r+0xa9c>
 800f1e4:	d1e0      	bne.n	800f1a8 <_dtoa_r+0xa58>
 800f1e6:	f01a 0f01 	tst.w	sl, #1
 800f1ea:	d0dd      	beq.n	800f1a8 <_dtoa_r+0xa58>
 800f1ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f1f0:	d1d7      	bne.n	800f1a2 <_dtoa_r+0xa52>
 800f1f2:	2339      	movs	r3, #57	; 0x39
 800f1f4:	f88b 3000 	strb.w	r3, [fp]
 800f1f8:	462b      	mov	r3, r5
 800f1fa:	461d      	mov	r5, r3
 800f1fc:	3b01      	subs	r3, #1
 800f1fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f202:	2a39      	cmp	r2, #57	; 0x39
 800f204:	d071      	beq.n	800f2ea <_dtoa_r+0xb9a>
 800f206:	3201      	adds	r2, #1
 800f208:	701a      	strb	r2, [r3, #0]
 800f20a:	e746      	b.n	800f09a <_dtoa_r+0x94a>
 800f20c:	2a00      	cmp	r2, #0
 800f20e:	dd07      	ble.n	800f220 <_dtoa_r+0xad0>
 800f210:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f214:	d0ed      	beq.n	800f1f2 <_dtoa_r+0xaa2>
 800f216:	f10a 0301 	add.w	r3, sl, #1
 800f21a:	f88b 3000 	strb.w	r3, [fp]
 800f21e:	e73c      	b.n	800f09a <_dtoa_r+0x94a>
 800f220:	9b05      	ldr	r3, [sp, #20]
 800f222:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f226:	4599      	cmp	r9, r3
 800f228:	d047      	beq.n	800f2ba <_dtoa_r+0xb6a>
 800f22a:	ee18 1a10 	vmov	r1, s16
 800f22e:	2300      	movs	r3, #0
 800f230:	220a      	movs	r2, #10
 800f232:	4620      	mov	r0, r4
 800f234:	f000 f8e8 	bl	800f408 <__multadd>
 800f238:	45b8      	cmp	r8, r7
 800f23a:	ee08 0a10 	vmov	s16, r0
 800f23e:	f04f 0300 	mov.w	r3, #0
 800f242:	f04f 020a 	mov.w	r2, #10
 800f246:	4641      	mov	r1, r8
 800f248:	4620      	mov	r0, r4
 800f24a:	d106      	bne.n	800f25a <_dtoa_r+0xb0a>
 800f24c:	f000 f8dc 	bl	800f408 <__multadd>
 800f250:	4680      	mov	r8, r0
 800f252:	4607      	mov	r7, r0
 800f254:	f109 0901 	add.w	r9, r9, #1
 800f258:	e772      	b.n	800f140 <_dtoa_r+0x9f0>
 800f25a:	f000 f8d5 	bl	800f408 <__multadd>
 800f25e:	4639      	mov	r1, r7
 800f260:	4680      	mov	r8, r0
 800f262:	2300      	movs	r3, #0
 800f264:	220a      	movs	r2, #10
 800f266:	4620      	mov	r0, r4
 800f268:	f000 f8ce 	bl	800f408 <__multadd>
 800f26c:	4607      	mov	r7, r0
 800f26e:	e7f1      	b.n	800f254 <_dtoa_r+0xb04>
 800f270:	9b03      	ldr	r3, [sp, #12]
 800f272:	9302      	str	r3, [sp, #8]
 800f274:	9d01      	ldr	r5, [sp, #4]
 800f276:	ee18 0a10 	vmov	r0, s16
 800f27a:	4631      	mov	r1, r6
 800f27c:	f7ff f9dd 	bl	800e63a <quorem>
 800f280:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f284:	9b01      	ldr	r3, [sp, #4]
 800f286:	f805 ab01 	strb.w	sl, [r5], #1
 800f28a:	1aea      	subs	r2, r5, r3
 800f28c:	9b02      	ldr	r3, [sp, #8]
 800f28e:	4293      	cmp	r3, r2
 800f290:	dd09      	ble.n	800f2a6 <_dtoa_r+0xb56>
 800f292:	ee18 1a10 	vmov	r1, s16
 800f296:	2300      	movs	r3, #0
 800f298:	220a      	movs	r2, #10
 800f29a:	4620      	mov	r0, r4
 800f29c:	f000 f8b4 	bl	800f408 <__multadd>
 800f2a0:	ee08 0a10 	vmov	s16, r0
 800f2a4:	e7e7      	b.n	800f276 <_dtoa_r+0xb26>
 800f2a6:	9b02      	ldr	r3, [sp, #8]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	bfc8      	it	gt
 800f2ac:	461d      	movgt	r5, r3
 800f2ae:	9b01      	ldr	r3, [sp, #4]
 800f2b0:	bfd8      	it	le
 800f2b2:	2501      	movle	r5, #1
 800f2b4:	441d      	add	r5, r3
 800f2b6:	f04f 0800 	mov.w	r8, #0
 800f2ba:	ee18 1a10 	vmov	r1, s16
 800f2be:	2201      	movs	r2, #1
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f000 fa51 	bl	800f768 <__lshift>
 800f2c6:	4631      	mov	r1, r6
 800f2c8:	ee08 0a10 	vmov	s16, r0
 800f2cc:	f000 fabc 	bl	800f848 <__mcmp>
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	dc91      	bgt.n	800f1f8 <_dtoa_r+0xaa8>
 800f2d4:	d102      	bne.n	800f2dc <_dtoa_r+0xb8c>
 800f2d6:	f01a 0f01 	tst.w	sl, #1
 800f2da:	d18d      	bne.n	800f1f8 <_dtoa_r+0xaa8>
 800f2dc:	462b      	mov	r3, r5
 800f2de:	461d      	mov	r5, r3
 800f2e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2e4:	2a30      	cmp	r2, #48	; 0x30
 800f2e6:	d0fa      	beq.n	800f2de <_dtoa_r+0xb8e>
 800f2e8:	e6d7      	b.n	800f09a <_dtoa_r+0x94a>
 800f2ea:	9a01      	ldr	r2, [sp, #4]
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d184      	bne.n	800f1fa <_dtoa_r+0xaaa>
 800f2f0:	9b00      	ldr	r3, [sp, #0]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	9300      	str	r3, [sp, #0]
 800f2f6:	2331      	movs	r3, #49	; 0x31
 800f2f8:	7013      	strb	r3, [r2, #0]
 800f2fa:	e6ce      	b.n	800f09a <_dtoa_r+0x94a>
 800f2fc:	4b09      	ldr	r3, [pc, #36]	; (800f324 <_dtoa_r+0xbd4>)
 800f2fe:	f7ff ba95 	b.w	800e82c <_dtoa_r+0xdc>
 800f302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f304:	2b00      	cmp	r3, #0
 800f306:	f47f aa6e 	bne.w	800e7e6 <_dtoa_r+0x96>
 800f30a:	4b07      	ldr	r3, [pc, #28]	; (800f328 <_dtoa_r+0xbd8>)
 800f30c:	f7ff ba8e 	b.w	800e82c <_dtoa_r+0xdc>
 800f310:	9b02      	ldr	r3, [sp, #8]
 800f312:	2b00      	cmp	r3, #0
 800f314:	dcae      	bgt.n	800f274 <_dtoa_r+0xb24>
 800f316:	9b06      	ldr	r3, [sp, #24]
 800f318:	2b02      	cmp	r3, #2
 800f31a:	f73f aea8 	bgt.w	800f06e <_dtoa_r+0x91e>
 800f31e:	e7a9      	b.n	800f274 <_dtoa_r+0xb24>
 800f320:	08012167 	.word	0x08012167
 800f324:	080120c4 	.word	0x080120c4
 800f328:	080120e8 	.word	0x080120e8

0800f32c <_localeconv_r>:
 800f32c:	4800      	ldr	r0, [pc, #0]	; (800f330 <_localeconv_r+0x4>)
 800f32e:	4770      	bx	lr
 800f330:	20000198 	.word	0x20000198

0800f334 <malloc>:
 800f334:	4b02      	ldr	r3, [pc, #8]	; (800f340 <malloc+0xc>)
 800f336:	4601      	mov	r1, r0
 800f338:	6818      	ldr	r0, [r3, #0]
 800f33a:	f000 bc09 	b.w	800fb50 <_malloc_r>
 800f33e:	bf00      	nop
 800f340:	20000044 	.word	0x20000044

0800f344 <_Balloc>:
 800f344:	b570      	push	{r4, r5, r6, lr}
 800f346:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f348:	4604      	mov	r4, r0
 800f34a:	460d      	mov	r5, r1
 800f34c:	b976      	cbnz	r6, 800f36c <_Balloc+0x28>
 800f34e:	2010      	movs	r0, #16
 800f350:	f7ff fff0 	bl	800f334 <malloc>
 800f354:	4602      	mov	r2, r0
 800f356:	6260      	str	r0, [r4, #36]	; 0x24
 800f358:	b920      	cbnz	r0, 800f364 <_Balloc+0x20>
 800f35a:	4b18      	ldr	r3, [pc, #96]	; (800f3bc <_Balloc+0x78>)
 800f35c:	4818      	ldr	r0, [pc, #96]	; (800f3c0 <_Balloc+0x7c>)
 800f35e:	2166      	movs	r1, #102	; 0x66
 800f360:	f000 fdd6 	bl	800ff10 <__assert_func>
 800f364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f368:	6006      	str	r6, [r0, #0]
 800f36a:	60c6      	str	r6, [r0, #12]
 800f36c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f36e:	68f3      	ldr	r3, [r6, #12]
 800f370:	b183      	cbz	r3, 800f394 <_Balloc+0x50>
 800f372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f374:	68db      	ldr	r3, [r3, #12]
 800f376:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f37a:	b9b8      	cbnz	r0, 800f3ac <_Balloc+0x68>
 800f37c:	2101      	movs	r1, #1
 800f37e:	fa01 f605 	lsl.w	r6, r1, r5
 800f382:	1d72      	adds	r2, r6, #5
 800f384:	0092      	lsls	r2, r2, #2
 800f386:	4620      	mov	r0, r4
 800f388:	f000 fb60 	bl	800fa4c <_calloc_r>
 800f38c:	b160      	cbz	r0, 800f3a8 <_Balloc+0x64>
 800f38e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f392:	e00e      	b.n	800f3b2 <_Balloc+0x6e>
 800f394:	2221      	movs	r2, #33	; 0x21
 800f396:	2104      	movs	r1, #4
 800f398:	4620      	mov	r0, r4
 800f39a:	f000 fb57 	bl	800fa4c <_calloc_r>
 800f39e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3a0:	60f0      	str	r0, [r6, #12]
 800f3a2:	68db      	ldr	r3, [r3, #12]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d1e4      	bne.n	800f372 <_Balloc+0x2e>
 800f3a8:	2000      	movs	r0, #0
 800f3aa:	bd70      	pop	{r4, r5, r6, pc}
 800f3ac:	6802      	ldr	r2, [r0, #0]
 800f3ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f3b8:	e7f7      	b.n	800f3aa <_Balloc+0x66>
 800f3ba:	bf00      	nop
 800f3bc:	080120f5 	.word	0x080120f5
 800f3c0:	08012178 	.word	0x08012178

0800f3c4 <_Bfree>:
 800f3c4:	b570      	push	{r4, r5, r6, lr}
 800f3c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f3c8:	4605      	mov	r5, r0
 800f3ca:	460c      	mov	r4, r1
 800f3cc:	b976      	cbnz	r6, 800f3ec <_Bfree+0x28>
 800f3ce:	2010      	movs	r0, #16
 800f3d0:	f7ff ffb0 	bl	800f334 <malloc>
 800f3d4:	4602      	mov	r2, r0
 800f3d6:	6268      	str	r0, [r5, #36]	; 0x24
 800f3d8:	b920      	cbnz	r0, 800f3e4 <_Bfree+0x20>
 800f3da:	4b09      	ldr	r3, [pc, #36]	; (800f400 <_Bfree+0x3c>)
 800f3dc:	4809      	ldr	r0, [pc, #36]	; (800f404 <_Bfree+0x40>)
 800f3de:	218a      	movs	r1, #138	; 0x8a
 800f3e0:	f000 fd96 	bl	800ff10 <__assert_func>
 800f3e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3e8:	6006      	str	r6, [r0, #0]
 800f3ea:	60c6      	str	r6, [r0, #12]
 800f3ec:	b13c      	cbz	r4, 800f3fe <_Bfree+0x3a>
 800f3ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f3f0:	6862      	ldr	r2, [r4, #4]
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3f8:	6021      	str	r1, [r4, #0]
 800f3fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3fe:	bd70      	pop	{r4, r5, r6, pc}
 800f400:	080120f5 	.word	0x080120f5
 800f404:	08012178 	.word	0x08012178

0800f408 <__multadd>:
 800f408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f40c:	690d      	ldr	r5, [r1, #16]
 800f40e:	4607      	mov	r7, r0
 800f410:	460c      	mov	r4, r1
 800f412:	461e      	mov	r6, r3
 800f414:	f101 0c14 	add.w	ip, r1, #20
 800f418:	2000      	movs	r0, #0
 800f41a:	f8dc 3000 	ldr.w	r3, [ip]
 800f41e:	b299      	uxth	r1, r3
 800f420:	fb02 6101 	mla	r1, r2, r1, r6
 800f424:	0c1e      	lsrs	r6, r3, #16
 800f426:	0c0b      	lsrs	r3, r1, #16
 800f428:	fb02 3306 	mla	r3, r2, r6, r3
 800f42c:	b289      	uxth	r1, r1
 800f42e:	3001      	adds	r0, #1
 800f430:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f434:	4285      	cmp	r5, r0
 800f436:	f84c 1b04 	str.w	r1, [ip], #4
 800f43a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f43e:	dcec      	bgt.n	800f41a <__multadd+0x12>
 800f440:	b30e      	cbz	r6, 800f486 <__multadd+0x7e>
 800f442:	68a3      	ldr	r3, [r4, #8]
 800f444:	42ab      	cmp	r3, r5
 800f446:	dc19      	bgt.n	800f47c <__multadd+0x74>
 800f448:	6861      	ldr	r1, [r4, #4]
 800f44a:	4638      	mov	r0, r7
 800f44c:	3101      	adds	r1, #1
 800f44e:	f7ff ff79 	bl	800f344 <_Balloc>
 800f452:	4680      	mov	r8, r0
 800f454:	b928      	cbnz	r0, 800f462 <__multadd+0x5a>
 800f456:	4602      	mov	r2, r0
 800f458:	4b0c      	ldr	r3, [pc, #48]	; (800f48c <__multadd+0x84>)
 800f45a:	480d      	ldr	r0, [pc, #52]	; (800f490 <__multadd+0x88>)
 800f45c:	21b5      	movs	r1, #181	; 0xb5
 800f45e:	f000 fd57 	bl	800ff10 <__assert_func>
 800f462:	6922      	ldr	r2, [r4, #16]
 800f464:	3202      	adds	r2, #2
 800f466:	f104 010c 	add.w	r1, r4, #12
 800f46a:	0092      	lsls	r2, r2, #2
 800f46c:	300c      	adds	r0, #12
 800f46e:	f7fe fc31 	bl	800dcd4 <memcpy>
 800f472:	4621      	mov	r1, r4
 800f474:	4638      	mov	r0, r7
 800f476:	f7ff ffa5 	bl	800f3c4 <_Bfree>
 800f47a:	4644      	mov	r4, r8
 800f47c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f480:	3501      	adds	r5, #1
 800f482:	615e      	str	r6, [r3, #20]
 800f484:	6125      	str	r5, [r4, #16]
 800f486:	4620      	mov	r0, r4
 800f488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f48c:	08012167 	.word	0x08012167
 800f490:	08012178 	.word	0x08012178

0800f494 <__hi0bits>:
 800f494:	0c03      	lsrs	r3, r0, #16
 800f496:	041b      	lsls	r3, r3, #16
 800f498:	b9d3      	cbnz	r3, 800f4d0 <__hi0bits+0x3c>
 800f49a:	0400      	lsls	r0, r0, #16
 800f49c:	2310      	movs	r3, #16
 800f49e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f4a2:	bf04      	itt	eq
 800f4a4:	0200      	lsleq	r0, r0, #8
 800f4a6:	3308      	addeq	r3, #8
 800f4a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f4ac:	bf04      	itt	eq
 800f4ae:	0100      	lsleq	r0, r0, #4
 800f4b0:	3304      	addeq	r3, #4
 800f4b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f4b6:	bf04      	itt	eq
 800f4b8:	0080      	lsleq	r0, r0, #2
 800f4ba:	3302      	addeq	r3, #2
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	db05      	blt.n	800f4cc <__hi0bits+0x38>
 800f4c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f4c4:	f103 0301 	add.w	r3, r3, #1
 800f4c8:	bf08      	it	eq
 800f4ca:	2320      	moveq	r3, #32
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	4770      	bx	lr
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	e7e4      	b.n	800f49e <__hi0bits+0xa>

0800f4d4 <__lo0bits>:
 800f4d4:	6803      	ldr	r3, [r0, #0]
 800f4d6:	f013 0207 	ands.w	r2, r3, #7
 800f4da:	4601      	mov	r1, r0
 800f4dc:	d00b      	beq.n	800f4f6 <__lo0bits+0x22>
 800f4de:	07da      	lsls	r2, r3, #31
 800f4e0:	d423      	bmi.n	800f52a <__lo0bits+0x56>
 800f4e2:	0798      	lsls	r0, r3, #30
 800f4e4:	bf49      	itett	mi
 800f4e6:	085b      	lsrmi	r3, r3, #1
 800f4e8:	089b      	lsrpl	r3, r3, #2
 800f4ea:	2001      	movmi	r0, #1
 800f4ec:	600b      	strmi	r3, [r1, #0]
 800f4ee:	bf5c      	itt	pl
 800f4f0:	600b      	strpl	r3, [r1, #0]
 800f4f2:	2002      	movpl	r0, #2
 800f4f4:	4770      	bx	lr
 800f4f6:	b298      	uxth	r0, r3
 800f4f8:	b9a8      	cbnz	r0, 800f526 <__lo0bits+0x52>
 800f4fa:	0c1b      	lsrs	r3, r3, #16
 800f4fc:	2010      	movs	r0, #16
 800f4fe:	b2da      	uxtb	r2, r3
 800f500:	b90a      	cbnz	r2, 800f506 <__lo0bits+0x32>
 800f502:	3008      	adds	r0, #8
 800f504:	0a1b      	lsrs	r3, r3, #8
 800f506:	071a      	lsls	r2, r3, #28
 800f508:	bf04      	itt	eq
 800f50a:	091b      	lsreq	r3, r3, #4
 800f50c:	3004      	addeq	r0, #4
 800f50e:	079a      	lsls	r2, r3, #30
 800f510:	bf04      	itt	eq
 800f512:	089b      	lsreq	r3, r3, #2
 800f514:	3002      	addeq	r0, #2
 800f516:	07da      	lsls	r2, r3, #31
 800f518:	d403      	bmi.n	800f522 <__lo0bits+0x4e>
 800f51a:	085b      	lsrs	r3, r3, #1
 800f51c:	f100 0001 	add.w	r0, r0, #1
 800f520:	d005      	beq.n	800f52e <__lo0bits+0x5a>
 800f522:	600b      	str	r3, [r1, #0]
 800f524:	4770      	bx	lr
 800f526:	4610      	mov	r0, r2
 800f528:	e7e9      	b.n	800f4fe <__lo0bits+0x2a>
 800f52a:	2000      	movs	r0, #0
 800f52c:	4770      	bx	lr
 800f52e:	2020      	movs	r0, #32
 800f530:	4770      	bx	lr
	...

0800f534 <__i2b>:
 800f534:	b510      	push	{r4, lr}
 800f536:	460c      	mov	r4, r1
 800f538:	2101      	movs	r1, #1
 800f53a:	f7ff ff03 	bl	800f344 <_Balloc>
 800f53e:	4602      	mov	r2, r0
 800f540:	b928      	cbnz	r0, 800f54e <__i2b+0x1a>
 800f542:	4b05      	ldr	r3, [pc, #20]	; (800f558 <__i2b+0x24>)
 800f544:	4805      	ldr	r0, [pc, #20]	; (800f55c <__i2b+0x28>)
 800f546:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f54a:	f000 fce1 	bl	800ff10 <__assert_func>
 800f54e:	2301      	movs	r3, #1
 800f550:	6144      	str	r4, [r0, #20]
 800f552:	6103      	str	r3, [r0, #16]
 800f554:	bd10      	pop	{r4, pc}
 800f556:	bf00      	nop
 800f558:	08012167 	.word	0x08012167
 800f55c:	08012178 	.word	0x08012178

0800f560 <__multiply>:
 800f560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f564:	4691      	mov	r9, r2
 800f566:	690a      	ldr	r2, [r1, #16]
 800f568:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f56c:	429a      	cmp	r2, r3
 800f56e:	bfb8      	it	lt
 800f570:	460b      	movlt	r3, r1
 800f572:	460c      	mov	r4, r1
 800f574:	bfbc      	itt	lt
 800f576:	464c      	movlt	r4, r9
 800f578:	4699      	movlt	r9, r3
 800f57a:	6927      	ldr	r7, [r4, #16]
 800f57c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f580:	68a3      	ldr	r3, [r4, #8]
 800f582:	6861      	ldr	r1, [r4, #4]
 800f584:	eb07 060a 	add.w	r6, r7, sl
 800f588:	42b3      	cmp	r3, r6
 800f58a:	b085      	sub	sp, #20
 800f58c:	bfb8      	it	lt
 800f58e:	3101      	addlt	r1, #1
 800f590:	f7ff fed8 	bl	800f344 <_Balloc>
 800f594:	b930      	cbnz	r0, 800f5a4 <__multiply+0x44>
 800f596:	4602      	mov	r2, r0
 800f598:	4b44      	ldr	r3, [pc, #272]	; (800f6ac <__multiply+0x14c>)
 800f59a:	4845      	ldr	r0, [pc, #276]	; (800f6b0 <__multiply+0x150>)
 800f59c:	f240 115d 	movw	r1, #349	; 0x15d
 800f5a0:	f000 fcb6 	bl	800ff10 <__assert_func>
 800f5a4:	f100 0514 	add.w	r5, r0, #20
 800f5a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f5ac:	462b      	mov	r3, r5
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	4543      	cmp	r3, r8
 800f5b2:	d321      	bcc.n	800f5f8 <__multiply+0x98>
 800f5b4:	f104 0314 	add.w	r3, r4, #20
 800f5b8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f5bc:	f109 0314 	add.w	r3, r9, #20
 800f5c0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f5c4:	9202      	str	r2, [sp, #8]
 800f5c6:	1b3a      	subs	r2, r7, r4
 800f5c8:	3a15      	subs	r2, #21
 800f5ca:	f022 0203 	bic.w	r2, r2, #3
 800f5ce:	3204      	adds	r2, #4
 800f5d0:	f104 0115 	add.w	r1, r4, #21
 800f5d4:	428f      	cmp	r7, r1
 800f5d6:	bf38      	it	cc
 800f5d8:	2204      	movcc	r2, #4
 800f5da:	9201      	str	r2, [sp, #4]
 800f5dc:	9a02      	ldr	r2, [sp, #8]
 800f5de:	9303      	str	r3, [sp, #12]
 800f5e0:	429a      	cmp	r2, r3
 800f5e2:	d80c      	bhi.n	800f5fe <__multiply+0x9e>
 800f5e4:	2e00      	cmp	r6, #0
 800f5e6:	dd03      	ble.n	800f5f0 <__multiply+0x90>
 800f5e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d05a      	beq.n	800f6a6 <__multiply+0x146>
 800f5f0:	6106      	str	r6, [r0, #16]
 800f5f2:	b005      	add	sp, #20
 800f5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f8:	f843 2b04 	str.w	r2, [r3], #4
 800f5fc:	e7d8      	b.n	800f5b0 <__multiply+0x50>
 800f5fe:	f8b3 a000 	ldrh.w	sl, [r3]
 800f602:	f1ba 0f00 	cmp.w	sl, #0
 800f606:	d024      	beq.n	800f652 <__multiply+0xf2>
 800f608:	f104 0e14 	add.w	lr, r4, #20
 800f60c:	46a9      	mov	r9, r5
 800f60e:	f04f 0c00 	mov.w	ip, #0
 800f612:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f616:	f8d9 1000 	ldr.w	r1, [r9]
 800f61a:	fa1f fb82 	uxth.w	fp, r2
 800f61e:	b289      	uxth	r1, r1
 800f620:	fb0a 110b 	mla	r1, sl, fp, r1
 800f624:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f628:	f8d9 2000 	ldr.w	r2, [r9]
 800f62c:	4461      	add	r1, ip
 800f62e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f632:	fb0a c20b 	mla	r2, sl, fp, ip
 800f636:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f63a:	b289      	uxth	r1, r1
 800f63c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f640:	4577      	cmp	r7, lr
 800f642:	f849 1b04 	str.w	r1, [r9], #4
 800f646:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f64a:	d8e2      	bhi.n	800f612 <__multiply+0xb2>
 800f64c:	9a01      	ldr	r2, [sp, #4]
 800f64e:	f845 c002 	str.w	ip, [r5, r2]
 800f652:	9a03      	ldr	r2, [sp, #12]
 800f654:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f658:	3304      	adds	r3, #4
 800f65a:	f1b9 0f00 	cmp.w	r9, #0
 800f65e:	d020      	beq.n	800f6a2 <__multiply+0x142>
 800f660:	6829      	ldr	r1, [r5, #0]
 800f662:	f104 0c14 	add.w	ip, r4, #20
 800f666:	46ae      	mov	lr, r5
 800f668:	f04f 0a00 	mov.w	sl, #0
 800f66c:	f8bc b000 	ldrh.w	fp, [ip]
 800f670:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f674:	fb09 220b 	mla	r2, r9, fp, r2
 800f678:	4492      	add	sl, r2
 800f67a:	b289      	uxth	r1, r1
 800f67c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f680:	f84e 1b04 	str.w	r1, [lr], #4
 800f684:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f688:	f8be 1000 	ldrh.w	r1, [lr]
 800f68c:	0c12      	lsrs	r2, r2, #16
 800f68e:	fb09 1102 	mla	r1, r9, r2, r1
 800f692:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f696:	4567      	cmp	r7, ip
 800f698:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f69c:	d8e6      	bhi.n	800f66c <__multiply+0x10c>
 800f69e:	9a01      	ldr	r2, [sp, #4]
 800f6a0:	50a9      	str	r1, [r5, r2]
 800f6a2:	3504      	adds	r5, #4
 800f6a4:	e79a      	b.n	800f5dc <__multiply+0x7c>
 800f6a6:	3e01      	subs	r6, #1
 800f6a8:	e79c      	b.n	800f5e4 <__multiply+0x84>
 800f6aa:	bf00      	nop
 800f6ac:	08012167 	.word	0x08012167
 800f6b0:	08012178 	.word	0x08012178

0800f6b4 <__pow5mult>:
 800f6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6b8:	4615      	mov	r5, r2
 800f6ba:	f012 0203 	ands.w	r2, r2, #3
 800f6be:	4606      	mov	r6, r0
 800f6c0:	460f      	mov	r7, r1
 800f6c2:	d007      	beq.n	800f6d4 <__pow5mult+0x20>
 800f6c4:	4c25      	ldr	r4, [pc, #148]	; (800f75c <__pow5mult+0xa8>)
 800f6c6:	3a01      	subs	r2, #1
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6ce:	f7ff fe9b 	bl	800f408 <__multadd>
 800f6d2:	4607      	mov	r7, r0
 800f6d4:	10ad      	asrs	r5, r5, #2
 800f6d6:	d03d      	beq.n	800f754 <__pow5mult+0xa0>
 800f6d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f6da:	b97c      	cbnz	r4, 800f6fc <__pow5mult+0x48>
 800f6dc:	2010      	movs	r0, #16
 800f6de:	f7ff fe29 	bl	800f334 <malloc>
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	6270      	str	r0, [r6, #36]	; 0x24
 800f6e6:	b928      	cbnz	r0, 800f6f4 <__pow5mult+0x40>
 800f6e8:	4b1d      	ldr	r3, [pc, #116]	; (800f760 <__pow5mult+0xac>)
 800f6ea:	481e      	ldr	r0, [pc, #120]	; (800f764 <__pow5mult+0xb0>)
 800f6ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f6f0:	f000 fc0e 	bl	800ff10 <__assert_func>
 800f6f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6f8:	6004      	str	r4, [r0, #0]
 800f6fa:	60c4      	str	r4, [r0, #12]
 800f6fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f700:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f704:	b94c      	cbnz	r4, 800f71a <__pow5mult+0x66>
 800f706:	f240 2171 	movw	r1, #625	; 0x271
 800f70a:	4630      	mov	r0, r6
 800f70c:	f7ff ff12 	bl	800f534 <__i2b>
 800f710:	2300      	movs	r3, #0
 800f712:	f8c8 0008 	str.w	r0, [r8, #8]
 800f716:	4604      	mov	r4, r0
 800f718:	6003      	str	r3, [r0, #0]
 800f71a:	f04f 0900 	mov.w	r9, #0
 800f71e:	07eb      	lsls	r3, r5, #31
 800f720:	d50a      	bpl.n	800f738 <__pow5mult+0x84>
 800f722:	4639      	mov	r1, r7
 800f724:	4622      	mov	r2, r4
 800f726:	4630      	mov	r0, r6
 800f728:	f7ff ff1a 	bl	800f560 <__multiply>
 800f72c:	4639      	mov	r1, r7
 800f72e:	4680      	mov	r8, r0
 800f730:	4630      	mov	r0, r6
 800f732:	f7ff fe47 	bl	800f3c4 <_Bfree>
 800f736:	4647      	mov	r7, r8
 800f738:	106d      	asrs	r5, r5, #1
 800f73a:	d00b      	beq.n	800f754 <__pow5mult+0xa0>
 800f73c:	6820      	ldr	r0, [r4, #0]
 800f73e:	b938      	cbnz	r0, 800f750 <__pow5mult+0x9c>
 800f740:	4622      	mov	r2, r4
 800f742:	4621      	mov	r1, r4
 800f744:	4630      	mov	r0, r6
 800f746:	f7ff ff0b 	bl	800f560 <__multiply>
 800f74a:	6020      	str	r0, [r4, #0]
 800f74c:	f8c0 9000 	str.w	r9, [r0]
 800f750:	4604      	mov	r4, r0
 800f752:	e7e4      	b.n	800f71e <__pow5mult+0x6a>
 800f754:	4638      	mov	r0, r7
 800f756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f75a:	bf00      	nop
 800f75c:	080122c8 	.word	0x080122c8
 800f760:	080120f5 	.word	0x080120f5
 800f764:	08012178 	.word	0x08012178

0800f768 <__lshift>:
 800f768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f76c:	460c      	mov	r4, r1
 800f76e:	6849      	ldr	r1, [r1, #4]
 800f770:	6923      	ldr	r3, [r4, #16]
 800f772:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f776:	68a3      	ldr	r3, [r4, #8]
 800f778:	4607      	mov	r7, r0
 800f77a:	4691      	mov	r9, r2
 800f77c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f780:	f108 0601 	add.w	r6, r8, #1
 800f784:	42b3      	cmp	r3, r6
 800f786:	db0b      	blt.n	800f7a0 <__lshift+0x38>
 800f788:	4638      	mov	r0, r7
 800f78a:	f7ff fddb 	bl	800f344 <_Balloc>
 800f78e:	4605      	mov	r5, r0
 800f790:	b948      	cbnz	r0, 800f7a6 <__lshift+0x3e>
 800f792:	4602      	mov	r2, r0
 800f794:	4b2a      	ldr	r3, [pc, #168]	; (800f840 <__lshift+0xd8>)
 800f796:	482b      	ldr	r0, [pc, #172]	; (800f844 <__lshift+0xdc>)
 800f798:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f79c:	f000 fbb8 	bl	800ff10 <__assert_func>
 800f7a0:	3101      	adds	r1, #1
 800f7a2:	005b      	lsls	r3, r3, #1
 800f7a4:	e7ee      	b.n	800f784 <__lshift+0x1c>
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	f100 0114 	add.w	r1, r0, #20
 800f7ac:	f100 0210 	add.w	r2, r0, #16
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	4553      	cmp	r3, sl
 800f7b4:	db37      	blt.n	800f826 <__lshift+0xbe>
 800f7b6:	6920      	ldr	r0, [r4, #16]
 800f7b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7bc:	f104 0314 	add.w	r3, r4, #20
 800f7c0:	f019 091f 	ands.w	r9, r9, #31
 800f7c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f7cc:	d02f      	beq.n	800f82e <__lshift+0xc6>
 800f7ce:	f1c9 0e20 	rsb	lr, r9, #32
 800f7d2:	468a      	mov	sl, r1
 800f7d4:	f04f 0c00 	mov.w	ip, #0
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	fa02 f209 	lsl.w	r2, r2, r9
 800f7de:	ea42 020c 	orr.w	r2, r2, ip
 800f7e2:	f84a 2b04 	str.w	r2, [sl], #4
 800f7e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7ea:	4298      	cmp	r0, r3
 800f7ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f7f0:	d8f2      	bhi.n	800f7d8 <__lshift+0x70>
 800f7f2:	1b03      	subs	r3, r0, r4
 800f7f4:	3b15      	subs	r3, #21
 800f7f6:	f023 0303 	bic.w	r3, r3, #3
 800f7fa:	3304      	adds	r3, #4
 800f7fc:	f104 0215 	add.w	r2, r4, #21
 800f800:	4290      	cmp	r0, r2
 800f802:	bf38      	it	cc
 800f804:	2304      	movcc	r3, #4
 800f806:	f841 c003 	str.w	ip, [r1, r3]
 800f80a:	f1bc 0f00 	cmp.w	ip, #0
 800f80e:	d001      	beq.n	800f814 <__lshift+0xac>
 800f810:	f108 0602 	add.w	r6, r8, #2
 800f814:	3e01      	subs	r6, #1
 800f816:	4638      	mov	r0, r7
 800f818:	612e      	str	r6, [r5, #16]
 800f81a:	4621      	mov	r1, r4
 800f81c:	f7ff fdd2 	bl	800f3c4 <_Bfree>
 800f820:	4628      	mov	r0, r5
 800f822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f826:	f842 0f04 	str.w	r0, [r2, #4]!
 800f82a:	3301      	adds	r3, #1
 800f82c:	e7c1      	b.n	800f7b2 <__lshift+0x4a>
 800f82e:	3904      	subs	r1, #4
 800f830:	f853 2b04 	ldr.w	r2, [r3], #4
 800f834:	f841 2f04 	str.w	r2, [r1, #4]!
 800f838:	4298      	cmp	r0, r3
 800f83a:	d8f9      	bhi.n	800f830 <__lshift+0xc8>
 800f83c:	e7ea      	b.n	800f814 <__lshift+0xac>
 800f83e:	bf00      	nop
 800f840:	08012167 	.word	0x08012167
 800f844:	08012178 	.word	0x08012178

0800f848 <__mcmp>:
 800f848:	b530      	push	{r4, r5, lr}
 800f84a:	6902      	ldr	r2, [r0, #16]
 800f84c:	690c      	ldr	r4, [r1, #16]
 800f84e:	1b12      	subs	r2, r2, r4
 800f850:	d10e      	bne.n	800f870 <__mcmp+0x28>
 800f852:	f100 0314 	add.w	r3, r0, #20
 800f856:	3114      	adds	r1, #20
 800f858:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f85c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f860:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f864:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f868:	42a5      	cmp	r5, r4
 800f86a:	d003      	beq.n	800f874 <__mcmp+0x2c>
 800f86c:	d305      	bcc.n	800f87a <__mcmp+0x32>
 800f86e:	2201      	movs	r2, #1
 800f870:	4610      	mov	r0, r2
 800f872:	bd30      	pop	{r4, r5, pc}
 800f874:	4283      	cmp	r3, r0
 800f876:	d3f3      	bcc.n	800f860 <__mcmp+0x18>
 800f878:	e7fa      	b.n	800f870 <__mcmp+0x28>
 800f87a:	f04f 32ff 	mov.w	r2, #4294967295
 800f87e:	e7f7      	b.n	800f870 <__mcmp+0x28>

0800f880 <__mdiff>:
 800f880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f884:	460c      	mov	r4, r1
 800f886:	4606      	mov	r6, r0
 800f888:	4611      	mov	r1, r2
 800f88a:	4620      	mov	r0, r4
 800f88c:	4690      	mov	r8, r2
 800f88e:	f7ff ffdb 	bl	800f848 <__mcmp>
 800f892:	1e05      	subs	r5, r0, #0
 800f894:	d110      	bne.n	800f8b8 <__mdiff+0x38>
 800f896:	4629      	mov	r1, r5
 800f898:	4630      	mov	r0, r6
 800f89a:	f7ff fd53 	bl	800f344 <_Balloc>
 800f89e:	b930      	cbnz	r0, 800f8ae <__mdiff+0x2e>
 800f8a0:	4b3a      	ldr	r3, [pc, #232]	; (800f98c <__mdiff+0x10c>)
 800f8a2:	4602      	mov	r2, r0
 800f8a4:	f240 2132 	movw	r1, #562	; 0x232
 800f8a8:	4839      	ldr	r0, [pc, #228]	; (800f990 <__mdiff+0x110>)
 800f8aa:	f000 fb31 	bl	800ff10 <__assert_func>
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f8b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b8:	bfa4      	itt	ge
 800f8ba:	4643      	movge	r3, r8
 800f8bc:	46a0      	movge	r8, r4
 800f8be:	4630      	mov	r0, r6
 800f8c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f8c4:	bfa6      	itte	ge
 800f8c6:	461c      	movge	r4, r3
 800f8c8:	2500      	movge	r5, #0
 800f8ca:	2501      	movlt	r5, #1
 800f8cc:	f7ff fd3a 	bl	800f344 <_Balloc>
 800f8d0:	b920      	cbnz	r0, 800f8dc <__mdiff+0x5c>
 800f8d2:	4b2e      	ldr	r3, [pc, #184]	; (800f98c <__mdiff+0x10c>)
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f8da:	e7e5      	b.n	800f8a8 <__mdiff+0x28>
 800f8dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f8e0:	6926      	ldr	r6, [r4, #16]
 800f8e2:	60c5      	str	r5, [r0, #12]
 800f8e4:	f104 0914 	add.w	r9, r4, #20
 800f8e8:	f108 0514 	add.w	r5, r8, #20
 800f8ec:	f100 0e14 	add.w	lr, r0, #20
 800f8f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f8f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f8f8:	f108 0210 	add.w	r2, r8, #16
 800f8fc:	46f2      	mov	sl, lr
 800f8fe:	2100      	movs	r1, #0
 800f900:	f859 3b04 	ldr.w	r3, [r9], #4
 800f904:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f908:	fa1f f883 	uxth.w	r8, r3
 800f90c:	fa11 f18b 	uxtah	r1, r1, fp
 800f910:	0c1b      	lsrs	r3, r3, #16
 800f912:	eba1 0808 	sub.w	r8, r1, r8
 800f916:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f91a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f91e:	fa1f f888 	uxth.w	r8, r8
 800f922:	1419      	asrs	r1, r3, #16
 800f924:	454e      	cmp	r6, r9
 800f926:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f92a:	f84a 3b04 	str.w	r3, [sl], #4
 800f92e:	d8e7      	bhi.n	800f900 <__mdiff+0x80>
 800f930:	1b33      	subs	r3, r6, r4
 800f932:	3b15      	subs	r3, #21
 800f934:	f023 0303 	bic.w	r3, r3, #3
 800f938:	3304      	adds	r3, #4
 800f93a:	3415      	adds	r4, #21
 800f93c:	42a6      	cmp	r6, r4
 800f93e:	bf38      	it	cc
 800f940:	2304      	movcc	r3, #4
 800f942:	441d      	add	r5, r3
 800f944:	4473      	add	r3, lr
 800f946:	469e      	mov	lr, r3
 800f948:	462e      	mov	r6, r5
 800f94a:	4566      	cmp	r6, ip
 800f94c:	d30e      	bcc.n	800f96c <__mdiff+0xec>
 800f94e:	f10c 0203 	add.w	r2, ip, #3
 800f952:	1b52      	subs	r2, r2, r5
 800f954:	f022 0203 	bic.w	r2, r2, #3
 800f958:	3d03      	subs	r5, #3
 800f95a:	45ac      	cmp	ip, r5
 800f95c:	bf38      	it	cc
 800f95e:	2200      	movcc	r2, #0
 800f960:	441a      	add	r2, r3
 800f962:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f966:	b17b      	cbz	r3, 800f988 <__mdiff+0x108>
 800f968:	6107      	str	r7, [r0, #16]
 800f96a:	e7a3      	b.n	800f8b4 <__mdiff+0x34>
 800f96c:	f856 8b04 	ldr.w	r8, [r6], #4
 800f970:	fa11 f288 	uxtah	r2, r1, r8
 800f974:	1414      	asrs	r4, r2, #16
 800f976:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f97a:	b292      	uxth	r2, r2
 800f97c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f980:	f84e 2b04 	str.w	r2, [lr], #4
 800f984:	1421      	asrs	r1, r4, #16
 800f986:	e7e0      	b.n	800f94a <__mdiff+0xca>
 800f988:	3f01      	subs	r7, #1
 800f98a:	e7ea      	b.n	800f962 <__mdiff+0xe2>
 800f98c:	08012167 	.word	0x08012167
 800f990:	08012178 	.word	0x08012178

0800f994 <__d2b>:
 800f994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f998:	4689      	mov	r9, r1
 800f99a:	2101      	movs	r1, #1
 800f99c:	ec57 6b10 	vmov	r6, r7, d0
 800f9a0:	4690      	mov	r8, r2
 800f9a2:	f7ff fccf 	bl	800f344 <_Balloc>
 800f9a6:	4604      	mov	r4, r0
 800f9a8:	b930      	cbnz	r0, 800f9b8 <__d2b+0x24>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	4b25      	ldr	r3, [pc, #148]	; (800fa44 <__d2b+0xb0>)
 800f9ae:	4826      	ldr	r0, [pc, #152]	; (800fa48 <__d2b+0xb4>)
 800f9b0:	f240 310a 	movw	r1, #778	; 0x30a
 800f9b4:	f000 faac 	bl	800ff10 <__assert_func>
 800f9b8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f9bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f9c0:	bb35      	cbnz	r5, 800fa10 <__d2b+0x7c>
 800f9c2:	2e00      	cmp	r6, #0
 800f9c4:	9301      	str	r3, [sp, #4]
 800f9c6:	d028      	beq.n	800fa1a <__d2b+0x86>
 800f9c8:	4668      	mov	r0, sp
 800f9ca:	9600      	str	r6, [sp, #0]
 800f9cc:	f7ff fd82 	bl	800f4d4 <__lo0bits>
 800f9d0:	9900      	ldr	r1, [sp, #0]
 800f9d2:	b300      	cbz	r0, 800fa16 <__d2b+0x82>
 800f9d4:	9a01      	ldr	r2, [sp, #4]
 800f9d6:	f1c0 0320 	rsb	r3, r0, #32
 800f9da:	fa02 f303 	lsl.w	r3, r2, r3
 800f9de:	430b      	orrs	r3, r1
 800f9e0:	40c2      	lsrs	r2, r0
 800f9e2:	6163      	str	r3, [r4, #20]
 800f9e4:	9201      	str	r2, [sp, #4]
 800f9e6:	9b01      	ldr	r3, [sp, #4]
 800f9e8:	61a3      	str	r3, [r4, #24]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	bf14      	ite	ne
 800f9ee:	2202      	movne	r2, #2
 800f9f0:	2201      	moveq	r2, #1
 800f9f2:	6122      	str	r2, [r4, #16]
 800f9f4:	b1d5      	cbz	r5, 800fa2c <__d2b+0x98>
 800f9f6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f9fa:	4405      	add	r5, r0
 800f9fc:	f8c9 5000 	str.w	r5, [r9]
 800fa00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fa04:	f8c8 0000 	str.w	r0, [r8]
 800fa08:	4620      	mov	r0, r4
 800fa0a:	b003      	add	sp, #12
 800fa0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa14:	e7d5      	b.n	800f9c2 <__d2b+0x2e>
 800fa16:	6161      	str	r1, [r4, #20]
 800fa18:	e7e5      	b.n	800f9e6 <__d2b+0x52>
 800fa1a:	a801      	add	r0, sp, #4
 800fa1c:	f7ff fd5a 	bl	800f4d4 <__lo0bits>
 800fa20:	9b01      	ldr	r3, [sp, #4]
 800fa22:	6163      	str	r3, [r4, #20]
 800fa24:	2201      	movs	r2, #1
 800fa26:	6122      	str	r2, [r4, #16]
 800fa28:	3020      	adds	r0, #32
 800fa2a:	e7e3      	b.n	800f9f4 <__d2b+0x60>
 800fa2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fa30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fa34:	f8c9 0000 	str.w	r0, [r9]
 800fa38:	6918      	ldr	r0, [r3, #16]
 800fa3a:	f7ff fd2b 	bl	800f494 <__hi0bits>
 800fa3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fa42:	e7df      	b.n	800fa04 <__d2b+0x70>
 800fa44:	08012167 	.word	0x08012167
 800fa48:	08012178 	.word	0x08012178

0800fa4c <_calloc_r>:
 800fa4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa4e:	fba1 2402 	umull	r2, r4, r1, r2
 800fa52:	b94c      	cbnz	r4, 800fa68 <_calloc_r+0x1c>
 800fa54:	4611      	mov	r1, r2
 800fa56:	9201      	str	r2, [sp, #4]
 800fa58:	f000 f87a 	bl	800fb50 <_malloc_r>
 800fa5c:	9a01      	ldr	r2, [sp, #4]
 800fa5e:	4605      	mov	r5, r0
 800fa60:	b930      	cbnz	r0, 800fa70 <_calloc_r+0x24>
 800fa62:	4628      	mov	r0, r5
 800fa64:	b003      	add	sp, #12
 800fa66:	bd30      	pop	{r4, r5, pc}
 800fa68:	220c      	movs	r2, #12
 800fa6a:	6002      	str	r2, [r0, #0]
 800fa6c:	2500      	movs	r5, #0
 800fa6e:	e7f8      	b.n	800fa62 <_calloc_r+0x16>
 800fa70:	4621      	mov	r1, r4
 800fa72:	f7fe f93d 	bl	800dcf0 <memset>
 800fa76:	e7f4      	b.n	800fa62 <_calloc_r+0x16>

0800fa78 <_free_r>:
 800fa78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa7a:	2900      	cmp	r1, #0
 800fa7c:	d044      	beq.n	800fb08 <_free_r+0x90>
 800fa7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa82:	9001      	str	r0, [sp, #4]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	f1a1 0404 	sub.w	r4, r1, #4
 800fa8a:	bfb8      	it	lt
 800fa8c:	18e4      	addlt	r4, r4, r3
 800fa8e:	f000 fa9b 	bl	800ffc8 <__malloc_lock>
 800fa92:	4a1e      	ldr	r2, [pc, #120]	; (800fb0c <_free_r+0x94>)
 800fa94:	9801      	ldr	r0, [sp, #4]
 800fa96:	6813      	ldr	r3, [r2, #0]
 800fa98:	b933      	cbnz	r3, 800faa8 <_free_r+0x30>
 800fa9a:	6063      	str	r3, [r4, #4]
 800fa9c:	6014      	str	r4, [r2, #0]
 800fa9e:	b003      	add	sp, #12
 800faa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800faa4:	f000 ba96 	b.w	800ffd4 <__malloc_unlock>
 800faa8:	42a3      	cmp	r3, r4
 800faaa:	d908      	bls.n	800fabe <_free_r+0x46>
 800faac:	6825      	ldr	r5, [r4, #0]
 800faae:	1961      	adds	r1, r4, r5
 800fab0:	428b      	cmp	r3, r1
 800fab2:	bf01      	itttt	eq
 800fab4:	6819      	ldreq	r1, [r3, #0]
 800fab6:	685b      	ldreq	r3, [r3, #4]
 800fab8:	1949      	addeq	r1, r1, r5
 800faba:	6021      	streq	r1, [r4, #0]
 800fabc:	e7ed      	b.n	800fa9a <_free_r+0x22>
 800fabe:	461a      	mov	r2, r3
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	b10b      	cbz	r3, 800fac8 <_free_r+0x50>
 800fac4:	42a3      	cmp	r3, r4
 800fac6:	d9fa      	bls.n	800fabe <_free_r+0x46>
 800fac8:	6811      	ldr	r1, [r2, #0]
 800faca:	1855      	adds	r5, r2, r1
 800facc:	42a5      	cmp	r5, r4
 800face:	d10b      	bne.n	800fae8 <_free_r+0x70>
 800fad0:	6824      	ldr	r4, [r4, #0]
 800fad2:	4421      	add	r1, r4
 800fad4:	1854      	adds	r4, r2, r1
 800fad6:	42a3      	cmp	r3, r4
 800fad8:	6011      	str	r1, [r2, #0]
 800fada:	d1e0      	bne.n	800fa9e <_free_r+0x26>
 800fadc:	681c      	ldr	r4, [r3, #0]
 800fade:	685b      	ldr	r3, [r3, #4]
 800fae0:	6053      	str	r3, [r2, #4]
 800fae2:	4421      	add	r1, r4
 800fae4:	6011      	str	r1, [r2, #0]
 800fae6:	e7da      	b.n	800fa9e <_free_r+0x26>
 800fae8:	d902      	bls.n	800faf0 <_free_r+0x78>
 800faea:	230c      	movs	r3, #12
 800faec:	6003      	str	r3, [r0, #0]
 800faee:	e7d6      	b.n	800fa9e <_free_r+0x26>
 800faf0:	6825      	ldr	r5, [r4, #0]
 800faf2:	1961      	adds	r1, r4, r5
 800faf4:	428b      	cmp	r3, r1
 800faf6:	bf04      	itt	eq
 800faf8:	6819      	ldreq	r1, [r3, #0]
 800fafa:	685b      	ldreq	r3, [r3, #4]
 800fafc:	6063      	str	r3, [r4, #4]
 800fafe:	bf04      	itt	eq
 800fb00:	1949      	addeq	r1, r1, r5
 800fb02:	6021      	streq	r1, [r4, #0]
 800fb04:	6054      	str	r4, [r2, #4]
 800fb06:	e7ca      	b.n	800fa9e <_free_r+0x26>
 800fb08:	b003      	add	sp, #12
 800fb0a:	bd30      	pop	{r4, r5, pc}
 800fb0c:	20000cb8 	.word	0x20000cb8

0800fb10 <sbrk_aligned>:
 800fb10:	b570      	push	{r4, r5, r6, lr}
 800fb12:	4e0e      	ldr	r6, [pc, #56]	; (800fb4c <sbrk_aligned+0x3c>)
 800fb14:	460c      	mov	r4, r1
 800fb16:	6831      	ldr	r1, [r6, #0]
 800fb18:	4605      	mov	r5, r0
 800fb1a:	b911      	cbnz	r1, 800fb22 <sbrk_aligned+0x12>
 800fb1c:	f000 f9e8 	bl	800fef0 <_sbrk_r>
 800fb20:	6030      	str	r0, [r6, #0]
 800fb22:	4621      	mov	r1, r4
 800fb24:	4628      	mov	r0, r5
 800fb26:	f000 f9e3 	bl	800fef0 <_sbrk_r>
 800fb2a:	1c43      	adds	r3, r0, #1
 800fb2c:	d00a      	beq.n	800fb44 <sbrk_aligned+0x34>
 800fb2e:	1cc4      	adds	r4, r0, #3
 800fb30:	f024 0403 	bic.w	r4, r4, #3
 800fb34:	42a0      	cmp	r0, r4
 800fb36:	d007      	beq.n	800fb48 <sbrk_aligned+0x38>
 800fb38:	1a21      	subs	r1, r4, r0
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	f000 f9d8 	bl	800fef0 <_sbrk_r>
 800fb40:	3001      	adds	r0, #1
 800fb42:	d101      	bne.n	800fb48 <sbrk_aligned+0x38>
 800fb44:	f04f 34ff 	mov.w	r4, #4294967295
 800fb48:	4620      	mov	r0, r4
 800fb4a:	bd70      	pop	{r4, r5, r6, pc}
 800fb4c:	20000cbc 	.word	0x20000cbc

0800fb50 <_malloc_r>:
 800fb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb54:	1ccd      	adds	r5, r1, #3
 800fb56:	f025 0503 	bic.w	r5, r5, #3
 800fb5a:	3508      	adds	r5, #8
 800fb5c:	2d0c      	cmp	r5, #12
 800fb5e:	bf38      	it	cc
 800fb60:	250c      	movcc	r5, #12
 800fb62:	2d00      	cmp	r5, #0
 800fb64:	4607      	mov	r7, r0
 800fb66:	db01      	blt.n	800fb6c <_malloc_r+0x1c>
 800fb68:	42a9      	cmp	r1, r5
 800fb6a:	d905      	bls.n	800fb78 <_malloc_r+0x28>
 800fb6c:	230c      	movs	r3, #12
 800fb6e:	603b      	str	r3, [r7, #0]
 800fb70:	2600      	movs	r6, #0
 800fb72:	4630      	mov	r0, r6
 800fb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb78:	4e2e      	ldr	r6, [pc, #184]	; (800fc34 <_malloc_r+0xe4>)
 800fb7a:	f000 fa25 	bl	800ffc8 <__malloc_lock>
 800fb7e:	6833      	ldr	r3, [r6, #0]
 800fb80:	461c      	mov	r4, r3
 800fb82:	bb34      	cbnz	r4, 800fbd2 <_malloc_r+0x82>
 800fb84:	4629      	mov	r1, r5
 800fb86:	4638      	mov	r0, r7
 800fb88:	f7ff ffc2 	bl	800fb10 <sbrk_aligned>
 800fb8c:	1c43      	adds	r3, r0, #1
 800fb8e:	4604      	mov	r4, r0
 800fb90:	d14d      	bne.n	800fc2e <_malloc_r+0xde>
 800fb92:	6834      	ldr	r4, [r6, #0]
 800fb94:	4626      	mov	r6, r4
 800fb96:	2e00      	cmp	r6, #0
 800fb98:	d140      	bne.n	800fc1c <_malloc_r+0xcc>
 800fb9a:	6823      	ldr	r3, [r4, #0]
 800fb9c:	4631      	mov	r1, r6
 800fb9e:	4638      	mov	r0, r7
 800fba0:	eb04 0803 	add.w	r8, r4, r3
 800fba4:	f000 f9a4 	bl	800fef0 <_sbrk_r>
 800fba8:	4580      	cmp	r8, r0
 800fbaa:	d13a      	bne.n	800fc22 <_malloc_r+0xd2>
 800fbac:	6821      	ldr	r1, [r4, #0]
 800fbae:	3503      	adds	r5, #3
 800fbb0:	1a6d      	subs	r5, r5, r1
 800fbb2:	f025 0503 	bic.w	r5, r5, #3
 800fbb6:	3508      	adds	r5, #8
 800fbb8:	2d0c      	cmp	r5, #12
 800fbba:	bf38      	it	cc
 800fbbc:	250c      	movcc	r5, #12
 800fbbe:	4629      	mov	r1, r5
 800fbc0:	4638      	mov	r0, r7
 800fbc2:	f7ff ffa5 	bl	800fb10 <sbrk_aligned>
 800fbc6:	3001      	adds	r0, #1
 800fbc8:	d02b      	beq.n	800fc22 <_malloc_r+0xd2>
 800fbca:	6823      	ldr	r3, [r4, #0]
 800fbcc:	442b      	add	r3, r5
 800fbce:	6023      	str	r3, [r4, #0]
 800fbd0:	e00e      	b.n	800fbf0 <_malloc_r+0xa0>
 800fbd2:	6822      	ldr	r2, [r4, #0]
 800fbd4:	1b52      	subs	r2, r2, r5
 800fbd6:	d41e      	bmi.n	800fc16 <_malloc_r+0xc6>
 800fbd8:	2a0b      	cmp	r2, #11
 800fbda:	d916      	bls.n	800fc0a <_malloc_r+0xba>
 800fbdc:	1961      	adds	r1, r4, r5
 800fbde:	42a3      	cmp	r3, r4
 800fbe0:	6025      	str	r5, [r4, #0]
 800fbe2:	bf18      	it	ne
 800fbe4:	6059      	strne	r1, [r3, #4]
 800fbe6:	6863      	ldr	r3, [r4, #4]
 800fbe8:	bf08      	it	eq
 800fbea:	6031      	streq	r1, [r6, #0]
 800fbec:	5162      	str	r2, [r4, r5]
 800fbee:	604b      	str	r3, [r1, #4]
 800fbf0:	4638      	mov	r0, r7
 800fbf2:	f104 060b 	add.w	r6, r4, #11
 800fbf6:	f000 f9ed 	bl	800ffd4 <__malloc_unlock>
 800fbfa:	f026 0607 	bic.w	r6, r6, #7
 800fbfe:	1d23      	adds	r3, r4, #4
 800fc00:	1af2      	subs	r2, r6, r3
 800fc02:	d0b6      	beq.n	800fb72 <_malloc_r+0x22>
 800fc04:	1b9b      	subs	r3, r3, r6
 800fc06:	50a3      	str	r3, [r4, r2]
 800fc08:	e7b3      	b.n	800fb72 <_malloc_r+0x22>
 800fc0a:	6862      	ldr	r2, [r4, #4]
 800fc0c:	42a3      	cmp	r3, r4
 800fc0e:	bf0c      	ite	eq
 800fc10:	6032      	streq	r2, [r6, #0]
 800fc12:	605a      	strne	r2, [r3, #4]
 800fc14:	e7ec      	b.n	800fbf0 <_malloc_r+0xa0>
 800fc16:	4623      	mov	r3, r4
 800fc18:	6864      	ldr	r4, [r4, #4]
 800fc1a:	e7b2      	b.n	800fb82 <_malloc_r+0x32>
 800fc1c:	4634      	mov	r4, r6
 800fc1e:	6876      	ldr	r6, [r6, #4]
 800fc20:	e7b9      	b.n	800fb96 <_malloc_r+0x46>
 800fc22:	230c      	movs	r3, #12
 800fc24:	603b      	str	r3, [r7, #0]
 800fc26:	4638      	mov	r0, r7
 800fc28:	f000 f9d4 	bl	800ffd4 <__malloc_unlock>
 800fc2c:	e7a1      	b.n	800fb72 <_malloc_r+0x22>
 800fc2e:	6025      	str	r5, [r4, #0]
 800fc30:	e7de      	b.n	800fbf0 <_malloc_r+0xa0>
 800fc32:	bf00      	nop
 800fc34:	20000cb8 	.word	0x20000cb8

0800fc38 <__ssputs_r>:
 800fc38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc3c:	688e      	ldr	r6, [r1, #8]
 800fc3e:	429e      	cmp	r6, r3
 800fc40:	4682      	mov	sl, r0
 800fc42:	460c      	mov	r4, r1
 800fc44:	4690      	mov	r8, r2
 800fc46:	461f      	mov	r7, r3
 800fc48:	d838      	bhi.n	800fcbc <__ssputs_r+0x84>
 800fc4a:	898a      	ldrh	r2, [r1, #12]
 800fc4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc50:	d032      	beq.n	800fcb8 <__ssputs_r+0x80>
 800fc52:	6825      	ldr	r5, [r4, #0]
 800fc54:	6909      	ldr	r1, [r1, #16]
 800fc56:	eba5 0901 	sub.w	r9, r5, r1
 800fc5a:	6965      	ldr	r5, [r4, #20]
 800fc5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc64:	3301      	adds	r3, #1
 800fc66:	444b      	add	r3, r9
 800fc68:	106d      	asrs	r5, r5, #1
 800fc6a:	429d      	cmp	r5, r3
 800fc6c:	bf38      	it	cc
 800fc6e:	461d      	movcc	r5, r3
 800fc70:	0553      	lsls	r3, r2, #21
 800fc72:	d531      	bpl.n	800fcd8 <__ssputs_r+0xa0>
 800fc74:	4629      	mov	r1, r5
 800fc76:	f7ff ff6b 	bl	800fb50 <_malloc_r>
 800fc7a:	4606      	mov	r6, r0
 800fc7c:	b950      	cbnz	r0, 800fc94 <__ssputs_r+0x5c>
 800fc7e:	230c      	movs	r3, #12
 800fc80:	f8ca 3000 	str.w	r3, [sl]
 800fc84:	89a3      	ldrh	r3, [r4, #12]
 800fc86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc8a:	81a3      	strh	r3, [r4, #12]
 800fc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc94:	6921      	ldr	r1, [r4, #16]
 800fc96:	464a      	mov	r2, r9
 800fc98:	f7fe f81c 	bl	800dcd4 <memcpy>
 800fc9c:	89a3      	ldrh	r3, [r4, #12]
 800fc9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fca6:	81a3      	strh	r3, [r4, #12]
 800fca8:	6126      	str	r6, [r4, #16]
 800fcaa:	6165      	str	r5, [r4, #20]
 800fcac:	444e      	add	r6, r9
 800fcae:	eba5 0509 	sub.w	r5, r5, r9
 800fcb2:	6026      	str	r6, [r4, #0]
 800fcb4:	60a5      	str	r5, [r4, #8]
 800fcb6:	463e      	mov	r6, r7
 800fcb8:	42be      	cmp	r6, r7
 800fcba:	d900      	bls.n	800fcbe <__ssputs_r+0x86>
 800fcbc:	463e      	mov	r6, r7
 800fcbe:	6820      	ldr	r0, [r4, #0]
 800fcc0:	4632      	mov	r2, r6
 800fcc2:	4641      	mov	r1, r8
 800fcc4:	f000 f966 	bl	800ff94 <memmove>
 800fcc8:	68a3      	ldr	r3, [r4, #8]
 800fcca:	1b9b      	subs	r3, r3, r6
 800fccc:	60a3      	str	r3, [r4, #8]
 800fcce:	6823      	ldr	r3, [r4, #0]
 800fcd0:	4433      	add	r3, r6
 800fcd2:	6023      	str	r3, [r4, #0]
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	e7db      	b.n	800fc90 <__ssputs_r+0x58>
 800fcd8:	462a      	mov	r2, r5
 800fcda:	f000 f981 	bl	800ffe0 <_realloc_r>
 800fcde:	4606      	mov	r6, r0
 800fce0:	2800      	cmp	r0, #0
 800fce2:	d1e1      	bne.n	800fca8 <__ssputs_r+0x70>
 800fce4:	6921      	ldr	r1, [r4, #16]
 800fce6:	4650      	mov	r0, sl
 800fce8:	f7ff fec6 	bl	800fa78 <_free_r>
 800fcec:	e7c7      	b.n	800fc7e <__ssputs_r+0x46>
	...

0800fcf0 <_svfiprintf_r>:
 800fcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcf4:	4698      	mov	r8, r3
 800fcf6:	898b      	ldrh	r3, [r1, #12]
 800fcf8:	061b      	lsls	r3, r3, #24
 800fcfa:	b09d      	sub	sp, #116	; 0x74
 800fcfc:	4607      	mov	r7, r0
 800fcfe:	460d      	mov	r5, r1
 800fd00:	4614      	mov	r4, r2
 800fd02:	d50e      	bpl.n	800fd22 <_svfiprintf_r+0x32>
 800fd04:	690b      	ldr	r3, [r1, #16]
 800fd06:	b963      	cbnz	r3, 800fd22 <_svfiprintf_r+0x32>
 800fd08:	2140      	movs	r1, #64	; 0x40
 800fd0a:	f7ff ff21 	bl	800fb50 <_malloc_r>
 800fd0e:	6028      	str	r0, [r5, #0]
 800fd10:	6128      	str	r0, [r5, #16]
 800fd12:	b920      	cbnz	r0, 800fd1e <_svfiprintf_r+0x2e>
 800fd14:	230c      	movs	r3, #12
 800fd16:	603b      	str	r3, [r7, #0]
 800fd18:	f04f 30ff 	mov.w	r0, #4294967295
 800fd1c:	e0d1      	b.n	800fec2 <_svfiprintf_r+0x1d2>
 800fd1e:	2340      	movs	r3, #64	; 0x40
 800fd20:	616b      	str	r3, [r5, #20]
 800fd22:	2300      	movs	r3, #0
 800fd24:	9309      	str	r3, [sp, #36]	; 0x24
 800fd26:	2320      	movs	r3, #32
 800fd28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd30:	2330      	movs	r3, #48	; 0x30
 800fd32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fedc <_svfiprintf_r+0x1ec>
 800fd36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd3a:	f04f 0901 	mov.w	r9, #1
 800fd3e:	4623      	mov	r3, r4
 800fd40:	469a      	mov	sl, r3
 800fd42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd46:	b10a      	cbz	r2, 800fd4c <_svfiprintf_r+0x5c>
 800fd48:	2a25      	cmp	r2, #37	; 0x25
 800fd4a:	d1f9      	bne.n	800fd40 <_svfiprintf_r+0x50>
 800fd4c:	ebba 0b04 	subs.w	fp, sl, r4
 800fd50:	d00b      	beq.n	800fd6a <_svfiprintf_r+0x7a>
 800fd52:	465b      	mov	r3, fp
 800fd54:	4622      	mov	r2, r4
 800fd56:	4629      	mov	r1, r5
 800fd58:	4638      	mov	r0, r7
 800fd5a:	f7ff ff6d 	bl	800fc38 <__ssputs_r>
 800fd5e:	3001      	adds	r0, #1
 800fd60:	f000 80aa 	beq.w	800feb8 <_svfiprintf_r+0x1c8>
 800fd64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd66:	445a      	add	r2, fp
 800fd68:	9209      	str	r2, [sp, #36]	; 0x24
 800fd6a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	f000 80a2 	beq.w	800feb8 <_svfiprintf_r+0x1c8>
 800fd74:	2300      	movs	r3, #0
 800fd76:	f04f 32ff 	mov.w	r2, #4294967295
 800fd7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd7e:	f10a 0a01 	add.w	sl, sl, #1
 800fd82:	9304      	str	r3, [sp, #16]
 800fd84:	9307      	str	r3, [sp, #28]
 800fd86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd8a:	931a      	str	r3, [sp, #104]	; 0x68
 800fd8c:	4654      	mov	r4, sl
 800fd8e:	2205      	movs	r2, #5
 800fd90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd94:	4851      	ldr	r0, [pc, #324]	; (800fedc <_svfiprintf_r+0x1ec>)
 800fd96:	f7f0 fa43 	bl	8000220 <memchr>
 800fd9a:	9a04      	ldr	r2, [sp, #16]
 800fd9c:	b9d8      	cbnz	r0, 800fdd6 <_svfiprintf_r+0xe6>
 800fd9e:	06d0      	lsls	r0, r2, #27
 800fda0:	bf44      	itt	mi
 800fda2:	2320      	movmi	r3, #32
 800fda4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fda8:	0711      	lsls	r1, r2, #28
 800fdaa:	bf44      	itt	mi
 800fdac:	232b      	movmi	r3, #43	; 0x2b
 800fdae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdb2:	f89a 3000 	ldrb.w	r3, [sl]
 800fdb6:	2b2a      	cmp	r3, #42	; 0x2a
 800fdb8:	d015      	beq.n	800fde6 <_svfiprintf_r+0xf6>
 800fdba:	9a07      	ldr	r2, [sp, #28]
 800fdbc:	4654      	mov	r4, sl
 800fdbe:	2000      	movs	r0, #0
 800fdc0:	f04f 0c0a 	mov.w	ip, #10
 800fdc4:	4621      	mov	r1, r4
 800fdc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdca:	3b30      	subs	r3, #48	; 0x30
 800fdcc:	2b09      	cmp	r3, #9
 800fdce:	d94e      	bls.n	800fe6e <_svfiprintf_r+0x17e>
 800fdd0:	b1b0      	cbz	r0, 800fe00 <_svfiprintf_r+0x110>
 800fdd2:	9207      	str	r2, [sp, #28]
 800fdd4:	e014      	b.n	800fe00 <_svfiprintf_r+0x110>
 800fdd6:	eba0 0308 	sub.w	r3, r0, r8
 800fdda:	fa09 f303 	lsl.w	r3, r9, r3
 800fdde:	4313      	orrs	r3, r2
 800fde0:	9304      	str	r3, [sp, #16]
 800fde2:	46a2      	mov	sl, r4
 800fde4:	e7d2      	b.n	800fd8c <_svfiprintf_r+0x9c>
 800fde6:	9b03      	ldr	r3, [sp, #12]
 800fde8:	1d19      	adds	r1, r3, #4
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	9103      	str	r1, [sp, #12]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	bfbb      	ittet	lt
 800fdf2:	425b      	neglt	r3, r3
 800fdf4:	f042 0202 	orrlt.w	r2, r2, #2
 800fdf8:	9307      	strge	r3, [sp, #28]
 800fdfa:	9307      	strlt	r3, [sp, #28]
 800fdfc:	bfb8      	it	lt
 800fdfe:	9204      	strlt	r2, [sp, #16]
 800fe00:	7823      	ldrb	r3, [r4, #0]
 800fe02:	2b2e      	cmp	r3, #46	; 0x2e
 800fe04:	d10c      	bne.n	800fe20 <_svfiprintf_r+0x130>
 800fe06:	7863      	ldrb	r3, [r4, #1]
 800fe08:	2b2a      	cmp	r3, #42	; 0x2a
 800fe0a:	d135      	bne.n	800fe78 <_svfiprintf_r+0x188>
 800fe0c:	9b03      	ldr	r3, [sp, #12]
 800fe0e:	1d1a      	adds	r2, r3, #4
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	9203      	str	r2, [sp, #12]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	bfb8      	it	lt
 800fe18:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe1c:	3402      	adds	r4, #2
 800fe1e:	9305      	str	r3, [sp, #20]
 800fe20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800feec <_svfiprintf_r+0x1fc>
 800fe24:	7821      	ldrb	r1, [r4, #0]
 800fe26:	2203      	movs	r2, #3
 800fe28:	4650      	mov	r0, sl
 800fe2a:	f7f0 f9f9 	bl	8000220 <memchr>
 800fe2e:	b140      	cbz	r0, 800fe42 <_svfiprintf_r+0x152>
 800fe30:	2340      	movs	r3, #64	; 0x40
 800fe32:	eba0 000a 	sub.w	r0, r0, sl
 800fe36:	fa03 f000 	lsl.w	r0, r3, r0
 800fe3a:	9b04      	ldr	r3, [sp, #16]
 800fe3c:	4303      	orrs	r3, r0
 800fe3e:	3401      	adds	r4, #1
 800fe40:	9304      	str	r3, [sp, #16]
 800fe42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe46:	4826      	ldr	r0, [pc, #152]	; (800fee0 <_svfiprintf_r+0x1f0>)
 800fe48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe4c:	2206      	movs	r2, #6
 800fe4e:	f7f0 f9e7 	bl	8000220 <memchr>
 800fe52:	2800      	cmp	r0, #0
 800fe54:	d038      	beq.n	800fec8 <_svfiprintf_r+0x1d8>
 800fe56:	4b23      	ldr	r3, [pc, #140]	; (800fee4 <_svfiprintf_r+0x1f4>)
 800fe58:	bb1b      	cbnz	r3, 800fea2 <_svfiprintf_r+0x1b2>
 800fe5a:	9b03      	ldr	r3, [sp, #12]
 800fe5c:	3307      	adds	r3, #7
 800fe5e:	f023 0307 	bic.w	r3, r3, #7
 800fe62:	3308      	adds	r3, #8
 800fe64:	9303      	str	r3, [sp, #12]
 800fe66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe68:	4433      	add	r3, r6
 800fe6a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe6c:	e767      	b.n	800fd3e <_svfiprintf_r+0x4e>
 800fe6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe72:	460c      	mov	r4, r1
 800fe74:	2001      	movs	r0, #1
 800fe76:	e7a5      	b.n	800fdc4 <_svfiprintf_r+0xd4>
 800fe78:	2300      	movs	r3, #0
 800fe7a:	3401      	adds	r4, #1
 800fe7c:	9305      	str	r3, [sp, #20]
 800fe7e:	4619      	mov	r1, r3
 800fe80:	f04f 0c0a 	mov.w	ip, #10
 800fe84:	4620      	mov	r0, r4
 800fe86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe8a:	3a30      	subs	r2, #48	; 0x30
 800fe8c:	2a09      	cmp	r2, #9
 800fe8e:	d903      	bls.n	800fe98 <_svfiprintf_r+0x1a8>
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d0c5      	beq.n	800fe20 <_svfiprintf_r+0x130>
 800fe94:	9105      	str	r1, [sp, #20]
 800fe96:	e7c3      	b.n	800fe20 <_svfiprintf_r+0x130>
 800fe98:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe9c:	4604      	mov	r4, r0
 800fe9e:	2301      	movs	r3, #1
 800fea0:	e7f0      	b.n	800fe84 <_svfiprintf_r+0x194>
 800fea2:	ab03      	add	r3, sp, #12
 800fea4:	9300      	str	r3, [sp, #0]
 800fea6:	462a      	mov	r2, r5
 800fea8:	4b0f      	ldr	r3, [pc, #60]	; (800fee8 <_svfiprintf_r+0x1f8>)
 800feaa:	a904      	add	r1, sp, #16
 800feac:	4638      	mov	r0, r7
 800feae:	f7fd ffc7 	bl	800de40 <_printf_float>
 800feb2:	1c42      	adds	r2, r0, #1
 800feb4:	4606      	mov	r6, r0
 800feb6:	d1d6      	bne.n	800fe66 <_svfiprintf_r+0x176>
 800feb8:	89ab      	ldrh	r3, [r5, #12]
 800feba:	065b      	lsls	r3, r3, #25
 800febc:	f53f af2c 	bmi.w	800fd18 <_svfiprintf_r+0x28>
 800fec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fec2:	b01d      	add	sp, #116	; 0x74
 800fec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec8:	ab03      	add	r3, sp, #12
 800feca:	9300      	str	r3, [sp, #0]
 800fecc:	462a      	mov	r2, r5
 800fece:	4b06      	ldr	r3, [pc, #24]	; (800fee8 <_svfiprintf_r+0x1f8>)
 800fed0:	a904      	add	r1, sp, #16
 800fed2:	4638      	mov	r0, r7
 800fed4:	f7fe fa58 	bl	800e388 <_printf_i>
 800fed8:	e7eb      	b.n	800feb2 <_svfiprintf_r+0x1c2>
 800feda:	bf00      	nop
 800fedc:	080122d4 	.word	0x080122d4
 800fee0:	080122de 	.word	0x080122de
 800fee4:	0800de41 	.word	0x0800de41
 800fee8:	0800fc39 	.word	0x0800fc39
 800feec:	080122da 	.word	0x080122da

0800fef0 <_sbrk_r>:
 800fef0:	b538      	push	{r3, r4, r5, lr}
 800fef2:	4d06      	ldr	r5, [pc, #24]	; (800ff0c <_sbrk_r+0x1c>)
 800fef4:	2300      	movs	r3, #0
 800fef6:	4604      	mov	r4, r0
 800fef8:	4608      	mov	r0, r1
 800fefa:	602b      	str	r3, [r5, #0]
 800fefc:	f002 f86e 	bl	8011fdc <_sbrk>
 800ff00:	1c43      	adds	r3, r0, #1
 800ff02:	d102      	bne.n	800ff0a <_sbrk_r+0x1a>
 800ff04:	682b      	ldr	r3, [r5, #0]
 800ff06:	b103      	cbz	r3, 800ff0a <_sbrk_r+0x1a>
 800ff08:	6023      	str	r3, [r4, #0]
 800ff0a:	bd38      	pop	{r3, r4, r5, pc}
 800ff0c:	20000cc0 	.word	0x20000cc0

0800ff10 <__assert_func>:
 800ff10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff12:	4614      	mov	r4, r2
 800ff14:	461a      	mov	r2, r3
 800ff16:	4b09      	ldr	r3, [pc, #36]	; (800ff3c <__assert_func+0x2c>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	4605      	mov	r5, r0
 800ff1c:	68d8      	ldr	r0, [r3, #12]
 800ff1e:	b14c      	cbz	r4, 800ff34 <__assert_func+0x24>
 800ff20:	4b07      	ldr	r3, [pc, #28]	; (800ff40 <__assert_func+0x30>)
 800ff22:	9100      	str	r1, [sp, #0]
 800ff24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff28:	4906      	ldr	r1, [pc, #24]	; (800ff44 <__assert_func+0x34>)
 800ff2a:	462b      	mov	r3, r5
 800ff2c:	f000 f80e 	bl	800ff4c <fiprintf>
 800ff30:	f000 faac 	bl	801048c <abort>
 800ff34:	4b04      	ldr	r3, [pc, #16]	; (800ff48 <__assert_func+0x38>)
 800ff36:	461c      	mov	r4, r3
 800ff38:	e7f3      	b.n	800ff22 <__assert_func+0x12>
 800ff3a:	bf00      	nop
 800ff3c:	20000044 	.word	0x20000044
 800ff40:	080122e5 	.word	0x080122e5
 800ff44:	080122f2 	.word	0x080122f2
 800ff48:	08012320 	.word	0x08012320

0800ff4c <fiprintf>:
 800ff4c:	b40e      	push	{r1, r2, r3}
 800ff4e:	b503      	push	{r0, r1, lr}
 800ff50:	4601      	mov	r1, r0
 800ff52:	ab03      	add	r3, sp, #12
 800ff54:	4805      	ldr	r0, [pc, #20]	; (800ff6c <fiprintf+0x20>)
 800ff56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff5a:	6800      	ldr	r0, [r0, #0]
 800ff5c:	9301      	str	r3, [sp, #4]
 800ff5e:	f000 f897 	bl	8010090 <_vfiprintf_r>
 800ff62:	b002      	add	sp, #8
 800ff64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff68:	b003      	add	sp, #12
 800ff6a:	4770      	bx	lr
 800ff6c:	20000044 	.word	0x20000044

0800ff70 <__ascii_mbtowc>:
 800ff70:	b082      	sub	sp, #8
 800ff72:	b901      	cbnz	r1, 800ff76 <__ascii_mbtowc+0x6>
 800ff74:	a901      	add	r1, sp, #4
 800ff76:	b142      	cbz	r2, 800ff8a <__ascii_mbtowc+0x1a>
 800ff78:	b14b      	cbz	r3, 800ff8e <__ascii_mbtowc+0x1e>
 800ff7a:	7813      	ldrb	r3, [r2, #0]
 800ff7c:	600b      	str	r3, [r1, #0]
 800ff7e:	7812      	ldrb	r2, [r2, #0]
 800ff80:	1e10      	subs	r0, r2, #0
 800ff82:	bf18      	it	ne
 800ff84:	2001      	movne	r0, #1
 800ff86:	b002      	add	sp, #8
 800ff88:	4770      	bx	lr
 800ff8a:	4610      	mov	r0, r2
 800ff8c:	e7fb      	b.n	800ff86 <__ascii_mbtowc+0x16>
 800ff8e:	f06f 0001 	mvn.w	r0, #1
 800ff92:	e7f8      	b.n	800ff86 <__ascii_mbtowc+0x16>

0800ff94 <memmove>:
 800ff94:	4288      	cmp	r0, r1
 800ff96:	b510      	push	{r4, lr}
 800ff98:	eb01 0402 	add.w	r4, r1, r2
 800ff9c:	d902      	bls.n	800ffa4 <memmove+0x10>
 800ff9e:	4284      	cmp	r4, r0
 800ffa0:	4623      	mov	r3, r4
 800ffa2:	d807      	bhi.n	800ffb4 <memmove+0x20>
 800ffa4:	1e43      	subs	r3, r0, #1
 800ffa6:	42a1      	cmp	r1, r4
 800ffa8:	d008      	beq.n	800ffbc <memmove+0x28>
 800ffaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffb2:	e7f8      	b.n	800ffa6 <memmove+0x12>
 800ffb4:	4402      	add	r2, r0
 800ffb6:	4601      	mov	r1, r0
 800ffb8:	428a      	cmp	r2, r1
 800ffba:	d100      	bne.n	800ffbe <memmove+0x2a>
 800ffbc:	bd10      	pop	{r4, pc}
 800ffbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ffc6:	e7f7      	b.n	800ffb8 <memmove+0x24>

0800ffc8 <__malloc_lock>:
 800ffc8:	4801      	ldr	r0, [pc, #4]	; (800ffd0 <__malloc_lock+0x8>)
 800ffca:	f000 bc1f 	b.w	801080c <__retarget_lock_acquire_recursive>
 800ffce:	bf00      	nop
 800ffd0:	20000cc4 	.word	0x20000cc4

0800ffd4 <__malloc_unlock>:
 800ffd4:	4801      	ldr	r0, [pc, #4]	; (800ffdc <__malloc_unlock+0x8>)
 800ffd6:	f000 bc1a 	b.w	801080e <__retarget_lock_release_recursive>
 800ffda:	bf00      	nop
 800ffdc:	20000cc4 	.word	0x20000cc4

0800ffe0 <_realloc_r>:
 800ffe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe4:	4680      	mov	r8, r0
 800ffe6:	4614      	mov	r4, r2
 800ffe8:	460e      	mov	r6, r1
 800ffea:	b921      	cbnz	r1, 800fff6 <_realloc_r+0x16>
 800ffec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fff0:	4611      	mov	r1, r2
 800fff2:	f7ff bdad 	b.w	800fb50 <_malloc_r>
 800fff6:	b92a      	cbnz	r2, 8010004 <_realloc_r+0x24>
 800fff8:	f7ff fd3e 	bl	800fa78 <_free_r>
 800fffc:	4625      	mov	r5, r4
 800fffe:	4628      	mov	r0, r5
 8010000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010004:	f000 fc6a 	bl	80108dc <_malloc_usable_size_r>
 8010008:	4284      	cmp	r4, r0
 801000a:	4607      	mov	r7, r0
 801000c:	d802      	bhi.n	8010014 <_realloc_r+0x34>
 801000e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010012:	d812      	bhi.n	801003a <_realloc_r+0x5a>
 8010014:	4621      	mov	r1, r4
 8010016:	4640      	mov	r0, r8
 8010018:	f7ff fd9a 	bl	800fb50 <_malloc_r>
 801001c:	4605      	mov	r5, r0
 801001e:	2800      	cmp	r0, #0
 8010020:	d0ed      	beq.n	800fffe <_realloc_r+0x1e>
 8010022:	42bc      	cmp	r4, r7
 8010024:	4622      	mov	r2, r4
 8010026:	4631      	mov	r1, r6
 8010028:	bf28      	it	cs
 801002a:	463a      	movcs	r2, r7
 801002c:	f7fd fe52 	bl	800dcd4 <memcpy>
 8010030:	4631      	mov	r1, r6
 8010032:	4640      	mov	r0, r8
 8010034:	f7ff fd20 	bl	800fa78 <_free_r>
 8010038:	e7e1      	b.n	800fffe <_realloc_r+0x1e>
 801003a:	4635      	mov	r5, r6
 801003c:	e7df      	b.n	800fffe <_realloc_r+0x1e>

0801003e <__sfputc_r>:
 801003e:	6893      	ldr	r3, [r2, #8]
 8010040:	3b01      	subs	r3, #1
 8010042:	2b00      	cmp	r3, #0
 8010044:	b410      	push	{r4}
 8010046:	6093      	str	r3, [r2, #8]
 8010048:	da08      	bge.n	801005c <__sfputc_r+0x1e>
 801004a:	6994      	ldr	r4, [r2, #24]
 801004c:	42a3      	cmp	r3, r4
 801004e:	db01      	blt.n	8010054 <__sfputc_r+0x16>
 8010050:	290a      	cmp	r1, #10
 8010052:	d103      	bne.n	801005c <__sfputc_r+0x1e>
 8010054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010058:	f000 b94a 	b.w	80102f0 <__swbuf_r>
 801005c:	6813      	ldr	r3, [r2, #0]
 801005e:	1c58      	adds	r0, r3, #1
 8010060:	6010      	str	r0, [r2, #0]
 8010062:	7019      	strb	r1, [r3, #0]
 8010064:	4608      	mov	r0, r1
 8010066:	f85d 4b04 	ldr.w	r4, [sp], #4
 801006a:	4770      	bx	lr

0801006c <__sfputs_r>:
 801006c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801006e:	4606      	mov	r6, r0
 8010070:	460f      	mov	r7, r1
 8010072:	4614      	mov	r4, r2
 8010074:	18d5      	adds	r5, r2, r3
 8010076:	42ac      	cmp	r4, r5
 8010078:	d101      	bne.n	801007e <__sfputs_r+0x12>
 801007a:	2000      	movs	r0, #0
 801007c:	e007      	b.n	801008e <__sfputs_r+0x22>
 801007e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010082:	463a      	mov	r2, r7
 8010084:	4630      	mov	r0, r6
 8010086:	f7ff ffda 	bl	801003e <__sfputc_r>
 801008a:	1c43      	adds	r3, r0, #1
 801008c:	d1f3      	bne.n	8010076 <__sfputs_r+0xa>
 801008e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010090 <_vfiprintf_r>:
 8010090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010094:	460d      	mov	r5, r1
 8010096:	b09d      	sub	sp, #116	; 0x74
 8010098:	4614      	mov	r4, r2
 801009a:	4698      	mov	r8, r3
 801009c:	4606      	mov	r6, r0
 801009e:	b118      	cbz	r0, 80100a8 <_vfiprintf_r+0x18>
 80100a0:	6983      	ldr	r3, [r0, #24]
 80100a2:	b90b      	cbnz	r3, 80100a8 <_vfiprintf_r+0x18>
 80100a4:	f000 fb14 	bl	80106d0 <__sinit>
 80100a8:	4b89      	ldr	r3, [pc, #548]	; (80102d0 <_vfiprintf_r+0x240>)
 80100aa:	429d      	cmp	r5, r3
 80100ac:	d11b      	bne.n	80100e6 <_vfiprintf_r+0x56>
 80100ae:	6875      	ldr	r5, [r6, #4]
 80100b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100b2:	07d9      	lsls	r1, r3, #31
 80100b4:	d405      	bmi.n	80100c2 <_vfiprintf_r+0x32>
 80100b6:	89ab      	ldrh	r3, [r5, #12]
 80100b8:	059a      	lsls	r2, r3, #22
 80100ba:	d402      	bmi.n	80100c2 <_vfiprintf_r+0x32>
 80100bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100be:	f000 fba5 	bl	801080c <__retarget_lock_acquire_recursive>
 80100c2:	89ab      	ldrh	r3, [r5, #12]
 80100c4:	071b      	lsls	r3, r3, #28
 80100c6:	d501      	bpl.n	80100cc <_vfiprintf_r+0x3c>
 80100c8:	692b      	ldr	r3, [r5, #16]
 80100ca:	b9eb      	cbnz	r3, 8010108 <_vfiprintf_r+0x78>
 80100cc:	4629      	mov	r1, r5
 80100ce:	4630      	mov	r0, r6
 80100d0:	f000 f96e 	bl	80103b0 <__swsetup_r>
 80100d4:	b1c0      	cbz	r0, 8010108 <_vfiprintf_r+0x78>
 80100d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100d8:	07dc      	lsls	r4, r3, #31
 80100da:	d50e      	bpl.n	80100fa <_vfiprintf_r+0x6a>
 80100dc:	f04f 30ff 	mov.w	r0, #4294967295
 80100e0:	b01d      	add	sp, #116	; 0x74
 80100e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e6:	4b7b      	ldr	r3, [pc, #492]	; (80102d4 <_vfiprintf_r+0x244>)
 80100e8:	429d      	cmp	r5, r3
 80100ea:	d101      	bne.n	80100f0 <_vfiprintf_r+0x60>
 80100ec:	68b5      	ldr	r5, [r6, #8]
 80100ee:	e7df      	b.n	80100b0 <_vfiprintf_r+0x20>
 80100f0:	4b79      	ldr	r3, [pc, #484]	; (80102d8 <_vfiprintf_r+0x248>)
 80100f2:	429d      	cmp	r5, r3
 80100f4:	bf08      	it	eq
 80100f6:	68f5      	ldreq	r5, [r6, #12]
 80100f8:	e7da      	b.n	80100b0 <_vfiprintf_r+0x20>
 80100fa:	89ab      	ldrh	r3, [r5, #12]
 80100fc:	0598      	lsls	r0, r3, #22
 80100fe:	d4ed      	bmi.n	80100dc <_vfiprintf_r+0x4c>
 8010100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010102:	f000 fb84 	bl	801080e <__retarget_lock_release_recursive>
 8010106:	e7e9      	b.n	80100dc <_vfiprintf_r+0x4c>
 8010108:	2300      	movs	r3, #0
 801010a:	9309      	str	r3, [sp, #36]	; 0x24
 801010c:	2320      	movs	r3, #32
 801010e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010112:	f8cd 800c 	str.w	r8, [sp, #12]
 8010116:	2330      	movs	r3, #48	; 0x30
 8010118:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80102dc <_vfiprintf_r+0x24c>
 801011c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010120:	f04f 0901 	mov.w	r9, #1
 8010124:	4623      	mov	r3, r4
 8010126:	469a      	mov	sl, r3
 8010128:	f813 2b01 	ldrb.w	r2, [r3], #1
 801012c:	b10a      	cbz	r2, 8010132 <_vfiprintf_r+0xa2>
 801012e:	2a25      	cmp	r2, #37	; 0x25
 8010130:	d1f9      	bne.n	8010126 <_vfiprintf_r+0x96>
 8010132:	ebba 0b04 	subs.w	fp, sl, r4
 8010136:	d00b      	beq.n	8010150 <_vfiprintf_r+0xc0>
 8010138:	465b      	mov	r3, fp
 801013a:	4622      	mov	r2, r4
 801013c:	4629      	mov	r1, r5
 801013e:	4630      	mov	r0, r6
 8010140:	f7ff ff94 	bl	801006c <__sfputs_r>
 8010144:	3001      	adds	r0, #1
 8010146:	f000 80aa 	beq.w	801029e <_vfiprintf_r+0x20e>
 801014a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801014c:	445a      	add	r2, fp
 801014e:	9209      	str	r2, [sp, #36]	; 0x24
 8010150:	f89a 3000 	ldrb.w	r3, [sl]
 8010154:	2b00      	cmp	r3, #0
 8010156:	f000 80a2 	beq.w	801029e <_vfiprintf_r+0x20e>
 801015a:	2300      	movs	r3, #0
 801015c:	f04f 32ff 	mov.w	r2, #4294967295
 8010160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010164:	f10a 0a01 	add.w	sl, sl, #1
 8010168:	9304      	str	r3, [sp, #16]
 801016a:	9307      	str	r3, [sp, #28]
 801016c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010170:	931a      	str	r3, [sp, #104]	; 0x68
 8010172:	4654      	mov	r4, sl
 8010174:	2205      	movs	r2, #5
 8010176:	f814 1b01 	ldrb.w	r1, [r4], #1
 801017a:	4858      	ldr	r0, [pc, #352]	; (80102dc <_vfiprintf_r+0x24c>)
 801017c:	f7f0 f850 	bl	8000220 <memchr>
 8010180:	9a04      	ldr	r2, [sp, #16]
 8010182:	b9d8      	cbnz	r0, 80101bc <_vfiprintf_r+0x12c>
 8010184:	06d1      	lsls	r1, r2, #27
 8010186:	bf44      	itt	mi
 8010188:	2320      	movmi	r3, #32
 801018a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801018e:	0713      	lsls	r3, r2, #28
 8010190:	bf44      	itt	mi
 8010192:	232b      	movmi	r3, #43	; 0x2b
 8010194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010198:	f89a 3000 	ldrb.w	r3, [sl]
 801019c:	2b2a      	cmp	r3, #42	; 0x2a
 801019e:	d015      	beq.n	80101cc <_vfiprintf_r+0x13c>
 80101a0:	9a07      	ldr	r2, [sp, #28]
 80101a2:	4654      	mov	r4, sl
 80101a4:	2000      	movs	r0, #0
 80101a6:	f04f 0c0a 	mov.w	ip, #10
 80101aa:	4621      	mov	r1, r4
 80101ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101b0:	3b30      	subs	r3, #48	; 0x30
 80101b2:	2b09      	cmp	r3, #9
 80101b4:	d94e      	bls.n	8010254 <_vfiprintf_r+0x1c4>
 80101b6:	b1b0      	cbz	r0, 80101e6 <_vfiprintf_r+0x156>
 80101b8:	9207      	str	r2, [sp, #28]
 80101ba:	e014      	b.n	80101e6 <_vfiprintf_r+0x156>
 80101bc:	eba0 0308 	sub.w	r3, r0, r8
 80101c0:	fa09 f303 	lsl.w	r3, r9, r3
 80101c4:	4313      	orrs	r3, r2
 80101c6:	9304      	str	r3, [sp, #16]
 80101c8:	46a2      	mov	sl, r4
 80101ca:	e7d2      	b.n	8010172 <_vfiprintf_r+0xe2>
 80101cc:	9b03      	ldr	r3, [sp, #12]
 80101ce:	1d19      	adds	r1, r3, #4
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	9103      	str	r1, [sp, #12]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	bfbb      	ittet	lt
 80101d8:	425b      	neglt	r3, r3
 80101da:	f042 0202 	orrlt.w	r2, r2, #2
 80101de:	9307      	strge	r3, [sp, #28]
 80101e0:	9307      	strlt	r3, [sp, #28]
 80101e2:	bfb8      	it	lt
 80101e4:	9204      	strlt	r2, [sp, #16]
 80101e6:	7823      	ldrb	r3, [r4, #0]
 80101e8:	2b2e      	cmp	r3, #46	; 0x2e
 80101ea:	d10c      	bne.n	8010206 <_vfiprintf_r+0x176>
 80101ec:	7863      	ldrb	r3, [r4, #1]
 80101ee:	2b2a      	cmp	r3, #42	; 0x2a
 80101f0:	d135      	bne.n	801025e <_vfiprintf_r+0x1ce>
 80101f2:	9b03      	ldr	r3, [sp, #12]
 80101f4:	1d1a      	adds	r2, r3, #4
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	9203      	str	r2, [sp, #12]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	bfb8      	it	lt
 80101fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8010202:	3402      	adds	r4, #2
 8010204:	9305      	str	r3, [sp, #20]
 8010206:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80102ec <_vfiprintf_r+0x25c>
 801020a:	7821      	ldrb	r1, [r4, #0]
 801020c:	2203      	movs	r2, #3
 801020e:	4650      	mov	r0, sl
 8010210:	f7f0 f806 	bl	8000220 <memchr>
 8010214:	b140      	cbz	r0, 8010228 <_vfiprintf_r+0x198>
 8010216:	2340      	movs	r3, #64	; 0x40
 8010218:	eba0 000a 	sub.w	r0, r0, sl
 801021c:	fa03 f000 	lsl.w	r0, r3, r0
 8010220:	9b04      	ldr	r3, [sp, #16]
 8010222:	4303      	orrs	r3, r0
 8010224:	3401      	adds	r4, #1
 8010226:	9304      	str	r3, [sp, #16]
 8010228:	f814 1b01 	ldrb.w	r1, [r4], #1
 801022c:	482c      	ldr	r0, [pc, #176]	; (80102e0 <_vfiprintf_r+0x250>)
 801022e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010232:	2206      	movs	r2, #6
 8010234:	f7ef fff4 	bl	8000220 <memchr>
 8010238:	2800      	cmp	r0, #0
 801023a:	d03f      	beq.n	80102bc <_vfiprintf_r+0x22c>
 801023c:	4b29      	ldr	r3, [pc, #164]	; (80102e4 <_vfiprintf_r+0x254>)
 801023e:	bb1b      	cbnz	r3, 8010288 <_vfiprintf_r+0x1f8>
 8010240:	9b03      	ldr	r3, [sp, #12]
 8010242:	3307      	adds	r3, #7
 8010244:	f023 0307 	bic.w	r3, r3, #7
 8010248:	3308      	adds	r3, #8
 801024a:	9303      	str	r3, [sp, #12]
 801024c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801024e:	443b      	add	r3, r7
 8010250:	9309      	str	r3, [sp, #36]	; 0x24
 8010252:	e767      	b.n	8010124 <_vfiprintf_r+0x94>
 8010254:	fb0c 3202 	mla	r2, ip, r2, r3
 8010258:	460c      	mov	r4, r1
 801025a:	2001      	movs	r0, #1
 801025c:	e7a5      	b.n	80101aa <_vfiprintf_r+0x11a>
 801025e:	2300      	movs	r3, #0
 8010260:	3401      	adds	r4, #1
 8010262:	9305      	str	r3, [sp, #20]
 8010264:	4619      	mov	r1, r3
 8010266:	f04f 0c0a 	mov.w	ip, #10
 801026a:	4620      	mov	r0, r4
 801026c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010270:	3a30      	subs	r2, #48	; 0x30
 8010272:	2a09      	cmp	r2, #9
 8010274:	d903      	bls.n	801027e <_vfiprintf_r+0x1ee>
 8010276:	2b00      	cmp	r3, #0
 8010278:	d0c5      	beq.n	8010206 <_vfiprintf_r+0x176>
 801027a:	9105      	str	r1, [sp, #20]
 801027c:	e7c3      	b.n	8010206 <_vfiprintf_r+0x176>
 801027e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010282:	4604      	mov	r4, r0
 8010284:	2301      	movs	r3, #1
 8010286:	e7f0      	b.n	801026a <_vfiprintf_r+0x1da>
 8010288:	ab03      	add	r3, sp, #12
 801028a:	9300      	str	r3, [sp, #0]
 801028c:	462a      	mov	r2, r5
 801028e:	4b16      	ldr	r3, [pc, #88]	; (80102e8 <_vfiprintf_r+0x258>)
 8010290:	a904      	add	r1, sp, #16
 8010292:	4630      	mov	r0, r6
 8010294:	f7fd fdd4 	bl	800de40 <_printf_float>
 8010298:	4607      	mov	r7, r0
 801029a:	1c78      	adds	r0, r7, #1
 801029c:	d1d6      	bne.n	801024c <_vfiprintf_r+0x1bc>
 801029e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102a0:	07d9      	lsls	r1, r3, #31
 80102a2:	d405      	bmi.n	80102b0 <_vfiprintf_r+0x220>
 80102a4:	89ab      	ldrh	r3, [r5, #12]
 80102a6:	059a      	lsls	r2, r3, #22
 80102a8:	d402      	bmi.n	80102b0 <_vfiprintf_r+0x220>
 80102aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102ac:	f000 faaf 	bl	801080e <__retarget_lock_release_recursive>
 80102b0:	89ab      	ldrh	r3, [r5, #12]
 80102b2:	065b      	lsls	r3, r3, #25
 80102b4:	f53f af12 	bmi.w	80100dc <_vfiprintf_r+0x4c>
 80102b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102ba:	e711      	b.n	80100e0 <_vfiprintf_r+0x50>
 80102bc:	ab03      	add	r3, sp, #12
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	462a      	mov	r2, r5
 80102c2:	4b09      	ldr	r3, [pc, #36]	; (80102e8 <_vfiprintf_r+0x258>)
 80102c4:	a904      	add	r1, sp, #16
 80102c6:	4630      	mov	r0, r6
 80102c8:	f7fe f85e 	bl	800e388 <_printf_i>
 80102cc:	e7e4      	b.n	8010298 <_vfiprintf_r+0x208>
 80102ce:	bf00      	nop
 80102d0:	0801244c 	.word	0x0801244c
 80102d4:	0801246c 	.word	0x0801246c
 80102d8:	0801242c 	.word	0x0801242c
 80102dc:	080122d4 	.word	0x080122d4
 80102e0:	080122de 	.word	0x080122de
 80102e4:	0800de41 	.word	0x0800de41
 80102e8:	0801006d 	.word	0x0801006d
 80102ec:	080122da 	.word	0x080122da

080102f0 <__swbuf_r>:
 80102f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102f2:	460e      	mov	r6, r1
 80102f4:	4614      	mov	r4, r2
 80102f6:	4605      	mov	r5, r0
 80102f8:	b118      	cbz	r0, 8010302 <__swbuf_r+0x12>
 80102fa:	6983      	ldr	r3, [r0, #24]
 80102fc:	b90b      	cbnz	r3, 8010302 <__swbuf_r+0x12>
 80102fe:	f000 f9e7 	bl	80106d0 <__sinit>
 8010302:	4b21      	ldr	r3, [pc, #132]	; (8010388 <__swbuf_r+0x98>)
 8010304:	429c      	cmp	r4, r3
 8010306:	d12b      	bne.n	8010360 <__swbuf_r+0x70>
 8010308:	686c      	ldr	r4, [r5, #4]
 801030a:	69a3      	ldr	r3, [r4, #24]
 801030c:	60a3      	str	r3, [r4, #8]
 801030e:	89a3      	ldrh	r3, [r4, #12]
 8010310:	071a      	lsls	r2, r3, #28
 8010312:	d52f      	bpl.n	8010374 <__swbuf_r+0x84>
 8010314:	6923      	ldr	r3, [r4, #16]
 8010316:	b36b      	cbz	r3, 8010374 <__swbuf_r+0x84>
 8010318:	6923      	ldr	r3, [r4, #16]
 801031a:	6820      	ldr	r0, [r4, #0]
 801031c:	1ac0      	subs	r0, r0, r3
 801031e:	6963      	ldr	r3, [r4, #20]
 8010320:	b2f6      	uxtb	r6, r6
 8010322:	4283      	cmp	r3, r0
 8010324:	4637      	mov	r7, r6
 8010326:	dc04      	bgt.n	8010332 <__swbuf_r+0x42>
 8010328:	4621      	mov	r1, r4
 801032a:	4628      	mov	r0, r5
 801032c:	f000 f93c 	bl	80105a8 <_fflush_r>
 8010330:	bb30      	cbnz	r0, 8010380 <__swbuf_r+0x90>
 8010332:	68a3      	ldr	r3, [r4, #8]
 8010334:	3b01      	subs	r3, #1
 8010336:	60a3      	str	r3, [r4, #8]
 8010338:	6823      	ldr	r3, [r4, #0]
 801033a:	1c5a      	adds	r2, r3, #1
 801033c:	6022      	str	r2, [r4, #0]
 801033e:	701e      	strb	r6, [r3, #0]
 8010340:	6963      	ldr	r3, [r4, #20]
 8010342:	3001      	adds	r0, #1
 8010344:	4283      	cmp	r3, r0
 8010346:	d004      	beq.n	8010352 <__swbuf_r+0x62>
 8010348:	89a3      	ldrh	r3, [r4, #12]
 801034a:	07db      	lsls	r3, r3, #31
 801034c:	d506      	bpl.n	801035c <__swbuf_r+0x6c>
 801034e:	2e0a      	cmp	r6, #10
 8010350:	d104      	bne.n	801035c <__swbuf_r+0x6c>
 8010352:	4621      	mov	r1, r4
 8010354:	4628      	mov	r0, r5
 8010356:	f000 f927 	bl	80105a8 <_fflush_r>
 801035a:	b988      	cbnz	r0, 8010380 <__swbuf_r+0x90>
 801035c:	4638      	mov	r0, r7
 801035e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010360:	4b0a      	ldr	r3, [pc, #40]	; (801038c <__swbuf_r+0x9c>)
 8010362:	429c      	cmp	r4, r3
 8010364:	d101      	bne.n	801036a <__swbuf_r+0x7a>
 8010366:	68ac      	ldr	r4, [r5, #8]
 8010368:	e7cf      	b.n	801030a <__swbuf_r+0x1a>
 801036a:	4b09      	ldr	r3, [pc, #36]	; (8010390 <__swbuf_r+0xa0>)
 801036c:	429c      	cmp	r4, r3
 801036e:	bf08      	it	eq
 8010370:	68ec      	ldreq	r4, [r5, #12]
 8010372:	e7ca      	b.n	801030a <__swbuf_r+0x1a>
 8010374:	4621      	mov	r1, r4
 8010376:	4628      	mov	r0, r5
 8010378:	f000 f81a 	bl	80103b0 <__swsetup_r>
 801037c:	2800      	cmp	r0, #0
 801037e:	d0cb      	beq.n	8010318 <__swbuf_r+0x28>
 8010380:	f04f 37ff 	mov.w	r7, #4294967295
 8010384:	e7ea      	b.n	801035c <__swbuf_r+0x6c>
 8010386:	bf00      	nop
 8010388:	0801244c 	.word	0x0801244c
 801038c:	0801246c 	.word	0x0801246c
 8010390:	0801242c 	.word	0x0801242c

08010394 <__ascii_wctomb>:
 8010394:	b149      	cbz	r1, 80103aa <__ascii_wctomb+0x16>
 8010396:	2aff      	cmp	r2, #255	; 0xff
 8010398:	bf85      	ittet	hi
 801039a:	238a      	movhi	r3, #138	; 0x8a
 801039c:	6003      	strhi	r3, [r0, #0]
 801039e:	700a      	strbls	r2, [r1, #0]
 80103a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80103a4:	bf98      	it	ls
 80103a6:	2001      	movls	r0, #1
 80103a8:	4770      	bx	lr
 80103aa:	4608      	mov	r0, r1
 80103ac:	4770      	bx	lr
	...

080103b0 <__swsetup_r>:
 80103b0:	4b32      	ldr	r3, [pc, #200]	; (801047c <__swsetup_r+0xcc>)
 80103b2:	b570      	push	{r4, r5, r6, lr}
 80103b4:	681d      	ldr	r5, [r3, #0]
 80103b6:	4606      	mov	r6, r0
 80103b8:	460c      	mov	r4, r1
 80103ba:	b125      	cbz	r5, 80103c6 <__swsetup_r+0x16>
 80103bc:	69ab      	ldr	r3, [r5, #24]
 80103be:	b913      	cbnz	r3, 80103c6 <__swsetup_r+0x16>
 80103c0:	4628      	mov	r0, r5
 80103c2:	f000 f985 	bl	80106d0 <__sinit>
 80103c6:	4b2e      	ldr	r3, [pc, #184]	; (8010480 <__swsetup_r+0xd0>)
 80103c8:	429c      	cmp	r4, r3
 80103ca:	d10f      	bne.n	80103ec <__swsetup_r+0x3c>
 80103cc:	686c      	ldr	r4, [r5, #4]
 80103ce:	89a3      	ldrh	r3, [r4, #12]
 80103d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103d4:	0719      	lsls	r1, r3, #28
 80103d6:	d42c      	bmi.n	8010432 <__swsetup_r+0x82>
 80103d8:	06dd      	lsls	r5, r3, #27
 80103da:	d411      	bmi.n	8010400 <__swsetup_r+0x50>
 80103dc:	2309      	movs	r3, #9
 80103de:	6033      	str	r3, [r6, #0]
 80103e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80103e4:	81a3      	strh	r3, [r4, #12]
 80103e6:	f04f 30ff 	mov.w	r0, #4294967295
 80103ea:	e03e      	b.n	801046a <__swsetup_r+0xba>
 80103ec:	4b25      	ldr	r3, [pc, #148]	; (8010484 <__swsetup_r+0xd4>)
 80103ee:	429c      	cmp	r4, r3
 80103f0:	d101      	bne.n	80103f6 <__swsetup_r+0x46>
 80103f2:	68ac      	ldr	r4, [r5, #8]
 80103f4:	e7eb      	b.n	80103ce <__swsetup_r+0x1e>
 80103f6:	4b24      	ldr	r3, [pc, #144]	; (8010488 <__swsetup_r+0xd8>)
 80103f8:	429c      	cmp	r4, r3
 80103fa:	bf08      	it	eq
 80103fc:	68ec      	ldreq	r4, [r5, #12]
 80103fe:	e7e6      	b.n	80103ce <__swsetup_r+0x1e>
 8010400:	0758      	lsls	r0, r3, #29
 8010402:	d512      	bpl.n	801042a <__swsetup_r+0x7a>
 8010404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010406:	b141      	cbz	r1, 801041a <__swsetup_r+0x6a>
 8010408:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801040c:	4299      	cmp	r1, r3
 801040e:	d002      	beq.n	8010416 <__swsetup_r+0x66>
 8010410:	4630      	mov	r0, r6
 8010412:	f7ff fb31 	bl	800fa78 <_free_r>
 8010416:	2300      	movs	r3, #0
 8010418:	6363      	str	r3, [r4, #52]	; 0x34
 801041a:	89a3      	ldrh	r3, [r4, #12]
 801041c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010420:	81a3      	strh	r3, [r4, #12]
 8010422:	2300      	movs	r3, #0
 8010424:	6063      	str	r3, [r4, #4]
 8010426:	6923      	ldr	r3, [r4, #16]
 8010428:	6023      	str	r3, [r4, #0]
 801042a:	89a3      	ldrh	r3, [r4, #12]
 801042c:	f043 0308 	orr.w	r3, r3, #8
 8010430:	81a3      	strh	r3, [r4, #12]
 8010432:	6923      	ldr	r3, [r4, #16]
 8010434:	b94b      	cbnz	r3, 801044a <__swsetup_r+0x9a>
 8010436:	89a3      	ldrh	r3, [r4, #12]
 8010438:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801043c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010440:	d003      	beq.n	801044a <__swsetup_r+0x9a>
 8010442:	4621      	mov	r1, r4
 8010444:	4630      	mov	r0, r6
 8010446:	f000 fa09 	bl	801085c <__smakebuf_r>
 801044a:	89a0      	ldrh	r0, [r4, #12]
 801044c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010450:	f010 0301 	ands.w	r3, r0, #1
 8010454:	d00a      	beq.n	801046c <__swsetup_r+0xbc>
 8010456:	2300      	movs	r3, #0
 8010458:	60a3      	str	r3, [r4, #8]
 801045a:	6963      	ldr	r3, [r4, #20]
 801045c:	425b      	negs	r3, r3
 801045e:	61a3      	str	r3, [r4, #24]
 8010460:	6923      	ldr	r3, [r4, #16]
 8010462:	b943      	cbnz	r3, 8010476 <__swsetup_r+0xc6>
 8010464:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010468:	d1ba      	bne.n	80103e0 <__swsetup_r+0x30>
 801046a:	bd70      	pop	{r4, r5, r6, pc}
 801046c:	0781      	lsls	r1, r0, #30
 801046e:	bf58      	it	pl
 8010470:	6963      	ldrpl	r3, [r4, #20]
 8010472:	60a3      	str	r3, [r4, #8]
 8010474:	e7f4      	b.n	8010460 <__swsetup_r+0xb0>
 8010476:	2000      	movs	r0, #0
 8010478:	e7f7      	b.n	801046a <__swsetup_r+0xba>
 801047a:	bf00      	nop
 801047c:	20000044 	.word	0x20000044
 8010480:	0801244c 	.word	0x0801244c
 8010484:	0801246c 	.word	0x0801246c
 8010488:	0801242c 	.word	0x0801242c

0801048c <abort>:
 801048c:	b508      	push	{r3, lr}
 801048e:	2006      	movs	r0, #6
 8010490:	f000 fa54 	bl	801093c <raise>
 8010494:	2001      	movs	r0, #1
 8010496:	f001 fdb7 	bl	8012008 <_exit>
	...

0801049c <__sflush_r>:
 801049c:	898a      	ldrh	r2, [r1, #12]
 801049e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104a2:	4605      	mov	r5, r0
 80104a4:	0710      	lsls	r0, r2, #28
 80104a6:	460c      	mov	r4, r1
 80104a8:	d458      	bmi.n	801055c <__sflush_r+0xc0>
 80104aa:	684b      	ldr	r3, [r1, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	dc05      	bgt.n	80104bc <__sflush_r+0x20>
 80104b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	dc02      	bgt.n	80104bc <__sflush_r+0x20>
 80104b6:	2000      	movs	r0, #0
 80104b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104be:	2e00      	cmp	r6, #0
 80104c0:	d0f9      	beq.n	80104b6 <__sflush_r+0x1a>
 80104c2:	2300      	movs	r3, #0
 80104c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80104c8:	682f      	ldr	r7, [r5, #0]
 80104ca:	602b      	str	r3, [r5, #0]
 80104cc:	d032      	beq.n	8010534 <__sflush_r+0x98>
 80104ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80104d0:	89a3      	ldrh	r3, [r4, #12]
 80104d2:	075a      	lsls	r2, r3, #29
 80104d4:	d505      	bpl.n	80104e2 <__sflush_r+0x46>
 80104d6:	6863      	ldr	r3, [r4, #4]
 80104d8:	1ac0      	subs	r0, r0, r3
 80104da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104dc:	b10b      	cbz	r3, 80104e2 <__sflush_r+0x46>
 80104de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104e0:	1ac0      	subs	r0, r0, r3
 80104e2:	2300      	movs	r3, #0
 80104e4:	4602      	mov	r2, r0
 80104e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104e8:	6a21      	ldr	r1, [r4, #32]
 80104ea:	4628      	mov	r0, r5
 80104ec:	47b0      	blx	r6
 80104ee:	1c43      	adds	r3, r0, #1
 80104f0:	89a3      	ldrh	r3, [r4, #12]
 80104f2:	d106      	bne.n	8010502 <__sflush_r+0x66>
 80104f4:	6829      	ldr	r1, [r5, #0]
 80104f6:	291d      	cmp	r1, #29
 80104f8:	d82c      	bhi.n	8010554 <__sflush_r+0xb8>
 80104fa:	4a2a      	ldr	r2, [pc, #168]	; (80105a4 <__sflush_r+0x108>)
 80104fc:	40ca      	lsrs	r2, r1
 80104fe:	07d6      	lsls	r6, r2, #31
 8010500:	d528      	bpl.n	8010554 <__sflush_r+0xb8>
 8010502:	2200      	movs	r2, #0
 8010504:	6062      	str	r2, [r4, #4]
 8010506:	04d9      	lsls	r1, r3, #19
 8010508:	6922      	ldr	r2, [r4, #16]
 801050a:	6022      	str	r2, [r4, #0]
 801050c:	d504      	bpl.n	8010518 <__sflush_r+0x7c>
 801050e:	1c42      	adds	r2, r0, #1
 8010510:	d101      	bne.n	8010516 <__sflush_r+0x7a>
 8010512:	682b      	ldr	r3, [r5, #0]
 8010514:	b903      	cbnz	r3, 8010518 <__sflush_r+0x7c>
 8010516:	6560      	str	r0, [r4, #84]	; 0x54
 8010518:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801051a:	602f      	str	r7, [r5, #0]
 801051c:	2900      	cmp	r1, #0
 801051e:	d0ca      	beq.n	80104b6 <__sflush_r+0x1a>
 8010520:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010524:	4299      	cmp	r1, r3
 8010526:	d002      	beq.n	801052e <__sflush_r+0x92>
 8010528:	4628      	mov	r0, r5
 801052a:	f7ff faa5 	bl	800fa78 <_free_r>
 801052e:	2000      	movs	r0, #0
 8010530:	6360      	str	r0, [r4, #52]	; 0x34
 8010532:	e7c1      	b.n	80104b8 <__sflush_r+0x1c>
 8010534:	6a21      	ldr	r1, [r4, #32]
 8010536:	2301      	movs	r3, #1
 8010538:	4628      	mov	r0, r5
 801053a:	47b0      	blx	r6
 801053c:	1c41      	adds	r1, r0, #1
 801053e:	d1c7      	bne.n	80104d0 <__sflush_r+0x34>
 8010540:	682b      	ldr	r3, [r5, #0]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d0c4      	beq.n	80104d0 <__sflush_r+0x34>
 8010546:	2b1d      	cmp	r3, #29
 8010548:	d001      	beq.n	801054e <__sflush_r+0xb2>
 801054a:	2b16      	cmp	r3, #22
 801054c:	d101      	bne.n	8010552 <__sflush_r+0xb6>
 801054e:	602f      	str	r7, [r5, #0]
 8010550:	e7b1      	b.n	80104b6 <__sflush_r+0x1a>
 8010552:	89a3      	ldrh	r3, [r4, #12]
 8010554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010558:	81a3      	strh	r3, [r4, #12]
 801055a:	e7ad      	b.n	80104b8 <__sflush_r+0x1c>
 801055c:	690f      	ldr	r7, [r1, #16]
 801055e:	2f00      	cmp	r7, #0
 8010560:	d0a9      	beq.n	80104b6 <__sflush_r+0x1a>
 8010562:	0793      	lsls	r3, r2, #30
 8010564:	680e      	ldr	r6, [r1, #0]
 8010566:	bf08      	it	eq
 8010568:	694b      	ldreq	r3, [r1, #20]
 801056a:	600f      	str	r7, [r1, #0]
 801056c:	bf18      	it	ne
 801056e:	2300      	movne	r3, #0
 8010570:	eba6 0807 	sub.w	r8, r6, r7
 8010574:	608b      	str	r3, [r1, #8]
 8010576:	f1b8 0f00 	cmp.w	r8, #0
 801057a:	dd9c      	ble.n	80104b6 <__sflush_r+0x1a>
 801057c:	6a21      	ldr	r1, [r4, #32]
 801057e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010580:	4643      	mov	r3, r8
 8010582:	463a      	mov	r2, r7
 8010584:	4628      	mov	r0, r5
 8010586:	47b0      	blx	r6
 8010588:	2800      	cmp	r0, #0
 801058a:	dc06      	bgt.n	801059a <__sflush_r+0xfe>
 801058c:	89a3      	ldrh	r3, [r4, #12]
 801058e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010592:	81a3      	strh	r3, [r4, #12]
 8010594:	f04f 30ff 	mov.w	r0, #4294967295
 8010598:	e78e      	b.n	80104b8 <__sflush_r+0x1c>
 801059a:	4407      	add	r7, r0
 801059c:	eba8 0800 	sub.w	r8, r8, r0
 80105a0:	e7e9      	b.n	8010576 <__sflush_r+0xda>
 80105a2:	bf00      	nop
 80105a4:	20400001 	.word	0x20400001

080105a8 <_fflush_r>:
 80105a8:	b538      	push	{r3, r4, r5, lr}
 80105aa:	690b      	ldr	r3, [r1, #16]
 80105ac:	4605      	mov	r5, r0
 80105ae:	460c      	mov	r4, r1
 80105b0:	b913      	cbnz	r3, 80105b8 <_fflush_r+0x10>
 80105b2:	2500      	movs	r5, #0
 80105b4:	4628      	mov	r0, r5
 80105b6:	bd38      	pop	{r3, r4, r5, pc}
 80105b8:	b118      	cbz	r0, 80105c2 <_fflush_r+0x1a>
 80105ba:	6983      	ldr	r3, [r0, #24]
 80105bc:	b90b      	cbnz	r3, 80105c2 <_fflush_r+0x1a>
 80105be:	f000 f887 	bl	80106d0 <__sinit>
 80105c2:	4b14      	ldr	r3, [pc, #80]	; (8010614 <_fflush_r+0x6c>)
 80105c4:	429c      	cmp	r4, r3
 80105c6:	d11b      	bne.n	8010600 <_fflush_r+0x58>
 80105c8:	686c      	ldr	r4, [r5, #4]
 80105ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d0ef      	beq.n	80105b2 <_fflush_r+0xa>
 80105d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80105d4:	07d0      	lsls	r0, r2, #31
 80105d6:	d404      	bmi.n	80105e2 <_fflush_r+0x3a>
 80105d8:	0599      	lsls	r1, r3, #22
 80105da:	d402      	bmi.n	80105e2 <_fflush_r+0x3a>
 80105dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105de:	f000 f915 	bl	801080c <__retarget_lock_acquire_recursive>
 80105e2:	4628      	mov	r0, r5
 80105e4:	4621      	mov	r1, r4
 80105e6:	f7ff ff59 	bl	801049c <__sflush_r>
 80105ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105ec:	07da      	lsls	r2, r3, #31
 80105ee:	4605      	mov	r5, r0
 80105f0:	d4e0      	bmi.n	80105b4 <_fflush_r+0xc>
 80105f2:	89a3      	ldrh	r3, [r4, #12]
 80105f4:	059b      	lsls	r3, r3, #22
 80105f6:	d4dd      	bmi.n	80105b4 <_fflush_r+0xc>
 80105f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105fa:	f000 f908 	bl	801080e <__retarget_lock_release_recursive>
 80105fe:	e7d9      	b.n	80105b4 <_fflush_r+0xc>
 8010600:	4b05      	ldr	r3, [pc, #20]	; (8010618 <_fflush_r+0x70>)
 8010602:	429c      	cmp	r4, r3
 8010604:	d101      	bne.n	801060a <_fflush_r+0x62>
 8010606:	68ac      	ldr	r4, [r5, #8]
 8010608:	e7df      	b.n	80105ca <_fflush_r+0x22>
 801060a:	4b04      	ldr	r3, [pc, #16]	; (801061c <_fflush_r+0x74>)
 801060c:	429c      	cmp	r4, r3
 801060e:	bf08      	it	eq
 8010610:	68ec      	ldreq	r4, [r5, #12]
 8010612:	e7da      	b.n	80105ca <_fflush_r+0x22>
 8010614:	0801244c 	.word	0x0801244c
 8010618:	0801246c 	.word	0x0801246c
 801061c:	0801242c 	.word	0x0801242c

08010620 <std>:
 8010620:	2300      	movs	r3, #0
 8010622:	b510      	push	{r4, lr}
 8010624:	4604      	mov	r4, r0
 8010626:	e9c0 3300 	strd	r3, r3, [r0]
 801062a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801062e:	6083      	str	r3, [r0, #8]
 8010630:	8181      	strh	r1, [r0, #12]
 8010632:	6643      	str	r3, [r0, #100]	; 0x64
 8010634:	81c2      	strh	r2, [r0, #14]
 8010636:	6183      	str	r3, [r0, #24]
 8010638:	4619      	mov	r1, r3
 801063a:	2208      	movs	r2, #8
 801063c:	305c      	adds	r0, #92	; 0x5c
 801063e:	f7fd fb57 	bl	800dcf0 <memset>
 8010642:	4b05      	ldr	r3, [pc, #20]	; (8010658 <std+0x38>)
 8010644:	6263      	str	r3, [r4, #36]	; 0x24
 8010646:	4b05      	ldr	r3, [pc, #20]	; (801065c <std+0x3c>)
 8010648:	62a3      	str	r3, [r4, #40]	; 0x28
 801064a:	4b05      	ldr	r3, [pc, #20]	; (8010660 <std+0x40>)
 801064c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801064e:	4b05      	ldr	r3, [pc, #20]	; (8010664 <std+0x44>)
 8010650:	6224      	str	r4, [r4, #32]
 8010652:	6323      	str	r3, [r4, #48]	; 0x30
 8010654:	bd10      	pop	{r4, pc}
 8010656:	bf00      	nop
 8010658:	08010975 	.word	0x08010975
 801065c:	08010997 	.word	0x08010997
 8010660:	080109cf 	.word	0x080109cf
 8010664:	080109f3 	.word	0x080109f3

08010668 <_cleanup_r>:
 8010668:	4901      	ldr	r1, [pc, #4]	; (8010670 <_cleanup_r+0x8>)
 801066a:	f000 b8af 	b.w	80107cc <_fwalk_reent>
 801066e:	bf00      	nop
 8010670:	080105a9 	.word	0x080105a9

08010674 <__sfmoreglue>:
 8010674:	b570      	push	{r4, r5, r6, lr}
 8010676:	2268      	movs	r2, #104	; 0x68
 8010678:	1e4d      	subs	r5, r1, #1
 801067a:	4355      	muls	r5, r2
 801067c:	460e      	mov	r6, r1
 801067e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010682:	f7ff fa65 	bl	800fb50 <_malloc_r>
 8010686:	4604      	mov	r4, r0
 8010688:	b140      	cbz	r0, 801069c <__sfmoreglue+0x28>
 801068a:	2100      	movs	r1, #0
 801068c:	e9c0 1600 	strd	r1, r6, [r0]
 8010690:	300c      	adds	r0, #12
 8010692:	60a0      	str	r0, [r4, #8]
 8010694:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010698:	f7fd fb2a 	bl	800dcf0 <memset>
 801069c:	4620      	mov	r0, r4
 801069e:	bd70      	pop	{r4, r5, r6, pc}

080106a0 <__sfp_lock_acquire>:
 80106a0:	4801      	ldr	r0, [pc, #4]	; (80106a8 <__sfp_lock_acquire+0x8>)
 80106a2:	f000 b8b3 	b.w	801080c <__retarget_lock_acquire_recursive>
 80106a6:	bf00      	nop
 80106a8:	20000cc5 	.word	0x20000cc5

080106ac <__sfp_lock_release>:
 80106ac:	4801      	ldr	r0, [pc, #4]	; (80106b4 <__sfp_lock_release+0x8>)
 80106ae:	f000 b8ae 	b.w	801080e <__retarget_lock_release_recursive>
 80106b2:	bf00      	nop
 80106b4:	20000cc5 	.word	0x20000cc5

080106b8 <__sinit_lock_acquire>:
 80106b8:	4801      	ldr	r0, [pc, #4]	; (80106c0 <__sinit_lock_acquire+0x8>)
 80106ba:	f000 b8a7 	b.w	801080c <__retarget_lock_acquire_recursive>
 80106be:	bf00      	nop
 80106c0:	20000cc6 	.word	0x20000cc6

080106c4 <__sinit_lock_release>:
 80106c4:	4801      	ldr	r0, [pc, #4]	; (80106cc <__sinit_lock_release+0x8>)
 80106c6:	f000 b8a2 	b.w	801080e <__retarget_lock_release_recursive>
 80106ca:	bf00      	nop
 80106cc:	20000cc6 	.word	0x20000cc6

080106d0 <__sinit>:
 80106d0:	b510      	push	{r4, lr}
 80106d2:	4604      	mov	r4, r0
 80106d4:	f7ff fff0 	bl	80106b8 <__sinit_lock_acquire>
 80106d8:	69a3      	ldr	r3, [r4, #24]
 80106da:	b11b      	cbz	r3, 80106e4 <__sinit+0x14>
 80106dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106e0:	f7ff bff0 	b.w	80106c4 <__sinit_lock_release>
 80106e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80106e8:	6523      	str	r3, [r4, #80]	; 0x50
 80106ea:	4b13      	ldr	r3, [pc, #76]	; (8010738 <__sinit+0x68>)
 80106ec:	4a13      	ldr	r2, [pc, #76]	; (801073c <__sinit+0x6c>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80106f2:	42a3      	cmp	r3, r4
 80106f4:	bf04      	itt	eq
 80106f6:	2301      	moveq	r3, #1
 80106f8:	61a3      	streq	r3, [r4, #24]
 80106fa:	4620      	mov	r0, r4
 80106fc:	f000 f820 	bl	8010740 <__sfp>
 8010700:	6060      	str	r0, [r4, #4]
 8010702:	4620      	mov	r0, r4
 8010704:	f000 f81c 	bl	8010740 <__sfp>
 8010708:	60a0      	str	r0, [r4, #8]
 801070a:	4620      	mov	r0, r4
 801070c:	f000 f818 	bl	8010740 <__sfp>
 8010710:	2200      	movs	r2, #0
 8010712:	60e0      	str	r0, [r4, #12]
 8010714:	2104      	movs	r1, #4
 8010716:	6860      	ldr	r0, [r4, #4]
 8010718:	f7ff ff82 	bl	8010620 <std>
 801071c:	68a0      	ldr	r0, [r4, #8]
 801071e:	2201      	movs	r2, #1
 8010720:	2109      	movs	r1, #9
 8010722:	f7ff ff7d 	bl	8010620 <std>
 8010726:	68e0      	ldr	r0, [r4, #12]
 8010728:	2202      	movs	r2, #2
 801072a:	2112      	movs	r1, #18
 801072c:	f7ff ff78 	bl	8010620 <std>
 8010730:	2301      	movs	r3, #1
 8010732:	61a3      	str	r3, [r4, #24]
 8010734:	e7d2      	b.n	80106dc <__sinit+0xc>
 8010736:	bf00      	nop
 8010738:	080120b0 	.word	0x080120b0
 801073c:	08010669 	.word	0x08010669

08010740 <__sfp>:
 8010740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010742:	4607      	mov	r7, r0
 8010744:	f7ff ffac 	bl	80106a0 <__sfp_lock_acquire>
 8010748:	4b1e      	ldr	r3, [pc, #120]	; (80107c4 <__sfp+0x84>)
 801074a:	681e      	ldr	r6, [r3, #0]
 801074c:	69b3      	ldr	r3, [r6, #24]
 801074e:	b913      	cbnz	r3, 8010756 <__sfp+0x16>
 8010750:	4630      	mov	r0, r6
 8010752:	f7ff ffbd 	bl	80106d0 <__sinit>
 8010756:	3648      	adds	r6, #72	; 0x48
 8010758:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801075c:	3b01      	subs	r3, #1
 801075e:	d503      	bpl.n	8010768 <__sfp+0x28>
 8010760:	6833      	ldr	r3, [r6, #0]
 8010762:	b30b      	cbz	r3, 80107a8 <__sfp+0x68>
 8010764:	6836      	ldr	r6, [r6, #0]
 8010766:	e7f7      	b.n	8010758 <__sfp+0x18>
 8010768:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801076c:	b9d5      	cbnz	r5, 80107a4 <__sfp+0x64>
 801076e:	4b16      	ldr	r3, [pc, #88]	; (80107c8 <__sfp+0x88>)
 8010770:	60e3      	str	r3, [r4, #12]
 8010772:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010776:	6665      	str	r5, [r4, #100]	; 0x64
 8010778:	f000 f847 	bl	801080a <__retarget_lock_init_recursive>
 801077c:	f7ff ff96 	bl	80106ac <__sfp_lock_release>
 8010780:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010784:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010788:	6025      	str	r5, [r4, #0]
 801078a:	61a5      	str	r5, [r4, #24]
 801078c:	2208      	movs	r2, #8
 801078e:	4629      	mov	r1, r5
 8010790:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010794:	f7fd faac 	bl	800dcf0 <memset>
 8010798:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801079c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80107a0:	4620      	mov	r0, r4
 80107a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107a4:	3468      	adds	r4, #104	; 0x68
 80107a6:	e7d9      	b.n	801075c <__sfp+0x1c>
 80107a8:	2104      	movs	r1, #4
 80107aa:	4638      	mov	r0, r7
 80107ac:	f7ff ff62 	bl	8010674 <__sfmoreglue>
 80107b0:	4604      	mov	r4, r0
 80107b2:	6030      	str	r0, [r6, #0]
 80107b4:	2800      	cmp	r0, #0
 80107b6:	d1d5      	bne.n	8010764 <__sfp+0x24>
 80107b8:	f7ff ff78 	bl	80106ac <__sfp_lock_release>
 80107bc:	230c      	movs	r3, #12
 80107be:	603b      	str	r3, [r7, #0]
 80107c0:	e7ee      	b.n	80107a0 <__sfp+0x60>
 80107c2:	bf00      	nop
 80107c4:	080120b0 	.word	0x080120b0
 80107c8:	ffff0001 	.word	0xffff0001

080107cc <_fwalk_reent>:
 80107cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107d0:	4606      	mov	r6, r0
 80107d2:	4688      	mov	r8, r1
 80107d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80107d8:	2700      	movs	r7, #0
 80107da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80107de:	f1b9 0901 	subs.w	r9, r9, #1
 80107e2:	d505      	bpl.n	80107f0 <_fwalk_reent+0x24>
 80107e4:	6824      	ldr	r4, [r4, #0]
 80107e6:	2c00      	cmp	r4, #0
 80107e8:	d1f7      	bne.n	80107da <_fwalk_reent+0xe>
 80107ea:	4638      	mov	r0, r7
 80107ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107f0:	89ab      	ldrh	r3, [r5, #12]
 80107f2:	2b01      	cmp	r3, #1
 80107f4:	d907      	bls.n	8010806 <_fwalk_reent+0x3a>
 80107f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80107fa:	3301      	adds	r3, #1
 80107fc:	d003      	beq.n	8010806 <_fwalk_reent+0x3a>
 80107fe:	4629      	mov	r1, r5
 8010800:	4630      	mov	r0, r6
 8010802:	47c0      	blx	r8
 8010804:	4307      	orrs	r7, r0
 8010806:	3568      	adds	r5, #104	; 0x68
 8010808:	e7e9      	b.n	80107de <_fwalk_reent+0x12>

0801080a <__retarget_lock_init_recursive>:
 801080a:	4770      	bx	lr

0801080c <__retarget_lock_acquire_recursive>:
 801080c:	4770      	bx	lr

0801080e <__retarget_lock_release_recursive>:
 801080e:	4770      	bx	lr

08010810 <__swhatbuf_r>:
 8010810:	b570      	push	{r4, r5, r6, lr}
 8010812:	460e      	mov	r6, r1
 8010814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010818:	2900      	cmp	r1, #0
 801081a:	b096      	sub	sp, #88	; 0x58
 801081c:	4614      	mov	r4, r2
 801081e:	461d      	mov	r5, r3
 8010820:	da08      	bge.n	8010834 <__swhatbuf_r+0x24>
 8010822:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010826:	2200      	movs	r2, #0
 8010828:	602a      	str	r2, [r5, #0]
 801082a:	061a      	lsls	r2, r3, #24
 801082c:	d410      	bmi.n	8010850 <__swhatbuf_r+0x40>
 801082e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010832:	e00e      	b.n	8010852 <__swhatbuf_r+0x42>
 8010834:	466a      	mov	r2, sp
 8010836:	f000 f903 	bl	8010a40 <_fstat_r>
 801083a:	2800      	cmp	r0, #0
 801083c:	dbf1      	blt.n	8010822 <__swhatbuf_r+0x12>
 801083e:	9a01      	ldr	r2, [sp, #4]
 8010840:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010844:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010848:	425a      	negs	r2, r3
 801084a:	415a      	adcs	r2, r3
 801084c:	602a      	str	r2, [r5, #0]
 801084e:	e7ee      	b.n	801082e <__swhatbuf_r+0x1e>
 8010850:	2340      	movs	r3, #64	; 0x40
 8010852:	2000      	movs	r0, #0
 8010854:	6023      	str	r3, [r4, #0]
 8010856:	b016      	add	sp, #88	; 0x58
 8010858:	bd70      	pop	{r4, r5, r6, pc}
	...

0801085c <__smakebuf_r>:
 801085c:	898b      	ldrh	r3, [r1, #12]
 801085e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010860:	079d      	lsls	r5, r3, #30
 8010862:	4606      	mov	r6, r0
 8010864:	460c      	mov	r4, r1
 8010866:	d507      	bpl.n	8010878 <__smakebuf_r+0x1c>
 8010868:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801086c:	6023      	str	r3, [r4, #0]
 801086e:	6123      	str	r3, [r4, #16]
 8010870:	2301      	movs	r3, #1
 8010872:	6163      	str	r3, [r4, #20]
 8010874:	b002      	add	sp, #8
 8010876:	bd70      	pop	{r4, r5, r6, pc}
 8010878:	ab01      	add	r3, sp, #4
 801087a:	466a      	mov	r2, sp
 801087c:	f7ff ffc8 	bl	8010810 <__swhatbuf_r>
 8010880:	9900      	ldr	r1, [sp, #0]
 8010882:	4605      	mov	r5, r0
 8010884:	4630      	mov	r0, r6
 8010886:	f7ff f963 	bl	800fb50 <_malloc_r>
 801088a:	b948      	cbnz	r0, 80108a0 <__smakebuf_r+0x44>
 801088c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010890:	059a      	lsls	r2, r3, #22
 8010892:	d4ef      	bmi.n	8010874 <__smakebuf_r+0x18>
 8010894:	f023 0303 	bic.w	r3, r3, #3
 8010898:	f043 0302 	orr.w	r3, r3, #2
 801089c:	81a3      	strh	r3, [r4, #12]
 801089e:	e7e3      	b.n	8010868 <__smakebuf_r+0xc>
 80108a0:	4b0d      	ldr	r3, [pc, #52]	; (80108d8 <__smakebuf_r+0x7c>)
 80108a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80108a4:	89a3      	ldrh	r3, [r4, #12]
 80108a6:	6020      	str	r0, [r4, #0]
 80108a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108ac:	81a3      	strh	r3, [r4, #12]
 80108ae:	9b00      	ldr	r3, [sp, #0]
 80108b0:	6163      	str	r3, [r4, #20]
 80108b2:	9b01      	ldr	r3, [sp, #4]
 80108b4:	6120      	str	r0, [r4, #16]
 80108b6:	b15b      	cbz	r3, 80108d0 <__smakebuf_r+0x74>
 80108b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108bc:	4630      	mov	r0, r6
 80108be:	f000 f8d1 	bl	8010a64 <_isatty_r>
 80108c2:	b128      	cbz	r0, 80108d0 <__smakebuf_r+0x74>
 80108c4:	89a3      	ldrh	r3, [r4, #12]
 80108c6:	f023 0303 	bic.w	r3, r3, #3
 80108ca:	f043 0301 	orr.w	r3, r3, #1
 80108ce:	81a3      	strh	r3, [r4, #12]
 80108d0:	89a0      	ldrh	r0, [r4, #12]
 80108d2:	4305      	orrs	r5, r0
 80108d4:	81a5      	strh	r5, [r4, #12]
 80108d6:	e7cd      	b.n	8010874 <__smakebuf_r+0x18>
 80108d8:	08010669 	.word	0x08010669

080108dc <_malloc_usable_size_r>:
 80108dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108e0:	1f18      	subs	r0, r3, #4
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	bfbc      	itt	lt
 80108e6:	580b      	ldrlt	r3, [r1, r0]
 80108e8:	18c0      	addlt	r0, r0, r3
 80108ea:	4770      	bx	lr

080108ec <_raise_r>:
 80108ec:	291f      	cmp	r1, #31
 80108ee:	b538      	push	{r3, r4, r5, lr}
 80108f0:	4604      	mov	r4, r0
 80108f2:	460d      	mov	r5, r1
 80108f4:	d904      	bls.n	8010900 <_raise_r+0x14>
 80108f6:	2316      	movs	r3, #22
 80108f8:	6003      	str	r3, [r0, #0]
 80108fa:	f04f 30ff 	mov.w	r0, #4294967295
 80108fe:	bd38      	pop	{r3, r4, r5, pc}
 8010900:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010902:	b112      	cbz	r2, 801090a <_raise_r+0x1e>
 8010904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010908:	b94b      	cbnz	r3, 801091e <_raise_r+0x32>
 801090a:	4620      	mov	r0, r4
 801090c:	f000 f830 	bl	8010970 <_getpid_r>
 8010910:	462a      	mov	r2, r5
 8010912:	4601      	mov	r1, r0
 8010914:	4620      	mov	r0, r4
 8010916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801091a:	f000 b817 	b.w	801094c <_kill_r>
 801091e:	2b01      	cmp	r3, #1
 8010920:	d00a      	beq.n	8010938 <_raise_r+0x4c>
 8010922:	1c59      	adds	r1, r3, #1
 8010924:	d103      	bne.n	801092e <_raise_r+0x42>
 8010926:	2316      	movs	r3, #22
 8010928:	6003      	str	r3, [r0, #0]
 801092a:	2001      	movs	r0, #1
 801092c:	e7e7      	b.n	80108fe <_raise_r+0x12>
 801092e:	2400      	movs	r4, #0
 8010930:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010934:	4628      	mov	r0, r5
 8010936:	4798      	blx	r3
 8010938:	2000      	movs	r0, #0
 801093a:	e7e0      	b.n	80108fe <_raise_r+0x12>

0801093c <raise>:
 801093c:	4b02      	ldr	r3, [pc, #8]	; (8010948 <raise+0xc>)
 801093e:	4601      	mov	r1, r0
 8010940:	6818      	ldr	r0, [r3, #0]
 8010942:	f7ff bfd3 	b.w	80108ec <_raise_r>
 8010946:	bf00      	nop
 8010948:	20000044 	.word	0x20000044

0801094c <_kill_r>:
 801094c:	b538      	push	{r3, r4, r5, lr}
 801094e:	4d07      	ldr	r5, [pc, #28]	; (801096c <_kill_r+0x20>)
 8010950:	2300      	movs	r3, #0
 8010952:	4604      	mov	r4, r0
 8010954:	4608      	mov	r0, r1
 8010956:	4611      	mov	r1, r2
 8010958:	602b      	str	r3, [r5, #0]
 801095a:	f001 fb27 	bl	8011fac <_kill>
 801095e:	1c43      	adds	r3, r0, #1
 8010960:	d102      	bne.n	8010968 <_kill_r+0x1c>
 8010962:	682b      	ldr	r3, [r5, #0]
 8010964:	b103      	cbz	r3, 8010968 <_kill_r+0x1c>
 8010966:	6023      	str	r3, [r4, #0]
 8010968:	bd38      	pop	{r3, r4, r5, pc}
 801096a:	bf00      	nop
 801096c:	20000cc0 	.word	0x20000cc0

08010970 <_getpid_r>:
 8010970:	f001 bb0c 	b.w	8011f8c <_getpid>

08010974 <__sread>:
 8010974:	b510      	push	{r4, lr}
 8010976:	460c      	mov	r4, r1
 8010978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801097c:	f000 f894 	bl	8010aa8 <_read_r>
 8010980:	2800      	cmp	r0, #0
 8010982:	bfab      	itete	ge
 8010984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010986:	89a3      	ldrhlt	r3, [r4, #12]
 8010988:	181b      	addge	r3, r3, r0
 801098a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801098e:	bfac      	ite	ge
 8010990:	6563      	strge	r3, [r4, #84]	; 0x54
 8010992:	81a3      	strhlt	r3, [r4, #12]
 8010994:	bd10      	pop	{r4, pc}

08010996 <__swrite>:
 8010996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801099a:	461f      	mov	r7, r3
 801099c:	898b      	ldrh	r3, [r1, #12]
 801099e:	05db      	lsls	r3, r3, #23
 80109a0:	4605      	mov	r5, r0
 80109a2:	460c      	mov	r4, r1
 80109a4:	4616      	mov	r6, r2
 80109a6:	d505      	bpl.n	80109b4 <__swrite+0x1e>
 80109a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109ac:	2302      	movs	r3, #2
 80109ae:	2200      	movs	r2, #0
 80109b0:	f000 f868 	bl	8010a84 <_lseek_r>
 80109b4:	89a3      	ldrh	r3, [r4, #12]
 80109b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80109be:	81a3      	strh	r3, [r4, #12]
 80109c0:	4632      	mov	r2, r6
 80109c2:	463b      	mov	r3, r7
 80109c4:	4628      	mov	r0, r5
 80109c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109ca:	f000 b817 	b.w	80109fc <_write_r>

080109ce <__sseek>:
 80109ce:	b510      	push	{r4, lr}
 80109d0:	460c      	mov	r4, r1
 80109d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109d6:	f000 f855 	bl	8010a84 <_lseek_r>
 80109da:	1c43      	adds	r3, r0, #1
 80109dc:	89a3      	ldrh	r3, [r4, #12]
 80109de:	bf15      	itete	ne
 80109e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80109e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80109e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80109ea:	81a3      	strheq	r3, [r4, #12]
 80109ec:	bf18      	it	ne
 80109ee:	81a3      	strhne	r3, [r4, #12]
 80109f0:	bd10      	pop	{r4, pc}

080109f2 <__sclose>:
 80109f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109f6:	f000 b813 	b.w	8010a20 <_close_r>
	...

080109fc <_write_r>:
 80109fc:	b538      	push	{r3, r4, r5, lr}
 80109fe:	4d07      	ldr	r5, [pc, #28]	; (8010a1c <_write_r+0x20>)
 8010a00:	4604      	mov	r4, r0
 8010a02:	4608      	mov	r0, r1
 8010a04:	4611      	mov	r1, r2
 8010a06:	2200      	movs	r2, #0
 8010a08:	602a      	str	r2, [r5, #0]
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	f001 faf4 	bl	8011ff8 <_write>
 8010a10:	1c43      	adds	r3, r0, #1
 8010a12:	d102      	bne.n	8010a1a <_write_r+0x1e>
 8010a14:	682b      	ldr	r3, [r5, #0]
 8010a16:	b103      	cbz	r3, 8010a1a <_write_r+0x1e>
 8010a18:	6023      	str	r3, [r4, #0]
 8010a1a:	bd38      	pop	{r3, r4, r5, pc}
 8010a1c:	20000cc0 	.word	0x20000cc0

08010a20 <_close_r>:
 8010a20:	b538      	push	{r3, r4, r5, lr}
 8010a22:	4d06      	ldr	r5, [pc, #24]	; (8010a3c <_close_r+0x1c>)
 8010a24:	2300      	movs	r3, #0
 8010a26:	4604      	mov	r4, r0
 8010a28:	4608      	mov	r0, r1
 8010a2a:	602b      	str	r3, [r5, #0]
 8010a2c:	f001 fa9e 	bl	8011f6c <_close>
 8010a30:	1c43      	adds	r3, r0, #1
 8010a32:	d102      	bne.n	8010a3a <_close_r+0x1a>
 8010a34:	682b      	ldr	r3, [r5, #0]
 8010a36:	b103      	cbz	r3, 8010a3a <_close_r+0x1a>
 8010a38:	6023      	str	r3, [r4, #0]
 8010a3a:	bd38      	pop	{r3, r4, r5, pc}
 8010a3c:	20000cc0 	.word	0x20000cc0

08010a40 <_fstat_r>:
 8010a40:	b538      	push	{r3, r4, r5, lr}
 8010a42:	4d07      	ldr	r5, [pc, #28]	; (8010a60 <_fstat_r+0x20>)
 8010a44:	2300      	movs	r3, #0
 8010a46:	4604      	mov	r4, r0
 8010a48:	4608      	mov	r0, r1
 8010a4a:	4611      	mov	r1, r2
 8010a4c:	602b      	str	r3, [r5, #0]
 8010a4e:	f001 fa95 	bl	8011f7c <_fstat>
 8010a52:	1c43      	adds	r3, r0, #1
 8010a54:	d102      	bne.n	8010a5c <_fstat_r+0x1c>
 8010a56:	682b      	ldr	r3, [r5, #0]
 8010a58:	b103      	cbz	r3, 8010a5c <_fstat_r+0x1c>
 8010a5a:	6023      	str	r3, [r4, #0]
 8010a5c:	bd38      	pop	{r3, r4, r5, pc}
 8010a5e:	bf00      	nop
 8010a60:	20000cc0 	.word	0x20000cc0

08010a64 <_isatty_r>:
 8010a64:	b538      	push	{r3, r4, r5, lr}
 8010a66:	4d06      	ldr	r5, [pc, #24]	; (8010a80 <_isatty_r+0x1c>)
 8010a68:	2300      	movs	r3, #0
 8010a6a:	4604      	mov	r4, r0
 8010a6c:	4608      	mov	r0, r1
 8010a6e:	602b      	str	r3, [r5, #0]
 8010a70:	f001 fa94 	bl	8011f9c <_isatty>
 8010a74:	1c43      	adds	r3, r0, #1
 8010a76:	d102      	bne.n	8010a7e <_isatty_r+0x1a>
 8010a78:	682b      	ldr	r3, [r5, #0]
 8010a7a:	b103      	cbz	r3, 8010a7e <_isatty_r+0x1a>
 8010a7c:	6023      	str	r3, [r4, #0]
 8010a7e:	bd38      	pop	{r3, r4, r5, pc}
 8010a80:	20000cc0 	.word	0x20000cc0

08010a84 <_lseek_r>:
 8010a84:	b538      	push	{r3, r4, r5, lr}
 8010a86:	4d07      	ldr	r5, [pc, #28]	; (8010aa4 <_lseek_r+0x20>)
 8010a88:	4604      	mov	r4, r0
 8010a8a:	4608      	mov	r0, r1
 8010a8c:	4611      	mov	r1, r2
 8010a8e:	2200      	movs	r2, #0
 8010a90:	602a      	str	r2, [r5, #0]
 8010a92:	461a      	mov	r2, r3
 8010a94:	f001 fa92 	bl	8011fbc <_lseek>
 8010a98:	1c43      	adds	r3, r0, #1
 8010a9a:	d102      	bne.n	8010aa2 <_lseek_r+0x1e>
 8010a9c:	682b      	ldr	r3, [r5, #0]
 8010a9e:	b103      	cbz	r3, 8010aa2 <_lseek_r+0x1e>
 8010aa0:	6023      	str	r3, [r4, #0]
 8010aa2:	bd38      	pop	{r3, r4, r5, pc}
 8010aa4:	20000cc0 	.word	0x20000cc0

08010aa8 <_read_r>:
 8010aa8:	b538      	push	{r3, r4, r5, lr}
 8010aaa:	4d07      	ldr	r5, [pc, #28]	; (8010ac8 <_read_r+0x20>)
 8010aac:	4604      	mov	r4, r0
 8010aae:	4608      	mov	r0, r1
 8010ab0:	4611      	mov	r1, r2
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	602a      	str	r2, [r5, #0]
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	f001 fa88 	bl	8011fcc <_read>
 8010abc:	1c43      	adds	r3, r0, #1
 8010abe:	d102      	bne.n	8010ac6 <_read_r+0x1e>
 8010ac0:	682b      	ldr	r3, [r5, #0]
 8010ac2:	b103      	cbz	r3, 8010ac6 <_read_r+0x1e>
 8010ac4:	6023      	str	r3, [r4, #0]
 8010ac6:	bd38      	pop	{r3, r4, r5, pc}
 8010ac8:	20000cc0 	.word	0x20000cc0
 8010acc:	00000000 	.word	0x00000000

08010ad0 <atan>:
 8010ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad4:	ec55 4b10 	vmov	r4, r5, d0
 8010ad8:	4bc3      	ldr	r3, [pc, #780]	; (8010de8 <atan+0x318>)
 8010ada:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010ade:	429e      	cmp	r6, r3
 8010ae0:	46ab      	mov	fp, r5
 8010ae2:	dd18      	ble.n	8010b16 <atan+0x46>
 8010ae4:	4bc1      	ldr	r3, [pc, #772]	; (8010dec <atan+0x31c>)
 8010ae6:	429e      	cmp	r6, r3
 8010ae8:	dc01      	bgt.n	8010aee <atan+0x1e>
 8010aea:	d109      	bne.n	8010b00 <atan+0x30>
 8010aec:	b144      	cbz	r4, 8010b00 <atan+0x30>
 8010aee:	4622      	mov	r2, r4
 8010af0:	462b      	mov	r3, r5
 8010af2:	4620      	mov	r0, r4
 8010af4:	4629      	mov	r1, r5
 8010af6:	f7ef fbe9 	bl	80002cc <__adddf3>
 8010afa:	4604      	mov	r4, r0
 8010afc:	460d      	mov	r5, r1
 8010afe:	e006      	b.n	8010b0e <atan+0x3e>
 8010b00:	f1bb 0f00 	cmp.w	fp, #0
 8010b04:	f300 8131 	bgt.w	8010d6a <atan+0x29a>
 8010b08:	a59b      	add	r5, pc, #620	; (adr r5, 8010d78 <atan+0x2a8>)
 8010b0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010b0e:	ec45 4b10 	vmov	d0, r4, r5
 8010b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b16:	4bb6      	ldr	r3, [pc, #728]	; (8010df0 <atan+0x320>)
 8010b18:	429e      	cmp	r6, r3
 8010b1a:	dc14      	bgt.n	8010b46 <atan+0x76>
 8010b1c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010b20:	429e      	cmp	r6, r3
 8010b22:	dc0d      	bgt.n	8010b40 <atan+0x70>
 8010b24:	a396      	add	r3, pc, #600	; (adr r3, 8010d80 <atan+0x2b0>)
 8010b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b2a:	ee10 0a10 	vmov	r0, s0
 8010b2e:	4629      	mov	r1, r5
 8010b30:	f7ef fbcc 	bl	80002cc <__adddf3>
 8010b34:	4baf      	ldr	r3, [pc, #700]	; (8010df4 <atan+0x324>)
 8010b36:	2200      	movs	r2, #0
 8010b38:	f7f0 f80e 	bl	8000b58 <__aeabi_dcmpgt>
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	d1e6      	bne.n	8010b0e <atan+0x3e>
 8010b40:	f04f 3aff 	mov.w	sl, #4294967295
 8010b44:	e02b      	b.n	8010b9e <atan+0xce>
 8010b46:	f000 f963 	bl	8010e10 <fabs>
 8010b4a:	4bab      	ldr	r3, [pc, #684]	; (8010df8 <atan+0x328>)
 8010b4c:	429e      	cmp	r6, r3
 8010b4e:	ec55 4b10 	vmov	r4, r5, d0
 8010b52:	f300 80bf 	bgt.w	8010cd4 <atan+0x204>
 8010b56:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010b5a:	429e      	cmp	r6, r3
 8010b5c:	f300 80a0 	bgt.w	8010ca0 <atan+0x1d0>
 8010b60:	ee10 2a10 	vmov	r2, s0
 8010b64:	ee10 0a10 	vmov	r0, s0
 8010b68:	462b      	mov	r3, r5
 8010b6a:	4629      	mov	r1, r5
 8010b6c:	f7ef fbae 	bl	80002cc <__adddf3>
 8010b70:	4ba0      	ldr	r3, [pc, #640]	; (8010df4 <atan+0x324>)
 8010b72:	2200      	movs	r2, #0
 8010b74:	f7ef fba8 	bl	80002c8 <__aeabi_dsub>
 8010b78:	2200      	movs	r2, #0
 8010b7a:	4606      	mov	r6, r0
 8010b7c:	460f      	mov	r7, r1
 8010b7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010b82:	4620      	mov	r0, r4
 8010b84:	4629      	mov	r1, r5
 8010b86:	f7ef fba1 	bl	80002cc <__adddf3>
 8010b8a:	4602      	mov	r2, r0
 8010b8c:	460b      	mov	r3, r1
 8010b8e:	4630      	mov	r0, r6
 8010b90:	4639      	mov	r1, r7
 8010b92:	f7ef fe7b 	bl	800088c <__aeabi_ddiv>
 8010b96:	f04f 0a00 	mov.w	sl, #0
 8010b9a:	4604      	mov	r4, r0
 8010b9c:	460d      	mov	r5, r1
 8010b9e:	4622      	mov	r2, r4
 8010ba0:	462b      	mov	r3, r5
 8010ba2:	4620      	mov	r0, r4
 8010ba4:	4629      	mov	r1, r5
 8010ba6:	f7ef fd47 	bl	8000638 <__aeabi_dmul>
 8010baa:	4602      	mov	r2, r0
 8010bac:	460b      	mov	r3, r1
 8010bae:	4680      	mov	r8, r0
 8010bb0:	4689      	mov	r9, r1
 8010bb2:	f7ef fd41 	bl	8000638 <__aeabi_dmul>
 8010bb6:	a374      	add	r3, pc, #464	; (adr r3, 8010d88 <atan+0x2b8>)
 8010bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bbc:	4606      	mov	r6, r0
 8010bbe:	460f      	mov	r7, r1
 8010bc0:	f7ef fd3a 	bl	8000638 <__aeabi_dmul>
 8010bc4:	a372      	add	r3, pc, #456	; (adr r3, 8010d90 <atan+0x2c0>)
 8010bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bca:	f7ef fb7f 	bl	80002cc <__adddf3>
 8010bce:	4632      	mov	r2, r6
 8010bd0:	463b      	mov	r3, r7
 8010bd2:	f7ef fd31 	bl	8000638 <__aeabi_dmul>
 8010bd6:	a370      	add	r3, pc, #448	; (adr r3, 8010d98 <atan+0x2c8>)
 8010bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bdc:	f7ef fb76 	bl	80002cc <__adddf3>
 8010be0:	4632      	mov	r2, r6
 8010be2:	463b      	mov	r3, r7
 8010be4:	f7ef fd28 	bl	8000638 <__aeabi_dmul>
 8010be8:	a36d      	add	r3, pc, #436	; (adr r3, 8010da0 <atan+0x2d0>)
 8010bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bee:	f7ef fb6d 	bl	80002cc <__adddf3>
 8010bf2:	4632      	mov	r2, r6
 8010bf4:	463b      	mov	r3, r7
 8010bf6:	f7ef fd1f 	bl	8000638 <__aeabi_dmul>
 8010bfa:	a36b      	add	r3, pc, #428	; (adr r3, 8010da8 <atan+0x2d8>)
 8010bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c00:	f7ef fb64 	bl	80002cc <__adddf3>
 8010c04:	4632      	mov	r2, r6
 8010c06:	463b      	mov	r3, r7
 8010c08:	f7ef fd16 	bl	8000638 <__aeabi_dmul>
 8010c0c:	a368      	add	r3, pc, #416	; (adr r3, 8010db0 <atan+0x2e0>)
 8010c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c12:	f7ef fb5b 	bl	80002cc <__adddf3>
 8010c16:	4642      	mov	r2, r8
 8010c18:	464b      	mov	r3, r9
 8010c1a:	f7ef fd0d 	bl	8000638 <__aeabi_dmul>
 8010c1e:	a366      	add	r3, pc, #408	; (adr r3, 8010db8 <atan+0x2e8>)
 8010c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c24:	4680      	mov	r8, r0
 8010c26:	4689      	mov	r9, r1
 8010c28:	4630      	mov	r0, r6
 8010c2a:	4639      	mov	r1, r7
 8010c2c:	f7ef fd04 	bl	8000638 <__aeabi_dmul>
 8010c30:	a363      	add	r3, pc, #396	; (adr r3, 8010dc0 <atan+0x2f0>)
 8010c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c36:	f7ef fb47 	bl	80002c8 <__aeabi_dsub>
 8010c3a:	4632      	mov	r2, r6
 8010c3c:	463b      	mov	r3, r7
 8010c3e:	f7ef fcfb 	bl	8000638 <__aeabi_dmul>
 8010c42:	a361      	add	r3, pc, #388	; (adr r3, 8010dc8 <atan+0x2f8>)
 8010c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c48:	f7ef fb3e 	bl	80002c8 <__aeabi_dsub>
 8010c4c:	4632      	mov	r2, r6
 8010c4e:	463b      	mov	r3, r7
 8010c50:	f7ef fcf2 	bl	8000638 <__aeabi_dmul>
 8010c54:	a35e      	add	r3, pc, #376	; (adr r3, 8010dd0 <atan+0x300>)
 8010c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5a:	f7ef fb35 	bl	80002c8 <__aeabi_dsub>
 8010c5e:	4632      	mov	r2, r6
 8010c60:	463b      	mov	r3, r7
 8010c62:	f7ef fce9 	bl	8000638 <__aeabi_dmul>
 8010c66:	a35c      	add	r3, pc, #368	; (adr r3, 8010dd8 <atan+0x308>)
 8010c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6c:	f7ef fb2c 	bl	80002c8 <__aeabi_dsub>
 8010c70:	4632      	mov	r2, r6
 8010c72:	463b      	mov	r3, r7
 8010c74:	f7ef fce0 	bl	8000638 <__aeabi_dmul>
 8010c78:	4602      	mov	r2, r0
 8010c7a:	460b      	mov	r3, r1
 8010c7c:	4640      	mov	r0, r8
 8010c7e:	4649      	mov	r1, r9
 8010c80:	f7ef fb24 	bl	80002cc <__adddf3>
 8010c84:	4622      	mov	r2, r4
 8010c86:	462b      	mov	r3, r5
 8010c88:	f7ef fcd6 	bl	8000638 <__aeabi_dmul>
 8010c8c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010c90:	4602      	mov	r2, r0
 8010c92:	460b      	mov	r3, r1
 8010c94:	d14b      	bne.n	8010d2e <atan+0x25e>
 8010c96:	4620      	mov	r0, r4
 8010c98:	4629      	mov	r1, r5
 8010c9a:	f7ef fb15 	bl	80002c8 <__aeabi_dsub>
 8010c9e:	e72c      	b.n	8010afa <atan+0x2a>
 8010ca0:	ee10 0a10 	vmov	r0, s0
 8010ca4:	4b53      	ldr	r3, [pc, #332]	; (8010df4 <atan+0x324>)
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	4629      	mov	r1, r5
 8010caa:	f7ef fb0d 	bl	80002c8 <__aeabi_dsub>
 8010cae:	4b51      	ldr	r3, [pc, #324]	; (8010df4 <atan+0x324>)
 8010cb0:	4606      	mov	r6, r0
 8010cb2:	460f      	mov	r7, r1
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	4620      	mov	r0, r4
 8010cb8:	4629      	mov	r1, r5
 8010cba:	f7ef fb07 	bl	80002cc <__adddf3>
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	460b      	mov	r3, r1
 8010cc2:	4630      	mov	r0, r6
 8010cc4:	4639      	mov	r1, r7
 8010cc6:	f7ef fde1 	bl	800088c <__aeabi_ddiv>
 8010cca:	f04f 0a01 	mov.w	sl, #1
 8010cce:	4604      	mov	r4, r0
 8010cd0:	460d      	mov	r5, r1
 8010cd2:	e764      	b.n	8010b9e <atan+0xce>
 8010cd4:	4b49      	ldr	r3, [pc, #292]	; (8010dfc <atan+0x32c>)
 8010cd6:	429e      	cmp	r6, r3
 8010cd8:	da1d      	bge.n	8010d16 <atan+0x246>
 8010cda:	ee10 0a10 	vmov	r0, s0
 8010cde:	4b48      	ldr	r3, [pc, #288]	; (8010e00 <atan+0x330>)
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	4629      	mov	r1, r5
 8010ce4:	f7ef faf0 	bl	80002c8 <__aeabi_dsub>
 8010ce8:	4b45      	ldr	r3, [pc, #276]	; (8010e00 <atan+0x330>)
 8010cea:	4606      	mov	r6, r0
 8010cec:	460f      	mov	r7, r1
 8010cee:	2200      	movs	r2, #0
 8010cf0:	4620      	mov	r0, r4
 8010cf2:	4629      	mov	r1, r5
 8010cf4:	f7ef fca0 	bl	8000638 <__aeabi_dmul>
 8010cf8:	4b3e      	ldr	r3, [pc, #248]	; (8010df4 <atan+0x324>)
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	f7ef fae6 	bl	80002cc <__adddf3>
 8010d00:	4602      	mov	r2, r0
 8010d02:	460b      	mov	r3, r1
 8010d04:	4630      	mov	r0, r6
 8010d06:	4639      	mov	r1, r7
 8010d08:	f7ef fdc0 	bl	800088c <__aeabi_ddiv>
 8010d0c:	f04f 0a02 	mov.w	sl, #2
 8010d10:	4604      	mov	r4, r0
 8010d12:	460d      	mov	r5, r1
 8010d14:	e743      	b.n	8010b9e <atan+0xce>
 8010d16:	462b      	mov	r3, r5
 8010d18:	ee10 2a10 	vmov	r2, s0
 8010d1c:	4939      	ldr	r1, [pc, #228]	; (8010e04 <atan+0x334>)
 8010d1e:	2000      	movs	r0, #0
 8010d20:	f7ef fdb4 	bl	800088c <__aeabi_ddiv>
 8010d24:	f04f 0a03 	mov.w	sl, #3
 8010d28:	4604      	mov	r4, r0
 8010d2a:	460d      	mov	r5, r1
 8010d2c:	e737      	b.n	8010b9e <atan+0xce>
 8010d2e:	4b36      	ldr	r3, [pc, #216]	; (8010e08 <atan+0x338>)
 8010d30:	4e36      	ldr	r6, [pc, #216]	; (8010e0c <atan+0x33c>)
 8010d32:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010d36:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010d3a:	e9da 2300 	ldrd	r2, r3, [sl]
 8010d3e:	f7ef fac3 	bl	80002c8 <__aeabi_dsub>
 8010d42:	4622      	mov	r2, r4
 8010d44:	462b      	mov	r3, r5
 8010d46:	f7ef fabf 	bl	80002c8 <__aeabi_dsub>
 8010d4a:	4602      	mov	r2, r0
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010d52:	f7ef fab9 	bl	80002c8 <__aeabi_dsub>
 8010d56:	f1bb 0f00 	cmp.w	fp, #0
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	460d      	mov	r5, r1
 8010d5e:	f6bf aed6 	bge.w	8010b0e <atan+0x3e>
 8010d62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d66:	461d      	mov	r5, r3
 8010d68:	e6d1      	b.n	8010b0e <atan+0x3e>
 8010d6a:	a51d      	add	r5, pc, #116	; (adr r5, 8010de0 <atan+0x310>)
 8010d6c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010d70:	e6cd      	b.n	8010b0e <atan+0x3e>
 8010d72:	bf00      	nop
 8010d74:	f3af 8000 	nop.w
 8010d78:	54442d18 	.word	0x54442d18
 8010d7c:	bff921fb 	.word	0xbff921fb
 8010d80:	8800759c 	.word	0x8800759c
 8010d84:	7e37e43c 	.word	0x7e37e43c
 8010d88:	e322da11 	.word	0xe322da11
 8010d8c:	3f90ad3a 	.word	0x3f90ad3a
 8010d90:	24760deb 	.word	0x24760deb
 8010d94:	3fa97b4b 	.word	0x3fa97b4b
 8010d98:	a0d03d51 	.word	0xa0d03d51
 8010d9c:	3fb10d66 	.word	0x3fb10d66
 8010da0:	c54c206e 	.word	0xc54c206e
 8010da4:	3fb745cd 	.word	0x3fb745cd
 8010da8:	920083ff 	.word	0x920083ff
 8010dac:	3fc24924 	.word	0x3fc24924
 8010db0:	5555550d 	.word	0x5555550d
 8010db4:	3fd55555 	.word	0x3fd55555
 8010db8:	2c6a6c2f 	.word	0x2c6a6c2f
 8010dbc:	bfa2b444 	.word	0xbfa2b444
 8010dc0:	52defd9a 	.word	0x52defd9a
 8010dc4:	3fadde2d 	.word	0x3fadde2d
 8010dc8:	af749a6d 	.word	0xaf749a6d
 8010dcc:	3fb3b0f2 	.word	0x3fb3b0f2
 8010dd0:	fe231671 	.word	0xfe231671
 8010dd4:	3fbc71c6 	.word	0x3fbc71c6
 8010dd8:	9998ebc4 	.word	0x9998ebc4
 8010ddc:	3fc99999 	.word	0x3fc99999
 8010de0:	54442d18 	.word	0x54442d18
 8010de4:	3ff921fb 	.word	0x3ff921fb
 8010de8:	440fffff 	.word	0x440fffff
 8010dec:	7ff00000 	.word	0x7ff00000
 8010df0:	3fdbffff 	.word	0x3fdbffff
 8010df4:	3ff00000 	.word	0x3ff00000
 8010df8:	3ff2ffff 	.word	0x3ff2ffff
 8010dfc:	40038000 	.word	0x40038000
 8010e00:	3ff80000 	.word	0x3ff80000
 8010e04:	bff00000 	.word	0xbff00000
 8010e08:	080124b0 	.word	0x080124b0
 8010e0c:	08012490 	.word	0x08012490

08010e10 <fabs>:
 8010e10:	ec51 0b10 	vmov	r0, r1, d0
 8010e14:	ee10 2a10 	vmov	r2, s0
 8010e18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010e1c:	ec43 2b10 	vmov	d0, r2, r3
 8010e20:	4770      	bx	lr
 8010e22:	0000      	movs	r0, r0
 8010e24:	0000      	movs	r0, r0
	...

08010e28 <tan>:
 8010e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e2a:	ec53 2b10 	vmov	r2, r3, d0
 8010e2e:	4816      	ldr	r0, [pc, #88]	; (8010e88 <tan+0x60>)
 8010e30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010e34:	4281      	cmp	r1, r0
 8010e36:	dc07      	bgt.n	8010e48 <tan+0x20>
 8010e38:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8010e80 <tan+0x58>
 8010e3c:	2001      	movs	r0, #1
 8010e3e:	b005      	add	sp, #20
 8010e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e44:	f000 bd80 	b.w	8011948 <__kernel_tan>
 8010e48:	4810      	ldr	r0, [pc, #64]	; (8010e8c <tan+0x64>)
 8010e4a:	4281      	cmp	r1, r0
 8010e4c:	dd09      	ble.n	8010e62 <tan+0x3a>
 8010e4e:	ee10 0a10 	vmov	r0, s0
 8010e52:	4619      	mov	r1, r3
 8010e54:	f7ef fa38 	bl	80002c8 <__aeabi_dsub>
 8010e58:	ec41 0b10 	vmov	d0, r0, r1
 8010e5c:	b005      	add	sp, #20
 8010e5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e62:	4668      	mov	r0, sp
 8010e64:	f000 f814 	bl	8010e90 <__ieee754_rem_pio2>
 8010e68:	0040      	lsls	r0, r0, #1
 8010e6a:	f000 0002 	and.w	r0, r0, #2
 8010e6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e72:	ed9d 0b00 	vldr	d0, [sp]
 8010e76:	f1c0 0001 	rsb	r0, r0, #1
 8010e7a:	f000 fd65 	bl	8011948 <__kernel_tan>
 8010e7e:	e7ed      	b.n	8010e5c <tan+0x34>
	...
 8010e88:	3fe921fb 	.word	0x3fe921fb
 8010e8c:	7fefffff 	.word	0x7fefffff

08010e90 <__ieee754_rem_pio2>:
 8010e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e94:	ed2d 8b02 	vpush	{d8}
 8010e98:	ec55 4b10 	vmov	r4, r5, d0
 8010e9c:	4bca      	ldr	r3, [pc, #808]	; (80111c8 <__ieee754_rem_pio2+0x338>)
 8010e9e:	b08b      	sub	sp, #44	; 0x2c
 8010ea0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010ea4:	4598      	cmp	r8, r3
 8010ea6:	4682      	mov	sl, r0
 8010ea8:	9502      	str	r5, [sp, #8]
 8010eaa:	dc08      	bgt.n	8010ebe <__ieee754_rem_pio2+0x2e>
 8010eac:	2200      	movs	r2, #0
 8010eae:	2300      	movs	r3, #0
 8010eb0:	ed80 0b00 	vstr	d0, [r0]
 8010eb4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010eb8:	f04f 0b00 	mov.w	fp, #0
 8010ebc:	e028      	b.n	8010f10 <__ieee754_rem_pio2+0x80>
 8010ebe:	4bc3      	ldr	r3, [pc, #780]	; (80111cc <__ieee754_rem_pio2+0x33c>)
 8010ec0:	4598      	cmp	r8, r3
 8010ec2:	dc78      	bgt.n	8010fb6 <__ieee754_rem_pio2+0x126>
 8010ec4:	9b02      	ldr	r3, [sp, #8]
 8010ec6:	4ec2      	ldr	r6, [pc, #776]	; (80111d0 <__ieee754_rem_pio2+0x340>)
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	ee10 0a10 	vmov	r0, s0
 8010ece:	a3b0      	add	r3, pc, #704	; (adr r3, 8011190 <__ieee754_rem_pio2+0x300>)
 8010ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed4:	4629      	mov	r1, r5
 8010ed6:	dd39      	ble.n	8010f4c <__ieee754_rem_pio2+0xbc>
 8010ed8:	f7ef f9f6 	bl	80002c8 <__aeabi_dsub>
 8010edc:	45b0      	cmp	r8, r6
 8010ede:	4604      	mov	r4, r0
 8010ee0:	460d      	mov	r5, r1
 8010ee2:	d01b      	beq.n	8010f1c <__ieee754_rem_pio2+0x8c>
 8010ee4:	a3ac      	add	r3, pc, #688	; (adr r3, 8011198 <__ieee754_rem_pio2+0x308>)
 8010ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eea:	f7ef f9ed 	bl	80002c8 <__aeabi_dsub>
 8010eee:	4602      	mov	r2, r0
 8010ef0:	460b      	mov	r3, r1
 8010ef2:	e9ca 2300 	strd	r2, r3, [sl]
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	4629      	mov	r1, r5
 8010efa:	f7ef f9e5 	bl	80002c8 <__aeabi_dsub>
 8010efe:	a3a6      	add	r3, pc, #664	; (adr r3, 8011198 <__ieee754_rem_pio2+0x308>)
 8010f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f04:	f7ef f9e0 	bl	80002c8 <__aeabi_dsub>
 8010f08:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010f0c:	f04f 0b01 	mov.w	fp, #1
 8010f10:	4658      	mov	r0, fp
 8010f12:	b00b      	add	sp, #44	; 0x2c
 8010f14:	ecbd 8b02 	vpop	{d8}
 8010f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f1c:	a3a0      	add	r3, pc, #640	; (adr r3, 80111a0 <__ieee754_rem_pio2+0x310>)
 8010f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f22:	f7ef f9d1 	bl	80002c8 <__aeabi_dsub>
 8010f26:	a3a0      	add	r3, pc, #640	; (adr r3, 80111a8 <__ieee754_rem_pio2+0x318>)
 8010f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	460d      	mov	r5, r1
 8010f30:	f7ef f9ca 	bl	80002c8 <__aeabi_dsub>
 8010f34:	4602      	mov	r2, r0
 8010f36:	460b      	mov	r3, r1
 8010f38:	e9ca 2300 	strd	r2, r3, [sl]
 8010f3c:	4620      	mov	r0, r4
 8010f3e:	4629      	mov	r1, r5
 8010f40:	f7ef f9c2 	bl	80002c8 <__aeabi_dsub>
 8010f44:	a398      	add	r3, pc, #608	; (adr r3, 80111a8 <__ieee754_rem_pio2+0x318>)
 8010f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4a:	e7db      	b.n	8010f04 <__ieee754_rem_pio2+0x74>
 8010f4c:	f7ef f9be 	bl	80002cc <__adddf3>
 8010f50:	45b0      	cmp	r8, r6
 8010f52:	4604      	mov	r4, r0
 8010f54:	460d      	mov	r5, r1
 8010f56:	d016      	beq.n	8010f86 <__ieee754_rem_pio2+0xf6>
 8010f58:	a38f      	add	r3, pc, #572	; (adr r3, 8011198 <__ieee754_rem_pio2+0x308>)
 8010f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5e:	f7ef f9b5 	bl	80002cc <__adddf3>
 8010f62:	4602      	mov	r2, r0
 8010f64:	460b      	mov	r3, r1
 8010f66:	e9ca 2300 	strd	r2, r3, [sl]
 8010f6a:	4620      	mov	r0, r4
 8010f6c:	4629      	mov	r1, r5
 8010f6e:	f7ef f9ab 	bl	80002c8 <__aeabi_dsub>
 8010f72:	a389      	add	r3, pc, #548	; (adr r3, 8011198 <__ieee754_rem_pio2+0x308>)
 8010f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f78:	f7ef f9a8 	bl	80002cc <__adddf3>
 8010f7c:	f04f 3bff 	mov.w	fp, #4294967295
 8010f80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010f84:	e7c4      	b.n	8010f10 <__ieee754_rem_pio2+0x80>
 8010f86:	a386      	add	r3, pc, #536	; (adr r3, 80111a0 <__ieee754_rem_pio2+0x310>)
 8010f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8c:	f7ef f99e 	bl	80002cc <__adddf3>
 8010f90:	a385      	add	r3, pc, #532	; (adr r3, 80111a8 <__ieee754_rem_pio2+0x318>)
 8010f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f96:	4604      	mov	r4, r0
 8010f98:	460d      	mov	r5, r1
 8010f9a:	f7ef f997 	bl	80002cc <__adddf3>
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	e9ca 2300 	strd	r2, r3, [sl]
 8010fa6:	4620      	mov	r0, r4
 8010fa8:	4629      	mov	r1, r5
 8010faa:	f7ef f98d 	bl	80002c8 <__aeabi_dsub>
 8010fae:	a37e      	add	r3, pc, #504	; (adr r3, 80111a8 <__ieee754_rem_pio2+0x318>)
 8010fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb4:	e7e0      	b.n	8010f78 <__ieee754_rem_pio2+0xe8>
 8010fb6:	4b87      	ldr	r3, [pc, #540]	; (80111d4 <__ieee754_rem_pio2+0x344>)
 8010fb8:	4598      	cmp	r8, r3
 8010fba:	f300 80d9 	bgt.w	8011170 <__ieee754_rem_pio2+0x2e0>
 8010fbe:	f7ff ff27 	bl	8010e10 <fabs>
 8010fc2:	ec55 4b10 	vmov	r4, r5, d0
 8010fc6:	ee10 0a10 	vmov	r0, s0
 8010fca:	a379      	add	r3, pc, #484	; (adr r3, 80111b0 <__ieee754_rem_pio2+0x320>)
 8010fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd0:	4629      	mov	r1, r5
 8010fd2:	f7ef fb31 	bl	8000638 <__aeabi_dmul>
 8010fd6:	4b80      	ldr	r3, [pc, #512]	; (80111d8 <__ieee754_rem_pio2+0x348>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	f7ef f977 	bl	80002cc <__adddf3>
 8010fde:	f7ef fddb 	bl	8000b98 <__aeabi_d2iz>
 8010fe2:	4683      	mov	fp, r0
 8010fe4:	f7ef fabe 	bl	8000564 <__aeabi_i2d>
 8010fe8:	4602      	mov	r2, r0
 8010fea:	460b      	mov	r3, r1
 8010fec:	ec43 2b18 	vmov	d8, r2, r3
 8010ff0:	a367      	add	r3, pc, #412	; (adr r3, 8011190 <__ieee754_rem_pio2+0x300>)
 8010ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff6:	f7ef fb1f 	bl	8000638 <__aeabi_dmul>
 8010ffa:	4602      	mov	r2, r0
 8010ffc:	460b      	mov	r3, r1
 8010ffe:	4620      	mov	r0, r4
 8011000:	4629      	mov	r1, r5
 8011002:	f7ef f961 	bl	80002c8 <__aeabi_dsub>
 8011006:	a364      	add	r3, pc, #400	; (adr r3, 8011198 <__ieee754_rem_pio2+0x308>)
 8011008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100c:	4606      	mov	r6, r0
 801100e:	460f      	mov	r7, r1
 8011010:	ec51 0b18 	vmov	r0, r1, d8
 8011014:	f7ef fb10 	bl	8000638 <__aeabi_dmul>
 8011018:	f1bb 0f1f 	cmp.w	fp, #31
 801101c:	4604      	mov	r4, r0
 801101e:	460d      	mov	r5, r1
 8011020:	dc0d      	bgt.n	801103e <__ieee754_rem_pio2+0x1ae>
 8011022:	4b6e      	ldr	r3, [pc, #440]	; (80111dc <__ieee754_rem_pio2+0x34c>)
 8011024:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801102c:	4543      	cmp	r3, r8
 801102e:	d006      	beq.n	801103e <__ieee754_rem_pio2+0x1ae>
 8011030:	4622      	mov	r2, r4
 8011032:	462b      	mov	r3, r5
 8011034:	4630      	mov	r0, r6
 8011036:	4639      	mov	r1, r7
 8011038:	f7ef f946 	bl	80002c8 <__aeabi_dsub>
 801103c:	e00f      	b.n	801105e <__ieee754_rem_pio2+0x1ce>
 801103e:	462b      	mov	r3, r5
 8011040:	4622      	mov	r2, r4
 8011042:	4630      	mov	r0, r6
 8011044:	4639      	mov	r1, r7
 8011046:	f7ef f93f 	bl	80002c8 <__aeabi_dsub>
 801104a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801104e:	9303      	str	r3, [sp, #12]
 8011050:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011054:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011058:	f1b8 0f10 	cmp.w	r8, #16
 801105c:	dc02      	bgt.n	8011064 <__ieee754_rem_pio2+0x1d4>
 801105e:	e9ca 0100 	strd	r0, r1, [sl]
 8011062:	e039      	b.n	80110d8 <__ieee754_rem_pio2+0x248>
 8011064:	a34e      	add	r3, pc, #312	; (adr r3, 80111a0 <__ieee754_rem_pio2+0x310>)
 8011066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801106a:	ec51 0b18 	vmov	r0, r1, d8
 801106e:	f7ef fae3 	bl	8000638 <__aeabi_dmul>
 8011072:	4604      	mov	r4, r0
 8011074:	460d      	mov	r5, r1
 8011076:	4602      	mov	r2, r0
 8011078:	460b      	mov	r3, r1
 801107a:	4630      	mov	r0, r6
 801107c:	4639      	mov	r1, r7
 801107e:	f7ef f923 	bl	80002c8 <__aeabi_dsub>
 8011082:	4602      	mov	r2, r0
 8011084:	460b      	mov	r3, r1
 8011086:	4680      	mov	r8, r0
 8011088:	4689      	mov	r9, r1
 801108a:	4630      	mov	r0, r6
 801108c:	4639      	mov	r1, r7
 801108e:	f7ef f91b 	bl	80002c8 <__aeabi_dsub>
 8011092:	4622      	mov	r2, r4
 8011094:	462b      	mov	r3, r5
 8011096:	f7ef f917 	bl	80002c8 <__aeabi_dsub>
 801109a:	a343      	add	r3, pc, #268	; (adr r3, 80111a8 <__ieee754_rem_pio2+0x318>)
 801109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a0:	4604      	mov	r4, r0
 80110a2:	460d      	mov	r5, r1
 80110a4:	ec51 0b18 	vmov	r0, r1, d8
 80110a8:	f7ef fac6 	bl	8000638 <__aeabi_dmul>
 80110ac:	4622      	mov	r2, r4
 80110ae:	462b      	mov	r3, r5
 80110b0:	f7ef f90a 	bl	80002c8 <__aeabi_dsub>
 80110b4:	4602      	mov	r2, r0
 80110b6:	460b      	mov	r3, r1
 80110b8:	4604      	mov	r4, r0
 80110ba:	460d      	mov	r5, r1
 80110bc:	4640      	mov	r0, r8
 80110be:	4649      	mov	r1, r9
 80110c0:	f7ef f902 	bl	80002c8 <__aeabi_dsub>
 80110c4:	9a03      	ldr	r2, [sp, #12]
 80110c6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80110ca:	1ad3      	subs	r3, r2, r3
 80110cc:	2b31      	cmp	r3, #49	; 0x31
 80110ce:	dc24      	bgt.n	801111a <__ieee754_rem_pio2+0x28a>
 80110d0:	e9ca 0100 	strd	r0, r1, [sl]
 80110d4:	4646      	mov	r6, r8
 80110d6:	464f      	mov	r7, r9
 80110d8:	e9da 8900 	ldrd	r8, r9, [sl]
 80110dc:	4630      	mov	r0, r6
 80110de:	4642      	mov	r2, r8
 80110e0:	464b      	mov	r3, r9
 80110e2:	4639      	mov	r1, r7
 80110e4:	f7ef f8f0 	bl	80002c8 <__aeabi_dsub>
 80110e8:	462b      	mov	r3, r5
 80110ea:	4622      	mov	r2, r4
 80110ec:	f7ef f8ec 	bl	80002c8 <__aeabi_dsub>
 80110f0:	9b02      	ldr	r3, [sp, #8]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80110f8:	f6bf af0a 	bge.w	8010f10 <__ieee754_rem_pio2+0x80>
 80110fc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011100:	f8ca 3004 	str.w	r3, [sl, #4]
 8011104:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011108:	f8ca 8000 	str.w	r8, [sl]
 801110c:	f8ca 0008 	str.w	r0, [sl, #8]
 8011110:	f8ca 300c 	str.w	r3, [sl, #12]
 8011114:	f1cb 0b00 	rsb	fp, fp, #0
 8011118:	e6fa      	b.n	8010f10 <__ieee754_rem_pio2+0x80>
 801111a:	a327      	add	r3, pc, #156	; (adr r3, 80111b8 <__ieee754_rem_pio2+0x328>)
 801111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011120:	ec51 0b18 	vmov	r0, r1, d8
 8011124:	f7ef fa88 	bl	8000638 <__aeabi_dmul>
 8011128:	4604      	mov	r4, r0
 801112a:	460d      	mov	r5, r1
 801112c:	4602      	mov	r2, r0
 801112e:	460b      	mov	r3, r1
 8011130:	4640      	mov	r0, r8
 8011132:	4649      	mov	r1, r9
 8011134:	f7ef f8c8 	bl	80002c8 <__aeabi_dsub>
 8011138:	4602      	mov	r2, r0
 801113a:	460b      	mov	r3, r1
 801113c:	4606      	mov	r6, r0
 801113e:	460f      	mov	r7, r1
 8011140:	4640      	mov	r0, r8
 8011142:	4649      	mov	r1, r9
 8011144:	f7ef f8c0 	bl	80002c8 <__aeabi_dsub>
 8011148:	4622      	mov	r2, r4
 801114a:	462b      	mov	r3, r5
 801114c:	f7ef f8bc 	bl	80002c8 <__aeabi_dsub>
 8011150:	a31b      	add	r3, pc, #108	; (adr r3, 80111c0 <__ieee754_rem_pio2+0x330>)
 8011152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011156:	4604      	mov	r4, r0
 8011158:	460d      	mov	r5, r1
 801115a:	ec51 0b18 	vmov	r0, r1, d8
 801115e:	f7ef fa6b 	bl	8000638 <__aeabi_dmul>
 8011162:	4622      	mov	r2, r4
 8011164:	462b      	mov	r3, r5
 8011166:	f7ef f8af 	bl	80002c8 <__aeabi_dsub>
 801116a:	4604      	mov	r4, r0
 801116c:	460d      	mov	r5, r1
 801116e:	e75f      	b.n	8011030 <__ieee754_rem_pio2+0x1a0>
 8011170:	4b1b      	ldr	r3, [pc, #108]	; (80111e0 <__ieee754_rem_pio2+0x350>)
 8011172:	4598      	cmp	r8, r3
 8011174:	dd36      	ble.n	80111e4 <__ieee754_rem_pio2+0x354>
 8011176:	ee10 2a10 	vmov	r2, s0
 801117a:	462b      	mov	r3, r5
 801117c:	4620      	mov	r0, r4
 801117e:	4629      	mov	r1, r5
 8011180:	f7ef f8a2 	bl	80002c8 <__aeabi_dsub>
 8011184:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011188:	e9ca 0100 	strd	r0, r1, [sl]
 801118c:	e694      	b.n	8010eb8 <__ieee754_rem_pio2+0x28>
 801118e:	bf00      	nop
 8011190:	54400000 	.word	0x54400000
 8011194:	3ff921fb 	.word	0x3ff921fb
 8011198:	1a626331 	.word	0x1a626331
 801119c:	3dd0b461 	.word	0x3dd0b461
 80111a0:	1a600000 	.word	0x1a600000
 80111a4:	3dd0b461 	.word	0x3dd0b461
 80111a8:	2e037073 	.word	0x2e037073
 80111ac:	3ba3198a 	.word	0x3ba3198a
 80111b0:	6dc9c883 	.word	0x6dc9c883
 80111b4:	3fe45f30 	.word	0x3fe45f30
 80111b8:	2e000000 	.word	0x2e000000
 80111bc:	3ba3198a 	.word	0x3ba3198a
 80111c0:	252049c1 	.word	0x252049c1
 80111c4:	397b839a 	.word	0x397b839a
 80111c8:	3fe921fb 	.word	0x3fe921fb
 80111cc:	4002d97b 	.word	0x4002d97b
 80111d0:	3ff921fb 	.word	0x3ff921fb
 80111d4:	413921fb 	.word	0x413921fb
 80111d8:	3fe00000 	.word	0x3fe00000
 80111dc:	080124d0 	.word	0x080124d0
 80111e0:	7fefffff 	.word	0x7fefffff
 80111e4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80111e8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80111ec:	ee10 0a10 	vmov	r0, s0
 80111f0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80111f4:	ee10 6a10 	vmov	r6, s0
 80111f8:	460f      	mov	r7, r1
 80111fa:	f7ef fccd 	bl	8000b98 <__aeabi_d2iz>
 80111fe:	f7ef f9b1 	bl	8000564 <__aeabi_i2d>
 8011202:	4602      	mov	r2, r0
 8011204:	460b      	mov	r3, r1
 8011206:	4630      	mov	r0, r6
 8011208:	4639      	mov	r1, r7
 801120a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801120e:	f7ef f85b 	bl	80002c8 <__aeabi_dsub>
 8011212:	4b23      	ldr	r3, [pc, #140]	; (80112a0 <__ieee754_rem_pio2+0x410>)
 8011214:	2200      	movs	r2, #0
 8011216:	f7ef fa0f 	bl	8000638 <__aeabi_dmul>
 801121a:	460f      	mov	r7, r1
 801121c:	4606      	mov	r6, r0
 801121e:	f7ef fcbb 	bl	8000b98 <__aeabi_d2iz>
 8011222:	f7ef f99f 	bl	8000564 <__aeabi_i2d>
 8011226:	4602      	mov	r2, r0
 8011228:	460b      	mov	r3, r1
 801122a:	4630      	mov	r0, r6
 801122c:	4639      	mov	r1, r7
 801122e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011232:	f7ef f849 	bl	80002c8 <__aeabi_dsub>
 8011236:	4b1a      	ldr	r3, [pc, #104]	; (80112a0 <__ieee754_rem_pio2+0x410>)
 8011238:	2200      	movs	r2, #0
 801123a:	f7ef f9fd 	bl	8000638 <__aeabi_dmul>
 801123e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011242:	ad04      	add	r5, sp, #16
 8011244:	f04f 0803 	mov.w	r8, #3
 8011248:	46a9      	mov	r9, r5
 801124a:	2600      	movs	r6, #0
 801124c:	2700      	movs	r7, #0
 801124e:	4632      	mov	r2, r6
 8011250:	463b      	mov	r3, r7
 8011252:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011256:	46c3      	mov	fp, r8
 8011258:	3d08      	subs	r5, #8
 801125a:	f108 38ff 	add.w	r8, r8, #4294967295
 801125e:	f7ef fc53 	bl	8000b08 <__aeabi_dcmpeq>
 8011262:	2800      	cmp	r0, #0
 8011264:	d1f3      	bne.n	801124e <__ieee754_rem_pio2+0x3be>
 8011266:	4b0f      	ldr	r3, [pc, #60]	; (80112a4 <__ieee754_rem_pio2+0x414>)
 8011268:	9301      	str	r3, [sp, #4]
 801126a:	2302      	movs	r3, #2
 801126c:	9300      	str	r3, [sp, #0]
 801126e:	4622      	mov	r2, r4
 8011270:	465b      	mov	r3, fp
 8011272:	4651      	mov	r1, sl
 8011274:	4648      	mov	r0, r9
 8011276:	f000 f817 	bl	80112a8 <__kernel_rem_pio2>
 801127a:	9b02      	ldr	r3, [sp, #8]
 801127c:	2b00      	cmp	r3, #0
 801127e:	4683      	mov	fp, r0
 8011280:	f6bf ae46 	bge.w	8010f10 <__ieee754_rem_pio2+0x80>
 8011284:	e9da 2100 	ldrd	r2, r1, [sl]
 8011288:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801128c:	e9ca 2300 	strd	r2, r3, [sl]
 8011290:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011294:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011298:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801129c:	e73a      	b.n	8011114 <__ieee754_rem_pio2+0x284>
 801129e:	bf00      	nop
 80112a0:	41700000 	.word	0x41700000
 80112a4:	08012550 	.word	0x08012550

080112a8 <__kernel_rem_pio2>:
 80112a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ac:	ed2d 8b02 	vpush	{d8}
 80112b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80112b4:	f112 0f14 	cmn.w	r2, #20
 80112b8:	9308      	str	r3, [sp, #32]
 80112ba:	9101      	str	r1, [sp, #4]
 80112bc:	4bc4      	ldr	r3, [pc, #784]	; (80115d0 <__kernel_rem_pio2+0x328>)
 80112be:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80112c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80112c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80112c6:	9302      	str	r3, [sp, #8]
 80112c8:	9b08      	ldr	r3, [sp, #32]
 80112ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80112ce:	bfa8      	it	ge
 80112d0:	1ed4      	subge	r4, r2, #3
 80112d2:	9306      	str	r3, [sp, #24]
 80112d4:	bfb2      	itee	lt
 80112d6:	2400      	movlt	r4, #0
 80112d8:	2318      	movge	r3, #24
 80112da:	fb94 f4f3 	sdivge	r4, r4, r3
 80112de:	f06f 0317 	mvn.w	r3, #23
 80112e2:	fb04 3303 	mla	r3, r4, r3, r3
 80112e6:	eb03 0a02 	add.w	sl, r3, r2
 80112ea:	9b02      	ldr	r3, [sp, #8]
 80112ec:	9a06      	ldr	r2, [sp, #24]
 80112ee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80115c0 <__kernel_rem_pio2+0x318>
 80112f2:	eb03 0802 	add.w	r8, r3, r2
 80112f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80112f8:	1aa7      	subs	r7, r4, r2
 80112fa:	ae22      	add	r6, sp, #136	; 0x88
 80112fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011300:	2500      	movs	r5, #0
 8011302:	4545      	cmp	r5, r8
 8011304:	dd13      	ble.n	801132e <__kernel_rem_pio2+0x86>
 8011306:	9b08      	ldr	r3, [sp, #32]
 8011308:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80115c0 <__kernel_rem_pio2+0x318>
 801130c:	aa22      	add	r2, sp, #136	; 0x88
 801130e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011312:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011316:	f04f 0800 	mov.w	r8, #0
 801131a:	9b02      	ldr	r3, [sp, #8]
 801131c:	4598      	cmp	r8, r3
 801131e:	dc2f      	bgt.n	8011380 <__kernel_rem_pio2+0xd8>
 8011320:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011324:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8011328:	462f      	mov	r7, r5
 801132a:	2600      	movs	r6, #0
 801132c:	e01b      	b.n	8011366 <__kernel_rem_pio2+0xbe>
 801132e:	42ef      	cmn	r7, r5
 8011330:	d407      	bmi.n	8011342 <__kernel_rem_pio2+0x9a>
 8011332:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011336:	f7ef f915 	bl	8000564 <__aeabi_i2d>
 801133a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801133e:	3501      	adds	r5, #1
 8011340:	e7df      	b.n	8011302 <__kernel_rem_pio2+0x5a>
 8011342:	ec51 0b18 	vmov	r0, r1, d8
 8011346:	e7f8      	b.n	801133a <__kernel_rem_pio2+0x92>
 8011348:	e9d7 2300 	ldrd	r2, r3, [r7]
 801134c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011350:	f7ef f972 	bl	8000638 <__aeabi_dmul>
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801135c:	f7ee ffb6 	bl	80002cc <__adddf3>
 8011360:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011364:	3601      	adds	r6, #1
 8011366:	9b06      	ldr	r3, [sp, #24]
 8011368:	429e      	cmp	r6, r3
 801136a:	f1a7 0708 	sub.w	r7, r7, #8
 801136e:	ddeb      	ble.n	8011348 <__kernel_rem_pio2+0xa0>
 8011370:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011374:	f108 0801 	add.w	r8, r8, #1
 8011378:	ecab 7b02 	vstmia	fp!, {d7}
 801137c:	3508      	adds	r5, #8
 801137e:	e7cc      	b.n	801131a <__kernel_rem_pio2+0x72>
 8011380:	9b02      	ldr	r3, [sp, #8]
 8011382:	aa0e      	add	r2, sp, #56	; 0x38
 8011384:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011388:	930d      	str	r3, [sp, #52]	; 0x34
 801138a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801138c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011390:	9c02      	ldr	r4, [sp, #8]
 8011392:	930c      	str	r3, [sp, #48]	; 0x30
 8011394:	00e3      	lsls	r3, r4, #3
 8011396:	930a      	str	r3, [sp, #40]	; 0x28
 8011398:	ab9a      	add	r3, sp, #616	; 0x268
 801139a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801139e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80113a2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80113a6:	ab72      	add	r3, sp, #456	; 0x1c8
 80113a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80113ac:	46c3      	mov	fp, r8
 80113ae:	46a1      	mov	r9, r4
 80113b0:	f1b9 0f00 	cmp.w	r9, #0
 80113b4:	f1a5 0508 	sub.w	r5, r5, #8
 80113b8:	dc77      	bgt.n	80114aa <__kernel_rem_pio2+0x202>
 80113ba:	ec47 6b10 	vmov	d0, r6, r7
 80113be:	4650      	mov	r0, sl
 80113c0:	f000 fd4e 	bl	8011e60 <scalbn>
 80113c4:	ec57 6b10 	vmov	r6, r7, d0
 80113c8:	2200      	movs	r2, #0
 80113ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80113ce:	ee10 0a10 	vmov	r0, s0
 80113d2:	4639      	mov	r1, r7
 80113d4:	f7ef f930 	bl	8000638 <__aeabi_dmul>
 80113d8:	ec41 0b10 	vmov	d0, r0, r1
 80113dc:	f000 fcc0 	bl	8011d60 <floor>
 80113e0:	4b7c      	ldr	r3, [pc, #496]	; (80115d4 <__kernel_rem_pio2+0x32c>)
 80113e2:	ec51 0b10 	vmov	r0, r1, d0
 80113e6:	2200      	movs	r2, #0
 80113e8:	f7ef f926 	bl	8000638 <__aeabi_dmul>
 80113ec:	4602      	mov	r2, r0
 80113ee:	460b      	mov	r3, r1
 80113f0:	4630      	mov	r0, r6
 80113f2:	4639      	mov	r1, r7
 80113f4:	f7ee ff68 	bl	80002c8 <__aeabi_dsub>
 80113f8:	460f      	mov	r7, r1
 80113fa:	4606      	mov	r6, r0
 80113fc:	f7ef fbcc 	bl	8000b98 <__aeabi_d2iz>
 8011400:	9004      	str	r0, [sp, #16]
 8011402:	f7ef f8af 	bl	8000564 <__aeabi_i2d>
 8011406:	4602      	mov	r2, r0
 8011408:	460b      	mov	r3, r1
 801140a:	4630      	mov	r0, r6
 801140c:	4639      	mov	r1, r7
 801140e:	f7ee ff5b 	bl	80002c8 <__aeabi_dsub>
 8011412:	f1ba 0f00 	cmp.w	sl, #0
 8011416:	4606      	mov	r6, r0
 8011418:	460f      	mov	r7, r1
 801141a:	dd6d      	ble.n	80114f8 <__kernel_rem_pio2+0x250>
 801141c:	1e62      	subs	r2, r4, #1
 801141e:	ab0e      	add	r3, sp, #56	; 0x38
 8011420:	9d04      	ldr	r5, [sp, #16]
 8011422:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011426:	f1ca 0118 	rsb	r1, sl, #24
 801142a:	fa40 f301 	asr.w	r3, r0, r1
 801142e:	441d      	add	r5, r3
 8011430:	408b      	lsls	r3, r1
 8011432:	1ac0      	subs	r0, r0, r3
 8011434:	ab0e      	add	r3, sp, #56	; 0x38
 8011436:	9504      	str	r5, [sp, #16]
 8011438:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801143c:	f1ca 0317 	rsb	r3, sl, #23
 8011440:	fa40 fb03 	asr.w	fp, r0, r3
 8011444:	f1bb 0f00 	cmp.w	fp, #0
 8011448:	dd65      	ble.n	8011516 <__kernel_rem_pio2+0x26e>
 801144a:	9b04      	ldr	r3, [sp, #16]
 801144c:	2200      	movs	r2, #0
 801144e:	3301      	adds	r3, #1
 8011450:	9304      	str	r3, [sp, #16]
 8011452:	4615      	mov	r5, r2
 8011454:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011458:	4294      	cmp	r4, r2
 801145a:	f300 809c 	bgt.w	8011596 <__kernel_rem_pio2+0x2ee>
 801145e:	f1ba 0f00 	cmp.w	sl, #0
 8011462:	dd07      	ble.n	8011474 <__kernel_rem_pio2+0x1cc>
 8011464:	f1ba 0f01 	cmp.w	sl, #1
 8011468:	f000 80c0 	beq.w	80115ec <__kernel_rem_pio2+0x344>
 801146c:	f1ba 0f02 	cmp.w	sl, #2
 8011470:	f000 80c6 	beq.w	8011600 <__kernel_rem_pio2+0x358>
 8011474:	f1bb 0f02 	cmp.w	fp, #2
 8011478:	d14d      	bne.n	8011516 <__kernel_rem_pio2+0x26e>
 801147a:	4632      	mov	r2, r6
 801147c:	463b      	mov	r3, r7
 801147e:	4956      	ldr	r1, [pc, #344]	; (80115d8 <__kernel_rem_pio2+0x330>)
 8011480:	2000      	movs	r0, #0
 8011482:	f7ee ff21 	bl	80002c8 <__aeabi_dsub>
 8011486:	4606      	mov	r6, r0
 8011488:	460f      	mov	r7, r1
 801148a:	2d00      	cmp	r5, #0
 801148c:	d043      	beq.n	8011516 <__kernel_rem_pio2+0x26e>
 801148e:	4650      	mov	r0, sl
 8011490:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80115c8 <__kernel_rem_pio2+0x320>
 8011494:	f000 fce4 	bl	8011e60 <scalbn>
 8011498:	4630      	mov	r0, r6
 801149a:	4639      	mov	r1, r7
 801149c:	ec53 2b10 	vmov	r2, r3, d0
 80114a0:	f7ee ff12 	bl	80002c8 <__aeabi_dsub>
 80114a4:	4606      	mov	r6, r0
 80114a6:	460f      	mov	r7, r1
 80114a8:	e035      	b.n	8011516 <__kernel_rem_pio2+0x26e>
 80114aa:	4b4c      	ldr	r3, [pc, #304]	; (80115dc <__kernel_rem_pio2+0x334>)
 80114ac:	2200      	movs	r2, #0
 80114ae:	4630      	mov	r0, r6
 80114b0:	4639      	mov	r1, r7
 80114b2:	f7ef f8c1 	bl	8000638 <__aeabi_dmul>
 80114b6:	f7ef fb6f 	bl	8000b98 <__aeabi_d2iz>
 80114ba:	f7ef f853 	bl	8000564 <__aeabi_i2d>
 80114be:	4602      	mov	r2, r0
 80114c0:	460b      	mov	r3, r1
 80114c2:	ec43 2b18 	vmov	d8, r2, r3
 80114c6:	4b46      	ldr	r3, [pc, #280]	; (80115e0 <__kernel_rem_pio2+0x338>)
 80114c8:	2200      	movs	r2, #0
 80114ca:	f7ef f8b5 	bl	8000638 <__aeabi_dmul>
 80114ce:	4602      	mov	r2, r0
 80114d0:	460b      	mov	r3, r1
 80114d2:	4630      	mov	r0, r6
 80114d4:	4639      	mov	r1, r7
 80114d6:	f7ee fef7 	bl	80002c8 <__aeabi_dsub>
 80114da:	f7ef fb5d 	bl	8000b98 <__aeabi_d2iz>
 80114de:	e9d5 2300 	ldrd	r2, r3, [r5]
 80114e2:	f84b 0b04 	str.w	r0, [fp], #4
 80114e6:	ec51 0b18 	vmov	r0, r1, d8
 80114ea:	f7ee feef 	bl	80002cc <__adddf3>
 80114ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80114f2:	4606      	mov	r6, r0
 80114f4:	460f      	mov	r7, r1
 80114f6:	e75b      	b.n	80113b0 <__kernel_rem_pio2+0x108>
 80114f8:	d106      	bne.n	8011508 <__kernel_rem_pio2+0x260>
 80114fa:	1e63      	subs	r3, r4, #1
 80114fc:	aa0e      	add	r2, sp, #56	; 0x38
 80114fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011502:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8011506:	e79d      	b.n	8011444 <__kernel_rem_pio2+0x19c>
 8011508:	4b36      	ldr	r3, [pc, #216]	; (80115e4 <__kernel_rem_pio2+0x33c>)
 801150a:	2200      	movs	r2, #0
 801150c:	f7ef fb1a 	bl	8000b44 <__aeabi_dcmpge>
 8011510:	2800      	cmp	r0, #0
 8011512:	d13d      	bne.n	8011590 <__kernel_rem_pio2+0x2e8>
 8011514:	4683      	mov	fp, r0
 8011516:	2200      	movs	r2, #0
 8011518:	2300      	movs	r3, #0
 801151a:	4630      	mov	r0, r6
 801151c:	4639      	mov	r1, r7
 801151e:	f7ef faf3 	bl	8000b08 <__aeabi_dcmpeq>
 8011522:	2800      	cmp	r0, #0
 8011524:	f000 80c0 	beq.w	80116a8 <__kernel_rem_pio2+0x400>
 8011528:	1e65      	subs	r5, r4, #1
 801152a:	462b      	mov	r3, r5
 801152c:	2200      	movs	r2, #0
 801152e:	9902      	ldr	r1, [sp, #8]
 8011530:	428b      	cmp	r3, r1
 8011532:	da6c      	bge.n	801160e <__kernel_rem_pio2+0x366>
 8011534:	2a00      	cmp	r2, #0
 8011536:	f000 8089 	beq.w	801164c <__kernel_rem_pio2+0x3a4>
 801153a:	ab0e      	add	r3, sp, #56	; 0x38
 801153c:	f1aa 0a18 	sub.w	sl, sl, #24
 8011540:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011544:	2b00      	cmp	r3, #0
 8011546:	f000 80ad 	beq.w	80116a4 <__kernel_rem_pio2+0x3fc>
 801154a:	4650      	mov	r0, sl
 801154c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80115c8 <__kernel_rem_pio2+0x320>
 8011550:	f000 fc86 	bl	8011e60 <scalbn>
 8011554:	ab9a      	add	r3, sp, #616	; 0x268
 8011556:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801155a:	ec57 6b10 	vmov	r6, r7, d0
 801155e:	00ec      	lsls	r4, r5, #3
 8011560:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8011564:	46aa      	mov	sl, r5
 8011566:	f1ba 0f00 	cmp.w	sl, #0
 801156a:	f280 80d6 	bge.w	801171a <__kernel_rem_pio2+0x472>
 801156e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80115c0 <__kernel_rem_pio2+0x318>
 8011572:	462e      	mov	r6, r5
 8011574:	2e00      	cmp	r6, #0
 8011576:	f2c0 8104 	blt.w	8011782 <__kernel_rem_pio2+0x4da>
 801157a:	ab72      	add	r3, sp, #456	; 0x1c8
 801157c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011580:	f8df a064 	ldr.w	sl, [pc, #100]	; 80115e8 <__kernel_rem_pio2+0x340>
 8011584:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011588:	f04f 0800 	mov.w	r8, #0
 801158c:	1baf      	subs	r7, r5, r6
 801158e:	e0ea      	b.n	8011766 <__kernel_rem_pio2+0x4be>
 8011590:	f04f 0b02 	mov.w	fp, #2
 8011594:	e759      	b.n	801144a <__kernel_rem_pio2+0x1a2>
 8011596:	f8d8 3000 	ldr.w	r3, [r8]
 801159a:	b955      	cbnz	r5, 80115b2 <__kernel_rem_pio2+0x30a>
 801159c:	b123      	cbz	r3, 80115a8 <__kernel_rem_pio2+0x300>
 801159e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80115a2:	f8c8 3000 	str.w	r3, [r8]
 80115a6:	2301      	movs	r3, #1
 80115a8:	3201      	adds	r2, #1
 80115aa:	f108 0804 	add.w	r8, r8, #4
 80115ae:	461d      	mov	r5, r3
 80115b0:	e752      	b.n	8011458 <__kernel_rem_pio2+0x1b0>
 80115b2:	1acb      	subs	r3, r1, r3
 80115b4:	f8c8 3000 	str.w	r3, [r8]
 80115b8:	462b      	mov	r3, r5
 80115ba:	e7f5      	b.n	80115a8 <__kernel_rem_pio2+0x300>
 80115bc:	f3af 8000 	nop.w
	...
 80115cc:	3ff00000 	.word	0x3ff00000
 80115d0:	08012698 	.word	0x08012698
 80115d4:	40200000 	.word	0x40200000
 80115d8:	3ff00000 	.word	0x3ff00000
 80115dc:	3e700000 	.word	0x3e700000
 80115e0:	41700000 	.word	0x41700000
 80115e4:	3fe00000 	.word	0x3fe00000
 80115e8:	08012658 	.word	0x08012658
 80115ec:	1e62      	subs	r2, r4, #1
 80115ee:	ab0e      	add	r3, sp, #56	; 0x38
 80115f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115f4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80115f8:	a90e      	add	r1, sp, #56	; 0x38
 80115fa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80115fe:	e739      	b.n	8011474 <__kernel_rem_pio2+0x1cc>
 8011600:	1e62      	subs	r2, r4, #1
 8011602:	ab0e      	add	r3, sp, #56	; 0x38
 8011604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011608:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801160c:	e7f4      	b.n	80115f8 <__kernel_rem_pio2+0x350>
 801160e:	a90e      	add	r1, sp, #56	; 0x38
 8011610:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011614:	3b01      	subs	r3, #1
 8011616:	430a      	orrs	r2, r1
 8011618:	e789      	b.n	801152e <__kernel_rem_pio2+0x286>
 801161a:	3301      	adds	r3, #1
 801161c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011620:	2900      	cmp	r1, #0
 8011622:	d0fa      	beq.n	801161a <__kernel_rem_pio2+0x372>
 8011624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011626:	f502 721a 	add.w	r2, r2, #616	; 0x268
 801162a:	446a      	add	r2, sp
 801162c:	3a98      	subs	r2, #152	; 0x98
 801162e:	920a      	str	r2, [sp, #40]	; 0x28
 8011630:	9a08      	ldr	r2, [sp, #32]
 8011632:	18e3      	adds	r3, r4, r3
 8011634:	18a5      	adds	r5, r4, r2
 8011636:	aa22      	add	r2, sp, #136	; 0x88
 8011638:	f104 0801 	add.w	r8, r4, #1
 801163c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011640:	9304      	str	r3, [sp, #16]
 8011642:	9b04      	ldr	r3, [sp, #16]
 8011644:	4543      	cmp	r3, r8
 8011646:	da04      	bge.n	8011652 <__kernel_rem_pio2+0x3aa>
 8011648:	461c      	mov	r4, r3
 801164a:	e6a3      	b.n	8011394 <__kernel_rem_pio2+0xec>
 801164c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801164e:	2301      	movs	r3, #1
 8011650:	e7e4      	b.n	801161c <__kernel_rem_pio2+0x374>
 8011652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011654:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011658:	f7ee ff84 	bl	8000564 <__aeabi_i2d>
 801165c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011662:	46ab      	mov	fp, r5
 8011664:	461c      	mov	r4, r3
 8011666:	f04f 0900 	mov.w	r9, #0
 801166a:	2600      	movs	r6, #0
 801166c:	2700      	movs	r7, #0
 801166e:	9b06      	ldr	r3, [sp, #24]
 8011670:	4599      	cmp	r9, r3
 8011672:	dd06      	ble.n	8011682 <__kernel_rem_pio2+0x3da>
 8011674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011676:	e8e3 6702 	strd	r6, r7, [r3], #8
 801167a:	f108 0801 	add.w	r8, r8, #1
 801167e:	930a      	str	r3, [sp, #40]	; 0x28
 8011680:	e7df      	b.n	8011642 <__kernel_rem_pio2+0x39a>
 8011682:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011686:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801168a:	f7ee ffd5 	bl	8000638 <__aeabi_dmul>
 801168e:	4602      	mov	r2, r0
 8011690:	460b      	mov	r3, r1
 8011692:	4630      	mov	r0, r6
 8011694:	4639      	mov	r1, r7
 8011696:	f7ee fe19 	bl	80002cc <__adddf3>
 801169a:	f109 0901 	add.w	r9, r9, #1
 801169e:	4606      	mov	r6, r0
 80116a0:	460f      	mov	r7, r1
 80116a2:	e7e4      	b.n	801166e <__kernel_rem_pio2+0x3c6>
 80116a4:	3d01      	subs	r5, #1
 80116a6:	e748      	b.n	801153a <__kernel_rem_pio2+0x292>
 80116a8:	ec47 6b10 	vmov	d0, r6, r7
 80116ac:	f1ca 0000 	rsb	r0, sl, #0
 80116b0:	f000 fbd6 	bl	8011e60 <scalbn>
 80116b4:	ec57 6b10 	vmov	r6, r7, d0
 80116b8:	4ba0      	ldr	r3, [pc, #640]	; (801193c <__kernel_rem_pio2+0x694>)
 80116ba:	ee10 0a10 	vmov	r0, s0
 80116be:	2200      	movs	r2, #0
 80116c0:	4639      	mov	r1, r7
 80116c2:	f7ef fa3f 	bl	8000b44 <__aeabi_dcmpge>
 80116c6:	b1f8      	cbz	r0, 8011708 <__kernel_rem_pio2+0x460>
 80116c8:	4b9d      	ldr	r3, [pc, #628]	; (8011940 <__kernel_rem_pio2+0x698>)
 80116ca:	2200      	movs	r2, #0
 80116cc:	4630      	mov	r0, r6
 80116ce:	4639      	mov	r1, r7
 80116d0:	f7ee ffb2 	bl	8000638 <__aeabi_dmul>
 80116d4:	f7ef fa60 	bl	8000b98 <__aeabi_d2iz>
 80116d8:	4680      	mov	r8, r0
 80116da:	f7ee ff43 	bl	8000564 <__aeabi_i2d>
 80116de:	4b97      	ldr	r3, [pc, #604]	; (801193c <__kernel_rem_pio2+0x694>)
 80116e0:	2200      	movs	r2, #0
 80116e2:	f7ee ffa9 	bl	8000638 <__aeabi_dmul>
 80116e6:	460b      	mov	r3, r1
 80116e8:	4602      	mov	r2, r0
 80116ea:	4639      	mov	r1, r7
 80116ec:	4630      	mov	r0, r6
 80116ee:	f7ee fdeb 	bl	80002c8 <__aeabi_dsub>
 80116f2:	f7ef fa51 	bl	8000b98 <__aeabi_d2iz>
 80116f6:	1c65      	adds	r5, r4, #1
 80116f8:	ab0e      	add	r3, sp, #56	; 0x38
 80116fa:	f10a 0a18 	add.w	sl, sl, #24
 80116fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011702:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011706:	e720      	b.n	801154a <__kernel_rem_pio2+0x2a2>
 8011708:	4630      	mov	r0, r6
 801170a:	4639      	mov	r1, r7
 801170c:	f7ef fa44 	bl	8000b98 <__aeabi_d2iz>
 8011710:	ab0e      	add	r3, sp, #56	; 0x38
 8011712:	4625      	mov	r5, r4
 8011714:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011718:	e717      	b.n	801154a <__kernel_rem_pio2+0x2a2>
 801171a:	ab0e      	add	r3, sp, #56	; 0x38
 801171c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011720:	f7ee ff20 	bl	8000564 <__aeabi_i2d>
 8011724:	4632      	mov	r2, r6
 8011726:	463b      	mov	r3, r7
 8011728:	f7ee ff86 	bl	8000638 <__aeabi_dmul>
 801172c:	4b84      	ldr	r3, [pc, #528]	; (8011940 <__kernel_rem_pio2+0x698>)
 801172e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8011732:	2200      	movs	r2, #0
 8011734:	4630      	mov	r0, r6
 8011736:	4639      	mov	r1, r7
 8011738:	f7ee ff7e 	bl	8000638 <__aeabi_dmul>
 801173c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011740:	4606      	mov	r6, r0
 8011742:	460f      	mov	r7, r1
 8011744:	e70f      	b.n	8011566 <__kernel_rem_pio2+0x2be>
 8011746:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801174a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801174e:	f7ee ff73 	bl	8000638 <__aeabi_dmul>
 8011752:	4602      	mov	r2, r0
 8011754:	460b      	mov	r3, r1
 8011756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801175a:	f7ee fdb7 	bl	80002cc <__adddf3>
 801175e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011762:	f108 0801 	add.w	r8, r8, #1
 8011766:	9b02      	ldr	r3, [sp, #8]
 8011768:	4598      	cmp	r8, r3
 801176a:	dc01      	bgt.n	8011770 <__kernel_rem_pio2+0x4c8>
 801176c:	45b8      	cmp	r8, r7
 801176e:	ddea      	ble.n	8011746 <__kernel_rem_pio2+0x49e>
 8011770:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011774:	ab4a      	add	r3, sp, #296	; 0x128
 8011776:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801177a:	ed87 7b00 	vstr	d7, [r7]
 801177e:	3e01      	subs	r6, #1
 8011780:	e6f8      	b.n	8011574 <__kernel_rem_pio2+0x2cc>
 8011782:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011784:	2b02      	cmp	r3, #2
 8011786:	dc0b      	bgt.n	80117a0 <__kernel_rem_pio2+0x4f8>
 8011788:	2b00      	cmp	r3, #0
 801178a:	dc35      	bgt.n	80117f8 <__kernel_rem_pio2+0x550>
 801178c:	d059      	beq.n	8011842 <__kernel_rem_pio2+0x59a>
 801178e:	9b04      	ldr	r3, [sp, #16]
 8011790:	f003 0007 	and.w	r0, r3, #7
 8011794:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011798:	ecbd 8b02 	vpop	{d8}
 801179c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117a0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80117a2:	2b03      	cmp	r3, #3
 80117a4:	d1f3      	bne.n	801178e <__kernel_rem_pio2+0x4e6>
 80117a6:	ab4a      	add	r3, sp, #296	; 0x128
 80117a8:	4423      	add	r3, r4
 80117aa:	9306      	str	r3, [sp, #24]
 80117ac:	461c      	mov	r4, r3
 80117ae:	469a      	mov	sl, r3
 80117b0:	9502      	str	r5, [sp, #8]
 80117b2:	9b02      	ldr	r3, [sp, #8]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	f1aa 0a08 	sub.w	sl, sl, #8
 80117ba:	dc6b      	bgt.n	8011894 <__kernel_rem_pio2+0x5ec>
 80117bc:	46aa      	mov	sl, r5
 80117be:	f1ba 0f01 	cmp.w	sl, #1
 80117c2:	f1a4 0408 	sub.w	r4, r4, #8
 80117c6:	f300 8085 	bgt.w	80118d4 <__kernel_rem_pio2+0x62c>
 80117ca:	9c06      	ldr	r4, [sp, #24]
 80117cc:	2000      	movs	r0, #0
 80117ce:	3408      	adds	r4, #8
 80117d0:	2100      	movs	r1, #0
 80117d2:	2d01      	cmp	r5, #1
 80117d4:	f300 809d 	bgt.w	8011912 <__kernel_rem_pio2+0x66a>
 80117d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80117dc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80117e0:	f1bb 0f00 	cmp.w	fp, #0
 80117e4:	f040 809b 	bne.w	801191e <__kernel_rem_pio2+0x676>
 80117e8:	9b01      	ldr	r3, [sp, #4]
 80117ea:	e9c3 5600 	strd	r5, r6, [r3]
 80117ee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80117f2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80117f6:	e7ca      	b.n	801178e <__kernel_rem_pio2+0x4e6>
 80117f8:	3408      	adds	r4, #8
 80117fa:	ab4a      	add	r3, sp, #296	; 0x128
 80117fc:	441c      	add	r4, r3
 80117fe:	462e      	mov	r6, r5
 8011800:	2000      	movs	r0, #0
 8011802:	2100      	movs	r1, #0
 8011804:	2e00      	cmp	r6, #0
 8011806:	da36      	bge.n	8011876 <__kernel_rem_pio2+0x5ce>
 8011808:	f1bb 0f00 	cmp.w	fp, #0
 801180c:	d039      	beq.n	8011882 <__kernel_rem_pio2+0x5da>
 801180e:	4602      	mov	r2, r0
 8011810:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011814:	9c01      	ldr	r4, [sp, #4]
 8011816:	e9c4 2300 	strd	r2, r3, [r4]
 801181a:	4602      	mov	r2, r0
 801181c:	460b      	mov	r3, r1
 801181e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011822:	f7ee fd51 	bl	80002c8 <__aeabi_dsub>
 8011826:	ae4c      	add	r6, sp, #304	; 0x130
 8011828:	2401      	movs	r4, #1
 801182a:	42a5      	cmp	r5, r4
 801182c:	da2c      	bge.n	8011888 <__kernel_rem_pio2+0x5e0>
 801182e:	f1bb 0f00 	cmp.w	fp, #0
 8011832:	d002      	beq.n	801183a <__kernel_rem_pio2+0x592>
 8011834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011838:	4619      	mov	r1, r3
 801183a:	9b01      	ldr	r3, [sp, #4]
 801183c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011840:	e7a5      	b.n	801178e <__kernel_rem_pio2+0x4e6>
 8011842:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8011846:	eb0d 0403 	add.w	r4, sp, r3
 801184a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801184e:	2000      	movs	r0, #0
 8011850:	2100      	movs	r1, #0
 8011852:	2d00      	cmp	r5, #0
 8011854:	da09      	bge.n	801186a <__kernel_rem_pio2+0x5c2>
 8011856:	f1bb 0f00 	cmp.w	fp, #0
 801185a:	d002      	beq.n	8011862 <__kernel_rem_pio2+0x5ba>
 801185c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011860:	4619      	mov	r1, r3
 8011862:	9b01      	ldr	r3, [sp, #4]
 8011864:	e9c3 0100 	strd	r0, r1, [r3]
 8011868:	e791      	b.n	801178e <__kernel_rem_pio2+0x4e6>
 801186a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801186e:	f7ee fd2d 	bl	80002cc <__adddf3>
 8011872:	3d01      	subs	r5, #1
 8011874:	e7ed      	b.n	8011852 <__kernel_rem_pio2+0x5aa>
 8011876:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801187a:	f7ee fd27 	bl	80002cc <__adddf3>
 801187e:	3e01      	subs	r6, #1
 8011880:	e7c0      	b.n	8011804 <__kernel_rem_pio2+0x55c>
 8011882:	4602      	mov	r2, r0
 8011884:	460b      	mov	r3, r1
 8011886:	e7c5      	b.n	8011814 <__kernel_rem_pio2+0x56c>
 8011888:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801188c:	f7ee fd1e 	bl	80002cc <__adddf3>
 8011890:	3401      	adds	r4, #1
 8011892:	e7ca      	b.n	801182a <__kernel_rem_pio2+0x582>
 8011894:	e9da 8900 	ldrd	r8, r9, [sl]
 8011898:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801189c:	9b02      	ldr	r3, [sp, #8]
 801189e:	3b01      	subs	r3, #1
 80118a0:	9302      	str	r3, [sp, #8]
 80118a2:	4632      	mov	r2, r6
 80118a4:	463b      	mov	r3, r7
 80118a6:	4640      	mov	r0, r8
 80118a8:	4649      	mov	r1, r9
 80118aa:	f7ee fd0f 	bl	80002cc <__adddf3>
 80118ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80118b2:	4602      	mov	r2, r0
 80118b4:	460b      	mov	r3, r1
 80118b6:	4640      	mov	r0, r8
 80118b8:	4649      	mov	r1, r9
 80118ba:	f7ee fd05 	bl	80002c8 <__aeabi_dsub>
 80118be:	4632      	mov	r2, r6
 80118c0:	463b      	mov	r3, r7
 80118c2:	f7ee fd03 	bl	80002cc <__adddf3>
 80118c6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80118ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80118ce:	ed8a 7b00 	vstr	d7, [sl]
 80118d2:	e76e      	b.n	80117b2 <__kernel_rem_pio2+0x50a>
 80118d4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80118d8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80118dc:	4640      	mov	r0, r8
 80118de:	4632      	mov	r2, r6
 80118e0:	463b      	mov	r3, r7
 80118e2:	4649      	mov	r1, r9
 80118e4:	f7ee fcf2 	bl	80002cc <__adddf3>
 80118e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118ec:	4602      	mov	r2, r0
 80118ee:	460b      	mov	r3, r1
 80118f0:	4640      	mov	r0, r8
 80118f2:	4649      	mov	r1, r9
 80118f4:	f7ee fce8 	bl	80002c8 <__aeabi_dsub>
 80118f8:	4632      	mov	r2, r6
 80118fa:	463b      	mov	r3, r7
 80118fc:	f7ee fce6 	bl	80002cc <__adddf3>
 8011900:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011904:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011908:	ed84 7b00 	vstr	d7, [r4]
 801190c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011910:	e755      	b.n	80117be <__kernel_rem_pio2+0x516>
 8011912:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011916:	f7ee fcd9 	bl	80002cc <__adddf3>
 801191a:	3d01      	subs	r5, #1
 801191c:	e759      	b.n	80117d2 <__kernel_rem_pio2+0x52a>
 801191e:	9b01      	ldr	r3, [sp, #4]
 8011920:	9a01      	ldr	r2, [sp, #4]
 8011922:	601d      	str	r5, [r3, #0]
 8011924:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011928:	605c      	str	r4, [r3, #4]
 801192a:	609f      	str	r7, [r3, #8]
 801192c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011930:	60d3      	str	r3, [r2, #12]
 8011932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011936:	6110      	str	r0, [r2, #16]
 8011938:	6153      	str	r3, [r2, #20]
 801193a:	e728      	b.n	801178e <__kernel_rem_pio2+0x4e6>
 801193c:	41700000 	.word	0x41700000
 8011940:	3e700000 	.word	0x3e700000
 8011944:	00000000 	.word	0x00000000

08011948 <__kernel_tan>:
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	ed2d 8b06 	vpush	{d8-d10}
 8011950:	ec5b ab10 	vmov	sl, fp, d0
 8011954:	4be0      	ldr	r3, [pc, #896]	; (8011cd8 <__kernel_tan+0x390>)
 8011956:	b083      	sub	sp, #12
 8011958:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 801195c:	429f      	cmp	r7, r3
 801195e:	ec59 8b11 	vmov	r8, r9, d1
 8011962:	4606      	mov	r6, r0
 8011964:	f8cd b000 	str.w	fp, [sp]
 8011968:	dc61      	bgt.n	8011a2e <__kernel_tan+0xe6>
 801196a:	ee10 0a10 	vmov	r0, s0
 801196e:	4659      	mov	r1, fp
 8011970:	f7ef f912 	bl	8000b98 <__aeabi_d2iz>
 8011974:	4605      	mov	r5, r0
 8011976:	2800      	cmp	r0, #0
 8011978:	f040 8083 	bne.w	8011a82 <__kernel_tan+0x13a>
 801197c:	1c73      	adds	r3, r6, #1
 801197e:	4652      	mov	r2, sl
 8011980:	4313      	orrs	r3, r2
 8011982:	433b      	orrs	r3, r7
 8011984:	d112      	bne.n	80119ac <__kernel_tan+0x64>
 8011986:	ec4b ab10 	vmov	d0, sl, fp
 801198a:	f7ff fa41 	bl	8010e10 <fabs>
 801198e:	49d3      	ldr	r1, [pc, #844]	; (8011cdc <__kernel_tan+0x394>)
 8011990:	ec53 2b10 	vmov	r2, r3, d0
 8011994:	2000      	movs	r0, #0
 8011996:	f7ee ff79 	bl	800088c <__aeabi_ddiv>
 801199a:	4682      	mov	sl, r0
 801199c:	468b      	mov	fp, r1
 801199e:	ec4b ab10 	vmov	d0, sl, fp
 80119a2:	b003      	add	sp, #12
 80119a4:	ecbd 8b06 	vpop	{d8-d10}
 80119a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ac:	2e01      	cmp	r6, #1
 80119ae:	d0f6      	beq.n	801199e <__kernel_tan+0x56>
 80119b0:	4642      	mov	r2, r8
 80119b2:	464b      	mov	r3, r9
 80119b4:	4650      	mov	r0, sl
 80119b6:	4659      	mov	r1, fp
 80119b8:	f7ee fc88 	bl	80002cc <__adddf3>
 80119bc:	4602      	mov	r2, r0
 80119be:	460b      	mov	r3, r1
 80119c0:	460f      	mov	r7, r1
 80119c2:	2000      	movs	r0, #0
 80119c4:	49c6      	ldr	r1, [pc, #792]	; (8011ce0 <__kernel_tan+0x398>)
 80119c6:	f7ee ff61 	bl	800088c <__aeabi_ddiv>
 80119ca:	e9cd 0100 	strd	r0, r1, [sp]
 80119ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80119d2:	462e      	mov	r6, r5
 80119d4:	4652      	mov	r2, sl
 80119d6:	462c      	mov	r4, r5
 80119d8:	4630      	mov	r0, r6
 80119da:	461d      	mov	r5, r3
 80119dc:	4639      	mov	r1, r7
 80119de:	465b      	mov	r3, fp
 80119e0:	f7ee fc72 	bl	80002c8 <__aeabi_dsub>
 80119e4:	4602      	mov	r2, r0
 80119e6:	460b      	mov	r3, r1
 80119e8:	4640      	mov	r0, r8
 80119ea:	4649      	mov	r1, r9
 80119ec:	f7ee fc6c 	bl	80002c8 <__aeabi_dsub>
 80119f0:	4632      	mov	r2, r6
 80119f2:	462b      	mov	r3, r5
 80119f4:	f7ee fe20 	bl	8000638 <__aeabi_dmul>
 80119f8:	4632      	mov	r2, r6
 80119fa:	4680      	mov	r8, r0
 80119fc:	4689      	mov	r9, r1
 80119fe:	462b      	mov	r3, r5
 8011a00:	4630      	mov	r0, r6
 8011a02:	4639      	mov	r1, r7
 8011a04:	f7ee fe18 	bl	8000638 <__aeabi_dmul>
 8011a08:	4bb4      	ldr	r3, [pc, #720]	; (8011cdc <__kernel_tan+0x394>)
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	f7ee fc5e 	bl	80002cc <__adddf3>
 8011a10:	4602      	mov	r2, r0
 8011a12:	460b      	mov	r3, r1
 8011a14:	4640      	mov	r0, r8
 8011a16:	4649      	mov	r1, r9
 8011a18:	f7ee fc58 	bl	80002cc <__adddf3>
 8011a1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a20:	f7ee fe0a 	bl	8000638 <__aeabi_dmul>
 8011a24:	4622      	mov	r2, r4
 8011a26:	462b      	mov	r3, r5
 8011a28:	f7ee fc50 	bl	80002cc <__adddf3>
 8011a2c:	e7b5      	b.n	801199a <__kernel_tan+0x52>
 8011a2e:	4bad      	ldr	r3, [pc, #692]	; (8011ce4 <__kernel_tan+0x39c>)
 8011a30:	429f      	cmp	r7, r3
 8011a32:	dd26      	ble.n	8011a82 <__kernel_tan+0x13a>
 8011a34:	9b00      	ldr	r3, [sp, #0]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	da09      	bge.n	8011a4e <__kernel_tan+0x106>
 8011a3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011a3e:	469b      	mov	fp, r3
 8011a40:	ee10 aa10 	vmov	sl, s0
 8011a44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011a48:	ee11 8a10 	vmov	r8, s2
 8011a4c:	4699      	mov	r9, r3
 8011a4e:	4652      	mov	r2, sl
 8011a50:	465b      	mov	r3, fp
 8011a52:	a183      	add	r1, pc, #524	; (adr r1, 8011c60 <__kernel_tan+0x318>)
 8011a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a58:	f7ee fc36 	bl	80002c8 <__aeabi_dsub>
 8011a5c:	4642      	mov	r2, r8
 8011a5e:	464b      	mov	r3, r9
 8011a60:	4604      	mov	r4, r0
 8011a62:	460d      	mov	r5, r1
 8011a64:	a180      	add	r1, pc, #512	; (adr r1, 8011c68 <__kernel_tan+0x320>)
 8011a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a6a:	f7ee fc2d 	bl	80002c8 <__aeabi_dsub>
 8011a6e:	4622      	mov	r2, r4
 8011a70:	462b      	mov	r3, r5
 8011a72:	f7ee fc2b 	bl	80002cc <__adddf3>
 8011a76:	f04f 0800 	mov.w	r8, #0
 8011a7a:	4682      	mov	sl, r0
 8011a7c:	468b      	mov	fp, r1
 8011a7e:	f04f 0900 	mov.w	r9, #0
 8011a82:	4652      	mov	r2, sl
 8011a84:	465b      	mov	r3, fp
 8011a86:	4650      	mov	r0, sl
 8011a88:	4659      	mov	r1, fp
 8011a8a:	f7ee fdd5 	bl	8000638 <__aeabi_dmul>
 8011a8e:	4602      	mov	r2, r0
 8011a90:	460b      	mov	r3, r1
 8011a92:	ec43 2b18 	vmov	d8, r2, r3
 8011a96:	f7ee fdcf 	bl	8000638 <__aeabi_dmul>
 8011a9a:	ec53 2b18 	vmov	r2, r3, d8
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	460d      	mov	r5, r1
 8011aa2:	4650      	mov	r0, sl
 8011aa4:	4659      	mov	r1, fp
 8011aa6:	f7ee fdc7 	bl	8000638 <__aeabi_dmul>
 8011aaa:	a371      	add	r3, pc, #452	; (adr r3, 8011c70 <__kernel_tan+0x328>)
 8011aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab0:	ec41 0b19 	vmov	d9, r0, r1
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	4629      	mov	r1, r5
 8011ab8:	f7ee fdbe 	bl	8000638 <__aeabi_dmul>
 8011abc:	a36e      	add	r3, pc, #440	; (adr r3, 8011c78 <__kernel_tan+0x330>)
 8011abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac2:	f7ee fc03 	bl	80002cc <__adddf3>
 8011ac6:	4622      	mov	r2, r4
 8011ac8:	462b      	mov	r3, r5
 8011aca:	f7ee fdb5 	bl	8000638 <__aeabi_dmul>
 8011ace:	a36c      	add	r3, pc, #432	; (adr r3, 8011c80 <__kernel_tan+0x338>)
 8011ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad4:	f7ee fbfa 	bl	80002cc <__adddf3>
 8011ad8:	4622      	mov	r2, r4
 8011ada:	462b      	mov	r3, r5
 8011adc:	f7ee fdac 	bl	8000638 <__aeabi_dmul>
 8011ae0:	a369      	add	r3, pc, #420	; (adr r3, 8011c88 <__kernel_tan+0x340>)
 8011ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae6:	f7ee fbf1 	bl	80002cc <__adddf3>
 8011aea:	4622      	mov	r2, r4
 8011aec:	462b      	mov	r3, r5
 8011aee:	f7ee fda3 	bl	8000638 <__aeabi_dmul>
 8011af2:	a367      	add	r3, pc, #412	; (adr r3, 8011c90 <__kernel_tan+0x348>)
 8011af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af8:	f7ee fbe8 	bl	80002cc <__adddf3>
 8011afc:	4622      	mov	r2, r4
 8011afe:	462b      	mov	r3, r5
 8011b00:	f7ee fd9a 	bl	8000638 <__aeabi_dmul>
 8011b04:	a364      	add	r3, pc, #400	; (adr r3, 8011c98 <__kernel_tan+0x350>)
 8011b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0a:	f7ee fbdf 	bl	80002cc <__adddf3>
 8011b0e:	ec53 2b18 	vmov	r2, r3, d8
 8011b12:	f7ee fd91 	bl	8000638 <__aeabi_dmul>
 8011b16:	a362      	add	r3, pc, #392	; (adr r3, 8011ca0 <__kernel_tan+0x358>)
 8011b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1c:	ec41 0b1a 	vmov	d10, r0, r1
 8011b20:	4620      	mov	r0, r4
 8011b22:	4629      	mov	r1, r5
 8011b24:	f7ee fd88 	bl	8000638 <__aeabi_dmul>
 8011b28:	a35f      	add	r3, pc, #380	; (adr r3, 8011ca8 <__kernel_tan+0x360>)
 8011b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b2e:	f7ee fbcd 	bl	80002cc <__adddf3>
 8011b32:	4622      	mov	r2, r4
 8011b34:	462b      	mov	r3, r5
 8011b36:	f7ee fd7f 	bl	8000638 <__aeabi_dmul>
 8011b3a:	a35d      	add	r3, pc, #372	; (adr r3, 8011cb0 <__kernel_tan+0x368>)
 8011b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b40:	f7ee fbc4 	bl	80002cc <__adddf3>
 8011b44:	4622      	mov	r2, r4
 8011b46:	462b      	mov	r3, r5
 8011b48:	f7ee fd76 	bl	8000638 <__aeabi_dmul>
 8011b4c:	a35a      	add	r3, pc, #360	; (adr r3, 8011cb8 <__kernel_tan+0x370>)
 8011b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b52:	f7ee fbbb 	bl	80002cc <__adddf3>
 8011b56:	4622      	mov	r2, r4
 8011b58:	462b      	mov	r3, r5
 8011b5a:	f7ee fd6d 	bl	8000638 <__aeabi_dmul>
 8011b5e:	a358      	add	r3, pc, #352	; (adr r3, 8011cc0 <__kernel_tan+0x378>)
 8011b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b64:	f7ee fbb2 	bl	80002cc <__adddf3>
 8011b68:	4622      	mov	r2, r4
 8011b6a:	462b      	mov	r3, r5
 8011b6c:	f7ee fd64 	bl	8000638 <__aeabi_dmul>
 8011b70:	a355      	add	r3, pc, #340	; (adr r3, 8011cc8 <__kernel_tan+0x380>)
 8011b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b76:	f7ee fba9 	bl	80002cc <__adddf3>
 8011b7a:	4602      	mov	r2, r0
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	ec51 0b1a 	vmov	r0, r1, d10
 8011b82:	f7ee fba3 	bl	80002cc <__adddf3>
 8011b86:	ec53 2b19 	vmov	r2, r3, d9
 8011b8a:	f7ee fd55 	bl	8000638 <__aeabi_dmul>
 8011b8e:	4642      	mov	r2, r8
 8011b90:	464b      	mov	r3, r9
 8011b92:	f7ee fb9b 	bl	80002cc <__adddf3>
 8011b96:	ec53 2b18 	vmov	r2, r3, d8
 8011b9a:	f7ee fd4d 	bl	8000638 <__aeabi_dmul>
 8011b9e:	4642      	mov	r2, r8
 8011ba0:	464b      	mov	r3, r9
 8011ba2:	f7ee fb93 	bl	80002cc <__adddf3>
 8011ba6:	a34a      	add	r3, pc, #296	; (adr r3, 8011cd0 <__kernel_tan+0x388>)
 8011ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bac:	4604      	mov	r4, r0
 8011bae:	460d      	mov	r5, r1
 8011bb0:	ec51 0b19 	vmov	r0, r1, d9
 8011bb4:	f7ee fd40 	bl	8000638 <__aeabi_dmul>
 8011bb8:	4622      	mov	r2, r4
 8011bba:	462b      	mov	r3, r5
 8011bbc:	f7ee fb86 	bl	80002cc <__adddf3>
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	ec41 0b18 	vmov	d8, r0, r1
 8011bc6:	4602      	mov	r2, r0
 8011bc8:	4659      	mov	r1, fp
 8011bca:	4650      	mov	r0, sl
 8011bcc:	f7ee fb7e 	bl	80002cc <__adddf3>
 8011bd0:	4b44      	ldr	r3, [pc, #272]	; (8011ce4 <__kernel_tan+0x39c>)
 8011bd2:	429f      	cmp	r7, r3
 8011bd4:	4604      	mov	r4, r0
 8011bd6:	460d      	mov	r5, r1
 8011bd8:	f340 8086 	ble.w	8011ce8 <__kernel_tan+0x3a0>
 8011bdc:	4630      	mov	r0, r6
 8011bde:	f7ee fcc1 	bl	8000564 <__aeabi_i2d>
 8011be2:	4622      	mov	r2, r4
 8011be4:	4680      	mov	r8, r0
 8011be6:	4689      	mov	r9, r1
 8011be8:	462b      	mov	r3, r5
 8011bea:	4620      	mov	r0, r4
 8011bec:	4629      	mov	r1, r5
 8011bee:	f7ee fd23 	bl	8000638 <__aeabi_dmul>
 8011bf2:	4642      	mov	r2, r8
 8011bf4:	4606      	mov	r6, r0
 8011bf6:	460f      	mov	r7, r1
 8011bf8:	464b      	mov	r3, r9
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	4629      	mov	r1, r5
 8011bfe:	f7ee fb65 	bl	80002cc <__adddf3>
 8011c02:	4602      	mov	r2, r0
 8011c04:	460b      	mov	r3, r1
 8011c06:	4630      	mov	r0, r6
 8011c08:	4639      	mov	r1, r7
 8011c0a:	f7ee fe3f 	bl	800088c <__aeabi_ddiv>
 8011c0e:	ec53 2b18 	vmov	r2, r3, d8
 8011c12:	f7ee fb59 	bl	80002c8 <__aeabi_dsub>
 8011c16:	4602      	mov	r2, r0
 8011c18:	460b      	mov	r3, r1
 8011c1a:	4650      	mov	r0, sl
 8011c1c:	4659      	mov	r1, fp
 8011c1e:	f7ee fb53 	bl	80002c8 <__aeabi_dsub>
 8011c22:	4602      	mov	r2, r0
 8011c24:	460b      	mov	r3, r1
 8011c26:	f7ee fb51 	bl	80002cc <__adddf3>
 8011c2a:	4602      	mov	r2, r0
 8011c2c:	460b      	mov	r3, r1
 8011c2e:	4640      	mov	r0, r8
 8011c30:	4649      	mov	r1, r9
 8011c32:	f7ee fb49 	bl	80002c8 <__aeabi_dsub>
 8011c36:	9b00      	ldr	r3, [sp, #0]
 8011c38:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8011c3c:	f00a 0a02 	and.w	sl, sl, #2
 8011c40:	4604      	mov	r4, r0
 8011c42:	f1ca 0001 	rsb	r0, sl, #1
 8011c46:	460d      	mov	r5, r1
 8011c48:	f7ee fc8c 	bl	8000564 <__aeabi_i2d>
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	460b      	mov	r3, r1
 8011c50:	4620      	mov	r0, r4
 8011c52:	4629      	mov	r1, r5
 8011c54:	f7ee fcf0 	bl	8000638 <__aeabi_dmul>
 8011c58:	e69f      	b.n	801199a <__kernel_tan+0x52>
 8011c5a:	bf00      	nop
 8011c5c:	f3af 8000 	nop.w
 8011c60:	54442d18 	.word	0x54442d18
 8011c64:	3fe921fb 	.word	0x3fe921fb
 8011c68:	33145c07 	.word	0x33145c07
 8011c6c:	3c81a626 	.word	0x3c81a626
 8011c70:	74bf7ad4 	.word	0x74bf7ad4
 8011c74:	3efb2a70 	.word	0x3efb2a70
 8011c78:	32f0a7e9 	.word	0x32f0a7e9
 8011c7c:	3f12b80f 	.word	0x3f12b80f
 8011c80:	1a8d1068 	.word	0x1a8d1068
 8011c84:	3f3026f7 	.word	0x3f3026f7
 8011c88:	fee08315 	.word	0xfee08315
 8011c8c:	3f57dbc8 	.word	0x3f57dbc8
 8011c90:	e96e8493 	.word	0xe96e8493
 8011c94:	3f8226e3 	.word	0x3f8226e3
 8011c98:	1bb341fe 	.word	0x1bb341fe
 8011c9c:	3faba1ba 	.word	0x3faba1ba
 8011ca0:	db605373 	.word	0xdb605373
 8011ca4:	bef375cb 	.word	0xbef375cb
 8011ca8:	a03792a6 	.word	0xa03792a6
 8011cac:	3f147e88 	.word	0x3f147e88
 8011cb0:	f2f26501 	.word	0xf2f26501
 8011cb4:	3f4344d8 	.word	0x3f4344d8
 8011cb8:	c9560328 	.word	0xc9560328
 8011cbc:	3f6d6d22 	.word	0x3f6d6d22
 8011cc0:	8406d637 	.word	0x8406d637
 8011cc4:	3f9664f4 	.word	0x3f9664f4
 8011cc8:	1110fe7a 	.word	0x1110fe7a
 8011ccc:	3fc11111 	.word	0x3fc11111
 8011cd0:	55555563 	.word	0x55555563
 8011cd4:	3fd55555 	.word	0x3fd55555
 8011cd8:	3e2fffff 	.word	0x3e2fffff
 8011cdc:	3ff00000 	.word	0x3ff00000
 8011ce0:	bff00000 	.word	0xbff00000
 8011ce4:	3fe59427 	.word	0x3fe59427
 8011ce8:	2e01      	cmp	r6, #1
 8011cea:	d02f      	beq.n	8011d4c <__kernel_tan+0x404>
 8011cec:	460f      	mov	r7, r1
 8011cee:	4602      	mov	r2, r0
 8011cf0:	460b      	mov	r3, r1
 8011cf2:	4689      	mov	r9, r1
 8011cf4:	2000      	movs	r0, #0
 8011cf6:	4917      	ldr	r1, [pc, #92]	; (8011d54 <__kernel_tan+0x40c>)
 8011cf8:	f7ee fdc8 	bl	800088c <__aeabi_ddiv>
 8011cfc:	2600      	movs	r6, #0
 8011cfe:	e9cd 0100 	strd	r0, r1, [sp]
 8011d02:	4652      	mov	r2, sl
 8011d04:	465b      	mov	r3, fp
 8011d06:	4630      	mov	r0, r6
 8011d08:	4639      	mov	r1, r7
 8011d0a:	f7ee fadd 	bl	80002c8 <__aeabi_dsub>
 8011d0e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8011d12:	4602      	mov	r2, r0
 8011d14:	460b      	mov	r3, r1
 8011d16:	ec51 0b18 	vmov	r0, r1, d8
 8011d1a:	f7ee fad5 	bl	80002c8 <__aeabi_dsub>
 8011d1e:	4632      	mov	r2, r6
 8011d20:	462b      	mov	r3, r5
 8011d22:	f7ee fc89 	bl	8000638 <__aeabi_dmul>
 8011d26:	46b0      	mov	r8, r6
 8011d28:	460f      	mov	r7, r1
 8011d2a:	4642      	mov	r2, r8
 8011d2c:	462b      	mov	r3, r5
 8011d2e:	4634      	mov	r4, r6
 8011d30:	4649      	mov	r1, r9
 8011d32:	4606      	mov	r6, r0
 8011d34:	4640      	mov	r0, r8
 8011d36:	f7ee fc7f 	bl	8000638 <__aeabi_dmul>
 8011d3a:	4b07      	ldr	r3, [pc, #28]	; (8011d58 <__kernel_tan+0x410>)
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	f7ee fac5 	bl	80002cc <__adddf3>
 8011d42:	4602      	mov	r2, r0
 8011d44:	460b      	mov	r3, r1
 8011d46:	4630      	mov	r0, r6
 8011d48:	4639      	mov	r1, r7
 8011d4a:	e665      	b.n	8011a18 <__kernel_tan+0xd0>
 8011d4c:	4682      	mov	sl, r0
 8011d4e:	468b      	mov	fp, r1
 8011d50:	e625      	b.n	801199e <__kernel_tan+0x56>
 8011d52:	bf00      	nop
 8011d54:	bff00000 	.word	0xbff00000
 8011d58:	3ff00000 	.word	0x3ff00000
 8011d5c:	00000000 	.word	0x00000000

08011d60 <floor>:
 8011d60:	ec51 0b10 	vmov	r0, r1, d0
 8011d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011d6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011d70:	2e13      	cmp	r6, #19
 8011d72:	ee10 5a10 	vmov	r5, s0
 8011d76:	ee10 8a10 	vmov	r8, s0
 8011d7a:	460c      	mov	r4, r1
 8011d7c:	dc32      	bgt.n	8011de4 <floor+0x84>
 8011d7e:	2e00      	cmp	r6, #0
 8011d80:	da14      	bge.n	8011dac <floor+0x4c>
 8011d82:	a333      	add	r3, pc, #204	; (adr r3, 8011e50 <floor+0xf0>)
 8011d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d88:	f7ee faa0 	bl	80002cc <__adddf3>
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	2300      	movs	r3, #0
 8011d90:	f7ee fee2 	bl	8000b58 <__aeabi_dcmpgt>
 8011d94:	b138      	cbz	r0, 8011da6 <floor+0x46>
 8011d96:	2c00      	cmp	r4, #0
 8011d98:	da57      	bge.n	8011e4a <floor+0xea>
 8011d9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011d9e:	431d      	orrs	r5, r3
 8011da0:	d001      	beq.n	8011da6 <floor+0x46>
 8011da2:	4c2d      	ldr	r4, [pc, #180]	; (8011e58 <floor+0xf8>)
 8011da4:	2500      	movs	r5, #0
 8011da6:	4621      	mov	r1, r4
 8011da8:	4628      	mov	r0, r5
 8011daa:	e025      	b.n	8011df8 <floor+0x98>
 8011dac:	4f2b      	ldr	r7, [pc, #172]	; (8011e5c <floor+0xfc>)
 8011dae:	4137      	asrs	r7, r6
 8011db0:	ea01 0307 	and.w	r3, r1, r7
 8011db4:	4303      	orrs	r3, r0
 8011db6:	d01f      	beq.n	8011df8 <floor+0x98>
 8011db8:	a325      	add	r3, pc, #148	; (adr r3, 8011e50 <floor+0xf0>)
 8011dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dbe:	f7ee fa85 	bl	80002cc <__adddf3>
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	f7ee fec7 	bl	8000b58 <__aeabi_dcmpgt>
 8011dca:	2800      	cmp	r0, #0
 8011dcc:	d0eb      	beq.n	8011da6 <floor+0x46>
 8011dce:	2c00      	cmp	r4, #0
 8011dd0:	bfbe      	ittt	lt
 8011dd2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011dd6:	fa43 f606 	asrlt.w	r6, r3, r6
 8011dda:	19a4      	addlt	r4, r4, r6
 8011ddc:	ea24 0407 	bic.w	r4, r4, r7
 8011de0:	2500      	movs	r5, #0
 8011de2:	e7e0      	b.n	8011da6 <floor+0x46>
 8011de4:	2e33      	cmp	r6, #51	; 0x33
 8011de6:	dd0b      	ble.n	8011e00 <floor+0xa0>
 8011de8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011dec:	d104      	bne.n	8011df8 <floor+0x98>
 8011dee:	ee10 2a10 	vmov	r2, s0
 8011df2:	460b      	mov	r3, r1
 8011df4:	f7ee fa6a 	bl	80002cc <__adddf3>
 8011df8:	ec41 0b10 	vmov	d0, r0, r1
 8011dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e00:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011e04:	f04f 33ff 	mov.w	r3, #4294967295
 8011e08:	fa23 f707 	lsr.w	r7, r3, r7
 8011e0c:	4207      	tst	r7, r0
 8011e0e:	d0f3      	beq.n	8011df8 <floor+0x98>
 8011e10:	a30f      	add	r3, pc, #60	; (adr r3, 8011e50 <floor+0xf0>)
 8011e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e16:	f7ee fa59 	bl	80002cc <__adddf3>
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	f7ee fe9b 	bl	8000b58 <__aeabi_dcmpgt>
 8011e22:	2800      	cmp	r0, #0
 8011e24:	d0bf      	beq.n	8011da6 <floor+0x46>
 8011e26:	2c00      	cmp	r4, #0
 8011e28:	da02      	bge.n	8011e30 <floor+0xd0>
 8011e2a:	2e14      	cmp	r6, #20
 8011e2c:	d103      	bne.n	8011e36 <floor+0xd6>
 8011e2e:	3401      	adds	r4, #1
 8011e30:	ea25 0507 	bic.w	r5, r5, r7
 8011e34:	e7b7      	b.n	8011da6 <floor+0x46>
 8011e36:	2301      	movs	r3, #1
 8011e38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011e3c:	fa03 f606 	lsl.w	r6, r3, r6
 8011e40:	4435      	add	r5, r6
 8011e42:	4545      	cmp	r5, r8
 8011e44:	bf38      	it	cc
 8011e46:	18e4      	addcc	r4, r4, r3
 8011e48:	e7f2      	b.n	8011e30 <floor+0xd0>
 8011e4a:	2500      	movs	r5, #0
 8011e4c:	462c      	mov	r4, r5
 8011e4e:	e7aa      	b.n	8011da6 <floor+0x46>
 8011e50:	8800759c 	.word	0x8800759c
 8011e54:	7e37e43c 	.word	0x7e37e43c
 8011e58:	bff00000 	.word	0xbff00000
 8011e5c:	000fffff 	.word	0x000fffff

08011e60 <scalbn>:
 8011e60:	b570      	push	{r4, r5, r6, lr}
 8011e62:	ec55 4b10 	vmov	r4, r5, d0
 8011e66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011e6a:	4606      	mov	r6, r0
 8011e6c:	462b      	mov	r3, r5
 8011e6e:	b99a      	cbnz	r2, 8011e98 <scalbn+0x38>
 8011e70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011e74:	4323      	orrs	r3, r4
 8011e76:	d036      	beq.n	8011ee6 <scalbn+0x86>
 8011e78:	4b39      	ldr	r3, [pc, #228]	; (8011f60 <scalbn+0x100>)
 8011e7a:	4629      	mov	r1, r5
 8011e7c:	ee10 0a10 	vmov	r0, s0
 8011e80:	2200      	movs	r2, #0
 8011e82:	f7ee fbd9 	bl	8000638 <__aeabi_dmul>
 8011e86:	4b37      	ldr	r3, [pc, #220]	; (8011f64 <scalbn+0x104>)
 8011e88:	429e      	cmp	r6, r3
 8011e8a:	4604      	mov	r4, r0
 8011e8c:	460d      	mov	r5, r1
 8011e8e:	da10      	bge.n	8011eb2 <scalbn+0x52>
 8011e90:	a32b      	add	r3, pc, #172	; (adr r3, 8011f40 <scalbn+0xe0>)
 8011e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e96:	e03a      	b.n	8011f0e <scalbn+0xae>
 8011e98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011e9c:	428a      	cmp	r2, r1
 8011e9e:	d10c      	bne.n	8011eba <scalbn+0x5a>
 8011ea0:	ee10 2a10 	vmov	r2, s0
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	4629      	mov	r1, r5
 8011ea8:	f7ee fa10 	bl	80002cc <__adddf3>
 8011eac:	4604      	mov	r4, r0
 8011eae:	460d      	mov	r5, r1
 8011eb0:	e019      	b.n	8011ee6 <scalbn+0x86>
 8011eb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011eb6:	460b      	mov	r3, r1
 8011eb8:	3a36      	subs	r2, #54	; 0x36
 8011eba:	4432      	add	r2, r6
 8011ebc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011ec0:	428a      	cmp	r2, r1
 8011ec2:	dd08      	ble.n	8011ed6 <scalbn+0x76>
 8011ec4:	2d00      	cmp	r5, #0
 8011ec6:	a120      	add	r1, pc, #128	; (adr r1, 8011f48 <scalbn+0xe8>)
 8011ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ecc:	da1c      	bge.n	8011f08 <scalbn+0xa8>
 8011ece:	a120      	add	r1, pc, #128	; (adr r1, 8011f50 <scalbn+0xf0>)
 8011ed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ed4:	e018      	b.n	8011f08 <scalbn+0xa8>
 8011ed6:	2a00      	cmp	r2, #0
 8011ed8:	dd08      	ble.n	8011eec <scalbn+0x8c>
 8011eda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011ede:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011ee2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011ee6:	ec45 4b10 	vmov	d0, r4, r5
 8011eea:	bd70      	pop	{r4, r5, r6, pc}
 8011eec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011ef0:	da19      	bge.n	8011f26 <scalbn+0xc6>
 8011ef2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011ef6:	429e      	cmp	r6, r3
 8011ef8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011efc:	dd0a      	ble.n	8011f14 <scalbn+0xb4>
 8011efe:	a112      	add	r1, pc, #72	; (adr r1, 8011f48 <scalbn+0xe8>)
 8011f00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d1e2      	bne.n	8011ece <scalbn+0x6e>
 8011f08:	a30f      	add	r3, pc, #60	; (adr r3, 8011f48 <scalbn+0xe8>)
 8011f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0e:	f7ee fb93 	bl	8000638 <__aeabi_dmul>
 8011f12:	e7cb      	b.n	8011eac <scalbn+0x4c>
 8011f14:	a10a      	add	r1, pc, #40	; (adr r1, 8011f40 <scalbn+0xe0>)
 8011f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d0b8      	beq.n	8011e90 <scalbn+0x30>
 8011f1e:	a10e      	add	r1, pc, #56	; (adr r1, 8011f58 <scalbn+0xf8>)
 8011f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f24:	e7b4      	b.n	8011e90 <scalbn+0x30>
 8011f26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011f2a:	3236      	adds	r2, #54	; 0x36
 8011f2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011f30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011f34:	4620      	mov	r0, r4
 8011f36:	4b0c      	ldr	r3, [pc, #48]	; (8011f68 <scalbn+0x108>)
 8011f38:	2200      	movs	r2, #0
 8011f3a:	e7e8      	b.n	8011f0e <scalbn+0xae>
 8011f3c:	f3af 8000 	nop.w
 8011f40:	c2f8f359 	.word	0xc2f8f359
 8011f44:	01a56e1f 	.word	0x01a56e1f
 8011f48:	8800759c 	.word	0x8800759c
 8011f4c:	7e37e43c 	.word	0x7e37e43c
 8011f50:	8800759c 	.word	0x8800759c
 8011f54:	fe37e43c 	.word	0xfe37e43c
 8011f58:	c2f8f359 	.word	0xc2f8f359
 8011f5c:	81a56e1f 	.word	0x81a56e1f
 8011f60:	43500000 	.word	0x43500000
 8011f64:	ffff3cb0 	.word	0xffff3cb0
 8011f68:	3c900000 	.word	0x3c900000

08011f6c <_close>:
 8011f6c:	4b02      	ldr	r3, [pc, #8]	; (8011f78 <_close+0xc>)
 8011f6e:	2258      	movs	r2, #88	; 0x58
 8011f70:	601a      	str	r2, [r3, #0]
 8011f72:	f04f 30ff 	mov.w	r0, #4294967295
 8011f76:	4770      	bx	lr
 8011f78:	20000cc0 	.word	0x20000cc0

08011f7c <_fstat>:
 8011f7c:	4b02      	ldr	r3, [pc, #8]	; (8011f88 <_fstat+0xc>)
 8011f7e:	2258      	movs	r2, #88	; 0x58
 8011f80:	601a      	str	r2, [r3, #0]
 8011f82:	f04f 30ff 	mov.w	r0, #4294967295
 8011f86:	4770      	bx	lr
 8011f88:	20000cc0 	.word	0x20000cc0

08011f8c <_getpid>:
 8011f8c:	4b02      	ldr	r3, [pc, #8]	; (8011f98 <_getpid+0xc>)
 8011f8e:	2258      	movs	r2, #88	; 0x58
 8011f90:	601a      	str	r2, [r3, #0]
 8011f92:	f04f 30ff 	mov.w	r0, #4294967295
 8011f96:	4770      	bx	lr
 8011f98:	20000cc0 	.word	0x20000cc0

08011f9c <_isatty>:
 8011f9c:	4b02      	ldr	r3, [pc, #8]	; (8011fa8 <_isatty+0xc>)
 8011f9e:	2258      	movs	r2, #88	; 0x58
 8011fa0:	601a      	str	r2, [r3, #0]
 8011fa2:	2000      	movs	r0, #0
 8011fa4:	4770      	bx	lr
 8011fa6:	bf00      	nop
 8011fa8:	20000cc0 	.word	0x20000cc0

08011fac <_kill>:
 8011fac:	4b02      	ldr	r3, [pc, #8]	; (8011fb8 <_kill+0xc>)
 8011fae:	2258      	movs	r2, #88	; 0x58
 8011fb0:	601a      	str	r2, [r3, #0]
 8011fb2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fb6:	4770      	bx	lr
 8011fb8:	20000cc0 	.word	0x20000cc0

08011fbc <_lseek>:
 8011fbc:	4b02      	ldr	r3, [pc, #8]	; (8011fc8 <_lseek+0xc>)
 8011fbe:	2258      	movs	r2, #88	; 0x58
 8011fc0:	601a      	str	r2, [r3, #0]
 8011fc2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc6:	4770      	bx	lr
 8011fc8:	20000cc0 	.word	0x20000cc0

08011fcc <_read>:
 8011fcc:	4b02      	ldr	r3, [pc, #8]	; (8011fd8 <_read+0xc>)
 8011fce:	2258      	movs	r2, #88	; 0x58
 8011fd0:	601a      	str	r2, [r3, #0]
 8011fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fd6:	4770      	bx	lr
 8011fd8:	20000cc0 	.word	0x20000cc0

08011fdc <_sbrk>:
 8011fdc:	4a04      	ldr	r2, [pc, #16]	; (8011ff0 <_sbrk+0x14>)
 8011fde:	6811      	ldr	r1, [r2, #0]
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	b909      	cbnz	r1, 8011fe8 <_sbrk+0xc>
 8011fe4:	4903      	ldr	r1, [pc, #12]	; (8011ff4 <_sbrk+0x18>)
 8011fe6:	6011      	str	r1, [r2, #0]
 8011fe8:	6810      	ldr	r0, [r2, #0]
 8011fea:	4403      	add	r3, r0
 8011fec:	6013      	str	r3, [r2, #0]
 8011fee:	4770      	bx	lr
 8011ff0:	20000cc8 	.word	0x20000cc8
 8011ff4:	20000cd0 	.word	0x20000cd0

08011ff8 <_write>:
 8011ff8:	4b02      	ldr	r3, [pc, #8]	; (8012004 <_write+0xc>)
 8011ffa:	2258      	movs	r2, #88	; 0x58
 8011ffc:	601a      	str	r2, [r3, #0]
 8011ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8012002:	4770      	bx	lr
 8012004:	20000cc0 	.word	0x20000cc0

08012008 <_exit>:
 8012008:	e7fe      	b.n	8012008 <_exit>
	...

0801200c <_init>:
 801200c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801200e:	bf00      	nop
 8012010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012012:	bc08      	pop	{r3}
 8012014:	469e      	mov	lr, r3
 8012016:	4770      	bx	lr

08012018 <_fini>:
 8012018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801201a:	bf00      	nop
 801201c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801201e:	bc08      	pop	{r3}
 8012020:	469e      	mov	lr, r3
 8012022:	4770      	bx	lr
