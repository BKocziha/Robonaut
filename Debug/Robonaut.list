
Robonaut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012374  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08012548  08012548  00022548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012bb0  08012bb0  00030214  2**0
                  CONTENTS
  4 .ARM          00000008  08012bb0  08012bb0  00022bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012bb8  08012bb8  00030214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012bb8  08012bb8  00022bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012bbc  08012bbc  00022bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  08012bc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e10  20000214  08012dd4  00030214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001024  08012dd4  00031024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f50e  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e49  00000000  00000000  0005f752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c98  00000000  00000000  000635a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b18  00000000  00000000  00065238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009694  00000000  00000000  00066d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024480  00000000  00000000  000703e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102b7d  00000000  00000000  00094864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001973e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008eb8  00000000  00000000  00197434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001a02ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001a03b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000214 	.word	0x20000214
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801252c 	.word	0x0801252c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000218 	.word	0x20000218
 800020c:	0801252c 	.word	0x0801252c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <LS_LED_Light>:
#include <stdbool.h>
#include <math.h>

// Az utolsó beadott érték mindig 33-nál nagyobb legyen!
void LS_LED_Light(SPI_HandleTypeDef *hspi, uint8_t *leds_to_light)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_on[4] = {0};
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
	uint8_t fb_leds_on_temp[4] = {0};
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
	for (int i=0; leds_to_light[i]<33; i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa2:	e082      	b.n	80010aa <LS_LED_Light+0x11e>
	{
		switch(leds_to_light[i]/8) {
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d877      	bhi.n	80010a4 <LS_LED_Light+0x118>
 8000fb4:	a201      	add	r2, pc, #4	; (adr r2, 8000fbc <LS_LED_Light+0x30>)
 8000fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fba:	bf00      	nop
 8000fbc:	08000fcd 	.word	0x08000fcd
 8000fc0:	08001003 	.word	0x08001003
 8000fc4:	08001039 	.word	0x08001039
 8000fc8:	0800106f 	.word	0x0800106f
		case 0:
			fb_leds_on_temp[3] = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
 8000fd4:	e006      	b.n	8000fe4 <LS_LED_Light+0x58>
				fb_leds_on_temp[3] <<= 1;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000fde:	6a3b      	ldr	r3, [r7, #32]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	623b      	str	r3, [r7, #32]
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	6a3a      	ldr	r2, [r7, #32]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dbef      	blt.n	8000fd6 <LS_LED_Light+0x4a>
			}
			fb_leds_on[3] |= fb_leds_on_temp[3];
 8000ff6:	7cfa      	ldrb	r2, [r7, #19]
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	74fb      	strb	r3, [r7, #19]
			break;
 8001000:	e050      	b.n	80010a4 <LS_LED_Light+0x118>
		case 1:
			fb_leds_on_temp[2] = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	e006      	b.n	800101a <LS_LED_Light+0x8e>
				fb_leds_on_temp[2] <<= 1;
 800100c:	7bbb      	ldrb	r3, [r7, #14]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	3301      	adds	r3, #1
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbef      	blt.n	800100c <LS_LED_Light+0x80>
			}
			fb_leds_on[2] |= fb_leds_on_temp[2];
 800102c:	7cba      	ldrb	r2, [r7, #18]
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	4313      	orrs	r3, r2
 8001032:	b2db      	uxtb	r3, r3
 8001034:	74bb      	strb	r3, [r7, #18]
			break;
 8001036:	e035      	b.n	80010a4 <LS_LED_Light+0x118>
		case 2:
			fb_leds_on_temp[1] = 1;
 8001038:	2301      	movs	r3, #1
 800103a:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	e006      	b.n	8001050 <LS_LED_Light+0xc4>
				fb_leds_on_temp[1] <<= 1;
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	3301      	adds	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	429a      	cmp	r2, r3
 8001060:	dbef      	blt.n	8001042 <LS_LED_Light+0xb6>
			}
			fb_leds_on[1] |= fb_leds_on_temp[1];
 8001062:	7c7a      	ldrb	r2, [r7, #17]
 8001064:	7b7b      	ldrb	r3, [r7, #13]
 8001066:	4313      	orrs	r3, r2
 8001068:	b2db      	uxtb	r3, r3
 800106a:	747b      	strb	r3, [r7, #17]
			break;
 800106c:	e01a      	b.n	80010a4 <LS_LED_Light+0x118>
		case 3:
			fb_leds_on_temp[0] = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	e006      	b.n	8001086 <LS_LED_Light+0xfa>
				fb_leds_on_temp[0] <<= 1;
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	dbef      	blt.n	8001078 <LS_LED_Light+0xec>
			}
			fb_leds_on[0] |= fb_leds_on_temp[0];
 8001098:	7c3a      	ldrb	r2, [r7, #16]
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	743b      	strb	r3, [r7, #16]
			break;
 80010a2:	bf00      	nop
	for (int i=0; leds_to_light[i]<33; i++)
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	3301      	adds	r3, #1
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b20      	cmp	r3, #32
 80010b4:	f67f af76 	bls.w	8000fa4 <LS_LED_Light+0x18>
		}
	}
	LS_LED_Send(hspi, fb_leds_on);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f804 	bl	80010cc <LS_LED_Send>
}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <LS_LED_Send>:

void LS_LED_Send(SPI_HandleTypeDef *hspi, uint8_t *leds_on)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 80010d6:	2364      	movs	r3, #100	; 0x64
 80010d8:	2204      	movs	r2, #4
 80010da:	6839      	ldr	r1, [r7, #0]
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f005 fa18 	bl	8006512 <HAL_SPI_Transmit>

	// Latch enable
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <LS_LED_Send+0x4c>)
 80010ea:	f003 fba1 	bl	8004830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <LS_LED_Send+0x4c>)
 80010f6:	f003 fb9b 	bl	8004830 <HAL_GPIO_WritePin>

	//Output enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2104      	movs	r1, #4
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <LS_LED_Send+0x50>)
 8001100:	f003 fb96 	bl	8004830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2104      	movs	r1, #4
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <LS_LED_Send+0x50>)
 800110a:	f003 fb91 	bl	8004830 <HAL_GPIO_WritePin>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40020800 	.word	0x40020800
 800111c:	40020c00 	.word	0x40020c00

08001120 <LS_INF_Send>:

void LS_INF_Send(SPI_HandleTypeDef *hspi, uint8_t *infs_on)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, infs_on, 4, 100);
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	2204      	movs	r2, #4
 800112e:	6839      	ldr	r1, [r7, #0]
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f005 f9ee 	bl	8006512 <HAL_SPI_Transmit>

	// Inf Latch enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <LS_INF_Send+0x50>)
 800113e:	f003 fb77 	bl	8004830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <LS_INF_Send+0x50>)
 800114a:	f003 fb71 	bl	8004830 <HAL_GPIO_WritePin>

	// Inf Output enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001154:	4806      	ldr	r0, [pc, #24]	; (8001170 <LS_INF_Send+0x50>)
 8001156:	f003 fb6b 	bl	8004830 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <LS_INF_Send+0x50>)
 8001162:	f003 fb65 	bl	8004830 <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40020000 	.word	0x40020000

08001174 <LS_ADC_ChipSelect>:
			  HAL_Delay(100);
		  }
}

void LS_ADC_ChipSelect(int CS)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	switch(CS) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	2b03      	cmp	r3, #3
 8001182:	d827      	bhi.n	80011d4 <LS_ADC_ChipSelect+0x60>
 8001184:	a201      	add	r2, pc, #4	; (adr r2, 800118c <LS_ADC_ChipSelect+0x18>)
 8001186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118a:	bf00      	nop
 800118c:	0800119d 	.word	0x0800119d
 8001190:	080011ab 	.word	0x080011ab
 8001194:	080011b9 	.word	0x080011b9
 8001198:	080011c7 	.word	0x080011c7
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a2:	481b      	ldr	r0, [pc, #108]	; (8001210 <LS_ADC_ChipSelect+0x9c>)
 80011a4:	f003 fb44 	bl	8004830 <HAL_GPIO_WritePin>
		break;
 80011a8:	e02d      	b.n	8001206 <LS_ADC_ChipSelect+0x92>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b0:	4818      	ldr	r0, [pc, #96]	; (8001214 <LS_ADC_ChipSelect+0xa0>)
 80011b2:	f003 fb3d 	bl	8004830 <HAL_GPIO_WritePin>
		break;
 80011b6:	e026      	b.n	8001206 <LS_ADC_ChipSelect+0x92>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011be:	4815      	ldr	r0, [pc, #84]	; (8001214 <LS_ADC_ChipSelect+0xa0>)
 80011c0:	f003 fb36 	bl	8004830 <HAL_GPIO_WritePin>
		break;
 80011c4:	e01f      	b.n	8001206 <LS_ADC_ChipSelect+0x92>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011cc:	4811      	ldr	r0, [pc, #68]	; (8001214 <LS_ADC_ChipSelect+0xa0>)
 80011ce:	f003 fb2f 	bl	8004830 <HAL_GPIO_WritePin>
		break;
 80011d2:	e018      	b.n	8001206 <LS_ADC_ChipSelect+0x92>
	default:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <LS_ADC_ChipSelect+0x9c>)
 80011dc:	f003 fb28 	bl	8004830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <LS_ADC_ChipSelect+0xa0>)
 80011e8:	f003 fb22 	bl	8004830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f2:	4808      	ldr	r0, [pc, #32]	; (8001214 <LS_ADC_ChipSelect+0xa0>)
 80011f4:	f003 fb1c 	bl	8004830 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <LS_ADC_ChipSelect+0xa0>)
 8001200:	f003 fb16 	bl	8004830 <HAL_GPIO_WritePin>
	}
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020800 	.word	0x40020800
 8001214:	40020400 	.word	0x40020400

08001218 <LS_Holavonal_favago>:
	sum -= 32*250;
	line = (double)weighted_sum/sum;
	return line;
}

float LS_Holavonal_favago(uint16_t *ADC_values, int prev_value, int* summ, int* MA_sum){
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]
    int m = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
    int sum = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
    float alpha = 0.1;
 800122e:	4b30      	ldr	r3, [pc, #192]	; (80012f0 <LS_Holavonal_favago+0xd8>)
 8001230:	613b      	str	r3, [r7, #16]
    *summ = 0;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
    for(int i=0; i<32; i++){
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e01c      	b.n	8001278 <LS_Holavonal_favago+0x60>
        if (ADC_values[i] > 2500){
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	4413      	add	r3, r2
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800124c:	4293      	cmp	r3, r2
 800124e:	d910      	bls.n	8001272 <LS_Holavonal_favago+0x5a>
        	*summ += ADC_values[i];
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	0052      	lsls	r2, r2, #1
 8001258:	68f9      	ldr	r1, [r7, #12]
 800125a:	440a      	add	r2, r1
 800125c:	8812      	ldrh	r2, [r2, #0]
 800125e:	441a      	add	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	601a      	str	r2, [r3, #0]
            sum += i;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	4413      	add	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
            m++;
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	3301      	adds	r3, #1
 8001270:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<32; i++){
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2b1f      	cmp	r3, #31
 800127c:	dddf      	ble.n	800123e <LS_Holavonal_favago+0x26>
        }
    }
    if(m == 0)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d105      	bne.n	8001290 <LS_Holavonal_favago+0x78>
		return prev_value;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128e:	e027      	b.n	80012e0 <LS_Holavonal_favago+0xc8>
    *MA_sum = alpha * *summ + (1-alpha) * *MA_sum;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129c:	edd7 7a04 	vldr	s15, [r7, #16]
 80012a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ac:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	ee07 3a90 	vmov	s15, r3
 80012b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c8:	ee17 2a90 	vmov	r2, s15
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	601a      	str	r2, [r3, #0]
    return sum/m;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	3dcccccd 	.word	0x3dcccccd

080012f4 <LineSensor_FrontAndBack>:
	}
}

void LineSensor_FrontAndBack(UART_HandleTypeDef *huart, SPI_HandleTypeDef *hspi_led, SPI_HandleTypeDef *hspi_sense_front,
		SPI_HandleTypeDef *hspi_sense_rear, uint16_t *ADC_values_front, uint16_t *ADC_values_rear)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b090      	sub	sp, #64	; 0x40
 80012f8:	af02      	add	r7, sp, #8
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
	uint8_t leds_on[4];// = {1, 1, 1, 1};

	uint8_t ADC_inputs[] = {0, 8, 16, 24, 32, 40, 48, 56};
 8001302:	4a92      	ldr	r2, [pc, #584]	; (800154c <LineSensor_FrontAndBack+0x258>)
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	e892 0003 	ldmia.w	r2, {r0, r1}
 800130c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ADC_received_msg[2];

	//LS_INF_Send(&hspi3, leds_off);

	// Turn on first set of LEDs
	leds_on[0] = 1;leds_on[1] = 1;leds_on[2] = 1;leds_on[3] = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	f887 3020 	strb.w	r3, [r7, #32]
 8001316:	2301      	movs	r3, #1
 8001318:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800131c:	2301      	movs	r3, #1
 800131e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001322:	2301      	movs	r3, #1
 8001324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	LS_INF_Send(hspi_led, leds_on);
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	4619      	mov	r1, r3
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f7ff fef6 	bl	8001120 <LS_INF_Send>
	HAL_Delay(1);
 8001334:	2001      	movs	r0, #1
 8001336:	f002 f9cf 	bl	80036d8 <HAL_Delay>
	// Retrieve data from first set of ADCs - Front
	for (int i=1; i<5; i++)
 800133a:	2301      	movs	r3, #1
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
 800133e:	e02a      	b.n	8001396 <LineSensor_FrontAndBack+0xa2>
	{
	  LS_ADC_ChipSelect(i);
 8001340:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001342:	f7ff ff17 	bl	8001174 <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 8001346:	f107 0214 	add.w	r2, r7, #20
 800134a:	f107 0118 	add.w	r1, r7, #24
 800134e:	2364      	movs	r3, #100	; 0x64
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2302      	movs	r3, #2
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f005 fa18 	bl	800678a <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 800135a:	f107 0214 	add.w	r2, r7, #20
 800135e:	f107 0118 	add.w	r1, r7, #24
 8001362:	2364      	movs	r3, #100	; 0x64
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2302      	movs	r3, #2
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f005 fa0e 	bl	800678a <HAL_SPI_TransmitReceive>
	  ADC_values_front[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 800136e:	7d7b      	ldrb	r3, [r7, #21]
 8001370:	b21a      	sxth	r2, r3
 8001372:	7d3b      	ldrb	r3, [r7, #20]
 8001374:	021b      	lsls	r3, r3, #8
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b219      	sxth	r1, r3
 800137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137e:	3b01      	subs	r3, #1
 8001380:	011b      	lsls	r3, r3, #4
 8001382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001384:	4413      	add	r3, r2
 8001386:	b28a      	uxth	r2, r1
 8001388:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 800138a:	2000      	movs	r0, #0
 800138c:	f7ff fef2 	bl	8001174 <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 8001390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001392:	3301      	adds	r3, #1
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
 8001396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001398:	2b04      	cmp	r3, #4
 800139a:	ddd1      	ble.n	8001340 <LineSensor_FrontAndBack+0x4c>
	}
	// Ez működjön, aztán lehet optimalizálni, hogy egy loopon belül kérjük be az adatokat mindettőtől
	// Retrieve data from first set of ADCs - Rear
	for (int i=1; i<5; i++)
 800139c:	2301      	movs	r3, #1
 800139e:	633b      	str	r3, [r7, #48]	; 0x30
 80013a0:	e02a      	b.n	80013f8 <LineSensor_FrontAndBack+0x104>
	{
	  LS_ADC_ChipSelect(i);
 80013a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013a4:	f7ff fee6 	bl	8001174 <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013a8:	f107 0214 	add.w	r2, r7, #20
 80013ac:	f107 0118 	add.w	r1, r7, #24
 80013b0:	2364      	movs	r3, #100	; 0x64
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2302      	movs	r3, #2
 80013b6:	6838      	ldr	r0, [r7, #0]
 80013b8:	f005 f9e7 	bl	800678a <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013bc:	f107 0214 	add.w	r2, r7, #20
 80013c0:	f107 0118 	add.w	r1, r7, #24
 80013c4:	2364      	movs	r3, #100	; 0x64
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2302      	movs	r3, #2
 80013ca:	6838      	ldr	r0, [r7, #0]
 80013cc:	f005 f9dd 	bl	800678a <HAL_SPI_TransmitReceive>
	  ADC_values_rear[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80013d0:	7d7b      	ldrb	r3, [r7, #21]
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	7d3b      	ldrb	r3, [r7, #20]
 80013d6:	021b      	lsls	r3, r3, #8
 80013d8:	b21b      	sxth	r3, r3
 80013da:	4313      	orrs	r3, r2
 80013dc:	b219      	sxth	r1, r3
 80013de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013e0:	3b01      	subs	r3, #1
 80013e2:	011b      	lsls	r3, r3, #4
 80013e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013e6:	4413      	add	r3, r2
 80013e8:	b28a      	uxth	r2, r1
 80013ea:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f7ff fec1 	bl	8001174 <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 80013f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f4:	3301      	adds	r3, #1
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
 80013f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	ddd1      	ble.n	80013a2 <LineSensor_FrontAndBack+0xae>
	}

	// Shift the LEDs by one
	for (int k=0; k<7; k++)
 80013fe:	2300      	movs	r3, #0
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001402:	e099      	b.n	8001538 <LineSensor_FrontAndBack+0x244>
	{
	  leds_on[0] <<= 1;
 8001404:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f887 3020 	strb.w	r3, [r7, #32]
	  leds_on[1] <<= 1;
 8001410:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  leds_on[2] <<= 1;
 800141c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  leds_on[3] <<= 1;
 8001428:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  LS_INF_Send(hspi_led, leds_on);
 8001434:	f107 0320 	add.w	r3, r7, #32
 8001438:	4619      	mov	r1, r3
 800143a:	68b8      	ldr	r0, [r7, #8]
 800143c:	f7ff fe70 	bl	8001120 <LS_INF_Send>
	  HAL_Delay(1);
 8001440:	2001      	movs	r0, #1
 8001442:	f002 f949 	bl	80036d8 <HAL_Delay>

	  //Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 8001446:	2301      	movs	r3, #1
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
 800144a:	e034      	b.n	80014b6 <LineSensor_FrontAndBack+0x1c2>
	  {
		  LS_ADC_ChipSelect(i);
 800144c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800144e:	f7ff fe91 	bl	8001174 <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	3301      	adds	r3, #1
 8001456:	f107 0218 	add.w	r2, r7, #24
 800145a:	18d1      	adds	r1, r2, r3
 800145c:	f107 0214 	add.w	r2, r7, #20
 8001460:	2364      	movs	r3, #100	; 0x64
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2302      	movs	r3, #2
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f005 f98f 	bl	800678a <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 800146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146e:	3301      	adds	r3, #1
 8001470:	f107 0218 	add.w	r2, r7, #24
 8001474:	18d1      	adds	r1, r2, r3
 8001476:	f107 0214 	add.w	r2, r7, #20
 800147a:	2364      	movs	r3, #100	; 0x64
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2302      	movs	r3, #2
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f005 f982 	bl	800678a <HAL_SPI_TransmitReceive>
		  ADC_values_front[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001486:	7d7b      	ldrb	r3, [r7, #21]
 8001488:	b21a      	sxth	r2, r3
 800148a:	7d3b      	ldrb	r3, [r7, #20]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b219      	sxth	r1, r3
 8001494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001496:	3b01      	subs	r3, #1
 8001498:	00da      	lsls	r2, r3, #3
 800149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149c:	4413      	add	r3, r2
 800149e:	3301      	adds	r3, #1
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014a4:	4413      	add	r3, r2
 80014a6:	b28a      	uxth	r2, r1
 80014a8:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff fe62 	bl	8001174 <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	3301      	adds	r3, #1
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80014b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	ddc7      	ble.n	800144c <LineSensor_FrontAndBack+0x158>
	  }

	  // Szintén lehet optimalizálni
	  // Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 80014bc:	2301      	movs	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
 80014c0:	e034      	b.n	800152c <LineSensor_FrontAndBack+0x238>
	  {
		  LS_ADC_ChipSelect(i);
 80014c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014c4:	f7ff fe56 	bl	8001174 <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 80014c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ca:	3301      	adds	r3, #1
 80014cc:	f107 0218 	add.w	r2, r7, #24
 80014d0:	18d1      	adds	r1, r2, r3
 80014d2:	f107 0214 	add.w	r2, r7, #20
 80014d6:	2364      	movs	r3, #100	; 0x64
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2302      	movs	r3, #2
 80014dc:	6838      	ldr	r0, [r7, #0]
 80014de:	f005 f954 	bl	800678a <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 80014e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e4:	3301      	adds	r3, #1
 80014e6:	f107 0218 	add.w	r2, r7, #24
 80014ea:	18d1      	adds	r1, r2, r3
 80014ec:	f107 0214 	add.w	r2, r7, #20
 80014f0:	2364      	movs	r3, #100	; 0x64
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2302      	movs	r3, #2
 80014f6:	6838      	ldr	r0, [r7, #0]
 80014f8:	f005 f947 	bl	800678a <HAL_SPI_TransmitReceive>
		  ADC_values_rear[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80014fc:	7d7b      	ldrb	r3, [r7, #21]
 80014fe:	b21a      	sxth	r2, r3
 8001500:	7d3b      	ldrb	r3, [r7, #20]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b219      	sxth	r1, r3
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	3b01      	subs	r3, #1
 800150e:	00da      	lsls	r2, r3, #3
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	4413      	add	r3, r2
 8001514:	3301      	adds	r3, #1
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800151a:	4413      	add	r3, r2
 800151c:	b28a      	uxth	r2, r1
 800151e:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff fe27 	bl	8001174 <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	3301      	adds	r3, #1
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	2b04      	cmp	r3, #4
 8001530:	ddc7      	ble.n	80014c2 <LineSensor_FrontAndBack+0x1ce>
	for (int k=0; k<7; k++)
 8001532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001534:	3301      	adds	r3, #1
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	2b06      	cmp	r3, #6
 800153c:	f77f af62 	ble.w	8001404 <LineSensor_FrontAndBack+0x110>
//			line_pos[0] = ADC_values_rear[i];
//	}

//	unsigned char BT_send_msg_buff[200];
//	LS_BT_SendData(huart, BT_send_msg_buff, ADC_values_rear);
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3738      	adds	r7, #56	; 0x38
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	08012550 	.word	0x08012550

08001550 <LS_feedback_all>:

void LS_feedback_all(SPI_HandleTypeDef *hspi_led, uint16_t *ADC_values)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
 800155a:	4a1c      	ldr	r2, [pc, #112]	; (80015cc <LS_feedback_all+0x7c>)
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001564:	6018      	str	r0, [r3, #0]
 8001566:	3304      	adds	r3, #4
 8001568:	7019      	strb	r1, [r3, #0]
	uint8_t leds_off[4] = {0};
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
	int j = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	e016      	b.n	80015a6 <LS_feedback_all+0x56>
			if (ADC_values[i]>2500){
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	4413      	add	r3, r2
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001586:	4293      	cmp	r3, r2
 8001588:	d90a      	bls.n	80015a0 <LS_feedback_all+0x50>
				fb_leds_to_light[j] = i;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	b2d9      	uxtb	r1, r3
 800158e:	f107 0210 	add.w	r2, r7, #16
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	4413      	add	r3, r2
 8001596:	460a      	mov	r2, r1
 8001598:	701a      	strb	r2, [r3, #0]
				j++;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	3301      	adds	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b1f      	cmp	r3, #31
 80015aa:	dde5      	ble.n	8001578 <LS_feedback_all+0x28>
			}
		}

	LS_LED_Send(hspi_led, leds_off);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	4619      	mov	r1, r3
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff fd8a 	bl	80010cc <LS_LED_Send>
	LS_LED_Light(hspi_led, fb_leds_to_light);
 80015b8:	f107 0310 	add.w	r3, r7, #16
 80015bc:	4619      	mov	r1, r3
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fce4 	bl	8000f8c <LS_LED_Light>
}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	08012558 	.word	0x08012558

080015d0 <LS_delta_angle>:
	}
	LS_LED_Send(hspi_led, leds_off);
	LS_LED_Light(hspi_led, fb_leds_to_light);
}

float LS_delta_angle(float p1, float p2){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015da:	edc7 0a00 	vstr	s1, [r7]
    float delta = atan((p2-(31-p1))*6.5/460);
 80015de:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80015e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ea:	ed97 7a00 	vldr	s14, [r7]
 80015ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f2:	ee17 0a90 	vmov	r0, s15
 80015f6:	f7fe ffc7 	bl	8000588 <__aeabi_f2d>
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <LS_delta_angle+0x88>)
 8001600:	f7ff f81a 	bl	8000638 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	a310      	add	r3, pc, #64	; (adr r3, 8001650 <LS_delta_angle+0x80>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7ff f93b 	bl	800088c <__aeabi_ddiv>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	ec43 2b17 	vmov	d7, r2, r3
 800161e:	eeb0 0a47 	vmov.f32	s0, s14
 8001622:	eef0 0a67 	vmov.f32	s1, s15
 8001626:	f00f fce3 	bl	8010ff0 <atan>
 800162a:	ec53 2b10 	vmov	r2, r3, d0
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fad9 	bl	8000be8 <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	60fb      	str	r3, [r7, #12]
    return delta;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	ee07 3a90 	vmov	s15, r3
}
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	f3af 8000 	nop.w
 8001650:	00000000 	.word	0x00000000
 8001654:	407cc000 	.word	0x407cc000
 8001658:	401a0000 	.word	0x401a0000
 800165c:	00000000 	.word	0x00000000

08001660 <LS_p>:



float LS_p(float f1){
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	ed87 0a01 	vstr	s0, [r7, #4]
    float p = (15.5-f1)*0.0065;//m-ben adja vissza a p-t
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe ff8c 	bl	8000588 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	f04f 0000 	mov.w	r0, #0
 8001678:	490f      	ldr	r1, [pc, #60]	; (80016b8 <LS_p+0x58>)
 800167a:	f7fe fe25 	bl	80002c8 <__aeabi_dsub>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	a30a      	add	r3, pc, #40	; (adr r3, 80016b0 <LS_p+0x50>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ffd4 	bl	8000638 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff faa6 	bl	8000be8 <__aeabi_d2f>
 800169c:	4603      	mov	r3, r0
 800169e:	60fb      	str	r3, [r7, #12]
    return p;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	ee07 3a90 	vmov	s15, r3
}
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	76c8b439 	.word	0x76c8b439
 80016b4:	3f7a9fbe 	.word	0x3f7a9fbe
 80016b8:	402f0000 	.word	0x402f0000

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	f5ad 7d70 	sub.w	sp, sp, #960	; 0x3c0
 80016c2:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c4:	f001 ff96 	bl	80035f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c8:	f000 fa6e 	bl	8001ba8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016cc:	f000 ff7c 	bl	80025c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80016d0:	f000 ff5a 	bl	8002588 <MX_DMA_Init>
  MX_I2C1_Init();
 80016d4:	f000 fb2c 	bl	8001d30 <MX_I2C1_Init>
  MX_I2C3_Init();
 80016d8:	f000 fb86 	bl	8001de8 <MX_I2C3_Init>
  MX_SPI1_Init();
 80016dc:	f000 fbb2 	bl	8001e44 <MX_SPI1_Init>
  MX_SPI2_Init();
 80016e0:	f000 fbe6 	bl	8001eb0 <MX_SPI2_Init>
  MX_SPI3_Init();
 80016e4:	f000 fc1a 	bl	8001f1c <MX_SPI3_Init>
  MX_ADC1_Init();
 80016e8:	f000 fad0 	bl	8001c8c <MX_ADC1_Init>
  MX_TIM2_Init();
 80016ec:	f000 fc4e 	bl	8001f8c <MX_TIM2_Init>
  MX_TIM3_Init();
 80016f0:	f000 fccc 	bl	800208c <MX_TIM3_Init>
  MX_TIM4_Init();
 80016f4:	f000 fd44 	bl	8002180 <MX_TIM4_Init>
  MX_TIM13_Init();
 80016f8:	f000 fea4 	bl	8002444 <MX_TIM13_Init>
  MX_TIM5_Init();
 80016fc:	f000 fdd2 	bl	80022a4 <MX_TIM5_Init>
  MX_I2C2_Init();
 8001700:	f000 fb44 	bl	8001d8c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001704:	f000 feec 	bl	80024e0 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001708:	f000 ff14 	bl	8002534 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 800170c:	f000 fe40 	bl	8002390 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001710:	f000 fe74 	bl	80023fc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // initialize vl53l1x communication parameters
  Dev1->I2cHandle = &hi2c2;
 8001714:	4bc9      	ldr	r3, [pc, #804]	; (8001a3c <main+0x380>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4ac9      	ldr	r2, [pc, #804]	; (8001a40 <main+0x384>)
 800171a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  Dev1->I2cDevAddr = 0x52;
 800171e:	4bc7      	ldr	r3, [pc, #796]	; (8001a3c <main+0x380>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2252      	movs	r2, #82	; 0x52
 8001724:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

  Dev2->I2cHandle = &hi2c2;
 8001728:	4bc6      	ldr	r3, [pc, #792]	; (8001a44 <main+0x388>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4ac4      	ldr	r2, [pc, #784]	; (8001a40 <main+0x384>)
 800172e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  Dev2->I2cDevAddr = 0x52;
 8001732:	4bc4      	ldr	r3, [pc, #784]	; (8001a44 <main+0x388>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2252      	movs	r2, #82	; 0x52
 8001738:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

  // all ToF reset
  HAL_GPIO_WritePin(ToF_XSDN_36_GPIO_Port, ToF_XSDN_36_Pin, GPIO_PIN_RESET);
 800173c:	2200      	movs	r2, #0
 800173e:	2101      	movs	r1, #1
 8001740:	48c1      	ldr	r0, [pc, #772]	; (8001a48 <main+0x38c>)
 8001742:	f003 f875 	bl	8004830 <HAL_GPIO_WritePin>
  HAL_Delay(2); // 2ms reset time
 8001746:	2002      	movs	r0, #2
 8001748:	f001 ffc6 	bl	80036d8 <HAL_Delay>
  HAL_GPIO_WritePin(ToF_XSDN_14_GPIO_Port, ToF_XSDN_14_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	2104      	movs	r1, #4
 8001750:	48bd      	ldr	r0, [pc, #756]	; (8001a48 <main+0x38c>)
 8001752:	f003 f86d 	bl	8004830 <HAL_GPIO_WritePin>
  HAL_Delay(2); // 2ms reset time
 8001756:	2002      	movs	r0, #2
 8001758:	f001 ffbe 	bl	80036d8 <HAL_Delay>

  // set ToF1
  HAL_GPIO_WritePin(ToF_XSDN_36_GPIO_Port, ToF_XSDN_36_Pin, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	2101      	movs	r1, #1
 8001760:	48b9      	ldr	r0, [pc, #740]	; (8001a48 <main+0x38c>)
 8001762:	f003 f865 	bl	8004830 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8001766:	2002      	movs	r0, #2
 8001768:	f001 ffb6 	bl	80036d8 <HAL_Delay>

  // set the address of ToF1
  VL53L1_SetDeviceAddress  ( Dev1,  0x42 ); // Dev1 new address 0x42
 800176c:	4bb3      	ldr	r3, [pc, #716]	; (8001a3c <main+0x380>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2142      	movs	r1, #66	; 0x42
 8001772:	4618      	mov	r0, r3
 8001774:	f007 fb66 	bl	8008e44 <VL53L1_SetDeviceAddress>
  HAL_Delay(10);
 8001778:	200a      	movs	r0, #10
 800177a:	f001 ffad 	bl	80036d8 <HAL_Delay>
  Dev1->I2cDevAddr = 0x42; // set Dev1 0x42
 800177e:	4baf      	ldr	r3, [pc, #700]	; (8001a3c <main+0x380>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2242      	movs	r2, #66	; 0x42
 8001784:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

  // set ToF2
  HAL_GPIO_WritePin(ToF_XSDN_14_GPIO_Port, ToF_XSDN_14_Pin, GPIO_PIN_SET);
 8001788:	2201      	movs	r2, #1
 800178a:	2104      	movs	r1, #4
 800178c:	48ae      	ldr	r0, [pc, #696]	; (8001a48 <main+0x38c>)
 800178e:	f003 f84f 	bl	8004830 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8001792:	2002      	movs	r0, #2
 8001794:	f001 ffa0 	bl	80036d8 <HAL_Delay>

  // set the address of ToF2
  VL53L1_SetDeviceAddress  ( Dev2,  0x50 ); // Dev2 new address 0x50
 8001798:	4baa      	ldr	r3, [pc, #680]	; (8001a44 <main+0x388>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2150      	movs	r1, #80	; 0x50
 800179e:	4618      	mov	r0, r3
 80017a0:	f007 fb50 	bl	8008e44 <VL53L1_SetDeviceAddress>
  HAL_Delay(10);
 80017a4:	200a      	movs	r0, #10
 80017a6:	f001 ff97 	bl	80036d8 <HAL_Delay>
  Dev2->I2cDevAddr = 0x50; // set Dev2 0x50
 80017aa:	4ba6      	ldr	r3, [pc, #664]	; (8001a44 <main+0x388>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2250      	movs	r2, #80	; 0x50
 80017b0:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398

//  /*** VL53L1X Initialization ***/
  // Dev1
  VL53L1_WaitDeviceBooted( Dev1 );
 80017b4:	4ba1      	ldr	r3, [pc, #644]	; (8001a3c <main+0x380>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f007 fbc1 	bl	8008f40 <VL53L1_WaitDeviceBooted>
  VL53L1_DataInit( Dev1 );
 80017be:	4b9f      	ldr	r3, [pc, #636]	; (8001a3c <main+0x380>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f007 fb64 	bl	8008e90 <VL53L1_DataInit>
  VL53L1_StaticInit( Dev1 );
 80017c8:	4b9c      	ldr	r3, [pc, #624]	; (8001a3c <main+0x380>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f007 fb98 	bl	8008f02 <VL53L1_StaticInit>
  VL53L1_SetDistanceMode( Dev1, VL53L1_DISTANCEMODE_LONG );
 80017d2:	4b9a      	ldr	r3, [pc, #616]	; (8001a3c <main+0x380>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2103      	movs	r1, #3
 80017d8:	4618      	mov	r0, r3
 80017da:	f007 fce1 	bl	80091a0 <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev1, 20000 );
 80017de:	4b97      	ldr	r3, [pc, #604]	; (8001a3c <main+0x380>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f644 6120 	movw	r1, #20000	; 0x4e20
 80017e6:	4618      	mov	r0, r3
 80017e8:	f007 fd50 	bl	800928c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
  VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev1, 25 );
 80017ec:	4b93      	ldr	r3, [pc, #588]	; (8001a3c <main+0x380>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2119      	movs	r1, #25
 80017f2:	4618      	mov	r0, r3
 80017f4:	f007 fed6 	bl	80095a4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>



  // Dev2
  VL53L1_WaitDeviceBooted( Dev2 );
 80017f8:	4b92      	ldr	r3, [pc, #584]	; (8001a44 <main+0x388>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f007 fb9f 	bl	8008f40 <VL53L1_WaitDeviceBooted>
  VL53L1_DataInit( Dev2 );
 8001802:	4b90      	ldr	r3, [pc, #576]	; (8001a44 <main+0x388>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f007 fb42 	bl	8008e90 <VL53L1_DataInit>
  VL53L1_StaticInit( Dev2 );
 800180c:	4b8d      	ldr	r3, [pc, #564]	; (8001a44 <main+0x388>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f007 fb76 	bl	8008f02 <VL53L1_StaticInit>
  VL53L1_SetDistanceMode( Dev2, VL53L1_DISTANCEMODE_LONG );
 8001816:	4b8b      	ldr	r3, [pc, #556]	; (8001a44 <main+0x388>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2103      	movs	r1, #3
 800181c:	4618      	mov	r0, r3
 800181e:	f007 fcbf 	bl	80091a0 <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev2, 20000 );
 8001822:	4b88      	ldr	r3, [pc, #544]	; (8001a44 <main+0x388>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f644 6120 	movw	r1, #20000	; 0x4e20
 800182a:	4618      	mov	r0, r3
 800182c:	f007 fd2e 	bl	800928c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
  VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev2, 25 );
 8001830:	4b84      	ldr	r3, [pc, #528]	; (8001a44 <main+0x388>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2119      	movs	r1, #25
 8001836:	4618      	mov	r0, r3
 8001838:	f007 feb4 	bl	80095a4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>

  // Start ToF measurement
  VL53L1_StartMeasurement( Dev1 );
 800183c:	4b7f      	ldr	r3, [pc, #508]	; (8001a3c <main+0x380>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f007 ffed 	bl	8009820 <VL53L1_StartMeasurement>
  VL53L1_StartMeasurement( Dev2 );
 8001846:	4b7f      	ldr	r3, [pc, #508]	; (8001a44 <main+0x388>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f007 ffe8 	bl	8009820 <VL53L1_StartMeasurement>

  //unsigned char ADC_value_string[10];
  //uint8_t leds_on[4];// = {1, 1, 1, 1};
  //uint8_t fb_leds_on[4] = {0};
  //uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
  uint16_t ADC_values_front[32] = {0};
 8001850:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8001854:	2240      	movs	r2, #64	; 0x40
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f00c fea5 	bl	800e5a8 <memset>
  uint16_t ADC_values_rear[32] = {0};
 800185e:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 8001862:	2240      	movs	r2, #64	; 0x40
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f00c fe9e 	bl	800e5a8 <memset>
  float line_pos[2];
//  bool feedback_rear = false;
  float delta, p, str_angle;
  circuit_Section = Fast_section;
 800186c:	4b77      	ldr	r3, [pc, #476]	; (8001a4c <main+0x390>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
  uint32_t fallData[100];

  //HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Dead man switch PWM input
  //HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);    // Dead man switch PWM input

  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, riseData, 100);
 8001872:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8001876:	2364      	movs	r3, #100	; 0x64
 8001878:	2100      	movs	r1, #0
 800187a:	4875      	ldr	r0, [pc, #468]	; (8001a50 <main+0x394>)
 800187c:	f005 fc52 	bl	8007124 <HAL_TIM_IC_Start_DMA>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_2, fallData, 100);
 8001880:	1d3a      	adds	r2, r7, #4
 8001882:	2364      	movs	r3, #100	; 0x64
 8001884:	2104      	movs	r1, #4
 8001886:	4872      	ldr	r0, [pc, #456]	; (8001a50 <main+0x394>)
 8001888:	f005 fc4c 	bl	8007124 <HAL_TIM_IC_Start_DMA>



  HAL_TIM_Base_Start_IT(&htim10);
 800188c:	4871      	ldr	r0, [pc, #452]	; (8001a54 <main+0x398>)
 800188e:	f005 fa39 	bl	8006d04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001892:	2100      	movs	r1, #0
 8001894:	4870      	ldr	r0, [pc, #448]	; (8001a58 <main+0x39c>)
 8001896:	f005 fb2d 	bl	8006ef4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800189a:	2104      	movs	r1, #4
 800189c:	486f      	ldr	r0, [pc, #444]	; (8001a5c <main+0x3a0>)
 800189e:	f005 fb29 	bl	8006ef4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80018a2:	2100      	movs	r1, #0
 80018a4:	486e      	ldr	r0, [pc, #440]	; (8001a60 <main+0x3a4>)
 80018a6:	f005 fb25 	bl	8006ef4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 80018aa:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	4b6b      	ldr	r3, [pc, #428]	; (8001a64 <main+0x3a8>)
 80018b8:	4a6b      	ldr	r2, [pc, #428]	; (8001a68 <main+0x3ac>)
 80018ba:	496c      	ldr	r1, [pc, #432]	; (8001a6c <main+0x3b0>)
 80018bc:	486c      	ldr	r0, [pc, #432]	; (8001a70 <main+0x3b4>)
 80018be:	f7ff fd19 	bl	80012f4 <LineSensor_FrontAndBack>
	  line_pos[0] = LS_Holavonal_favago(ADC_values_front, line_pos[0], &summ, &MA_sum_front);
 80018c2:	edd7 7ac9 	vldr	s15, [r7, #804]	; 0x324
 80018c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ca:	f507 705b 	add.w	r0, r7, #876	; 0x36c
 80018ce:	4b69      	ldr	r3, [pc, #420]	; (8001a74 <main+0x3b8>)
 80018d0:	4a69      	ldr	r2, [pc, #420]	; (8001a78 <main+0x3bc>)
 80018d2:	ee17 1a90 	vmov	r1, s15
 80018d6:	f7ff fc9f 	bl	8001218 <LS_Holavonal_favago>
 80018da:	eef0 7a40 	vmov.f32	s15, s0
 80018de:	edc7 7ac9 	vstr	s15, [r7, #804]	; 0x324
	  line_pos[1] = LS_Holavonal_favago(ADC_values_rear, line_pos[1], &summ2, &MA_sum_rear);
 80018e2:	edd7 7aca 	vldr	s15, [r7, #808]	; 0x328
 80018e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ea:	f507 704b 	add.w	r0, r7, #812	; 0x32c
 80018ee:	4b63      	ldr	r3, [pc, #396]	; (8001a7c <main+0x3c0>)
 80018f0:	4a63      	ldr	r2, [pc, #396]	; (8001a80 <main+0x3c4>)
 80018f2:	ee17 1a90 	vmov	r1, s15
 80018f6:	f7ff fc8f 	bl	8001218 <LS_Holavonal_favago>
 80018fa:	eef0 7a40 	vmov.f32	s15, s0
 80018fe:	edc7 7aca 	vstr	s15, [r7, #808]	; 0x328
	  LS_feedback_all(&hspi3, ADC_values_front);
 8001902:	f507 735b 	add.w	r3, r7, #876	; 0x36c
 8001906:	4619      	mov	r1, r3
 8001908:	4858      	ldr	r0, [pc, #352]	; (8001a6c <main+0x3b0>)
 800190a:	f7ff fe21 	bl	8001550 <LS_feedback_all>
//	  //LS_feedback_led(&hspi3, line_pos, feedback_rear);

	  delta = LS_delta_angle(line_pos[0], line_pos[1]);
 800190e:	edd7 7ac9 	vldr	s15, [r7, #804]	; 0x324
 8001912:	ed97 7aca 	vldr	s14, [r7, #808]	; 0x328
 8001916:	eef0 0a47 	vmov.f32	s1, s14
 800191a:	eeb0 0a67 	vmov.f32	s0, s15
 800191e:	f7ff fe57 	bl	80015d0 <LS_delta_angle>
 8001922:	ed87 0aec 	vstr	s0, [r7, #944]	; 0x3b0
	  p = LS_p(line_pos[0]);
 8001926:	edd7 7ac9 	vldr	s15, [r7, #804]	; 0x324
 800192a:	eeb0 0a67 	vmov.f32	s0, s15
 800192e:	f7ff fe97 	bl	8001660 <LS_p>
 8001932:	ed87 0aeb 	vstr	s0, [r7, #940]	; 0x3ac
	  MotorDrive(&htim4, duty_motor);
 8001936:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <main+0x3c8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4619      	mov	r1, r3
 800193c:	4848      	ldr	r0, [pc, #288]	; (8001a60 <main+0x3a4>)
 800193e:	f000 ffc4 	bl	80028ca <MotorDrive>
	  ServoPosition(&htim5, str_angle);
 8001942:	f8d7 03b4 	ldr.w	r0, [r7, #948]	; 0x3b4
 8001946:	f7fe fe1f 	bl	8000588 <__aeabi_f2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	ec43 2b10 	vmov	d0, r2, r3
 8001952:	4841      	ldr	r0, [pc, #260]	; (8001a58 <main+0x39c>)
 8001954:	f001 f850 	bl	80029f8 <ServoPosition>
	  if(duty_deadman>10 && duty_deadman < 15){
 8001958:	4b4b      	ldr	r3, [pc, #300]	; (8001a88 <main+0x3cc>)
 800195a:	edd3 7a00 	vldr	s15, [r3]
 800195e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800196a:	dd10      	ble.n	800198e <main+0x2d2>
 800196c:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <main+0x3cc>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800197a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197e:	d506      	bpl.n	800198e <main+0x2d2>
		  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001986:	4841      	ldr	r0, [pc, #260]	; (8001a8c <main+0x3d0>)
 8001988:	f002 ff52 	bl	8004830 <HAL_GPIO_WritePin>
 800198c:	e005      	b.n	800199a <main+0x2de>
		  }
	  else
		  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001994:	483d      	ldr	r0, [pc, #244]	; (8001a8c <main+0x3d0>)
 8001996:	f002 ff4b 	bl	8004830 <HAL_GPIO_WritePin>


	  switch(circuit_Section) {
 800199a:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <main+0x390>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b04      	cmp	r3, #4
 80019a0:	f200 80d9 	bhi.w	8001b56 <main+0x49a>
 80019a4:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <main+0x2f0>)
 80019a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019aa:	bf00      	nop
 80019ac:	08001aad 	.word	0x08001aad
 80019b0:	080019c1 	.word	0x080019c1
 80019b4:	080019ff 	.word	0x080019ff
 80019b8:	08001ad7 	.word	0x08001ad7
 80019bc:	08001b11 	.word	0x08001b11
	  	  case Fast_section:
			//duty_motor = DUTY_FAST;
			str_angle = SteeringAngle(p, delta, KP_FAST, KD_FAST);
 80019c0:	eddf 1a33 	vldr	s3, [pc, #204]	; 8001a90 <main+0x3d4>
 80019c4:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8001a94 <main+0x3d8>
 80019c8:	edd7 0aec 	vldr	s1, [r7, #944]	; 0x3b0
 80019cc:	ed97 0aeb 	vldr	s0, [r7, #940]	; 0x3ac
 80019d0:	f001 f876 	bl	8002ac0 <SteeringAngle>
 80019d4:	ed87 0aed 	vstr	s0, [r7, #948]	; 0x3b4
			if (decel_end_flag == 0 && 10000 < MA_sum_front){
 80019d8:	4b2f      	ldr	r3, [pc, #188]	; (8001a98 <main+0x3dc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f040 80b1 	bne.w	8001b44 <main+0x488>
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <main+0x3b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80019ea:	4293      	cmp	r3, r2
 80019ec:	f340 80aa 	ble.w	8001b44 <main+0x488>
			  // kb. 2 másodpercenkétn előidéz egy interruptot
			  HAL_TIM_Base_Start_IT(&htim7);
 80019f0:	482a      	ldr	r0, [pc, #168]	; (8001a9c <main+0x3e0>)
 80019f2:	f005 f987 	bl	8006d04 <HAL_TIM_Base_Start_IT>
			  circuit_Section = Braking;
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <main+0x390>)
 80019f8:	2202      	movs	r2, #2
 80019fa:	701a      	strb	r2, [r3, #0]
			}
			break;
 80019fc:	e0a2      	b.n	8001b44 <main+0x488>
	  	  case Braking:
	  		chicane_coming=true;
 80019fe:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <main+0x3e4>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
	  		//duty_motor = DUTY_BRAKE;
	  		str_angle = SteeringAngle(p, delta, KP_FAST, KD_FAST);
 8001a04:	eddf 1a22 	vldr	s3, [pc, #136]	; 8001a90 <main+0x3d4>
 8001a08:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8001a94 <main+0x3d8>
 8001a0c:	edd7 0aec 	vldr	s1, [r7, #944]	; 0x3b0
 8001a10:	ed97 0aeb 	vldr	s0, [r7, #940]	; 0x3ac
 8001a14:	f001 f854 	bl	8002ac0 <SteeringAngle>
 8001a18:	ed87 0aed 	vstr	s0, [r7, #948]	; 0x3b4
	  		if (decel_end_flag == 3){
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <main+0x3dc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	f040 8091 	bne.w	8001b48 <main+0x48c>
				HAL_TIM_Base_Stop_IT(&htim7);
 8001a26:	481d      	ldr	r0, [pc, #116]	; (8001a9c <main+0x3e0>)
 8001a28:	f005 f9dc 	bl	8006de4 <HAL_TIM_Base_Stop_IT>
				decel_end_flag =0;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <main+0x3dc>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
				circuit_Section = Slow_section;
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <main+0x390>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
			}
	  		break;
 8001a38:	e086      	b.n	8001b48 <main+0x48c>
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	200002cc 	.word	0x200002cc
 8001a44:	20000004 	.word	0x20000004
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	20000ef9 	.word	0x20000ef9
 8001a50:	2000047c 	.word	0x2000047c
 8001a54:	200005e4 	.word	0x200005e4
 8001a58:	20000554 	.word	0x20000554
 8001a5c:	200004c4 	.word	0x200004c4
 8001a60:	2000050c 	.word	0x2000050c
 8001a64:	200003cc 	.word	0x200003cc
 8001a68:	20000374 	.word	0x20000374
 8001a6c:	20000424 	.word	0x20000424
 8001a70:	200006d4 	.word	0x200006d4
 8001a74:	2000075c 	.word	0x2000075c
 8001a78:	20000764 	.word	0x20000764
 8001a7c:	20000760 	.word	0x20000760
 8001a80:	20000768 	.word	0x20000768
 8001a84:	20000f08 	.word	0x20000f08
 8001a88:	20000f04 	.word	0x20000f04
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	3f16e2eb 	.word	0x3f16e2eb
 8001a94:	bf380347 	.word	0xbf380347
 8001a98:	20000ef4 	.word	0x20000ef4
 8001a9c:	2000059c 	.word	0x2000059c
 8001aa0:	20000ef8 	.word	0x20000ef8
 8001aa4:	3ea5a1cb 	.word	0x3ea5a1cb
 8001aa8:	c0b6809d 	.word	0xc0b6809d
	  	  case Slow_section:
	  		//duty_motor = DUTY_SLOW;
	  		str_angle = SteeringAngle(p, delta, KP_SLOW, KD_SLOW);
 8001aac:	ed5f 1a03 	vldr	s3, [pc, #-12]	; 8001aa4 <main+0x3e8>
 8001ab0:	ed1f 1a03 	vldr	s2, [pc, #-12]	; 8001aa8 <main+0x3ec>
 8001ab4:	edd7 0aec 	vldr	s1, [r7, #944]	; 0x3b0
 8001ab8:	ed97 0aeb 	vldr	s0, [r7, #940]	; 0x3ac
 8001abc:	f001 f800 	bl	8002ac0 <SteeringAngle>
 8001ac0:	ed87 0aed 	vstr	s0, [r7, #948]	; 0x3b4
	  		if (MA_sum_front < 8000){
 8001ac4:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <main+0x4bc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001acc:	da3e      	bge.n	8001b4c <main+0x490>
	  			 circuit_Section = Slow_waiting;
 8001ace:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <main+0x4c0>)
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	701a      	strb	r2, [r3, #0]
	  		}
	  		break;
 8001ad4:	e03a      	b.n	8001b4c <main+0x490>
	  	  case Slow_waiting:
	  		//duty_motor = DUTY_SLOW;
			str_angle = SteeringAngle(p, delta, KP_SLOW, KD_SLOW);
 8001ad6:	eddf 1a2a 	vldr	s3, [pc, #168]	; 8001b80 <main+0x4c4>
 8001ada:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8001b84 <main+0x4c8>
 8001ade:	edd7 0aec 	vldr	s1, [r7, #944]	; 0x3b0
 8001ae2:	ed97 0aeb 	vldr	s0, [r7, #940]	; 0x3ac
 8001ae6:	f000 ffeb 	bl	8002ac0 <SteeringAngle>
 8001aea:	ed87 0aed 	vstr	s0, [r7, #948]	; 0x3b4
	  		if (decel_end_flag == 0 && 9000 < MA_sum_front){
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <main+0x4cc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d12c      	bne.n	8001b50 <main+0x494>
 8001af6:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <main+0x4bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f242 3228 	movw	r2, #9000	; 0x2328
 8001afe:	4293      	cmp	r3, r2
 8001b00:	dd26      	ble.n	8001b50 <main+0x494>
	  			HAL_TIM_Base_Start_IT(&htim7);
 8001b02:	4822      	ldr	r0, [pc, #136]	; (8001b8c <main+0x4d0>)
 8001b04:	f005 f8fe 	bl	8006d04 <HAL_TIM_Base_Start_IT>
	  			circuit_Section = Acceleration;
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <main+0x4c0>)
 8001b0a:	2204      	movs	r2, #4
 8001b0c:	701a      	strb	r2, [r3, #0]
	  		}
	  		break;
 8001b0e:	e01f      	b.n	8001b50 <main+0x494>
	  	  case Acceleration:
	  		//duty_motor = DUTY_FAST;
	  		str_angle = SteeringAngle(p, delta, KP_FAST, KD_FAST);
 8001b10:	eddf 1a1f 	vldr	s3, [pc, #124]	; 8001b90 <main+0x4d4>
 8001b14:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8001b94 <main+0x4d8>
 8001b18:	edd7 0aec 	vldr	s1, [r7, #944]	; 0x3b0
 8001b1c:	ed97 0aeb 	vldr	s0, [r7, #940]	; 0x3ac
 8001b20:	f000 ffce 	bl	8002ac0 <SteeringAngle>
 8001b24:	ed87 0aed 	vstr	s0, [r7, #948]	; 0x3b4
	  		if (decel_end_flag == 2){
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <main+0x4cc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d111      	bne.n	8001b54 <main+0x498>
				HAL_TIM_Base_Stop_IT(&htim7);
 8001b30:	4816      	ldr	r0, [pc, #88]	; (8001b8c <main+0x4d0>)
 8001b32:	f005 f957 	bl	8006de4 <HAL_TIM_Base_Stop_IT>
				decel_end_flag =0;
 8001b36:	4b14      	ldr	r3, [pc, #80]	; (8001b88 <main+0x4cc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
				circuit_Section = Fast_section;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <main+0x4c0>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
			}
	  		break;
 8001b42:	e007      	b.n	8001b54 <main+0x498>
			break;
 8001b44:	bf00      	nop
 8001b46:	e006      	b.n	8001b56 <main+0x49a>
	  		break;
 8001b48:	bf00      	nop
 8001b4a:	e004      	b.n	8001b56 <main+0x49a>
	  		break;
 8001b4c:	bf00      	nop
 8001b4e:	e002      	b.n	8001b56 <main+0x49a>
	  		break;
 8001b50:	bf00      	nop
 8001b52:	e000      	b.n	8001b56 <main+0x49a>
	  		break;
 8001b54:	bf00      	nop
	  }

	  duty_motor = MotorFollowControl(&prev_error, RangingData2.RangeMilliMeter, RangingData1.RangeMilliMeter, circuit_Section);
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <main+0x4dc>)
 8001b58:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <main+0x4e0>)
 8001b60:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001b64:	461a      	mov	r2, r3
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <main+0x4c0>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <main+0x4e4>)
 8001b6c:	f000 fec4 	bl	80028f8 <MotorFollowControl>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a0c      	ldr	r2, [pc, #48]	; (8001ba4 <main+0x4e8>)
 8001b74:	6013      	str	r3, [r2, #0]
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 8001b76:	e698      	b.n	80018aa <main+0x1ee>
 8001b78:	2000075c 	.word	0x2000075c
 8001b7c:	20000ef9 	.word	0x20000ef9
 8001b80:	3ea5a1cb 	.word	0x3ea5a1cb
 8001b84:	c0b6809d 	.word	0xc0b6809d
 8001b88:	20000ef4 	.word	0x20000ef4
 8001b8c:	2000059c 	.word	0x2000059c
 8001b90:	3f16e2eb 	.word	0x3f16e2eb
 8001b94:	bf380347 	.word	0xbf380347
 8001b98:	20000788 	.word	0x20000788
 8001b9c:	2000076c 	.word	0x2000076c
 8001ba0:	20000ef0 	.word	0x20000ef0
 8001ba4:	20000f08 	.word	0x20000f08

08001ba8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b094      	sub	sp, #80	; 0x50
 8001bac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	2234      	movs	r2, #52	; 0x34
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f00c fcf6 	bl	800e5a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <SystemClock_Config+0xdc>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a2b      	ldr	r2, [pc, #172]	; (8001c84 <SystemClock_Config+0xdc>)
 8001bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <SystemClock_Config+0xdc>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be8:	2300      	movs	r3, #0
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <SystemClock_Config+0xe0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a25      	ldr	r2, [pc, #148]	; (8001c88 <SystemClock_Config+0xe0>)
 8001bf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b23      	ldr	r3, [pc, #140]	; (8001c88 <SystemClock_Config+0xe0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c0c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c18:	2304      	movs	r3, #4
 8001c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c1c:	23b4      	movs	r3, #180	; 0xb4
 8001c1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c20:	2302      	movs	r3, #2
 8001c22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c24:	2302      	movs	r3, #2
 8001c26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	4618      	mov	r0, r3
 8001c32:	f004 f947 	bl	8005ec4 <HAL_RCC_OscConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c3c:	f000 fe40 	bl	80028c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c40:	f003 fda6 	bl	8005790 <HAL_PWREx_EnableOverDrive>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c4a:	f000 fe39 	bl	80028c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c4e:	230f      	movs	r3, #15
 8001c50:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c52:	2302      	movs	r3, #2
 8001c54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c64:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c66:	f107 0308 	add.w	r3, r7, #8
 8001c6a:	2105      	movs	r1, #5
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fddf 	bl	8005830 <HAL_RCC_ClockConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001c78:	f000 fe22 	bl	80028c0 <Error_Handler>
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	3750      	adds	r7, #80	; 0x50
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40007000 	.word	0x40007000

08001c8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c92:	463b      	mov	r3, r7
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001c9e:	4b21      	ldr	r3, [pc, #132]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001ca0:	4a21      	ldr	r2, [pc, #132]	; (8001d28 <MX_ADC1_Init+0x9c>)
 8001ca2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001ca6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001caa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cb8:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001cce:	4a17      	ldr	r2, [pc, #92]	; (8001d2c <MX_ADC1_Init+0xa0>)
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cde:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001cee:	f001 fd17 	bl	8003720 <HAL_ADC_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001cf8:	f000 fde2 	bl	80028c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d08:	463b      	mov	r3, r7
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <MX_ADC1_Init+0x98>)
 8001d0e:	f001 fd4b 	bl	80037a8 <HAL_ADC_ConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d18:	f000 fdd2 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000230 	.word	0x20000230
 8001d28:	40012000 	.word	0x40012000
 8001d2c:	0f000001 	.word	0x0f000001

08001d30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d36:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <MX_I2C1_Init+0x54>)
 8001d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d3c:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <MX_I2C1_Init+0x58>)
 8001d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d60:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d6c:	4804      	ldr	r0, [pc, #16]	; (8001d80 <MX_I2C1_Init+0x50>)
 8001d6e:	f002 fd79 	bl	8004864 <HAL_I2C_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d78:	f000 fda2 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000278 	.word	0x20000278
 8001d84:	40005400 	.word	0x40005400
 8001d88:	000186a0 	.word	0x000186a0

08001d8c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <MX_I2C2_Init+0x50>)
 8001d92:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <MX_I2C2_Init+0x54>)
 8001d94:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_I2C2_Init+0x50>)
 8001d98:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <MX_I2C2_Init+0x58>)
 8001d9a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_I2C2_Init+0x50>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_I2C2_Init+0x50>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_I2C2_Init+0x50>)
 8001daa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <MX_I2C2_Init+0x50>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_I2C2_Init+0x50>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <MX_I2C2_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_I2C2_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dc8:	4804      	ldr	r0, [pc, #16]	; (8001ddc <MX_I2C2_Init+0x50>)
 8001dca:	f002 fd4b 	bl	8004864 <HAL_I2C_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001dd4:	f000 fd74 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200002cc 	.word	0x200002cc
 8001de0:	40005800 	.word	0x40005800
 8001de4:	000186a0 	.word	0x000186a0

08001de8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001dee:	4a13      	ldr	r2, [pc, #76]	; (8001e3c <MX_I2C3_Init+0x54>)
 8001df0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001df4:	4a12      	ldr	r2, [pc, #72]	; (8001e40 <MX_I2C3_Init+0x58>)
 8001df6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e0a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001e12:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e18:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001e24:	4804      	ldr	r0, [pc, #16]	; (8001e38 <MX_I2C3_Init+0x50>)
 8001e26:	f002 fd1d 	bl	8004864 <HAL_I2C_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001e30:	f000 fd46 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	20000320 	.word	0x20000320
 8001e3c:	40005c00 	.word	0x40005c00
 8001e40:	000186a0 	.word	0x000186a0

08001e44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e4a:	4a18      	ldr	r2, [pc, #96]	; (8001eac <MX_SPI1_Init+0x68>)
 8001e4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e78:	2228      	movs	r2, #40	; 0x28
 8001e7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e82:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e90:	220a      	movs	r2, #10
 8001e92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <MX_SPI1_Init+0x64>)
 8001e96:	f004 fab3 	bl	8006400 <HAL_SPI_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ea0:	f000 fd0e 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000374 	.word	0x20000374
 8001eac:	40013000 	.word	0x40013000

08001eb0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001eb4:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <MX_SPI2_Init+0x68>)
 8001eb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ec0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ec2:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ece:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ef4:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001efc:	220a      	movs	r2, #10
 8001efe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f00:	4804      	ldr	r0, [pc, #16]	; (8001f14 <MX_SPI2_Init+0x64>)
 8001f02:	f004 fa7d 	bl	8006400 <HAL_SPI_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f0c:	f000 fcd8 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	200003cc 	.word	0x200003cc
 8001f18:	40003800 	.word	0x40003800

08001f1c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f22:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <MX_SPI3_Init+0x6c>)
 8001f24:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f26:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f2c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f34:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f52:	2210      	movs	r2, #16
 8001f54:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f62:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f6a:	220a      	movs	r2, #10
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <MX_SPI3_Init+0x68>)
 8001f70:	f004 fa46 	bl	8006400 <HAL_SPI_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001f7a:	f000 fca1 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000424 	.word	0x20000424
 8001f88:	40003c00 	.word	0x40003c00

08001f8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08c      	sub	sp, #48	; 0x30
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f92:	f107 031c 	add.w	r3, r7, #28
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]
 8001fa0:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fb8:	4b33      	ldr	r3, [pc, #204]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8001fc0:	4b31      	ldr	r3, [pc, #196]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fc2:	2208      	movs	r2, #8
 8001fc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc6:	4b30      	ldr	r3, [pc, #192]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001fcc:	4b2e      	ldr	r3, [pc, #184]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fce:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd4:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fda:	4b2b      	ldr	r3, [pc, #172]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001fe0:	4829      	ldr	r0, [pc, #164]	; (8002088 <MX_TIM2_Init+0xfc>)
 8001fe2:	f005 f84f 	bl	8007084 <HAL_TIM_IC_Init>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001fec:	f000 fc68 	bl	80028c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ff4:	2350      	movs	r3, #80	; 0x50
 8001ff6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	481f      	ldr	r0, [pc, #124]	; (8002088 <MX_TIM2_Init+0xfc>)
 800200c:	f005 fd61 	bl	8007ad2 <HAL_TIM_SlaveConfigSynchro>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002016:	f000 fc53 	bl	80028c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800201e:	2301      	movs	r3, #1
 8002020:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	2200      	movs	r2, #0
 8002030:	4619      	mov	r1, r3
 8002032:	4815      	ldr	r0, [pc, #84]	; (8002088 <MX_TIM2_Init+0xfc>)
 8002034:	f005 fb28 	bl	8007688 <HAL_TIM_IC_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800203e:	f000 fc3f 	bl	80028c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002042:	2302      	movs	r3, #2
 8002044:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002046:	2302      	movs	r3, #2
 8002048:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	2204      	movs	r2, #4
 8002050:	4619      	mov	r1, r3
 8002052:	480d      	ldr	r0, [pc, #52]	; (8002088 <MX_TIM2_Init+0xfc>)
 8002054:	f005 fb18 	bl	8007688 <HAL_TIM_IC_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800205e:	f000 fc2f 	bl	80028c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	4619      	mov	r1, r3
 800206e:	4806      	ldr	r0, [pc, #24]	; (8002088 <MX_TIM2_Init+0xfc>)
 8002070:	f006 fb96 	bl	80087a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800207a:	f000 fc21 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800207e:	bf00      	nop
 8002080:	3730      	adds	r7, #48	; 0x30
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000047c 	.word	0x2000047c

0800208c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08e      	sub	sp, #56	; 0x38
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a0:	f107 0320 	add.w	r3, r7, #32
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
 80020b8:	615a      	str	r2, [r3, #20]
 80020ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020bc:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <MX_TIM3_Init+0xec>)
 80020be:	4a2f      	ldr	r2, [pc, #188]	; (800217c <MX_TIM3_Init+0xf0>)
 80020c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020c2:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <MX_TIM3_Init+0xec>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <MX_TIM3_Init+0xec>)
 80020ca:	2220      	movs	r2, #32
 80020cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 80020ce:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <MX_TIM3_Init+0xec>)
 80020d0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80020d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <MX_TIM3_Init+0xec>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020dc:	4b26      	ldr	r3, [pc, #152]	; (8002178 <MX_TIM3_Init+0xec>)
 80020de:	2200      	movs	r2, #0
 80020e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020e2:	4825      	ldr	r0, [pc, #148]	; (8002178 <MX_TIM3_Init+0xec>)
 80020e4:	f004 fdbe 	bl	8006c64 <HAL_TIM_Base_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80020ee:	f000 fbe7 	bl	80028c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020fc:	4619      	mov	r1, r3
 80020fe:	481e      	ldr	r0, [pc, #120]	; (8002178 <MX_TIM3_Init+0xec>)
 8002100:	f005 fc20 	bl	8007944 <HAL_TIM_ConfigClockSource>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800210a:	f000 fbd9 	bl	80028c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800210e:	481a      	ldr	r0, [pc, #104]	; (8002178 <MX_TIM3_Init+0xec>)
 8002110:	f004 fe97 	bl	8006e42 <HAL_TIM_PWM_Init>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800211a:	f000 fbd1 	bl	80028c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800211e:	2320      	movs	r3, #32
 8002120:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002126:	f107 0320 	add.w	r3, r7, #32
 800212a:	4619      	mov	r1, r3
 800212c:	4812      	ldr	r0, [pc, #72]	; (8002178 <MX_TIM3_Init+0xec>)
 800212e:	f006 fb37 	bl	80087a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002138:	f000 fbc2 	bl	80028c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800213c:	2360      	movs	r3, #96	; 0x60
 800213e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1900;
 8002140:	f240 736c 	movw	r3, #1900	; 0x76c
 8002144:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002146:	2302      	movs	r3, #2
 8002148:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	2204      	movs	r2, #4
 8002152:	4619      	mov	r1, r3
 8002154:	4808      	ldr	r0, [pc, #32]	; (8002178 <MX_TIM3_Init+0xec>)
 8002156:	f005 fb33 	bl	80077c0 <HAL_TIM_PWM_ConfigChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002160:	f000 fbae 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8002164:	4804      	ldr	r0, [pc, #16]	; (8002178 <MX_TIM3_Init+0xec>)
 8002166:	f004 fdcd 	bl	8006d04 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800216a:	4803      	ldr	r0, [pc, #12]	; (8002178 <MX_TIM3_Init+0xec>)
 800216c:	f001 f87e 	bl	800326c <HAL_TIM_MspPostInit>

}
 8002170:	bf00      	nop
 8002172:	3738      	adds	r7, #56	; 0x38
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	200004c4 	.word	0x200004c4
 800217c:	40000400 	.word	0x40000400

08002180 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b092      	sub	sp, #72	; 0x48
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002186:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
 8002192:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ae:	463b      	mov	r3, r7
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
 80021bc:	615a      	str	r2, [r3, #20]
 80021be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021c0:	4b36      	ldr	r3, [pc, #216]	; (800229c <MX_TIM4_Init+0x11c>)
 80021c2:	4a37      	ldr	r2, [pc, #220]	; (80022a0 <MX_TIM4_Init+0x120>)
 80021c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021c6:	4b35      	ldr	r3, [pc, #212]	; (800229c <MX_TIM4_Init+0x11c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80021cc:	4b33      	ldr	r3, [pc, #204]	; (800229c <MX_TIM4_Init+0x11c>)
 80021ce:	2240      	movs	r2, #64	; 0x40
 80021d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <MX_TIM4_Init+0x11c>)
 80021d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021da:	4b30      	ldr	r3, [pc, #192]	; (800229c <MX_TIM4_Init+0x11c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e0:	4b2e      	ldr	r3, [pc, #184]	; (800229c <MX_TIM4_Init+0x11c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021e6:	482d      	ldr	r0, [pc, #180]	; (800229c <MX_TIM4_Init+0x11c>)
 80021e8:	f004 fd3c 	bl	8006c64 <HAL_TIM_Base_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80021f2:	f000 fb65 	bl	80028c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002200:	4619      	mov	r1, r3
 8002202:	4826      	ldr	r0, [pc, #152]	; (800229c <MX_TIM4_Init+0x11c>)
 8002204:	f005 fb9e 	bl	8007944 <HAL_TIM_ConfigClockSource>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800220e:	f000 fb57 	bl	80028c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002212:	4822      	ldr	r0, [pc, #136]	; (800229c <MX_TIM4_Init+0x11c>)
 8002214:	f004 fe15 	bl	8006e42 <HAL_TIM_PWM_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 800221e:	f000 fb4f 	bl	80028c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002222:	2306      	movs	r3, #6
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8002226:	2320      	movs	r3, #32
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800222a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222e:	4619      	mov	r1, r3
 8002230:	481a      	ldr	r0, [pc, #104]	; (800229c <MX_TIM4_Init+0x11c>)
 8002232:	f005 fc4e 	bl	8007ad2 <HAL_TIM_SlaveConfigSynchro>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 800223c:	f000 fb40 	bl	80028c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002240:	2320      	movs	r3, #32
 8002242:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	4813      	ldr	r0, [pc, #76]	; (800229c <MX_TIM4_Init+0x11c>)
 8002250:	f006 faa6 	bl	80087a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800225a:	f000 fb31 	bl	80028c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800225e:	2360      	movs	r3, #96	; 0x60
 8002260:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002266:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002270:	463b      	mov	r3, r7
 8002272:	2200      	movs	r2, #0
 8002274:	4619      	mov	r1, r3
 8002276:	4809      	ldr	r0, [pc, #36]	; (800229c <MX_TIM4_Init+0x11c>)
 8002278:	f005 faa2 	bl	80077c0 <HAL_TIM_PWM_ConfigChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8002282:	f000 fb1d 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8002286:	4805      	ldr	r0, [pc, #20]	; (800229c <MX_TIM4_Init+0x11c>)
 8002288:	f004 fd3c 	bl	8006d04 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <MX_TIM4_Init+0x11c>)
 800228e:	f000 ffed 	bl	800326c <HAL_TIM_MspPostInit>

}
 8002292:	bf00      	nop
 8002294:	3748      	adds	r7, #72	; 0x48
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000050c 	.word	0x2000050c
 80022a0:	40000800 	.word	0x40000800

080022a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08e      	sub	sp, #56	; 0x38
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b8:	f107 0320 	add.w	r3, r7, #32
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
 80022d0:	615a      	str	r2, [r3, #20]
 80022d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022d4:	4b2c      	ldr	r3, [pc, #176]	; (8002388 <MX_TIM5_Init+0xe4>)
 80022d6:	4a2d      	ldr	r2, [pc, #180]	; (800238c <MX_TIM5_Init+0xe8>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 30-1;
 80022da:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <MX_TIM5_Init+0xe4>)
 80022dc:	221d      	movs	r2, #29
 80022de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b29      	ldr	r3, [pc, #164]	; (8002388 <MX_TIM5_Init+0xe4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000-1;
 80022e6:	4b28      	ldr	r3, [pc, #160]	; (8002388 <MX_TIM5_Init+0xe4>)
 80022e8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80022ec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <MX_TIM5_Init+0xe4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f4:	4b24      	ldr	r3, [pc, #144]	; (8002388 <MX_TIM5_Init+0xe4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022fa:	4823      	ldr	r0, [pc, #140]	; (8002388 <MX_TIM5_Init+0xe4>)
 80022fc:	f004 fcb2 	bl	8006c64 <HAL_TIM_Base_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002306:	f000 fadb 	bl	80028c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800230a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002314:	4619      	mov	r1, r3
 8002316:	481c      	ldr	r0, [pc, #112]	; (8002388 <MX_TIM5_Init+0xe4>)
 8002318:	f005 fb14 	bl	8007944 <HAL_TIM_ConfigClockSource>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002322:	f000 facd 	bl	80028c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002326:	4818      	ldr	r0, [pc, #96]	; (8002388 <MX_TIM5_Init+0xe4>)
 8002328:	f004 fd8b 	bl	8006e42 <HAL_TIM_PWM_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002332:	f000 fac5 	bl	80028c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800233e:	f107 0320 	add.w	r3, r7, #32
 8002342:	4619      	mov	r1, r3
 8002344:	4810      	ldr	r0, [pc, #64]	; (8002388 <MX_TIM5_Init+0xe4>)
 8002346:	f006 fa2b 	bl	80087a0 <HAL_TIMEx_MasterConfigSynchronization>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002350:	f000 fab6 	bl	80028c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002354:	2360      	movs	r3, #96	; 0x60
 8002356:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2200      	movs	r2, #0
 8002368:	4619      	mov	r1, r3
 800236a:	4807      	ldr	r0, [pc, #28]	; (8002388 <MX_TIM5_Init+0xe4>)
 800236c:	f005 fa28 	bl	80077c0 <HAL_TIM_PWM_ConfigChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002376:	f000 faa3 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800237a:	4803      	ldr	r0, [pc, #12]	; (8002388 <MX_TIM5_Init+0xe4>)
 800237c:	f000 ff76 	bl	800326c <HAL_TIM_MspPostInit>

}
 8002380:	bf00      	nop
 8002382:	3738      	adds	r7, #56	; 0x38
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000554 	.word	0x20000554
 800238c:	40000c00 	.word	0x40000c00

08002390 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002396:	463b      	mov	r3, r7
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <MX_TIM7_Init+0x64>)
 80023a0:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <MX_TIM7_Init+0x68>)
 80023a2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <MX_TIM7_Init+0x64>)
 80023a6:	f242 720f 	movw	r2, #9999	; 0x270f
 80023aa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b11      	ldr	r3, [pc, #68]	; (80023f4 <MX_TIM7_Init+0x64>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4500-1;
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <MX_TIM7_Init+0x64>)
 80023b4:	f241 1293 	movw	r2, #4499	; 0x1193
 80023b8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <MX_TIM7_Init+0x64>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80023c0:	480c      	ldr	r0, [pc, #48]	; (80023f4 <MX_TIM7_Init+0x64>)
 80023c2:	f004 fc4f 	bl	8006c64 <HAL_TIM_Base_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80023cc:	f000 fa78 	bl	80028c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80023d8:	463b      	mov	r3, r7
 80023da:	4619      	mov	r1, r3
 80023dc:	4805      	ldr	r0, [pc, #20]	; (80023f4 <MX_TIM7_Init+0x64>)
 80023de:	f006 f9df 	bl	80087a0 <HAL_TIMEx_MasterConfigSynchronization>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80023e8:	f000 fa6a 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	2000059c 	.word	0x2000059c
 80023f8:	40001400 	.word	0x40001400

080023fc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002400:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_TIM10_Init+0x40>)
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <MX_TIM10_Init+0x44>)
 8002404:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 45000-1;
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <MX_TIM10_Init+0x40>)
 8002408:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 800240c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MX_TIM10_Init+0x40>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 800-1;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_TIM10_Init+0x40>)
 8002416:	f240 321f 	movw	r2, #799	; 0x31f
 800241a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800241c:	4b07      	ldr	r3, [pc, #28]	; (800243c <MX_TIM10_Init+0x40>)
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_TIM10_Init+0x40>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002428:	4804      	ldr	r0, [pc, #16]	; (800243c <MX_TIM10_Init+0x40>)
 800242a:	f004 fc1b 	bl	8006c64 <HAL_TIM_Base_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002434:	f000 fa44 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	200005e4 	.word	0x200005e4
 8002440:	40014400 	.word	0x40014400

08002444 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
 8002458:	615a      	str	r2, [r3, #20]
 800245a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <MX_TIM13_Init+0x94>)
 800245e:	4a1f      	ldr	r2, [pc, #124]	; (80024dc <MX_TIM13_Init+0x98>)
 8002460:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002462:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <MX_TIM13_Init+0x94>)
 8002464:	2200      	movs	r2, #0
 8002466:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <MX_TIM13_Init+0x94>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800246e:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <MX_TIM13_Init+0x94>)
 8002470:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002474:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <MX_TIM13_Init+0x94>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800247c:	4b16      	ldr	r3, [pc, #88]	; (80024d8 <MX_TIM13_Init+0x94>)
 800247e:	2200      	movs	r2, #0
 8002480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002482:	4815      	ldr	r0, [pc, #84]	; (80024d8 <MX_TIM13_Init+0x94>)
 8002484:	f004 fbee 	bl	8006c64 <HAL_TIM_Base_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800248e:	f000 fa17 	bl	80028c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002492:	4811      	ldr	r0, [pc, #68]	; (80024d8 <MX_TIM13_Init+0x94>)
 8002494:	f004 fcd5 	bl	8006e42 <HAL_TIM_PWM_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800249e:	f000 fa0f 	bl	80028c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024a2:	2360      	movs	r3, #96	; 0x60
 80024a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024b2:	1d3b      	adds	r3, r7, #4
 80024b4:	2200      	movs	r2, #0
 80024b6:	4619      	mov	r1, r3
 80024b8:	4807      	ldr	r0, [pc, #28]	; (80024d8 <MX_TIM13_Init+0x94>)
 80024ba:	f005 f981 	bl	80077c0 <HAL_TIM_PWM_ConfigChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80024c4:	f000 f9fc 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80024c8:	4803      	ldr	r0, [pc, #12]	; (80024d8 <MX_TIM13_Init+0x94>)
 80024ca:	f000 fecf 	bl	800326c <HAL_TIM_MspPostInit>

}
 80024ce:	bf00      	nop
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000062c 	.word	0x2000062c
 80024dc:	40001c00 	.word	0x40001c00

080024e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <MX_USART2_UART_Init+0x4c>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <MX_USART2_UART_Init+0x50>)
 80024e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <MX_USART2_UART_Init+0x4c>)
 80024ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80024f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	; (800252c <MX_USART2_UART_Init+0x4c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <MX_USART2_UART_Init+0x4c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <MX_USART2_UART_Init+0x4c>)
 8002500:	2200      	movs	r2, #0
 8002502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <MX_USART2_UART_Init+0x4c>)
 8002506:	220c      	movs	r2, #12
 8002508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <MX_USART2_UART_Init+0x4c>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <MX_USART2_UART_Init+0x4c>)
 8002512:	2200      	movs	r2, #0
 8002514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002516:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_USART2_UART_Init+0x4c>)
 8002518:	f006 f9d2 	bl	80088c0 <HAL_UART_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002522:	f000 f9cd 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200006d4 	.word	0x200006d4
 8002530:	40004400 	.word	0x40004400

08002534 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <MX_USART6_UART_Init+0x4c>)
 800253a:	4a12      	ldr	r2, [pc, #72]	; (8002584 <MX_USART6_UART_Init+0x50>)
 800253c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <MX_USART6_UART_Init+0x4c>)
 8002540:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002544:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <MX_USART6_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <MX_USART6_UART_Init+0x4c>)
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <MX_USART6_UART_Init+0x4c>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <MX_USART6_UART_Init+0x4c>)
 800255a:	220c      	movs	r2, #12
 800255c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800255e:	4b08      	ldr	r3, [pc, #32]	; (8002580 <MX_USART6_UART_Init+0x4c>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002564:	4b06      	ldr	r3, [pc, #24]	; (8002580 <MX_USART6_UART_Init+0x4c>)
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800256a:	4805      	ldr	r0, [pc, #20]	; (8002580 <MX_USART6_UART_Init+0x4c>)
 800256c:	f006 f9a8 	bl	80088c0 <HAL_UART_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002576:	f000 f9a3 	bl	80028c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000718 	.word	0x20000718
 8002584:	40011400 	.word	0x40011400

08002588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <MX_DMA_Init+0x3c>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a0b      	ldr	r2, [pc, #44]	; (80025c4 <MX_DMA_Init+0x3c>)
 8002598:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <MX_DMA_Init+0x3c>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a6:	607b      	str	r3, [r7, #4]
 80025a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2010      	movs	r0, #16
 80025b0:	f001 fc03 	bl	8003dba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025b4:	2010      	movs	r0, #16
 80025b6:	f001 fc1c 	bl	8003df2 <HAL_NVIC_EnableIRQ>

}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800

080025c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	; 0x28
 80025cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <MX_GPIO_Init+0x1b8>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	4a66      	ldr	r2, [pc, #408]	; (8002780 <MX_GPIO_Init+0x1b8>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	6313      	str	r3, [r2, #48]	; 0x30
 80025ee:	4b64      	ldr	r3, [pc, #400]	; (8002780 <MX_GPIO_Init+0x1b8>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b60      	ldr	r3, [pc, #384]	; (8002780 <MX_GPIO_Init+0x1b8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	4a5f      	ldr	r2, [pc, #380]	; (8002780 <MX_GPIO_Init+0x1b8>)
 8002604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002608:	6313      	str	r3, [r2, #48]	; 0x30
 800260a:	4b5d      	ldr	r3, [pc, #372]	; (8002780 <MX_GPIO_Init+0x1b8>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	4b59      	ldr	r3, [pc, #356]	; (8002780 <MX_GPIO_Init+0x1b8>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a58      	ldr	r2, [pc, #352]	; (8002780 <MX_GPIO_Init+0x1b8>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b56      	ldr	r3, [pc, #344]	; (8002780 <MX_GPIO_Init+0x1b8>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	4b52      	ldr	r3, [pc, #328]	; (8002780 <MX_GPIO_Init+0x1b8>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	4a51      	ldr	r2, [pc, #324]	; (8002780 <MX_GPIO_Init+0x1b8>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	; 0x30
 8002642:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <MX_GPIO_Init+0x1b8>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	603b      	str	r3, [r7, #0]
 8002652:	4b4b      	ldr	r3, [pc, #300]	; (8002780 <MX_GPIO_Init+0x1b8>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a4a      	ldr	r2, [pc, #296]	; (8002780 <MX_GPIO_Init+0x1b8>)
 8002658:	f043 0308 	orr.w	r3, r3, #8
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b48      	ldr	r3, [pc, #288]	; (8002780 <MX_GPIO_Init+0x1b8>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	603b      	str	r3, [r7, #0]
 8002668:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 800266a:	2200      	movs	r2, #0
 800266c:	f24d 0107 	movw	r1, #53255	; 0xd007
 8002670:	4844      	ldr	r0, [pc, #272]	; (8002784 <MX_GPIO_Init+0x1bc>)
 8002672:	f002 f8dd 	bl	8004830 <HAL_GPIO_WritePin>
                          |AD_CS3_Pin|AD_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_CS1_Pin|LED_LE_Pin, GPIO_PIN_RESET);
 8002676:	2200      	movs	r2, #0
 8002678:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800267c:	4842      	ldr	r0, [pc, #264]	; (8002788 <MX_GPIO_Init+0x1c0>)
 800267e:	f002 f8d7 	bl	8004830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin, GPIO_PIN_RESET);
 8002682:	2200      	movs	r2, #0
 8002684:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8002688:	4840      	ldr	r0, [pc, #256]	; (800278c <MX_GPIO_Init+0x1c4>)
 800268a:	f002 f8d1 	bl	8004830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_RESET);
 800268e:	2200      	movs	r2, #0
 8002690:	2104      	movs	r1, #4
 8002692:	483f      	ldr	r0, [pc, #252]	; (8002790 <MX_GPIO_Init+0x1c8>)
 8002694:	f002 f8cc 	bl	8004830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800269e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80026a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	4619      	mov	r1, r3
 80026ae:	4836      	ldr	r0, [pc, #216]	; (8002788 <MX_GPIO_Init+0x1c0>)
 80026b0:	f001 ff2a 	bl	8004508 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dead_man_SW_Pin DRV_PWR_FB_Pin */
  GPIO_InitStruct.Pin = Dead_man_SW_Pin|DRV_PWR_FB_Pin;
 80026b4:	2311      	movs	r3, #17
 80026b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4619      	mov	r1, r3
 80026c6:	4830      	ldr	r0, [pc, #192]	; (8002788 <MX_GPIO_Init+0x1c0>)
 80026c8:	f001 ff1e 	bl	8004508 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_INT_Pin */
  GPIO_InitStruct.Pin = I2C_INT_Pin;
 80026cc:	2320      	movs	r3, #32
 80026ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2C_INT_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 0314 	add.w	r3, r7, #20
 80026de:	4619      	mov	r1, r3
 80026e0:	4829      	ldr	r0, [pc, #164]	; (8002788 <MX_GPIO_Init+0x1c0>)
 80026e2:	f001 ff11 	bl	8004508 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_XSDN_36_Pin ToF_XSDN_25_Pin ToF_XSDN_14_Pin AD_CS4_Pin
                           AD_CS3_Pin AD_CS2_Pin */
  GPIO_InitStruct.Pin = ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 80026e6:	f24d 0307 	movw	r3, #53255	; 0xd007
 80026ea:	617b      	str	r3, [r7, #20]
                          |AD_CS3_Pin|AD_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ec:	2301      	movs	r3, #1
 80026ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f4:	2300      	movs	r3, #0
 80026f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f8:	f107 0314 	add.w	r3, r7, #20
 80026fc:	4619      	mov	r1, r3
 80026fe:	4821      	ldr	r0, [pc, #132]	; (8002784 <MX_GPIO_Init+0x1bc>)
 8002700:	f001 ff02 	bl	8004508 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_CS1_Pin LED_LE_Pin */
  GPIO_InitStruct.Pin = AD_CS1_Pin|LED_LE_Pin;
 8002704:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800270a:	2301      	movs	r3, #1
 800270c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	481a      	ldr	r0, [pc, #104]	; (8002788 <MX_GPIO_Init+0x1c0>)
 800271e:	f001 fef3 	bl	8004508 <HAL_GPIO_Init>

  /*Configure GPIO pins : INF_LE_Pin INF_OE_Pin DRV_EN_Pin */
  GPIO_InitStruct.Pin = INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin;
 8002722:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8002726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002728:	2301      	movs	r3, #1
 800272a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	4814      	ldr	r0, [pc, #80]	; (800278c <MX_GPIO_Init+0x1c4>)
 800273c:	f001 fee4 	bl	8004508 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_FB_Pin */
  GPIO_InitStruct.Pin = DRV_EN_FB_Pin;
 8002740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_EN_FB_GPIO_Port, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	480d      	ldr	r0, [pc, #52]	; (800278c <MX_GPIO_Init+0x1c4>)
 8002756:	f001 fed7 	bl	8004508 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_OE_Pin;
 800275a:	2304      	movs	r3, #4
 800275c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275e:	2301      	movs	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OE_GPIO_Port, &GPIO_InitStruct);
 800276a:	f107 0314 	add.w	r3, r7, #20
 800276e:	4619      	mov	r1, r3
 8002770:	4807      	ldr	r0, [pc, #28]	; (8002790 <MX_GPIO_Init+0x1c8>)
 8002772:	f001 fec9 	bl	8004508 <HAL_GPIO_Init>

}
 8002776:	bf00      	nop
 8002778:	3728      	adds	r7, #40	; 0x28
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023800 	.word	0x40023800
 8002784:	40020400 	.word	0x40020400
 8002788:	40020800 	.word	0x40020800
 800278c:	40020000 	.word	0x40020000
 8002790:	40020c00 	.word	0x40020c00

08002794 <HAL_TIM_PeriodElapsedCallback>:
{

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	if (htim == &htim7)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a21      	ldr	r2, [pc, #132]	; (8002824 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d104      	bne.n	80027ae <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		decel_end_flag++;
 80027a4:	4b20      	ldr	r3, [pc, #128]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3301      	adds	r3, #1
 80027aa:	4a1f      	ldr	r2, [pc, #124]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80027ac:	6013      	str	r3, [r2, #0]
	}
	if (htim == &htim10 )
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a1e      	ldr	r2, [pc, #120]	; (800282c <HAL_TIM_PeriodElapsedCallback+0x98>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d131      	bne.n	800281a <HAL_TIM_PeriodElapsedCallback+0x86>
	  {
		VL53L1_GetMeasurementDataReady  ( Dev2,  &DataReady2 ) ;
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	491e      	ldr	r1, [pc, #120]	; (8002834 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80027bc:	4618      	mov	r0, r3
 80027be:	f007 f8b1 	bl	8009924 <VL53L1_GetMeasurementDataReady>
		if(DataReady2 == 1){
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d105      	bne.n	80027d6 <HAL_TIM_PeriodElapsedCallback+0x42>
			VL53L1_GetRangingMeasurementData( Dev2, &RangingData2 );
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	491a      	ldr	r1, [pc, #104]	; (8002838 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80027d0:	4618      	mov	r0, r3
 80027d2:	f007 fa63 	bl	8009c9c <VL53L1_GetRangingMeasurementData>
		}

		VL53L1_ClearInterruptAndStartMeasurement( Dev2 );
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f007 f88c 	bl	80098f8 <VL53L1_ClearInterruptAndStartMeasurement>

		if (circuit_Section == Slow_section || circuit_Section == Slow_waiting){
 80027e0:	4b16      	ldr	r3, [pc, #88]	; (800283c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80027e8:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d114      	bne.n	800281a <HAL_TIM_PeriodElapsedCallback+0x86>
			VL53L1_GetMeasurementDataReady  ( Dev1,  &DataReady1 ) ;
 80027f0:	4b13      	ldr	r3, [pc, #76]	; (8002840 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4913      	ldr	r1, [pc, #76]	; (8002844 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80027f6:	4618      	mov	r0, r3
 80027f8:	f007 f894 	bl	8009924 <VL53L1_GetMeasurementDataReady>
			if(DataReady1 == 1){
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d105      	bne.n	8002810 <HAL_TIM_PeriodElapsedCallback+0x7c>
				VL53L1_GetRangingMeasurementData( Dev1, &RangingData1 );
 8002804:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	490f      	ldr	r1, [pc, #60]	; (8002848 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800280a:	4618      	mov	r0, r3
 800280c:	f007 fa46 	bl	8009c9c <VL53L1_GetRangingMeasurementData>
			}

			VL53L1_ClearInterruptAndStartMeasurement( Dev1 );
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f007 f86f 	bl	80098f8 <VL53L1_ClearInterruptAndStartMeasurement>
		}
	  }
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000059c 	.word	0x2000059c
 8002828:	20000ef4 	.word	0x20000ef4
 800282c:	200005e4 	.word	0x200005e4
 8002830:	20000004 	.word	0x20000004
 8002834:	20000eed 	.word	0x20000eed
 8002838:	20000788 	.word	0x20000788
 800283c:	20000ef9 	.word	0x20000ef9
 8002840:	20000000 	.word	0x20000000
 8002844:	20000eec 	.word	0x20000eec
 8002848:	2000076c 	.word	0x2000076c

0800284c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800285c:	d124      	bne.n	80028a8 <HAL_TIM_IC_CaptureCallback+0x5c>
		cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 2;
 800285e:	2100      	movs	r1, #0
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f005 f979 	bl	8007b58 <HAL_TIM_ReadCapturedValue>
 8002866:	4603      	mov	r3, r0
 8002868:	3302      	adds	r3, #2
 800286a:	4a11      	ldr	r2, [pc, #68]	; (80028b0 <HAL_TIM_IC_CaptureCallback+0x64>)
 800286c:	6013      	str	r3, [r2, #0]
		cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + 2;
 800286e:	2104      	movs	r1, #4
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f005 f971 	bl	8007b58 <HAL_TIM_ReadCapturedValue>
 8002876:	4603      	mov	r3, r0
 8002878:	3302      	adds	r3, #2
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <HAL_TIM_IC_CaptureCallback+0x68>)
 800287c:	6013      	str	r3, [r2, #0]

		duty_deadman = (float) 100 * cnt_high / cnt_full;
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <HAL_TIM_IC_CaptureCallback+0x68>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80028b8 <HAL_TIM_IC_CaptureCallback+0x6c>
 800288e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002892:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <HAL_TIM_IC_CaptureCallback+0x64>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	ee07 3a90 	vmov	s15, r3
 800289a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800289e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_TIM_IC_CaptureCallback+0x70>)
 80028a4:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000efc 	.word	0x20000efc
 80028b4:	20000f00 	.word	0x20000f00
 80028b8:	42c80000 	.word	0x42c80000
 80028bc:	20000f04 	.word	0x20000f04

080028c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028c4:	b672      	cpsid	i
}
 80028c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <Error_Handler+0x8>

080028ca <MotorDrive>:
#include "main.h"
#include "motor.h"

int MotorDrive(TIM_HandleTypeDef* const pwmHandle, int duty)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
	int pwm_val = 100+(duty*20);
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	3364      	adds	r3, #100	; 0x64
 80028e0:	60fb      	str	r3, [r7, #12]
	pwmHandle -> Instance -> CCR1 = pwm_val;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34
	return pwm_val;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <MotorFollowControl>:

int MotorFollowControl(int* prev_error, int current_distance_front, int current_distance_tilted, circuit_section circuit_section)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b08b      	sub	sp, #44	; 0x2c
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	70fb      	strb	r3, [r7, #3]
	int new_duty_motor;
	int current_distance;
	int reference_distance = 300;
 8002906:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800290a:	61fb      	str	r3, [r7, #28]
	if (circuit_section == Slow_section || circuit_section == Slow_waiting){
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <MotorFollowControl+0x20>
 8002912:	78fb      	ldrb	r3, [r7, #3]
 8002914:	2b03      	cmp	r3, #3
 8002916:	d109      	bne.n	800292c <MotorFollowControl+0x34>
		if (current_distance_tilted < current_distance_front){
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	429a      	cmp	r2, r3
 800291e:	da02      	bge.n	8002926 <MotorFollowControl+0x2e>
			current_distance = current_distance_tilted;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	623b      	str	r3, [r7, #32]
		if (current_distance_tilted < current_distance_front){
 8002924:	e004      	b.n	8002930 <MotorFollowControl+0x38>
		}
		else {
			current_distance = current_distance_front;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	623b      	str	r3, [r7, #32]
		if (current_distance_tilted < current_distance_front){
 800292a:	e001      	b.n	8002930 <MotorFollowControl+0x38>
		}
	}
	else {
		current_distance = current_distance_front;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	623b      	str	r3, [r7, #32]
	}

	int error = reference_distance-current_distance;
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	61bb      	str	r3, [r7, #24]
	int d_error = error - *prev_error;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
	new_duty_motor = -error/20 + d_error/50;
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	4a2a      	ldr	r2, [pc, #168]	; (80029f0 <MotorFollowControl+0xf8>)
 8002946:	fb82 1203 	smull	r1, r2, r2, r3
 800294a:	10d2      	asrs	r2, r2, #3
 800294c:	17db      	asrs	r3, r3, #31
 800294e:	1a9a      	subs	r2, r3, r2
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	4928      	ldr	r1, [pc, #160]	; (80029f4 <MotorFollowControl+0xfc>)
 8002954:	fb81 0103 	smull	r0, r1, r1, r3
 8002958:	1109      	asrs	r1, r1, #4
 800295a:	17db      	asrs	r3, r3, #31
 800295c:	1acb      	subs	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
	*prev_error = error;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	601a      	str	r2, [r3, #0]
	switch(circuit_section) {
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	2b04      	cmp	r3, #4
 800296c:	d833      	bhi.n	80029d6 <MotorFollowControl+0xde>
 800296e:	a201      	add	r2, pc, #4	; (adr r2, 8002974 <MotorFollowControl+0x7c>)
 8002970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002974:	08002989 	.word	0x08002989
 8002978:	08002995 	.word	0x08002995
 800297c:	080029a1 	.word	0x080029a1
 8002980:	080029ad 	.word	0x080029ad
 8002984:	080029b9 	.word	0x080029b9
		case Slow_section:
			if (new_duty_motor > 18)
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	2b12      	cmp	r3, #18
 800298c:	dd1a      	ble.n	80029c4 <MotorFollowControl+0xcc>
				new_duty_motor = 18;
 800298e:	2312      	movs	r3, #18
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 8002992:	e017      	b.n	80029c4 <MotorFollowControl+0xcc>
		case Fast_section:
			if (new_duty_motor > 30)
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	2b1e      	cmp	r3, #30
 8002998:	dd16      	ble.n	80029c8 <MotorFollowControl+0xd0>
				new_duty_motor = 30;
 800299a:	231e      	movs	r3, #30
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 800299e:	e013      	b.n	80029c8 <MotorFollowControl+0xd0>
		case Braking:
			if (new_duty_motor > 30)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	2b1e      	cmp	r3, #30
 80029a4:	dd12      	ble.n	80029cc <MotorFollowControl+0xd4>
				new_duty_motor = 30;
 80029a6:	231e      	movs	r3, #30
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80029aa:	e00f      	b.n	80029cc <MotorFollowControl+0xd4>
		case Slow_waiting:
			if (new_duty_motor > 18)
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	2b12      	cmp	r3, #18
 80029b0:	dd0e      	ble.n	80029d0 <MotorFollowControl+0xd8>
				new_duty_motor = 18;
 80029b2:	2312      	movs	r3, #18
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80029b6:	e00b      	b.n	80029d0 <MotorFollowControl+0xd8>
		case Acceleration:
			if (new_duty_motor > 30)
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	2b1e      	cmp	r3, #30
 80029bc:	dd0a      	ble.n	80029d4 <MotorFollowControl+0xdc>
				new_duty_motor = 30;
 80029be:	231e      	movs	r3, #30
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
			break;
 80029c2:	e007      	b.n	80029d4 <MotorFollowControl+0xdc>
			break;
 80029c4:	bf00      	nop
 80029c6:	e006      	b.n	80029d6 <MotorFollowControl+0xde>
			break;
 80029c8:	bf00      	nop
 80029ca:	e004      	b.n	80029d6 <MotorFollowControl+0xde>
			break;
 80029cc:	bf00      	nop
 80029ce:	e002      	b.n	80029d6 <MotorFollowControl+0xde>
			break;
 80029d0:	bf00      	nop
 80029d2:	e000      	b.n	80029d6 <MotorFollowControl+0xde>
			break;
 80029d4:	bf00      	nop
	}
	if (new_duty_motor < 2)
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	2b01      	cmp	r3, #1
 80029da:	dc01      	bgt.n	80029e0 <MotorFollowControl+0xe8>
		new_duty_motor = 2;
 80029dc:	2302      	movs	r3, #2
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
	return new_duty_motor;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	372c      	adds	r7, #44	; 0x2c
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	66666667 	.word	0x66666667
 80029f4:	51eb851f 	.word	0x51eb851f

080029f8 <ServoPosition>:
#include "main.h"
#include <math.h>

void ServoPosition(TIM_HandleTypeDef* const pwmHandle, double    angle){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	ed87 0b00 	vstr	d0, [r7]
    if(angle < 20){angle = 20;}
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <ServoPosition+0xb8>)
 8002a0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a0e:	f7fe f885 	bl	8000b1c <__aeabi_dcmplt>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d004      	beq.n	8002a22 <ServoPosition+0x2a>
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	4b24      	ldr	r3, [pc, #144]	; (8002ab0 <ServoPosition+0xb8>)
 8002a1e:	e9c7 2300 	strd	r2, r3, [r7]
    if(angle>175){angle = 175;}
 8002a22:	a31f      	add	r3, pc, #124	; (adr r3, 8002aa0 <ServoPosition+0xa8>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a2c:	f7fe f894 	bl	8000b58 <__aeabi_dcmpgt>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <ServoPosition+0x48>
 8002a36:	a31a      	add	r3, pc, #104	; (adr r3, 8002aa0 <ServoPosition+0xa8>)
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	e9c7 2300 	strd	r2, r3, [r7]
    //angle2CCR = ((angle/180+1)/20*60000);
    pwmHandle->Instance->CCR1 = (int)((angle/180+1)/20*60000);//angle2CCR;
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <ServoPosition+0xbc>)
 8002a46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a4a:	f7fd ff1f 	bl	800088c <__aeabi_ddiv>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <ServoPosition+0xc0>)
 8002a5c:	f7fd fc36 	bl	80002cc <__adddf3>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <ServoPosition+0xb8>)
 8002a6e:	f7fd ff0d 	bl	800088c <__aeabi_ddiv>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	a30b      	add	r3, pc, #44	; (adr r3, 8002aa8 <ServoPosition+0xb0>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f7fd fdda 	bl	8000638 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f884 	bl	8000b98 <__aeabi_d2iz>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	00000000 	.word	0x00000000
 8002aa4:	4065e000 	.word	0x4065e000
 8002aa8:	00000000 	.word	0x00000000
 8002aac:	40ed4c00 	.word	0x40ed4c00
 8002ab0:	40340000 	.word	0x40340000
 8002ab4:	40668000 	.word	0x40668000
 8002ab8:	3ff00000 	.word	0x3ff00000
 8002abc:	00000000 	.word	0x00000000

08002ac0 <SteeringAngle>:


float SteeringAngle(float p, float delta, float kp, float kd){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	ed87 0a03 	vstr	s0, [r7, #12]
 8002aca:	edc7 0a02 	vstr	s1, [r7, #8]
 8002ace:	ed87 1a01 	vstr	s2, [r7, #4]
 8002ad2:	edc7 1a00 	vstr	s3, [r7]
	float phi = atan(0.7826*tan(-kp*p-kd*delta));
 8002ad6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ada:	eeb1 7a67 	vneg.f32	s14, s15
 8002ade:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae6:	edd7 6a00 	vldr	s13, [r7]
 8002aea:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af6:	ee17 0a90 	vmov	r0, s15
 8002afa:	f7fd fd45 	bl	8000588 <__aeabi_f2d>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	ec43 2b10 	vmov	d0, r2, r3
 8002b06:	f00e fc1f 	bl	8011348 <tan>
 8002b0a:	ec51 0b10 	vmov	r0, r1, d0
 8002b0e:	a31d      	add	r3, pc, #116	; (adr r3, 8002b84 <SteeringAngle+0xc4>)
 8002b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b14:	f7fd fd90 	bl	8000638 <__aeabi_dmul>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	ec43 2b17 	vmov	d7, r2, r3
 8002b20:	eeb0 0a47 	vmov.f32	s0, s14
 8002b24:	eef0 0a67 	vmov.f32	s1, s15
 8002b28:	f00e fa62 	bl	8010ff0 <atan>
 8002b2c:	ec53 2b10 	vmov	r2, r3, d0
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	f7fe f858 	bl	8000be8 <__aeabi_d2f>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	617b      	str	r3, [r7, #20]
	// Egyenesfutás miatt megváltoztatva
	float servoangle=90-phi*269.04;//88
 8002b3c:	6978      	ldr	r0, [r7, #20]
 8002b3e:	f7fd fd23 	bl	8000588 <__aeabi_f2d>
 8002b42:	a312      	add	r3, pc, #72	; (adr r3, 8002b8c <SteeringAngle+0xcc>)
 8002b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b48:	f7fd fd76 	bl	8000638 <__aeabi_dmul>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	490a      	ldr	r1, [pc, #40]	; (8002b80 <SteeringAngle+0xc0>)
 8002b56:	f7fd fbb7 	bl	80002c8 <__aeabi_dsub>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f7fe f841 	bl	8000be8 <__aeabi_d2f>
 8002b66:	4603      	mov	r3, r0
 8002b68:	613b      	str	r3, [r7, #16]
	return servoangle;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	ee07 3a90 	vmov	s15, r3
}
 8002b70:	eeb0 0a67 	vmov.f32	s0, s15
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	f3af 8000 	nop.w
 8002b80:	40568000 	.word	0x40568000
 8002b84:	27bb2fec 	.word	0x27bb2fec
 8002b88:	3fe90b0f 	.word	0x3fe90b0f
 8002b8c:	d70a3d71 	.word	0xd70a3d71
 8002b90:	4070d0a3 	.word	0x4070d0a3

08002b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	607b      	str	r3, [r7, #4]
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <HAL_MspInit+0x4c>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba2:	4a0f      	ldr	r2, [pc, #60]	; (8002be0 <HAL_MspInit+0x4c>)
 8002ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_MspInit+0x4c>)
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb2:	607b      	str	r3, [r7, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	603b      	str	r3, [r7, #0]
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_MspInit+0x4c>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <HAL_MspInit+0x4c>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_MspInit+0x4c>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002bd2:	2007      	movs	r0, #7
 8002bd4:	f001 f8e6 	bl	8003da4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40023800 	.word	0x40023800

08002be4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08a      	sub	sp, #40	; 0x28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a17      	ldr	r2, [pc, #92]	; (8002c60 <HAL_ADC_MspInit+0x7c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d127      	bne.n	8002c56 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_ADC_MspInit+0x80>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <HAL_ADC_MspInit+0x80>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6453      	str	r3, [r2, #68]	; 0x44
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_ADC_MspInit+0x80>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	613b      	str	r3, [r7, #16]
 8002c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <HAL_ADC_MspInit+0x80>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <HAL_ADC_MspInit+0x80>)
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	6313      	str	r3, [r2, #48]	; 0x30
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_ADC_MspInit+0x80>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IMotor_Pin|UBatt_Pin;
 8002c3e:	2312      	movs	r3, #18
 8002c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c42:	2303      	movs	r3, #3
 8002c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4a:	f107 0314 	add.w	r3, r7, #20
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4805      	ldr	r0, [pc, #20]	; (8002c68 <HAL_ADC_MspInit+0x84>)
 8002c52:	f001 fc59 	bl	8004508 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002c56:	bf00      	nop
 8002c58:	3728      	adds	r7, #40	; 0x28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40012000 	.word	0x40012000
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40020000 	.word	0x40020000

08002c6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08e      	sub	sp, #56	; 0x38
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5c      	ldr	r2, [pc, #368]	; (8002dfc <HAL_I2C_MspInit+0x190>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d12d      	bne.n	8002cea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	623b      	str	r3, [r7, #32]
 8002c92:	4b5b      	ldr	r3, [pc, #364]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	4a5a      	ldr	r2, [pc, #360]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002c98:	f043 0302 	orr.w	r3, r3, #2
 8002c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c9e:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	623b      	str	r3, [r7, #32]
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002caa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cb0:	2312      	movs	r3, #18
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	484f      	ldr	r0, [pc, #316]	; (8002e04 <HAL_I2C_MspInit+0x198>)
 8002cc8:	f001 fc1e 	bl	8004508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	4a4a      	ldr	r2, [pc, #296]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002cd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cda:	6413      	str	r3, [r2, #64]	; 0x40
 8002cdc:	4b48      	ldr	r3, [pc, #288]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002ce8:	e083      	b.n	8002df2 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a46      	ldr	r2, [pc, #280]	; (8002e08 <HAL_I2C_MspInit+0x19c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d12d      	bne.n	8002d50 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	4a40      	ldr	r2, [pc, #256]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002cfe:	f043 0302 	orr.w	r3, r3, #2
 8002d02:	6313      	str	r3, [r2, #48]	; 0x30
 8002d04:	4b3e      	ldr	r3, [pc, #248]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8002d10:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d16:	2312      	movs	r3, #18
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d22:	2304      	movs	r3, #4
 8002d24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4835      	ldr	r0, [pc, #212]	; (8002e04 <HAL_I2C_MspInit+0x198>)
 8002d2e:	f001 fbeb 	bl	8004508 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	4b32      	ldr	r3, [pc, #200]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a31      	ldr	r2, [pc, #196]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002d3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b2f      	ldr	r3, [pc, #188]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
}
 8002d4e:	e050      	b.n	8002df2 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2d      	ldr	r2, [pc, #180]	; (8002e0c <HAL_I2C_MspInit+0x1a0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d14b      	bne.n	8002df2 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002d64:	f043 0304 	orr.w	r3, r3, #4
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a20      	ldr	r2, [pc, #128]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d98:	2312      	movs	r3, #18
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da0:	2303      	movs	r3, #3
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002da4:	2304      	movs	r3, #4
 8002da6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dac:	4619      	mov	r1, r3
 8002dae:	4818      	ldr	r0, [pc, #96]	; (8002e10 <HAL_I2C_MspInit+0x1a4>)
 8002db0:	f001 fbaa 	bl	8004508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002db4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dba:	2312      	movs	r3, #18
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4810      	ldr	r0, [pc, #64]	; (8002e14 <HAL_I2C_MspInit+0x1a8>)
 8002dd2:	f001 fb99 	bl	8004508 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002de0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_I2C_MspInit+0x194>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
}
 8002df2:	bf00      	nop
 8002df4:	3738      	adds	r7, #56	; 0x38
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40005400 	.word	0x40005400
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40020400 	.word	0x40020400
 8002e08:	40005800 	.word	0x40005800
 8002e0c:	40005c00 	.word	0x40005c00
 8002e10:	40020800 	.word	0x40020800
 8002e14:	40020000 	.word	0x40020000

08002e18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b090      	sub	sp, #64	; 0x40
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a72      	ldr	r2, [pc, #456]	; (8003000 <HAL_SPI_MspInit+0x1e8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d14a      	bne.n	8002ed0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e3e:	4b71      	ldr	r3, [pc, #452]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	4a70      	ldr	r2, [pc, #448]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002e44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e48:	6453      	str	r3, [r2, #68]	; 0x44
 8002e4a:	4b6e      	ldr	r3, [pc, #440]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5a:	4b6a      	ldr	r3, [pc, #424]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	4a69      	ldr	r2, [pc, #420]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6313      	str	r3, [r2, #48]	; 0x30
 8002e66:	4b67      	ldr	r3, [pc, #412]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	623b      	str	r3, [r7, #32]
 8002e76:	4b63      	ldr	r3, [pc, #396]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a62      	ldr	r2, [pc, #392]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002e7c:	f043 0302 	orr.w	r3, r3, #2
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b60      	ldr	r3, [pc, #384]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002e8e:	23a0      	movs	r3, #160	; 0xa0
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	2302      	movs	r3, #2
 8002e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e9e:	2305      	movs	r3, #5
 8002ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4857      	ldr	r0, [pc, #348]	; (8003008 <HAL_SPI_MspInit+0x1f0>)
 8002eaa:	f001 fb2d 	bl	8004508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002eae:	2310      	movs	r3, #16
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ebe:	2305      	movs	r3, #5
 8002ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4850      	ldr	r0, [pc, #320]	; (800300c <HAL_SPI_MspInit+0x1f4>)
 8002eca:	f001 fb1d 	bl	8004508 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ece:	e092      	b.n	8002ff6 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a4e      	ldr	r2, [pc, #312]	; (8003010 <HAL_SPI_MspInit+0x1f8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d15b      	bne.n	8002f92 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	4b49      	ldr	r3, [pc, #292]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4a48      	ldr	r2, [pc, #288]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002ee4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eea:	4b46      	ldr	r3, [pc, #280]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef2:	61fb      	str	r3, [r7, #28]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	4b42      	ldr	r3, [pc, #264]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efe:	4a41      	ldr	r2, [pc, #260]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002f00:	f043 0304 	orr.w	r3, r3, #4
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
 8002f06:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	61bb      	str	r3, [r7, #24]
 8002f10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a3a      	ldr	r2, [pc, #232]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002f1c:	f043 0302 	orr.w	r3, r3, #2
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b38      	ldr	r3, [pc, #224]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002f3e:	2307      	movs	r3, #7
 8002f40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f46:	4619      	mov	r1, r3
 8002f48:	4832      	ldr	r0, [pc, #200]	; (8003014 <HAL_SPI_MspInit+0x1fc>)
 8002f4a:	f001 fadd 	bl	8004508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f4e:	2304      	movs	r3, #4
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f52:	2302      	movs	r3, #2
 8002f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f5e:	2305      	movs	r3, #5
 8002f60:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f66:	4619      	mov	r1, r3
 8002f68:	482a      	ldr	r0, [pc, #168]	; (8003014 <HAL_SPI_MspInit+0x1fc>)
 8002f6a:	f001 facd 	bl	8004508 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f74:	2302      	movs	r3, #2
 8002f76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f80:	2305      	movs	r3, #5
 8002f82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4820      	ldr	r0, [pc, #128]	; (800300c <HAL_SPI_MspInit+0x1f4>)
 8002f8c:	f001 fabc 	bl	8004508 <HAL_GPIO_Init>
}
 8002f90:	e031      	b.n	8002ff6 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a20      	ldr	r2, [pc, #128]	; (8003018 <HAL_SPI_MspInit+0x200>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d12c      	bne.n	8002ff6 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	4b18      	ldr	r3, [pc, #96]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	4a17      	ldr	r2, [pc, #92]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002faa:	6413      	str	r3, [r2, #64]	; 0x40
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	4a10      	ldr	r2, [pc, #64]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_SPI_MspInit+0x1ec>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002fd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fe6:	2306      	movs	r3, #6
 8002fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4808      	ldr	r0, [pc, #32]	; (8003014 <HAL_SPI_MspInit+0x1fc>)
 8002ff2:	f001 fa89 	bl	8004508 <HAL_GPIO_Init>
}
 8002ff6:	bf00      	nop
 8002ff8:	3740      	adds	r7, #64	; 0x40
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40013000 	.word	0x40013000
 8003004:	40023800 	.word	0x40023800
 8003008:	40020000 	.word	0x40020000
 800300c:	40020400 	.word	0x40020400
 8003010:	40003800 	.word	0x40003800
 8003014:	40020800 	.word	0x40020800
 8003018:	40003c00 	.word	0x40003c00

0800301c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08a      	sub	sp, #40	; 0x28
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800303c:	d164      	bne.n	8003108 <HAL_TIM_IC_MspInit+0xec>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	4b33      	ldr	r3, [pc, #204]	; (8003110 <HAL_TIM_IC_MspInit+0xf4>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	4a32      	ldr	r2, [pc, #200]	; (8003110 <HAL_TIM_IC_MspInit+0xf4>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6413      	str	r3, [r2, #64]	; 0x40
 800304e:	4b30      	ldr	r3, [pc, #192]	; (8003110 <HAL_TIM_IC_MspInit+0xf4>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	613b      	str	r3, [r7, #16]
 8003058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	4b2c      	ldr	r3, [pc, #176]	; (8003110 <HAL_TIM_IC_MspInit+0xf4>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a2b      	ldr	r2, [pc, #172]	; (8003110 <HAL_TIM_IC_MspInit+0xf4>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b29      	ldr	r3, [pc, #164]	; (8003110 <HAL_TIM_IC_MspInit+0xf4>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800307a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307c:	2302      	movs	r3, #2
 800307e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003084:	2300      	movs	r3, #0
 8003086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003088:	2301      	movs	r3, #1
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	4619      	mov	r1, r3
 8003092:	4820      	ldr	r0, [pc, #128]	; (8003114 <HAL_TIM_IC_MspInit+0xf8>)
 8003094:	f001 fa38 	bl	8004508 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8003098:	4b1f      	ldr	r3, [pc, #124]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 800309a:	4a20      	ldr	r2, [pc, #128]	; (800311c <HAL_TIM_IC_MspInit+0x100>)
 800309c:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 800309e:	4b1e      	ldr	r3, [pc, #120]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 80030a0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80030a4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030a6:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 80030b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030ba:	4b17      	ldr	r3, [pc, #92]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 80030bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030c0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030c2:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 80030c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030c8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80030ca:	4b13      	ldr	r3, [pc, #76]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 80030d8:	2200      	movs	r2, #0
 80030da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80030dc:	480e      	ldr	r0, [pc, #56]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 80030de:	f000 fea3 	bl	8003e28 <HAL_DMA_Init>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_TIM_IC_MspInit+0xd0>
    {
      Error_Handler();
 80030e8:	f7ff fbea 	bl	80028c0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24
 80030f2:	4a09      	ldr	r2, [pc, #36]	; (8003118 <HAL_TIM_IC_MspInit+0xfc>)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030f8:	2200      	movs	r2, #0
 80030fa:	2100      	movs	r1, #0
 80030fc:	201c      	movs	r0, #28
 80030fe:	f000 fe5c 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003102:	201c      	movs	r0, #28
 8003104:	f000 fe75 	bl	8003df2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003108:	bf00      	nop
 800310a:	3728      	adds	r7, #40	; 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40023800 	.word	0x40023800
 8003114:	40020000 	.word	0x40020000
 8003118:	20000674 	.word	0x20000674
 800311c:	40026088 	.word	0x40026088

08003120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a48      	ldr	r2, [pc, #288]	; (8003250 <HAL_TIM_Base_MspInit+0x130>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10e      	bne.n	8003150 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	4b47      	ldr	r3, [pc, #284]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a46      	ldr	r2, [pc, #280]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b44      	ldr	r3, [pc, #272]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	61fb      	str	r3, [r7, #28]
 800314c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800314e:	e07a      	b.n	8003246 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a40      	ldr	r2, [pc, #256]	; (8003258 <HAL_TIM_Base_MspInit+0x138>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10e      	bne.n	8003178 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	61bb      	str	r3, [r7, #24]
 800315e:	4b3d      	ldr	r3, [pc, #244]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003162:	4a3c      	ldr	r2, [pc, #240]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	6413      	str	r3, [r2, #64]	; 0x40
 800316a:	4b3a      	ldr	r3, [pc, #232]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	f003 0304 	and.w	r3, r3, #4
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	69bb      	ldr	r3, [r7, #24]
}
 8003176:	e066      	b.n	8003246 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a37      	ldr	r2, [pc, #220]	; (800325c <HAL_TIM_Base_MspInit+0x13c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d116      	bne.n	80031b0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	4b33      	ldr	r3, [pc, #204]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	4a32      	ldr	r2, [pc, #200]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 800318c:	f043 0308 	orr.w	r3, r3, #8
 8003190:	6413      	str	r3, [r2, #64]	; 0x40
 8003192:	4b30      	ldr	r3, [pc, #192]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800319e:	2200      	movs	r2, #0
 80031a0:	2100      	movs	r1, #0
 80031a2:	2032      	movs	r0, #50	; 0x32
 80031a4:	f000 fe09 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80031a8:	2032      	movs	r0, #50	; 0x32
 80031aa:	f000 fe22 	bl	8003df2 <HAL_NVIC_EnableIRQ>
}
 80031ae:	e04a      	b.n	8003246 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM7)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a2a      	ldr	r2, [pc, #168]	; (8003260 <HAL_TIM_Base_MspInit+0x140>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d116      	bne.n	80031e8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	4b25      	ldr	r3, [pc, #148]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	4a24      	ldr	r2, [pc, #144]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 80031c4:	f043 0320 	orr.w	r3, r3, #32
 80031c8:	6413      	str	r3, [r2, #64]	; 0x40
 80031ca:	4b22      	ldr	r3, [pc, #136]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	2037      	movs	r0, #55	; 0x37
 80031dc:	f000 fded 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031e0:	2037      	movs	r0, #55	; 0x37
 80031e2:	f000 fe06 	bl	8003df2 <HAL_NVIC_EnableIRQ>
}
 80031e6:	e02e      	b.n	8003246 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM10)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <HAL_TIM_Base_MspInit+0x144>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d116      	bne.n	8003220 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b17      	ldr	r3, [pc, #92]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	4a16      	ldr	r2, [pc, #88]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 80031fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003200:	6453      	str	r3, [r2, #68]	; 0x44
 8003202:	4b14      	ldr	r3, [pc, #80]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	2019      	movs	r0, #25
 8003214:	f000 fdd1 	bl	8003dba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003218:	2019      	movs	r0, #25
 800321a:	f000 fdea 	bl	8003df2 <HAL_NVIC_EnableIRQ>
}
 800321e:	e012      	b.n	8003246 <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM13)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a10      	ldr	r2, [pc, #64]	; (8003268 <HAL_TIM_Base_MspInit+0x148>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d10d      	bne.n	8003246 <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a08      	ldr	r2, [pc, #32]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 8003234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_TIM_Base_MspInit+0x134>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
}
 8003246:	bf00      	nop
 8003248:	3720      	adds	r7, #32
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40000400 	.word	0x40000400
 8003254:	40023800 	.word	0x40023800
 8003258:	40000800 	.word	0x40000800
 800325c:	40000c00 	.word	0x40000c00
 8003260:	40001400 	.word	0x40001400
 8003264:	40014400 	.word	0x40014400
 8003268:	40001c00 	.word	0x40001c00

0800326c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	; 0x30
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003274:	f107 031c 	add.w	r3, r7, #28
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	60da      	str	r2, [r3, #12]
 8003282:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a48      	ldr	r2, [pc, #288]	; (80033ac <HAL_TIM_MspPostInit+0x140>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d11e      	bne.n	80032cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800328e:	2300      	movs	r3, #0
 8003290:	61bb      	str	r3, [r7, #24]
 8003292:	4b47      	ldr	r3, [pc, #284]	; (80033b0 <HAL_TIM_MspPostInit+0x144>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a46      	ldr	r2, [pc, #280]	; (80033b0 <HAL_TIM_MspPostInit+0x144>)
 8003298:	f043 0302 	orr.w	r3, r3, #2
 800329c:	6313      	str	r3, [r2, #48]	; 0x30
 800329e:	4b44      	ldr	r3, [pc, #272]	; (80033b0 <HAL_TIM_MspPostInit+0x144>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_PMW1_Pin;
 80032aa:	2320      	movs	r3, #32
 80032ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ae:	2302      	movs	r3, #2
 80032b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032ba:	2302      	movs	r3, #2
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PMW1_GPIO_Port, &GPIO_InitStruct);
 80032be:	f107 031c 	add.w	r3, r7, #28
 80032c2:	4619      	mov	r1, r3
 80032c4:	483b      	ldr	r0, [pc, #236]	; (80033b4 <HAL_TIM_MspPostInit+0x148>)
 80032c6:	f001 f91f 	bl	8004508 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 80032ca:	e06a      	b.n	80033a2 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a39      	ldr	r2, [pc, #228]	; (80033b8 <HAL_TIM_MspPostInit+0x14c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d11e      	bne.n	8003314 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <HAL_TIM_MspPostInit+0x144>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a34      	ldr	r2, [pc, #208]	; (80033b0 <HAL_TIM_MspPostInit+0x144>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b32      	ldr	r3, [pc, #200]	; (80033b0 <HAL_TIM_MspPostInit+0x144>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DRV_PWM2_Pin;
 80032f2:	2340      	movs	r3, #64	; 0x40
 80032f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f6:	2302      	movs	r3, #2
 80032f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fe:	2300      	movs	r3, #0
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003302:	2302      	movs	r3, #2
 8003304:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PWM2_GPIO_Port, &GPIO_InitStruct);
 8003306:	f107 031c 	add.w	r3, r7, #28
 800330a:	4619      	mov	r1, r3
 800330c:	4829      	ldr	r0, [pc, #164]	; (80033b4 <HAL_TIM_MspPostInit+0x148>)
 800330e:	f001 f8fb 	bl	8004508 <HAL_GPIO_Init>
}
 8003312:	e046      	b.n	80033a2 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a28      	ldr	r2, [pc, #160]	; (80033bc <HAL_TIM_MspPostInit+0x150>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d11e      	bne.n	800335c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	4b23      	ldr	r3, [pc, #140]	; (80033b0 <HAL_TIM_MspPostInit+0x144>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	4a22      	ldr	r2, [pc, #136]	; (80033b0 <HAL_TIM_MspPostInit+0x144>)
 8003328:	f043 0301 	orr.w	r3, r3, #1
 800332c:	6313      	str	r3, [r2, #48]	; 0x30
 800332e:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_TIM_MspPostInit+0x144>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM2_Pin;
 800333a:	2301      	movs	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003346:	2300      	movs	r3, #0
 8003348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800334a:	2302      	movs	r3, #2
 800334c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM2_GPIO_Port, &GPIO_InitStruct);
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	4619      	mov	r1, r3
 8003354:	481a      	ldr	r0, [pc, #104]	; (80033c0 <HAL_TIM_MspPostInit+0x154>)
 8003356:	f001 f8d7 	bl	8004508 <HAL_GPIO_Init>
}
 800335a:	e022      	b.n	80033a2 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM13)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <HAL_TIM_MspPostInit+0x158>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d11d      	bne.n	80033a2 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_TIM_MspPostInit+0x144>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <HAL_TIM_MspPostInit+0x144>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6313      	str	r3, [r2, #48]	; 0x30
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <HAL_TIM_MspPostInit+0x144>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM_Pin;
 8003382:	2340      	movs	r3, #64	; 0x40
 8003384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003386:	2302      	movs	r3, #2
 8003388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003392:	2309      	movs	r3, #9
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_GPIO_Port, &GPIO_InitStruct);
 8003396:	f107 031c 	add.w	r3, r7, #28
 800339a:	4619      	mov	r1, r3
 800339c:	4808      	ldr	r0, [pc, #32]	; (80033c0 <HAL_TIM_MspPostInit+0x154>)
 800339e:	f001 f8b3 	bl	8004508 <HAL_GPIO_Init>
}
 80033a2:	bf00      	nop
 80033a4:	3730      	adds	r7, #48	; 0x30
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40023800 	.word	0x40023800
 80033b4:	40020400 	.word	0x40020400
 80033b8:	40000800 	.word	0x40000800
 80033bc:	40000c00 	.word	0x40000c00
 80033c0:	40020000 	.word	0x40020000
 80033c4:	40001c00 	.word	0x40001c00

080033c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b08c      	sub	sp, #48	; 0x30
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 031c 	add.w	r3, r7, #28
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a32      	ldr	r2, [pc, #200]	; (80034b0 <HAL_UART_MspInit+0xe8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d12c      	bne.n	8003444 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	61bb      	str	r3, [r7, #24]
 80033ee:	4b31      	ldr	r3, [pc, #196]	; (80034b4 <HAL_UART_MspInit+0xec>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a30      	ldr	r2, [pc, #192]	; (80034b4 <HAL_UART_MspInit+0xec>)
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
 80033fa:	4b2e      	ldr	r3, [pc, #184]	; (80034b4 <HAL_UART_MspInit+0xec>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <HAL_UART_MspInit+0xec>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <HAL_UART_MspInit+0xec>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_UART_MspInit+0xec>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003422:	230c      	movs	r3, #12
 8003424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342e:	2303      	movs	r3, #3
 8003430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003432:	2307      	movs	r3, #7
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003436:	f107 031c 	add.w	r3, r7, #28
 800343a:	4619      	mov	r1, r3
 800343c:	481e      	ldr	r0, [pc, #120]	; (80034b8 <HAL_UART_MspInit+0xf0>)
 800343e:	f001 f863 	bl	8004508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003442:	e030      	b.n	80034a6 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1c      	ldr	r2, [pc, #112]	; (80034bc <HAL_UART_MspInit+0xf4>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d12b      	bne.n	80034a6 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	4b18      	ldr	r3, [pc, #96]	; (80034b4 <HAL_UART_MspInit+0xec>)
 8003454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003456:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <HAL_UART_MspInit+0xec>)
 8003458:	f043 0320 	orr.w	r3, r3, #32
 800345c:	6453      	str	r3, [r2, #68]	; 0x44
 800345e:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <HAL_UART_MspInit+0xec>)
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <HAL_UART_MspInit+0xec>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a10      	ldr	r2, [pc, #64]	; (80034b4 <HAL_UART_MspInit+0xec>)
 8003474:	f043 0304 	orr.w	r3, r3, #4
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <HAL_UART_MspInit+0xec>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	60fb      	str	r3, [r7, #12]
 8003484:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|RADIO_RX_Pin;
 8003486:	23c0      	movs	r3, #192	; 0xc0
 8003488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348a:	2302      	movs	r3, #2
 800348c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348e:	2300      	movs	r3, #0
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003492:	2303      	movs	r3, #3
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003496:	2308      	movs	r3, #8
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800349a:	f107 031c 	add.w	r3, r7, #28
 800349e:	4619      	mov	r1, r3
 80034a0:	4807      	ldr	r0, [pc, #28]	; (80034c0 <HAL_UART_MspInit+0xf8>)
 80034a2:	f001 f831 	bl	8004508 <HAL_GPIO_Init>
}
 80034a6:	bf00      	nop
 80034a8:	3730      	adds	r7, #48	; 0x30
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40004400 	.word	0x40004400
 80034b4:	40023800 	.word	0x40023800
 80034b8:	40020000 	.word	0x40020000
 80034bc:	40011400 	.word	0x40011400
 80034c0:	40020800 	.word	0x40020800

080034c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <NMI_Handler+0x4>

080034ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034ce:	e7fe      	b.n	80034ce <HardFault_Handler+0x4>

080034d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <MemManage_Handler+0x4>

080034d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034da:	e7fe      	b.n	80034da <BusFault_Handler+0x4>

080034dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034e0:	e7fe      	b.n	80034e0 <UsageFault_Handler+0x4>

080034e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034f4:	bf00      	nop
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003502:	bf00      	nop
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003510:	f000 f8c2 	bl	8003698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003514:	bf00      	nop
 8003516:	bd80      	pop	{r7, pc}

08003518 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800351c:	4802      	ldr	r0, [pc, #8]	; (8003528 <DMA1_Stream5_IRQHandler+0x10>)
 800351e:	f000 fd89 	bl	8004034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000674 	.word	0x20000674

0800352c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003532:	f003 ffa1 	bl	8007478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	200005e4 	.word	0x200005e4

08003540 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <TIM2_IRQHandler+0x10>)
 8003546:	f003 ff97 	bl	8007478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	2000047c 	.word	0x2000047c

08003554 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <TIM5_IRQHandler+0x10>)
 800355a:	f003 ff8d 	bl	8007478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000554 	.word	0x20000554

08003568 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <TIM7_IRQHandler+0x10>)
 800356e:	f003 ff83 	bl	8007478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	2000059c 	.word	0x2000059c

0800357c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <SystemInit+0x20>)
 8003582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003586:	4a05      	ldr	r2, [pc, #20]	; (800359c <SystemInit+0x20>)
 8003588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800358c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000ed00 	.word	0xe000ed00

080035a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035a4:	480d      	ldr	r0, [pc, #52]	; (80035dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80035a6:	490e      	ldr	r1, [pc, #56]	; (80035e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80035a8:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035ac:	e002      	b.n	80035b4 <LoopCopyDataInit>

080035ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035b2:	3304      	adds	r3, #4

080035b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035b8:	d3f9      	bcc.n	80035ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035ba:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80035bc:	4c0b      	ldr	r4, [pc, #44]	; (80035ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80035be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035c0:	e001      	b.n	80035c6 <LoopFillZerobss>

080035c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035c4:	3204      	adds	r2, #4

080035c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035c8:	d3fb      	bcc.n	80035c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035ca:	f7ff ffd7 	bl	800357c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ce:	f00a ffb9 	bl	800e544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035d2:	f7fe f873 	bl	80016bc <main>
  bx  lr    
 80035d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80035d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80035dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035e0:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80035e4:	08012bc0 	.word	0x08012bc0
  ldr r2, =_sbss
 80035e8:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80035ec:	20001024 	.word	0x20001024

080035f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035f0:	e7fe      	b.n	80035f0 <ADC_IRQHandler>
	...

080035f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035f8:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <HAL_Init+0x40>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <HAL_Init+0x40>)
 80035fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003602:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_Init+0x40>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_Init+0x40>)
 800360a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800360e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <HAL_Init+0x40>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a07      	ldr	r2, [pc, #28]	; (8003634 <HAL_Init+0x40>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800361c:	2003      	movs	r0, #3
 800361e:	f000 fbc1 	bl	8003da4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003622:	2000      	movs	r0, #0
 8003624:	f000 f808 	bl	8003638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003628:	f7ff fab4 	bl	8002b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00

08003638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003640:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_InitTick+0x54>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_InitTick+0x58>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	4619      	mov	r1, r3
 800364a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800364e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fbd9 	bl	8003e0e <HAL_SYSTICK_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e00e      	b.n	8003684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b0f      	cmp	r3, #15
 800366a:	d80a      	bhi.n	8003682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800366c:	2200      	movs	r2, #0
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	f000 fba1 	bl	8003dba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003678:	4a06      	ldr	r2, [pc, #24]	; (8003694 <HAL_InitTick+0x5c>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000008 	.word	0x20000008
 8003690:	20000010 	.word	0x20000010
 8003694:	2000000c 	.word	0x2000000c

08003698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_IncTick+0x20>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_IncTick+0x24>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4413      	add	r3, r2
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <HAL_IncTick+0x24>)
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000010 	.word	0x20000010
 80036bc:	20000f0c 	.word	0x20000f0c

080036c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  return uwTick;
 80036c4:	4b03      	ldr	r3, [pc, #12]	; (80036d4 <HAL_GetTick+0x14>)
 80036c6:	681b      	ldr	r3, [r3, #0]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	20000f0c 	.word	0x20000f0c

080036d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036e0:	f7ff ffee 	bl	80036c0 <HAL_GetTick>
 80036e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d005      	beq.n	80036fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <HAL_Delay+0x44>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036fe:	bf00      	nop
 8003700:	f7ff ffde 	bl	80036c0 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	429a      	cmp	r2, r3
 800370e:	d8f7      	bhi.n	8003700 <HAL_Delay+0x28>
  {
  }
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000010 	.word	0x20000010

08003720 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e033      	b.n	800379e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fa50 	bl	8002be4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	2b00      	cmp	r3, #0
 800375c:	d118      	bne.n	8003790 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003766:	f023 0302 	bic.w	r3, r3, #2
 800376a:	f043 0202 	orr.w	r2, r3, #2
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f94a 	bl	8003a0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f023 0303 	bic.w	r3, r3, #3
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	641a      	str	r2, [r3, #64]	; 0x40
 800378e:	e001      	b.n	8003794 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
	...

080037a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037b2:	2300      	movs	r3, #0
 80037b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x1c>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e113      	b.n	80039ec <HAL_ADC_ConfigChannel+0x244>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b09      	cmp	r3, #9
 80037d2:	d925      	bls.n	8003820 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68d9      	ldr	r1, [r3, #12]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	4613      	mov	r3, r2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	3b1e      	subs	r3, #30
 80037ea:	2207      	movs	r2, #7
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43da      	mvns	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	400a      	ands	r2, r1
 80037f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68d9      	ldr	r1, [r3, #12]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	4618      	mov	r0, r3
 800380c:	4603      	mov	r3, r0
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4403      	add	r3, r0
 8003812:	3b1e      	subs	r3, #30
 8003814:	409a      	lsls	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	e022      	b.n	8003866 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6919      	ldr	r1, [r3, #16]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	2207      	movs	r2, #7
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	400a      	ands	r2, r1
 8003842:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6919      	ldr	r1, [r3, #16]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	4618      	mov	r0, r3
 8003856:	4603      	mov	r3, r0
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4403      	add	r3, r0
 800385c:	409a      	lsls	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b06      	cmp	r3, #6
 800386c:	d824      	bhi.n	80038b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	3b05      	subs	r3, #5
 8003880:	221f      	movs	r2, #31
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43da      	mvns	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	400a      	ands	r2, r1
 800388e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	b29b      	uxth	r3, r3
 800389c:	4618      	mov	r0, r3
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	3b05      	subs	r3, #5
 80038aa:	fa00 f203 	lsl.w	r2, r0, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	635a      	str	r2, [r3, #52]	; 0x34
 80038b6:	e04c      	b.n	8003952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b0c      	cmp	r3, #12
 80038be:	d824      	bhi.n	800390a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	3b23      	subs	r3, #35	; 0x23
 80038d2:	221f      	movs	r2, #31
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43da      	mvns	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	400a      	ands	r2, r1
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	4618      	mov	r0, r3
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	3b23      	subs	r3, #35	; 0x23
 80038fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
 8003908:	e023      	b.n	8003952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	3b41      	subs	r3, #65	; 0x41
 800391c:	221f      	movs	r2, #31
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43da      	mvns	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	400a      	ands	r2, r1
 800392a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	4618      	mov	r0, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	3b41      	subs	r3, #65	; 0x41
 8003946:	fa00 f203 	lsl.w	r2, r0, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003952:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <HAL_ADC_ConfigChannel+0x250>)
 8003954:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a28      	ldr	r2, [pc, #160]	; (80039fc <HAL_ADC_ConfigChannel+0x254>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d10f      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x1d8>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b12      	cmp	r3, #18
 8003966:	d10b      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1d      	ldr	r2, [pc, #116]	; (80039fc <HAL_ADC_ConfigChannel+0x254>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d12b      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x23a>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1c      	ldr	r2, [pc, #112]	; (8003a00 <HAL_ADC_ConfigChannel+0x258>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <HAL_ADC_ConfigChannel+0x1f4>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b11      	cmp	r3, #17
 800399a:	d122      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a11      	ldr	r2, [pc, #68]	; (8003a00 <HAL_ADC_ConfigChannel+0x258>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d111      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039be:	4b11      	ldr	r3, [pc, #68]	; (8003a04 <HAL_ADC_ConfigChannel+0x25c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a11      	ldr	r2, [pc, #68]	; (8003a08 <HAL_ADC_ConfigChannel+0x260>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	0c9a      	lsrs	r2, r3, #18
 80039ca:	4613      	mov	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039d4:	e002      	b.n	80039dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	3b01      	subs	r3, #1
 80039da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f9      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40012300 	.word	0x40012300
 80039fc:	40012000 	.word	0x40012000
 8003a00:	10000012 	.word	0x10000012
 8003a04:	20000008 	.word	0x20000008
 8003a08:	431bde83 	.word	0x431bde83

08003a0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a14:	4b79      	ldr	r3, [pc, #484]	; (8003bfc <ADC_Init+0x1f0>)
 8003a16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	021a      	lsls	r2, r3, #8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689a      	ldr	r2, [r3, #8]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6899      	ldr	r1, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9e:	4a58      	ldr	r2, [pc, #352]	; (8003c00 <ADC_Init+0x1f4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d022      	beq.n	8003aea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ab2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6899      	ldr	r1, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	e00f      	b.n	8003b0a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0202 	bic.w	r2, r2, #2
 8003b18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6899      	ldr	r1, [r3, #8]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7e1b      	ldrb	r3, [r3, #24]
 8003b24:	005a      	lsls	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01b      	beq.n	8003b70 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6859      	ldr	r1, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	3b01      	subs	r3, #1
 8003b64:	035a      	lsls	r2, r3, #13
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	e007      	b.n	8003b80 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	051a      	lsls	r2, r3, #20
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6899      	ldr	r1, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bc2:	025a      	lsls	r2, r3, #9
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	029a      	lsls	r2, r3, #10
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]
}
 8003bf0:	bf00      	nop
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	40012300 	.word	0x40012300
 8003c00:	0f000001 	.word	0x0f000001

08003c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c14:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c1a:	68ba      	ldr	r2, [r7, #8]
 8003c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c20:	4013      	ands	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c36:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <__NVIC_SetPriorityGrouping+0x44>)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	60d3      	str	r3, [r2, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c50:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <__NVIC_GetPriorityGrouping+0x18>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	f003 0307 	and.w	r3, r3, #7
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	db0b      	blt.n	8003c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	f003 021f 	and.w	r2, r3, #31
 8003c80:	4907      	ldr	r1, [pc, #28]	; (8003ca0 <__NVIC_EnableIRQ+0x38>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2001      	movs	r0, #1
 8003c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	e000e100 	.word	0xe000e100

08003ca4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	6039      	str	r1, [r7, #0]
 8003cae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	db0a      	blt.n	8003cce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	490c      	ldr	r1, [pc, #48]	; (8003cf0 <__NVIC_SetPriority+0x4c>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	0112      	lsls	r2, r2, #4
 8003cc4:	b2d2      	uxtb	r2, r2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ccc:	e00a      	b.n	8003ce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4908      	ldr	r1, [pc, #32]	; (8003cf4 <__NVIC_SetPriority+0x50>)
 8003cd4:	79fb      	ldrb	r3, [r7, #7]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	3b04      	subs	r3, #4
 8003cdc:	0112      	lsls	r2, r2, #4
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	761a      	strb	r2, [r3, #24]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000e100 	.word	0xe000e100
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f1c3 0307 	rsb	r3, r3, #7
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	bf28      	it	cs
 8003d16:	2304      	movcs	r3, #4
 8003d18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d902      	bls.n	8003d28 <NVIC_EncodePriority+0x30>
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3b03      	subs	r3, #3
 8003d26:	e000      	b.n	8003d2a <NVIC_EncodePriority+0x32>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d40:	f04f 31ff 	mov.w	r1, #4294967295
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4a:	43d9      	mvns	r1, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	4313      	orrs	r3, r2
         );
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3724      	adds	r7, #36	; 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
	...

08003d60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d70:	d301      	bcc.n	8003d76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d72:	2301      	movs	r3, #1
 8003d74:	e00f      	b.n	8003d96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d76:	4a0a      	ldr	r2, [pc, #40]	; (8003da0 <SysTick_Config+0x40>)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7e:	210f      	movs	r1, #15
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295
 8003d84:	f7ff ff8e 	bl	8003ca4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <SysTick_Config+0x40>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8e:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <SysTick_Config+0x40>)
 8003d90:	2207      	movs	r2, #7
 8003d92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	e000e010 	.word	0xe000e010

08003da4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f7ff ff29 	bl	8003c04 <__NVIC_SetPriorityGrouping>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dcc:	f7ff ff3e 	bl	8003c4c <__NVIC_GetPriorityGrouping>
 8003dd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	6978      	ldr	r0, [r7, #20]
 8003dd8:	f7ff ff8e 	bl	8003cf8 <NVIC_EncodePriority>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003de2:	4611      	mov	r1, r2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff ff5d 	bl	8003ca4 <__NVIC_SetPriority>
}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	4603      	mov	r3, r0
 8003dfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ff31 	bl	8003c68 <__NVIC_EnableIRQ>
}
 8003e06:	bf00      	nop
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b082      	sub	sp, #8
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7ff ffa2 	bl	8003d60 <SysTick_Config>
 8003e1c:	4603      	mov	r3, r0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
	...

08003e28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e34:	f7ff fc44 	bl	80036c0 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d101      	bne.n	8003e44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e099      	b.n	8003f78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0201 	bic.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e64:	e00f      	b.n	8003e86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e66:	f7ff fc2b 	bl	80036c0 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	d908      	bls.n	8003e86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2220      	movs	r2, #32
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2203      	movs	r2, #3
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e078      	b.n	8003f78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e8      	bne.n	8003e66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4b38      	ldr	r3, [pc, #224]	; (8003f80 <HAL_DMA_Init+0x158>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d107      	bne.n	8003ef0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0307 	bic.w	r3, r3, #7
 8003f06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d117      	bne.n	8003f4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00e      	beq.n	8003f4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 fa6f 	bl	8004410 <DMA_CheckFifoParam>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2240      	movs	r2, #64	; 0x40
 8003f3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f46:	2301      	movs	r3, #1
 8003f48:	e016      	b.n	8003f78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa26 	bl	80043a4 <DMA_CalcBaseAndBitshift>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	223f      	movs	r2, #63	; 0x3f
 8003f62:	409a      	lsls	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	f010803f 	.word	0xf010803f

08003f84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_DMA_Start_IT+0x26>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e040      	b.n	800402c <HAL_DMA_Start_IT+0xa8>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d12f      	bne.n	800401e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68b9      	ldr	r1, [r7, #8]
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f9b8 	bl	8004348 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	223f      	movs	r2, #63	; 0x3f
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0216 	orr.w	r2, r2, #22
 8003ff2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0208 	orr.w	r2, r2, #8
 800400a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e005      	b.n	800402a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004026:	2302      	movs	r3, #2
 8004028:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800402a:	7dfb      	ldrb	r3, [r7, #23]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004040:	4b8e      	ldr	r3, [pc, #568]	; (800427c <HAL_DMA_IRQHandler+0x248>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a8e      	ldr	r2, [pc, #568]	; (8004280 <HAL_DMA_IRQHandler+0x24c>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	0a9b      	lsrs	r3, r3, #10
 800404c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004052:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405e:	2208      	movs	r2, #8
 8004060:	409a      	lsls	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4013      	ands	r3, r2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d01a      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	d013      	beq.n	80040a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408c:	2208      	movs	r2, #8
 800408e:	409a      	lsls	r2, r3
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	f043 0201 	orr.w	r2, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	2201      	movs	r2, #1
 80040a6:	409a      	lsls	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d012      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00b      	beq.n	80040d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c2:	2201      	movs	r2, #1
 80040c4:	409a      	lsls	r2, r3
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	f043 0202 	orr.w	r2, r3, #2
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040da:	2204      	movs	r2, #4
 80040dc:	409a      	lsls	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4013      	ands	r3, r2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d012      	beq.n	800410c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	2204      	movs	r2, #4
 80040fa:	409a      	lsls	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	f043 0204 	orr.w	r2, r3, #4
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	2210      	movs	r2, #16
 8004112:	409a      	lsls	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4013      	ands	r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d043      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d03c      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412e:	2210      	movs	r2, #16
 8004130:	409a      	lsls	r2, r3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d018      	beq.n	8004176 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d108      	bne.n	8004164 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d024      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
 8004162:	e01f      	b.n	80041a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01b      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
 8004174:	e016      	b.n	80041a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0208 	bic.w	r2, r2, #8
 8004192:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a8:	2220      	movs	r2, #32
 80041aa:	409a      	lsls	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 808f 	beq.w	80042d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 8087 	beq.w	80042d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ca:	2220      	movs	r2, #32
 80041cc:	409a      	lsls	r2, r3
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b05      	cmp	r3, #5
 80041dc:	d136      	bne.n	800424c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0216 	bic.w	r2, r2, #22
 80041ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_DMA_IRQHandler+0x1da>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0208 	bic.w	r2, r2, #8
 800421c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004222:	223f      	movs	r2, #63	; 0x3f
 8004224:	409a      	lsls	r2, r3
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423e:	2b00      	cmp	r3, #0
 8004240:	d07e      	beq.n	8004340 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	4798      	blx	r3
        }
        return;
 800424a:	e079      	b.n	8004340 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d01d      	beq.n	8004296 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10d      	bne.n	8004284 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	2b00      	cmp	r3, #0
 800426e:	d031      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	4798      	blx	r3
 8004278:	e02c      	b.n	80042d4 <HAL_DMA_IRQHandler+0x2a0>
 800427a:	bf00      	nop
 800427c:	20000008 	.word	0x20000008
 8004280:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d023      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
 8004294:	e01e      	b.n	80042d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10f      	bne.n	80042c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0210 	bic.w	r2, r2, #16
 80042b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d032      	beq.n	8004342 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d022      	beq.n	800432e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2205      	movs	r2, #5
 80042ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	3301      	adds	r3, #1
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	429a      	cmp	r2, r3
 800430a:	d307      	bcc.n	800431c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f2      	bne.n	8004300 <HAL_DMA_IRQHandler+0x2cc>
 800431a:	e000      	b.n	800431e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800431c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4798      	blx	r3
 800433e:	e000      	b.n	8004342 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004340:	bf00      	nop
    }
  }
}
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004364:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b40      	cmp	r3, #64	; 0x40
 8004374:	d108      	bne.n	8004388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004386:	e007      	b.n	8004398 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	60da      	str	r2, [r3, #12]
}
 8004398:	bf00      	nop
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	3b10      	subs	r3, #16
 80043b4:	4a14      	ldr	r2, [pc, #80]	; (8004408 <DMA_CalcBaseAndBitshift+0x64>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	091b      	lsrs	r3, r3, #4
 80043bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043be:	4a13      	ldr	r2, [pc, #76]	; (800440c <DMA_CalcBaseAndBitshift+0x68>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d909      	bls.n	80043e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043da:	f023 0303 	bic.w	r3, r3, #3
 80043de:	1d1a      	adds	r2, r3, #4
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	659a      	str	r2, [r3, #88]	; 0x58
 80043e4:	e007      	b.n	80043f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043ee:	f023 0303 	bic.w	r3, r3, #3
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	aaaaaaab 	.word	0xaaaaaaab
 800440c:	080125b4 	.word	0x080125b4

08004410 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004418:	2300      	movs	r3, #0
 800441a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d11f      	bne.n	800446a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b03      	cmp	r3, #3
 800442e:	d856      	bhi.n	80044de <DMA_CheckFifoParam+0xce>
 8004430:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <DMA_CheckFifoParam+0x28>)
 8004432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004436:	bf00      	nop
 8004438:	08004449 	.word	0x08004449
 800443c:	0800445b 	.word	0x0800445b
 8004440:	08004449 	.word	0x08004449
 8004444:	080044df 	.word	0x080044df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d046      	beq.n	80044e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004458:	e043      	b.n	80044e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004462:	d140      	bne.n	80044e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004468:	e03d      	b.n	80044e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004472:	d121      	bne.n	80044b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b03      	cmp	r3, #3
 8004478:	d837      	bhi.n	80044ea <DMA_CheckFifoParam+0xda>
 800447a:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <DMA_CheckFifoParam+0x70>)
 800447c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004480:	08004491 	.word	0x08004491
 8004484:	08004497 	.word	0x08004497
 8004488:	08004491 	.word	0x08004491
 800448c:	080044a9 	.word	0x080044a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	73fb      	strb	r3, [r7, #15]
      break;
 8004494:	e030      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d025      	beq.n	80044ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a6:	e022      	b.n	80044ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044b0:	d11f      	bne.n	80044f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044b6:	e01c      	b.n	80044f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d903      	bls.n	80044c6 <DMA_CheckFifoParam+0xb6>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d003      	beq.n	80044cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044c4:	e018      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
      break;
 80044ca:	e015      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00e      	beq.n	80044f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
      break;
 80044dc:	e00b      	b.n	80044f6 <DMA_CheckFifoParam+0xe6>
      break;
 80044de:	bf00      	nop
 80044e0:	e00a      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      break;
 80044e2:	bf00      	nop
 80044e4:	e008      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      break;
 80044e6:	bf00      	nop
 80044e8:	e006      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      break;
 80044ea:	bf00      	nop
 80044ec:	e004      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      break;
 80044ee:	bf00      	nop
 80044f0:	e002      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80044f2:	bf00      	nop
 80044f4:	e000      	b.n	80044f8 <DMA_CheckFifoParam+0xe8>
      break;
 80044f6:	bf00      	nop
    }
  } 
  
  return status; 
 80044f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop

08004508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004508:	b480      	push	{r7}
 800450a:	b089      	sub	sp, #36	; 0x24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004516:	2300      	movs	r3, #0
 8004518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800451a:	2300      	movs	r3, #0
 800451c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	e165      	b.n	80047f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004524:	2201      	movs	r2, #1
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	429a      	cmp	r2, r3
 800453e:	f040 8154 	bne.w	80047ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b01      	cmp	r3, #1
 800454c:	d005      	beq.n	800455a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004556:	2b02      	cmp	r3, #2
 8004558:	d130      	bne.n	80045bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	2203      	movs	r2, #3
 8004566:	fa02 f303 	lsl.w	r3, r2, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	fa02 f303 	lsl.w	r3, r2, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4313      	orrs	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004590:	2201      	movs	r2, #1
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 0201 	and.w	r2, r3, #1
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 0303 	and.w	r3, r3, #3
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d017      	beq.n	80045f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	2203      	movs	r2, #3
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	43db      	mvns	r3, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d123      	bne.n	800464c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	08da      	lsrs	r2, r3, #3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3208      	adds	r2, #8
 800460c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	220f      	movs	r2, #15
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4013      	ands	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4313      	orrs	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	08da      	lsrs	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3208      	adds	r2, #8
 8004646:	69b9      	ldr	r1, [r7, #24]
 8004648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	2203      	movs	r2, #3
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	43db      	mvns	r3, r3
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	4013      	ands	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 0203 	and.w	r2, r3, #3
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	4313      	orrs	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80ae 	beq.w	80047ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	4b5d      	ldr	r3, [pc, #372]	; (8004808 <HAL_GPIO_Init+0x300>)
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	4a5c      	ldr	r2, [pc, #368]	; (8004808 <HAL_GPIO_Init+0x300>)
 8004698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800469c:	6453      	str	r3, [r2, #68]	; 0x44
 800469e:	4b5a      	ldr	r3, [pc, #360]	; (8004808 <HAL_GPIO_Init+0x300>)
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046a6:	60fb      	str	r3, [r7, #12]
 80046a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046aa:	4a58      	ldr	r2, [pc, #352]	; (800480c <HAL_GPIO_Init+0x304>)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	089b      	lsrs	r3, r3, #2
 80046b0:	3302      	adds	r3, #2
 80046b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	220f      	movs	r2, #15
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43db      	mvns	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a4f      	ldr	r2, [pc, #316]	; (8004810 <HAL_GPIO_Init+0x308>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d025      	beq.n	8004722 <HAL_GPIO_Init+0x21a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a4e      	ldr	r2, [pc, #312]	; (8004814 <HAL_GPIO_Init+0x30c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d01f      	beq.n	800471e <HAL_GPIO_Init+0x216>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a4d      	ldr	r2, [pc, #308]	; (8004818 <HAL_GPIO_Init+0x310>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d019      	beq.n	800471a <HAL_GPIO_Init+0x212>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a4c      	ldr	r2, [pc, #304]	; (800481c <HAL_GPIO_Init+0x314>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_GPIO_Init+0x20e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a4b      	ldr	r2, [pc, #300]	; (8004820 <HAL_GPIO_Init+0x318>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00d      	beq.n	8004712 <HAL_GPIO_Init+0x20a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a4a      	ldr	r2, [pc, #296]	; (8004824 <HAL_GPIO_Init+0x31c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d007      	beq.n	800470e <HAL_GPIO_Init+0x206>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a49      	ldr	r2, [pc, #292]	; (8004828 <HAL_GPIO_Init+0x320>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d101      	bne.n	800470a <HAL_GPIO_Init+0x202>
 8004706:	2306      	movs	r3, #6
 8004708:	e00c      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 800470a:	2307      	movs	r3, #7
 800470c:	e00a      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 800470e:	2305      	movs	r3, #5
 8004710:	e008      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 8004712:	2304      	movs	r3, #4
 8004714:	e006      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 8004716:	2303      	movs	r3, #3
 8004718:	e004      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 800471a:	2302      	movs	r3, #2
 800471c:	e002      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 800471e:	2301      	movs	r3, #1
 8004720:	e000      	b.n	8004724 <HAL_GPIO_Init+0x21c>
 8004722:	2300      	movs	r3, #0
 8004724:	69fa      	ldr	r2, [r7, #28]
 8004726:	f002 0203 	and.w	r2, r2, #3
 800472a:	0092      	lsls	r2, r2, #2
 800472c:	4093      	lsls	r3, r2
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004734:	4935      	ldr	r1, [pc, #212]	; (800480c <HAL_GPIO_Init+0x304>)
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	089b      	lsrs	r3, r3, #2
 800473a:	3302      	adds	r3, #2
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004742:	4b3a      	ldr	r3, [pc, #232]	; (800482c <HAL_GPIO_Init+0x324>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	43db      	mvns	r3, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4013      	ands	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004766:	4a31      	ldr	r2, [pc, #196]	; (800482c <HAL_GPIO_Init+0x324>)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800476c:	4b2f      	ldr	r3, [pc, #188]	; (800482c <HAL_GPIO_Init+0x324>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	43db      	mvns	r3, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4013      	ands	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004790:	4a26      	ldr	r2, [pc, #152]	; (800482c <HAL_GPIO_Init+0x324>)
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004796:	4b25      	ldr	r3, [pc, #148]	; (800482c <HAL_GPIO_Init+0x324>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	43db      	mvns	r3, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4013      	ands	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047ba:	4a1c      	ldr	r2, [pc, #112]	; (800482c <HAL_GPIO_Init+0x324>)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047c0:	4b1a      	ldr	r3, [pc, #104]	; (800482c <HAL_GPIO_Init+0x324>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	43db      	mvns	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	4013      	ands	r3, r2
 80047ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <HAL_GPIO_Init+0x324>)
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	3301      	adds	r3, #1
 80047ee:	61fb      	str	r3, [r7, #28]
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b0f      	cmp	r3, #15
 80047f4:	f67f ae96 	bls.w	8004524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	3724      	adds	r7, #36	; 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800
 800480c:	40013800 	.word	0x40013800
 8004810:	40020000 	.word	0x40020000
 8004814:	40020400 	.word	0x40020400
 8004818:	40020800 	.word	0x40020800
 800481c:	40020c00 	.word	0x40020c00
 8004820:	40021000 	.word	0x40021000
 8004824:	40021400 	.word	0x40021400
 8004828:	40021800 	.word	0x40021800
 800482c:	40013c00 	.word	0x40013c00

08004830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	807b      	strh	r3, [r7, #2]
 800483c:	4613      	mov	r3, r2
 800483e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004840:	787b      	ldrb	r3, [r7, #1]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004846:	887a      	ldrh	r2, [r7, #2]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800484c:	e003      	b.n	8004856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800484e:	887b      	ldrh	r3, [r7, #2]
 8004850:	041a      	lsls	r2, r3, #16
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	619a      	str	r2, [r3, #24]
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
	...

08004864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e12b      	b.n	8004ace <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fe f9ee 	bl	8002c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2224      	movs	r2, #36	; 0x24
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0201 	bic.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80048c8:	f001 f8a4 	bl	8005a14 <HAL_RCC_GetPCLK1Freq>
 80048cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	4a81      	ldr	r2, [pc, #516]	; (8004ad8 <HAL_I2C_Init+0x274>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d807      	bhi.n	80048e8 <HAL_I2C_Init+0x84>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a80      	ldr	r2, [pc, #512]	; (8004adc <HAL_I2C_Init+0x278>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	bf94      	ite	ls
 80048e0:	2301      	movls	r3, #1
 80048e2:	2300      	movhi	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	e006      	b.n	80048f6 <HAL_I2C_Init+0x92>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4a7d      	ldr	r2, [pc, #500]	; (8004ae0 <HAL_I2C_Init+0x27c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	bf94      	ite	ls
 80048f0:	2301      	movls	r3, #1
 80048f2:	2300      	movhi	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e0e7      	b.n	8004ace <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4a78      	ldr	r2, [pc, #480]	; (8004ae4 <HAL_I2C_Init+0x280>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	0c9b      	lsrs	r3, r3, #18
 8004908:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	430a      	orrs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4a6a      	ldr	r2, [pc, #424]	; (8004ad8 <HAL_I2C_Init+0x274>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d802      	bhi.n	8004938 <HAL_I2C_Init+0xd4>
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	3301      	adds	r3, #1
 8004936:	e009      	b.n	800494c <HAL_I2C_Init+0xe8>
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800493e:	fb02 f303 	mul.w	r3, r2, r3
 8004942:	4a69      	ldr	r2, [pc, #420]	; (8004ae8 <HAL_I2C_Init+0x284>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	099b      	lsrs	r3, r3, #6
 800494a:	3301      	adds	r3, #1
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6812      	ldr	r2, [r2, #0]
 8004950:	430b      	orrs	r3, r1
 8004952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800495e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	495c      	ldr	r1, [pc, #368]	; (8004ad8 <HAL_I2C_Init+0x274>)
 8004968:	428b      	cmp	r3, r1
 800496a:	d819      	bhi.n	80049a0 <HAL_I2C_Init+0x13c>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	1e59      	subs	r1, r3, #1
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	fbb1 f3f3 	udiv	r3, r1, r3
 800497a:	1c59      	adds	r1, r3, #1
 800497c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004980:	400b      	ands	r3, r1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_I2C_Init+0x138>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	1e59      	subs	r1, r3, #1
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	fbb1 f3f3 	udiv	r3, r1, r3
 8004994:	3301      	adds	r3, #1
 8004996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800499a:	e051      	b.n	8004a40 <HAL_I2C_Init+0x1dc>
 800499c:	2304      	movs	r3, #4
 800499e:	e04f      	b.n	8004a40 <HAL_I2C_Init+0x1dc>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d111      	bne.n	80049cc <HAL_I2C_Init+0x168>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1e58      	subs	r0, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	005b      	lsls	r3, r3, #1
 80049b4:	440b      	add	r3, r1
 80049b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80049ba:	3301      	adds	r3, #1
 80049bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e012      	b.n	80049f2 <HAL_I2C_Init+0x18e>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	1e58      	subs	r0, r3, #1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6859      	ldr	r1, [r3, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	0099      	lsls	r1, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e2:	3301      	adds	r3, #1
 80049e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_I2C_Init+0x196>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e022      	b.n	8004a40 <HAL_I2C_Init+0x1dc>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10e      	bne.n	8004a20 <HAL_I2C_Init+0x1bc>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1e58      	subs	r0, r3, #1
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6859      	ldr	r1, [r3, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	440b      	add	r3, r1
 8004a10:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a14:	3301      	adds	r3, #1
 8004a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a1e:	e00f      	b.n	8004a40 <HAL_I2C_Init+0x1dc>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1e58      	subs	r0, r3, #1
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6859      	ldr	r1, [r3, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	0099      	lsls	r1, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a36:	3301      	adds	r3, #1
 8004a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	6809      	ldr	r1, [r1, #0]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69da      	ldr	r2, [r3, #28]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004a6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	6911      	ldr	r1, [r2, #16]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68d2      	ldr	r2, [r2, #12]
 8004a7a:	4311      	orrs	r1, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	430b      	orrs	r3, r1
 8004a82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695a      	ldr	r2, [r3, #20]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	000186a0 	.word	0x000186a0
 8004adc:	001e847f 	.word	0x001e847f
 8004ae0:	003d08ff 	.word	0x003d08ff
 8004ae4:	431bde83 	.word	0x431bde83
 8004ae8:	10624dd3 	.word	0x10624dd3

08004aec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b088      	sub	sp, #32
 8004af0:	af02      	add	r7, sp, #8
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	461a      	mov	r2, r3
 8004af8:	460b      	mov	r3, r1
 8004afa:	817b      	strh	r3, [r7, #10]
 8004afc:	4613      	mov	r3, r2
 8004afe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b00:	f7fe fdde 	bl	80036c0 <HAL_GetTick>
 8004b04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	f040 80e0 	bne.w	8004cd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	2319      	movs	r3, #25
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	4970      	ldr	r1, [pc, #448]	; (8004ce0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fc58 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e0d3      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_I2C_Master_Transmit+0x50>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e0cc      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0x1ea>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d007      	beq.n	8004b62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0201 	orr.w	r2, r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2221      	movs	r2, #33	; 0x21
 8004b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2210      	movs	r2, #16
 8004b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	893a      	ldrh	r2, [r7, #8]
 8004b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4a50      	ldr	r2, [pc, #320]	; (8004ce4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004ba2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ba4:	8979      	ldrh	r1, [r7, #10]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6a3a      	ldr	r2, [r7, #32]
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 fac2 	bl	8005134 <I2C_MasterRequestWrite>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e08d      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004bd0:	e066      	b.n	8004ca0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	6a39      	ldr	r1, [r7, #32]
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f000 fcd2 	bl	8005580 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00d      	beq.n	8004bfe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d107      	bne.n	8004bfa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e06b      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c26:	3b01      	subs	r3, #1
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d11b      	bne.n	8004c74 <HAL_I2C_Master_Transmit+0x188>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d017      	beq.n	8004c74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	781a      	ldrb	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	6a39      	ldr	r1, [r7, #32]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fcc2 	bl	8005602 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00d      	beq.n	8004ca0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d107      	bne.n	8004c9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e01a      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d194      	bne.n	8004bd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e000      	b.n	8004cd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004cd4:	2302      	movs	r3, #2
  }
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	00100002 	.word	0x00100002
 8004ce4:	ffff0000 	.word	0xffff0000

08004ce8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08c      	sub	sp, #48	; 0x30
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	817b      	strh	r3, [r7, #10]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cfc:	f7fe fce0 	bl	80036c0 <HAL_GetTick>
 8004d00:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b20      	cmp	r3, #32
 8004d0c:	f040 820b 	bne.w	8005126 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2319      	movs	r3, #25
 8004d16:	2201      	movs	r2, #1
 8004d18:	497c      	ldr	r1, [pc, #496]	; (8004f0c <HAL_I2C_Master_Receive+0x224>)
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f000 fb5a 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004d26:	2302      	movs	r3, #2
 8004d28:	e1fe      	b.n	8005128 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_I2C_Master_Receive+0x50>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e1f7      	b.n	8005128 <HAL_I2C_Master_Receive+0x440>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d007      	beq.n	8004d5e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2222      	movs	r2, #34	; 0x22
 8004d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2210      	movs	r2, #16
 8004d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	893a      	ldrh	r2, [r7, #8]
 8004d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4a5c      	ldr	r2, [pc, #368]	; (8004f10 <HAL_I2C_Master_Receive+0x228>)
 8004d9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004da0:	8979      	ldrh	r1, [r7, #10]
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fa46 	bl	8005238 <I2C_MasterRequestRead>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e1b8      	b.n	8005128 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d113      	bne.n	8004de6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	623b      	str	r3, [r7, #32]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	623b      	str	r3, [r7, #32]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	623b      	str	r3, [r7, #32]
 8004dd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e18c      	b.n	8005100 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d11b      	bne.n	8004e26 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	61fb      	str	r3, [r7, #28]
 8004e12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e16c      	b.n	8005100 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d11b      	bne.n	8004e66 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	e14c      	b.n	8005100 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e8c:	e138      	b.n	8005100 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	f200 80f1 	bhi.w	800507a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d123      	bne.n	8004ee8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 fbed 	bl	8005684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e139      	b.n	8005128 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	1c5a      	adds	r2, r3, #1
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ee6:	e10b      	b.n	8005100 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d14e      	bne.n	8004f8e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	4906      	ldr	r1, [pc, #24]	; (8004f14 <HAL_I2C_Master_Receive+0x22c>)
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 fa6a 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e10e      	b.n	8005128 <HAL_I2C_Master_Receive+0x440>
 8004f0a:	bf00      	nop
 8004f0c:	00100002 	.word	0x00100002
 8004f10:	ffff0000 	.word	0xffff0000
 8004f14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b01      	subs	r3, #1
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	691a      	ldr	r2, [r3, #16]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f76:	3b01      	subs	r3, #1
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f8c:	e0b8      	b.n	8005100 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	2200      	movs	r2, #0
 8004f96:	4966      	ldr	r1, [pc, #408]	; (8005130 <HAL_I2C_Master_Receive+0x448>)
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fa1b 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0bf      	b.n	8005128 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	494f      	ldr	r1, [pc, #316]	; (8005130 <HAL_I2C_Master_Receive+0x448>)
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 f9ed 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e091      	b.n	8005128 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691a      	ldr	r2, [r3, #16]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691a      	ldr	r2, [r3, #16]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005062:	3b01      	subs	r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005078:	e042      	b.n	8005100 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 fb00 	bl	8005684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e04c      	b.n	8005128 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	b2d2      	uxtb	r2, r2
 800509a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050aa:	3b01      	subs	r3, #1
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b04      	cmp	r3, #4
 80050cc:	d118      	bne.n	8005100 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	b2d2      	uxtb	r2, r2
 80050da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	3b01      	subs	r3, #1
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	2b00      	cmp	r3, #0
 8005106:	f47f aec2 	bne.w	8004e8e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	e000      	b.n	8005128 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005126:	2302      	movs	r3, #2
  }
}
 8005128:	4618      	mov	r0, r3
 800512a:	3728      	adds	r7, #40	; 0x28
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	00010004 	.word	0x00010004

08005134 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	460b      	mov	r3, r1
 8005142:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b08      	cmp	r3, #8
 800514e:	d006      	beq.n	800515e <I2C_MasterRequestWrite+0x2a>
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d003      	beq.n	800515e <I2C_MasterRequestWrite+0x2a>
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800515c:	d108      	bne.n	8005170 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800516c:	601a      	str	r2, [r3, #0]
 800516e:	e00b      	b.n	8005188 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	2b12      	cmp	r3, #18
 8005176:	d107      	bne.n	8005188 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005186:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005194:	68f8      	ldr	r0, [r7, #12]
 8005196:	f000 f91d 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00d      	beq.n	80051bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051ae:	d103      	bne.n	80051b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e035      	b.n	8005228 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051c4:	d108      	bne.n	80051d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051c6:	897b      	ldrh	r3, [r7, #10]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051d4:	611a      	str	r2, [r3, #16]
 80051d6:	e01b      	b.n	8005210 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051d8:	897b      	ldrh	r3, [r7, #10]
 80051da:	11db      	asrs	r3, r3, #7
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f003 0306 	and.w	r3, r3, #6
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	f063 030f 	orn	r3, r3, #15
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	490e      	ldr	r1, [pc, #56]	; (8005230 <I2C_MasterRequestWrite+0xfc>)
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f943 	bl	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e010      	b.n	8005228 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005206:	897b      	ldrh	r3, [r7, #10]
 8005208:	b2da      	uxtb	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4907      	ldr	r1, [pc, #28]	; (8005234 <I2C_MasterRequestWrite+0x100>)
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f933 	bl	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	00010008 	.word	0x00010008
 8005234:	00010002 	.word	0x00010002

08005238 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	607a      	str	r2, [r7, #4]
 8005242:	603b      	str	r3, [r7, #0]
 8005244:	460b      	mov	r3, r1
 8005246:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800525c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b08      	cmp	r3, #8
 8005262:	d006      	beq.n	8005272 <I2C_MasterRequestRead+0x3a>
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d003      	beq.n	8005272 <I2C_MasterRequestRead+0x3a>
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005270:	d108      	bne.n	8005284 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e00b      	b.n	800529c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	2b11      	cmp	r3, #17
 800528a:	d107      	bne.n	800529c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800529a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f893 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c2:	d103      	bne.n	80052cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e079      	b.n	80053c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052d8:	d108      	bne.n	80052ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052da:	897b      	ldrh	r3, [r7, #10]
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	f043 0301 	orr.w	r3, r3, #1
 80052e2:	b2da      	uxtb	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	611a      	str	r2, [r3, #16]
 80052ea:	e05f      	b.n	80053ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052ec:	897b      	ldrh	r3, [r7, #10]
 80052ee:	11db      	asrs	r3, r3, #7
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	f003 0306 	and.w	r3, r3, #6
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	f063 030f 	orn	r3, r3, #15
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4930      	ldr	r1, [pc, #192]	; (80053cc <I2C_MasterRequestRead+0x194>)
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f8b9 	bl	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e054      	b.n	80053c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800531a:	897b      	ldrh	r3, [r7, #10]
 800531c:	b2da      	uxtb	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	4929      	ldr	r1, [pc, #164]	; (80053d0 <I2C_MasterRequestRead+0x198>)
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f8a9 	bl	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e044      	b.n	80053c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533a:	2300      	movs	r3, #0
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f000 f831 	bl	80053d4 <I2C_WaitOnFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00d      	beq.n	8005394 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005386:	d103      	bne.n	8005390 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800538e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e017      	b.n	80053c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005394:	897b      	ldrh	r3, [r7, #10]
 8005396:	11db      	asrs	r3, r3, #7
 8005398:	b2db      	uxtb	r3, r3
 800539a:	f003 0306 	and.w	r3, r3, #6
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	f063 030e 	orn	r3, r3, #14
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	4907      	ldr	r1, [pc, #28]	; (80053d0 <I2C_MasterRequestRead+0x198>)
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f865 	bl	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	00010008 	.word	0x00010008
 80053d0:	00010002 	.word	0x00010002

080053d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	4613      	mov	r3, r2
 80053e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053e4:	e025      	b.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ec:	d021      	beq.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ee:	f7fe f967 	bl	80036c0 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d302      	bcc.n	8005404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d116      	bne.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f043 0220 	orr.w	r2, r3, #32
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e023      	b.n	800547a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b01      	cmp	r3, #1
 800543a:	d10d      	bne.n	8005458 <I2C_WaitOnFlagUntilTimeout+0x84>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	43da      	mvns	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4013      	ands	r3, r2
 8005448:	b29b      	uxth	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	bf0c      	ite	eq
 800544e:	2301      	moveq	r3, #1
 8005450:	2300      	movne	r3, #0
 8005452:	b2db      	uxtb	r3, r3
 8005454:	461a      	mov	r2, r3
 8005456:	e00c      	b.n	8005472 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	43da      	mvns	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4013      	ands	r3, r2
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	bf0c      	ite	eq
 800546a:	2301      	moveq	r3, #1
 800546c:	2300      	movne	r3, #0
 800546e:	b2db      	uxtb	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	429a      	cmp	r2, r3
 8005476:	d0b6      	beq.n	80053e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
 800548e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005490:	e051      	b.n	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054a0:	d123      	bne.n	80054ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	f043 0204 	orr.w	r2, r3, #4
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e046      	b.n	8005578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f0:	d021      	beq.n	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f2:	f7fe f8e5 	bl	80036c0 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d302      	bcc.n	8005508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d116      	bne.n	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2220      	movs	r2, #32
 8005512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f043 0220 	orr.w	r2, r3, #32
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e020      	b.n	8005578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	0c1b      	lsrs	r3, r3, #16
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d10c      	bne.n	800555a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	695b      	ldr	r3, [r3, #20]
 8005546:	43da      	mvns	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	4013      	ands	r3, r2
 800554c:	b29b      	uxth	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	bf14      	ite	ne
 8005552:	2301      	movne	r3, #1
 8005554:	2300      	moveq	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	e00b      	b.n	8005572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	43da      	mvns	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4013      	ands	r3, r2
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	bf14      	ite	ne
 800556c:	2301      	movne	r3, #1
 800556e:	2300      	moveq	r3, #0
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d18d      	bne.n	8005492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800558c:	e02d      	b.n	80055ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f000 f8ce 	bl	8005730 <I2C_IsAcknowledgeFailed>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e02d      	b.n	80055fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a4:	d021      	beq.n	80055ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a6:	f7fe f88b 	bl	80036c0 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d302      	bcc.n	80055bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d116      	bne.n	80055ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f043 0220 	orr.w	r2, r3, #32
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e007      	b.n	80055fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f4:	2b80      	cmp	r3, #128	; 0x80
 80055f6:	d1ca      	bne.n	800558e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b084      	sub	sp, #16
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800560e:	e02d      	b.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f88d 	bl	8005730 <I2C_IsAcknowledgeFailed>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e02d      	b.n	800567c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005626:	d021      	beq.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005628:	f7fe f84a 	bl	80036c0 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	429a      	cmp	r2, r3
 8005636:	d302      	bcc.n	800563e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d116      	bne.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	f043 0220 	orr.w	r2, r3, #32
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e007      	b.n	800567c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b04      	cmp	r3, #4
 8005678:	d1ca      	bne.n	8005610 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005690:	e042      	b.n	8005718 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b10      	cmp	r3, #16
 800569e:	d119      	bne.n	80056d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f06f 0210 	mvn.w	r2, #16
 80056a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e029      	b.n	8005728 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d4:	f7fd fff4 	bl	80036c0 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d302      	bcc.n	80056ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d116      	bne.n	8005718 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e007      	b.n	8005728 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005722:	2b40      	cmp	r3, #64	; 0x40
 8005724:	d1b5      	bne.n	8005692 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005746:	d11b      	bne.n	8005780 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005750:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	f043 0204 	orr.w	r2, r3, #4
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800579a:	2300      	movs	r3, #0
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	4b20      	ldr	r3, [pc, #128]	; (8005820 <HAL_PWREx_EnableOverDrive+0x90>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	4a1f      	ldr	r2, [pc, #124]	; (8005820 <HAL_PWREx_EnableOverDrive+0x90>)
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6413      	str	r3, [r2, #64]	; 0x40
 80057aa:	4b1d      	ldr	r3, [pc, #116]	; (8005820 <HAL_PWREx_EnableOverDrive+0x90>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80057b6:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <HAL_PWREx_EnableOverDrive+0x94>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057bc:	f7fd ff80 	bl	80036c0 <HAL_GetTick>
 80057c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80057c2:	e009      	b.n	80057d8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80057c4:	f7fd ff7c 	bl	80036c0 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057d2:	d901      	bls.n	80057d8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e01f      	b.n	8005818 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80057d8:	4b13      	ldr	r3, [pc, #76]	; (8005828 <HAL_PWREx_EnableOverDrive+0x98>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e4:	d1ee      	bne.n	80057c4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80057e6:	4b11      	ldr	r3, [pc, #68]	; (800582c <HAL_PWREx_EnableOverDrive+0x9c>)
 80057e8:	2201      	movs	r2, #1
 80057ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057ec:	f7fd ff68 	bl	80036c0 <HAL_GetTick>
 80057f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80057f2:	e009      	b.n	8005808 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80057f4:	f7fd ff64 	bl	80036c0 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005802:	d901      	bls.n	8005808 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e007      	b.n	8005818 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005808:	4b07      	ldr	r3, [pc, #28]	; (8005828 <HAL_PWREx_EnableOverDrive+0x98>)
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005814:	d1ee      	bne.n	80057f4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	40023800 	.word	0x40023800
 8005824:	420e0040 	.word	0x420e0040
 8005828:	40007000 	.word	0x40007000
 800582c:	420e0044 	.word	0x420e0044

08005830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d101      	bne.n	8005844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e0cc      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005844:	4b68      	ldr	r3, [pc, #416]	; (80059e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d90c      	bls.n	800586c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005852:	4b65      	ldr	r3, [pc, #404]	; (80059e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800585a:	4b63      	ldr	r3, [pc, #396]	; (80059e8 <HAL_RCC_ClockConfig+0x1b8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	429a      	cmp	r2, r3
 8005866:	d001      	beq.n	800586c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0b8      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d020      	beq.n	80058ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d005      	beq.n	8005890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005884:	4b59      	ldr	r3, [pc, #356]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	4a58      	ldr	r2, [pc, #352]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800588e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800589c:	4b53      	ldr	r3, [pc, #332]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	4a52      	ldr	r2, [pc, #328]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058a8:	4b50      	ldr	r3, [pc, #320]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	494d      	ldr	r1, [pc, #308]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d044      	beq.n	8005950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ce:	4b47      	ldr	r3, [pc, #284]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d119      	bne.n	800590e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e07f      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d003      	beq.n	80058ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ea:	2b03      	cmp	r3, #3
 80058ec:	d107      	bne.n	80058fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058ee:	4b3f      	ldr	r3, [pc, #252]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e06f      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058fe:	4b3b      	ldr	r3, [pc, #236]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e067      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800590e:	4b37      	ldr	r3, [pc, #220]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f023 0203 	bic.w	r2, r3, #3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	4934      	ldr	r1, [pc, #208]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 800591c:	4313      	orrs	r3, r2
 800591e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005920:	f7fd fece 	bl	80036c0 <HAL_GetTick>
 8005924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005926:	e00a      	b.n	800593e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005928:	f7fd feca 	bl	80036c0 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	; 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e04f      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800593e:	4b2b      	ldr	r3, [pc, #172]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 020c 	and.w	r2, r3, #12
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	429a      	cmp	r2, r3
 800594e:	d1eb      	bne.n	8005928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005950:	4b25      	ldr	r3, [pc, #148]	; (80059e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d20c      	bcs.n	8005978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595e:	4b22      	ldr	r3, [pc, #136]	; (80059e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	b2d2      	uxtb	r2, r2
 8005964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005966:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <HAL_RCC_ClockConfig+0x1b8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	429a      	cmp	r2, r3
 8005972:	d001      	beq.n	8005978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e032      	b.n	80059de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005984:	4b19      	ldr	r3, [pc, #100]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	4916      	ldr	r1, [pc, #88]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d009      	beq.n	80059b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059a2:	4b12      	ldr	r3, [pc, #72]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	490e      	ldr	r1, [pc, #56]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059b6:	f000 f855 	bl	8005a64 <HAL_RCC_GetSysClockFreq>
 80059ba:	4602      	mov	r2, r0
 80059bc:	4b0b      	ldr	r3, [pc, #44]	; (80059ec <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	091b      	lsrs	r3, r3, #4
 80059c2:	f003 030f 	and.w	r3, r3, #15
 80059c6:	490a      	ldr	r1, [pc, #40]	; (80059f0 <HAL_RCC_ClockConfig+0x1c0>)
 80059c8:	5ccb      	ldrb	r3, [r1, r3]
 80059ca:	fa22 f303 	lsr.w	r3, r2, r3
 80059ce:	4a09      	ldr	r2, [pc, #36]	; (80059f4 <HAL_RCC_ClockConfig+0x1c4>)
 80059d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_RCC_ClockConfig+0x1c8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fd fe2e 	bl	8003638 <HAL_InitTick>

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	40023c00 	.word	0x40023c00
 80059ec:	40023800 	.word	0x40023800
 80059f0:	0801259c 	.word	0x0801259c
 80059f4:	20000008 	.word	0x20000008
 80059f8:	2000000c 	.word	0x2000000c

080059fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a00:	4b03      	ldr	r3, [pc, #12]	; (8005a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a02:	681b      	ldr	r3, [r3, #0]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	20000008 	.word	0x20000008

08005a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a18:	f7ff fff0 	bl	80059fc <HAL_RCC_GetHCLKFreq>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	0a9b      	lsrs	r3, r3, #10
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	4903      	ldr	r1, [pc, #12]	; (8005a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a2a:	5ccb      	ldrb	r3, [r1, r3]
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40023800 	.word	0x40023800
 8005a38:	080125ac 	.word	0x080125ac

08005a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a40:	f7ff ffdc 	bl	80059fc <HAL_RCC_GetHCLKFreq>
 8005a44:	4602      	mov	r2, r0
 8005a46:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	0b5b      	lsrs	r3, r3, #13
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	4903      	ldr	r1, [pc, #12]	; (8005a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a52:	5ccb      	ldrb	r3, [r1, r3]
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	080125ac 	.word	0x080125ac

08005a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a68:	b0ae      	sub	sp, #184	; 0xb8
 8005a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005a72:	2300      	movs	r3, #0
 8005a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a8a:	4bcb      	ldr	r3, [pc, #812]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 030c 	and.w	r3, r3, #12
 8005a92:	2b0c      	cmp	r3, #12
 8005a94:	f200 8206 	bhi.w	8005ea4 <HAL_RCC_GetSysClockFreq+0x440>
 8005a98:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9e:	bf00      	nop
 8005aa0:	08005ad5 	.word	0x08005ad5
 8005aa4:	08005ea5 	.word	0x08005ea5
 8005aa8:	08005ea5 	.word	0x08005ea5
 8005aac:	08005ea5 	.word	0x08005ea5
 8005ab0:	08005add 	.word	0x08005add
 8005ab4:	08005ea5 	.word	0x08005ea5
 8005ab8:	08005ea5 	.word	0x08005ea5
 8005abc:	08005ea5 	.word	0x08005ea5
 8005ac0:	08005ae5 	.word	0x08005ae5
 8005ac4:	08005ea5 	.word	0x08005ea5
 8005ac8:	08005ea5 	.word	0x08005ea5
 8005acc:	08005ea5 	.word	0x08005ea5
 8005ad0:	08005cd5 	.word	0x08005cd5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ad4:	4bb9      	ldr	r3, [pc, #740]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x358>)
 8005ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005ada:	e1e7      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005adc:	4bb8      	ldr	r3, [pc, #736]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005ade:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005ae2:	e1e3      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ae4:	4bb4      	ldr	r3, [pc, #720]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005af0:	4bb1      	ldr	r3, [pc, #708]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d071      	beq.n	8005be0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afc:	4bae      	ldr	r3, [pc, #696]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	099b      	lsrs	r3, r3, #6
 8005b02:	2200      	movs	r2, #0
 8005b04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b08:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b22:	4622      	mov	r2, r4
 8005b24:	462b      	mov	r3, r5
 8005b26:	f04f 0000 	mov.w	r0, #0
 8005b2a:	f04f 0100 	mov.w	r1, #0
 8005b2e:	0159      	lsls	r1, r3, #5
 8005b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b34:	0150      	lsls	r0, r2, #5
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	1a51      	subs	r1, r2, r1
 8005b3e:	6439      	str	r1, [r7, #64]	; 0x40
 8005b40:	4629      	mov	r1, r5
 8005b42:	eb63 0301 	sbc.w	r3, r3, r1
 8005b46:	647b      	str	r3, [r7, #68]	; 0x44
 8005b48:	f04f 0200 	mov.w	r2, #0
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005b54:	4649      	mov	r1, r9
 8005b56:	018b      	lsls	r3, r1, #6
 8005b58:	4641      	mov	r1, r8
 8005b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b5e:	4641      	mov	r1, r8
 8005b60:	018a      	lsls	r2, r1, #6
 8005b62:	4641      	mov	r1, r8
 8005b64:	1a51      	subs	r1, r2, r1
 8005b66:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b68:	4649      	mov	r1, r9
 8005b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8005b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b70:	f04f 0200 	mov.w	r2, #0
 8005b74:	f04f 0300 	mov.w	r3, #0
 8005b78:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	00cb      	lsls	r3, r1, #3
 8005b80:	4641      	mov	r1, r8
 8005b82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b86:	4641      	mov	r1, r8
 8005b88:	00ca      	lsls	r2, r1, #3
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4603      	mov	r3, r0
 8005b90:	4622      	mov	r2, r4
 8005b92:	189b      	adds	r3, r3, r2
 8005b94:	633b      	str	r3, [r7, #48]	; 0x30
 8005b96:	462b      	mov	r3, r5
 8005b98:	460a      	mov	r2, r1
 8005b9a:	eb42 0303 	adc.w	r3, r2, r3
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	f04f 0300 	mov.w	r3, #0
 8005ba8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005bac:	4629      	mov	r1, r5
 8005bae:	024b      	lsls	r3, r1, #9
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	024a      	lsls	r2, r1, #9
 8005bba:	4610      	mov	r0, r2
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005bc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005bcc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005bd0:	f7fb f85a 	bl	8000c88 <__aeabi_uldivmod>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	460b      	mov	r3, r1
 8005bd8:	4613      	mov	r3, r2
 8005bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bde:	e067      	b.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005be0:	4b75      	ldr	r3, [pc, #468]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	099b      	lsrs	r3, r3, #6
 8005be6:	2200      	movs	r2, #0
 8005be8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005bf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bfe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005c02:	4622      	mov	r2, r4
 8005c04:	462b      	mov	r3, r5
 8005c06:	f04f 0000 	mov.w	r0, #0
 8005c0a:	f04f 0100 	mov.w	r1, #0
 8005c0e:	0159      	lsls	r1, r3, #5
 8005c10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c14:	0150      	lsls	r0, r2, #5
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	1a51      	subs	r1, r2, r1
 8005c1e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c20:	4629      	mov	r1, r5
 8005c22:	eb63 0301 	sbc.w	r3, r3, r1
 8005c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c28:	f04f 0200 	mov.w	r2, #0
 8005c2c:	f04f 0300 	mov.w	r3, #0
 8005c30:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005c34:	4649      	mov	r1, r9
 8005c36:	018b      	lsls	r3, r1, #6
 8005c38:	4641      	mov	r1, r8
 8005c3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c3e:	4641      	mov	r1, r8
 8005c40:	018a      	lsls	r2, r1, #6
 8005c42:	4641      	mov	r1, r8
 8005c44:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c48:	4649      	mov	r1, r9
 8005c4a:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c4e:	f04f 0200 	mov.w	r2, #0
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c5a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c62:	4692      	mov	sl, r2
 8005c64:	469b      	mov	fp, r3
 8005c66:	4623      	mov	r3, r4
 8005c68:	eb1a 0303 	adds.w	r3, sl, r3
 8005c6c:	623b      	str	r3, [r7, #32]
 8005c6e:	462b      	mov	r3, r5
 8005c70:	eb4b 0303 	adc.w	r3, fp, r3
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005c82:	4629      	mov	r1, r5
 8005c84:	028b      	lsls	r3, r1, #10
 8005c86:	4621      	mov	r1, r4
 8005c88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c8c:	4621      	mov	r1, r4
 8005c8e:	028a      	lsls	r2, r1, #10
 8005c90:	4610      	mov	r0, r2
 8005c92:	4619      	mov	r1, r3
 8005c94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c98:	2200      	movs	r2, #0
 8005c9a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c9c:	677a      	str	r2, [r7, #116]	; 0x74
 8005c9e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005ca2:	f7fa fff1 	bl	8000c88 <__aeabi_uldivmod>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4613      	mov	r3, r2
 8005cac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cb0:	4b41      	ldr	r3, [pc, #260]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	0c1b      	lsrs	r3, r3, #16
 8005cb6:	f003 0303 	and.w	r3, r3, #3
 8005cba:	3301      	adds	r3, #1
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005cd2:	e0eb      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cd4:	4b38      	ldr	r3, [pc, #224]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ce0:	4b35      	ldr	r3, [pc, #212]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d06b      	beq.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cec:	4b32      	ldr	r3, [pc, #200]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x354>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	099b      	lsrs	r3, r3, #6
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cf6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cf8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cfe:	663b      	str	r3, [r7, #96]	; 0x60
 8005d00:	2300      	movs	r3, #0
 8005d02:	667b      	str	r3, [r7, #100]	; 0x64
 8005d04:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005d08:	4622      	mov	r2, r4
 8005d0a:	462b      	mov	r3, r5
 8005d0c:	f04f 0000 	mov.w	r0, #0
 8005d10:	f04f 0100 	mov.w	r1, #0
 8005d14:	0159      	lsls	r1, r3, #5
 8005d16:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d1a:	0150      	lsls	r0, r2, #5
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4621      	mov	r1, r4
 8005d22:	1a51      	subs	r1, r2, r1
 8005d24:	61b9      	str	r1, [r7, #24]
 8005d26:	4629      	mov	r1, r5
 8005d28:	eb63 0301 	sbc.w	r3, r3, r1
 8005d2c:	61fb      	str	r3, [r7, #28]
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005d3a:	4659      	mov	r1, fp
 8005d3c:	018b      	lsls	r3, r1, #6
 8005d3e:	4651      	mov	r1, sl
 8005d40:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d44:	4651      	mov	r1, sl
 8005d46:	018a      	lsls	r2, r1, #6
 8005d48:	4651      	mov	r1, sl
 8005d4a:	ebb2 0801 	subs.w	r8, r2, r1
 8005d4e:	4659      	mov	r1, fp
 8005d50:	eb63 0901 	sbc.w	r9, r3, r1
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d68:	4690      	mov	r8, r2
 8005d6a:	4699      	mov	r9, r3
 8005d6c:	4623      	mov	r3, r4
 8005d6e:	eb18 0303 	adds.w	r3, r8, r3
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	462b      	mov	r3, r5
 8005d76:	eb49 0303 	adc.w	r3, r9, r3
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005d88:	4629      	mov	r1, r5
 8005d8a:	024b      	lsls	r3, r1, #9
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d92:	4621      	mov	r1, r4
 8005d94:	024a      	lsls	r2, r1, #9
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d9e:	2200      	movs	r2, #0
 8005da0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005da2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005da4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005da8:	f7fa ff6e 	bl	8000c88 <__aeabi_uldivmod>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4613      	mov	r3, r2
 8005db2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005db6:	e065      	b.n	8005e84 <HAL_RCC_GetSysClockFreq+0x420>
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	00f42400 	.word	0x00f42400
 8005dc0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc4:	4b3d      	ldr	r3, [pc, #244]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x458>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	099b      	lsrs	r3, r3, #6
 8005dca:	2200      	movs	r2, #0
 8005dcc:	4618      	mov	r0, r3
 8005dce:	4611      	mov	r1, r2
 8005dd0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	657b      	str	r3, [r7, #84]	; 0x54
 8005dda:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005dde:	4642      	mov	r2, r8
 8005de0:	464b      	mov	r3, r9
 8005de2:	f04f 0000 	mov.w	r0, #0
 8005de6:	f04f 0100 	mov.w	r1, #0
 8005dea:	0159      	lsls	r1, r3, #5
 8005dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df0:	0150      	lsls	r0, r2, #5
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4641      	mov	r1, r8
 8005df8:	1a51      	subs	r1, r2, r1
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	4649      	mov	r1, r9
 8005dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005e10:	4659      	mov	r1, fp
 8005e12:	018b      	lsls	r3, r1, #6
 8005e14:	4651      	mov	r1, sl
 8005e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e1a:	4651      	mov	r1, sl
 8005e1c:	018a      	lsls	r2, r1, #6
 8005e1e:	4651      	mov	r1, sl
 8005e20:	1a54      	subs	r4, r2, r1
 8005e22:	4659      	mov	r1, fp
 8005e24:	eb63 0501 	sbc.w	r5, r3, r1
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	00eb      	lsls	r3, r5, #3
 8005e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e36:	00e2      	lsls	r2, r4, #3
 8005e38:	4614      	mov	r4, r2
 8005e3a:	461d      	mov	r5, r3
 8005e3c:	4643      	mov	r3, r8
 8005e3e:	18e3      	adds	r3, r4, r3
 8005e40:	603b      	str	r3, [r7, #0]
 8005e42:	464b      	mov	r3, r9
 8005e44:	eb45 0303 	adc.w	r3, r5, r3
 8005e48:	607b      	str	r3, [r7, #4]
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	f04f 0300 	mov.w	r3, #0
 8005e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e56:	4629      	mov	r1, r5
 8005e58:	028b      	lsls	r3, r1, #10
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e60:	4621      	mov	r1, r4
 8005e62:	028a      	lsls	r2, r1, #10
 8005e64:	4610      	mov	r0, r2
 8005e66:	4619      	mov	r1, r3
 8005e68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e70:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005e72:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e76:	f7fa ff07 	bl	8000c88 <__aeabi_uldivmod>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4613      	mov	r3, r2
 8005e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005e84:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <HAL_RCC_GetSysClockFreq+0x458>)
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	0f1b      	lsrs	r3, r3, #28
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005e92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005ea2:	e003      	b.n	8005eac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ea4:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005eaa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005eac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	37b8      	adds	r7, #184	; 0xb8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eba:	bf00      	nop
 8005ebc:	40023800 	.word	0x40023800
 8005ec0:	00f42400 	.word	0x00f42400

08005ec4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e28d      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8083 	beq.w	8005fea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ee4:	4b94      	ldr	r3, [pc, #592]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	f003 030c 	and.w	r3, r3, #12
 8005eec:	2b04      	cmp	r3, #4
 8005eee:	d019      	beq.n	8005f24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005ef0:	4b91      	ldr	r3, [pc, #580]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d106      	bne.n	8005f0a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005efc:	4b8e      	ldr	r3, [pc, #568]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f08:	d00c      	beq.n	8005f24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f0a:	4b8b      	ldr	r3, [pc, #556]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f12:	2b0c      	cmp	r3, #12
 8005f14:	d112      	bne.n	8005f3c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f16:	4b88      	ldr	r3, [pc, #544]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f22:	d10b      	bne.n	8005f3c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f24:	4b84      	ldr	r3, [pc, #528]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d05b      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x124>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d157      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e25a      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f44:	d106      	bne.n	8005f54 <HAL_RCC_OscConfig+0x90>
 8005f46:	4b7c      	ldr	r3, [pc, #496]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a7b      	ldr	r2, [pc, #492]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	e01d      	b.n	8005f90 <HAL_RCC_OscConfig+0xcc>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f5c:	d10c      	bne.n	8005f78 <HAL_RCC_OscConfig+0xb4>
 8005f5e:	4b76      	ldr	r3, [pc, #472]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a75      	ldr	r2, [pc, #468]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	4b73      	ldr	r3, [pc, #460]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a72      	ldr	r2, [pc, #456]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e00b      	b.n	8005f90 <HAL_RCC_OscConfig+0xcc>
 8005f78:	4b6f      	ldr	r3, [pc, #444]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a6e      	ldr	r2, [pc, #440]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	4b6c      	ldr	r3, [pc, #432]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a6b      	ldr	r2, [pc, #428]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d013      	beq.n	8005fc0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fd fb92 	bl	80036c0 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fa0:	f7fd fb8e 	bl	80036c0 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b64      	cmp	r3, #100	; 0x64
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e21f      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fb2:	4b61      	ldr	r3, [pc, #388]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f0      	beq.n	8005fa0 <HAL_RCC_OscConfig+0xdc>
 8005fbe:	e014      	b.n	8005fea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7fd fb7e 	bl	80036c0 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fc8:	f7fd fb7a 	bl	80036c0 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b64      	cmp	r3, #100	; 0x64
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e20b      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fda:	4b57      	ldr	r3, [pc, #348]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f0      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x104>
 8005fe6:	e000      	b.n	8005fea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d06f      	beq.n	80060d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ff6:	4b50      	ldr	r3, [pc, #320]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 030c 	and.w	r3, r3, #12
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d017      	beq.n	8006032 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006002:	4b4d      	ldr	r3, [pc, #308]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800600a:	2b08      	cmp	r3, #8
 800600c:	d105      	bne.n	800601a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800600e:	4b4a      	ldr	r3, [pc, #296]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800601a:	4b47      	ldr	r3, [pc, #284]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006022:	2b0c      	cmp	r3, #12
 8006024:	d11c      	bne.n	8006060 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006026:	4b44      	ldr	r3, [pc, #272]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d116      	bne.n	8006060 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006032:	4b41      	ldr	r3, [pc, #260]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <HAL_RCC_OscConfig+0x186>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d001      	beq.n	800604a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e1d3      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604a:	4b3b      	ldr	r3, [pc, #236]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	4937      	ldr	r1, [pc, #220]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 800605a:	4313      	orrs	r3, r2
 800605c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800605e:	e03a      	b.n	80060d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d020      	beq.n	80060aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006068:	4b34      	ldr	r3, [pc, #208]	; (800613c <HAL_RCC_OscConfig+0x278>)
 800606a:	2201      	movs	r2, #1
 800606c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606e:	f7fd fb27 	bl	80036c0 <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006076:	f7fd fb23 	bl	80036c0 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e1b4      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006088:	4b2b      	ldr	r3, [pc, #172]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0f0      	beq.n	8006076 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006094:	4b28      	ldr	r3, [pc, #160]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4925      	ldr	r1, [pc, #148]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	600b      	str	r3, [r1, #0]
 80060a8:	e015      	b.n	80060d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060aa:	4b24      	ldr	r3, [pc, #144]	; (800613c <HAL_RCC_OscConfig+0x278>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b0:	f7fd fb06 	bl	80036c0 <HAL_GetTick>
 80060b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060b8:	f7fd fb02 	bl	80036c0 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e193      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ca:	4b1b      	ldr	r3, [pc, #108]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f0      	bne.n	80060b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d036      	beq.n	8006150 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d016      	beq.n	8006118 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060ea:	4b15      	ldr	r3, [pc, #84]	; (8006140 <HAL_RCC_OscConfig+0x27c>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f0:	f7fd fae6 	bl	80036c0 <HAL_GetTick>
 80060f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060f8:	f7fd fae2 	bl	80036c0 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e173      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800610a:	4b0b      	ldr	r3, [pc, #44]	; (8006138 <HAL_RCC_OscConfig+0x274>)
 800610c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0f0      	beq.n	80060f8 <HAL_RCC_OscConfig+0x234>
 8006116:	e01b      	b.n	8006150 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006118:	4b09      	ldr	r3, [pc, #36]	; (8006140 <HAL_RCC_OscConfig+0x27c>)
 800611a:	2200      	movs	r2, #0
 800611c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611e:	f7fd facf 	bl	80036c0 <HAL_GetTick>
 8006122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006124:	e00e      	b.n	8006144 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006126:	f7fd facb 	bl	80036c0 <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b02      	cmp	r3, #2
 8006132:	d907      	bls.n	8006144 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e15c      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
 8006138:	40023800 	.word	0x40023800
 800613c:	42470000 	.word	0x42470000
 8006140:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006144:	4b8a      	ldr	r3, [pc, #552]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d1ea      	bne.n	8006126 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0304 	and.w	r3, r3, #4
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8097 	beq.w	800628c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800615e:	2300      	movs	r3, #0
 8006160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006162:	4b83      	ldr	r3, [pc, #524]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10f      	bne.n	800618e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]
 8006172:	4b7f      	ldr	r3, [pc, #508]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006176:	4a7e      	ldr	r2, [pc, #504]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617c:	6413      	str	r3, [r2, #64]	; 0x40
 800617e:	4b7c      	ldr	r3, [pc, #496]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800618a:	2301      	movs	r3, #1
 800618c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800618e:	4b79      	ldr	r3, [pc, #484]	; (8006374 <HAL_RCC_OscConfig+0x4b0>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006196:	2b00      	cmp	r3, #0
 8006198:	d118      	bne.n	80061cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800619a:	4b76      	ldr	r3, [pc, #472]	; (8006374 <HAL_RCC_OscConfig+0x4b0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a75      	ldr	r2, [pc, #468]	; (8006374 <HAL_RCC_OscConfig+0x4b0>)
 80061a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061a6:	f7fd fa8b 	bl	80036c0 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ac:	e008      	b.n	80061c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061ae:	f7fd fa87 	bl	80036c0 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d901      	bls.n	80061c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e118      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061c0:	4b6c      	ldr	r3, [pc, #432]	; (8006374 <HAL_RCC_OscConfig+0x4b0>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0f0      	beq.n	80061ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d106      	bne.n	80061e2 <HAL_RCC_OscConfig+0x31e>
 80061d4:	4b66      	ldr	r3, [pc, #408]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 80061d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d8:	4a65      	ldr	r2, [pc, #404]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 80061da:	f043 0301 	orr.w	r3, r3, #1
 80061de:	6713      	str	r3, [r2, #112]	; 0x70
 80061e0:	e01c      	b.n	800621c <HAL_RCC_OscConfig+0x358>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	d10c      	bne.n	8006204 <HAL_RCC_OscConfig+0x340>
 80061ea:	4b61      	ldr	r3, [pc, #388]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 80061ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ee:	4a60      	ldr	r2, [pc, #384]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 80061f0:	f043 0304 	orr.w	r3, r3, #4
 80061f4:	6713      	str	r3, [r2, #112]	; 0x70
 80061f6:	4b5e      	ldr	r3, [pc, #376]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 80061f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fa:	4a5d      	ldr	r2, [pc, #372]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 80061fc:	f043 0301 	orr.w	r3, r3, #1
 8006200:	6713      	str	r3, [r2, #112]	; 0x70
 8006202:	e00b      	b.n	800621c <HAL_RCC_OscConfig+0x358>
 8006204:	4b5a      	ldr	r3, [pc, #360]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	4a59      	ldr	r2, [pc, #356]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 800620a:	f023 0301 	bic.w	r3, r3, #1
 800620e:	6713      	str	r3, [r2, #112]	; 0x70
 8006210:	4b57      	ldr	r3, [pc, #348]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006214:	4a56      	ldr	r2, [pc, #344]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006216:	f023 0304 	bic.w	r3, r3, #4
 800621a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d015      	beq.n	8006250 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006224:	f7fd fa4c 	bl	80036c0 <HAL_GetTick>
 8006228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622a:	e00a      	b.n	8006242 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800622c:	f7fd fa48 	bl	80036c0 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	f241 3288 	movw	r2, #5000	; 0x1388
 800623a:	4293      	cmp	r3, r2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e0d7      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006242:	4b4b      	ldr	r3, [pc, #300]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0ee      	beq.n	800622c <HAL_RCC_OscConfig+0x368>
 800624e:	e014      	b.n	800627a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006250:	f7fd fa36 	bl	80036c0 <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006256:	e00a      	b.n	800626e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006258:	f7fd fa32 	bl	80036c0 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f241 3288 	movw	r2, #5000	; 0x1388
 8006266:	4293      	cmp	r3, r2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e0c1      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800626e:	4b40      	ldr	r3, [pc, #256]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1ee      	bne.n	8006258 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d105      	bne.n	800628c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006280:	4b3b      	ldr	r3, [pc, #236]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006284:	4a3a      	ldr	r2, [pc, #232]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800628a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f000 80ad 	beq.w	80063f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006296:	4b36      	ldr	r3, [pc, #216]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d060      	beq.n	8006364 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d145      	bne.n	8006336 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062aa:	4b33      	ldr	r3, [pc, #204]	; (8006378 <HAL_RCC_OscConfig+0x4b4>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b0:	f7fd fa06 	bl	80036c0 <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062b8:	f7fd fa02 	bl	80036c0 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e093      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ca:	4b29      	ldr	r3, [pc, #164]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1f0      	bne.n	80062b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69da      	ldr	r2, [r3, #28]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	431a      	orrs	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	019b      	lsls	r3, r3, #6
 80062e6:	431a      	orrs	r2, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	085b      	lsrs	r3, r3, #1
 80062ee:	3b01      	subs	r3, #1
 80062f0:	041b      	lsls	r3, r3, #16
 80062f2:	431a      	orrs	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	061b      	lsls	r3, r3, #24
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	071b      	lsls	r3, r3, #28
 8006302:	491b      	ldr	r1, [pc, #108]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006304:	4313      	orrs	r3, r2
 8006306:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006308:	4b1b      	ldr	r3, [pc, #108]	; (8006378 <HAL_RCC_OscConfig+0x4b4>)
 800630a:	2201      	movs	r2, #1
 800630c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630e:	f7fd f9d7 	bl	80036c0 <HAL_GetTick>
 8006312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006314:	e008      	b.n	8006328 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006316:	f7fd f9d3 	bl	80036c0 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d901      	bls.n	8006328 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e064      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006328:	4b11      	ldr	r3, [pc, #68]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0f0      	beq.n	8006316 <HAL_RCC_OscConfig+0x452>
 8006334:	e05c      	b.n	80063f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006336:	4b10      	ldr	r3, [pc, #64]	; (8006378 <HAL_RCC_OscConfig+0x4b4>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633c:	f7fd f9c0 	bl	80036c0 <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006344:	f7fd f9bc 	bl	80036c0 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e04d      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006356:	4b06      	ldr	r3, [pc, #24]	; (8006370 <HAL_RCC_OscConfig+0x4ac>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1f0      	bne.n	8006344 <HAL_RCC_OscConfig+0x480>
 8006362:	e045      	b.n	80063f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d107      	bne.n	800637c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e040      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
 8006370:	40023800 	.word	0x40023800
 8006374:	40007000 	.word	0x40007000
 8006378:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800637c:	4b1f      	ldr	r3, [pc, #124]	; (80063fc <HAL_RCC_OscConfig+0x538>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d030      	beq.n	80063ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006394:	429a      	cmp	r2, r3
 8006396:	d129      	bne.n	80063ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d122      	bne.n	80063ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80063ac:	4013      	ands	r3, r2
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d119      	bne.n	80063ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	3b01      	subs	r3, #1
 80063c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d10f      	bne.n	80063ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80063d8:	429a      	cmp	r2, r3
 80063da:	d107      	bne.n	80063ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d001      	beq.n	80063f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e000      	b.n	80063f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40023800 	.word	0x40023800

08006400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e07b      	b.n	800650a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	2b00      	cmp	r3, #0
 8006418:	d108      	bne.n	800642c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006422:	d009      	beq.n	8006438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	61da      	str	r2, [r3, #28]
 800642a:	e005      	b.n	8006438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006444:	b2db      	uxtb	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	d106      	bne.n	8006458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fc fce0 	bl	8002e18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064a8:	431a      	orrs	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064b2:	431a      	orrs	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064bc:	ea42 0103 	orr.w	r1, r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	430a      	orrs	r2, r1
 80064ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	0c1b      	lsrs	r3, r3, #16
 80064d6:	f003 0104 	and.w	r1, r3, #4
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064de:	f003 0210 	and.w	r2, r3, #16
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69da      	ldr	r2, [r3, #28]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b088      	sub	sp, #32
 8006516:	af00      	add	r7, sp, #0
 8006518:	60f8      	str	r0, [r7, #12]
 800651a:	60b9      	str	r1, [r7, #8]
 800651c:	603b      	str	r3, [r7, #0]
 800651e:	4613      	mov	r3, r2
 8006520:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_SPI_Transmit+0x22>
 8006530:	2302      	movs	r3, #2
 8006532:	e126      	b.n	8006782 <HAL_SPI_Transmit+0x270>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800653c:	f7fd f8c0 	bl	80036c0 <HAL_GetTick>
 8006540:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006542:	88fb      	ldrh	r3, [r7, #6]
 8006544:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b01      	cmp	r3, #1
 8006550:	d002      	beq.n	8006558 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006552:	2302      	movs	r3, #2
 8006554:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006556:	e10b      	b.n	8006770 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <HAL_SPI_Transmit+0x52>
 800655e:	88fb      	ldrh	r3, [r7, #6]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006568:	e102      	b.n	8006770 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2203      	movs	r2, #3
 800656e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	88fa      	ldrh	r2, [r7, #6]
 8006582:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	88fa      	ldrh	r2, [r7, #6]
 8006588:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b0:	d10f      	bne.n	80065d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065dc:	2b40      	cmp	r3, #64	; 0x40
 80065de:	d007      	beq.n	80065f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065f8:	d14b      	bne.n	8006692 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HAL_SPI_Transmit+0xf6>
 8006602:	8afb      	ldrh	r3, [r7, #22]
 8006604:	2b01      	cmp	r3, #1
 8006606:	d13e      	bne.n	8006686 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	881a      	ldrh	r2, [r3, #0]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	1c9a      	adds	r2, r3, #2
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800662c:	e02b      	b.n	8006686 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b02      	cmp	r3, #2
 800663a:	d112      	bne.n	8006662 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006640:	881a      	ldrh	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664c:	1c9a      	adds	r2, r3, #2
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006660:	e011      	b.n	8006686 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006662:	f7fd f82d 	bl	80036c0 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d803      	bhi.n	800667a <HAL_SPI_Transmit+0x168>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d102      	bne.n	8006680 <HAL_SPI_Transmit+0x16e>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006684:	e074      	b.n	8006770 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1ce      	bne.n	800662e <HAL_SPI_Transmit+0x11c>
 8006690:	e04c      	b.n	800672c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_SPI_Transmit+0x18e>
 800669a:	8afb      	ldrh	r3, [r7, #22]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d140      	bne.n	8006722 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	330c      	adds	r3, #12
 80066aa:	7812      	ldrb	r2, [r2, #0]
 80066ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80066c6:	e02c      	b.n	8006722 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d113      	bne.n	80066fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	330c      	adds	r3, #12
 80066e0:	7812      	ldrb	r2, [r2, #0]
 80066e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80066fc:	e011      	b.n	8006722 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066fe:	f7fc ffdf 	bl	80036c0 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d803      	bhi.n	8006716 <HAL_SPI_Transmit+0x204>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006714:	d102      	bne.n	800671c <HAL_SPI_Transmit+0x20a>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d102      	bne.n	8006722 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800671c:	2303      	movs	r3, #3
 800671e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006720:	e026      	b.n	8006770 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1cd      	bne.n	80066c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	6839      	ldr	r1, [r7, #0]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fa55 	bl	8006be0 <SPI_EndRxTxTransaction>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2220      	movs	r2, #32
 8006740:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10a      	bne.n	8006760 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800674a:	2300      	movs	r3, #0
 800674c:	613b      	str	r3, [r7, #16]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	613b      	str	r3, [r7, #16]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	613b      	str	r3, [r7, #16]
 800675e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	77fb      	strb	r3, [r7, #31]
 800676c:	e000      	b.n	8006770 <HAL_SPI_Transmit+0x25e>
  }

error:
 800676e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006780:	7ffb      	ldrb	r3, [r7, #31]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b08c      	sub	sp, #48	; 0x30
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	607a      	str	r2, [r7, #4]
 8006796:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006798:	2301      	movs	r3, #1
 800679a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800679c:	2300      	movs	r3, #0
 800679e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_SPI_TransmitReceive+0x26>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e18a      	b.n	8006ac6 <HAL_SPI_TransmitReceive+0x33c>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067b8:	f7fc ff82 	bl	80036c0 <HAL_GetTick>
 80067bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80067ce:	887b      	ldrh	r3, [r7, #2]
 80067d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d00f      	beq.n	80067fa <HAL_SPI_TransmitReceive+0x70>
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067e0:	d107      	bne.n	80067f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d103      	bne.n	80067f2 <HAL_SPI_TransmitReceive+0x68>
 80067ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d003      	beq.n	80067fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80067f2:	2302      	movs	r3, #2
 80067f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80067f8:	e15b      	b.n	8006ab2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <HAL_SPI_TransmitReceive+0x82>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <HAL_SPI_TransmitReceive+0x82>
 8006806:	887b      	ldrh	r3, [r7, #2]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d103      	bne.n	8006814 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006812:	e14e      	b.n	8006ab2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b04      	cmp	r3, #4
 800681e:	d003      	beq.n	8006828 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2205      	movs	r2, #5
 8006824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	887a      	ldrh	r2, [r7, #2]
 8006838:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	887a      	ldrh	r2, [r7, #2]
 800683e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	887a      	ldrh	r2, [r7, #2]
 800684a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	887a      	ldrh	r2, [r7, #2]
 8006850:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006868:	2b40      	cmp	r3, #64	; 0x40
 800686a:	d007      	beq.n	800687c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800687a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006884:	d178      	bne.n	8006978 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <HAL_SPI_TransmitReceive+0x10a>
 800688e:	8b7b      	ldrh	r3, [r7, #26]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d166      	bne.n	8006962 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006898:	881a      	ldrh	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	1c9a      	adds	r2, r3, #2
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	3b01      	subs	r3, #1
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068b8:	e053      	b.n	8006962 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d11b      	bne.n	8006900 <HAL_SPI_TransmitReceive+0x176>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d016      	beq.n	8006900 <HAL_SPI_TransmitReceive+0x176>
 80068d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d113      	bne.n	8006900 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068dc:	881a      	ldrh	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e8:	1c9a      	adds	r2, r3, #2
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b01      	cmp	r3, #1
 800690c:	d119      	bne.n	8006942 <HAL_SPI_TransmitReceive+0x1b8>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d014      	beq.n	8006942 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	b292      	uxth	r2, r2
 8006924:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	1c9a      	adds	r2, r3, #2
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006934:	b29b      	uxth	r3, r3
 8006936:	3b01      	subs	r3, #1
 8006938:	b29a      	uxth	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800693e:	2301      	movs	r3, #1
 8006940:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006942:	f7fc febd 	bl	80036c0 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800694e:	429a      	cmp	r2, r3
 8006950:	d807      	bhi.n	8006962 <HAL_SPI_TransmitReceive+0x1d8>
 8006952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d003      	beq.n	8006962 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006960:	e0a7      	b.n	8006ab2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006966:	b29b      	uxth	r3, r3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1a6      	bne.n	80068ba <HAL_SPI_TransmitReceive+0x130>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006970:	b29b      	uxth	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1a1      	bne.n	80068ba <HAL_SPI_TransmitReceive+0x130>
 8006976:	e07c      	b.n	8006a72 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <HAL_SPI_TransmitReceive+0x1fc>
 8006980:	8b7b      	ldrh	r3, [r7, #26]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d16b      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	330c      	adds	r3, #12
 8006990:	7812      	ldrb	r2, [r2, #0]
 8006992:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069ac:	e057      	b.n	8006a5e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d11c      	bne.n	80069f6 <HAL_SPI_TransmitReceive+0x26c>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d017      	beq.n	80069f6 <HAL_SPI_TransmitReceive+0x26c>
 80069c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d114      	bne.n	80069f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	330c      	adds	r3, #12
 80069d6:	7812      	ldrb	r2, [r2, #0]
 80069d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f003 0301 	and.w	r3, r3, #1
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d119      	bne.n	8006a38 <HAL_SPI_TransmitReceive+0x2ae>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d014      	beq.n	8006a38 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	b2d2      	uxtb	r2, r2
 8006a1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a34:	2301      	movs	r3, #1
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006a38:	f7fc fe42 	bl	80036c0 <HAL_GetTick>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d803      	bhi.n	8006a50 <HAL_SPI_TransmitReceive+0x2c6>
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4e:	d102      	bne.n	8006a56 <HAL_SPI_TransmitReceive+0x2cc>
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d103      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006a5c:	e029      	b.n	8006ab2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1a2      	bne.n	80069ae <HAL_SPI_TransmitReceive+0x224>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d19d      	bne.n	80069ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 f8b2 	bl	8006be0 <SPI_EndRxTxTransaction>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d006      	beq.n	8006a90 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006a8e:	e010      	b.n	8006ab2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10b      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a98:	2300      	movs	r3, #0
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	e000      	b.n	8006ab2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006ab0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3730      	adds	r7, #48	; 0x30
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	4613      	mov	r3, r2
 8006ade:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006ae0:	f7fc fdee 	bl	80036c0 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	1a9b      	subs	r3, r3, r2
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	4413      	add	r3, r2
 8006aee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006af0:	f7fc fde6 	bl	80036c0 <HAL_GetTick>
 8006af4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006af6:	4b39      	ldr	r3, [pc, #228]	; (8006bdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	015b      	lsls	r3, r3, #5
 8006afc:	0d1b      	lsrs	r3, r3, #20
 8006afe:	69fa      	ldr	r2, [r7, #28]
 8006b00:	fb02 f303 	mul.w	r3, r2, r3
 8006b04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b06:	e054      	b.n	8006bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0e:	d050      	beq.n	8006bb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b10:	f7fc fdd6 	bl	80036c0 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d902      	bls.n	8006b26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d13d      	bne.n	8006ba2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b3e:	d111      	bne.n	8006b64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b48:	d004      	beq.n	8006b54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b52:	d107      	bne.n	8006b64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b6c:	d10f      	bne.n	8006b8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e017      	b.n	8006bd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	bf0c      	ite	eq
 8006bc2:	2301      	moveq	r3, #1
 8006bc4:	2300      	movne	r3, #0
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	461a      	mov	r2, r3
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d19b      	bne.n	8006b08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000008 	.word	0x20000008

08006be0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006bec:	4b1b      	ldr	r3, [pc, #108]	; (8006c5c <SPI_EndRxTxTransaction+0x7c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a1b      	ldr	r2, [pc, #108]	; (8006c60 <SPI_EndRxTxTransaction+0x80>)
 8006bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf6:	0d5b      	lsrs	r3, r3, #21
 8006bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006bfc:	fb02 f303 	mul.w	r3, r2, r3
 8006c00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c0a:	d112      	bne.n	8006c32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2200      	movs	r2, #0
 8006c14:	2180      	movs	r1, #128	; 0x80
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f7ff ff5a 	bl	8006ad0 <SPI_WaitFlagStateUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d016      	beq.n	8006c50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c26:	f043 0220 	orr.w	r2, r3, #32
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e00f      	b.n	8006c52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00a      	beq.n	8006c4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c48:	2b80      	cmp	r3, #128	; 0x80
 8006c4a:	d0f2      	beq.n	8006c32 <SPI_EndRxTxTransaction+0x52>
 8006c4c:	e000      	b.n	8006c50 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c4e:	bf00      	nop
  }

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000008 	.word	0x20000008
 8006c60:	165e9f81 	.word	0x165e9f81

08006c64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e041      	b.n	8006cfa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d106      	bne.n	8006c90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fc fa48 	bl	8003120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	3304      	adds	r3, #4
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	4610      	mov	r0, r2
 8006ca4:	f001 f8b0 	bl	8007e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d001      	beq.n	8006d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e04e      	b.n	8006dba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a23      	ldr	r2, [pc, #140]	; (8006dc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d022      	beq.n	8006d84 <HAL_TIM_Base_Start_IT+0x80>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d46:	d01d      	beq.n	8006d84 <HAL_TIM_Base_Start_IT+0x80>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a1f      	ldr	r2, [pc, #124]	; (8006dcc <HAL_TIM_Base_Start_IT+0xc8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d018      	beq.n	8006d84 <HAL_TIM_Base_Start_IT+0x80>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a1e      	ldr	r2, [pc, #120]	; (8006dd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d013      	beq.n	8006d84 <HAL_TIM_Base_Start_IT+0x80>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a1c      	ldr	r2, [pc, #112]	; (8006dd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d00e      	beq.n	8006d84 <HAL_TIM_Base_Start_IT+0x80>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a1b      	ldr	r2, [pc, #108]	; (8006dd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d009      	beq.n	8006d84 <HAL_TIM_Base_Start_IT+0x80>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a19      	ldr	r2, [pc, #100]	; (8006ddc <HAL_TIM_Base_Start_IT+0xd8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d004      	beq.n	8006d84 <HAL_TIM_Base_Start_IT+0x80>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a18      	ldr	r2, [pc, #96]	; (8006de0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d111      	bne.n	8006da8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 0307 	and.w	r3, r3, #7
 8006d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2b06      	cmp	r3, #6
 8006d94:	d010      	beq.n	8006db8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f042 0201 	orr.w	r2, r2, #1
 8006da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da6:	e007      	b.n	8006db8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0201 	orr.w	r2, r2, #1
 8006db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3714      	adds	r7, #20
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40010000 	.word	0x40010000
 8006dcc:	40000400 	.word	0x40000400
 8006dd0:	40000800 	.word	0x40000800
 8006dd4:	40000c00 	.word	0x40000c00
 8006dd8:	40010400 	.word	0x40010400
 8006ddc:	40014000 	.word	0x40014000
 8006de0:	40001800 	.word	0x40001800

08006de4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0201 	bic.w	r2, r2, #1
 8006dfa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6a1a      	ldr	r2, [r3, #32]
 8006e02:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e06:	4013      	ands	r3, r2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10f      	bne.n	8006e2c <HAL_TIM_Base_Stop_IT+0x48>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6a1a      	ldr	r2, [r3, #32]
 8006e12:	f240 4344 	movw	r3, #1092	; 0x444
 8006e16:	4013      	ands	r3, r2
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d107      	bne.n	8006e2c <HAL_TIM_Base_Stop_IT+0x48>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0201 	bic.w	r2, r2, #1
 8006e2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr

08006e42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e041      	b.n	8006ed8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d106      	bne.n	8006e6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 f839 	bl	8006ee0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2202      	movs	r2, #2
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	4619      	mov	r1, r3
 8006e80:	4610      	mov	r0, r2
 8006e82:	f000 ffc1 	bl	8007e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <HAL_TIM_PWM_Start+0x24>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	bf14      	ite	ne
 8006f10:	2301      	movne	r3, #1
 8006f12:	2300      	moveq	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	e022      	b.n	8006f5e <HAL_TIM_PWM_Start+0x6a>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b04      	cmp	r3, #4
 8006f1c:	d109      	bne.n	8006f32 <HAL_TIM_PWM_Start+0x3e>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	bf14      	ite	ne
 8006f2a:	2301      	movne	r3, #1
 8006f2c:	2300      	moveq	r3, #0
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	e015      	b.n	8006f5e <HAL_TIM_PWM_Start+0x6a>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d109      	bne.n	8006f4c <HAL_TIM_PWM_Start+0x58>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	bf14      	ite	ne
 8006f44:	2301      	movne	r3, #1
 8006f46:	2300      	moveq	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	e008      	b.n	8006f5e <HAL_TIM_PWM_Start+0x6a>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	bf14      	ite	ne
 8006f58:	2301      	movne	r3, #1
 8006f5a:	2300      	moveq	r3, #0
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e07c      	b.n	8007060 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d104      	bne.n	8006f76 <HAL_TIM_PWM_Start+0x82>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2202      	movs	r2, #2
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f74:	e013      	b.n	8006f9e <HAL_TIM_PWM_Start+0xaa>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIM_PWM_Start+0x92>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f84:	e00b      	b.n	8006f9e <HAL_TIM_PWM_Start+0xaa>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d104      	bne.n	8006f96 <HAL_TIM_PWM_Start+0xa2>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f94:	e003      	b.n	8006f9e <HAL_TIM_PWM_Start+0xaa>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 fbd4 	bl	8008754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2d      	ldr	r2, [pc, #180]	; (8007068 <HAL_TIM_PWM_Start+0x174>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_TIM_PWM_Start+0xcc>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a2c      	ldr	r2, [pc, #176]	; (800706c <HAL_TIM_PWM_Start+0x178>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d101      	bne.n	8006fc4 <HAL_TIM_PWM_Start+0xd0>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <HAL_TIM_PWM_Start+0xd2>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a22      	ldr	r2, [pc, #136]	; (8007068 <HAL_TIM_PWM_Start+0x174>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d022      	beq.n	800702a <HAL_TIM_PWM_Start+0x136>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fec:	d01d      	beq.n	800702a <HAL_TIM_PWM_Start+0x136>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a1f      	ldr	r2, [pc, #124]	; (8007070 <HAL_TIM_PWM_Start+0x17c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d018      	beq.n	800702a <HAL_TIM_PWM_Start+0x136>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1d      	ldr	r2, [pc, #116]	; (8007074 <HAL_TIM_PWM_Start+0x180>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <HAL_TIM_PWM_Start+0x136>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <HAL_TIM_PWM_Start+0x184>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00e      	beq.n	800702a <HAL_TIM_PWM_Start+0x136>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a16      	ldr	r2, [pc, #88]	; (800706c <HAL_TIM_PWM_Start+0x178>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d009      	beq.n	800702a <HAL_TIM_PWM_Start+0x136>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a18      	ldr	r2, [pc, #96]	; (800707c <HAL_TIM_PWM_Start+0x188>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d004      	beq.n	800702a <HAL_TIM_PWM_Start+0x136>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a16      	ldr	r2, [pc, #88]	; (8007080 <HAL_TIM_PWM_Start+0x18c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d111      	bne.n	800704e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b06      	cmp	r3, #6
 800703a:	d010      	beq.n	800705e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f042 0201 	orr.w	r2, r2, #1
 800704a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800704c:	e007      	b.n	800705e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0201 	orr.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40010000 	.word	0x40010000
 800706c:	40010400 	.word	0x40010400
 8007070:	40000400 	.word	0x40000400
 8007074:	40000800 	.word	0x40000800
 8007078:	40000c00 	.word	0x40000c00
 800707c:	40014000 	.word	0x40014000
 8007080:	40001800 	.word	0x40001800

08007084 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d101      	bne.n	8007096 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	e041      	b.n	800711a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d106      	bne.n	80070b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f7fb ffb6 	bl	800301c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3304      	adds	r3, #4
 80070c0:	4619      	mov	r1, r3
 80070c2:	4610      	mov	r0, r2
 80070c4:	f000 fea0 	bl	8007e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <HAL_TIM_IC_Start_DMA+0x22>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007142:	b2db      	uxtb	r3, r3
 8007144:	e013      	b.n	800716e <HAL_TIM_IC_Start_DMA+0x4a>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b04      	cmp	r3, #4
 800714a:	d104      	bne.n	8007156 <HAL_TIM_IC_Start_DMA+0x32>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007152:	b2db      	uxtb	r3, r3
 8007154:	e00b      	b.n	800716e <HAL_TIM_IC_Start_DMA+0x4a>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b08      	cmp	r3, #8
 800715a:	d104      	bne.n	8007166 <HAL_TIM_IC_Start_DMA+0x42>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007162:	b2db      	uxtb	r3, r3
 8007164:	e003      	b.n	800716e <HAL_TIM_IC_Start_DMA+0x4a>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800716c:	b2db      	uxtb	r3, r3
 800716e:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d104      	bne.n	8007180 <HAL_TIM_IC_Start_DMA+0x5c>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800717c:	b2db      	uxtb	r3, r3
 800717e:	e013      	b.n	80071a8 <HAL_TIM_IC_Start_DMA+0x84>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b04      	cmp	r3, #4
 8007184:	d104      	bne.n	8007190 <HAL_TIM_IC_Start_DMA+0x6c>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800718c:	b2db      	uxtb	r3, r3
 800718e:	e00b      	b.n	80071a8 <HAL_TIM_IC_Start_DMA+0x84>
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b08      	cmp	r3, #8
 8007194:	d104      	bne.n	80071a0 <HAL_TIM_IC_Start_DMA+0x7c>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800719c:	b2db      	uxtb	r3, r3
 800719e:	e003      	b.n	80071a8 <HAL_TIM_IC_Start_DMA+0x84>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80071aa:	7dbb      	ldrb	r3, [r7, #22]
 80071ac:	2b02      	cmp	r3, #2
 80071ae:	d002      	beq.n	80071b6 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80071b0:	7d7b      	ldrb	r3, [r7, #21]
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d101      	bne.n	80071ba <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 80071b6:	2302      	movs	r3, #2
 80071b8:	e146      	b.n	8007448 <HAL_TIM_IC_Start_DMA+0x324>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80071ba:	7dbb      	ldrb	r3, [r7, #22]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d143      	bne.n	8007248 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80071c0:	7d7b      	ldrb	r3, [r7, #21]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d140      	bne.n	8007248 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d104      	bne.n	80071d6 <HAL_TIM_IC_Start_DMA+0xb2>
 80071cc:	887b      	ldrh	r3, [r7, #2]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	e138      	b.n	8007448 <HAL_TIM_IC_Start_DMA+0x324>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d104      	bne.n	80071e6 <HAL_TIM_IC_Start_DMA+0xc2>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071e4:	e013      	b.n	800720e <HAL_TIM_IC_Start_DMA+0xea>
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d104      	bne.n	80071f6 <HAL_TIM_IC_Start_DMA+0xd2>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071f4:	e00b      	b.n	800720e <HAL_TIM_IC_Start_DMA+0xea>
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_IC_Start_DMA+0xe2>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007204:	e003      	b.n	800720e <HAL_TIM_IC_Start_DMA+0xea>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2202      	movs	r2, #2
 800720a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <HAL_TIM_IC_Start_DMA+0xfa>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 800721c:	e016      	b.n	800724c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b04      	cmp	r3, #4
 8007222:	d104      	bne.n	800722e <HAL_TIM_IC_Start_DMA+0x10a>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 800722c:	e00e      	b.n	800724c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b08      	cmp	r3, #8
 8007232:	d104      	bne.n	800723e <HAL_TIM_IC_Start_DMA+0x11a>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800723c:	e006      	b.n	800724c <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2202      	movs	r2, #2
 8007242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8007246:	e001      	b.n	800724c <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	e0fd      	b.n	8007448 <HAL_TIM_IC_Start_DMA+0x324>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2201      	movs	r2, #1
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	4618      	mov	r0, r3
 8007256:	f001 fa7d 	bl	8008754 <TIM_CCxChannelCmd>

  switch (Channel)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b0c      	cmp	r3, #12
 800725e:	f200 80ad 	bhi.w	80073bc <HAL_TIM_IC_Start_DMA+0x298>
 8007262:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <HAL_TIM_IC_Start_DMA+0x144>)
 8007264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007268:	0800729d 	.word	0x0800729d
 800726c:	080073bd 	.word	0x080073bd
 8007270:	080073bd 	.word	0x080073bd
 8007274:	080073bd 	.word	0x080073bd
 8007278:	080072e5 	.word	0x080072e5
 800727c:	080073bd 	.word	0x080073bd
 8007280:	080073bd 	.word	0x080073bd
 8007284:	080073bd 	.word	0x080073bd
 8007288:	0800732d 	.word	0x0800732d
 800728c:	080073bd 	.word	0x080073bd
 8007290:	080073bd 	.word	0x080073bd
 8007294:	080073bd 	.word	0x080073bd
 8007298:	08007375 	.word	0x08007375
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	4a6b      	ldr	r2, [pc, #428]	; (8007450 <HAL_TIM_IC_Start_DMA+0x32c>)
 80072a2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	4a6a      	ldr	r2, [pc, #424]	; (8007454 <HAL_TIM_IC_Start_DMA+0x330>)
 80072aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	4a69      	ldr	r2, [pc, #420]	; (8007458 <HAL_TIM_IC_Start_DMA+0x334>)
 80072b2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	3334      	adds	r3, #52	; 0x34
 80072be:	4619      	mov	r1, r3
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	887b      	ldrh	r3, [r7, #2]
 80072c4:	f7fc fe5e 	bl	8003f84 <HAL_DMA_Start_IT>
 80072c8:	4603      	mov	r3, r0
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e0ba      	b.n	8007448 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072e0:	60da      	str	r2, [r3, #12]
      break;
 80072e2:	e06e      	b.n	80073c2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e8:	4a59      	ldr	r2, [pc, #356]	; (8007450 <HAL_TIM_IC_Start_DMA+0x32c>)
 80072ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f0:	4a58      	ldr	r2, [pc, #352]	; (8007454 <HAL_TIM_IC_Start_DMA+0x330>)
 80072f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	4a57      	ldr	r2, [pc, #348]	; (8007458 <HAL_TIM_IC_Start_DMA+0x334>)
 80072fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3338      	adds	r3, #56	; 0x38
 8007306:	4619      	mov	r1, r3
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	887b      	ldrh	r3, [r7, #2]
 800730c:	f7fc fe3a 	bl	8003f84 <HAL_DMA_Start_IT>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e096      	b.n	8007448 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68da      	ldr	r2, [r3, #12]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007328:	60da      	str	r2, [r3, #12]
      break;
 800732a:	e04a      	b.n	80073c2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007330:	4a47      	ldr	r2, [pc, #284]	; (8007450 <HAL_TIM_IC_Start_DMA+0x32c>)
 8007332:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	4a46      	ldr	r2, [pc, #280]	; (8007454 <HAL_TIM_IC_Start_DMA+0x330>)
 800733a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007340:	4a45      	ldr	r2, [pc, #276]	; (8007458 <HAL_TIM_IC_Start_DMA+0x334>)
 8007342:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	333c      	adds	r3, #60	; 0x3c
 800734e:	4619      	mov	r1, r3
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	887b      	ldrh	r3, [r7, #2]
 8007354:	f7fc fe16 	bl	8003f84 <HAL_DMA_Start_IT>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e072      	b.n	8007448 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007370:	60da      	str	r2, [r3, #12]
      break;
 8007372:	e026      	b.n	80073c2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007378:	4a35      	ldr	r2, [pc, #212]	; (8007450 <HAL_TIM_IC_Start_DMA+0x32c>)
 800737a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007380:	4a34      	ldr	r2, [pc, #208]	; (8007454 <HAL_TIM_IC_Start_DMA+0x330>)
 8007382:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	4a33      	ldr	r2, [pc, #204]	; (8007458 <HAL_TIM_IC_Start_DMA+0x334>)
 800738a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3340      	adds	r3, #64	; 0x40
 8007396:	4619      	mov	r1, r3
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	887b      	ldrh	r3, [r7, #2]
 800739c:	f7fc fdf2 	bl	8003f84 <HAL_DMA_Start_IT>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e04e      	b.n	8007448 <HAL_TIM_IC_Start_DMA+0x324>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073b8:	60da      	str	r2, [r3, #12]
      break;
 80073ba:	e002      	b.n	80073c2 <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	75fb      	strb	r3, [r7, #23]
      break;
 80073c0:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a25      	ldr	r2, [pc, #148]	; (800745c <HAL_TIM_IC_Start_DMA+0x338>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d022      	beq.n	8007412 <HAL_TIM_IC_Start_DMA+0x2ee>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d4:	d01d      	beq.n	8007412 <HAL_TIM_IC_Start_DMA+0x2ee>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a21      	ldr	r2, [pc, #132]	; (8007460 <HAL_TIM_IC_Start_DMA+0x33c>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d018      	beq.n	8007412 <HAL_TIM_IC_Start_DMA+0x2ee>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1f      	ldr	r2, [pc, #124]	; (8007464 <HAL_TIM_IC_Start_DMA+0x340>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <HAL_TIM_IC_Start_DMA+0x2ee>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1e      	ldr	r2, [pc, #120]	; (8007468 <HAL_TIM_IC_Start_DMA+0x344>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00e      	beq.n	8007412 <HAL_TIM_IC_Start_DMA+0x2ee>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1c      	ldr	r2, [pc, #112]	; (800746c <HAL_TIM_IC_Start_DMA+0x348>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d009      	beq.n	8007412 <HAL_TIM_IC_Start_DMA+0x2ee>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a1b      	ldr	r2, [pc, #108]	; (8007470 <HAL_TIM_IC_Start_DMA+0x34c>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <HAL_TIM_IC_Start_DMA+0x2ee>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a19      	ldr	r2, [pc, #100]	; (8007474 <HAL_TIM_IC_Start_DMA+0x350>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d111      	bne.n	8007436 <HAL_TIM_IC_Start_DMA+0x312>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b06      	cmp	r3, #6
 8007422:	d010      	beq.n	8007446 <HAL_TIM_IC_Start_DMA+0x322>
    {
      __HAL_TIM_ENABLE(htim);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007434:	e007      	b.n	8007446 <HAL_TIM_IC_Start_DMA+0x322>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f042 0201 	orr.w	r2, r2, #1
 8007444:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8007446:	7dfb      	ldrb	r3, [r7, #23]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	08007cd7 	.word	0x08007cd7
 8007454:	08007d9f 	.word	0x08007d9f
 8007458:	08007c45 	.word	0x08007c45
 800745c:	40010000 	.word	0x40010000
 8007460:	40000400 	.word	0x40000400
 8007464:	40000800 	.word	0x40000800
 8007468:	40000c00 	.word	0x40000c00
 800746c:	40010400 	.word	0x40010400
 8007470:	40014000 	.word	0x40014000
 8007474:	40001800 	.word	0x40001800

08007478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b02      	cmp	r3, #2
 800748c:	d122      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	f003 0302 	and.w	r3, r3, #2
 8007498:	2b02      	cmp	r3, #2
 800749a:	d11b      	bne.n	80074d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f06f 0202 	mvn.w	r2, #2
 80074a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	f003 0303 	and.w	r3, r3, #3
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fb f9c6 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 80074c0:	e005      	b.n	80074ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fb8c 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fb9d 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d122      	bne.n	8007528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f003 0304 	and.w	r3, r3, #4
 80074ec:	2b04      	cmp	r3, #4
 80074ee:	d11b      	bne.n	8007528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f06f 0204 	mvn.w	r2, #4
 80074f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fb f99c 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 8007514:	e005      	b.n	8007522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fb62 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fb73 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	f003 0308 	and.w	r3, r3, #8
 8007532:	2b08      	cmp	r3, #8
 8007534:	d122      	bne.n	800757c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b08      	cmp	r3, #8
 8007542:	d11b      	bne.n	800757c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f06f 0208 	mvn.w	r2, #8
 800754c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2204      	movs	r2, #4
 8007552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7fb f972 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 8007568:	e005      	b.n	8007576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fb38 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fb49 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f003 0310 	and.w	r3, r3, #16
 8007586:	2b10      	cmp	r3, #16
 8007588:	d122      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	2b10      	cmp	r3, #16
 8007596:	d11b      	bne.n	80075d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f06f 0210 	mvn.w	r2, #16
 80075a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2208      	movs	r2, #8
 80075a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	69db      	ldr	r3, [r3, #28]
 80075ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7fb f948 	bl	800284c <HAL_TIM_IC_CaptureCallback>
 80075bc:	e005      	b.n	80075ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fb0e 	bl	8007be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fb1f 	bl	8007c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d10e      	bne.n	80075fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d107      	bne.n	80075fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0201 	mvn.w	r2, #1
 80075f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7fb f8cc 	bl	8002794 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007606:	2b80      	cmp	r3, #128	; 0x80
 8007608:	d10e      	bne.n	8007628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007614:	2b80      	cmp	r3, #128	; 0x80
 8007616:	d107      	bne.n	8007628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 f942 	bl	80088ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007632:	2b40      	cmp	r3, #64	; 0x40
 8007634:	d10e      	bne.n	8007654 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007640:	2b40      	cmp	r3, #64	; 0x40
 8007642:	d107      	bne.n	8007654 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800764c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fae4 	bl	8007c1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b20      	cmp	r3, #32
 8007660:	d10e      	bne.n	8007680 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b20      	cmp	r3, #32
 800766e:	d107      	bne.n	8007680 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0220 	mvn.w	r2, #32
 8007678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f001 f90c 	bl	8008898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d101      	bne.n	80076a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80076a2:	2302      	movs	r3, #2
 80076a4:	e088      	b.n	80077b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d11b      	bne.n	80076ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6818      	ldr	r0, [r3, #0]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	6819      	ldr	r1, [r3, #0]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f000 fe82 	bl	80083cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	699a      	ldr	r2, [r3, #24]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f022 020c 	bic.w	r2, r2, #12
 80076d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6999      	ldr	r1, [r3, #24]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	689a      	ldr	r2, [r3, #8]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	619a      	str	r2, [r3, #24]
 80076ea:	e060      	b.n	80077ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b04      	cmp	r3, #4
 80076f0:	d11c      	bne.n	800772c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	6819      	ldr	r1, [r3, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f000 ff06 	bl	8008512 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	699a      	ldr	r2, [r3, #24]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007714:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6999      	ldr	r1, [r3, #24]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	021a      	lsls	r2, r3, #8
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	619a      	str	r2, [r3, #24]
 800772a:	e040      	b.n	80077ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b08      	cmp	r3, #8
 8007730:	d11b      	bne.n	800776a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	6819      	ldr	r1, [r3, #0]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f000 ff53 	bl	80085ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69da      	ldr	r2, [r3, #28]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 020c 	bic.w	r2, r2, #12
 8007754:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69d9      	ldr	r1, [r3, #28]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	61da      	str	r2, [r3, #28]
 8007768:	e021      	b.n	80077ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2b0c      	cmp	r3, #12
 800776e:	d11c      	bne.n	80077aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	6819      	ldr	r1, [r3, #0]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f000 ff70 	bl	8008664 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	69da      	ldr	r2, [r3, #28]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007792:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69d9      	ldr	r1, [r3, #28]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	021a      	lsls	r2, r3, #8
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	61da      	str	r2, [r3, #28]
 80077a8:	e001      	b.n	80077ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3718      	adds	r7, #24
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d101      	bne.n	80077de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077da:	2302      	movs	r3, #2
 80077dc:	e0ae      	b.n	800793c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2b0c      	cmp	r3, #12
 80077ea:	f200 809f 	bhi.w	800792c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077ee:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	08007829 	.word	0x08007829
 80077f8:	0800792d 	.word	0x0800792d
 80077fc:	0800792d 	.word	0x0800792d
 8007800:	0800792d 	.word	0x0800792d
 8007804:	08007869 	.word	0x08007869
 8007808:	0800792d 	.word	0x0800792d
 800780c:	0800792d 	.word	0x0800792d
 8007810:	0800792d 	.word	0x0800792d
 8007814:	080078ab 	.word	0x080078ab
 8007818:	0800792d 	.word	0x0800792d
 800781c:	0800792d 	.word	0x0800792d
 8007820:	0800792d 	.word	0x0800792d
 8007824:	080078eb 	.word	0x080078eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68b9      	ldr	r1, [r7, #8]
 800782e:	4618      	mov	r0, r3
 8007830:	f000 fb8a 	bl	8007f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0208 	orr.w	r2, r2, #8
 8007842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0204 	bic.w	r2, r2, #4
 8007852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6999      	ldr	r1, [r3, #24]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	691a      	ldr	r2, [r3, #16]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	619a      	str	r2, [r3, #24]
      break;
 8007866:	e064      	b.n	8007932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68b9      	ldr	r1, [r7, #8]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fbda 	bl	8008028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	699a      	ldr	r2, [r3, #24]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	699a      	ldr	r2, [r3, #24]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6999      	ldr	r1, [r3, #24]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	021a      	lsls	r2, r3, #8
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	619a      	str	r2, [r3, #24]
      break;
 80078a8:	e043      	b.n	8007932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68b9      	ldr	r1, [r7, #8]
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 fc2f 	bl	8008114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69da      	ldr	r2, [r3, #28]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f042 0208 	orr.w	r2, r2, #8
 80078c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69da      	ldr	r2, [r3, #28]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f022 0204 	bic.w	r2, r2, #4
 80078d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	69d9      	ldr	r1, [r3, #28]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	61da      	str	r2, [r3, #28]
      break;
 80078e8:	e023      	b.n	8007932 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 fc83 	bl	80081fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69da      	ldr	r2, [r3, #28]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	69da      	ldr	r2, [r3, #28]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	69d9      	ldr	r1, [r3, #28]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	021a      	lsls	r2, r3, #8
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	61da      	str	r2, [r3, #28]
      break;
 800792a:	e002      	b.n	8007932 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	75fb      	strb	r3, [r7, #23]
      break;
 8007930:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800793a:	7dfb      	ldrb	r3, [r7, #23]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_TIM_ConfigClockSource+0x1c>
 800795c:	2302      	movs	r3, #2
 800795e:	e0b4      	b.n	8007aca <HAL_TIM_ConfigClockSource+0x186>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800797e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007986:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007998:	d03e      	beq.n	8007a18 <HAL_TIM_ConfigClockSource+0xd4>
 800799a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800799e:	f200 8087 	bhi.w	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a6:	f000 8086 	beq.w	8007ab6 <HAL_TIM_ConfigClockSource+0x172>
 80079aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ae:	d87f      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079b0:	2b70      	cmp	r3, #112	; 0x70
 80079b2:	d01a      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0xa6>
 80079b4:	2b70      	cmp	r3, #112	; 0x70
 80079b6:	d87b      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079b8:	2b60      	cmp	r3, #96	; 0x60
 80079ba:	d050      	beq.n	8007a5e <HAL_TIM_ConfigClockSource+0x11a>
 80079bc:	2b60      	cmp	r3, #96	; 0x60
 80079be:	d877      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079c0:	2b50      	cmp	r3, #80	; 0x50
 80079c2:	d03c      	beq.n	8007a3e <HAL_TIM_ConfigClockSource+0xfa>
 80079c4:	2b50      	cmp	r3, #80	; 0x50
 80079c6:	d873      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079c8:	2b40      	cmp	r3, #64	; 0x40
 80079ca:	d058      	beq.n	8007a7e <HAL_TIM_ConfigClockSource+0x13a>
 80079cc:	2b40      	cmp	r3, #64	; 0x40
 80079ce:	d86f      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079d0:	2b30      	cmp	r3, #48	; 0x30
 80079d2:	d064      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x15a>
 80079d4:	2b30      	cmp	r3, #48	; 0x30
 80079d6:	d86b      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d060      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x15a>
 80079dc:	2b20      	cmp	r3, #32
 80079de:	d867      	bhi.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d05c      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x15a>
 80079e4:	2b10      	cmp	r3, #16
 80079e6:	d05a      	beq.n	8007a9e <HAL_TIM_ConfigClockSource+0x15a>
 80079e8:	e062      	b.n	8007ab0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6818      	ldr	r0, [r3, #0]
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	6899      	ldr	r1, [r3, #8]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f000 fe8b 	bl	8008714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	609a      	str	r2, [r3, #8]
      break;
 8007a16:	e04f      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	6899      	ldr	r1, [r3, #8]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	f000 fe74 	bl	8008714 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a3a:	609a      	str	r2, [r3, #8]
      break;
 8007a3c:	e03c      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	6859      	ldr	r1, [r3, #4]
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	f000 fd32 	bl	80084b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2150      	movs	r1, #80	; 0x50
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fe41 	bl	80086de <TIM_ITRx_SetConfig>
      break;
 8007a5c:	e02c      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6818      	ldr	r0, [r3, #0]
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	6859      	ldr	r1, [r3, #4]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f000 fd8e 	bl	800858c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2160      	movs	r1, #96	; 0x60
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fe31 	bl	80086de <TIM_ITRx_SetConfig>
      break;
 8007a7c:	e01c      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6818      	ldr	r0, [r3, #0]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	6859      	ldr	r1, [r3, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	68db      	ldr	r3, [r3, #12]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	f000 fd12 	bl	80084b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2140      	movs	r1, #64	; 0x40
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 fe21 	bl	80086de <TIM_ITRx_SetConfig>
      break;
 8007a9c:	e00c      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	f000 fe18 	bl	80086de <TIM_ITRx_SetConfig>
      break;
 8007aae:	e003      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ab4:	e000      	b.n	8007ab8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ab6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d101      	bne.n	8007aea <HAL_TIM_SlaveConfigSynchro+0x18>
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	e031      	b.n	8007b4e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2202      	movs	r2, #2
 8007af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007afa:	6839      	ldr	r1, [r7, #0]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fbd3 	bl	80082a8 <TIM_SlaveTimer_SetConfig>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d009      	beq.n	8007b1c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e018      	b.n	8007b4e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68da      	ldr	r2, [r3, #12]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b2a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b3a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b0c      	cmp	r3, #12
 8007b6a:	d831      	bhi.n	8007bd0 <HAL_TIM_ReadCapturedValue+0x78>
 8007b6c:	a201      	add	r2, pc, #4	; (adr r2, 8007b74 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b72:	bf00      	nop
 8007b74:	08007ba9 	.word	0x08007ba9
 8007b78:	08007bd1 	.word	0x08007bd1
 8007b7c:	08007bd1 	.word	0x08007bd1
 8007b80:	08007bd1 	.word	0x08007bd1
 8007b84:	08007bb3 	.word	0x08007bb3
 8007b88:	08007bd1 	.word	0x08007bd1
 8007b8c:	08007bd1 	.word	0x08007bd1
 8007b90:	08007bd1 	.word	0x08007bd1
 8007b94:	08007bbd 	.word	0x08007bbd
 8007b98:	08007bd1 	.word	0x08007bd1
 8007b9c:	08007bd1 	.word	0x08007bd1
 8007ba0:	08007bd1 	.word	0x08007bd1
 8007ba4:	08007bc7 	.word	0x08007bc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bae:	60fb      	str	r3, [r7, #12]

      break;
 8007bb0:	e00f      	b.n	8007bd2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb8:	60fb      	str	r3, [r7, #12]

      break;
 8007bba:	e00a      	b.n	8007bd2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc2:	60fb      	str	r3, [r7, #12]

      break;
 8007bc4:	e005      	b.n	8007bd2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bcc:	60fb      	str	r3, [r7, #12]

      break;
 8007bce:	e000      	b.n	8007bd2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007bd0:	bf00      	nop
  }

  return tmpreg;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007be8:	bf00      	nop
 8007bea:	370c      	adds	r7, #12
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d107      	bne.n	8007c6c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2201      	movs	r2, #1
 8007c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c6a:	e02a      	b.n	8007cc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d107      	bne.n	8007c86 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c84:	e01d      	b.n	8007cc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	429a      	cmp	r2, r3
 8007c8e:	d107      	bne.n	8007ca0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2204      	movs	r2, #4
 8007c94:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c9e:	e010      	b.n	8007cc2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d107      	bne.n	8007cba <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2208      	movs	r2, #8
 8007cae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cb8:	e003      	b.n	8007cc2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f7ff ffb4 	bl	8007c30 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	771a      	strb	r2, [r3, #28]
}
 8007cce:	bf00      	nop
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b084      	sub	sp, #16
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d10f      	bne.n	8007d0e <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d146      	bne.n	8007d8a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d0c:	e03d      	b.n	8007d8a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d10f      	bne.n	8007d38 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69db      	ldr	r3, [r3, #28]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d131      	bne.n	8007d8a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d36:	e028      	b.n	8007d8a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d10f      	bne.n	8007d62 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2204      	movs	r2, #4
 8007d46:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	69db      	ldr	r3, [r3, #28]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d11c      	bne.n	8007d8a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d60:	e013      	b.n	8007d8a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d10e      	bne.n	8007d8a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2208      	movs	r2, #8
 8007d70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d107      	bne.n	8007d8a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f7fa fd5e 	bl	800284c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	771a      	strb	r2, [r3, #28]
}
 8007d96:	bf00      	nop
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d103      	bne.n	8007dbe <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2201      	movs	r2, #1
 8007dba:	771a      	strb	r2, [r3, #28]
 8007dbc:	e019      	b.n	8007df2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d103      	bne.n	8007dd0 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2202      	movs	r2, #2
 8007dcc:	771a      	strb	r2, [r3, #28]
 8007dce:	e010      	b.n	8007df2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d103      	bne.n	8007de2 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2204      	movs	r2, #4
 8007dde:	771a      	strb	r2, [r3, #28]
 8007de0:	e007      	b.n	8007df2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d102      	bne.n	8007df2 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2208      	movs	r2, #8
 8007df0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f7ff fefe 	bl	8007bf4 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	771a      	strb	r2, [r3, #28]
}
 8007dfe:	bf00      	nop
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a40      	ldr	r2, [pc, #256]	; (8007f1c <TIM_Base_SetConfig+0x114>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d013      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e26:	d00f      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a3d      	ldr	r2, [pc, #244]	; (8007f20 <TIM_Base_SetConfig+0x118>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d00b      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a3c      	ldr	r2, [pc, #240]	; (8007f24 <TIM_Base_SetConfig+0x11c>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d007      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a3b      	ldr	r2, [pc, #236]	; (8007f28 <TIM_Base_SetConfig+0x120>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d003      	beq.n	8007e48 <TIM_Base_SetConfig+0x40>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a3a      	ldr	r2, [pc, #232]	; (8007f2c <TIM_Base_SetConfig+0x124>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d108      	bne.n	8007e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a2f      	ldr	r2, [pc, #188]	; (8007f1c <TIM_Base_SetConfig+0x114>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d02b      	beq.n	8007eba <TIM_Base_SetConfig+0xb2>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e68:	d027      	beq.n	8007eba <TIM_Base_SetConfig+0xb2>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a2c      	ldr	r2, [pc, #176]	; (8007f20 <TIM_Base_SetConfig+0x118>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d023      	beq.n	8007eba <TIM_Base_SetConfig+0xb2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a2b      	ldr	r2, [pc, #172]	; (8007f24 <TIM_Base_SetConfig+0x11c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d01f      	beq.n	8007eba <TIM_Base_SetConfig+0xb2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a2a      	ldr	r2, [pc, #168]	; (8007f28 <TIM_Base_SetConfig+0x120>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d01b      	beq.n	8007eba <TIM_Base_SetConfig+0xb2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a29      	ldr	r2, [pc, #164]	; (8007f2c <TIM_Base_SetConfig+0x124>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d017      	beq.n	8007eba <TIM_Base_SetConfig+0xb2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a28      	ldr	r2, [pc, #160]	; (8007f30 <TIM_Base_SetConfig+0x128>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d013      	beq.n	8007eba <TIM_Base_SetConfig+0xb2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a27      	ldr	r2, [pc, #156]	; (8007f34 <TIM_Base_SetConfig+0x12c>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d00f      	beq.n	8007eba <TIM_Base_SetConfig+0xb2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a26      	ldr	r2, [pc, #152]	; (8007f38 <TIM_Base_SetConfig+0x130>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00b      	beq.n	8007eba <TIM_Base_SetConfig+0xb2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a25      	ldr	r2, [pc, #148]	; (8007f3c <TIM_Base_SetConfig+0x134>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d007      	beq.n	8007eba <TIM_Base_SetConfig+0xb2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a24      	ldr	r2, [pc, #144]	; (8007f40 <TIM_Base_SetConfig+0x138>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d003      	beq.n	8007eba <TIM_Base_SetConfig+0xb2>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a23      	ldr	r2, [pc, #140]	; (8007f44 <TIM_Base_SetConfig+0x13c>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d108      	bne.n	8007ecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	68fa      	ldr	r2, [r7, #12]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	689a      	ldr	r2, [r3, #8]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a0a      	ldr	r2, [pc, #40]	; (8007f1c <TIM_Base_SetConfig+0x114>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d003      	beq.n	8007f00 <TIM_Base_SetConfig+0xf8>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a0c      	ldr	r2, [pc, #48]	; (8007f2c <TIM_Base_SetConfig+0x124>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d103      	bne.n	8007f08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	615a      	str	r2, [r3, #20]
}
 8007f0e:	bf00      	nop
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	40010000 	.word	0x40010000
 8007f20:	40000400 	.word	0x40000400
 8007f24:	40000800 	.word	0x40000800
 8007f28:	40000c00 	.word	0x40000c00
 8007f2c:	40010400 	.word	0x40010400
 8007f30:	40014000 	.word	0x40014000
 8007f34:	40014400 	.word	0x40014400
 8007f38:	40014800 	.word	0x40014800
 8007f3c:	40001800 	.word	0x40001800
 8007f40:	40001c00 	.word	0x40001c00
 8007f44:	40002000 	.word	0x40002000

08007f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	f023 0201 	bic.w	r2, r3, #1
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a1b      	ldr	r3, [r3, #32]
 8007f62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f023 0303 	bic.w	r3, r3, #3
 8007f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f023 0302 	bic.w	r3, r3, #2
 8007f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a20      	ldr	r2, [pc, #128]	; (8008020 <TIM_OC1_SetConfig+0xd8>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d003      	beq.n	8007fac <TIM_OC1_SetConfig+0x64>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a1f      	ldr	r2, [pc, #124]	; (8008024 <TIM_OC1_SetConfig+0xdc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d10c      	bne.n	8007fc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f023 0308 	bic.w	r3, r3, #8
 8007fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f023 0304 	bic.w	r3, r3, #4
 8007fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	4a15      	ldr	r2, [pc, #84]	; (8008020 <TIM_OC1_SetConfig+0xd8>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d003      	beq.n	8007fd6 <TIM_OC1_SetConfig+0x8e>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4a14      	ldr	r2, [pc, #80]	; (8008024 <TIM_OC1_SetConfig+0xdc>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d111      	bne.n	8007ffa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	685a      	ldr	r2, [r3, #4]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	621a      	str	r2, [r3, #32]
}
 8008014:	bf00      	nop
 8008016:	371c      	adds	r7, #28
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	40010000 	.word	0x40010000
 8008024:	40010400 	.word	0x40010400

08008028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	f023 0210 	bic.w	r2, r3, #16
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800805e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	021b      	lsls	r3, r3, #8
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	4313      	orrs	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f023 0320 	bic.w	r3, r3, #32
 8008072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	011b      	lsls	r3, r3, #4
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a22      	ldr	r2, [pc, #136]	; (800810c <TIM_OC2_SetConfig+0xe4>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d003      	beq.n	8008090 <TIM_OC2_SetConfig+0x68>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a21      	ldr	r2, [pc, #132]	; (8008110 <TIM_OC2_SetConfig+0xe8>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d10d      	bne.n	80080ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	011b      	lsls	r3, r3, #4
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a17      	ldr	r2, [pc, #92]	; (800810c <TIM_OC2_SetConfig+0xe4>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d003      	beq.n	80080bc <TIM_OC2_SetConfig+0x94>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a16      	ldr	r2, [pc, #88]	; (8008110 <TIM_OC2_SetConfig+0xe8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d113      	bne.n	80080e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	693a      	ldr	r2, [r7, #16]
 80080e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	621a      	str	r2, [r3, #32]
}
 80080fe:	bf00      	nop
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	40010000 	.word	0x40010000
 8008110:	40010400 	.word	0x40010400

08008114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f023 0303 	bic.w	r3, r3, #3
 800814a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800815c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	021b      	lsls	r3, r3, #8
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	4313      	orrs	r3, r2
 8008168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a21      	ldr	r2, [pc, #132]	; (80081f4 <TIM_OC3_SetConfig+0xe0>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d003      	beq.n	800817a <TIM_OC3_SetConfig+0x66>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a20      	ldr	r2, [pc, #128]	; (80081f8 <TIM_OC3_SetConfig+0xe4>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d10d      	bne.n	8008196 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	697a      	ldr	r2, [r7, #20]
 800818a:	4313      	orrs	r3, r2
 800818c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a16      	ldr	r2, [pc, #88]	; (80081f4 <TIM_OC3_SetConfig+0xe0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d003      	beq.n	80081a6 <TIM_OC3_SetConfig+0x92>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a15      	ldr	r2, [pc, #84]	; (80081f8 <TIM_OC3_SetConfig+0xe4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d113      	bne.n	80081ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	011b      	lsls	r3, r3, #4
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	621a      	str	r2, [r3, #32]
}
 80081e8:	bf00      	nop
 80081ea:	371c      	adds	r7, #28
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	40010000 	.word	0x40010000
 80081f8:	40010400 	.word	0x40010400

080081fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800822a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	021b      	lsls	r3, r3, #8
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	4313      	orrs	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	031b      	lsls	r3, r3, #12
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	4313      	orrs	r3, r2
 8008252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a12      	ldr	r2, [pc, #72]	; (80082a0 <TIM_OC4_SetConfig+0xa4>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d003      	beq.n	8008264 <TIM_OC4_SetConfig+0x68>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a11      	ldr	r2, [pc, #68]	; (80082a4 <TIM_OC4_SetConfig+0xa8>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d109      	bne.n	8008278 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800826a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	019b      	lsls	r3, r3, #6
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	621a      	str	r2, [r3, #32]
}
 8008292:	bf00      	nop
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	40010000 	.word	0x40010000
 80082a4:	40010400 	.word	0x40010400

080082a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082c4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f023 0307 	bic.w	r3, r3, #7
 80082d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	4313      	orrs	r3, r2
 80082e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	693a      	ldr	r2, [r7, #16]
 80082e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	2b70      	cmp	r3, #112	; 0x70
 80082f0:	d01a      	beq.n	8008328 <TIM_SlaveTimer_SetConfig+0x80>
 80082f2:	2b70      	cmp	r3, #112	; 0x70
 80082f4:	d860      	bhi.n	80083b8 <TIM_SlaveTimer_SetConfig+0x110>
 80082f6:	2b60      	cmp	r3, #96	; 0x60
 80082f8:	d054      	beq.n	80083a4 <TIM_SlaveTimer_SetConfig+0xfc>
 80082fa:	2b60      	cmp	r3, #96	; 0x60
 80082fc:	d85c      	bhi.n	80083b8 <TIM_SlaveTimer_SetConfig+0x110>
 80082fe:	2b50      	cmp	r3, #80	; 0x50
 8008300:	d046      	beq.n	8008390 <TIM_SlaveTimer_SetConfig+0xe8>
 8008302:	2b50      	cmp	r3, #80	; 0x50
 8008304:	d858      	bhi.n	80083b8 <TIM_SlaveTimer_SetConfig+0x110>
 8008306:	2b40      	cmp	r3, #64	; 0x40
 8008308:	d019      	beq.n	800833e <TIM_SlaveTimer_SetConfig+0x96>
 800830a:	2b40      	cmp	r3, #64	; 0x40
 800830c:	d854      	bhi.n	80083b8 <TIM_SlaveTimer_SetConfig+0x110>
 800830e:	2b30      	cmp	r3, #48	; 0x30
 8008310:	d055      	beq.n	80083be <TIM_SlaveTimer_SetConfig+0x116>
 8008312:	2b30      	cmp	r3, #48	; 0x30
 8008314:	d850      	bhi.n	80083b8 <TIM_SlaveTimer_SetConfig+0x110>
 8008316:	2b20      	cmp	r3, #32
 8008318:	d051      	beq.n	80083be <TIM_SlaveTimer_SetConfig+0x116>
 800831a:	2b20      	cmp	r3, #32
 800831c:	d84c      	bhi.n	80083b8 <TIM_SlaveTimer_SetConfig+0x110>
 800831e:	2b00      	cmp	r3, #0
 8008320:	d04d      	beq.n	80083be <TIM_SlaveTimer_SetConfig+0x116>
 8008322:	2b10      	cmp	r3, #16
 8008324:	d04b      	beq.n	80083be <TIM_SlaveTimer_SetConfig+0x116>
 8008326:	e047      	b.n	80083b8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	68d9      	ldr	r1, [r3, #12]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	689a      	ldr	r2, [r3, #8]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	f000 f9ec 	bl	8008714 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800833c:	e040      	b.n	80083c0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2b05      	cmp	r3, #5
 8008344:	d101      	bne.n	800834a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e03b      	b.n	80083c2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6a1b      	ldr	r3, [r3, #32]
 8008350:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6a1a      	ldr	r2, [r3, #32]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 0201 	bic.w	r2, r2, #1
 8008360:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008370:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	011b      	lsls	r3, r3, #4
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	4313      	orrs	r3, r2
 800837c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	621a      	str	r2, [r3, #32]
      break;
 800838e:	e017      	b.n	80083c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6818      	ldr	r0, [r3, #0]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	6899      	ldr	r1, [r3, #8]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	461a      	mov	r2, r3
 800839e:	f000 f889 	bl	80084b4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80083a2:	e00d      	b.n	80083c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6818      	ldr	r0, [r3, #0]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	6899      	ldr	r1, [r3, #8]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	461a      	mov	r2, r3
 80083b2:	f000 f8eb 	bl	800858c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80083b6:	e003      	b.n	80083c0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	75fb      	strb	r3, [r7, #23]
      break;
 80083bc:	e000      	b.n	80083c0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80083be:	bf00      	nop
  }

  return status;
 80083c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	f023 0201 	bic.w	r2, r3, #1
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4a28      	ldr	r2, [pc, #160]	; (8008498 <TIM_TI1_SetConfig+0xcc>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d01b      	beq.n	8008432 <TIM_TI1_SetConfig+0x66>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008400:	d017      	beq.n	8008432 <TIM_TI1_SetConfig+0x66>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	4a25      	ldr	r2, [pc, #148]	; (800849c <TIM_TI1_SetConfig+0xd0>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d013      	beq.n	8008432 <TIM_TI1_SetConfig+0x66>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4a24      	ldr	r2, [pc, #144]	; (80084a0 <TIM_TI1_SetConfig+0xd4>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d00f      	beq.n	8008432 <TIM_TI1_SetConfig+0x66>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4a23      	ldr	r2, [pc, #140]	; (80084a4 <TIM_TI1_SetConfig+0xd8>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00b      	beq.n	8008432 <TIM_TI1_SetConfig+0x66>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4a22      	ldr	r2, [pc, #136]	; (80084a8 <TIM_TI1_SetConfig+0xdc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d007      	beq.n	8008432 <TIM_TI1_SetConfig+0x66>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4a21      	ldr	r2, [pc, #132]	; (80084ac <TIM_TI1_SetConfig+0xe0>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d003      	beq.n	8008432 <TIM_TI1_SetConfig+0x66>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4a20      	ldr	r2, [pc, #128]	; (80084b0 <TIM_TI1_SetConfig+0xe4>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d101      	bne.n	8008436 <TIM_TI1_SetConfig+0x6a>
 8008432:	2301      	movs	r3, #1
 8008434:	e000      	b.n	8008438 <TIM_TI1_SetConfig+0x6c>
 8008436:	2300      	movs	r3, #0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d008      	beq.n	800844e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	f023 0303 	bic.w	r3, r3, #3
 8008442:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008444:	697a      	ldr	r2, [r7, #20]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4313      	orrs	r3, r2
 800844a:	617b      	str	r3, [r7, #20]
 800844c:	e003      	b.n	8008456 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f043 0301 	orr.w	r3, r3, #1
 8008454:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800845c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	011b      	lsls	r3, r3, #4
 8008462:	b2db      	uxtb	r3, r3
 8008464:	697a      	ldr	r2, [r7, #20]
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f023 030a 	bic.w	r3, r3, #10
 8008470:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	f003 030a 	and.w	r3, r3, #10
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	621a      	str	r2, [r3, #32]
}
 800848a:	bf00      	nop
 800848c:	371c      	adds	r7, #28
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	40010000 	.word	0x40010000
 800849c:	40000400 	.word	0x40000400
 80084a0:	40000800 	.word	0x40000800
 80084a4:	40000c00 	.word	0x40000c00
 80084a8:	40010400 	.word	0x40010400
 80084ac:	40014000 	.word	0x40014000
 80084b0:	40001800 	.word	0x40001800

080084b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6a1b      	ldr	r3, [r3, #32]
 80084c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	f023 0201 	bic.w	r2, r3, #1
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	f023 030a 	bic.w	r3, r3, #10
 80084f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	621a      	str	r2, [r3, #32]
}
 8008506:	bf00      	nop
 8008508:	371c      	adds	r7, #28
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008512:	b480      	push	{r7}
 8008514:	b087      	sub	sp, #28
 8008516:	af00      	add	r7, sp, #0
 8008518:	60f8      	str	r0, [r7, #12]
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	607a      	str	r2, [r7, #4]
 800851e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	f023 0210 	bic.w	r2, r3, #16
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	699b      	ldr	r3, [r3, #24]
 8008530:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800853e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	021b      	lsls	r3, r3, #8
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008550:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	031b      	lsls	r3, r3, #12
 8008556:	b29b      	uxth	r3, r3
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	4313      	orrs	r3, r2
 800855c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008564:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	693a      	ldr	r2, [r7, #16]
 800857e:	621a      	str	r2, [r3, #32]
}
 8008580:	bf00      	nop
 8008582:	371c      	adds	r7, #28
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800858c:	b480      	push	{r7}
 800858e:	b087      	sub	sp, #28
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6a1b      	ldr	r3, [r3, #32]
 800859c:	f023 0210 	bic.w	r2, r3, #16
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	699b      	ldr	r3, [r3, #24]
 80085a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a1b      	ldr	r3, [r3, #32]
 80085ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	031b      	lsls	r3, r3, #12
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	4313      	orrs	r3, r2
 80085c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	011b      	lsls	r3, r3, #4
 80085ce:	693a      	ldr	r2, [r7, #16]
 80085d0:	4313      	orrs	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	697a      	ldr	r2, [r7, #20]
 80085d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	621a      	str	r2, [r3, #32]
}
 80085e0:	bf00      	nop
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f023 0303 	bic.w	r3, r3, #3
 8008618:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4313      	orrs	r3, r2
 8008620:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008628:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	b2db      	uxtb	r3, r3
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	4313      	orrs	r3, r2
 8008634:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800863c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	021b      	lsls	r3, r3, #8
 8008642:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	4313      	orrs	r3, r2
 800864a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	621a      	str	r2, [r3, #32]
}
 8008658:	bf00      	nop
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008664:	b480      	push	{r7}
 8008666:	b087      	sub	sp, #28
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	69db      	ldr	r3, [r3, #28]
 8008682:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008690:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	021b      	lsls	r3, r3, #8
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	4313      	orrs	r3, r2
 800869a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	031b      	lsls	r3, r3, #12
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	697a      	ldr	r2, [r7, #20]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80086b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	031b      	lsls	r3, r3, #12
 80086bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	621a      	str	r2, [r3, #32]
}
 80086d2:	bf00      	nop
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086de:	b480      	push	{r7}
 80086e0:	b085      	sub	sp, #20
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	f043 0307 	orr.w	r3, r3, #7
 8008700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	609a      	str	r2, [r3, #8]
}
 8008708:	bf00      	nop
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	607a      	str	r2, [r7, #4]
 8008720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800872e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	021a      	lsls	r2, r3, #8
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	431a      	orrs	r2, r3
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	4313      	orrs	r3, r2
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	4313      	orrs	r3, r2
 8008740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	697a      	ldr	r2, [r7, #20]
 8008746:	609a      	str	r2, [r3, #8]
}
 8008748:	bf00      	nop
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008754:	b480      	push	{r7}
 8008756:	b087      	sub	sp, #28
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	f003 031f 	and.w	r3, r3, #31
 8008766:	2201      	movs	r2, #1
 8008768:	fa02 f303 	lsl.w	r3, r2, r3
 800876c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6a1a      	ldr	r2, [r3, #32]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	43db      	mvns	r3, r3
 8008776:	401a      	ands	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6a1a      	ldr	r2, [r3, #32]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f003 031f 	and.w	r3, r3, #31
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	fa01 f303 	lsl.w	r3, r1, r3
 800878c:	431a      	orrs	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	621a      	str	r2, [r3, #32]
}
 8008792:	bf00      	nop
 8008794:	371c      	adds	r7, #28
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
	...

080087a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d101      	bne.n	80087b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087b4:	2302      	movs	r3, #2
 80087b6:	e05a      	b.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a21      	ldr	r2, [pc, #132]	; (800887c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d022      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008804:	d01d      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a1d      	ldr	r2, [pc, #116]	; (8008880 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d018      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a1b      	ldr	r2, [pc, #108]	; (8008884 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d013      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a1a      	ldr	r2, [pc, #104]	; (8008888 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00e      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a18      	ldr	r2, [pc, #96]	; (800888c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d009      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a17      	ldr	r2, [pc, #92]	; (8008890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d004      	beq.n	8008842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a15      	ldr	r2, [pc, #84]	; (8008894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d10c      	bne.n	800885c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	4313      	orrs	r3, r2
 8008852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68ba      	ldr	r2, [r7, #8]
 800885a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2201      	movs	r2, #1
 8008860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3714      	adds	r7, #20
 8008872:	46bd      	mov	sp, r7
 8008874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008878:	4770      	bx	lr
 800887a:	bf00      	nop
 800887c:	40010000 	.word	0x40010000
 8008880:	40000400 	.word	0x40000400
 8008884:	40000800 	.word	0x40000800
 8008888:	40000c00 	.word	0x40000c00
 800888c:	40010400 	.word	0x40010400
 8008890:	40014000 	.word	0x40014000
 8008894:	40001800 	.word	0x40001800

08008898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e03f      	b.n	8008952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d106      	bne.n	80088ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f7fa fd6e 	bl	80033c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2224      	movs	r2, #36	; 0x24
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 f829 	bl	800895c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	691a      	ldr	r2, [r3, #16]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	695a      	ldr	r2, [r3, #20]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68da      	ldr	r2, [r3, #12]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2220      	movs	r2, #32
 8008944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2220      	movs	r2, #32
 800894c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
	...

0800895c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800895c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008960:	b0c0      	sub	sp, #256	; 0x100
 8008962:	af00      	add	r7, sp, #0
 8008964:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008978:	68d9      	ldr	r1, [r3, #12]
 800897a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	ea40 0301 	orr.w	r3, r0, r1
 8008984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	431a      	orrs	r2, r3
 8008994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	431a      	orrs	r2, r3
 800899c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a0:	69db      	ldr	r3, [r3, #28]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80089a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80089b4:	f021 010c 	bic.w	r1, r1, #12
 80089b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089c2:	430b      	orrs	r3, r1
 80089c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80089c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80089d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089d6:	6999      	ldr	r1, [r3, #24]
 80089d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	ea40 0301 	orr.w	r3, r0, r1
 80089e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80089e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	4b8f      	ldr	r3, [pc, #572]	; (8008c28 <UART_SetConfig+0x2cc>)
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d005      	beq.n	80089fc <UART_SetConfig+0xa0>
 80089f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	4b8d      	ldr	r3, [pc, #564]	; (8008c2c <UART_SetConfig+0x2d0>)
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d104      	bne.n	8008a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80089fc:	f7fd f81e 	bl	8005a3c <HAL_RCC_GetPCLK2Freq>
 8008a00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008a04:	e003      	b.n	8008a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a06:	f7fd f805 	bl	8005a14 <HAL_RCC_GetPCLK1Freq>
 8008a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a18:	f040 810c 	bne.w	8008c34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a20:	2200      	movs	r2, #0
 8008a22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008a26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008a2e:	4622      	mov	r2, r4
 8008a30:	462b      	mov	r3, r5
 8008a32:	1891      	adds	r1, r2, r2
 8008a34:	65b9      	str	r1, [r7, #88]	; 0x58
 8008a36:	415b      	adcs	r3, r3
 8008a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008a3e:	4621      	mov	r1, r4
 8008a40:	eb12 0801 	adds.w	r8, r2, r1
 8008a44:	4629      	mov	r1, r5
 8008a46:	eb43 0901 	adc.w	r9, r3, r1
 8008a4a:	f04f 0200 	mov.w	r2, #0
 8008a4e:	f04f 0300 	mov.w	r3, #0
 8008a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008a5e:	4690      	mov	r8, r2
 8008a60:	4699      	mov	r9, r3
 8008a62:	4623      	mov	r3, r4
 8008a64:	eb18 0303 	adds.w	r3, r8, r3
 8008a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008a6c:	462b      	mov	r3, r5
 8008a6e:	eb49 0303 	adc.w	r3, r9, r3
 8008a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	18db      	adds	r3, r3, r3
 8008a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8008a90:	4613      	mov	r3, r2
 8008a92:	eb42 0303 	adc.w	r3, r2, r3
 8008a96:	657b      	str	r3, [r7, #84]	; 0x54
 8008a98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008aa0:	f7f8 f8f2 	bl	8000c88 <__aeabi_uldivmod>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4b61      	ldr	r3, [pc, #388]	; (8008c30 <UART_SetConfig+0x2d4>)
 8008aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8008aae:	095b      	lsrs	r3, r3, #5
 8008ab0:	011c      	lsls	r4, r3, #4
 8008ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008abc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008ac0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008ac4:	4642      	mov	r2, r8
 8008ac6:	464b      	mov	r3, r9
 8008ac8:	1891      	adds	r1, r2, r2
 8008aca:	64b9      	str	r1, [r7, #72]	; 0x48
 8008acc:	415b      	adcs	r3, r3
 8008ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ad4:	4641      	mov	r1, r8
 8008ad6:	eb12 0a01 	adds.w	sl, r2, r1
 8008ada:	4649      	mov	r1, r9
 8008adc:	eb43 0b01 	adc.w	fp, r3, r1
 8008ae0:	f04f 0200 	mov.w	r2, #0
 8008ae4:	f04f 0300 	mov.w	r3, #0
 8008ae8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008aec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008af4:	4692      	mov	sl, r2
 8008af6:	469b      	mov	fp, r3
 8008af8:	4643      	mov	r3, r8
 8008afa:	eb1a 0303 	adds.w	r3, sl, r3
 8008afe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b02:	464b      	mov	r3, r9
 8008b04:	eb4b 0303 	adc.w	r3, fp, r3
 8008b08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008b18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008b20:	460b      	mov	r3, r1
 8008b22:	18db      	adds	r3, r3, r3
 8008b24:	643b      	str	r3, [r7, #64]	; 0x40
 8008b26:	4613      	mov	r3, r2
 8008b28:	eb42 0303 	adc.w	r3, r2, r3
 8008b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008b36:	f7f8 f8a7 	bl	8000c88 <__aeabi_uldivmod>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4b3b      	ldr	r3, [pc, #236]	; (8008c30 <UART_SetConfig+0x2d4>)
 8008b42:	fba3 2301 	umull	r2, r3, r3, r1
 8008b46:	095b      	lsrs	r3, r3, #5
 8008b48:	2264      	movs	r2, #100	; 0x64
 8008b4a:	fb02 f303 	mul.w	r3, r2, r3
 8008b4e:	1acb      	subs	r3, r1, r3
 8008b50:	00db      	lsls	r3, r3, #3
 8008b52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008b56:	4b36      	ldr	r3, [pc, #216]	; (8008c30 <UART_SetConfig+0x2d4>)
 8008b58:	fba3 2302 	umull	r2, r3, r3, r2
 8008b5c:	095b      	lsrs	r3, r3, #5
 8008b5e:	005b      	lsls	r3, r3, #1
 8008b60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008b64:	441c      	add	r4, r3
 8008b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008b74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008b78:	4642      	mov	r2, r8
 8008b7a:	464b      	mov	r3, r9
 8008b7c:	1891      	adds	r1, r2, r2
 8008b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008b80:	415b      	adcs	r3, r3
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008b88:	4641      	mov	r1, r8
 8008b8a:	1851      	adds	r1, r2, r1
 8008b8c:	6339      	str	r1, [r7, #48]	; 0x30
 8008b8e:	4649      	mov	r1, r9
 8008b90:	414b      	adcs	r3, r1
 8008b92:	637b      	str	r3, [r7, #52]	; 0x34
 8008b94:	f04f 0200 	mov.w	r2, #0
 8008b98:	f04f 0300 	mov.w	r3, #0
 8008b9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ba0:	4659      	mov	r1, fp
 8008ba2:	00cb      	lsls	r3, r1, #3
 8008ba4:	4651      	mov	r1, sl
 8008ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008baa:	4651      	mov	r1, sl
 8008bac:	00ca      	lsls	r2, r1, #3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	4642      	mov	r2, r8
 8008bb6:	189b      	adds	r3, r3, r2
 8008bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bbc:	464b      	mov	r3, r9
 8008bbe:	460a      	mov	r2, r1
 8008bc0:	eb42 0303 	adc.w	r3, r2, r3
 8008bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008bd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008bdc:	460b      	mov	r3, r1
 8008bde:	18db      	adds	r3, r3, r3
 8008be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008be2:	4613      	mov	r3, r2
 8008be4:	eb42 0303 	adc.w	r3, r2, r3
 8008be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008bee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008bf2:	f7f8 f849 	bl	8000c88 <__aeabi_uldivmod>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4b0d      	ldr	r3, [pc, #52]	; (8008c30 <UART_SetConfig+0x2d4>)
 8008bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8008c00:	095b      	lsrs	r3, r3, #5
 8008c02:	2164      	movs	r1, #100	; 0x64
 8008c04:	fb01 f303 	mul.w	r3, r1, r3
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	00db      	lsls	r3, r3, #3
 8008c0c:	3332      	adds	r3, #50	; 0x32
 8008c0e:	4a08      	ldr	r2, [pc, #32]	; (8008c30 <UART_SetConfig+0x2d4>)
 8008c10:	fba2 2303 	umull	r2, r3, r2, r3
 8008c14:	095b      	lsrs	r3, r3, #5
 8008c16:	f003 0207 	and.w	r2, r3, #7
 8008c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4422      	add	r2, r4
 8008c22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c24:	e105      	b.n	8008e32 <UART_SetConfig+0x4d6>
 8008c26:	bf00      	nop
 8008c28:	40011000 	.word	0x40011000
 8008c2c:	40011400 	.word	0x40011400
 8008c30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008c42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008c46:	4642      	mov	r2, r8
 8008c48:	464b      	mov	r3, r9
 8008c4a:	1891      	adds	r1, r2, r2
 8008c4c:	6239      	str	r1, [r7, #32]
 8008c4e:	415b      	adcs	r3, r3
 8008c50:	627b      	str	r3, [r7, #36]	; 0x24
 8008c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c56:	4641      	mov	r1, r8
 8008c58:	1854      	adds	r4, r2, r1
 8008c5a:	4649      	mov	r1, r9
 8008c5c:	eb43 0501 	adc.w	r5, r3, r1
 8008c60:	f04f 0200 	mov.w	r2, #0
 8008c64:	f04f 0300 	mov.w	r3, #0
 8008c68:	00eb      	lsls	r3, r5, #3
 8008c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008c6e:	00e2      	lsls	r2, r4, #3
 8008c70:	4614      	mov	r4, r2
 8008c72:	461d      	mov	r5, r3
 8008c74:	4643      	mov	r3, r8
 8008c76:	18e3      	adds	r3, r4, r3
 8008c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008c7c:	464b      	mov	r3, r9
 8008c7e:	eb45 0303 	adc.w	r3, r5, r3
 8008c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008c96:	f04f 0200 	mov.w	r2, #0
 8008c9a:	f04f 0300 	mov.w	r3, #0
 8008c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	008b      	lsls	r3, r1, #2
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008cac:	4621      	mov	r1, r4
 8008cae:	008a      	lsls	r2, r1, #2
 8008cb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008cb4:	f7f7 ffe8 	bl	8000c88 <__aeabi_uldivmod>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4b60      	ldr	r3, [pc, #384]	; (8008e40 <UART_SetConfig+0x4e4>)
 8008cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8008cc2:	095b      	lsrs	r3, r3, #5
 8008cc4:	011c      	lsls	r4, r3, #4
 8008cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008cd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008cd8:	4642      	mov	r2, r8
 8008cda:	464b      	mov	r3, r9
 8008cdc:	1891      	adds	r1, r2, r2
 8008cde:	61b9      	str	r1, [r7, #24]
 8008ce0:	415b      	adcs	r3, r3
 8008ce2:	61fb      	str	r3, [r7, #28]
 8008ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ce8:	4641      	mov	r1, r8
 8008cea:	1851      	adds	r1, r2, r1
 8008cec:	6139      	str	r1, [r7, #16]
 8008cee:	4649      	mov	r1, r9
 8008cf0:	414b      	adcs	r3, r1
 8008cf2:	617b      	str	r3, [r7, #20]
 8008cf4:	f04f 0200 	mov.w	r2, #0
 8008cf8:	f04f 0300 	mov.w	r3, #0
 8008cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d00:	4659      	mov	r1, fp
 8008d02:	00cb      	lsls	r3, r1, #3
 8008d04:	4651      	mov	r1, sl
 8008d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d0a:	4651      	mov	r1, sl
 8008d0c:	00ca      	lsls	r2, r1, #3
 8008d0e:	4610      	mov	r0, r2
 8008d10:	4619      	mov	r1, r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	4642      	mov	r2, r8
 8008d16:	189b      	adds	r3, r3, r2
 8008d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d1c:	464b      	mov	r3, r9
 8008d1e:	460a      	mov	r2, r1
 8008d20:	eb42 0303 	adc.w	r3, r2, r3
 8008d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008d34:	f04f 0200 	mov.w	r2, #0
 8008d38:	f04f 0300 	mov.w	r3, #0
 8008d3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008d40:	4649      	mov	r1, r9
 8008d42:	008b      	lsls	r3, r1, #2
 8008d44:	4641      	mov	r1, r8
 8008d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d4a:	4641      	mov	r1, r8
 8008d4c:	008a      	lsls	r2, r1, #2
 8008d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008d52:	f7f7 ff99 	bl	8000c88 <__aeabi_uldivmod>
 8008d56:	4602      	mov	r2, r0
 8008d58:	460b      	mov	r3, r1
 8008d5a:	4b39      	ldr	r3, [pc, #228]	; (8008e40 <UART_SetConfig+0x4e4>)
 8008d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008d60:	095b      	lsrs	r3, r3, #5
 8008d62:	2164      	movs	r1, #100	; 0x64
 8008d64:	fb01 f303 	mul.w	r3, r1, r3
 8008d68:	1ad3      	subs	r3, r2, r3
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	3332      	adds	r3, #50	; 0x32
 8008d6e:	4a34      	ldr	r2, [pc, #208]	; (8008e40 <UART_SetConfig+0x4e4>)
 8008d70:	fba2 2303 	umull	r2, r3, r2, r3
 8008d74:	095b      	lsrs	r3, r3, #5
 8008d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d7a:	441c      	add	r4, r3
 8008d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d80:	2200      	movs	r2, #0
 8008d82:	673b      	str	r3, [r7, #112]	; 0x70
 8008d84:	677a      	str	r2, [r7, #116]	; 0x74
 8008d86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008d8a:	4642      	mov	r2, r8
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	1891      	adds	r1, r2, r2
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	415b      	adcs	r3, r3
 8008d94:	60fb      	str	r3, [r7, #12]
 8008d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d9a:	4641      	mov	r1, r8
 8008d9c:	1851      	adds	r1, r2, r1
 8008d9e:	6039      	str	r1, [r7, #0]
 8008da0:	4649      	mov	r1, r9
 8008da2:	414b      	adcs	r3, r1
 8008da4:	607b      	str	r3, [r7, #4]
 8008da6:	f04f 0200 	mov.w	r2, #0
 8008daa:	f04f 0300 	mov.w	r3, #0
 8008dae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008db2:	4659      	mov	r1, fp
 8008db4:	00cb      	lsls	r3, r1, #3
 8008db6:	4651      	mov	r1, sl
 8008db8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dbc:	4651      	mov	r1, sl
 8008dbe:	00ca      	lsls	r2, r1, #3
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	4642      	mov	r2, r8
 8008dc8:	189b      	adds	r3, r3, r2
 8008dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dcc:	464b      	mov	r3, r9
 8008dce:	460a      	mov	r2, r1
 8008dd0:	eb42 0303 	adc.w	r3, r2, r3
 8008dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	663b      	str	r3, [r7, #96]	; 0x60
 8008de0:	667a      	str	r2, [r7, #100]	; 0x64
 8008de2:	f04f 0200 	mov.w	r2, #0
 8008de6:	f04f 0300 	mov.w	r3, #0
 8008dea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008dee:	4649      	mov	r1, r9
 8008df0:	008b      	lsls	r3, r1, #2
 8008df2:	4641      	mov	r1, r8
 8008df4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008df8:	4641      	mov	r1, r8
 8008dfa:	008a      	lsls	r2, r1, #2
 8008dfc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008e00:	f7f7 ff42 	bl	8000c88 <__aeabi_uldivmod>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4b0d      	ldr	r3, [pc, #52]	; (8008e40 <UART_SetConfig+0x4e4>)
 8008e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8008e0e:	095b      	lsrs	r3, r3, #5
 8008e10:	2164      	movs	r1, #100	; 0x64
 8008e12:	fb01 f303 	mul.w	r3, r1, r3
 8008e16:	1ad3      	subs	r3, r2, r3
 8008e18:	011b      	lsls	r3, r3, #4
 8008e1a:	3332      	adds	r3, #50	; 0x32
 8008e1c:	4a08      	ldr	r2, [pc, #32]	; (8008e40 <UART_SetConfig+0x4e4>)
 8008e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008e22:	095b      	lsrs	r3, r3, #5
 8008e24:	f003 020f 	and.w	r2, r3, #15
 8008e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4422      	add	r2, r4
 8008e30:	609a      	str	r2, [r3, #8]
}
 8008e32:	bf00      	nop
 8008e34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e3e:	bf00      	nop
 8008e40:	51eb851f 	.word	0x51eb851f

08008e44 <VL53L1_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008e50:	2300      	movs	r3, #0
 8008e52:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	613b      	str	r3, [r7, #16]
	VL53L1_static_nvm_managed_t  *pdata = &(pdev->stat_nvm);
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008e5e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8008e60:	78fb      	ldrb	r3, [r7, #3]
 8008e62:	085b      	lsrs	r3, r3, #1
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	461a      	mov	r2, r3
 8008e68:	2101      	movs	r1, #1
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f005 f9ec 	bl	800e248 <VL53L1_WrByte>
 8008e70:	4603      	mov	r3, r0
 8008e72:	75fb      	strb	r3, [r7, #23]
			DeviceAddress / 2);

	pdata->i2c_slave__device_address = (DeviceAddress / 2) & 0x7F;
 8008e74:	78fb      	ldrb	r3, [r7, #3]
 8008e76:	085b      	lsrs	r3, r3, #1
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8008e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d105      	bne.n	8008eb0 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f001 f85c 	bl	8009f64 <VL53L1_data_init>
 8008eac:	4603      	mov	r3, r0
 8008eae:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 8008eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d103      	bne.n	8008ec0 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	73bb      	strb	r3, [r7, #14]
 8008ec4:	e012      	b.n	8008eec <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 8008ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d112      	bne.n	8008ef4 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8008ece:	7bbb      	ldrb	r3, [r7, #14]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 fbd1 	bl	800967e <VL53L1_SetLimitCheckEnable>
 8008edc:	4603      	mov	r3, r0
 8008ede:	461a      	mov	r2, r3
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	73bb      	strb	r3, [r7, #14]
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d9e9      	bls.n	8008ec6 <VL53L1_DataInit+0x36>
 8008ef2:	e000      	b.n	8008ef6 <VL53L1_DataInit+0x66>
		else
			break;
 8008ef4:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3710      	adds	r7, #16
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b084      	sub	sp, #16
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2203      	movs	r2, #3
 8008f12:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8008f16:	2320      	movs	r3, #32
 8008f18:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	7bba      	ldrb	r2, [r7, #14]
 8008f1e:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8008f20:	2108      	movs	r1, #8
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f8f7 	bl	8009116 <VL53L1_SetPresetMode>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2208      	movs	r2, #8
 8008f30:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 8008f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 8008f4c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f005 f89f 	bl	800e094 <VL53L1_poll_for_boot_completion>
 8008f56:	4603      	mov	r3, r0
 8008f58:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 8008f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	603a      	str	r2, [r7, #0]
 8008f72:	71fb      	strb	r3, [r7, #7]
 8008f74:	460b      	mov	r3, r1
 8008f76:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8008f7c:	4a2b      	ldr	r2, [pc, #172]	; (800902c <ComputeDevicePresetMode+0xc4>)
 8008f7e:	f107 0310 	add.w	r3, r7, #16
 8008f82:	6812      	ldr	r2, [r2, #0]
 8008f84:	4611      	mov	r1, r2
 8008f86:	8019      	strh	r1, [r3, #0]
 8008f88:	3302      	adds	r3, #2
 8008f8a:	0c12      	lsrs	r2, r2, #16
 8008f8c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8008f8e:	4a28      	ldr	r2, [pc, #160]	; (8009030 <ComputeDevicePresetMode+0xc8>)
 8008f90:	f107 030c 	add.w	r3, r7, #12
 8008f94:	6812      	ldr	r2, [r2, #0]
 8008f96:	4611      	mov	r1, r2
 8008f98:	8019      	strh	r1, [r3, #0]
 8008f9a:	3302      	adds	r3, #2
 8008f9c:	0c12      	lsrs	r2, r2, #16
 8008f9e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8008fa0:	4a24      	ldr	r2, [pc, #144]	; (8009034 <ComputeDevicePresetMode+0xcc>)
 8008fa2:	f107 0308 	add.w	r3, r7, #8
 8008fa6:	6812      	ldr	r2, [r2, #0]
 8008fa8:	4611      	mov	r1, r2
 8008faa:	8019      	strh	r1, [r3, #0]
 8008fac:	3302      	adds	r3, #2
 8008fae:	0c12      	lsrs	r2, r2, #16
 8008fb0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8008fb8:	79bb      	ldrb	r3, [r7, #6]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d002      	beq.n	8008fc4 <ComputeDevicePresetMode+0x5c>
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d003      	beq.n	8008fca <ComputeDevicePresetMode+0x62>
 8008fc2:	e005      	b.n	8008fd0 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	75bb      	strb	r3, [r7, #22]
		break;
 8008fc8:	e004      	b.n	8008fd4 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	75bb      	strb	r3, [r7, #22]
		break;
 8008fce:	e001      	b.n	8008fd4 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	2b08      	cmp	r3, #8
 8008fd8:	d015      	beq.n	8009006 <ComputeDevicePresetMode+0x9e>
 8008fda:	2b08      	cmp	r3, #8
 8008fdc:	dc1b      	bgt.n	8009016 <ComputeDevicePresetMode+0xae>
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d009      	beq.n	8008ff6 <ComputeDevicePresetMode+0x8e>
 8008fe2:	2b04      	cmp	r3, #4
 8008fe4:	d117      	bne.n	8009016 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8008fe6:	7dbb      	ldrb	r3, [r7, #22]
 8008fe8:	3318      	adds	r3, #24
 8008fea:	443b      	add	r3, r7
 8008fec:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	701a      	strb	r2, [r3, #0]
		break;
 8008ff4:	e011      	b.n	800901a <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8008ff6:	7dbb      	ldrb	r3, [r7, #22]
 8008ff8:	3318      	adds	r3, #24
 8008ffa:	443b      	add	r3, r7
 8008ffc:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	701a      	strb	r2, [r3, #0]
		break;
 8009004:	e009      	b.n	800901a <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8009006:	7dbb      	ldrb	r3, [r7, #22]
 8009008:	3318      	adds	r3, #24
 800900a:	443b      	add	r3, r7
 800900c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	701a      	strb	r2, [r3, #0]
		break;
 8009014:	e001      	b.n	800901a <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8009016:	23f8      	movs	r3, #248	; 0xf8
 8009018:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800901a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800901e:	4618      	mov	r0, r3
 8009020:	371c      	adds	r7, #28
 8009022:	46bd      	mov	sp, r7
 8009024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	0801258c 	.word	0x0801258c
 8009030:	08012590 	.word	0x08012590
 8009034:	08012594 	.word	0x08012594

08009038 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8009038:	b5b0      	push	{r4, r5, r7, lr}
 800903a:	b08e      	sub	sp, #56	; 0x38
 800903c:	af04      	add	r7, sp, #16
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	607b      	str	r3, [r7, #4]
 8009042:	460b      	mov	r3, r1
 8009044:	72fb      	strb	r3, [r7, #11]
 8009046:	4613      	mov	r3, r2
 8009048:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800904a:	2300      	movs	r3, #0
 800904c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8009054:	2300      	movs	r3, #0
 8009056:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8009058:	2300      	movs	r3, #0
 800905a:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800905c:	2300      	movs	r3, #0
 800905e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8009060:	7afb      	ldrb	r3, [r7, #11]
 8009062:	2b03      	cmp	r3, #3
 8009064:	d002      	beq.n	800906c <SetPresetMode+0x34>
 8009066:	7afb      	ldrb	r3, [r7, #11]
 8009068:	2b08      	cmp	r3, #8
 800906a:	d103      	bne.n	8009074 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 800906c:	2340      	movs	r3, #64	; 0x40
 800906e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009072:	e002      	b.n	800907a <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8009074:	2320      	movs	r3, #32
 8009076:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800907a:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800907e:	7ab9      	ldrb	r1, [r7, #10]
 8009080:	7afb      	ldrb	r3, [r7, #11]
 8009082:	4618      	mov	r0, r3
 8009084:	f7ff ff70 	bl	8008f68 <ComputeDevicePresetMode>
 8009088:	4603      	mov	r3, r0
 800908a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 800908e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009092:	2b00      	cmp	r3, #0
 8009094:	d112      	bne.n	80090bc <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8009096:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800909a:	f107 001c 	add.w	r0, r7, #28
 800909e:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80090a2:	f107 0314 	add.w	r3, r7, #20
 80090a6:	9301      	str	r3, [sp, #4]
 80090a8:	f107 0318 	add.w	r3, r7, #24
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	4603      	mov	r3, r0
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f001 fa17 	bl	800a4e4 <VL53L1_get_preset_mode_timing_cfg>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 80090bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d112      	bne.n	80090ea <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 80090c4:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80090c8:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 80090ca:	69fd      	ldr	r5, [r7, #28]
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	697a      	ldr	r2, [r7, #20]
 80090d0:	6879      	ldr	r1, [r7, #4]
 80090d2:	9102      	str	r1, [sp, #8]
 80090d4:	9201      	str	r2, [sp, #4]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	462b      	mov	r3, r5
 80090da:	4622      	mov	r2, r4
 80090dc:	4601      	mov	r1, r0
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f001 faaa 	bl	800a638 <VL53L1_set_preset_mode>
 80090e4:	4603      	mov	r3, r0
 80090e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80090ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d103      	bne.n	80090fa <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80090f8:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 80090fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d103      	bne.n	800910a <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	7afa      	ldrb	r2, [r7, #11]
 8009106:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800910a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800910e:	4618      	mov	r0, r3
 8009110:	3728      	adds	r7, #40	; 0x28
 8009112:	46bd      	mov	sp, r7
 8009114:	bdb0      	pop	{r4, r5, r7, pc}

08009116 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8009116:	b580      	push	{r7, lr}
 8009118:	b084      	sub	sp, #16
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	460b      	mov	r3, r1
 8009120:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8009126:	2303      	movs	r3, #3
 8009128:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f003 fdb4 	bl	800cc98 <VL53L1_low_power_auto_data_init>
 8009130:	4603      	mov	r3, r0
 8009132:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 8009134:	7bba      	ldrb	r2, [r7, #14]
 8009136:	78f9      	ldrb	r1, [r7, #3]
 8009138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f7ff ff7b 	bl	8009038 <SetPresetMode>
 8009142:	4603      	mov	r3, r0
 8009144:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8009146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d117      	bne.n	800917e <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800914e:	78fb      	ldrb	r3, [r7, #3]
 8009150:	2b04      	cmp	r3, #4
 8009152:	d005      	beq.n	8009160 <VL53L1_SetPresetMode+0x4a>
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	2b03      	cmp	r3, #3
 8009158:	d002      	beq.n	8009160 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800915a:	78fb      	ldrb	r3, [r7, #3]
 800915c:	2b08      	cmp	r3, #8
 800915e:	d107      	bne.n	8009170 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8009160:	f24a 0128 	movw	r1, #41000	; 0xa028
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f891 	bl	800928c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800916a:	4603      	mov	r3, r0
 800916c:	73fb      	strb	r3, [r7, #15]
 800916e:	e006      	b.n	800917e <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8009170:	f248 2135 	movw	r1, #33333	; 0x8235
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f889 	bl	800928c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800917a:	4603      	mov	r3, r0
 800917c:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 800917e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d106      	bne.n	8009194 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8009186:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fa0a 	bl	80095a4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009194:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009198:	4618      	mov	r0, r3
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b088      	sub	sp, #32
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80091ac:	2300      	movs	r3, #0
 80091ae:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80091b4:	2300      	movs	r3, #0
 80091b6:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 80091c2:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d008      	beq.n	80091dc <VL53L1_SetDistanceMode+0x3c>
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d005      	beq.n	80091dc <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	2b03      	cmp	r3, #3
 80091d4:	d002      	beq.n	80091dc <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 80091d6:	f06f 0303 	mvn.w	r3, #3
 80091da:	e052      	b.n	8009282 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 80091dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d107      	bne.n	80091f4 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80091e4:	f107 0308 	add.w	r3, r7, #8
 80091e8:	4619      	mov	r1, r3
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f001 f923 	bl	800a436 <VL53L1_get_user_zone>
 80091f0:	4603      	mov	r3, r0
 80091f2:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80091fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10a      	bne.n	8009218 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8009202:	f107 0314 	add.w	r3, r7, #20
 8009206:	f107 0210 	add.w	r2, r7, #16
 800920a:	f107 010c 	add.w	r1, r7, #12
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 f84c 	bl	800a2ac <VL53L1_get_timeouts_us>
 8009214:	4603      	mov	r3, r0
 8009216:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8009218:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d107      	bne.n	8009230 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 8009220:	78fa      	ldrb	r2, [r7, #3]
 8009222:	7fb9      	ldrb	r1, [r7, #30]
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7ff ff06 	bl	8009038 <SetPresetMode>
 800922c:	4603      	mov	r3, r0
 800922e:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8009230:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d103      	bne.n	8009240 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	78fa      	ldrb	r2, [r7, #3]
 800923c:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8009240:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d10e      	bne.n	8009266 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8009248:	68f9      	ldr	r1, [r7, #12]
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 fff4 	bl	800a23c <VL53L1_set_timeouts_us>
 8009254:	4603      	mov	r3, r0
 8009256:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8009258:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d102      	bne.n	8009266 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8009266:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d107      	bne.n	800927e <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800926e:	f107 0308 	add.w	r3, r7, #8
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f001 f8bb 	bl	800a3f0 <VL53L1_set_user_zone>
 800927a:	4603      	mov	r3, r0
 800927c:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 800927e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3720      	adds	r7, #32
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
	...

0800928c <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08c      	sub	sp, #48	; 0x30
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009296:	2300      	movs	r3, #0
 8009298:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80092a8:	2300      	movs	r3, #0
 80092aa:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80092b0:	4b64      	ldr	r3, [pc, #400]	; (8009444 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 80092b2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	4a64      	ldr	r2, [pc, #400]	; (8009448 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d902      	bls.n	80092c2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80092bc:	23fc      	movs	r3, #252	; 0xfc
 80092be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 80092c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d109      	bne.n	80092de <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80092ca:	f107 031a 	add.w	r3, r7, #26
 80092ce:	461a      	mov	r2, r3
 80092d0:	2105      	movs	r1, #5
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fa8d 	bl	80097f2 <VL53L1_GetSequenceStepEnable>
 80092d8:	4603      	mov	r3, r0
 80092da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80092de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d109      	bne.n	80092fa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80092e6:	f107 0319 	add.w	r3, r7, #25
 80092ea:	461a      	mov	r2, r3
 80092ec:	2106      	movs	r1, #6
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fa7f 	bl	80097f2 <VL53L1_GetSequenceStepEnable>
 80092f4:	4603      	mov	r3, r0
 80092f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 80092fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10b      	bne.n	800931a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8009302:	f107 0314 	add.w	r3, r7, #20
 8009306:	f107 0210 	add.w	r2, r7, #16
 800930a:	f107 010c 	add.w	r1, r7, #12
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 ffcc 	bl	800a2ac <VL53L1_get_timeouts_us>
 8009314:	4603      	mov	r3, r0
 8009316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 800931a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800931e:	2b00      	cmp	r3, #0
 8009320:	f040 8081 	bne.w	8009426 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800932a:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 800932c:	2300      	movs	r3, #0
 800932e:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8009330:	2301      	movs	r3, #1
 8009332:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8009334:	7efb      	ldrb	r3, [r7, #27]
 8009336:	2b08      	cmp	r3, #8
 8009338:	d026      	beq.n	8009388 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 800933a:	2b08      	cmp	r3, #8
 800933c:	dc43      	bgt.n	80093c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 800933e:	2b03      	cmp	r3, #3
 8009340:	d00f      	beq.n	8009362 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 8009342:	2b04      	cmp	r3, #4
 8009344:	d13f      	bne.n	80093c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8009346:	7ebb      	ldrb	r3, [r7, #26]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d002      	beq.n	8009352 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 800934c:	7e7b      	ldrb	r3, [r7, #25]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d103      	bne.n	800935a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 8009352:	f241 3388 	movw	r3, #5000	; 0x1388
 8009356:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8009358:	e038      	b.n	80093cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 800935a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800935e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009360:	e034      	b.n	80093cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8009368:	7ebb      	ldrb	r3, [r7, #26]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d002      	beq.n	8009374 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 800936e:	7e7b      	ldrb	r3, [r7, #25]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d103      	bne.n	800937c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8009374:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8009378:	62bb      	str	r3, [r7, #40]	; 0x28
 800937a:	e002      	b.n	8009382 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 800937c:	f245 4360 	movw	r3, #21600	; 0x5460
 8009380:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8009382:	2302      	movs	r3, #2
 8009384:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8009386:	e021      	b.n	80093cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 800938e:	23f5      	movs	r3, #245	; 0xf5
 8009390:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8009392:	f107 0308 	add.w	r3, r7, #8
 8009396:	461a      	mov	r2, r3
 8009398:	f248 0136 	movw	r1, #32822	; 0x8036
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f001 fffb 	bl	800b398 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	dd07      	ble.n	80093b8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	22f5      	movs	r2, #245	; 0xf5
 80093ac:	fb02 f303 	mul.w	r3, r2, r3
 80093b0:	461a      	mov	r2, r3
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	4413      	add	r3, r2
 80093b6:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 80093be:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80093c0:	2302      	movs	r3, #2
 80093c2:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 80093c4:	e002      	b.n	80093cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80093c6:	23f8      	movs	r3, #248	; 0xf8
 80093c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d803      	bhi.n	80093dc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80093d4:	23fc      	movs	r3, #252	; 0xfc
 80093d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80093da:	e003      	b.n	80093e4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e0:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80093e2:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80093e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d11c      	bne.n	8009426 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	69fa      	ldr	r2, [r7, #28]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d203      	bcs.n	80093fc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80093f4:	23fc      	movs	r3, #252	; 0xfc
 80093f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80093fa:	e00d      	b.n	8009418 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	fbb2 f3f3 	udiv	r3, r2, r3
 8009404:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	693a      	ldr	r2, [r7, #16]
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 ff15 	bl	800a23c <VL53L1_set_timeouts_us>
 8009412:	4603      	mov	r3, r0
 8009414:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8009418:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800941c:	2b00      	cmp	r3, #0
 800941e:	d102      	bne.n	8009426 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8009426:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800942a:	2b00      	cmp	r3, #0
 800942c:	d103      	bne.n	8009436 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009436:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800943a:	4618      	mov	r0, r3
 800943c:	3730      	adds	r7, #48	; 0x30
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	00086470 	.word	0x00086470
 8009448:	00989680 	.word	0x00989680

0800944c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08c      	sub	sp, #48	; 0x30
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009456:	2300      	movs	r3, #0
 8009458:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8009470:	2300      	movs	r3, #0
 8009472:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2200      	movs	r2, #0
 8009478:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 800947a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800947e:	2b00      	cmp	r3, #0
 8009480:	d109      	bne.n	8009496 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8009482:	f107 031b 	add.w	r3, r7, #27
 8009486:	461a      	mov	r2, r3
 8009488:	2105      	movs	r1, #5
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 f9b1 	bl	80097f2 <VL53L1_GetSequenceStepEnable>
 8009490:	4603      	mov	r3, r0
 8009492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8009496:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800949a:	2b00      	cmp	r3, #0
 800949c:	d109      	bne.n	80094b2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 800949e:	f107 031a 	add.w	r3, r7, #26
 80094a2:	461a      	mov	r2, r3
 80094a4:	2106      	movs	r1, #6
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f9a3 	bl	80097f2 <VL53L1_GetSequenceStepEnable>
 80094ac:	4603      	mov	r3, r0
 80094ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 80094b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10b      	bne.n	80094d2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 80094ba:	f107 0310 	add.w	r3, r7, #16
 80094be:	f107 0214 	add.w	r2, r7, #20
 80094c2:	f107 010c 	add.w	r1, r7, #12
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 fef0 	bl	800a2ac <VL53L1_get_timeouts_us>
 80094cc:	4603      	mov	r3, r0
 80094ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 80094d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d156      	bne.n	8009588 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 80094e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 80094e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d02a      	beq.n	8009542 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 80094ec:	2b08      	cmp	r3, #8
 80094ee:	dc47      	bgt.n	8009580 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d012      	beq.n	800951a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d143      	bne.n	8009580 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80094f8:	7efb      	ldrb	r3, [r7, #27]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d002      	beq.n	8009504 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 80094fe:	7ebb      	ldrb	r3, [r7, #26]
 8009500:	2b01      	cmp	r3, #1
 8009502:	d105      	bne.n	8009510 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800950a:	3308      	adds	r3, #8
 800950c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 800950e:	e03c      	b.n	800958a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8009516:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009518:	e037      	b.n	800958a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 800951a:	7efb      	ldrb	r3, [r7, #27]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d002      	beq.n	8009526 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8009520:	7ebb      	ldrb	r3, [r7, #26]
 8009522:	2b01      	cmp	r3, #1
 8009524:	d106      	bne.n	8009534 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 800952c:	3334      	adds	r3, #52	; 0x34
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8009532:	e02a      	b.n	800958a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 800953a:	3330      	adds	r3, #48	; 0x30
 800953c:	005b      	lsls	r3, r3, #1
 800953e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8009540:	e023      	b.n	800958a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8009542:	23f5      	movs	r3, #245	; 0xf5
 8009544:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8009546:	f107 0308 	add.w	r3, r7, #8
 800954a:	461a      	mov	r2, r3
 800954c:	f248 0136 	movw	r1, #32822	; 0x8036
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 ff21 	bl	800b398 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	2b00      	cmp	r3, #0
 800955a:	dd07      	ble.n	800956c <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	22f5      	movs	r2, #245	; 0xf5
 8009560:	fb02 f303 	mul.w	r3, r2, r3
 8009564:	461a      	mov	r2, r3
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	4413      	add	r3, r2
 800956a:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8009572:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	005b      	lsls	r3, r3, #1
 8009578:	69fa      	ldr	r2, [r7, #28]
 800957a:	4413      	add	r3, r2
 800957c:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 800957e:	e004      	b.n	800958a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8009580:	23f8      	movs	r3, #248	; 0xf8
 8009582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009586:	e000      	b.n	800958a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 8009588:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 800958a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009596:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009598:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800959c:	4618      	mov	r0, r3
 800959e:	3730      	adds	r7, #48	; 0x30
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	019b      	lsls	r3, r3, #6
 80095ba:	4a09      	ldr	r2, [pc, #36]	; (80095e0 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 80095bc:	fba2 2303 	umull	r2, r3, r2, r3
 80095c0:	099b      	lsrs	r3, r3, #6
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	4413      	add	r3, r2
 80095c6:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80095c8:	68b9      	ldr	r1, [r7, #8]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 fde7 	bl	800a19e <VL53L1_set_inter_measurement_period_ms>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 80095d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	10624dd3 	.word	0x10624dd3

080095e4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80095ee:	2300      	movs	r3, #0
 80095f0:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 80095f2:	f107 0308 	add.w	r3, r7, #8
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fdf9 	bl	800a1f0 <VL53L1_get_inter_measurement_period_ms>
 80095fe:	4603      	mov	r3, r0
 8009600:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	019b      	lsls	r3, r3, #6
 8009608:	4907      	ldr	r1, [pc, #28]	; (8009628 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 800960a:	fba1 1303 	umull	r1, r3, r1, r3
 800960e:	099b      	lsrs	r3, r3, #6
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 800961a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	10624dd3 	.word	0x10624dd3

0800962c <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	460b      	mov	r3, r1
 8009636:	607a      	str	r2, [r7, #4]
 8009638:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800963a:	2300      	movs	r3, #0
 800963c:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800963e:	897b      	ldrh	r3, [r7, #10]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d002      	beq.n	800964a <SetLimitValue+0x1e>
 8009644:	2b01      	cmp	r3, #1
 8009646:	d009      	beq.n	800965c <SetLimitValue+0x30>
 8009648:	e011      	b.n	800966e <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	0b9b      	lsrs	r3, r3, #14
 800964e:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8009650:	8abb      	ldrh	r3, [r7, #20]
 8009652:	4619      	mov	r1, r3
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f001 f97b 	bl	800a950 <VL53L1_set_lite_sigma_threshold>
		break;
 800965a:	e00a      	b.n	8009672 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	0a5b      	lsrs	r3, r3, #9
 8009660:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8009662:	8abb      	ldrh	r3, [r7, #20]
 8009664:	4619      	mov	r1, r3
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f001 f99e 	bl	800a9a8 <VL53L1_set_lite_min_count_rate>
		break;
 800966c:	e001      	b.n	8009672 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800966e:	23fc      	movs	r3, #252	; 0xfc
 8009670:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009672:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b084      	sub	sp, #16
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	460b      	mov	r3, r1
 8009688:	807b      	strh	r3, [r7, #2]
 800968a:	4613      	mov	r3, r2
 800968c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800968e:	2300      	movs	r3, #0
 8009690:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8009692:	2300      	movs	r3, #0
 8009694:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009696:	887b      	ldrh	r3, [r7, #2]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d902      	bls.n	80096a2 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 800969c:	23fc      	movs	r3, #252	; 0xfc
 800969e:	73fb      	strb	r3, [r7, #15]
 80096a0:	e014      	b.n	80096cc <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 80096a2:	787b      	ldrb	r3, [r7, #1]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	60bb      	str	r3, [r7, #8]
 80096ac:	e006      	b.n	80096bc <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80096ae:	887b      	ldrh	r3, [r7, #2]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	33e0      	adds	r3, #224	; 0xe0
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80096bc:	887b      	ldrh	r3, [r7, #2]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f7ff ffb2 	bl	800962c <SetLimitValue>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 80096cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10c      	bne.n	80096ee <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80096d4:	787b      	ldrb	r3, [r7, #1]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	bf14      	ite	ne
 80096da:	2301      	movne	r3, #1
 80096dc:	2300      	moveq	r3, #0
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	887b      	ldrh	r3, [r7, #2]
 80096e2:	4611      	mov	r1, r2
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	4413      	add	r3, r2
 80096e8:	460a      	mov	r2, r1
 80096ea:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80096ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b087      	sub	sp, #28
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	460b      	mov	r3, r1
 8009704:	607a      	str	r2, [r7, #4]
 8009706:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009708:	2300      	movs	r3, #0
 800970a:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 800970c:	897b      	ldrh	r3, [r7, #10]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d905      	bls.n	800971e <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8009712:	23fc      	movs	r3, #252	; 0xfc
 8009714:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
 800971c:	e008      	b.n	8009730 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800971e:	897b      	ldrh	r3, [r7, #10]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	4413      	add	r3, r2
 8009724:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8009728:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	7dba      	ldrb	r2, [r7, #22]
 800972e:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8009730:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009734:	4618      	mov	r0, r3
 8009736:	371c      	adds	r7, #28
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b088      	sub	sp, #32
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	460b      	mov	r3, r1
 800974a:	607a      	str	r2, [r7, #4]
 800974c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800974e:	2300      	movs	r3, #0
 8009750:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009756:	897b      	ldrh	r3, [r7, #10]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d002      	beq.n	8009762 <VL53L1_GetLimitCheckValue+0x22>
 800975c:	2b01      	cmp	r3, #1
 800975e:	d00c      	beq.n	800977a <VL53L1_GetLimitCheckValue+0x3a>
 8009760:	e017      	b.n	8009792 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8009762:	f107 0314 	add.w	r3, r7, #20
 8009766:	4619      	mov	r1, r3
 8009768:	68f8      	ldr	r0, [r7, #12]
 800976a:	f001 f8db 	bl	800a924 <VL53L1_get_lite_sigma_threshold>
 800976e:	4603      	mov	r3, r0
 8009770:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8009772:	8abb      	ldrh	r3, [r7, #20]
 8009774:	039b      	lsls	r3, r3, #14
 8009776:	61bb      	str	r3, [r7, #24]
		break;
 8009778:	e00d      	b.n	8009796 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 800977a:	f107 0316 	add.w	r3, r7, #22
 800977e:	4619      	mov	r1, r3
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f001 f8fb 	bl	800a97c <VL53L1_get_lite_min_count_rate>
 8009786:	4603      	mov	r3, r0
 8009788:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 800978a:	8afb      	ldrh	r3, [r7, #22]
 800978c:	025b      	lsls	r3, r3, #9
 800978e:	61bb      	str	r3, [r7, #24]
		break;
 8009790:	e001      	b.n	8009796 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8009792:	23fc      	movs	r3, #252	; 0xfc
 8009794:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8009796:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d123      	bne.n	80097e6 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d110      	bne.n	80097c6 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80097a4:	897b      	ldrh	r3, [r7, #10]
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	33e0      	adds	r3, #224	; 0xe0
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	69ba      	ldr	r2, [r7, #24]
 80097b6:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80097b8:	897b      	ldrh	r3, [r7, #10]
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	4413      	add	r3, r2
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 80097c4:	e00f      	b.n	80097e6 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	69ba      	ldr	r2, [r7, #24]
 80097ca:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80097cc:	897b      	ldrh	r3, [r7, #10]
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	33e0      	adds	r3, #224	; 0xe0
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	4413      	add	r3, r2
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80097da:	897b      	ldrh	r3, [r7, #10]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	4413      	add	r3, r2
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 80097e6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3720      	adds	r7, #32
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b086      	sub	sp, #24
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	460b      	mov	r3, r1
 80097fc:	607a      	str	r2, [r7, #4]
 80097fe:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009800:	2300      	movs	r3, #0
 8009802:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8009804:	7afb      	ldrb	r3, [r7, #11]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	4619      	mov	r1, r3
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 fdb9 	bl	800a382 <VL53L1_get_sequence_config_bit>
 8009810:	4603      	mov	r3, r0
 8009812:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8009814:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009828:	2300      	movs	r3, #0
 800982a:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	789b      	ldrb	r3, [r3, #2]
 8009830:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8009832:	7dbb      	ldrb	r3, [r7, #22]
 8009834:	2b40      	cmp	r3, #64	; 0x40
 8009836:	d002      	beq.n	800983e <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fa6b 	bl	8009d14 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8009844:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 8009846:	7d7b      	ldrb	r3, [r7, #21]
 8009848:	2b63      	cmp	r3, #99	; 0x63
 800984a:	dc12      	bgt.n	8009872 <VL53L1_StartMeasurement+0x52>
 800984c:	2b62      	cmp	r3, #98	; 0x62
 800984e:	da0d      	bge.n	800986c <VL53L1_StartMeasurement+0x4c>
 8009850:	2b05      	cmp	r3, #5
 8009852:	dc0e      	bgt.n	8009872 <VL53L1_StartMeasurement+0x52>
 8009854:	2b04      	cmp	r3, #4
 8009856:	da09      	bge.n	800986c <VL53L1_StartMeasurement+0x4c>
 8009858:	2b02      	cmp	r3, #2
 800985a:	dc02      	bgt.n	8009862 <VL53L1_StartMeasurement+0x42>
 800985c:	2b00      	cmp	r3, #0
 800985e:	da05      	bge.n	800986c <VL53L1_StartMeasurement+0x4c>
 8009860:	e007      	b.n	8009872 <VL53L1_StartMeasurement+0x52>
 8009862:	2b03      	cmp	r3, #3
 8009864:	d105      	bne.n	8009872 <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8009866:	2300      	movs	r3, #0
 8009868:	75fb      	strb	r3, [r7, #23]
		break;
 800986a:	e004      	b.n	8009876 <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 800986c:	23f2      	movs	r3, #242	; 0xf2
 800986e:	75fb      	strb	r3, [r7, #23]
		break;
 8009870:	e001      	b.n	8009876 <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8009872:	23fd      	movs	r3, #253	; 0xfd
 8009874:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 8009876:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d11f      	bne.n	80098be <VL53L1_StartMeasurement+0x9e>
 800987e:	7dbb      	ldrb	r3, [r7, #22]
 8009880:	2b40      	cmp	r3, #64	; 0x40
 8009882:	d11c      	bne.n	80098be <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8009884:	f107 0310 	add.w	r3, r7, #16
 8009888:	4619      	mov	r1, r3
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7ff fdde 	bl	800944c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8009890:	4603      	mov	r3, r0
 8009892:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	4a17      	ldr	r2, [pc, #92]	; (80098f4 <VL53L1_StartMeasurement+0xd4>)
 8009898:	fba2 2303 	umull	r2, r3, r2, r3
 800989c:	099b      	lsrs	r3, r3, #6
 800989e:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80098a0:	f107 030c 	add.w	r3, r7, #12
 80098a4:	4619      	mov	r1, r3
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f7ff fe9c 	bl	80095e4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80098ac:	4603      	mov	r3, r0
 80098ae:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	1d1a      	adds	r2, r3, #4
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d901      	bls.n	80098be <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80098ba:	23fc      	movs	r3, #252	; 0xfc
 80098bc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 80098be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d107      	bne.n	80098d6 <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 80098c6:	7dbb      	ldrb	r3, [r7, #22]
 80098c8:	2206      	movs	r2, #6
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f001 f8a1 	bl	800aa14 <VL53L1_init_and_start_range>
 80098d2:	4603      	mov	r3, r0
 80098d4:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 80098d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d103      	bne.n	80098e6 <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2204      	movs	r2, #4
 80098e2:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 80098e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3718      	adds	r7, #24
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	bf00      	nop
 80098f4:	10624dd3 	.word	0x10624dd3

080098f8 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009900:	2300      	movs	r3, #0
 8009902:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	789b      	ldrb	r3, [r3, #2]
 8009908:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800990a:	7bbb      	ldrb	r3, [r7, #14]
 800990c:	4619      	mov	r1, r3
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 fc0e 	bl	800b130 <VL53L1_clear_interrupt_and_enable_next_range>
 8009914:	4603      	mov	r3, r0
 8009916:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8009918:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3710      	adds	r7, #16
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800992e:	2300      	movs	r3, #0
 8009930:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f004 fb74 	bl	800e022 <VL53L1_is_new_data_ready>
 800993a:	4603      	mov	r3, r0
 800993c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800993e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800994c:	b480      	push	{r7}
 800994e:	b08d      	sub	sp, #52	; 0x34
 8009950:	af00      	add	r7, sp, #0
 8009952:	4603      	mov	r3, r0
 8009954:	603a      	str	r2, [r7, #0]
 8009956:	71fb      	strb	r3, [r7, #7]
 8009958:	460b      	mov	r3, r1
 800995a:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800995c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8009960:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 8009962:	231e      	movs	r3, #30
 8009964:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8009966:	4b33      	ldr	r3, [pc, #204]	; (8009a34 <ComputeRQL+0xe8>)
 8009968:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 800996a:	4b33      	ldr	r3, [pc, #204]	; (8009a38 <ComputeRQL+0xec>)
 800996c:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 800996e:	f641 139a 	movw	r3, #6554	; 0x199a
 8009972:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8009974:	79fb      	ldrb	r3, [r7, #7]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d103      	bne.n	8009982 <ComputeRQL+0x36>
		returnvalue = 0;
 800997a:	2300      	movs	r3, #0
 800997c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009980:	e04f      	b.n	8009a22 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8009982:	79bb      	ldrb	r3, [r7, #6]
 8009984:	2b07      	cmp	r3, #7
 8009986:	d103      	bne.n	8009990 <ComputeRQL+0x44>
		returnvalue = 50;
 8009988:	2332      	movs	r3, #50	; 0x32
 800998a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800998e:	e048      	b.n	8009a22 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009996:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800999a:	429a      	cmp	r2, r3
 800999c:	dd03      	ble.n	80099a6 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 800999e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099a0:	041b      	lsls	r3, r3, #16
 80099a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099a4:	e007      	b.n	80099b6 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80099ac:	461a      	mov	r2, r3
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	fb02 f303 	mul.w	r3, r2, r3
 80099b4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 80099b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d020      	beq.n	80099fe <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80099c0:	461a      	mov	r2, r3
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	fb02 f303 	mul.w	r3, r2, r3
 80099c8:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80099ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099cc:	085b      	lsrs	r3, r3, #1
 80099ce:	693a      	ldr	r2, [r7, #16]
 80099d0:	4413      	add	r3, r2
 80099d2:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099dc:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	041b      	lsls	r3, r3, #16
 80099e2:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d804      	bhi.n	80099f6 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 80099ec:	69fa      	ldr	r2, [r7, #28]
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80099f4:	e006      	b.n	8009a04 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 80099f6:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80099fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80099fc:	e002      	b.n	8009a04 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 80099fe:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8009a02:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	0c1b      	lsrs	r3, r3, #16
 8009a08:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
 8009a0c:	2b32      	cmp	r3, #50	; 0x32
 8009a0e:	d905      	bls.n	8009a1c <ComputeRQL+0xd0>
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	2b64      	cmp	r3, #100	; 0x64
 8009a14:	bf28      	it	cs
 8009a16:	2364      	movcs	r3, #100	; 0x64
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	e000      	b.n	8009a1e <ComputeRQL+0xd2>
 8009a1c:	2332      	movs	r3, #50	; 0x32
 8009a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8009a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3734      	adds	r7, #52	; 0x34
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
 8009a32:	bf00      	nop
 8009a34:	0075b333 	.word	0x0075b333
 8009a38:	0030cccd 	.word	0x0030cccd

08009a3c <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	4603      	mov	r3, r0
 8009a44:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8009a46:	79fb      	ldrb	r3, [r7, #7]
 8009a48:	3b04      	subs	r3, #4
 8009a4a:	2b0f      	cmp	r3, #15
 8009a4c:	d83d      	bhi.n	8009aca <ConvertStatusLite+0x8e>
 8009a4e:	a201      	add	r2, pc, #4	; (adr r2, 8009a54 <ConvertStatusLite+0x18>)
 8009a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a54:	08009aa7 	.word	0x08009aa7
 8009a58:	08009aa1 	.word	0x08009aa1
 8009a5c:	08009aad 	.word	0x08009aad
 8009a60:	08009ab3 	.word	0x08009ab3
 8009a64:	08009abf 	.word	0x08009abf
 8009a68:	08009ac5 	.word	0x08009ac5
 8009a6c:	08009acb 	.word	0x08009acb
 8009a70:	08009acb 	.word	0x08009acb
 8009a74:	08009ab9 	.word	0x08009ab9
 8009a78:	08009acb 	.word	0x08009acb
 8009a7c:	08009acb 	.word	0x08009acb
 8009a80:	08009acb 	.word	0x08009acb
 8009a84:	08009acb 	.word	0x08009acb
 8009a88:	08009acb 	.word	0x08009acb
 8009a8c:	08009a95 	.word	0x08009a95
 8009a90:	08009a9b 	.word	0x08009a9b
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8009a94:	230a      	movs	r3, #10
 8009a96:	73fb      	strb	r3, [r7, #15]
		break;
 8009a98:	e019      	b.n	8009ace <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8009a9a:	2306      	movs	r3, #6
 8009a9c:	73fb      	strb	r3, [r7, #15]
		break;
 8009a9e:	e016      	b.n	8009ace <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	73fb      	strb	r3, [r7, #15]
		break;
 8009aa4:	e013      	b.n	8009ace <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	73fb      	strb	r3, [r7, #15]
		break;
 8009aaa:	e010      	b.n	8009ace <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8009aac:	2301      	movs	r3, #1
 8009aae:	73fb      	strb	r3, [r7, #15]
		break;
 8009ab0:	e00d      	b.n	8009ace <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8009ab2:	2307      	movs	r3, #7
 8009ab4:	73fb      	strb	r3, [r7, #15]
		break;
 8009ab6:	e00a      	b.n	8009ace <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8009ab8:	2309      	movs	r3, #9
 8009aba:	73fb      	strb	r3, [r7, #15]
		break;
 8009abc:	e007      	b.n	8009ace <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	73fb      	strb	r3, [r7, #15]
		break;
 8009ac2:	e004      	b.n	8009ace <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]
		break;
 8009ac8:	e001      	b.n	8009ace <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8009aca:	23ff      	movs	r3, #255	; 0xff
 8009acc:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8009ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3714      	adds	r7, #20
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b08c      	sub	sp, #48	; 0x30
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	607b      	str	r3, [r7, #4]
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	72fb      	strb	r3, [r7, #11]
 8009aea:	4613      	mov	r3, r2
 8009aec:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009aee:	2300      	movs	r3, #0
 8009af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685a      	ldr	r2, [r3, #4]
 8009af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afa:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b02:	f003 031f 	and.w	r3, r3, #31
 8009b06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8009b0a:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8009b0e:	7afb      	ldrb	r3, [r7, #11]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff ff1a 	bl	800994c <ComputeRQL>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1e:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009b24:	025b      	lsls	r3, r3, #9
 8009b26:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b2c:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009b32:	025b      	lsls	r3, r3, #9
 8009b34:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8009b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3a:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8009b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b42:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8009b48:	025b      	lsls	r3, r3, #9
 8009b4a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8009b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4e:	6a3a      	ldr	r2, [r7, #32]
 8009b50:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8009b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5a:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8009b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5e:	2200      	movs	r2, #0
 8009b60:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8009b62:	7abb      	ldrb	r3, [r7, #10]
 8009b64:	2b11      	cmp	r3, #17
 8009b66:	d009      	beq.n	8009b7c <SetSimpleData+0xa0>
 8009b68:	2b11      	cmp	r3, #17
 8009b6a:	dc0f      	bgt.n	8009b8c <SetSimpleData+0xb0>
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	dc02      	bgt.n	8009b76 <SetSimpleData+0x9a>
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	dc03      	bgt.n	8009b7c <SetSimpleData+0xa0>
 8009b74:	e00a      	b.n	8009b8c <SetSimpleData+0xb0>
 8009b76:	2b0d      	cmp	r3, #13
 8009b78:	d004      	beq.n	8009b84 <SetSimpleData+0xa8>
 8009b7a:	e007      	b.n	8009b8c <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8009b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b7e:	2205      	movs	r2, #5
 8009b80:	76da      	strb	r2, [r3, #27]
		break;
 8009b82:	e006      	b.n	8009b92 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8009b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b86:	220d      	movs	r2, #13
 8009b88:	76da      	strb	r2, [r3, #27]
		break;
 8009b8a:	e002      	b.n	8009b92 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8e:	2200      	movs	r2, #0
 8009b90:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8009b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b94:	7edb      	ldrb	r3, [r3, #27]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d108      	bne.n	8009bac <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8009b9a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff ff4c 	bl	8009a3c <ConvertStatusLite>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8009bb0:	025b      	lsls	r3, r3, #9
 8009bb2:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6a3a      	ldr	r2, [r7, #32]
 8009bb8:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bc0:	025b      	lsls	r3, r3, #9
 8009bc2:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	6a3a      	ldr	r2, [r7, #32]
 8009bc8:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8009bcc:	f107 0314 	add.w	r3, r7, #20
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f7ff fdb3 	bl	8009740 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8009bda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009bde:	2b06      	cmp	r3, #6
 8009be0:	bf0c      	ite	eq
 8009be2:	2301      	moveq	r3, #1
 8009be4:	2300      	movne	r3, #0
 8009be6:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8009be8:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8009bea:	f107 0319 	add.w	r3, r7, #25
 8009bee:	461a      	mov	r2, r3
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f7ff fd81 	bl	80096fa <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8009bf8:	7e7b      	ldrb	r3, [r7, #25]
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d104      	bne.n	8009c08 <SetSimpleData+0x12c>
 8009bfe:	7ffb      	ldrb	r3, [r7, #31]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d101      	bne.n	8009c08 <SetSimpleData+0x12c>
 8009c04:	2301      	movs	r3, #1
 8009c06:	e000      	b.n	8009c0a <SetSimpleData+0x12e>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	7fba      	ldrb	r2, [r7, #30]
 8009c10:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8009c14:	f107 0314 	add.w	r3, r7, #20
 8009c18:	461a      	mov	r2, r3
 8009c1a:	2101      	movs	r1, #1
 8009c1c:	68f8      	ldr	r0, [r7, #12]
 8009c1e:	f7ff fd8f 	bl	8009740 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8009c22:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009c26:	2b04      	cmp	r3, #4
 8009c28:	bf0c      	ite	eq
 8009c2a:	2301      	moveq	r3, #1
 8009c2c:	2300      	movne	r3, #0
 8009c2e:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8009c30:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 8009c32:	f107 0319 	add.w	r3, r7, #25
 8009c36:	461a      	mov	r2, r3
 8009c38:	2101      	movs	r1, #1
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	f7ff fd5d 	bl	80096fa <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8009c40:	7e7b      	ldrb	r3, [r7, #25]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d104      	bne.n	8009c50 <SetSimpleData+0x174>
 8009c46:	7f7b      	ldrb	r3, [r7, #29]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d101      	bne.n	8009c50 <SetSimpleData+0x174>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e000      	b.n	8009c52 <SetSimpleData+0x176>
 8009c50:	2300      	movs	r3, #0
 8009c52:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	7fba      	ldrb	r2, [r7, #30]
 8009c58:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8009c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5e:	8b1b      	ldrh	r3, [r3, #24]
 8009c60:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8009c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c64:	7edb      	ldrb	r3, [r3, #27]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d110      	bne.n	8009c8c <SetSimpleData+0x1b0>
 8009c6a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	da0c      	bge.n	8009c8c <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8009c72:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8009c76:	4b08      	ldr	r3, [pc, #32]	; (8009c98 <SetSimpleData+0x1bc>)
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	da03      	bge.n	8009c86 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c80:	220e      	movs	r2, #14
 8009c82:	76da      	strb	r2, [r3, #27]
 8009c84:	e002      	b.n	8009c8c <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8009c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c88:	2200      	movs	r2, #0
 8009c8a:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8009c8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3730      	adds	r7, #48	; 0x30
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	20000014 	.word	0x20000014

08009c9c <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b0a8      	sub	sp, #160	; 0xa0
 8009ca0:	af02      	add	r7, sp, #8
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 8009cac:	f107 0308 	add.w	r3, r7, #8
 8009cb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8009cb4:	221c      	movs	r2, #28
 8009cb6:	21ff      	movs	r1, #255	; 0xff
 8009cb8:	6838      	ldr	r0, [r7, #0]
 8009cba:	f004 fc75 	bl	800e5a8 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8009cbe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009cc2:	2102      	movs	r1, #2
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f001 f9c3 	bl	800b050 <VL53L1_get_device_results>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8009cd0:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d117      	bne.n	8009d08 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8009cd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cdc:	789a      	ldrb	r2, [r3, #2]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 8009ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 8009cec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cf0:	78da      	ldrb	r2, [r3, #3]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	9300      	str	r3, [sp, #0]
 8009cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7ff feed 	bl	8009adc <SetSimpleData>
 8009d02:	4603      	mov	r3, r0
 8009d04:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d08:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3798      	adds	r7, #152	; 0x98
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b0c6      	sub	sp, #280	; 0x118
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009d1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009d22:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009d24:	2300      	movs	r3, #0
 8009d26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8009d30:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d10b      	bne.n	8009d50 <VL53L1_LoadPatch+0x3c>
		status = VL53L1_WrByte(
 8009d38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009d3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009d40:	2200      	movs	r2, #0
 8009d42:	2185      	movs	r1, #133	; 0x85
 8009d44:	6818      	ldr	r0, [r3, #0]
 8009d46:	f004 fa7f 	bl	800e248 <VL53L1_WrByte>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 8009d50:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d106      	bne.n	8009d66 <VL53L1_LoadPatch+0x52>
		VL53L1_enable_powerforce(Dev);
 8009d58:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009d5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009d60:	6818      	ldr	r0, [r3, #0]
 8009d62:	f002 fd5e 	bl	800c822 <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 8009d66:	4b7e      	ldr	r3, [pc, #504]	; (8009f60 <VL53L1_LoadPatch+0x24c>)
 8009d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	switch(patch_tuning) {
 8009d6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d81a      	bhi.n	8009dac <VL53L1_LoadPatch+0x98>
 8009d76:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <VL53L1_LoadPatch+0x68>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009d8d 	.word	0x08009d8d
 8009d80:	08009d95 	.word	0x08009d95
 8009d84:	08009d9d 	.word	0x08009d9d
 8009d88:	08009da5 	.word	0x08009da5
	case 0:
		patch_power = 0x00;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8009d92:	e00e      	b.n	8009db2 <VL53L1_LoadPatch+0x9e>
	case 1:
		patch_power = 0x10;
 8009d94:	2310      	movs	r3, #16
 8009d96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8009d9a:	e00a      	b.n	8009db2 <VL53L1_LoadPatch+0x9e>
	case 2:
		patch_power = 0x20;
 8009d9c:	2320      	movs	r3, #32
 8009d9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8009da2:	e006      	b.n	8009db2 <VL53L1_LoadPatch+0x9e>
	case 3:
		patch_power = 0x40;
 8009da4:	2340      	movs	r3, #64	; 0x40
 8009da6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 8009daa:	e002      	b.n	8009db2 <VL53L1_LoadPatch+0x9e>
	default:
		patch_power = 0x00;
 8009dac:	2300      	movs	r3, #0
 8009dae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 8009db2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d134      	bne.n	8009e24 <VL53L1_LoadPatch+0x110>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 8009dba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009dbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009dc2:	2229      	movs	r2, #41	; 0x29
 8009dc4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8009dc6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009dca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009dce:	22c9      	movs	r2, #201	; 0xc9
 8009dd0:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8009dd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009dd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009dda:	220e      	movs	r2, #14
 8009ddc:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 8009dde:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009de2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009de6:	2240      	movs	r2, #64	; 0x40
 8009de8:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 8009dea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009dee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009df2:	2228      	movs	r2, #40	; 0x28
 8009df4:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8009df6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009dfa:	b2da      	uxtb	r2, r3
 8009dfc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009e00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009e04:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 8009e06:	f107 020c 	add.w	r2, r7, #12
 8009e0a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009e0e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009e12:	2306      	movs	r3, #6
 8009e14:	f240 4176 	movw	r1, #1142	; 0x476
 8009e18:	6800      	ldr	r0, [r0, #0]
 8009e1a:	f004 f9a9 	bl	800e170 <VL53L1_WriteMulti>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 8009e24:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d132      	bne.n	8009e92 <VL53L1_LoadPatch+0x17e>
		comms_buffer[0] = 0x03;
 8009e2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009e30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009e34:	2203      	movs	r2, #3
 8009e36:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8009e38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009e3c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009e40:	226d      	movs	r2, #109	; 0x6d
 8009e42:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8009e44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009e48:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009e4c:	2203      	movs	r2, #3
 8009e4e:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8009e50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009e54:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009e58:	226f      	movs	r2, #111	; 0x6f
 8009e5a:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 8009e5c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009e60:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009e64:	2207      	movs	r2, #7
 8009e66:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 8009e68:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009e6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009e70:	2229      	movs	r2, #41	; 0x29
 8009e72:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 8009e74:	f107 020c 	add.w	r2, r7, #12
 8009e78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009e7c:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009e80:	2306      	movs	r3, #6
 8009e82:	f240 4196 	movw	r1, #1174	; 0x496
 8009e86:	6800      	ldr	r0, [r0, #0]
 8009e88:	f004 f972 	bl	800e170 <VL53L1_WriteMulti>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 8009e92:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d11a      	bne.n	8009ed0 <VL53L1_LoadPatch+0x1bc>
		comms_buffer[0] = 0x00;
 8009e9a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009e9e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8009ea6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009eaa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009eae:	2207      	movs	r2, #7
 8009eb0:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8009eb2:	f107 020c 	add.w	r2, r7, #12
 8009eb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009eba:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009ebe:	2302      	movs	r3, #2
 8009ec0:	f240 4172 	movw	r1, #1138	; 0x472
 8009ec4:	6800      	ldr	r0, [r0, #0]
 8009ec6:	f004 f953 	bl	800e170 <VL53L1_WriteMulti>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 8009ed0:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d11a      	bne.n	8009f0e <VL53L1_LoadPatch+0x1fa>
		comms_buffer[0] = 0x00;
 8009ed8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009edc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8009ee4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009ee8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009eec:	2207      	movs	r2, #7
 8009eee:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8009ef0:	f107 020c 	add.w	r2, r7, #12
 8009ef4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009ef8:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009efc:	2302      	movs	r3, #2
 8009efe:	f240 4174 	movw	r1, #1140	; 0x474
 8009f02:	6800      	ldr	r0, [r0, #0]
 8009f04:	f004 f934 	bl	800e170 <VL53L1_WriteMulti>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 8009f0e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d10c      	bne.n	8009f30 <VL53L1_LoadPatch+0x21c>
		status = VL53L1_WrByte(
 8009f16:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009f1a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8009f24:	6818      	ldr	r0, [r3, #0]
 8009f26:	f004 f98f 	bl	800e248 <VL53L1_WrByte>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 8009f30:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10b      	bne.n	8009f50 <VL53L1_LoadPatch+0x23c>
		status = VL53L1_WrByte(
 8009f38:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009f3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009f40:	2201      	movs	r2, #1
 8009f42:	2185      	movs	r1, #133	; 0x85
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	f004 f97f 	bl	800e248 <VL53L1_WrByte>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 8009f50:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20000014 	.word	0x20000014

08009f64 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8009f64:	b5b0      	push	{r4, r5, r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af04      	add	r7, sp, #16
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	460b      	mov	r3, r1
 8009f6e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8009f70:	2300      	movs	r3, #0
 8009f72:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8009f78:	2162      	movs	r1, #98	; 0x62
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f002 f90b 	bl	800c196 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2200      	movs	r2, #0
 8009f84:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2201      	movs	r2, #1
 8009f8a:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	2200      	movs	r2, #0
 8009f90:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2201      	movs	r2, #1
 8009f96:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009fa4:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8009fac:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8009fb4:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	2264      	movs	r2, #100	; 0x64
 8009fba:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009fc2:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	f240 72db 	movw	r2, #2011	; 0x7db
 8009fd2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f002 f8c1 	bl	800c15e <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8009fdc:	78fb      	ldrb	r3, [r7, #3]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d008      	beq.n	8009ff4 <VL53L1_data_init+0x90>
 8009fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d104      	bne.n	8009ff4 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 f857 	bl	800a09e <VL53L1_read_p2p_data>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f001 fbf0 	bl	800b7e0 <VL53L1_init_refspadchar_config_struct>
 800a000:	4603      	mov	r3, r0
 800a002:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800a00a:	4618      	mov	r0, r3
 800a00c:	f001 fc0c 	bl	800b828 <VL53L1_init_ssc_config_struct>
 800a010:	4603      	mov	r3, r0
 800a012:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800a020:	4619      	mov	r1, r3
 800a022:	4610      	mov	r0, r2
 800a024:	f001 fc21 	bl	800b86a <VL53L1_init_xtalk_config_struct>
 800a028:	4603      	mov	r3, r0
 800a02a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800a032:	4618      	mov	r0, r3
 800a034:	f001 fc7b 	bl	800b92e <VL53L1_init_offset_cal_config_struct>
 800a038:	4603      	mov	r3, r0
 800a03a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	33a4      	adds	r3, #164	; 0xa4
 800a040:	4618      	mov	r0, r3
 800a042:	f001 fc9b 	bl	800b97c <VL53L1_init_tuning_parm_storage_struct>
 800a046:	4603      	mov	r3, r0
 800a048:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800a04a:	2120      	movs	r1, #32
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 fcc1 	bl	800a9d4 <VL53L1_set_vhv_loopbound>
 800a052:	4603      	mov	r3, r0
 800a054:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800a056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d116      	bne.n	800a08c <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	7858      	ldrb	r0, [r3, #1]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	8b1c      	ldrh	r4, [r3, #24]
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	689d      	ldr	r5, [r3, #8]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	68db      	ldr	r3, [r3, #12]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	6912      	ldr	r2, [r2, #16]
 800a072:	68b9      	ldr	r1, [r7, #8]
 800a074:	6949      	ldr	r1, [r1, #20]
 800a076:	9102      	str	r1, [sp, #8]
 800a078:	9201      	str	r2, [sp, #4]
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	462b      	mov	r3, r5
 800a07e:	4622      	mov	r2, r4
 800a080:	4601      	mov	r1, r0
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fad8 	bl	800a638 <VL53L1_set_preset_mode>
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f002 fe03 	bl	800cc98 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800a092:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a096:	4618      	mov	r0, r3
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bdb0      	pop	{r4, r5, r7, pc}

0800a09e <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b084      	sub	sp, #16
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 800a0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d108      	bne.n	800a0c8 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a0bc:	4619      	mov	r1, r3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f002 ff87 	bl	800cfd2 <VL53L1_get_static_nvm_managed>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 800a0c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d107      	bne.n	800a0e0 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	3342      	adds	r3, #66	; 0x42
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f003 f8b9 	bl	800d24e <VL53L1_get_customer_nvm_managed>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 800a0e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d115      	bne.n	800a114 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f003 ff6b 	bl	800dfcc <VL53L1_get_nvm_copy_data>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800a0fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d108      	bne.n	800a114 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	33f0      	adds	r3, #240	; 0xf0
 800a10c:	4619      	mov	r1, r3
 800a10e:	4610      	mov	r0, r2
 800a110:	f002 f9a3 	bl	800c45a <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 800a114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d109      	bne.n	800a130 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 800a122:	461a      	mov	r2, r3
 800a124:	21de      	movs	r1, #222	; 0xde
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f004 f8ec 	bl	800e304 <VL53L1_RdWord>
 800a12c:	4603      	mov	r3, r0
 800a12e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800a136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a13a:	d204      	bcs.n	800a146 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 800a142:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 800a146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d107      	bne.n	800a15e <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	339e      	adds	r3, #158	; 0x9e
 800a152:	4619      	mov	r1, r3
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f990 	bl	800a47a <VL53L1_get_mode_mitigation_roi>
 800a15a:	4603      	mov	r3, r0
 800a15c:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 800a164:	2b00      	cmp	r3, #0
 800a166:	d114      	bne.n	800a192 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10f      	bne.n	800a192 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800a178:	011b      	lsls	r3, r3, #4
 800a17a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 800a188:	011b      	lsls	r3, r3, #4
 800a18a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 800a192:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b085      	sub	sp, #20
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d101      	bne.n	800a1be <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800a1ba:	23f1      	movs	r3, #241	; 0xf1
 800a1bc:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 800a1be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10c      	bne.n	800a1e0 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800a1d2:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 800a1e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800a20c:	23f1      	movs	r3, #241	; 0xf1
 800a20e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 800a210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d109      	bne.n	800a22c <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 800a224:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800a22c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a230:	4618      	mov	r0, r3
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr

0800a23c <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af02      	add	r7, sp, #8
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
 800a248:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a24a:	2300      	movs	r3, #0
 800a24c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800a25c:	23f1      	movs	r3, #241	; 0xf1
 800a25e:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 800a260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d11b      	bne.n	800a2a0 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 800a28c:	9201      	str	r2, [sp, #4]
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	460b      	mov	r3, r1
 800a292:	683a      	ldr	r2, [r7, #0]
 800a294:	6879      	ldr	r1, [r7, #4]
 800a296:	68b8      	ldr	r0, [r7, #8]
 800a298:	f002 fc30 	bl	800cafc <VL53L1_calc_timeout_register_values>
 800a29c:	4603      	mov	r3, r0
 800a29e:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 800a2a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	60b9      	str	r1, [r7, #8]
 800a2b6:	607a      	str	r2, [r7, #4]
 800a2b8:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800a2d4:	23f1      	movs	r3, #241	; 0xf1
 800a2d6:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 800a2d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d14a      	bne.n	800a376 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	f002 faa9 	bl	800c846 <VL53L1_calc_macro_period_us>
 800a2f4:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 800a2fc:	6979      	ldr	r1, [r7, #20]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f002 fb61 	bl	800c9c6 <VL53L1_calc_timeout_us>
 800a304:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 800a310:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800a312:	8a7b      	ldrh	r3, [r7, #18]
 800a314:	021b      	lsls	r3, r3, #8
 800a316:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 800a318:	69bb      	ldr	r3, [r7, #24]
 800a31a:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 800a31e:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800a320:	4413      	add	r3, r2
 800a322:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800a324:	8a7b      	ldrh	r3, [r7, #18]
 800a326:	6979      	ldr	r1, [r7, #20]
 800a328:	4618      	mov	r0, r3
 800a32a:	f002 fb8c 	bl	800ca46 <VL53L1_calc_decoded_timeout_us>
 800a32e:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 800a334:	69bb      	ldr	r3, [r7, #24]
 800a336:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 800a33a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 800a33c:	8a7b      	ldrh	r3, [r7, #18]
 800a33e:	021b      	lsls	r3, r3, #8
 800a340:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800a348:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 800a34a:	4413      	add	r3, r2
 800a34c:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 800a34e:	8a7b      	ldrh	r3, [r7, #18]
 800a350:	6979      	ldr	r1, [r7, #20]
 800a352:	4618      	mov	r0, r3
 800a354:	f002 fb77 	bl	800ca46 <VL53L1_calc_decoded_timeout_us>
 800a358:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681a      	ldr	r2, [r3, #0]
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 800a376:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3720      	adds	r7, #32
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 800a382:	b480      	push	{r7}
 800a384:	b087      	sub	sp, #28
 800a386:	af00      	add	r7, sp, #0
 800a388:	60f8      	str	r0, [r7, #12]
 800a38a:	460b      	mov	r3, r1
 800a38c:	607a      	str	r2, [r7, #4]
 800a38e:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a390:	2300      	movs	r3, #0
 800a392:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 800a398:	2301      	movs	r3, #1
 800a39a:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 800a39c:	7afb      	ldrb	r3, [r7, #11]
 800a39e:	2b07      	cmp	r3, #7
 800a3a0:	d81c      	bhi.n	800a3dc <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 800a3a2:	7afb      	ldrb	r3, [r7, #11]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d004      	beq.n	800a3b2 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 800a3a8:	7afb      	ldrb	r3, [r7, #11]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b0:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 800a3b8:	7dbb      	ldrb	r3, [r7, #22]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	b2da      	uxtb	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00b      	beq.n	800a3e0 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	7afb      	ldrb	r3, [r7, #11]
 800a3d0:	fa42 f303 	asr.w	r3, r2, r3
 800a3d4:	b2da      	uxtb	r2, r3
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	701a      	strb	r2, [r3, #0]
 800a3da:	e001      	b.n	800a3e0 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a3dc:	23fc      	movs	r3, #252	; 0xfc
 800a3de:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 800a3e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	371c      	adds	r7, #28
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	7858      	ldrb	r0, [r3, #1]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	7819      	ldrb	r1, [r3, #0]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 800a410:	461a      	mov	r2, r3
 800a412:	f002 fbec 	bl	800cbee <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	7898      	ldrb	r0, [r3, #2]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	78d9      	ldrb	r1, [r3, #3]
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800a424:	461a      	mov	r2, r3
 800a426:	f002 fc21 	bl	800cc6c <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 800a42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a440:	2300      	movs	r3, #0
 800a442:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	3301      	adds	r3, #1
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	4619      	mov	r1, r3
 800a456:	f002 fcd8 	bl	800ce0a <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	1c99      	adds	r1, r3, #2
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	3303      	adds	r3, #3
 800a468:	461a      	mov	r2, r3
 800a46a:	f002 fbe7 	bl	800cc3c <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 800a46e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b086      	sub	sp, #24
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a484:	2300      	movs	r3, #0
 800a486:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 800a490:	2300      	movs	r3, #0
 800a492:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 800a49e:	f107 020e 	add.w	r2, r7, #14
 800a4a2:	f107 010d 	add.w	r1, r7, #13
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f002 fcaf 	bl	800ce0a <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 800a4ac:	7bba      	ldrb	r2, [r7, #14]
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 800a4b2:	7b7a      	ldrb	r2, [r7, #13]
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 800a4be:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
 800a4c2:	091b      	lsrs	r3, r3, #4
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 800a4ca:	7bfb      	ldrb	r3, [r7, #15]
 800a4cc:	f003 030f 	and.w	r3, r3, #15
 800a4d0:	b2da      	uxtb	r2, r3
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 800a4d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3718      	adds	r7, #24
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
	...

0800a4e4 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b087      	sub	sp, #28
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 800a4fc:	7afb      	ldrb	r3, [r7, #11]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	2b25      	cmp	r3, #37	; 0x25
 800a502:	f200 808e 	bhi.w	800a622 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 800a506:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a5a5 	.word	0x0800a5a5
 800a510:	0800a5a5 	.word	0x0800a5a5
 800a514:	0800a5a5 	.word	0x0800a5a5
 800a518:	0800a5a5 	.word	0x0800a5a5
 800a51c:	0800a5a5 	.word	0x0800a5a5
 800a520:	0800a5cf 	.word	0x0800a5cf
 800a524:	0800a5cf 	.word	0x0800a5cf
 800a528:	0800a5cf 	.word	0x0800a5cf
 800a52c:	0800a623 	.word	0x0800a623
 800a530:	0800a623 	.word	0x0800a623
 800a534:	0800a623 	.word	0x0800a623
 800a538:	0800a623 	.word	0x0800a623
 800a53c:	0800a623 	.word	0x0800a623
 800a540:	0800a623 	.word	0x0800a623
 800a544:	0800a623 	.word	0x0800a623
 800a548:	0800a623 	.word	0x0800a623
 800a54c:	0800a5a5 	.word	0x0800a5a5
 800a550:	0800a5cf 	.word	0x0800a5cf
 800a554:	0800a623 	.word	0x0800a623
 800a558:	0800a623 	.word	0x0800a623
 800a55c:	0800a623 	.word	0x0800a623
 800a560:	0800a623 	.word	0x0800a623
 800a564:	0800a623 	.word	0x0800a623
 800a568:	0800a623 	.word	0x0800a623
 800a56c:	0800a623 	.word	0x0800a623
 800a570:	0800a623 	.word	0x0800a623
 800a574:	0800a623 	.word	0x0800a623
 800a578:	0800a623 	.word	0x0800a623
 800a57c:	0800a623 	.word	0x0800a623
 800a580:	0800a623 	.word	0x0800a623
 800a584:	0800a623 	.word	0x0800a623
 800a588:	0800a623 	.word	0x0800a623
 800a58c:	0800a623 	.word	0x0800a623
 800a590:	0800a623 	.word	0x0800a623
 800a594:	0800a623 	.word	0x0800a623
 800a598:	0800a5f9 	.word	0x0800a5f9
 800a59c:	0800a5f9 	.word	0x0800a5f9
 800a5a0:	0800a5f9 	.word	0x0800a5f9
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	601a      	str	r2, [r3, #0]
	break;
 800a5cc:	e02c      	b.n	800a628 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 800a5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5f4:	601a      	str	r2, [r3, #0]
	break;
 800a5f6:	e017      	b.n	800a628 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	601a      	str	r2, [r3, #0]
	break;
 800a620:	e002      	b.n	800a628 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a622:	23fc      	movs	r3, #252	; 0xfc
 800a624:	75fb      	strb	r3, [r7, #23]
		break;
 800a626:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800a628:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	371c      	adds	r7, #28
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b092      	sub	sp, #72	; 0x48
 800a63c:	af04      	add	r7, sp, #16
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	607b      	str	r3, [r7, #4]
 800a642:	460b      	mov	r3, r1
 800a644:	72fb      	strb	r3, [r7, #11]
 800a646:	4613      	mov	r3, r2
 800a648:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a64a:	2300      	movs	r3, #0
 800a64c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800a654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a656:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a65a:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800a65c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800a662:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800a664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a666:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a66a:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800a66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800a672:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800a674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a676:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a67a:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	33a4      	adds	r3, #164	; 0xa4
 800a680:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 800a682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a684:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 800a688:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	7afa      	ldrb	r2, [r7, #11]
 800a68e:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a694:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 800a696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a698:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a69a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6a0:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 800a6a2:	2103      	movs	r1, #3
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f001 fd76 	bl	800c196 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 800a6aa:	7afb      	ldrb	r3, [r7, #11]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	2b25      	cmp	r3, #37	; 0x25
 800a6b0:	f200 810c 	bhi.w	800a8cc <VL53L1_set_preset_mode+0x294>
 800a6b4:	a201      	add	r2, pc, #4	; (adr r2, 800a6bc <VL53L1_set_preset_mode+0x84>)
 800a6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ba:	bf00      	nop
 800a6bc:	0800a755 	.word	0x0800a755
 800a6c0:	0800a771 	.word	0x0800a771
 800a6c4:	0800a78d 	.word	0x0800a78d
 800a6c8:	0800a7a9 	.word	0x0800a7a9
 800a6cc:	0800a7c5 	.word	0x0800a7c5
 800a6d0:	0800a7e1 	.word	0x0800a7e1
 800a6d4:	0800a7fd 	.word	0x0800a7fd
 800a6d8:	0800a819 	.word	0x0800a819
 800a6dc:	0800a8cd 	.word	0x0800a8cd
 800a6e0:	0800a8cd 	.word	0x0800a8cd
 800a6e4:	0800a8cd 	.word	0x0800a8cd
 800a6e8:	0800a8cd 	.word	0x0800a8cd
 800a6ec:	0800a8cd 	.word	0x0800a8cd
 800a6f0:	0800a8cd 	.word	0x0800a8cd
 800a6f4:	0800a8cd 	.word	0x0800a8cd
 800a6f8:	0800a8cd 	.word	0x0800a8cd
 800a6fc:	0800a835 	.word	0x0800a835
 800a700:	0800a851 	.word	0x0800a851
 800a704:	0800a8cd 	.word	0x0800a8cd
 800a708:	0800a8cd 	.word	0x0800a8cd
 800a70c:	0800a8cd 	.word	0x0800a8cd
 800a710:	0800a8cd 	.word	0x0800a8cd
 800a714:	0800a8cd 	.word	0x0800a8cd
 800a718:	0800a8cd 	.word	0x0800a8cd
 800a71c:	0800a8cd 	.word	0x0800a8cd
 800a720:	0800a8cd 	.word	0x0800a8cd
 800a724:	0800a8cd 	.word	0x0800a8cd
 800a728:	0800a8cd 	.word	0x0800a8cd
 800a72c:	0800a8cd 	.word	0x0800a8cd
 800a730:	0800a8cd 	.word	0x0800a8cd
 800a734:	0800a8cd 	.word	0x0800a8cd
 800a738:	0800a8cd 	.word	0x0800a8cd
 800a73c:	0800a8cd 	.word	0x0800a8cd
 800a740:	0800a8cd 	.word	0x0800a8cd
 800a744:	0800a8cd 	.word	0x0800a8cd
 800a748:	0800a86d 	.word	0x0800a86d
 800a74c:	0800a88d 	.word	0x0800a88d
 800a750:	0800a8ad 	.word	0x0800a8ad

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800a754:	69bb      	ldr	r3, [r7, #24]
 800a756:	9301      	str	r3, [sp, #4]
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	9300      	str	r3, [sp, #0]
 800a75c:	6a3b      	ldr	r3, [r7, #32]
 800a75e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a762:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a764:	f001 f999 	bl	800ba9a <VL53L1_preset_mode_standard_ranging>
 800a768:	4603      	mov	r3, r0
 800a76a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a76e:	e0b1      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	9301      	str	r3, [sp, #4]
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	6a3b      	ldr	r3, [r7, #32]
 800a77a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a77c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a77e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a780:	f001 faa9 	bl	800bcd6 <VL53L1_preset_mode_standard_ranging_short_range>
 800a784:	4603      	mov	r3, r0
 800a786:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a78a:	e0a3      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	9301      	str	r3, [sp, #4]
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	6a3b      	ldr	r3, [r7, #32]
 800a796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a79a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a79c:	f001 fadc 	bl	800bd58 <VL53L1_preset_mode_standard_ranging_long_range>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a7a6:	e095      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	9301      	str	r3, [sp, #4]
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	6a3b      	ldr	r3, [r7, #32]
 800a7b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7b8:	f001 fb0f 	bl	800bdda <VL53L1_preset_mode_standard_ranging_mm1_cal>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a7c2:	e087      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	9301      	str	r3, [sp, #4]
 800a7c8:	69fb      	ldr	r3, [r7, #28]
 800a7ca:	9300      	str	r3, [sp, #0]
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
 800a7ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7d4:	f001 fb26 	bl	800be24 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a7de:	e079      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	9301      	str	r3, [sp, #4]
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	9300      	str	r3, [sp, #0]
 800a7e8:	6a3b      	ldr	r3, [r7, #32]
 800a7ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7f0:	f001 fb3d 	bl	800be6e <VL53L1_preset_mode_timed_ranging>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a7fa:	e06b      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	9301      	str	r3, [sp, #4]
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	6a3b      	ldr	r3, [r7, #32]
 800a806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a808:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a80a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a80c:	f001 fb69 	bl	800bee2 <VL53L1_preset_mode_timed_ranging_short_range>
 800a810:	4603      	mov	r3, r0
 800a812:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a816:	e05d      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	9301      	str	r3, [sp, #4]
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	6a3b      	ldr	r3, [r7, #32]
 800a822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a828:	f001 fb95 	bl	800bf56 <VL53L1_preset_mode_timed_ranging_long_range>
 800a82c:	4603      	mov	r3, r0
 800a82e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a832:	e04f      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a844:	f001 fc69 	bl	800c11a <VL53L1_preset_mode_olt>
 800a848:	4603      	mov	r3, r0
 800a84a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a84e:	e041      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a85c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a85e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a860:	f001 fc25 	bl	800c0ae <VL53L1_preset_mode_singleshot_ranging>
 800a864:	4603      	mov	r3, r0
 800a866:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800a86a:	e033      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	9302      	str	r3, [sp, #8]
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	9301      	str	r3, [sp, #4]
 800a874:	69fb      	ldr	r3, [r7, #28]
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	6a3b      	ldr	r3, [r7, #32]
 800a87a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a87c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a87e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a880:	f001 fbc9 	bl	800c016 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800a884:	4603      	mov	r3, r0
 800a886:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a88a:	e023      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	9302      	str	r3, [sp, #8]
 800a890:	69bb      	ldr	r3, [r7, #24]
 800a892:	9301      	str	r3, [sp, #4]
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	9300      	str	r3, [sp, #0]
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a89c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a89e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8a0:	f001 fb93 	bl	800bfca <VL53L1_preset_mode_low_power_auto_ranging>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a8aa:	e013      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	9302      	str	r3, [sp, #8]
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	9301      	str	r3, [sp, #4]
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
 800a8ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a8c0:	f001 fbcf 	bl	800c062 <VL53L1_preset_mode_low_power_auto_long_ranging>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a8ca:	e003      	b.n	800a8d4 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a8cc:	23fc      	movs	r3, #252	; 0xfc
 800a8ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800a8d2:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800a8d4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d105      	bne.n	800a8e8 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800a8dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8de:	893a      	ldrh	r2, [r7, #8]
 800a8e0:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e4:	893a      	ldrh	r2, [r7, #8]
 800a8e6:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800a8e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d108      	bne.n	800a902 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800a8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8f4:	6879      	ldr	r1, [r7, #4]
 800a8f6:	68f8      	ldr	r0, [r7, #12]
 800a8f8:	f7ff fca0 	bl	800a23c <VL53L1_set_timeouts_us>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800a902:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a906:	2b00      	cmp	r3, #0
 800a908:	d106      	bne.n	800a918 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800a90a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f7ff fc46 	bl	800a19e <VL53L1_set_inter_measurement_period_ms>
 800a912:	4603      	mov	r3, r0
 800a914:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800a918:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3738      	adds	r7, #56	; 0x38
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}

0800a924 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a92e:	2300      	movs	r3, #0
 800a930:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a940:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a944:	4618      	mov	r0, r3
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a95c:	2300      	movs	r3, #0
 800a95e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	887a      	ldrh	r2, [r7, #2]
 800a968:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800a96c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a970:	4618      	mov	r0, r3
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a986:	2300      	movs	r3, #0
 800a988:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a998:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3714      	adds	r7, #20
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	887a      	ldrh	r2, [r7, #2]
 800a9c0:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800a9c4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	460b      	mov	r3, r1
 800a9de:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a9ee:	f003 0303 	and.w	r3, r3, #3
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	78fb      	ldrb	r3, [r7, #3]
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	4413      	add	r3, r2
 800a9fc:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800aa04:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800aa08:	4618      	mov	r0, r3
 800aa0a:	3714      	adds	r7, #20
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b0d0      	sub	sp, #320	; 0x140
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aa1e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800aa22:	6018      	str	r0, [r3, #0]
 800aa24:	4608      	mov	r0, r1
 800aa26:	4611      	mov	r1, r2
 800aa28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aa2c:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800aa30:	4602      	mov	r2, r0
 800aa32:	701a      	strb	r2, [r3, #0]
 800aa34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aa38:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800aa3c:	460a      	mov	r2, r1
 800aa3e:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800aa40:	2300      	movs	r3, #0
 800aa42:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800aa46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aa4a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800aa54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa58:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800aa5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800aa60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa64:	3342      	adds	r3, #66	; 0x42
 800aa66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800aa6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800aa76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa7a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800aa7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800aa82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa86:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800aa8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800aa8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa92:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800aa96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800aa9a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa9e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800aaa2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800aaa6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aaaa:	332c      	adds	r3, #44	; 0x2c
 800aaac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800aab0:	f107 030c 	add.w	r3, r7, #12
 800aab4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800aab8:	2300      	movs	r3, #0
 800aaba:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800aaca:	2300      	movs	r3, #0
 800aacc:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800aad0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aad4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800aad8:	f2a2 123d 	subw	r2, r2, #317	; 0x13d
 800aadc:	7812      	ldrb	r2, [r2, #0]
 800aade:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800aae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae4:	791b      	ldrb	r3, [r3, #4]
 800aae6:	b25b      	sxtb	r3, r3
 800aae8:	f003 030f 	and.w	r3, r3, #15
 800aaec:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800aaee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aaf2:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800aaf6:	f993 3000 	ldrsb.w	r3, [r3]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	b25b      	sxtb	r3, r3
 800aafe:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800ab00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab04:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800ab06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab0a:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800ab0e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab12:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800ab16:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab1a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800ab1e:	2bff      	cmp	r3, #255	; 0xff
 800ab20:	d104      	bne.n	800ab2c <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800ab22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab26:	2200      	movs	r2, #0
 800ab28:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800ab2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab30:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d139      	bne.n	800abac <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800ab38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab3c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d133      	bne.n	800abac <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800ab44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab48:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800ab4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab50:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800ab54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab58:	2220      	movs	r2, #32
 800ab5a:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800ab5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab62:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800ab66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10c      	bne.n	800ab88 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800ab6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab72:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800ab7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab82:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800ab86:	e004      	b.n	800ab92 <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800ab88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800ab92:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ab96:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	2b04      	cmp	r3, #4
 800ab9e:	d805      	bhi.n	800abac <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800aba0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aba4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800aba8:	2205      	movs	r2, #5
 800abaa:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800abac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800abb0:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d113      	bne.n	800abe0 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800abb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800abbc:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d10d      	bne.n	800abe0 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800abc4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800abc8:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800abcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800abd0:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800abd4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800abd8:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800abdc:	2206      	movs	r2, #6
 800abde:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800abe0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800abe4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	3b01      	subs	r3, #1
 800abec:	2b05      	cmp	r3, #5
 800abee:	d827      	bhi.n	800ac40 <VL53L1_init_and_start_range+0x22c>
 800abf0:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <VL53L1_init_and_start_range+0x1e4>)
 800abf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf6:	bf00      	nop
 800abf8:	0800ac39 	.word	0x0800ac39
 800abfc:	0800ac31 	.word	0x0800ac31
 800ac00:	0800ac29 	.word	0x0800ac29
 800ac04:	0800ac21 	.word	0x0800ac21
 800ac08:	0800ac19 	.word	0x0800ac19
 800ac0c:	0800ac11 	.word	0x0800ac11
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800ac10:	2301      	movs	r3, #1
 800ac12:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800ac16:	e017      	b.n	800ac48 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800ac18:	230d      	movs	r3, #13
 800ac1a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800ac1e:	e013      	b.n	800ac48 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800ac20:	2324      	movs	r3, #36	; 0x24
 800ac22:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800ac26:	e00f      	b.n	800ac48 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800ac28:	2344      	movs	r3, #68	; 0x44
 800ac2a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800ac2e:	e00b      	b.n	800ac48 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800ac30:	235a      	movs	r3, #90	; 0x5a
 800ac32:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800ac36:	e007      	b.n	800ac48 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800ac38:	2371      	movs	r3, #113	; 0x71
 800ac3a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800ac3e:	e003      	b.n	800ac48 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800ac40:	2383      	movs	r3, #131	; 0x83
 800ac42:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800ac46:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800ac48:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ac4c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800ac50:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800ac54:	f107 030c 	add.w	r3, r7, #12
 800ac58:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800ac62:	e00b      	b.n	800ac7c <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 800ac64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800ac68:	1c5a      	adds	r2, r3, #1
 800ac6a:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800ac6e:	2200      	movs	r2, #0
 800ac70:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800ac72:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800ac76:	3301      	adds	r3, #1
 800ac78:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800ac7c:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800ac80:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d3ed      	bcc.n	800ac64 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800ac88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ac8c:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	2b05      	cmp	r3, #5
 800ac94:	d917      	bls.n	800acc6 <VL53L1_init_and_start_range+0x2b2>
 800ac96:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d113      	bne.n	800acc6 <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800ac9e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800aca2:	f1c3 0301 	rsb	r3, r3, #1
 800aca6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800acaa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800acae:	f107 020c 	add.w	r2, r7, #12
 800acb2:	4413      	add	r3, r2
 800acb4:	461a      	mov	r2, r3
 800acb6:	210b      	movs	r1, #11
 800acb8:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800acbc:	f002 f8d4 	bl	800ce68 <VL53L1_i2c_encode_static_nvm_managed>
 800acc0:	4603      	mov	r3, r0
 800acc2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800acc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800acca:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	2b04      	cmp	r3, #4
 800acd2:	d917      	bls.n	800ad04 <VL53L1_init_and_start_range+0x2f0>
 800acd4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d113      	bne.n	800ad04 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800acdc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ace0:	f1c3 030d 	rsb	r3, r3, #13
 800ace4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ace8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800acec:	f107 020c 	add.w	r2, r7, #12
 800acf0:	4413      	add	r3, r2
 800acf2:	461a      	mov	r2, r3
 800acf4:	2117      	movs	r1, #23
 800acf6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800acfa:	f002 f991 	bl	800d020 <VL53L1_i2c_encode_customer_nvm_managed>
 800acfe:	4603      	mov	r3, r0
 800ad00:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800ad04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad08:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	d917      	bls.n	800ad42 <VL53L1_init_and_start_range+0x32e>
 800ad12:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d113      	bne.n	800ad42 <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800ad1a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ad1e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800ad22:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ad26:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800ad2a:	f107 020c 	add.w	r2, r7, #12
 800ad2e:	4413      	add	r3, r2
 800ad30:	461a      	mov	r2, r3
 800ad32:	2120      	movs	r1, #32
 800ad34:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800ad38:	f002 fab0 	bl	800d29c <VL53L1_i2c_encode_static_config>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800ad42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad46:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d917      	bls.n	800ad80 <VL53L1_init_and_start_range+0x36c>
 800ad50:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d113      	bne.n	800ad80 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800ad58:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ad5c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800ad60:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ad64:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800ad68:	f107 020c 	add.w	r2, r7, #12
 800ad6c:	4413      	add	r3, r2
 800ad6e:	461a      	mov	r2, r3
 800ad70:	2116      	movs	r1, #22
 800ad72:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800ad76:	f002 fb74 	bl	800d462 <VL53L1_i2c_encode_general_config>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800ad80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ad84:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d917      	bls.n	800adbe <VL53L1_init_and_start_range+0x3aa>
 800ad8e:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d113      	bne.n	800adbe <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800ad96:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ad9a:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800ad9e:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ada2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800ada6:	f107 020c 	add.w	r2, r7, #12
 800adaa:	4413      	add	r3, r2
 800adac:	461a      	mov	r2, r3
 800adae:	2117      	movs	r1, #23
 800adb0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800adb4:	f002 fbd9 	bl	800d56a <VL53L1_i2c_encode_timing_config>
 800adb8:	4603      	mov	r3, r0
 800adba:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800adbe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800adc2:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d036      	beq.n	800ae3a <VL53L1_init_and_start_range+0x426>
 800adcc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800add0:	2b00      	cmp	r3, #0
 800add2:	d132      	bne.n	800ae3a <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800add4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800add8:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800addc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800ade0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ade4:	791b      	ldrb	r3, [r3, #4]
 800ade6:	f003 0320 	and.w	r3, r3, #32
 800adea:	2b00      	cmp	r3, #0
 800adec:	d017      	beq.n	800ae1e <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800adee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800adf2:	789b      	ldrb	r3, [r3, #2]
 800adf4:	f043 0301 	orr.w	r3, r3, #1
 800adf8:	b2da      	uxtb	r2, r3
 800adfa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800adfe:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800ae00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae04:	789b      	ldrb	r3, [r3, #2]
 800ae06:	f043 0301 	orr.w	r3, r3, #1
 800ae0a:	b2da      	uxtb	r2, r3
 800ae0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ae10:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800ae12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae16:	789a      	ldrb	r2, [r3, #2]
 800ae18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ae1c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ae1e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800ae22:	f107 020c 	add.w	r2, r7, #12
 800ae26:	4413      	add	r3, r2
 800ae28:	461a      	mov	r2, r3
 800ae2a:	2112      	movs	r1, #18
 800ae2c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800ae30:	f002 fc1d 	bl	800d66e <VL53L1_i2c_encode_dynamic_config>
 800ae34:	4603      	mov	r3, r0
 800ae36:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800ae3a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d113      	bne.n	800ae6a <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 800ae42:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800ae46:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800ae4a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800ae4e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800ae52:	f107 020c 	add.w	r2, r7, #12
 800ae56:	4413      	add	r3, r2
 800ae58:	461a      	mov	r2, r3
 800ae5a:	2105      	movs	r1, #5
 800ae5c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800ae60:	f002 fc8a 	bl	800d778 <VL53L1_i2c_encode_system_control>
 800ae64:	4603      	mov	r3, r0
 800ae66:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800ae6a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10f      	bne.n	800ae92 <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 800ae72:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800ae76:	f107 020c 	add.w	r2, r7, #12
 800ae7a:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800ae7e:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800ae82:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 800ae86:	6800      	ldr	r0, [r0, #0]
 800ae88:	f003 f972 	bl	800e170 <VL53L1_WriteMulti>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800ae92:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d109      	bne.n	800aeae <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800ae9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ae9e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800aea2:	6818      	ldr	r0, [r3, #0]
 800aea4:	f001 f9a0 	bl	800c1e8 <VL53L1_update_ll_driver_rd_state>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800aeae:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d109      	bne.n	800aeca <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800aeb6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aeba:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800aebe:	6818      	ldr	r0, [r3, #0]
 800aec0:	f001 fa65 	bl	800c38e <VL53L1_update_ll_driver_cfg_state>
 800aec4:	4603      	mov	r3, r0
 800aec6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800aeca:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800aece:	4618      	mov	r0, r3
 800aed0:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b0c8      	sub	sp, #288	; 0x120
 800aedc:	af00      	add	r7, sp, #0
 800aede:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800aee2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800aee6:	6018      	str	r0, [r3, #0]
 800aee8:	460a      	mov	r2, r1
 800aeea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800aeee:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800aef2:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800aef4:	2300      	movs	r3, #0
 800aef6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800aefa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800aefe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800af08:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800af0c:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800af10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800af14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800af18:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800af1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800af20:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800af24:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800af28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800af2c:	2388      	movs	r3, #136	; 0x88
 800af2e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800af38:	2300      	movs	r3, #0
 800af3a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800af3e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800af42:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d008      	beq.n	800af5e <VL53L1_get_measurement_results+0x86>
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d10d      	bne.n	800af6c <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800af50:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800af54:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800af58:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800af5c:	e00a      	b.n	800af74 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800af5e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800af62:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800af66:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800af6a:	e003      	b.n	800af74 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 800af6c:	232c      	movs	r3, #44	; 0x2c
 800af6e:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800af72:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800af74:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10f      	bne.n	800af9c <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 800af7c:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800af80:	f107 0208 	add.w	r2, r7, #8
 800af84:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800af88:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800af8c:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 800af90:	6800      	ldr	r0, [r0, #0]
 800af92:	f003 f923 	bl	800e1dc <VL53L1_ReadMulti>
 800af96:	4603      	mov	r3, r0
 800af98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800af9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800afa0:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800afa4:	781b      	ldrb	r3, [r3, #0]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d917      	bls.n	800afda <VL53L1_get_measurement_results+0x102>
 800afaa:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d113      	bne.n	800afda <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800afb2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800afb6:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800afba:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800afbe:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800afc2:	f107 0208 	add.w	r2, r7, #8
 800afc6:	4413      	add	r3, r2
 800afc8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800afcc:	4619      	mov	r1, r3
 800afce:	2038      	movs	r0, #56	; 0x38
 800afd0:	f002 fd64 	bl	800da9c <VL53L1_i2c_decode_debug_results>
 800afd4:	4603      	mov	r3, r0
 800afd6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800afda:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800afde:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d017      	beq.n	800b018 <VL53L1_get_measurement_results+0x140>
 800afe8:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800afec:	2b00      	cmp	r3, #0
 800afee:	d113      	bne.n	800b018 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800aff0:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800aff4:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800aff8:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800affc:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800b000:	f107 0208 	add.w	r2, r7, #8
 800b004:	4413      	add	r3, r2
 800b006:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800b00a:	4619      	mov	r1, r3
 800b00c:	2021      	movs	r0, #33	; 0x21
 800b00e:	f002 fce4 	bl	800d9da <VL53L1_i2c_decode_core_results>
 800b012:	4603      	mov	r3, r0
 800b014:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800b018:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d110      	bne.n	800b042 <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800b026:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800b02a:	f107 0208 	add.w	r2, r7, #8
 800b02e:	4413      	add	r3, r2
 800b030:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800b034:	4619      	mov	r1, r3
 800b036:	202c      	movs	r0, #44	; 0x2c
 800b038:	f002 fbd9 	bl	800d7ee <VL53L1_i2c_decode_system_results>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b042:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800b046:	4618      	mov	r0, r3
 800b048:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	460b      	mov	r3, r1
 800b05a:	607a      	str	r2, [r7, #4]
 800b05c:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b05e:	2300      	movs	r3, #0
 800b060:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800b06c:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800b072:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d106      	bne.n	800b088 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800b07a:	7afb      	ldrb	r3, [r7, #11]
 800b07c:	4619      	mov	r1, r3
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7ff ff2a 	bl	800aed8 <VL53L1_get_measurement_results>
 800b084:	4603      	mov	r3, r0
 800b086:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800b088:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d10c      	bne.n	800b0aa <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800b096:	4618      	mov	r0, r3
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	f000 f85d 	bl	800b164 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d11f      	bne.n	800b0f4 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800b0b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d10e      	bne.n	800b0da <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d109      	bne.n	800b0da <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f001 fe33 	bl	800cd32 <VL53L1_low_power_auto_setup_manual_calibration>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800b0d8:	e00c      	b.n	800b0f4 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800b0da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d108      	bne.n	800b0f4 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d103      	bne.n	800b0f4 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800b0fe:	69bb      	ldr	r3, [r7, #24]
 800b100:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800b108:	2284      	movs	r2, #132	; 0x84
 800b10a:	6939      	ldr	r1, [r7, #16]
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f003 fa3d 	bl	800e58c <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800b112:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d104      	bne.n	800b124 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f001 f8ec 	bl	800c2f8 <VL53L1_check_ll_driver_rd_state>
 800b120:	4603      	mov	r3, r0
 800b122:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800b124:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3720      	adds	r7, #32
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	460b      	mov	r3, r1
 800b13a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800b13c:	2300      	movs	r3, #0
 800b13e:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800b140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d107      	bne.n	800b158 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800b148:	78fb      	ldrb	r3, [r7, #3]
 800b14a:	2203      	movs	r2, #3
 800b14c:	4619      	mov	r1, r3
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7ff fc60 	bl	800aa14 <VL53L1_init_and_start_range>
 800b154:	4603      	mov	r3, r0
 800b156:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800b158:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800b164:	b480      	push	{r7}
 800b166:	b089      	sub	sp, #36	; 0x24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	60f8      	str	r0, [r7, #12]
 800b16c:	60b9      	str	r1, [r7, #8]
 800b16e:	607a      	str	r2, [r7, #4]
 800b170:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800b172:	2300      	movs	r3, #0
 800b174:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800b17a:	2300      	movs	r3, #0
 800b17c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	78da      	ldrb	r2, [r3, #3]
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	3304      	adds	r3, #4
 800b18a:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800b18c:	2300      	movs	r3, #0
 800b18e:	77fb      	strb	r3, [r7, #31]
 800b190:	e0d0      	b.n	800b334 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	7ffa      	ldrb	r2, [r7, #31]
 800b196:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	2200      	movs	r2, #0
 800b19c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	78db      	ldrb	r3, [r3, #3]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d10a      	bne.n	800b1bc <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	785b      	ldrb	r3, [r3, #1]
 800b1aa:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800b1ae:	2b09      	cmp	r3, #9
 800b1b0:	d104      	bne.n	800b1bc <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	2213      	movs	r2, #19
 800b1b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1ba:	e007      	b.n	800b1cc <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	785b      	ldrb	r3, [r3, #1]
 800b1c0:	f003 031f 	and.w	r3, r3, #31
 800b1c4:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800b1cc:	7ffb      	ldrb	r3, [r7, #31]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d002      	beq.n	800b1d8 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d05d      	beq.n	800b292 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800b1d6:	e0a7      	b.n	800b328 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	789b      	ldrb	r3, [r3, #2]
 800b1dc:	2b07      	cmp	r3, #7
 800b1de:	d104      	bne.n	800b1ea <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	821a      	strh	r2, [r3, #16]
 800b1e8:	e00c      	b.n	800b204 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	789b      	ldrb	r3, [r3, #2]
 800b1ee:	2b08      	cmp	r3, #8
 800b1f0:	d104      	bne.n	800b1fc <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	821a      	strh	r2, [r3, #16]
 800b1fa:	e003      	b.n	800b204 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800b208:	69bb      	ldr	r3, [r7, #24]
 800b20a:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	895b      	ldrh	r3, [r3, #10]
 800b220:	015b      	lsls	r3, r3, #5
 800b222:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b22a:	d302      	bcc.n	800b232 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800b22c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b230:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	b29a      	uxth	r2, r3
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800b246:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	fb02 f303 	mul.w	r3, r2, r3
 800b250:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b258:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	da01      	bge.n	800b264 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800b260:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b264:	12db      	asrs	r3, r3, #11
 800b266:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	b21a      	sxth	r2, r3
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	621a      	str	r2, [r3, #32]

			break;
 800b290:	e04a      	b.n	800b328 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800b29e:	69bb      	ldr	r3, [r7, #24]
 800b2a0:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2a8:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800b2ae:	69bb      	ldr	r3, [r7, #24]
 800b2b0:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	8bdb      	ldrh	r3, [r3, #30]
 800b2b6:	015b      	lsls	r3, r3, #5
 800b2b8:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c0:	d302      	bcc.n	800b2c8 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800b2c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2c6:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	b29a      	uxth	r2, r3
 800b2cc:	69bb      	ldr	r3, [r7, #24]
 800b2ce:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800b2dc:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	fb02 f303 	mul.w	r3, r2, r3
 800b2e6:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2ee:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	da01      	bge.n	800b2fa <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800b2f6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800b2fa:	12db      	asrs	r3, r3, #11
 800b2fc:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	b21a      	sxth	r2, r3
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	621a      	str	r2, [r3, #32]

			break;
 800b326:	bf00      	nop
		}

		pdata++;
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	3340      	adds	r3, #64	; 0x40
 800b32c:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800b32e:	7ffb      	ldrb	r3, [r7, #31]
 800b330:	3301      	adds	r3, #1
 800b332:	77fb      	strb	r3, [r7, #31]
 800b334:	7ffb      	ldrb	r3, [r7, #31]
 800b336:	2b01      	cmp	r3, #1
 800b338:	f67f af2b 	bls.w	800b192 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	2200      	movs	r2, #0
 800b340:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	785b      	ldrb	r3, [r3, #1]
 800b346:	f003 031f 	and.w	r3, r3, #31
 800b34a:	2b11      	cmp	r3, #17
 800b34c:	bf8c      	ite	hi
 800b34e:	2201      	movhi	r2, #1
 800b350:	2200      	movls	r2, #0
 800b352:	b2d2      	uxtb	r2, r2
 800b354:	2a00      	cmp	r2, #0
 800b356:	d116      	bne.n	800b386 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800b358:	2201      	movs	r2, #1
 800b35a:	409a      	lsls	r2, r3
 800b35c:	4b0d      	ldr	r3, [pc, #52]	; (800b394 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800b35e:	4013      	ands	r3, r2
 800b360:	2b00      	cmp	r3, #0
 800b362:	bf14      	ite	ne
 800b364:	2301      	movne	r3, #1
 800b366:	2300      	moveq	r3, #0
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00b      	beq.n	800b386 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	785b      	ldrb	r3, [r3, #1]
 800b372:	f003 031f 	and.w	r3, r3, #31
 800b376:	b2da      	uxtb	r2, r3
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800b384:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800b386:	bf00      	nop
 800b388:	3724      	adds	r7, #36	; 0x24
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	0002200e 	.word	0x0002200e

0800b398 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800b398:	b480      	push	{r7}
 800b39a:	b087      	sub	sp, #28
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	60f8      	str	r0, [r7, #12]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	607a      	str	r2, [r7, #4]
 800b3a4:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800b3ae:	897b      	ldrh	r3, [r7, #10]
 800b3b0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b3b4:	2b38      	cmp	r3, #56	; 0x38
 800b3b6:	f200 8204 	bhi.w	800b7c2 <VL53L1_get_tuning_parm+0x42a>
 800b3ba:	a201      	add	r2, pc, #4	; (adr r2, 800b3c0 <VL53L1_get_tuning_parm+0x28>)
 800b3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c0:	0800b4a5 	.word	0x0800b4a5
 800b3c4:	0800b4b3 	.word	0x0800b4b3
 800b3c8:	0800b4c1 	.word	0x0800b4c1
 800b3cc:	0800b4cf 	.word	0x0800b4cf
 800b3d0:	0800b4dd 	.word	0x0800b4dd
 800b3d4:	0800b4eb 	.word	0x0800b4eb
 800b3d8:	0800b4f9 	.word	0x0800b4f9
 800b3dc:	0800b507 	.word	0x0800b507
 800b3e0:	0800b515 	.word	0x0800b515
 800b3e4:	0800b523 	.word	0x0800b523
 800b3e8:	0800b531 	.word	0x0800b531
 800b3ec:	0800b53f 	.word	0x0800b53f
 800b3f0:	0800b54d 	.word	0x0800b54d
 800b3f4:	0800b55b 	.word	0x0800b55b
 800b3f8:	0800b569 	.word	0x0800b569
 800b3fc:	0800b577 	.word	0x0800b577
 800b400:	0800b585 	.word	0x0800b585
 800b404:	0800b593 	.word	0x0800b593
 800b408:	0800b5a1 	.word	0x0800b5a1
 800b40c:	0800b5af 	.word	0x0800b5af
 800b410:	0800b5bd 	.word	0x0800b5bd
 800b414:	0800b5cb 	.word	0x0800b5cb
 800b418:	0800b5d9 	.word	0x0800b5d9
 800b41c:	0800b5e7 	.word	0x0800b5e7
 800b420:	0800b5f5 	.word	0x0800b5f5
 800b424:	0800b603 	.word	0x0800b603
 800b428:	0800b611 	.word	0x0800b611
 800b42c:	0800b61f 	.word	0x0800b61f
 800b430:	0800b62d 	.word	0x0800b62d
 800b434:	0800b63b 	.word	0x0800b63b
 800b438:	0800b649 	.word	0x0800b649
 800b43c:	0800b657 	.word	0x0800b657
 800b440:	0800b665 	.word	0x0800b665
 800b444:	0800b673 	.word	0x0800b673
 800b448:	0800b681 	.word	0x0800b681
 800b44c:	0800b68f 	.word	0x0800b68f
 800b450:	0800b69d 	.word	0x0800b69d
 800b454:	0800b6ab 	.word	0x0800b6ab
 800b458:	0800b6b9 	.word	0x0800b6b9
 800b45c:	0800b6c7 	.word	0x0800b6c7
 800b460:	0800b6d5 	.word	0x0800b6d5
 800b464:	0800b6e3 	.word	0x0800b6e3
 800b468:	0800b6f1 	.word	0x0800b6f1
 800b46c:	0800b6ff 	.word	0x0800b6ff
 800b470:	0800b70d 	.word	0x0800b70d
 800b474:	0800b71b 	.word	0x0800b71b
 800b478:	0800b729 	.word	0x0800b729
 800b47c:	0800b737 	.word	0x0800b737
 800b480:	0800b745 	.word	0x0800b745
 800b484:	0800b753 	.word	0x0800b753
 800b488:	0800b761 	.word	0x0800b761
 800b48c:	0800b76f 	.word	0x0800b76f
 800b490:	0800b77d 	.word	0x0800b77d
 800b494:	0800b78b 	.word	0x0800b78b
 800b498:	0800b799 	.word	0x0800b799
 800b49c:	0800b7a7 	.word	0x0800b7a7
 800b4a0:	0800b7b5 	.word	0x0800b7b5

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800b4aa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	601a      	str	r2, [r3, #0]
	break;
 800b4b0:	e18e      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800b4b8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	601a      	str	r2, [r3, #0]
	break;
 800b4be:	e187      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800b4c6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	601a      	str	r2, [r3, #0]
	break;
 800b4cc:	e180      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800b4d4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	601a      	str	r2, [r3, #0]
	break;
 800b4da:	e179      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800b4e2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	601a      	str	r2, [r3, #0]
	break;
 800b4e8:	e172      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800b4f0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	601a      	str	r2, [r3, #0]
	break;
 800b4f6:	e16b      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800b4fe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	601a      	str	r2, [r3, #0]
	break;
 800b504:	e164      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800b50c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	601a      	str	r2, [r3, #0]
	break;
 800b512:	e15d      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800b51a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	601a      	str	r2, [r3, #0]
	break;
 800b520:	e156      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800b528:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	601a      	str	r2, [r3, #0]
	break;
 800b52e:	e14f      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800b536:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	601a      	str	r2, [r3, #0]
	break;
 800b53c:	e148      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800b544:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	601a      	str	r2, [r3, #0]
	break;
 800b54a:	e141      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800b552:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	601a      	str	r2, [r3, #0]
	break;
 800b558:	e13a      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800b560:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	601a      	str	r2, [r3, #0]
	break;
 800b566:	e133      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800b56e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	601a      	str	r2, [r3, #0]
	break;
 800b574:	e12c      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800b57c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	601a      	str	r2, [r3, #0]
	break;
 800b582:	e125      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800b58a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	601a      	str	r2, [r3, #0]
	break;
 800b590:	e11e      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800b598:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	601a      	str	r2, [r3, #0]
	break;
 800b59e:	e117      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800b5a6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	601a      	str	r2, [r3, #0]
	break;
 800b5ac:	e110      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800b5b4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	601a      	str	r2, [r3, #0]
	break;
 800b5ba:	e109      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b5c2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	601a      	str	r2, [r3, #0]
	break;
 800b5c8:	e102      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800b5d0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	601a      	str	r2, [r3, #0]
	break;
 800b5d6:	e0fb      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800b5de:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	601a      	str	r2, [r3, #0]
	break;
 800b5e4:	e0f4      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800b5ec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	601a      	str	r2, [r3, #0]
	break;
 800b5f2:	e0ed      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800b5fa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	601a      	str	r2, [r3, #0]
	break;
 800b600:	e0e6      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800b608:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	601a      	str	r2, [r3, #0]
	break;
 800b60e:	e0df      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800b616:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	601a      	str	r2, [r3, #0]
	break;
 800b61c:	e0d8      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800b624:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	601a      	str	r2, [r3, #0]
	break;
 800b62a:	e0d1      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800b632:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	601a      	str	r2, [r3, #0]
	break;
 800b638:	e0ca      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b640:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	601a      	str	r2, [r3, #0]
	break;
 800b646:	e0c3      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800b64e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	601a      	str	r2, [r3, #0]
	break;
 800b654:	e0bc      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800b65c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	601a      	str	r2, [r3, #0]
	break;
 800b662:	e0b5      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b66a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	601a      	str	r2, [r3, #0]
	break;
 800b670:	e0ae      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800b678:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	601a      	str	r2, [r3, #0]
	break;
 800b67e:	e0a7      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800b680:	693b      	ldr	r3, [r7, #16]
 800b682:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800b686:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	601a      	str	r2, [r3, #0]
	break;
 800b68c:	e0a0      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800b694:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	601a      	str	r2, [r3, #0]
	break;
 800b69a:	e099      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800b6a2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	601a      	str	r2, [r3, #0]
	break;
 800b6a8:	e092      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b6b0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	601a      	str	r2, [r3, #0]
	break;
 800b6b6:	e08b      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800b6be:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	601a      	str	r2, [r3, #0]
	break;
 800b6c4:	e084      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b6cc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	601a      	str	r2, [r3, #0]
	break;
 800b6d2:	e07d      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800b6da:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	601a      	str	r2, [r3, #0]
	break;
 800b6e0:	e076      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800b6e8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	601a      	str	r2, [r3, #0]
	break;
 800b6ee:	e06f      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800b6f6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	601a      	str	r2, [r3, #0]
	break;
 800b6fc:	e068      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800b6fe:	693b      	ldr	r3, [r7, #16]
 800b700:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800b704:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	601a      	str	r2, [r3, #0]
	break;
 800b70a:	e061      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800b712:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	601a      	str	r2, [r3, #0]
	break;
 800b718:	e05a      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800b720:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	601a      	str	r2, [r3, #0]
	break;
 800b726:	e053      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800b72e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	601a      	str	r2, [r3, #0]
	break;
 800b734:	e04c      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800b73c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	601a      	str	r2, [r3, #0]
	break;
 800b742:	e045      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800b74a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	601a      	str	r2, [r3, #0]
	break;
 800b750:	e03e      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b758:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	601a      	str	r2, [r3, #0]
	break;
 800b75e:	e037      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b766:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	601a      	str	r2, [r3, #0]
	break;
 800b76c:	e030      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b774:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	601a      	str	r2, [r3, #0]
	break;
 800b77a:	e029      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b782:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	601a      	str	r2, [r3, #0]
	break;
 800b788:	e022      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800b790:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	601a      	str	r2, [r3, #0]
	break;
 800b796:	e01b      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800b79e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	601a      	str	r2, [r3, #0]
	break;
 800b7a4:	e014      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b7ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	601a      	str	r2, [r3, #0]
	break;
 800b7b2:	e00d      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800b7ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	601a      	str	r2, [r3, #0]
	break;
 800b7c0:	e006      	b.n	800b7d0 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800b7c8:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800b7ca:	23fc      	movs	r3, #252	; 0xfc
 800b7cc:	75fb      	strb	r3, [r7, #23]
	break;
 800b7ce:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800b7d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	371c      	adds	r7, #28
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2208      	movs	r2, #8
 800b7f0:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	220b      	movs	r2, #11
 800b7f6:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7fe:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b806:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800b80e:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800b816:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b818:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3714      	adds	r7, #20
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b830:	2300      	movs	r3, #0
 800b832:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2212      	movs	r2, #18
 800b83e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	220f      	movs	r2, #15
 800b844:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2202      	movs	r2, #2
 800b84a:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800b852:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	220c      	movs	r2, #12
 800b858:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b85a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b084      	sub	sp, #16
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b874:	2300      	movs	r3, #0
 800b876:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	895b      	ldrh	r3, [r3, #10]
 800b87c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	895b      	ldrh	r3, [r3, #10]
 800b89a:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2240      	movs	r2, #64	; 0x40
 800b8be:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d10d      	bne.n	800b8e4 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d108      	bne.n	800b8e4 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d103      	bne.n	800b8e4 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	741a      	strb	r2, [r3, #16]
 800b8e2:	e002      	b.n	800b8ea <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800b8ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d114      	bne.n	800b91c <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d110      	bne.n	800b91c <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	6818      	ldr	r0, [r3, #0]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	7d1b      	ldrb	r3, [r3, #20]
 800b90e:	f000 ffc9 	bl	800c8a4 <VL53L1_calc_range_ignore_threshold>
 800b912:	4603      	mov	r3, r0
 800b914:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	82da      	strh	r2, [r3, #22]
 800b91a:	e002      	b.n	800b922 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	2200      	movs	r2, #0
 800b920:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800b92e:	b480      	push	{r7}
 800b930:	b085      	sub	sp, #20
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b936:	2300      	movs	r3, #0
 800b938:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b940:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b948:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b950:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b958:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2208      	movs	r2, #8
 800b95e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2228      	movs	r2, #40	; 0x28
 800b964:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2209      	movs	r2, #9
 800b96a:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b96c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3714      	adds	r7, #20
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b984:	2300      	movs	r3, #0
 800b986:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f248 0203 	movw	r2, #32771	; 0x8003
 800b98e:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f248 0201 	movw	r2, #32769	; 0x8001
 800b996:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f248 0241 	movw	r2, #32833	; 0x8041
 800b99e:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	220e      	movs	r2, #14
 800b9a4:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	220a      	movs	r2, #10
 800b9aa:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2206      	movs	r2, #6
 800b9b0:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	220e      	movs	r2, #14
 800b9b6:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	220a      	movs	r2, #10
 800b9bc:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2206      	movs	r2, #6
 800b9c2:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2202      	movs	r2, #2
 800b9c8:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2221      	movs	r2, #33	; 0x21
 800b9ce:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b9e2:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b9ea:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b9f2:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	22c0      	movs	r2, #192	; 0xc0
 800b9f8:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	22c0      	movs	r2, #192	; 0xc0
 800b9fe:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	22c0      	movs	r2, #192	; 0xc0
 800ba04:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2208      	movs	r2, #8
 800ba0a:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2210      	movs	r2, #16
 800ba10:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2201      	movs	r2, #1
 800ba16:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2202      	movs	r2, #2
 800ba2e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ba40:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800ba48:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f248 0230 	movw	r2, #32816	; 0x8030
 800ba50:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ba58:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ba60:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800ba68:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f24f 6218 	movw	r2, #63000	; 0xf618
 800ba70:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800ba78:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800ba80:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ba88:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800ba8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b087      	sub	sp, #28
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	60f8      	str	r0, [r7, #12]
 800baa2:	60b9      	str	r1, [r7, #8]
 800baa4:	607a      	str	r2, [r7, #4]
 800baa6:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800baa8:	2300      	movs	r3, #0
 800baaa:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800bab2:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2200      	movs	r2, #0
 800babe:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	2200      	movs	r2, #0
 800bac4:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2200      	movs	r2, #0
 800baca:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2200      	movs	r2, #0
 800bad0:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2200      	movs	r2, #0
 800badc:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2200      	movs	r2, #0
 800bae2:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2200      	movs	r2, #0
 800bae8:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2211      	movs	r2, #17
 800baf4:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2202      	movs	r2, #2
 800bafa:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2202      	movs	r2, #2
 800bb06:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2208      	movs	r2, #8
 800bb0c:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2200      	movs	r2, #0
 800bb12:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800bb14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb16:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1e:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2201      	movs	r2, #1
 800bb32:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2200      	movs	r2, #0
 800bb38:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	22ff      	movs	r2, #255	; 0xff
 800bb4a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800bb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb56:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	2200      	movs	r2, #0
 800bb72:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	2200      	movs	r2, #0
 800bb78:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	2220      	movs	r2, #32
 800bb7e:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	220b      	movs	r2, #11
 800bb84:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	2202      	movs	r2, #2
 800bb92:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	220d      	movs	r2, #13
 800bb98:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	2200      	movs	r2, #0
 800bba6:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800bbc0:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	2238      	movs	r2, #56	; 0x38
 800bbcc:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	22ff      	movs	r2, #255	; 0xff
 800bbd2:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	221a      	movs	r2, #26
 800bbe4:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2220      	movs	r2, #32
 800bbf0:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	22cc      	movs	r2, #204	; 0xcc
 800bbfc:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	220b      	movs	r2, #11
 800bc02:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	22f5      	movs	r2, #245	; 0xf5
 800bc0e:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2209      	movs	r2, #9
 800bc14:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800bc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc18:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc20:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2208      	movs	r2, #8
 800bc2a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2278      	movs	r2, #120	; 0x78
 800bc30:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	2201      	movs	r2, #1
 800bc42:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2200      	movs	r2, #0
 800bc48:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	2200      	movs	r2, #0
 800bc54:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800bc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc58:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	220b      	movs	r2, #11
 800bc64:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	2209      	movs	r2, #9
 800bc6a:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6e:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800bc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc76:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800bc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc84:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	22c7      	movs	r2, #199	; 0xc7
 800bc9a:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	22ff      	movs	r2, #255	; 0xff
 800bca0:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	22db      	movs	r2, #219	; 0xdb
 800bca6:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	2202      	movs	r2, #2
 800bcac:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800bcae:	6a3b      	ldr	r3, [r7, #32]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800bcb4:	6a3b      	ldr	r3, [r7, #32]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800bcc0:	6a3b      	ldr	r3, [r7, #32]
 800bcc2:	2221      	movs	r2, #33	; 0x21
 800bcc4:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800bcc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	371c      	adds	r7, #28
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b088      	sub	sp, #32
 800bcda:	af02      	add	r7, sp, #8
 800bcdc:	60f8      	str	r0, [r7, #12]
 800bcde:	60b9      	str	r1, [r7, #8]
 800bce0:	607a      	str	r2, [r7, #4]
 800bce2:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bce4:	2300      	movs	r3, #0
 800bce6:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	9301      	str	r3, [sp, #4]
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	68b9      	ldr	r1, [r7, #8]
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f7ff fecf 	bl	800ba9a <VL53L1_preset_mode_standard_ranging>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bd00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d121      	bne.n	800bd4c <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2207      	movs	r2, #7
 800bd0c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2205      	movs	r2, #5
 800bd12:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800bd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd16:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1e:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2208      	movs	r2, #8
 800bd28:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2238      	movs	r2, #56	; 0x38
 800bd2e:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	2207      	movs	r2, #7
 800bd34:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	2205      	movs	r2, #5
 800bd3a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800bd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3e:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800bd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd46:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800bd4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b088      	sub	sp, #32
 800bd5c:	af02      	add	r7, sp, #8
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
 800bd64:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bd66:	2300      	movs	r3, #0
 800bd68:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6c:	9301      	str	r3, [sp, #4]
 800bd6e:	6a3b      	ldr	r3, [r7, #32]
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	68b9      	ldr	r1, [r7, #8]
 800bd78:	68f8      	ldr	r0, [r7, #12]
 800bd7a:	f7ff fe8e 	bl	800ba9a <VL53L1_preset_mode_standard_ranging>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bd82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d121      	bne.n	800bdce <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	220f      	movs	r2, #15
 800bd8e:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	220d      	movs	r2, #13
 800bd94:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800bd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd98:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda0:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2208      	movs	r2, #8
 800bdaa:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	22b8      	movs	r2, #184	; 0xb8
 800bdb0:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	220f      	movs	r2, #15
 800bdb6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	220d      	movs	r2, #13
 800bdbc:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc0:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc8:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800bdce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3718      	adds	r7, #24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b088      	sub	sp, #32
 800bdde:	af02      	add	r7, sp, #8
 800bde0:	60f8      	str	r0, [r7, #12]
 800bde2:	60b9      	str	r1, [r7, #8]
 800bde4:	607a      	str	r2, [r7, #4]
 800bde6:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bde8:	2300      	movs	r3, #0
 800bdea:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdee:	9301      	str	r3, [sp, #4]
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	9300      	str	r3, [sp, #0]
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	68b9      	ldr	r1, [r7, #8]
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f7ff fe4d 	bl	800ba9a <VL53L1_preset_mode_standard_ranging>
 800be00:	4603      	mov	r3, r0
 800be02:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800be04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d105      	bne.n	800be18 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	2202      	movs	r2, #2
 800be10:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	223b      	movs	r2, #59	; 0x3b
 800be16:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800be18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3718      	adds	r7, #24
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b088      	sub	sp, #32
 800be28:	af02      	add	r7, sp, #8
 800be2a:	60f8      	str	r0, [r7, #12]
 800be2c:	60b9      	str	r1, [r7, #8]
 800be2e:	607a      	str	r2, [r7, #4]
 800be30:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be32:	2300      	movs	r3, #0
 800be34:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800be36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be38:	9301      	str	r3, [sp, #4]
 800be3a:	6a3b      	ldr	r3, [r7, #32]
 800be3c:	9300      	str	r3, [sp, #0]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	68b9      	ldr	r1, [r7, #8]
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f7ff fe28 	bl	800ba9a <VL53L1_preset_mode_standard_ranging>
 800be4a:	4603      	mov	r3, r0
 800be4c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800be4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d105      	bne.n	800be62 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2202      	movs	r2, #2
 800be5a:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	225b      	movs	r2, #91	; 0x5b
 800be60:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800be62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}

0800be6e <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800be6e:	b580      	push	{r7, lr}
 800be70:	b088      	sub	sp, #32
 800be72:	af02      	add	r7, sp, #8
 800be74:	60f8      	str	r0, [r7, #12]
 800be76:	60b9      	str	r1, [r7, #8]
 800be78:	607a      	str	r2, [r7, #4]
 800be7a:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800be7c:	2300      	movs	r3, #0
 800be7e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800be80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be82:	9301      	str	r3, [sp, #4]
 800be84:	6a3b      	ldr	r3, [r7, #32]
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	68b9      	ldr	r1, [r7, #8]
 800be8e:	68f8      	ldr	r0, [r7, #12]
 800be90:	f7ff fe03 	bl	800ba9a <VL53L1_preset_mode_standard_ranging>
 800be94:	4603      	mov	r3, r0
 800be96:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800be98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d11a      	bne.n	800bed6 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	2200      	movs	r2, #0
 800bea4:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	22b1      	movs	r2, #177	; 0xb1
 800beb0:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	22d4      	movs	r2, #212	; 0xd4
 800bebc:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bec4:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800bec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec8:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	2240      	movs	r2, #64	; 0x40
 800bed4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b088      	sub	sp, #32
 800bee6:	af02      	add	r7, sp, #8
 800bee8:	60f8      	str	r0, [r7, #12]
 800beea:	60b9      	str	r1, [r7, #8]
 800beec:	607a      	str	r2, [r7, #4]
 800beee:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bef0:	2300      	movs	r3, #0
 800bef2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800bef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef6:	9301      	str	r3, [sp, #4]
 800bef8:	6a3b      	ldr	r3, [r7, #32]
 800befa:	9300      	str	r3, [sp, #0]
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	68b9      	ldr	r1, [r7, #8]
 800bf02:	68f8      	ldr	r0, [r7, #12]
 800bf04:	f7ff fee7 	bl	800bcd6 <VL53L1_preset_mode_standard_ranging_short_range>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bf0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d11a      	bne.n	800bf4a <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	2200      	movs	r2, #0
 800bf18:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2284      	movs	r2, #132	; 0x84
 800bf24:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2201      	movs	r2, #1
 800bf2a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	22b1      	movs	r2, #177	; 0xb1
 800bf30:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bf38:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf3c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800bf44:	6a3b      	ldr	r3, [r7, #32]
 800bf46:	2240      	movs	r2, #64	; 0x40
 800bf48:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bf4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3718      	adds	r7, #24
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}

0800bf56 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b088      	sub	sp, #32
 800bf5a:	af02      	add	r7, sp, #8
 800bf5c:	60f8      	str	r0, [r7, #12]
 800bf5e:	60b9      	str	r1, [r7, #8]
 800bf60:	607a      	str	r2, [r7, #4]
 800bf62:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bf64:	2300      	movs	r3, #0
 800bf66:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6a:	9301      	str	r3, [sp, #4]
 800bf6c:	6a3b      	ldr	r3, [r7, #32]
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	68b9      	ldr	r1, [r7, #8]
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f7ff feee 	bl	800bd58 <VL53L1_preset_mode_standard_ranging_long_range>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800bf80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d11a      	bne.n	800bfbe <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2297      	movs	r2, #151	; 0x97
 800bf98:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	22b1      	movs	r2, #177	; 0xb1
 800bfa4:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800bfac:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800bfb8:	6a3b      	ldr	r3, [r7, #32]
 800bfba:	2240      	movs	r2, #64	; 0x40
 800bfbc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800bfbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	3718      	adds	r7, #24
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b088      	sub	sp, #32
 800bfce:	af02      	add	r7, sp, #8
 800bfd0:	60f8      	str	r0, [r7, #12]
 800bfd2:	60b9      	str	r1, [r7, #8]
 800bfd4:	607a      	str	r2, [r7, #4]
 800bfd6:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800bfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfde:	9301      	str	r3, [sp, #4]
 800bfe0:	6a3b      	ldr	r3, [r7, #32]
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	68b9      	ldr	r1, [r7, #8]
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f7ff ff3f 	bl	800be6e <VL53L1_preset_mode_timed_ranging>
 800bff0:	4603      	mov	r3, r0
 800bff2:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800bff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d106      	bne.n	800c00a <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800bffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bffe:	6839      	ldr	r1, [r7, #0]
 800c000:	68b8      	ldr	r0, [r7, #8]
 800c002:	f000 fe7d 	bl	800cd00 <VL53L1_config_low_power_auto_mode>
 800c006:	4603      	mov	r3, r0
 800c008:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c00a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3718      	adds	r7, #24
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b088      	sub	sp, #32
 800c01a:	af02      	add	r7, sp, #8
 800c01c:	60f8      	str	r0, [r7, #12]
 800c01e:	60b9      	str	r1, [r7, #8]
 800c020:	607a      	str	r2, [r7, #4]
 800c022:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c024:	2300      	movs	r3, #0
 800c026:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	9301      	str	r3, [sp, #4]
 800c02c:	6a3b      	ldr	r3, [r7, #32]
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	68b9      	ldr	r1, [r7, #8]
 800c036:	68f8      	ldr	r0, [r7, #12]
 800c038:	f7ff ff53 	bl	800bee2 <VL53L1_preset_mode_timed_ranging_short_range>
 800c03c:	4603      	mov	r3, r0
 800c03e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800c040:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d106      	bne.n	800c056 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800c048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c04a:	6839      	ldr	r1, [r7, #0]
 800c04c:	68b8      	ldr	r0, [r7, #8]
 800c04e:	f000 fe57 	bl	800cd00 <VL53L1_config_low_power_auto_mode>
 800c052:	4603      	mov	r3, r0
 800c054:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c056:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3718      	adds	r7, #24
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b088      	sub	sp, #32
 800c066:	af02      	add	r7, sp, #8
 800c068:	60f8      	str	r0, [r7, #12]
 800c06a:	60b9      	str	r1, [r7, #8]
 800c06c:	607a      	str	r2, [r7, #4]
 800c06e:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c070:	2300      	movs	r3, #0
 800c072:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800c074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c076:	9301      	str	r3, [sp, #4]
 800c078:	6a3b      	ldr	r3, [r7, #32]
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	68b9      	ldr	r1, [r7, #8]
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f7ff ff67 	bl	800bf56 <VL53L1_preset_mode_timed_ranging_long_range>
 800c088:	4603      	mov	r3, r0
 800c08a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800c08c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d106      	bne.n	800c0a2 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800c094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	68b8      	ldr	r0, [r7, #8]
 800c09a:	f000 fe31 	bl	800cd00 <VL53L1_config_low_power_auto_mode>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800c0a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3718      	adds	r7, #24
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b088      	sub	sp, #32
 800c0b2:	af02      	add	r7, sp, #8
 800c0b4:	60f8      	str	r0, [r7, #12]
 800c0b6:	60b9      	str	r1, [r7, #8]
 800c0b8:	607a      	str	r2, [r7, #4]
 800c0ba:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800c0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c2:	9301      	str	r3, [sp, #4]
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	9300      	str	r3, [sp, #0]
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	68b9      	ldr	r1, [r7, #8]
 800c0ce:	68f8      	ldr	r0, [r7, #12]
 800c0d0:	f7ff fce3 	bl	800ba9a <VL53L1_preset_mode_standard_ranging>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800c0d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d116      	bne.n	800c10e <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	22b1      	movs	r2, #177	; 0xb1
 800c0f0:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	22d4      	movs	r2, #212	; 0xd4
 800c0fc:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800c0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c100:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800c108:	6a3b      	ldr	r3, [r7, #32]
 800c10a:	2210      	movs	r2, #16
 800c10c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800c10e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c112:	4618      	mov	r0, r3
 800c114:	3718      	adds	r7, #24
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b088      	sub	sp, #32
 800c11e:	af02      	add	r7, sp, #8
 800c120:	60f8      	str	r0, [r7, #12]
 800c122:	60b9      	str	r1, [r7, #8]
 800c124:	607a      	str	r2, [r7, #4]
 800c126:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c128:	2300      	movs	r3, #0
 800c12a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800c12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12e:	9301      	str	r3, [sp, #4]
 800c130:	6a3b      	ldr	r3, [r7, #32]
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	687a      	ldr	r2, [r7, #4]
 800c138:	68b9      	ldr	r1, [r7, #8]
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f7ff fcad 	bl	800ba9a <VL53L1_preset_mode_standard_ranging>
 800c140:	4603      	mov	r3, r0
 800c142:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800c144:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d102      	bne.n	800c152 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800c14c:	6a3b      	ldr	r3, [r7, #32]
 800c14e:	2201      	movs	r2, #1
 800c150:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800c152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3718      	adds	r7, #24
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800c15e:	b480      	push	{r7}
 800c160:	b085      	sub	sp, #20
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2201      	movs	r2, #1
 800c16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2202      	movs	r2, #2
 800c176:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	220d      	movs	r2, #13
 800c17e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f640 028e 	movw	r2, #2190	; 0x88e
 800c188:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c18a:	bf00      	nop
 800c18c:	3714      	adds	r7, #20
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800c196:	b480      	push	{r7}
 800c198:	b085      	sub	sp, #20
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
 800c19e:	460b      	mov	r3, r1
 800c1a0:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	332c      	adds	r3, #44	; 0x2c
 800c1aa:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	78fa      	ldrb	r2, [r7, #3]
 800c1b0:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	78fa      	ldrb	r2, [r7, #3]
 800c1c8:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	71da      	strb	r2, [r3, #7]

}
 800c1dc:	bf00      	nop
 800c1de:	3714      	adds	r7, #20
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b087      	sub	sp, #28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	332c      	adds	r3, #44	; 0x2c
 800c1fc:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800c204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10c      	bne.n	800c226 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2203      	movs	r2, #3
 800c210:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2200      	movs	r2, #0
 800c216:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2202      	movs	r2, #2
 800c21c:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	71da      	strb	r2, [r3, #7]
 800c224:	e060      	b.n	800c2e8 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	795b      	ldrb	r3, [r3, #5]
 800c22a:	2bff      	cmp	r3, #255	; 0xff
 800c22c:	d103      	bne.n	800c236 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2280      	movs	r2, #128	; 0x80
 800c232:	715a      	strb	r2, [r3, #5]
 800c234:	e005      	b.n	800c242 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	795b      	ldrb	r3, [r3, #5]
 800c23a:	3301      	adds	r3, #1
 800c23c:	b2da      	uxtb	r2, r3
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	799b      	ldrb	r3, [r3, #6]
 800c246:	f083 0302 	eor.w	r3, r3, #2
 800c24a:	b2da      	uxtb	r2, r3
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	791b      	ldrb	r3, [r3, #4]
 800c254:	3b03      	subs	r3, #3
 800c256:	2b05      	cmp	r3, #5
 800c258:	d839      	bhi.n	800c2ce <VL53L1_update_ll_driver_rd_state+0xe6>
 800c25a:	a201      	add	r2, pc, #4	; (adr r2, 800c260 <VL53L1_update_ll_driver_rd_state+0x78>)
 800c25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c260:	0800c279 	.word	0x0800c279
 800c264:	0800c2cf 	.word	0x0800c2cf
 800c268:	0800c2cf 	.word	0x0800c2cf
 800c26c:	0800c2a3 	.word	0x0800c2a3
 800c270:	0800c2b1 	.word	0x0800c2b1
 800c274:	0800c2b9 	.word	0x0800c2b9

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800c27e:	f003 0302 	and.w	r3, r3, #2
 800c282:	2b00      	cmp	r3, #0
 800c284:	dd03      	ble.n	800c28e <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2206      	movs	r2, #6
 800c28a:	711a      	strb	r2, [r3, #4]
 800c28c:	e002      	b.n	800c294 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2208      	movs	r2, #8
 800c292:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2200      	movs	r2, #0
 800c298:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2200      	movs	r2, #0
 800c29e:	71da      	strb	r2, [r3, #7]

		break;
 800c2a0:	e022      	b.n	800c2e8 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2208      	movs	r2, #8
 800c2ac:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800c2ae:	e01b      	b.n	800c2e8 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2208      	movs	r2, #8
 800c2b4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800c2b6:	e017      	b.n	800c2e8 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	79db      	ldrb	r3, [r3, #7]
 800c2bc:	f083 0301 	eor.w	r3, r3, #1
 800c2c0:	b2da      	uxtb	r2, r3
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2208      	movs	r2, #8
 800c2ca:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800c2cc:	e00c      	b.n	800c2e8 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2203      	movs	r2, #3
 800c2d2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2202      	movs	r2, #2
 800c2de:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	71da      	strb	r2, [r3, #7]

		break;
 800c2e6:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800c2e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	371c      	adds	r7, #28
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b089      	sub	sp, #36	; 0x24
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800c300:	2300      	movs	r3, #0
 800c302:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800c308:	69bb      	ldr	r3, [r7, #24]
 800c30a:	332c      	adds	r3, #44	; 0x2c
 800c30c:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800c314:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800c316:	2300      	movs	r3, #0
 800c318:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800c31e:	2300      	movs	r3, #0
 800c320:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800c326:	f003 031f 	and.w	r3, r3, #31
 800c32a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	78db      	ldrb	r3, [r3, #3]
 800c330:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800c336:	111b      	asrs	r3, r3, #4
 800c338:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800c33a:	f003 0302 	and.w	r3, r3, #2
 800c33e:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800c346:	f003 0320 	and.w	r3, r3, #32
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d017      	beq.n	800c37e <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	791b      	ldrb	r3, [r3, #4]
 800c352:	2b06      	cmp	r3, #6
 800c354:	d105      	bne.n	800c362 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800c356:	7bfb      	ldrb	r3, [r7, #15]
 800c358:	2b12      	cmp	r3, #18
 800c35a:	d010      	beq.n	800c37e <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800c35c:	23ef      	movs	r3, #239	; 0xef
 800c35e:	77fb      	strb	r3, [r7, #31]
 800c360:	e00d      	b.n	800c37e <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	795b      	ldrb	r3, [r3, #5]
 800c366:	7bba      	ldrb	r2, [r7, #14]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d001      	beq.n	800c370 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800c36c:	23ee      	movs	r3, #238	; 0xee
 800c36e:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	799b      	ldrb	r3, [r3, #6]
 800c374:	7b7a      	ldrb	r2, [r7, #13]
 800c376:	429a      	cmp	r2, r3
 800c378:	d001      	beq.n	800c37e <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800c37a:	23ed      	movs	r3, #237	; 0xed
 800c37c:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800c37e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3724      	adds	r7, #36	; 0x24
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800c38e:	b480      	push	{r7}
 800c390:	b087      	sub	sp, #28
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800c396:	2300      	movs	r3, #0
 800c398:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800c39e:	693b      	ldr	r3, [r7, #16]
 800c3a0:	332c      	adds	r3, #44	; 0x2c
 800c3a2:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800c3aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d10c      	bne.n	800c3cc <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	2203      	movs	r2, #3
 800c3b6:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2202      	movs	r2, #2
 800c3c2:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	70da      	strb	r2, [r3, #3]
 800c3ca:	e03e      	b.n	800c44a <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	785b      	ldrb	r3, [r3, #1]
 800c3d0:	2bff      	cmp	r3, #255	; 0xff
 800c3d2:	d103      	bne.n	800c3dc <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2280      	movs	r2, #128	; 0x80
 800c3d8:	705a      	strb	r2, [r3, #1]
 800c3da:	e005      	b.n	800c3e8 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	785b      	ldrb	r3, [r3, #1]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	b2da      	uxtb	r2, r3
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	789b      	ldrb	r3, [r3, #2]
 800c3ec:	f083 0302 	eor.w	r3, r3, #2
 800c3f0:	b2da      	uxtb	r2, r3
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	2b03      	cmp	r3, #3
 800c3fc:	d002      	beq.n	800c404 <VL53L1_update_ll_driver_cfg_state+0x76>
 800c3fe:	2b04      	cmp	r3, #4
 800c400:	d00e      	beq.n	800c420 <VL53L1_update_ll_driver_cfg_state+0x92>
 800c402:	e015      	b.n	800c430 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	78db      	ldrb	r3, [r3, #3]
 800c408:	f083 0301 	eor.w	r3, r3, #1
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2201      	movs	r2, #1
 800c416:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2204      	movs	r2, #4
 800c41c:	701a      	strb	r2, [r3, #0]
		break;
 800c41e:	e014      	b.n	800c44a <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	78db      	ldrb	r3, [r3, #3]
 800c424:	f083 0301 	eor.w	r3, r3, #1
 800c428:	b2da      	uxtb	r2, r3
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	70da      	strb	r2, [r3, #3]

		break;
 800c42e:	e00c      	b.n	800c44a <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2203      	movs	r2, #3
 800c434:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2200      	movs	r2, #0
 800c43a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2202      	movs	r2, #2
 800c440:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2200      	movs	r2, #0
 800c446:	70da      	strb	r2, [r3, #3]

		break;
 800c448:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800c44a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	371c      	adds	r7, #28
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b083      	sub	sp, #12
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
 800c462:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	7c1a      	ldrb	r2, [r3, #16]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	3301      	adds	r3, #1
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	7c52      	ldrb	r2, [r2, #17]
 800c474:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	3302      	adds	r3, #2
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	7c92      	ldrb	r2, [r2, #18]
 800c47e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	3303      	adds	r3, #3
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	7cd2      	ldrb	r2, [r2, #19]
 800c488:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	3304      	adds	r3, #4
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	7d12      	ldrb	r2, [r2, #20]
 800c492:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	3305      	adds	r3, #5
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	7d52      	ldrb	r2, [r2, #21]
 800c49c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	3306      	adds	r3, #6
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	7d92      	ldrb	r2, [r2, #22]
 800c4a6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	3307      	adds	r3, #7
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	7dd2      	ldrb	r2, [r2, #23]
 800c4b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	3308      	adds	r3, #8
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	7e12      	ldrb	r2, [r2, #24]
 800c4ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	3309      	adds	r3, #9
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	7e52      	ldrb	r2, [r2, #25]
 800c4c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	330a      	adds	r3, #10
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	7e92      	ldrb	r2, [r2, #26]
 800c4ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	330b      	adds	r3, #11
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	7ed2      	ldrb	r2, [r2, #27]
 800c4d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	330c      	adds	r3, #12
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	7f12      	ldrb	r2, [r2, #28]
 800c4e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	330d      	adds	r3, #13
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	7f52      	ldrb	r2, [r2, #29]
 800c4ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	330e      	adds	r3, #14
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	7f92      	ldrb	r2, [r2, #30]
 800c4f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	330f      	adds	r3, #15
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	7fd2      	ldrb	r2, [r2, #31]
 800c500:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	3310      	adds	r3, #16
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	f892 2020 	ldrb.w	r2, [r2, #32]
 800c50c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	3311      	adds	r3, #17
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800c518:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	3312      	adds	r3, #18
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800c524:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	3313      	adds	r3, #19
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800c530:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	3314      	adds	r3, #20
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800c53c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	3315      	adds	r3, #21
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800c548:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	3316      	adds	r3, #22
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800c554:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	3317      	adds	r3, #23
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800c560:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	3318      	adds	r3, #24
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800c56c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	3319      	adds	r3, #25
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800c578:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	331a      	adds	r3, #26
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800c584:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	331b      	adds	r3, #27
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800c590:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	331c      	adds	r3, #28
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800c59c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	331d      	adds	r3, #29
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800c5a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	331e      	adds	r3, #30
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800c5b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	331f      	adds	r3, #31
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800c5c0:	701a      	strb	r2, [r3, #0]
}
 800c5c2:	bf00      	nop
 800c5c4:	370c      	adds	r7, #12
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c5ce:	b480      	push	{r7}
 800c5d0:	b085      	sub	sp, #20
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	603a      	str	r2, [r7, #0]
 800c5d8:	80fb      	strh	r3, [r7, #6]
 800c5da:	460b      	mov	r3, r1
 800c5dc:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800c5e6:	88fb      	ldrh	r3, [r7, #6]
 800c5e8:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	81fb      	strh	r3, [r7, #14]
 800c5ee:	e00e      	b.n	800c60e <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800c5f0:	88ba      	ldrh	r2, [r7, #4]
 800c5f2:	89fb      	ldrh	r3, [r7, #14]
 800c5f4:	1ad3      	subs	r3, r2, r3
 800c5f6:	3b01      	subs	r3, #1
 800c5f8:	683a      	ldr	r2, [r7, #0]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	89ba      	ldrh	r2, [r7, #12]
 800c5fe:	b2d2      	uxtb	r2, r2
 800c600:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800c602:	89bb      	ldrh	r3, [r7, #12]
 800c604:	0a1b      	lsrs	r3, r3, #8
 800c606:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800c608:	89fb      	ldrh	r3, [r7, #14]
 800c60a:	3301      	adds	r3, #1
 800c60c:	81fb      	strh	r3, [r7, #14]
 800c60e:	89fa      	ldrh	r2, [r7, #14]
 800c610:	88bb      	ldrh	r3, [r7, #4]
 800c612:	429a      	cmp	r2, r3
 800c614:	d3ec      	bcc.n	800c5f0 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800c616:	bf00      	nop
 800c618:	bf00      	nop
 800c61a:	3714      	adds	r7, #20
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c624:	b480      	push	{r7}
 800c626:	b085      	sub	sp, #20
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	6039      	str	r1, [r7, #0]
 800c62e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800c630:	2300      	movs	r3, #0
 800c632:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800c634:	e00a      	b.n	800c64c <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800c636:	89fb      	ldrh	r3, [r7, #14]
 800c638:	021b      	lsls	r3, r3, #8
 800c63a:	b21a      	sxth	r2, r3
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	1c59      	adds	r1, r3, #1
 800c640:	6039      	str	r1, [r7, #0]
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	b21b      	sxth	r3, r3
 800c646:	4313      	orrs	r3, r2
 800c648:	b21b      	sxth	r3, r3
 800c64a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800c64c:	88fb      	ldrh	r3, [r7, #6]
 800c64e:	1e5a      	subs	r2, r3, #1
 800c650:	80fa      	strh	r2, [r7, #6]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1ef      	bne.n	800c636 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800c656:	89fb      	ldrh	r3, [r7, #14]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3714      	adds	r7, #20
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c664:	b480      	push	{r7}
 800c666:	b085      	sub	sp, #20
 800c668:	af00      	add	r7, sp, #0
 800c66a:	4603      	mov	r3, r0
 800c66c:	603a      	str	r2, [r7, #0]
 800c66e:	80fb      	strh	r3, [r7, #6]
 800c670:	460b      	mov	r3, r1
 800c672:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800c674:	2300      	movs	r3, #0
 800c676:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800c678:	2300      	movs	r3, #0
 800c67a:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800c67c:	88fb      	ldrh	r3, [r7, #6]
 800c67e:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800c680:	2300      	movs	r3, #0
 800c682:	81fb      	strh	r3, [r7, #14]
 800c684:	e00f      	b.n	800c6a6 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800c686:	88ba      	ldrh	r2, [r7, #4]
 800c688:	89fb      	ldrh	r3, [r7, #14]
 800c68a:	1ad3      	subs	r3, r2, r3
 800c68c:	3b01      	subs	r3, #1
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	4413      	add	r3, r2
 800c692:	89ba      	ldrh	r2, [r7, #12]
 800c694:	b2d2      	uxtb	r2, r2
 800c696:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800c698:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c69c:	121b      	asrs	r3, r3, #8
 800c69e:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800c6a0:	89fb      	ldrh	r3, [r7, #14]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	81fb      	strh	r3, [r7, #14]
 800c6a6:	89fa      	ldrh	r2, [r7, #14]
 800c6a8:	88bb      	ldrh	r3, [r7, #4]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d3eb      	bcc.n	800c686 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800c6ae:	bf00      	nop
 800c6b0:	bf00      	nop
 800c6b2:	3714      	adds	r7, #20
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	6039      	str	r1, [r7, #0]
 800c6c6:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	781b      	ldrb	r3, [r3, #0]
 800c6d0:	b25b      	sxtb	r3, r3
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	da0e      	bge.n	800c6f4 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800c6d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c6da:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800c6dc:	e00a      	b.n	800c6f4 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800c6de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c6e2:	021b      	lsls	r3, r3, #8
 800c6e4:	b21a      	sxth	r2, r3
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	1c59      	adds	r1, r3, #1
 800c6ea:	6039      	str	r1, [r7, #0]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	b21b      	sxth	r3, r3
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800c6f4:	88fb      	ldrh	r3, [r7, #6]
 800c6f6:	1e5a      	subs	r2, r3, #1
 800c6f8:	80fa      	strh	r2, [r7, #6]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1ef      	bne.n	800c6de <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800c6fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3714      	adds	r7, #20
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr

0800c70e <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c70e:	b480      	push	{r7}
 800c710:	b087      	sub	sp, #28
 800c712:	af00      	add	r7, sp, #0
 800c714:	60f8      	str	r0, [r7, #12]
 800c716:	460b      	mov	r3, r1
 800c718:	607a      	str	r2, [r7, #4]
 800c71a:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800c71c:	2300      	movs	r3, #0
 800c71e:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800c728:	2300      	movs	r3, #0
 800c72a:	82fb      	strh	r3, [r7, #22]
 800c72c:	e00e      	b.n	800c74c <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800c72e:	897a      	ldrh	r2, [r7, #10]
 800c730:	8afb      	ldrh	r3, [r7, #22]
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	3b01      	subs	r3, #1
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	4413      	add	r3, r2
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	b2d2      	uxtb	r2, r2
 800c73e:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	0a1b      	lsrs	r3, r3, #8
 800c744:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800c746:	8afb      	ldrh	r3, [r7, #22]
 800c748:	3301      	adds	r3, #1
 800c74a:	82fb      	strh	r3, [r7, #22]
 800c74c:	8afa      	ldrh	r2, [r7, #22]
 800c74e:	897b      	ldrh	r3, [r7, #10]
 800c750:	429a      	cmp	r2, r3
 800c752:	d3ec      	bcc.n	800c72e <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800c754:	bf00      	nop
 800c756:	bf00      	nop
 800c758:	371c      	adds	r7, #28
 800c75a:	46bd      	mov	sp, r7
 800c75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c760:	4770      	bx	lr

0800c762 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c762:	b480      	push	{r7}
 800c764:	b085      	sub	sp, #20
 800c766:	af00      	add	r7, sp, #0
 800c768:	4603      	mov	r3, r0
 800c76a:	6039      	str	r1, [r7, #0]
 800c76c:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800c76e:	2300      	movs	r3, #0
 800c770:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800c772:	e007      	b.n	800c784 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	021a      	lsls	r2, r3, #8
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	1c59      	adds	r1, r3, #1
 800c77c:	6039      	str	r1, [r7, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	4313      	orrs	r3, r2
 800c782:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800c784:	88fb      	ldrh	r3, [r7, #6]
 800c786:	1e5a      	subs	r2, r3, #1
 800c788:	80fa      	strh	r2, [r7, #6]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1f2      	bne.n	800c774 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800c78e:	68fb      	ldr	r3, [r7, #12]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	6039      	str	r1, [r7, #0]
 800c7a6:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	b25b      	sxtb	r3, r3
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	da0b      	bge.n	800c7ce <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800c7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ba:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800c7bc:	e007      	b.n	800c7ce <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	021a      	lsls	r2, r3, #8
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	1c59      	adds	r1, r3, #1
 800c7c6:	6039      	str	r1, [r7, #0]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800c7ce:	88fb      	ldrh	r3, [r7, #6]
 800c7d0:	1e5a      	subs	r2, r3, #1
 800c7d2:	80fa      	strh	r2, [r7, #6]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1f2      	bne.n	800c7be <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3714      	adds	r7, #20
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr

0800c7e6 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b084      	sub	sp, #16
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
 800c7ee:	460b      	mov	r3, r1
 800c7f0:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	78fa      	ldrb	r2, [r7, #3]
 800c7fe:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800c808:	461a      	mov	r2, r3
 800c80a:	2183      	movs	r1, #131	; 0x83
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f001 fd1b 	bl	800e248 <VL53L1_WrByte>
 800c812:	4603      	mov	r3, r0
 800c814:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800c816:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b084      	sub	sp, #16
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800c82a:	2300      	movs	r3, #0
 800c82c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800c82e:	2101      	movs	r1, #1
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7ff ffd8 	bl	800c7e6 <VL53L1_set_powerforce_register>
 800c836:	4603      	mov	r3, r0
 800c838:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800c83a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b086      	sub	sp, #24
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	4603      	mov	r3, r0
 800c84e:	460a      	mov	r2, r1
 800c850:	80fb      	strh	r3, [r7, #6]
 800c852:	4613      	mov	r3, r2
 800c854:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800c856:	2300      	movs	r3, #0
 800c858:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800c85a:	2300      	movs	r3, #0
 800c85c:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800c862:	88fb      	ldrh	r3, [r7, #6]
 800c864:	4618      	mov	r0, r3
 800c866:	f000 faa9 	bl	800cdbc <VL53L1_calc_pll_period_us>
 800c86a:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800c86c:	797b      	ldrb	r3, [r7, #5]
 800c86e:	4618      	mov	r0, r3
 800c870:	f000 fab8 	bl	800cde4 <VL53L1_decode_vcsel_period>
 800c874:	4603      	mov	r3, r0
 800c876:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800c878:	697a      	ldr	r2, [r7, #20]
 800c87a:	4613      	mov	r3, r2
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	4413      	add	r3, r2
 800c880:	021b      	lsls	r3, r3, #8
 800c882:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	099b      	lsrs	r3, r3, #6
 800c888:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800c88a:	7cfa      	ldrb	r2, [r7, #19]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	fb02 f303 	mul.w	r3, r2, r3
 800c892:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	099b      	lsrs	r3, r3, #6
 800c898:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800c89a:	68fb      	ldr	r3, [r7, #12]
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3718      	adds	r7, #24
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b089      	sub	sp, #36	; 0x24
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	4608      	mov	r0, r1
 800c8ae:	4611      	mov	r1, r2
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	817b      	strh	r3, [r7, #10]
 800c8b6:	460b      	mov	r3, r1
 800c8b8:	813b      	strh	r3, [r7, #8]
 800c8ba:	4613      	mov	r3, r2
 800c8bc:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	011b      	lsls	r3, r3, #4
 800c8d6:	4a23      	ldr	r2, [pc, #140]	; (800c964 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c8d8:	fb82 1203 	smull	r1, r2, r2, r3
 800c8dc:	1192      	asrs	r2, r2, #6
 800c8de:	17db      	asrs	r3, r3, #31
 800c8e0:	1ad3      	subs	r3, r2, r3
 800c8e2:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800c8e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	da03      	bge.n	800c8f4 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800c8ec:	897b      	ldrh	r3, [r7, #10]
 800c8ee:	425b      	negs	r3, r3
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800c8f4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	da03      	bge.n	800c904 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800c8fc:	893b      	ldrh	r3, [r7, #8]
 800c8fe:	425b      	negs	r3, r3
 800c900:	b29b      	uxth	r3, r3
 800c902:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800c904:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800c908:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c90c:	4413      	add	r3, r2
 800c90e:	015b      	lsls	r3, r3, #5
 800c910:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	4a13      	ldr	r2, [pc, #76]	; (800c964 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c916:	fb82 1203 	smull	r1, r2, r2, r3
 800c91a:	1192      	asrs	r2, r2, #6
 800c91c:	17db      	asrs	r3, r3, #31
 800c91e:	1ad3      	subs	r3, r2, r3
 800c920:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800c922:	697a      	ldr	r2, [r7, #20]
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	4413      	add	r3, r2
 800c928:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800c92a:	79fa      	ldrb	r2, [r7, #7]
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	fb02 f303 	mul.w	r3, r2, r3
 800c932:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	3310      	adds	r3, #16
 800c938:	2b00      	cmp	r3, #0
 800c93a:	da00      	bge.n	800c93e <VL53L1_calc_range_ignore_threshold+0x9a>
 800c93c:	331f      	adds	r3, #31
 800c93e:	115b      	asrs	r3, r3, #5
 800c940:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c948:	db03      	blt.n	800c952 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800c94a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c94e:	83fb      	strh	r3, [r7, #30]
 800c950:	e001      	b.n	800c956 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800c956:	8bfb      	ldrh	r3, [r7, #30]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3724      	adds	r7, #36	; 0x24
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr
 800c964:	10624dd3 	.word	0x10624dd3

0800c968 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800c972:	2300      	movs	r3, #0
 800c974:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	031a      	lsls	r2, r3, #12
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	085b      	lsrs	r3, r3, #1
 800c97e:	441a      	add	r2, r3
	timeout_mclks   =
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	fbb2 f3f3 	udiv	r3, r2, r3
 800c986:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800c988:	68fb      	ldr	r3, [r7, #12]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3714      	adds	r7, #20
 800c98e:	46bd      	mov	sp, r7
 800c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c994:	4770      	bx	lr

0800c996 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b084      	sub	sp, #16
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
 800c99e:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f7ff ffdc 	bl	800c968 <VL53L1_calc_timeout_mclks>
 800c9b0:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f000 f860 	bl	800ca78 <VL53L1_encode_timeout>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800c9bc:	897b      	ldrh	r3, [r7, #10]
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800c9c6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c9ca:	b087      	sub	sp, #28
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800c9d2:	2100      	movs	r1, #0
 800c9d4:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800c9d6:	f04f 0000 	mov.w	r0, #0
 800c9da:	f04f 0100 	mov.w	r1, #0
 800c9de:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800c9e2:	6879      	ldr	r1, [r7, #4]
 800c9e4:	2000      	movs	r0, #0
 800c9e6:	4688      	mov	r8, r1
 800c9e8:	4681      	mov	r9, r0
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	460c      	mov	r4, r1
 800c9f0:	4605      	mov	r5, r0
 800c9f2:	fb04 f009 	mul.w	r0, r4, r9
 800c9f6:	fb08 f105 	mul.w	r1, r8, r5
 800c9fa:	4401      	add	r1, r0
 800c9fc:	fba8 2304 	umull	r2, r3, r8, r4
 800ca00:	4419      	add	r1, r3
 800ca02:	460b      	mov	r3, r1
 800ca04:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800ca08:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800ca0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ca10:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800ca14:	f143 0b00 	adc.w	fp, r3, #0
 800ca18:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800ca1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca20:	f04f 0200 	mov.w	r2, #0
 800ca24:	f04f 0300 	mov.w	r3, #0
 800ca28:	0b02      	lsrs	r2, r0, #12
 800ca2a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800ca2e:	0b0b      	lsrs	r3, r1, #12
 800ca30:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800ca38:	697b      	ldr	r3, [r7, #20]
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	371c      	adds	r7, #28
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ca44:	4770      	bx	lr

0800ca46 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800ca46:	b580      	push	{r7, lr}
 800ca48:	b084      	sub	sp, #16
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	6039      	str	r1, [r7, #0]
 800ca50:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800ca52:	2300      	movs	r3, #0
 800ca54:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800ca56:	2300      	movs	r3, #0
 800ca58:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800ca5a:	88fb      	ldrh	r3, [r7, #6]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f000 f837 	bl	800cad0 <VL53L1_decode_timeout>
 800ca62:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800ca64:	6839      	ldr	r1, [r7, #0]
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f7ff ffad 	bl	800c9c6 <VL53L1_calc_timeout_us>
 800ca6c:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800ca6e:	68bb      	ldr	r3, [r7, #8]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b087      	sub	sp, #28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d017      	beq.n	800cac2 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	3b01      	subs	r3, #1
 800ca96:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ca98:	e005      	b.n	800caa6 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	085b      	lsrs	r3, r3, #1
 800ca9e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800caa0:	89fb      	ldrh	r3, [r7, #14]
 800caa2:	3301      	adds	r3, #1
 800caa4:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800caac:	2b00      	cmp	r3, #0
 800caae:	d1f4      	bne.n	800ca9a <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800cab0:	89fb      	ldrh	r3, [r7, #14]
 800cab2:	021b      	lsls	r3, r3, #8
 800cab4:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	b29b      	uxth	r3, r3
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800cabe:	4413      	add	r3, r2
 800cac0:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800cac2:	8afb      	ldrh	r3, [r7, #22]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	371c      	adds	r7, #28
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr

0800cad0 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	4603      	mov	r3, r0
 800cad8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800cada:	2300      	movs	r3, #0
 800cadc:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800cade:	88fb      	ldrh	r3, [r7, #6]
 800cae0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800cae2:	88fa      	ldrh	r2, [r7, #6]
 800cae4:	0a12      	lsrs	r2, r2, #8
 800cae6:	b292      	uxth	r2, r2
 800cae8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800caea:	3301      	adds	r3, #1
 800caec:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800caee:	68fb      	ldr	r3, [r7, #12]
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b088      	sub	sp, #32
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	607a      	str	r2, [r7, #4]
 800cb08:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800cb12:	2300      	movs	r3, #0
 800cb14:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800cb1a:	887b      	ldrh	r3, [r7, #2]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d102      	bne.n	800cb26 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800cb20:	23f1      	movs	r3, #241	; 0xf1
 800cb22:	77fb      	strb	r3, [r7, #31]
 800cb24:	e05d      	b.n	800cbe2 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800cb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb28:	799a      	ldrb	r2, [r3, #6]
 800cb2a:	887b      	ldrh	r3, [r7, #2]
 800cb2c:	4611      	mov	r1, r2
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f7ff fe89 	bl	800c846 <VL53L1_calc_macro_period_us>
 800cb34:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800cb36:	6979      	ldr	r1, [r7, #20]
 800cb38:	68f8      	ldr	r0, [r7, #12]
 800cb3a:	f7ff ff15 	bl	800c968 <VL53L1_calc_timeout_mclks>
 800cb3e:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	2bff      	cmp	r3, #255	; 0xff
 800cb44:	d901      	bls.n	800cb4a <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800cb46:	23ff      	movs	r3, #255	; 0xff
 800cb48:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800cb4a:	69bb      	ldr	r3, [r7, #24]
 800cb4c:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800cb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb50:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800cb52:	6979      	ldr	r1, [r7, #20]
 800cb54:	68b8      	ldr	r0, [r7, #8]
 800cb56:	f7ff ff1e 	bl	800c996 <VL53L1_calc_encoded_timeout>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800cb5e:	8a7b      	ldrh	r3, [r7, #18]
 800cb60:	0a1b      	lsrs	r3, r3, #8
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb68:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800cb6a:	8a7b      	ldrh	r3, [r7, #18]
 800cb6c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800cb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb70:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800cb72:	6979      	ldr	r1, [r7, #20]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff ff0e 	bl	800c996 <VL53L1_calc_encoded_timeout>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800cb7e:	8a7b      	ldrh	r3, [r7, #18]
 800cb80:	0a1b      	lsrs	r3, r3, #8
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800cb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb88:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800cb8a:	8a7b      	ldrh	r3, [r7, #18]
 800cb8c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb90:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800cb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb94:	7a5a      	ldrb	r2, [r3, #9]
 800cb96:	887b      	ldrh	r3, [r7, #2]
 800cb98:	4611      	mov	r1, r2
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7ff fe53 	bl	800c846 <VL53L1_calc_macro_period_us>
 800cba0:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800cba2:	6979      	ldr	r1, [r7, #20]
 800cba4:	68b8      	ldr	r0, [r7, #8]
 800cba6:	f7ff fef6 	bl	800c996 <VL53L1_calc_encoded_timeout>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800cbae:	8a7b      	ldrh	r3, [r7, #18]
 800cbb0:	0a1b      	lsrs	r3, r3, #8
 800cbb2:	b29b      	uxth	r3, r3
 800cbb4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800cbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb8:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800cbba:	8a7b      	ldrh	r3, [r7, #18]
 800cbbc:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800cbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc0:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800cbc2:	6979      	ldr	r1, [r7, #20]
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f7ff fee6 	bl	800c996 <VL53L1_calc_encoded_timeout>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800cbce:	8a7b      	ldrh	r3, [r7, #18]
 800cbd0:	0a1b      	lsrs	r3, r3, #8
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800cbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800cbda:	8a7b      	ldrh	r3, [r7, #18]
 800cbdc:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800cbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe0:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800cbe2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3720      	adds	r7, #32
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800cbee:	b480      	push	{r7}
 800cbf0:	b083      	sub	sp, #12
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	603a      	str	r2, [r7, #0]
 800cbf8:	71fb      	strb	r3, [r7, #7]
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800cbfe:	79fb      	ldrb	r3, [r7, #7]
 800cc00:	2b07      	cmp	r3, #7
 800cc02:	d90a      	bls.n	800cc1a <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800cc04:	79bb      	ldrb	r3, [r7, #6]
 800cc06:	00db      	lsls	r3, r3, #3
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	79fb      	ldrb	r3, [r7, #7]
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	3b71      	subs	r3, #113	; 0x71
 800cc12:	b2da      	uxtb	r2, r3
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800cc18:	e00a      	b.n	800cc30 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800cc1a:	79bb      	ldrb	r3, [r7, #6]
 800cc1c:	f1c3 030f 	rsb	r3, r3, #15
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	00db      	lsls	r3, r3, #3
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	79fb      	ldrb	r3, [r7, #7]
 800cc28:	4413      	add	r3, r2
 800cc2a:	b2da      	uxtb	r2, r3
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	701a      	strb	r2, [r3, #0]
}
 800cc30:	bf00      	nop
 800cc32:	370c      	adds	r7, #12
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b085      	sub	sp, #20
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	4603      	mov	r3, r0
 800cc44:	60b9      	str	r1, [r7, #8]
 800cc46:	607a      	str	r2, [r7, #4]
 800cc48:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800cc4a:	7bfb      	ldrb	r3, [r7, #15]
 800cc4c:	091b      	lsrs	r3, r3, #4
 800cc4e:	b2da      	uxtb	r2, r3
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	f003 030f 	and.w	r3, r3, #15
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	701a      	strb	r2, [r3, #0]

}
 800cc60:	bf00      	nop
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	603a      	str	r2, [r7, #0]
 800cc76:	71fb      	strb	r3, [r7, #7]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800cc7c:	79bb      	ldrb	r3, [r7, #6]
 800cc7e:	011b      	lsls	r3, r3, #4
 800cc80:	b2da      	uxtb	r2, r3
 800cc82:	79fb      	ldrb	r3, [r7, #7]
 800cc84:	4413      	add	r3, r2
 800cc86:	b2da      	uxtb	r2, r3
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	701a      	strb	r2, [r3, #0]

}
 800cc8c:	bf00      	nop
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr

0800cc98 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800cc98:	b480      	push	{r7}
 800cc9a:	b085      	sub	sp, #20
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cca0:	2300      	movs	r3, #0
 800cca2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	2203      	movs	r2, #3
 800ccac:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	2200      	movs	r2, #0
 800ccec:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800ccf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	3714      	adds	r7, #20
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b087      	sub	sp, #28
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2201      	movs	r2, #1
 800cd14:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	229b      	movs	r2, #155	; 0x9b
 800cd20:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800cd22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	371c      	adds	r7, #28
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800cd32:	b480      	push	{r7}
 800cd34:	b085      	sub	sp, #20
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800cd60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800cd72:	f003 0303 	and.w	r3, r3, #3
 800cd76:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800cd82:	4413      	add	r3, r2
 800cd84:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800cdac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3714      	adds	r7, #20
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr

0800cdbc <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800cdca:	88fb      	ldrh	r3, [r7, #6]
 800cdcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800cdd0:	fb92 f3f3 	sdiv	r3, r2, r3
 800cdd4:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3714      	adds	r7, #20
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	4603      	mov	r3, r0
 800cdec:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800cdf2:	79fb      	ldrb	r3, [r7, #7]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	b2db      	uxtb	r3, r3
 800cdf8:	005b      	lsls	r3, r3, #1
 800cdfa:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3714      	adds	r7, #20
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr

0800ce0a <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800ce0a:	b480      	push	{r7}
 800ce0c:	b085      	sub	sp, #20
 800ce0e:	af00      	add	r7, sp, #0
 800ce10:	4603      	mov	r3, r0
 800ce12:	60b9      	str	r1, [r7, #8]
 800ce14:	607a      	str	r2, [r7, #4]
 800ce16:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800ce18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	da10      	bge.n	800ce42 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
 800ce22:	43db      	mvns	r3, r3
 800ce24:	b2db      	uxtb	r3, r3
 800ce26:	f003 0307 	and.w	r3, r3, #7
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	3308      	adds	r3, #8
 800ce2e:	b2da      	uxtb	r2, r3
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800ce34:	7bfb      	ldrb	r3, [r7, #15]
 800ce36:	3b80      	subs	r3, #128	; 0x80
 800ce38:	10db      	asrs	r3, r3, #3
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800ce40:	e00c      	b.n	800ce5c <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
 800ce44:	f003 0307 	and.w	r3, r3, #7
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800ce4e:	7bfb      	ldrb	r3, [r7, #15]
 800ce50:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800ce54:	10db      	asrs	r3, r3, #3
 800ce56:	b2da      	uxtb	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	701a      	strb	r2, [r3, #0]
}
 800ce5c:	bf00      	nop
 800ce5e:	3714      	adds	r7, #20
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr

0800ce68 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b086      	sub	sp, #24
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	460b      	mov	r3, r1
 800ce72:	607a      	str	r2, [r7, #4]
 800ce74:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ce76:	2300      	movs	r3, #0
 800ce78:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800ce7a:	897b      	ldrh	r3, [r7, #10]
 800ce7c:	2b0a      	cmp	r3, #10
 800ce7e:	d802      	bhi.n	800ce86 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ce80:	f06f 0309 	mvn.w	r3, #9
 800ce84:	e047      	b.n	800cf16 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce8e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800ce9c:	f002 020f 	and.w	r2, r2, #15
 800cea0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800cea2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800ceac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ceb0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ceb2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800cebc:	f002 0203 	and.w	r2, r2, #3
 800cec0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800cec2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800cecc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ced0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ced2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	88d8      	ldrh	r0, [r3, #6]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	3305      	adds	r3, #5
 800cedc:	461a      	mov	r2, r3
 800cede:	2102      	movs	r1, #2
 800cee0:	f7ff fb75 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800ceec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800cef6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800cf00:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800cf04:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800cf06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800cf10:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800cf12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3718      	adds	r7, #24
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b086      	sub	sp, #24
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	4603      	mov	r3, r0
 800cf26:	60b9      	str	r1, [r7, #8]
 800cf28:	607a      	str	r2, [r7, #4]
 800cf2a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800cf30:	89fb      	ldrh	r3, [r7, #14]
 800cf32:	2b0a      	cmp	r3, #10
 800cf34:	d802      	bhi.n	800cf3c <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cf36:	f06f 0309 	mvn.w	r3, #9
 800cf3a:	e046      	b.n	800cfca <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf44:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	f003 030f 	and.w	r3, r3, #15
 800cf54:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	3302      	adds	r3, #2
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf64:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	3303      	adds	r3, #3
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	f003 0303 	and.w	r3, r3, #3
 800cf74:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	781b      	ldrb	r3, [r3, #0]
 800cf80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf84:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	3305      	adds	r3, #5
 800cf8e:	4619      	mov	r1, r3
 800cf90:	2002      	movs	r0, #2
 800cf92:	f7ff fb47 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800cf96:	4603      	mov	r3, r0
 800cf98:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	79da      	ldrb	r2, [r3, #7]
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	7a1a      	ldrb	r2, [r3, #8]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	3309      	adds	r3, #9
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfb8:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	7a9a      	ldrb	r2, [r3, #10]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800cfc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3718      	adds	r7, #24
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b086      	sub	sp, #24
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
 800cfda:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800cfe0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d108      	bne.n	800cffa <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800cfe8:	f107 020c 	add.w	r2, r7, #12
 800cfec:	230b      	movs	r3, #11
 800cfee:	2101      	movs	r1, #1
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f001 f8f3 	bl	800e1dc <VL53L1_ReadMulti>
 800cff6:	4603      	mov	r3, r0
 800cff8:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800cffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d108      	bne.n	800d014 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800d002:	f107 030c 	add.w	r3, r7, #12
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	4619      	mov	r1, r3
 800d00a:	200b      	movs	r0, #11
 800d00c:	f7ff ff87 	bl	800cf1e <VL53L1_i2c_decode_static_nvm_managed>
 800d010:	4603      	mov	r3, r0
 800d012:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800d014:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3718      	adds	r7, #24
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	460b      	mov	r3, r1
 800d02a:	607a      	str	r2, [r7, #4]
 800d02c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d02e:	2300      	movs	r3, #0
 800d030:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800d032:	897b      	ldrh	r3, [r7, #10]
 800d034:	2b16      	cmp	r3, #22
 800d036:	d802      	bhi.n	800d03e <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d038:	f06f 0309 	mvn.w	r3, #9
 800d03c:	e076      	b.n	800d12c <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800d04a:	68fa      	ldr	r2, [r7, #12]
 800d04c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800d04e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800d058:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800d05e:	68fa      	ldr	r2, [r7, #12]
 800d060:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800d062:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800d06c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800d076:	f002 020f 	and.w	r2, r2, #15
 800d07a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800d07c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800d086:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800d090:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800d094:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800d096:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800d0a0:	f002 0203 	and.w	r2, r2, #3
 800d0a4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800d0a6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	8958      	ldrh	r0, [r3, #10]
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	3309      	adds	r3, #9
 800d0b0:	461a      	mov	r2, r3
 800d0b2:	2102      	movs	r1, #2
 800d0b4:	f7ff fa8b 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	330b      	adds	r3, #11
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	2102      	movs	r1, #2
 800d0c6:	f7ff facd 	bl	800c664 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	330d      	adds	r3, #13
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	2102      	movs	r1, #2
 800d0d8:	f7ff fac4 	bl	800c664 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	8a18      	ldrh	r0, [r3, #16]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	330f      	adds	r3, #15
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	2102      	movs	r1, #2
 800d0e8:	f7ff fa71 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800d0f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0f6:	b218      	sxth	r0, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	3311      	adds	r3, #17
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	2102      	movs	r1, #2
 800d100:	f7ff fab0 	bl	800c664 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	3313      	adds	r3, #19
 800d10e:	461a      	mov	r2, r3
 800d110:	2102      	movs	r1, #2
 800d112:	f7ff faa7 	bl	800c664 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	3315      	adds	r3, #21
 800d120:	461a      	mov	r2, r3
 800d122:	2102      	movs	r1, #2
 800d124:	f7ff fa9e 	bl	800c664 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800d128:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3718      	adds	r7, #24
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b086      	sub	sp, #24
 800d138:	af00      	add	r7, sp, #0
 800d13a:	4603      	mov	r3, r0
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	607a      	str	r2, [r7, #4]
 800d140:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d142:	2300      	movs	r3, #0
 800d144:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800d146:	89fb      	ldrh	r3, [r7, #14]
 800d148:	2b16      	cmp	r3, #22
 800d14a:	d802      	bhi.n	800d152 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d14c:	f06f 0309 	mvn.w	r3, #9
 800d150:	e079      	b.n	800d246 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	785a      	ldrb	r2, [r3, #1]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	789a      	ldrb	r2, [r3, #2]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	78da      	ldrb	r2, [r3, #3]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	791a      	ldrb	r2, [r3, #4]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	3305      	adds	r3, #5
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	f003 030f 	and.w	r3, r3, #15
 800d184:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	799a      	ldrb	r2, [r3, #6]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	3307      	adds	r3, #7
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d19c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800d1a2:	68bb      	ldr	r3, [r7, #8]
 800d1a4:	3308      	adds	r3, #8
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	f003 0303 	and.w	r3, r3, #3
 800d1ac:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	3309      	adds	r3, #9
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	2002      	movs	r0, #2
 800d1ba:	f7ff fa33 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	330b      	adds	r3, #11
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	2002      	movs	r0, #2
 800d1ce:	f7ff fa75 	bl	800c6bc <VL53L1_i2c_decode_int16_t>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	330d      	adds	r3, #13
 800d1de:	4619      	mov	r1, r3
 800d1e0:	2002      	movs	r0, #2
 800d1e2:	f7ff fa6b 	bl	800c6bc <VL53L1_i2c_decode_int16_t>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	330f      	adds	r3, #15
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	2002      	movs	r0, #2
 800d1f6:	f7ff fa15 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	3311      	adds	r3, #17
 800d206:	4619      	mov	r1, r3
 800d208:	2002      	movs	r0, #2
 800d20a:	f7ff fa57 	bl	800c6bc <VL53L1_i2c_decode_int16_t>
 800d20e:	4603      	mov	r3, r0
 800d210:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d214:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	3313      	adds	r3, #19
 800d21e:	4619      	mov	r1, r3
 800d220:	2002      	movs	r0, #2
 800d222:	f7ff fa4b 	bl	800c6bc <VL53L1_i2c_decode_int16_t>
 800d226:	4603      	mov	r3, r0
 800d228:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	3315      	adds	r3, #21
 800d232:	4619      	mov	r1, r3
 800d234:	2002      	movs	r0, #2
 800d236:	f7ff fa41 	bl	800c6bc <VL53L1_i2c_decode_int16_t>
 800d23a:	4603      	mov	r3, r0
 800d23c:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800d242:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d246:	4618      	mov	r0, r3
 800d248:	3718      	adds	r7, #24
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b088      	sub	sp, #32
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d258:	2300      	movs	r3, #0
 800d25a:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800d25c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d108      	bne.n	800d276 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800d264:	f107 0208 	add.w	r2, r7, #8
 800d268:	2317      	movs	r3, #23
 800d26a:	210d      	movs	r1, #13
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 ffb5 	bl	800e1dc <VL53L1_ReadMulti>
 800d272:	4603      	mov	r3, r0
 800d274:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800d276:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d108      	bne.n	800d290 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800d27e:	f107 0308 	add.w	r3, r7, #8
 800d282:	683a      	ldr	r2, [r7, #0]
 800d284:	4619      	mov	r1, r3
 800d286:	2017      	movs	r0, #23
 800d288:	f7ff ff54 	bl	800d134 <VL53L1_i2c_decode_customer_nvm_managed>
 800d28c:	4603      	mov	r3, r0
 800d28e:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800d290:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3720      	adds	r7, #32
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b086      	sub	sp, #24
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	60f8      	str	r0, [r7, #12]
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	607a      	str	r2, [r7, #4]
 800d2a8:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d2ae:	897b      	ldrh	r3, [r7, #10]
 800d2b0:	2b1f      	cmp	r3, #31
 800d2b2:	d802      	bhi.n	800d2ba <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d2b4:	f06f 0309 	mvn.w	r3, #9
 800d2b8:	e0cf      	b.n	800d45a <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	881b      	ldrh	r3, [r3, #0]
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	2102      	movs	r1, #2
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7ff f983 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800d2d0:	f002 0201 	and.w	r2, r2, #1
 800d2d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800d2d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800d2e0:	f002 020f 	and.w	r2, r2, #15
 800d2e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800d2e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800d2f0:	f002 020f 	and.w	r2, r2, #15
 800d2f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800d2f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800d300:	f002 021f 	and.w	r2, r2, #31
 800d304:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800d306:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800d310:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d314:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d316:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800d320:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d324:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800d326:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800d330:	f002 0201 	and.w	r2, r2, #1
 800d334:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800d336:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800d340:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800d34a:	f002 0201 	and.w	r2, r2, #1
 800d34e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800d350:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800d35a:	f002 0203 	and.w	r2, r2, #3
 800d35e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800d360:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800d36a:	f002 021f 	and.w	r2, r2, #31
 800d36e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800d370:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800d37a:	f002 0203 	and.w	r2, r2, #3
 800d37e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800d380:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800d38a:	f002 0203 	and.w	r2, r2, #3
 800d38e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800d390:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800d39a:	f002 0207 	and.w	r2, r2, #7
 800d39e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800d3a0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800d3aa:	f002 021f 	and.w	r2, r2, #31
 800d3ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800d3b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800d3ba:	f002 0201 	and.w	r2, r2, #1
 800d3be:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800d3c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800d3ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800d3d0:	68fa      	ldr	r2, [r7, #12]
 800d3d2:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800d3d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800d3da:	68fa      	ldr	r2, [r7, #12]
 800d3dc:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800d3de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800d3e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800d3ee:	68fa      	ldr	r2, [r7, #12]
 800d3f0:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800d3f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800d3fc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	8b18      	ldrh	r0, [r3, #24]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	3318      	adds	r3, #24
 800d406:	461a      	mov	r2, r3
 800d408:	2102      	movs	r1, #2
 800d40a:	f7ff f8e0 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800d416:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800d41c:	68fa      	ldr	r2, [r7, #12]
 800d41e:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800d420:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800d42a:	f002 020f 	and.w	r2, r2, #15
 800d42e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800d430:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800d436:	68fa      	ldr	r2, [r7, #12]
 800d438:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800d43a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800d444:	f002 020f 	and.w	r2, r2, #15
 800d448:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800d44a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800d454:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d456:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3718      	adds	r7, #24
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b086      	sub	sp, #24
 800d466:	af00      	add	r7, sp, #0
 800d468:	60f8      	str	r0, [r7, #12]
 800d46a:	460b      	mov	r3, r1
 800d46c:	607a      	str	r2, [r7, #4]
 800d46e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d470:	2300      	movs	r3, #0
 800d472:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d474:	897b      	ldrh	r3, [r7, #10]
 800d476:	2b15      	cmp	r3, #21
 800d478:	d802      	bhi.n	800d480 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d47a:	f06f 0309 	mvn.w	r3, #9
 800d47e:	e070      	b.n	800d562 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800d48c:	68fa      	ldr	r2, [r7, #12]
 800d48e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800d490:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800d49a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800d4a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d4a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800d4aa:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800d4b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d4b4:	b298      	uxth	r0, r3
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	3304      	adds	r3, #4
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	2102      	movs	r1, #2
 800d4be:	f7ff f886 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800d4ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d4ce:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d4d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800d4da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800d4e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800d4ee:	f002 0201 	and.w	r2, r2, #1
 800d4f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d4f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800d4fe:	f002 0207 	and.w	r2, r2, #7
 800d502:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800d504:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	8998      	ldrh	r0, [r3, #12]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	330c      	adds	r3, #12
 800d50e:	461a      	mov	r2, r3
 800d510:	2102      	movs	r1, #2
 800d512:	f7ff f85c 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	89d8      	ldrh	r0, [r3, #14]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	330e      	adds	r3, #14
 800d51e:	461a      	mov	r2, r3
 800d520:	2102      	movs	r1, #2
 800d522:	f7ff f854 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	8a18      	ldrh	r0, [r3, #16]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	3310      	adds	r3, #16
 800d52e:	461a      	mov	r2, r3
 800d530:	2102      	movs	r1, #2
 800d532:	f7ff f84c 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800d53e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800d544:	68fa      	ldr	r2, [r7, #12]
 800d546:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800d548:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800d552:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800d558:	68fa      	ldr	r2, [r7, #12]
 800d55a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800d55c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d55e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3718      	adds	r7, #24
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}

0800d56a <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d56a:	b580      	push	{r7, lr}
 800d56c:	b086      	sub	sp, #24
 800d56e:	af00      	add	r7, sp, #0
 800d570:	60f8      	str	r0, [r7, #12]
 800d572:	460b      	mov	r3, r1
 800d574:	607a      	str	r2, [r7, #4]
 800d576:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d578:	2300      	movs	r3, #0
 800d57a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d57c:	897b      	ldrh	r3, [r7, #10]
 800d57e:	2b16      	cmp	r3, #22
 800d580:	d802      	bhi.n	800d588 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d582:	f06f 0309 	mvn.w	r3, #9
 800d586:	e06e      	b.n	800d666 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	f003 030f 	and.w	r3, r3, #15
 800d590:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800d59a:	68fa      	ldr	r2, [r7, #12]
 800d59c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800d59e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800d5a8:	f002 020f 	and.w	r2, r2, #15
 800d5ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800d5ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800d5b4:	68fa      	ldr	r2, [r7, #12]
 800d5b6:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800d5b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800d5c2:	f002 020f 	and.w	r2, r2, #15
 800d5c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800d5c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800d5ce:	68fa      	ldr	r2, [r7, #12]
 800d5d0:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800d5d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800d5dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800d5e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d5e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800d5ec:	f002 020f 	and.w	r2, r2, #15
 800d5f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800d5f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800d5fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800d606:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800d60a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d60c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	8958      	ldrh	r0, [r3, #10]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	330a      	adds	r3, #10
 800d616:	461a      	mov	r2, r3
 800d618:	2102      	movs	r1, #2
 800d61a:	f7fe ffd8 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	8998      	ldrh	r0, [r3, #12]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	330c      	adds	r3, #12
 800d626:	461a      	mov	r2, r3
 800d628:	2102      	movs	r1, #2
 800d62a:	f7fe ffd0 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800d632:	68fa      	ldr	r2, [r7, #12]
 800d634:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800d636:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800d640:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6918      	ldr	r0, [r3, #16]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	3312      	adds	r3, #18
 800d64a:	461a      	mov	r2, r3
 800d64c:	2104      	movs	r1, #4
 800d64e:	f7ff f85e 	bl	800c70e <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800d65a:	f002 0201 	and.w	r2, r2, #1
 800d65e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800d660:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d662:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d666:	4618      	mov	r0, r3
 800d668:	3718      	adds	r7, #24
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b086      	sub	sp, #24
 800d672:	af00      	add	r7, sp, #0
 800d674:	60f8      	str	r0, [r7, #12]
 800d676:	460b      	mov	r3, r1
 800d678:	607a      	str	r2, [r7, #4]
 800d67a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d67c:	2300      	movs	r3, #0
 800d67e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800d680:	897b      	ldrh	r3, [r7, #10]
 800d682:	2b11      	cmp	r3, #17
 800d684:	d802      	bhi.n	800d68c <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d686:	f06f 0309 	mvn.w	r3, #9
 800d68a:	e071      	b.n	800d770 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	f003 0303 	and.w	r3, r3, #3
 800d694:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	8858      	ldrh	r0, [r3, #2]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	461a      	mov	r2, r3
 800d6a4:	2102      	movs	r1, #2
 800d6a6:	f7fe ff92 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	8898      	ldrh	r0, [r3, #4]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	3303      	adds	r3, #3
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	2102      	movs	r1, #2
 800d6b6:	f7fe ff8a 	bl	800c5ce <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800d6c2:	f002 0201 	and.w	r2, r2, #1
 800d6c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800d6c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800d6d2:	f002 0207 	and.w	r2, r2, #7
 800d6d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800d6d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800d6de:	68fa      	ldr	r2, [r7, #12]
 800d6e0:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800d6e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800d6e8:	68fa      	ldr	r2, [r7, #12]
 800d6ea:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800d6ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800d6f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d6fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800d6fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800d706:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d70a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800d70c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800d716:	f002 0203 	and.w	r2, r2, #3
 800d71a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800d71c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800d726:	f002 0203 	and.w	r2, r2, #3
 800d72a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800d72c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800d736:	f002 020f 	and.w	r2, r2, #15
 800d73a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800d73c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800d746:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800d750:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800d756:	68fa      	ldr	r2, [r7, #12]
 800d758:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800d75a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800d764:	f002 0203 	and.w	r2, r2, #3
 800d768:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800d76a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d76c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3718      	adds	r7, #24
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}

0800d778 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800d778:	b480      	push	{r7}
 800d77a:	b087      	sub	sp, #28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	460b      	mov	r3, r1
 800d782:	607a      	str	r2, [r7, #4]
 800d784:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d786:	2300      	movs	r3, #0
 800d788:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800d78a:	897b      	ldrh	r3, [r7, #10]
 800d78c:	2b04      	cmp	r3, #4
 800d78e:	d802      	bhi.n	800d796 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d790:	f06f 0309 	mvn.w	r3, #9
 800d794:	e025      	b.n	800d7e2 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	f003 0301 	and.w	r3, r3, #1
 800d79e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800d7ac:	f002 0201 	and.w	r2, r2, #1
 800d7b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800d7b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800d7bc:	f002 0201 	and.w	r2, r2, #1
 800d7c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800d7c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800d7cc:	f002 0203 	and.w	r2, r2, #3
 800d7d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800d7d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800d7d8:	68fa      	ldr	r2, [r7, #12]
 800d7da:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800d7dc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800d7de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	371c      	adds	r7, #28
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr

0800d7ee <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b086      	sub	sp, #24
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	60b9      	str	r1, [r7, #8]
 800d7f8:	607a      	str	r2, [r7, #4]
 800d7fa:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800d800:	89fb      	ldrh	r3, [r7, #14]
 800d802:	2b2b      	cmp	r3, #43	; 0x2b
 800d804:	d802      	bhi.n	800d80c <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d806:	f06f 0309 	mvn.w	r3, #9
 800d80a:	e0e2      	b.n	800d9d2 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d814:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	785a      	ldrb	r2, [r3, #1]
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	3302      	adds	r3, #2
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	f003 030f 	and.w	r3, r3, #15
 800d82c:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	78da      	ldrb	r2, [r3, #3]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	3304      	adds	r3, #4
 800d83e:	4619      	mov	r1, r3
 800d840:	2002      	movs	r0, #2
 800d842:	f7fe feef 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d846:	4603      	mov	r3, r0
 800d848:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	3306      	adds	r3, #6
 800d852:	4619      	mov	r1, r3
 800d854:	2002      	movs	r0, #2
 800d856:	f7fe fee5 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d85a:	4603      	mov	r3, r0
 800d85c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	3308      	adds	r3, #8
 800d866:	4619      	mov	r1, r3
 800d868:	2002      	movs	r0, #2
 800d86a:	f7fe fedb 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d86e:	4603      	mov	r3, r0
 800d870:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	330a      	adds	r3, #10
 800d87a:	4619      	mov	r1, r3
 800d87c:	2002      	movs	r0, #2
 800d87e:	f7fe fed1 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d882:	4603      	mov	r3, r0
 800d884:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	330c      	adds	r3, #12
 800d88e:	4619      	mov	r1, r3
 800d890:	2002      	movs	r0, #2
 800d892:	f7fe fec7 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d896:	4603      	mov	r3, r0
 800d898:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	330e      	adds	r3, #14
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	2002      	movs	r0, #2
 800d8a6:	f7fe febd 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	3310      	adds	r3, #16
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	2002      	movs	r0, #2
 800d8ba:	f7fe feb3 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	3312      	adds	r3, #18
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	2002      	movs	r0, #2
 800d8ce:	f7fe fea9 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	3314      	adds	r3, #20
 800d8de:	4619      	mov	r1, r3
 800d8e0:	2002      	movs	r0, #2
 800d8e2:	f7fe fe9f 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	3316      	adds	r3, #22
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	2002      	movs	r0, #2
 800d8f6:	f7fe fe95 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	3318      	adds	r3, #24
 800d906:	4619      	mov	r1, r3
 800d908:	2002      	movs	r0, #2
 800d90a:	f7fe fe8b 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d90e:	4603      	mov	r3, r0
 800d910:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	331a      	adds	r3, #26
 800d91a:	4619      	mov	r1, r3
 800d91c:	2002      	movs	r0, #2
 800d91e:	f7fe fe81 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d922:	4603      	mov	r3, r0
 800d924:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	331c      	adds	r3, #28
 800d92e:	4619      	mov	r1, r3
 800d930:	2002      	movs	r0, #2
 800d932:	f7fe fe77 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d936:	4603      	mov	r3, r0
 800d938:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	331e      	adds	r3, #30
 800d942:	4619      	mov	r1, r3
 800d944:	2002      	movs	r0, #2
 800d946:	f7fe fe6d 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d94a:	4603      	mov	r3, r0
 800d94c:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	3320      	adds	r3, #32
 800d956:	4619      	mov	r1, r3
 800d958:	2002      	movs	r0, #2
 800d95a:	f7fe fe63 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d95e:	4603      	mov	r3, r0
 800d960:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	3322      	adds	r3, #34	; 0x22
 800d96a:	4619      	mov	r1, r3
 800d96c:	2002      	movs	r0, #2
 800d96e:	f7fe fe59 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d972:	4603      	mov	r3, r0
 800d974:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	3324      	adds	r3, #36	; 0x24
 800d97e:	4619      	mov	r1, r3
 800d980:	2002      	movs	r0, #2
 800d982:	f7fe fe4f 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d986:	4603      	mov	r3, r0
 800d988:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	3326      	adds	r3, #38	; 0x26
 800d992:	4619      	mov	r1, r3
 800d994:	2002      	movs	r0, #2
 800d996:	f7fe fe45 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d99a:	4603      	mov	r3, r0
 800d99c:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	3328      	adds	r3, #40	; 0x28
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	2002      	movs	r0, #2
 800d9aa:	f7fe fe3b 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800d9ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3718      	adds	r7, #24
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}

0800d9da <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800d9da:	b580      	push	{r7, lr}
 800d9dc:	b086      	sub	sp, #24
 800d9de:	af00      	add	r7, sp, #0
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	60b9      	str	r1, [r7, #8]
 800d9e4:	607a      	str	r2, [r7, #4]
 800d9e6:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800d9ec:	89fb      	ldrh	r3, [r7, #14]
 800d9ee:	2b20      	cmp	r3, #32
 800d9f0:	d802      	bhi.n	800d9f8 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d9f2:	f06f 0309 	mvn.w	r3, #9
 800d9f6:	e04d      	b.n	800da94 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800d9f8:	68b9      	ldr	r1, [r7, #8]
 800d9fa:	2004      	movs	r0, #4
 800d9fc:	f7fe feb1 	bl	800c762 <VL53L1_i2c_decode_uint32_t>
 800da00:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	3304      	adds	r3, #4
 800da0a:	4619      	mov	r1, r3
 800da0c:	2004      	movs	r0, #4
 800da0e:	f7fe fea8 	bl	800c762 <VL53L1_i2c_decode_uint32_t>
 800da12:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	3308      	adds	r3, #8
 800da1c:	4619      	mov	r1, r3
 800da1e:	2004      	movs	r0, #4
 800da20:	f7fe febc 	bl	800c79c <VL53L1_i2c_decode_int32_t>
 800da24:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	330c      	adds	r3, #12
 800da2e:	4619      	mov	r1, r3
 800da30:	2004      	movs	r0, #4
 800da32:	f7fe fe96 	bl	800c762 <VL53L1_i2c_decode_uint32_t>
 800da36:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	3310      	adds	r3, #16
 800da40:	4619      	mov	r1, r3
 800da42:	2004      	movs	r0, #4
 800da44:	f7fe fe8d 	bl	800c762 <VL53L1_i2c_decode_uint32_t>
 800da48:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	3314      	adds	r3, #20
 800da52:	4619      	mov	r1, r3
 800da54:	2004      	movs	r0, #4
 800da56:	f7fe fe84 	bl	800c762 <VL53L1_i2c_decode_uint32_t>
 800da5a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	3318      	adds	r3, #24
 800da64:	4619      	mov	r1, r3
 800da66:	2004      	movs	r0, #4
 800da68:	f7fe fe98 	bl	800c79c <VL53L1_i2c_decode_int32_t>
 800da6c:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	331c      	adds	r3, #28
 800da76:	4619      	mov	r1, r3
 800da78:	2004      	movs	r0, #4
 800da7a:	f7fe fe72 	bl	800c762 <VL53L1_i2c_decode_uint32_t>
 800da7e:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	f893 2020 	ldrb.w	r2, [r3, #32]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800da90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3718      	adds	r7, #24
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b086      	sub	sp, #24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	4603      	mov	r3, r0
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
 800daa8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800daaa:	2300      	movs	r3, #0
 800daac:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800daae:	89fb      	ldrh	r3, [r7, #14]
 800dab0:	2b37      	cmp	r3, #55	; 0x37
 800dab2:	d802      	bhi.n	800daba <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800dab4:	f06f 0309 	mvn.w	r3, #9
 800dab8:	e15e      	b.n	800dd78 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800daba:	68b9      	ldr	r1, [r7, #8]
 800dabc:	2002      	movs	r0, #2
 800dabe:	f7fe fdb1 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800dac2:	4603      	mov	r3, r0
 800dac4:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	3302      	adds	r3, #2
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dad4:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	3303      	adds	r3, #3
 800dade:	781b      	ldrb	r3, [r3, #0]
 800dae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dae4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	3304      	adds	r3, #4
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	f003 0303 	and.w	r3, r3, #3
 800daf4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	3305      	adds	r3, #5
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	f003 0301 	and.w	r3, r3, #1
 800db04:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	3306      	adds	r3, #6
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db14:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	3307      	adds	r3, #7
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db24:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	3308      	adds	r3, #8
 800db2e:	4619      	mov	r1, r3
 800db30:	2002      	movs	r0, #2
 800db32:	f7fe fd77 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800db36:	4603      	mov	r3, r0
 800db38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db3c:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	330a      	adds	r3, #10
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	f003 0303 	and.w	r3, r3, #3
 800db4c:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	330b      	adds	r3, #11
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	f003 0303 	and.w	r3, r3, #3
 800db5c:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	330c      	adds	r3, #12
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	f003 030f 	and.w	r3, r3, #15
 800db6c:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	330d      	adds	r3, #13
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	f003 0307 	and.w	r3, r3, #7
 800db7c:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	330e      	adds	r3, #14
 800db86:	781b      	ldrb	r3, [r3, #0]
 800db88:	f003 0301 	and.w	r3, r3, #1
 800db8c:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	330f      	adds	r3, #15
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	f003 0303 	and.w	r3, r3, #3
 800db9c:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	7c1a      	ldrb	r2, [r3, #16]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	7c5a      	ldrb	r2, [r3, #17]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	3312      	adds	r3, #18
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	2002      	movs	r0, #2
 800dbba:	f7fe fd33 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbc4:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800dbca:	68bb      	ldr	r3, [r7, #8]
 800dbcc:	3316      	adds	r3, #22
 800dbce:	4619      	mov	r1, r3
 800dbd0:	2002      	movs	r0, #2
 800dbd2:	f7fe fd27 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	3318      	adds	r3, #24
 800dbe2:	4619      	mov	r1, r3
 800dbe4:	2002      	movs	r0, #2
 800dbe6:	f7fe fd1d 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800dbea:	4603      	mov	r3, r0
 800dbec:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800dbf2:	68bb      	ldr	r3, [r7, #8]
 800dbf4:	331a      	adds	r3, #26
 800dbf6:	781b      	ldrb	r3, [r3, #0]
 800dbf8:	f003 0301 	and.w	r3, r3, #1
 800dbfc:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800dc02:	68bb      	ldr	r3, [r7, #8]
 800dc04:	331b      	adds	r3, #27
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	f003 0307 	and.w	r3, r3, #7
 800dc0c:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	7f1a      	ldrb	r2, [r3, #28]
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	7f5a      	ldrb	r2, [r3, #29]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	331e      	adds	r3, #30
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc2c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	331f      	adds	r3, #31
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc3c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	3320      	adds	r3, #32
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	f003 0303 	and.w	r3, r3, #3
 800dc4c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	3321      	adds	r3, #33	; 0x21
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	f003 030f 	and.w	r3, r3, #15
 800dc5c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	3325      	adds	r3, #37	; 0x25
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	f003 0301 	and.w	r3, r3, #1
 800dc90:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	3326      	adds	r3, #38	; 0x26
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	f003 0303 	and.w	r3, r3, #3
 800dca2:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	3327      	adds	r3, #39	; 0x27
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	f003 031f 	and.w	r3, r3, #31
 800dcb4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	3328      	adds	r3, #40	; 0x28
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	f003 031f 	and.w	r3, r3, #31
 800dcc6:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	3329      	adds	r3, #41	; 0x29
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	f003 031f 	and.w	r3, r3, #31
 800dcd8:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	332a      	adds	r3, #42	; 0x2a
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	f003 0301 	and.w	r3, r3, #1
 800dcea:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	332b      	adds	r3, #43	; 0x2b
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	332c      	adds	r3, #44	; 0x2c
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	f003 0303 	and.w	r3, r3, #3
 800dd0e:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	332d      	adds	r3, #45	; 0x2d
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd20:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	332e      	adds	r3, #46	; 0x2e
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	2004      	movs	r0, #4
 800dd30:	f7fe fd17 	bl	800c762 <VL53L1_i2c_decode_uint32_t>
 800dd34:	4603      	mov	r3, r0
 800dd36:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	3332      	adds	r3, #50	; 0x32
 800dd42:	4619      	mov	r1, r3
 800dd44:	2004      	movs	r0, #4
 800dd46:	f7fe fd0c 	bl	800c762 <VL53L1_i2c_decode_uint32_t>
 800dd4a:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	3336      	adds	r3, #54	; 0x36
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	f003 0301 	and.w	r3, r3, #1
 800dd5a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800dd62:	68bb      	ldr	r3, [r7, #8]
 800dd64:	3337      	adds	r3, #55	; 0x37
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	f003 0301 	and.w	r3, r3, #1
 800dd6c:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800dd74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3718      	adds	r7, #24
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b086      	sub	sp, #24
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	4603      	mov	r3, r0
 800dd88:	60b9      	str	r1, [r7, #8]
 800dd8a:	607a      	str	r2, [r7, #4]
 800dd8c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800dd92:	89fb      	ldrh	r3, [r7, #14]
 800dd94:	2b30      	cmp	r3, #48	; 0x30
 800dd96:	d802      	bhi.n	800dd9e <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800dd98:	f06f 0309 	mvn.w	r3, #9
 800dd9c:	e112      	b.n	800dfc4 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	785a      	ldrb	r2, [r3, #1]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	789a      	ldrb	r2, [r3, #2]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	3303      	adds	r3, #3
 800ddba:	4619      	mov	r1, r3
 800ddbc:	2002      	movs	r0, #2
 800ddbe:	f7fe fc31 	bl	800c624 <VL53L1_i2c_decode_uint16_t>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	3305      	adds	r3, #5
 800ddce:	781b      	ldrb	r3, [r3, #0]
 800ddd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddd4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	3306      	adds	r3, #6
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	f003 0307 	and.w	r3, r3, #7
 800dde4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	3307      	adds	r3, #7
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	f003 0307 	and.w	r3, r3, #7
 800ddf4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	3308      	adds	r3, #8
 800ddfe:	781b      	ldrb	r3, [r3, #0]
 800de00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de04:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	3309      	adds	r3, #9
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de14:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	330a      	adds	r3, #10
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	f003 0301 	and.w	r3, r3, #1
 800de24:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	330b      	adds	r3, #11
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de34:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	330c      	adds	r3, #12
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	f003 0301 	and.w	r3, r3, #1
 800de44:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	330d      	adds	r3, #13
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de54:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	330e      	adds	r3, #14
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de64:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	7bda      	ldrb	r2, [r3, #15]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	7c1a      	ldrb	r2, [r3, #16]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	7c5a      	ldrb	r2, [r3, #17]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	7c9a      	ldrb	r2, [r3, #18]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	7cda      	ldrb	r2, [r3, #19]
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	7d1a      	ldrb	r2, [r3, #20]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	7d5a      	ldrb	r2, [r3, #21]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	7d9a      	ldrb	r2, [r3, #22]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	7dda      	ldrb	r2, [r3, #23]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	7e1a      	ldrb	r2, [r3, #24]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	7e5a      	ldrb	r2, [r3, #25]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	7e9a      	ldrb	r2, [r3, #26]
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	7eda      	ldrb	r2, [r3, #27]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	7f1a      	ldrb	r2, [r3, #28]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	7f5a      	ldrb	r2, [r3, #29]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	7f9a      	ldrb	r2, [r3, #30]
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	7fda      	ldrb	r2, [r3, #31]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800df84:	68bb      	ldr	r3, [r7, #8]
 800df86:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800dfc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3718      	adds	r7, #24
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b090      	sub	sp, #64	; 0x40
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800dfdc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d10a      	bne.n	800dffa <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800dfe4:	f107 020c 	add.w	r2, r7, #12
 800dfe8:	2331      	movs	r3, #49	; 0x31
 800dfea:	f240 110f 	movw	r1, #271	; 0x10f
 800dfee:	6878      	ldr	r0, [r7, #4]
 800dff0:	f000 f8f4 	bl	800e1dc <VL53L1_ReadMulti>
 800dff4:	4603      	mov	r3, r0
 800dff6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800dffa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d109      	bne.n	800e016 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800e002:	f107 030c 	add.w	r3, r7, #12
 800e006:	683a      	ldr	r2, [r7, #0]
 800e008:	4619      	mov	r1, r3
 800e00a:	2031      	movs	r0, #49	; 0x31
 800e00c:	f7ff feb8 	bl	800dd80 <VL53L1_i2c_decode_nvm_copy_data>
 800e010:	4603      	mov	r3, r0
 800e012:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800e016:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3740      	adds	r7, #64	; 0x40
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 800e022:	b580      	push	{r7, lr}
 800e024:	b086      	sub	sp, #24
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
 800e02a:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800e02c:	2300      	movs	r3, #0
 800e02e:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800e034:	2300      	movs	r3, #0
 800e036:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 800e038:	2300      	movs	r3, #0
 800e03a:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 800e03c:	2300      	movs	r3, #0
 800e03e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800e046:	f003 0310 	and.w	r3, r3, #16
 800e04a:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800e04c:	7bfb      	ldrb	r3, [r7, #15]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d102      	bne.n	800e058 <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 800e052:	2301      	movs	r3, #1
 800e054:	75fb      	strb	r3, [r7, #23]
 800e056:	e001      	b.n	800e05c <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 800e058:	2300      	movs	r3, #0
 800e05a:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 800e05c:	f107 030e 	add.w	r3, r7, #14
 800e060:	461a      	mov	r2, r3
 800e062:	2131      	movs	r1, #49	; 0x31
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f000 f919 	bl	800e29c <VL53L1_RdByte>
 800e06a:	4603      	mov	r3, r0
 800e06c:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 800e06e:	7bbb      	ldrb	r3, [r7, #14]
 800e070:	f003 0201 	and.w	r2, r3, #1
 800e074:	7dfb      	ldrb	r3, [r7, #23]
 800e076:	429a      	cmp	r2, r3
 800e078:	d103      	bne.n	800e082 <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	2201      	movs	r2, #1
 800e07e:	701a      	strb	r2, [r3, #0]
 800e080:	e002      	b.n	800e088 <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	2200      	movs	r2, #0
 800e086:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800e088:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3718      	adds	r7, #24
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b086      	sub	sp, #24
 800e098:	af02      	add	r7, sp, #8
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800e0a2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f000 f98c 	bl	800e3c4 <VL53L1_WaitUs>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800e0b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d10b      	bne.n	800e0d0 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	2301      	movs	r3, #1
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	22e5      	movs	r2, #229	; 0xe5
 800e0c4:	6839      	ldr	r1, [r7, #0]
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f992 	bl	800e3f0 <VL53L1_WaitValueMaskEx>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800e0d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d103      	bne.n	800e0e0 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800e0d8:	2103      	movs	r1, #3
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f7fe f85b 	bl	800c196 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800e0e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3710      	adds	r7, #16
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b088      	sub	sp, #32
 800e0f0:	af02      	add	r7, sp, #8
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	330a      	adds	r3, #10
 800e0fc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800e10a:	b299      	uxth	r1, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	b29a      	uxth	r2, r3
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	9300      	str	r3, [sp, #0]
 800e114:	4613      	mov	r3, r2
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	f7f6 fce8 	bl	8004aec <HAL_I2C_Master_Transmit>
 800e11c:	4603      	mov	r3, r0
 800e11e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e120:	693b      	ldr	r3, [r7, #16]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3718      	adds	r7, #24
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b088      	sub	sp, #32
 800e12e:	af02      	add	r7, sp, #8
 800e130:	60f8      	str	r0, [r7, #12]
 800e132:	60b9      	str	r1, [r7, #8]
 800e134:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	330a      	adds	r3, #10
 800e13a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800e148:	f043 0301 	orr.w	r3, r3, #1
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	b299      	uxth	r1, r3
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	b29a      	uxth	r2, r3
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	4613      	mov	r3, r2
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	f7f6 fdc4 	bl	8004ce8 <HAL_I2C_Master_Receive>
 800e160:	4603      	mov	r3, r0
 800e162:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800e164:	693b      	ldr	r3, [r7, #16]
}
 800e166:	4618      	mov	r0, r3
 800e168:	3718      	adds	r7, #24
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
	...

0800e170 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	607a      	str	r2, [r7, #4]
 800e17a:	603b      	str	r3, [r7, #0]
 800e17c:	460b      	mov	r3, r1
 800e17e:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e180:	2300      	movs	r3, #0
 800e182:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	2bff      	cmp	r3, #255	; 0xff
 800e188:	d902      	bls.n	800e190 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800e18a:	f06f 0303 	mvn.w	r3, #3
 800e18e:	e01d      	b.n	800e1cc <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800e190:	897b      	ldrh	r3, [r7, #10]
 800e192:	0a1b      	lsrs	r3, r3, #8
 800e194:	b29b      	uxth	r3, r3
 800e196:	b2da      	uxtb	r2, r3
 800e198:	4b0e      	ldr	r3, [pc, #56]	; (800e1d4 <VL53L1_WriteMulti+0x64>)
 800e19a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e19c:	897b      	ldrh	r3, [r7, #10]
 800e19e:	b2da      	uxtb	r2, r3
 800e1a0:	4b0c      	ldr	r3, [pc, #48]	; (800e1d4 <VL53L1_WriteMulti+0x64>)
 800e1a2:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800e1a4:	683a      	ldr	r2, [r7, #0]
 800e1a6:	6879      	ldr	r1, [r7, #4]
 800e1a8:	480b      	ldr	r0, [pc, #44]	; (800e1d8 <VL53L1_WriteMulti+0x68>)
 800e1aa:	f000 f9ef 	bl	800e58c <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	3302      	adds	r3, #2
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	4907      	ldr	r1, [pc, #28]	; (800e1d4 <VL53L1_WriteMulti+0x64>)
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f7ff ff98 	bl	800e0ec <_I2CWrite>
 800e1bc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e1be:	693b      	ldr	r3, [r7, #16]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d001      	beq.n	800e1c8 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e1c4:	23f3      	movs	r3, #243	; 0xf3
 800e1c6:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800e1c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3718      	adds	r7, #24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	20000f10 	.word	0x20000f10
 800e1d8:	20000f12 	.word	0x20000f12

0800e1dc <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b086      	sub	sp, #24
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	607a      	str	r2, [r7, #4]
 800e1e6:	603b      	str	r3, [r7, #0]
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e1f0:	897b      	ldrh	r3, [r7, #10]
 800e1f2:	0a1b      	lsrs	r3, r3, #8
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	4b12      	ldr	r3, [pc, #72]	; (800e244 <VL53L1_ReadMulti+0x68>)
 800e1fa:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e1fc:	897b      	ldrh	r3, [r7, #10]
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	4b10      	ldr	r3, [pc, #64]	; (800e244 <VL53L1_ReadMulti+0x68>)
 800e202:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e204:	2202      	movs	r2, #2
 800e206:	490f      	ldr	r1, [pc, #60]	; (800e244 <VL53L1_ReadMulti+0x68>)
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	f7ff ff6f 	bl	800e0ec <_I2CWrite>
 800e20e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d002      	beq.n	800e21c <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e216:	23f3      	movs	r3, #243	; 0xf3
 800e218:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e21a:	e00c      	b.n	800e236 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800e21c:	683a      	ldr	r2, [r7, #0]
 800e21e:	6879      	ldr	r1, [r7, #4]
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f7ff ff82 	bl	800e12a <_I2CRead>
 800e226:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d002      	beq.n	800e234 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e22e:	23f3      	movs	r3, #243	; 0xf3
 800e230:	75fb      	strb	r3, [r7, #23]
 800e232:	e000      	b.n	800e236 <VL53L1_ReadMulti+0x5a>
    }
done:
 800e234:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800e236:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3718      	adds	r7, #24
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	20000f10 	.word	0x20000f10

0800e248 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	460b      	mov	r3, r1
 800e252:	807b      	strh	r3, [r7, #2]
 800e254:	4613      	mov	r3, r2
 800e256:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e258:	2300      	movs	r3, #0
 800e25a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e25c:	887b      	ldrh	r3, [r7, #2]
 800e25e:	0a1b      	lsrs	r3, r3, #8
 800e260:	b29b      	uxth	r3, r3
 800e262:	b2da      	uxtb	r2, r3
 800e264:	4b0c      	ldr	r3, [pc, #48]	; (800e298 <VL53L1_WrByte+0x50>)
 800e266:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800e268:	887b      	ldrh	r3, [r7, #2]
 800e26a:	b2da      	uxtb	r2, r3
 800e26c:	4b0a      	ldr	r3, [pc, #40]	; (800e298 <VL53L1_WrByte+0x50>)
 800e26e:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800e270:	4a09      	ldr	r2, [pc, #36]	; (800e298 <VL53L1_WrByte+0x50>)
 800e272:	787b      	ldrb	r3, [r7, #1]
 800e274:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800e276:	2203      	movs	r2, #3
 800e278:	4907      	ldr	r1, [pc, #28]	; (800e298 <VL53L1_WrByte+0x50>)
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7ff ff36 	bl	800e0ec <_I2CWrite>
 800e280:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d001      	beq.n	800e28c <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e288:	23f3      	movs	r3, #243	; 0xf3
 800e28a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800e28c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	20000f10 	.word	0x20000f10

0800e29c <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b086      	sub	sp, #24
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	607a      	str	r2, [r7, #4]
 800e2a8:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800e2ae:	897b      	ldrh	r3, [r7, #10]
 800e2b0:	0a1b      	lsrs	r3, r3, #8
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	b2da      	uxtb	r2, r3
 800e2b6:	4b12      	ldr	r3, [pc, #72]	; (800e300 <VL53L1_RdByte+0x64>)
 800e2b8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800e2ba:	897b      	ldrh	r3, [r7, #10]
 800e2bc:	b2da      	uxtb	r2, r3
 800e2be:	4b10      	ldr	r3, [pc, #64]	; (800e300 <VL53L1_RdByte+0x64>)
 800e2c0:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e2c2:	2202      	movs	r2, #2
 800e2c4:	490e      	ldr	r1, [pc, #56]	; (800e300 <VL53L1_RdByte+0x64>)
 800e2c6:	68f8      	ldr	r0, [r7, #12]
 800e2c8:	f7ff ff10 	bl	800e0ec <_I2CWrite>
 800e2cc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d002      	beq.n	800e2da <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e2d4:	23f3      	movs	r3, #243	; 0xf3
 800e2d6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e2d8:	e00c      	b.n	800e2f4 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800e2da:	2201      	movs	r2, #1
 800e2dc:	6879      	ldr	r1, [r7, #4]
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f7ff ff23 	bl	800e12a <_I2CRead>
 800e2e4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d002      	beq.n	800e2f2 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e2ec:	23f3      	movs	r3, #243	; 0xf3
 800e2ee:	75fb      	strb	r3, [r7, #23]
 800e2f0:	e000      	b.n	800e2f4 <VL53L1_RdByte+0x58>
    }
done:
 800e2f2:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800e2f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3718      	adds	r7, #24
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	20000f10 	.word	0x20000f10

0800e304 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af00      	add	r7, sp, #0
 800e30a:	60f8      	str	r0, [r7, #12]
 800e30c:	460b      	mov	r3, r1
 800e30e:	607a      	str	r2, [r7, #4]
 800e310:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800e312:	2300      	movs	r3, #0
 800e314:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800e316:	897b      	ldrh	r3, [r7, #10]
 800e318:	0a1b      	lsrs	r3, r3, #8
 800e31a:	b29b      	uxth	r3, r3
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	4b18      	ldr	r3, [pc, #96]	; (800e380 <VL53L1_RdWord+0x7c>)
 800e320:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800e322:	897b      	ldrh	r3, [r7, #10]
 800e324:	b2da      	uxtb	r2, r3
 800e326:	4b16      	ldr	r3, [pc, #88]	; (800e380 <VL53L1_RdWord+0x7c>)
 800e328:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800e32a:	2202      	movs	r2, #2
 800e32c:	4914      	ldr	r1, [pc, #80]	; (800e380 <VL53L1_RdWord+0x7c>)
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f7ff fedc 	bl	800e0ec <_I2CWrite>
 800e334:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800e336:	693b      	ldr	r3, [r7, #16]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d002      	beq.n	800e342 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e33c:	23f3      	movs	r3, #243	; 0xf3
 800e33e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e340:	e017      	b.n	800e372 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800e342:	2202      	movs	r2, #2
 800e344:	490e      	ldr	r1, [pc, #56]	; (800e380 <VL53L1_RdWord+0x7c>)
 800e346:	68f8      	ldr	r0, [r7, #12]
 800e348:	f7ff feef 	bl	800e12a <_I2CRead>
 800e34c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d002      	beq.n	800e35a <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800e354:	23f3      	movs	r3, #243	; 0xf3
 800e356:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e358:	e00b      	b.n	800e372 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800e35a:	4b09      	ldr	r3, [pc, #36]	; (800e380 <VL53L1_RdWord+0x7c>)
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	b29b      	uxth	r3, r3
 800e360:	021b      	lsls	r3, r3, #8
 800e362:	b29a      	uxth	r2, r3
 800e364:	4b06      	ldr	r3, [pc, #24]	; (800e380 <VL53L1_RdWord+0x7c>)
 800e366:	785b      	ldrb	r3, [r3, #1]
 800e368:	b29b      	uxth	r3, r3
 800e36a:	4413      	add	r3, r2
 800e36c:	b29a      	uxth	r2, r3
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800e372:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e376:	4618      	mov	r0, r3
 800e378:	3718      	adds	r7, #24
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	20000f10 	.word	0x20000f10

0800e384 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800e384:	b480      	push	{r7}
 800e386:	b085      	sub	sp, #20
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800e38c:	2300      	movs	r3, #0
 800e38e:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800e396:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	3714      	adds	r7, #20
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a4:	4770      	bx	lr

0800e3a6 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800e3a6:	b580      	push	{r7, lr}
 800e3a8:	b082      	sub	sp, #8
 800e3aa:	af00      	add	r7, sp, #0
 800e3ac:	6078      	str	r0, [r7, #4]
 800e3ae:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7f5 f990 	bl	80036d8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800e3b8:	2300      	movs	r3, #0
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3708      	adds	r7, #8
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
	...

0800e3c4 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	4a06      	ldr	r2, [pc, #24]	; (800e3ec <VL53L1_WaitUs+0x28>)
 800e3d2:	fb82 1203 	smull	r1, r2, r2, r3
 800e3d6:	1192      	asrs	r2, r2, #6
 800e3d8:	17db      	asrs	r3, r3, #31
 800e3da:	1ad3      	subs	r3, r2, r3
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7f5 f97b 	bl	80036d8 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800e3e2:	2300      	movs	r3, #0
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3708      	adds	r7, #8
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}
 800e3ec:	10624dd3 	.word	0x10624dd3

0800e3f0 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800e3f0:	b590      	push	{r4, r7, lr}
 800e3f2:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800e3f6:	af00      	add	r7, sp, #0
 800e3f8:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800e3fc:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800e400:	6020      	str	r0, [r4, #0]
 800e402:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800e406:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800e40a:	6001      	str	r1, [r0, #0]
 800e40c:	4619      	mov	r1, r3
 800e40e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e412:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800e416:	801a      	strh	r2, [r3, #0]
 800e418:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e41c:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 800e420:	460a      	mov	r2, r1
 800e422:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800e424:	2300      	movs	r3, #0
 800e426:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800e42a:	2300      	movs	r3, #0
 800e42c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800e430:	2300      	movs	r3, #0
 800e432:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800e436:	2300      	movs	r3, #0
 800e438:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800e43c:	2300      	movs	r3, #0
 800e43e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800e442:	2300      	movs	r3, #0
 800e444:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800e448:	f107 0310 	add.w	r3, r7, #16
 800e44c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800e450:	493b      	ldr	r1, [pc, #236]	; (800e540 <VL53L1_WaitValueMaskEx+0x150>)
 800e452:	4618      	mov	r0, r3
 800e454:	f000 fd1a 	bl	800ee8c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800e458:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7ff ff91 	bl	800e384 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800e462:	e049      	b.n	800e4f8 <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800e464:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d110      	bne.n	800e48e <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 800e46c:	f207 2213 	addw	r2, r7, #531	; 0x213
 800e470:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e474:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800e478:	8819      	ldrh	r1, [r3, #0]
 800e47a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e47e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800e482:	6818      	ldr	r0, [r3, #0]
 800e484:	f7ff ff0a 	bl	800e29c <VL53L1_RdByte>
 800e488:	4603      	mov	r3, r0
 800e48a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800e48e:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800e492:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800e496:	4013      	ands	r3, r2
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800e49e:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 800e4a2:	7812      	ldrb	r2, [r2, #0]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d102      	bne.n	800e4ae <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800e4ae:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d114      	bne.n	800e4e0 <VL53L1_WaitValueMaskEx+0xf0>
 800e4b6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d110      	bne.n	800e4e0 <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 800e4be:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d00c      	beq.n	800e4e0 <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800e4c6:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800e4ca:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e4ce:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800e4d2:	4611      	mov	r1, r2
 800e4d4:	6818      	ldr	r0, [r3, #0]
 800e4d6:	f7ff ff66 	bl	800e3a6 <VL53L1_WaitMs>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800e4e0:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f7ff ff4d 	bl	800e384 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800e4ea:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800e4ee:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800e4f2:	1ad3      	subs	r3, r2, r3
 800e4f4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800e4f8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10c      	bne.n	800e51a <VL53L1_WaitValueMaskEx+0x12a>
 800e500:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800e504:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800e508:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	429a      	cmp	r2, r3
 800e510:	d203      	bcs.n	800e51a <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 800e512:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e516:	2b00      	cmp	r3, #0
 800e518:	d0a4      	beq.n	800e464 <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800e51a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d106      	bne.n	800e530 <VL53L1_WaitValueMaskEx+0x140>
 800e522:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800e526:	2b00      	cmp	r3, #0
 800e528:	d102      	bne.n	800e530 <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 800e52a:	23f9      	movs	r3, #249	; 0xf9
 800e52c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800e530:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800e534:	4618      	mov	r0, r3
 800e536:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd90      	pop	{r4, r7, pc}
 800e53e:	bf00      	nop
 800e540:	08012598 	.word	0x08012598

0800e544 <__libc_init_array>:
 800e544:	b570      	push	{r4, r5, r6, lr}
 800e546:	4d0d      	ldr	r5, [pc, #52]	; (800e57c <__libc_init_array+0x38>)
 800e548:	4c0d      	ldr	r4, [pc, #52]	; (800e580 <__libc_init_array+0x3c>)
 800e54a:	1b64      	subs	r4, r4, r5
 800e54c:	10a4      	asrs	r4, r4, #2
 800e54e:	2600      	movs	r6, #0
 800e550:	42a6      	cmp	r6, r4
 800e552:	d109      	bne.n	800e568 <__libc_init_array+0x24>
 800e554:	4d0b      	ldr	r5, [pc, #44]	; (800e584 <__libc_init_array+0x40>)
 800e556:	4c0c      	ldr	r4, [pc, #48]	; (800e588 <__libc_init_array+0x44>)
 800e558:	f003 ffe8 	bl	801252c <_init>
 800e55c:	1b64      	subs	r4, r4, r5
 800e55e:	10a4      	asrs	r4, r4, #2
 800e560:	2600      	movs	r6, #0
 800e562:	42a6      	cmp	r6, r4
 800e564:	d105      	bne.n	800e572 <__libc_init_array+0x2e>
 800e566:	bd70      	pop	{r4, r5, r6, pc}
 800e568:	f855 3b04 	ldr.w	r3, [r5], #4
 800e56c:	4798      	blx	r3
 800e56e:	3601      	adds	r6, #1
 800e570:	e7ee      	b.n	800e550 <__libc_init_array+0xc>
 800e572:	f855 3b04 	ldr.w	r3, [r5], #4
 800e576:	4798      	blx	r3
 800e578:	3601      	adds	r6, #1
 800e57a:	e7f2      	b.n	800e562 <__libc_init_array+0x1e>
 800e57c:	08012bb8 	.word	0x08012bb8
 800e580:	08012bb8 	.word	0x08012bb8
 800e584:	08012bb8 	.word	0x08012bb8
 800e588:	08012bbc 	.word	0x08012bbc

0800e58c <memcpy>:
 800e58c:	440a      	add	r2, r1
 800e58e:	4291      	cmp	r1, r2
 800e590:	f100 33ff 	add.w	r3, r0, #4294967295
 800e594:	d100      	bne.n	800e598 <memcpy+0xc>
 800e596:	4770      	bx	lr
 800e598:	b510      	push	{r4, lr}
 800e59a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e59e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5a2:	4291      	cmp	r1, r2
 800e5a4:	d1f9      	bne.n	800e59a <memcpy+0xe>
 800e5a6:	bd10      	pop	{r4, pc}

0800e5a8 <memset>:
 800e5a8:	4402      	add	r2, r0
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	4293      	cmp	r3, r2
 800e5ae:	d100      	bne.n	800e5b2 <memset+0xa>
 800e5b0:	4770      	bx	lr
 800e5b2:	f803 1b01 	strb.w	r1, [r3], #1
 800e5b6:	e7f9      	b.n	800e5ac <memset+0x4>

0800e5b8 <__cvt>:
 800e5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5bc:	ec55 4b10 	vmov	r4, r5, d0
 800e5c0:	2d00      	cmp	r5, #0
 800e5c2:	460e      	mov	r6, r1
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	462b      	mov	r3, r5
 800e5c8:	bfbb      	ittet	lt
 800e5ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e5ce:	461d      	movlt	r5, r3
 800e5d0:	2300      	movge	r3, #0
 800e5d2:	232d      	movlt	r3, #45	; 0x2d
 800e5d4:	700b      	strb	r3, [r1, #0]
 800e5d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e5dc:	4691      	mov	r9, r2
 800e5de:	f023 0820 	bic.w	r8, r3, #32
 800e5e2:	bfbc      	itt	lt
 800e5e4:	4622      	movlt	r2, r4
 800e5e6:	4614      	movlt	r4, r2
 800e5e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e5ec:	d005      	beq.n	800e5fa <__cvt+0x42>
 800e5ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e5f2:	d100      	bne.n	800e5f6 <__cvt+0x3e>
 800e5f4:	3601      	adds	r6, #1
 800e5f6:	2102      	movs	r1, #2
 800e5f8:	e000      	b.n	800e5fc <__cvt+0x44>
 800e5fa:	2103      	movs	r1, #3
 800e5fc:	ab03      	add	r3, sp, #12
 800e5fe:	9301      	str	r3, [sp, #4]
 800e600:	ab02      	add	r3, sp, #8
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	ec45 4b10 	vmov	d0, r4, r5
 800e608:	4653      	mov	r3, sl
 800e60a:	4632      	mov	r2, r6
 800e60c:	f000 fcdc 	bl	800efc8 <_dtoa_r>
 800e610:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e614:	4607      	mov	r7, r0
 800e616:	d102      	bne.n	800e61e <__cvt+0x66>
 800e618:	f019 0f01 	tst.w	r9, #1
 800e61c:	d022      	beq.n	800e664 <__cvt+0xac>
 800e61e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e622:	eb07 0906 	add.w	r9, r7, r6
 800e626:	d110      	bne.n	800e64a <__cvt+0x92>
 800e628:	783b      	ldrb	r3, [r7, #0]
 800e62a:	2b30      	cmp	r3, #48	; 0x30
 800e62c:	d10a      	bne.n	800e644 <__cvt+0x8c>
 800e62e:	2200      	movs	r2, #0
 800e630:	2300      	movs	r3, #0
 800e632:	4620      	mov	r0, r4
 800e634:	4629      	mov	r1, r5
 800e636:	f7f2 fa67 	bl	8000b08 <__aeabi_dcmpeq>
 800e63a:	b918      	cbnz	r0, 800e644 <__cvt+0x8c>
 800e63c:	f1c6 0601 	rsb	r6, r6, #1
 800e640:	f8ca 6000 	str.w	r6, [sl]
 800e644:	f8da 3000 	ldr.w	r3, [sl]
 800e648:	4499      	add	r9, r3
 800e64a:	2200      	movs	r2, #0
 800e64c:	2300      	movs	r3, #0
 800e64e:	4620      	mov	r0, r4
 800e650:	4629      	mov	r1, r5
 800e652:	f7f2 fa59 	bl	8000b08 <__aeabi_dcmpeq>
 800e656:	b108      	cbz	r0, 800e65c <__cvt+0xa4>
 800e658:	f8cd 900c 	str.w	r9, [sp, #12]
 800e65c:	2230      	movs	r2, #48	; 0x30
 800e65e:	9b03      	ldr	r3, [sp, #12]
 800e660:	454b      	cmp	r3, r9
 800e662:	d307      	bcc.n	800e674 <__cvt+0xbc>
 800e664:	9b03      	ldr	r3, [sp, #12]
 800e666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e668:	1bdb      	subs	r3, r3, r7
 800e66a:	4638      	mov	r0, r7
 800e66c:	6013      	str	r3, [r2, #0]
 800e66e:	b004      	add	sp, #16
 800e670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e674:	1c59      	adds	r1, r3, #1
 800e676:	9103      	str	r1, [sp, #12]
 800e678:	701a      	strb	r2, [r3, #0]
 800e67a:	e7f0      	b.n	800e65e <__cvt+0xa6>

0800e67c <__exponent>:
 800e67c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e67e:	4603      	mov	r3, r0
 800e680:	2900      	cmp	r1, #0
 800e682:	bfb8      	it	lt
 800e684:	4249      	neglt	r1, r1
 800e686:	f803 2b02 	strb.w	r2, [r3], #2
 800e68a:	bfb4      	ite	lt
 800e68c:	222d      	movlt	r2, #45	; 0x2d
 800e68e:	222b      	movge	r2, #43	; 0x2b
 800e690:	2909      	cmp	r1, #9
 800e692:	7042      	strb	r2, [r0, #1]
 800e694:	dd2a      	ble.n	800e6ec <__exponent+0x70>
 800e696:	f10d 0407 	add.w	r4, sp, #7
 800e69a:	46a4      	mov	ip, r4
 800e69c:	270a      	movs	r7, #10
 800e69e:	46a6      	mov	lr, r4
 800e6a0:	460a      	mov	r2, r1
 800e6a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800e6a6:	fb07 1516 	mls	r5, r7, r6, r1
 800e6aa:	3530      	adds	r5, #48	; 0x30
 800e6ac:	2a63      	cmp	r2, #99	; 0x63
 800e6ae:	f104 34ff 	add.w	r4, r4, #4294967295
 800e6b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e6b6:	4631      	mov	r1, r6
 800e6b8:	dcf1      	bgt.n	800e69e <__exponent+0x22>
 800e6ba:	3130      	adds	r1, #48	; 0x30
 800e6bc:	f1ae 0502 	sub.w	r5, lr, #2
 800e6c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e6c4:	1c44      	adds	r4, r0, #1
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	4561      	cmp	r1, ip
 800e6ca:	d30a      	bcc.n	800e6e2 <__exponent+0x66>
 800e6cc:	f10d 0209 	add.w	r2, sp, #9
 800e6d0:	eba2 020e 	sub.w	r2, r2, lr
 800e6d4:	4565      	cmp	r5, ip
 800e6d6:	bf88      	it	hi
 800e6d8:	2200      	movhi	r2, #0
 800e6da:	4413      	add	r3, r2
 800e6dc:	1a18      	subs	r0, r3, r0
 800e6de:	b003      	add	sp, #12
 800e6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e6ea:	e7ed      	b.n	800e6c8 <__exponent+0x4c>
 800e6ec:	2330      	movs	r3, #48	; 0x30
 800e6ee:	3130      	adds	r1, #48	; 0x30
 800e6f0:	7083      	strb	r3, [r0, #2]
 800e6f2:	70c1      	strb	r1, [r0, #3]
 800e6f4:	1d03      	adds	r3, r0, #4
 800e6f6:	e7f1      	b.n	800e6dc <__exponent+0x60>

0800e6f8 <_printf_float>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	ed2d 8b02 	vpush	{d8}
 800e700:	b08d      	sub	sp, #52	; 0x34
 800e702:	460c      	mov	r4, r1
 800e704:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e708:	4616      	mov	r6, r2
 800e70a:	461f      	mov	r7, r3
 800e70c:	4605      	mov	r5, r0
 800e70e:	f001 fa49 	bl	800fba4 <_localeconv_r>
 800e712:	f8d0 a000 	ldr.w	sl, [r0]
 800e716:	4650      	mov	r0, sl
 800e718:	f7f1 fd7a 	bl	8000210 <strlen>
 800e71c:	2300      	movs	r3, #0
 800e71e:	930a      	str	r3, [sp, #40]	; 0x28
 800e720:	6823      	ldr	r3, [r4, #0]
 800e722:	9305      	str	r3, [sp, #20]
 800e724:	f8d8 3000 	ldr.w	r3, [r8]
 800e728:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e72c:	3307      	adds	r3, #7
 800e72e:	f023 0307 	bic.w	r3, r3, #7
 800e732:	f103 0208 	add.w	r2, r3, #8
 800e736:	f8c8 2000 	str.w	r2, [r8]
 800e73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e742:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e746:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e74a:	9307      	str	r3, [sp, #28]
 800e74c:	f8cd 8018 	str.w	r8, [sp, #24]
 800e750:	ee08 0a10 	vmov	s16, r0
 800e754:	4b9f      	ldr	r3, [pc, #636]	; (800e9d4 <_printf_float+0x2dc>)
 800e756:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e75a:	f04f 32ff 	mov.w	r2, #4294967295
 800e75e:	f7f2 fa05 	bl	8000b6c <__aeabi_dcmpun>
 800e762:	bb88      	cbnz	r0, 800e7c8 <_printf_float+0xd0>
 800e764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e768:	4b9a      	ldr	r3, [pc, #616]	; (800e9d4 <_printf_float+0x2dc>)
 800e76a:	f04f 32ff 	mov.w	r2, #4294967295
 800e76e:	f7f2 f9df 	bl	8000b30 <__aeabi_dcmple>
 800e772:	bb48      	cbnz	r0, 800e7c8 <_printf_float+0xd0>
 800e774:	2200      	movs	r2, #0
 800e776:	2300      	movs	r3, #0
 800e778:	4640      	mov	r0, r8
 800e77a:	4649      	mov	r1, r9
 800e77c:	f7f2 f9ce 	bl	8000b1c <__aeabi_dcmplt>
 800e780:	b110      	cbz	r0, 800e788 <_printf_float+0x90>
 800e782:	232d      	movs	r3, #45	; 0x2d
 800e784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e788:	4b93      	ldr	r3, [pc, #588]	; (800e9d8 <_printf_float+0x2e0>)
 800e78a:	4894      	ldr	r0, [pc, #592]	; (800e9dc <_printf_float+0x2e4>)
 800e78c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e790:	bf94      	ite	ls
 800e792:	4698      	movls	r8, r3
 800e794:	4680      	movhi	r8, r0
 800e796:	2303      	movs	r3, #3
 800e798:	6123      	str	r3, [r4, #16]
 800e79a:	9b05      	ldr	r3, [sp, #20]
 800e79c:	f023 0204 	bic.w	r2, r3, #4
 800e7a0:	6022      	str	r2, [r4, #0]
 800e7a2:	f04f 0900 	mov.w	r9, #0
 800e7a6:	9700      	str	r7, [sp, #0]
 800e7a8:	4633      	mov	r3, r6
 800e7aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800e7ac:	4621      	mov	r1, r4
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	f000 f9d8 	bl	800eb64 <_printf_common>
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	f040 8090 	bne.w	800e8da <_printf_float+0x1e2>
 800e7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e7be:	b00d      	add	sp, #52	; 0x34
 800e7c0:	ecbd 8b02 	vpop	{d8}
 800e7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7c8:	4642      	mov	r2, r8
 800e7ca:	464b      	mov	r3, r9
 800e7cc:	4640      	mov	r0, r8
 800e7ce:	4649      	mov	r1, r9
 800e7d0:	f7f2 f9cc 	bl	8000b6c <__aeabi_dcmpun>
 800e7d4:	b140      	cbz	r0, 800e7e8 <_printf_float+0xf0>
 800e7d6:	464b      	mov	r3, r9
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	bfbc      	itt	lt
 800e7dc:	232d      	movlt	r3, #45	; 0x2d
 800e7de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e7e2:	487f      	ldr	r0, [pc, #508]	; (800e9e0 <_printf_float+0x2e8>)
 800e7e4:	4b7f      	ldr	r3, [pc, #508]	; (800e9e4 <_printf_float+0x2ec>)
 800e7e6:	e7d1      	b.n	800e78c <_printf_float+0x94>
 800e7e8:	6863      	ldr	r3, [r4, #4]
 800e7ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e7ee:	9206      	str	r2, [sp, #24]
 800e7f0:	1c5a      	adds	r2, r3, #1
 800e7f2:	d13f      	bne.n	800e874 <_printf_float+0x17c>
 800e7f4:	2306      	movs	r3, #6
 800e7f6:	6063      	str	r3, [r4, #4]
 800e7f8:	9b05      	ldr	r3, [sp, #20]
 800e7fa:	6861      	ldr	r1, [r4, #4]
 800e7fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e800:	2300      	movs	r3, #0
 800e802:	9303      	str	r3, [sp, #12]
 800e804:	ab0a      	add	r3, sp, #40	; 0x28
 800e806:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e80a:	ab09      	add	r3, sp, #36	; 0x24
 800e80c:	ec49 8b10 	vmov	d0, r8, r9
 800e810:	9300      	str	r3, [sp, #0]
 800e812:	6022      	str	r2, [r4, #0]
 800e814:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e818:	4628      	mov	r0, r5
 800e81a:	f7ff fecd 	bl	800e5b8 <__cvt>
 800e81e:	9b06      	ldr	r3, [sp, #24]
 800e820:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e822:	2b47      	cmp	r3, #71	; 0x47
 800e824:	4680      	mov	r8, r0
 800e826:	d108      	bne.n	800e83a <_printf_float+0x142>
 800e828:	1cc8      	adds	r0, r1, #3
 800e82a:	db02      	blt.n	800e832 <_printf_float+0x13a>
 800e82c:	6863      	ldr	r3, [r4, #4]
 800e82e:	4299      	cmp	r1, r3
 800e830:	dd41      	ble.n	800e8b6 <_printf_float+0x1be>
 800e832:	f1ab 0b02 	sub.w	fp, fp, #2
 800e836:	fa5f fb8b 	uxtb.w	fp, fp
 800e83a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e83e:	d820      	bhi.n	800e882 <_printf_float+0x18a>
 800e840:	3901      	subs	r1, #1
 800e842:	465a      	mov	r2, fp
 800e844:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e848:	9109      	str	r1, [sp, #36]	; 0x24
 800e84a:	f7ff ff17 	bl	800e67c <__exponent>
 800e84e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e850:	1813      	adds	r3, r2, r0
 800e852:	2a01      	cmp	r2, #1
 800e854:	4681      	mov	r9, r0
 800e856:	6123      	str	r3, [r4, #16]
 800e858:	dc02      	bgt.n	800e860 <_printf_float+0x168>
 800e85a:	6822      	ldr	r2, [r4, #0]
 800e85c:	07d2      	lsls	r2, r2, #31
 800e85e:	d501      	bpl.n	800e864 <_printf_float+0x16c>
 800e860:	3301      	adds	r3, #1
 800e862:	6123      	str	r3, [r4, #16]
 800e864:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d09c      	beq.n	800e7a6 <_printf_float+0xae>
 800e86c:	232d      	movs	r3, #45	; 0x2d
 800e86e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e872:	e798      	b.n	800e7a6 <_printf_float+0xae>
 800e874:	9a06      	ldr	r2, [sp, #24]
 800e876:	2a47      	cmp	r2, #71	; 0x47
 800e878:	d1be      	bne.n	800e7f8 <_printf_float+0x100>
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1bc      	bne.n	800e7f8 <_printf_float+0x100>
 800e87e:	2301      	movs	r3, #1
 800e880:	e7b9      	b.n	800e7f6 <_printf_float+0xfe>
 800e882:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e886:	d118      	bne.n	800e8ba <_printf_float+0x1c2>
 800e888:	2900      	cmp	r1, #0
 800e88a:	6863      	ldr	r3, [r4, #4]
 800e88c:	dd0b      	ble.n	800e8a6 <_printf_float+0x1ae>
 800e88e:	6121      	str	r1, [r4, #16]
 800e890:	b913      	cbnz	r3, 800e898 <_printf_float+0x1a0>
 800e892:	6822      	ldr	r2, [r4, #0]
 800e894:	07d0      	lsls	r0, r2, #31
 800e896:	d502      	bpl.n	800e89e <_printf_float+0x1a6>
 800e898:	3301      	adds	r3, #1
 800e89a:	440b      	add	r3, r1
 800e89c:	6123      	str	r3, [r4, #16]
 800e89e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e8a0:	f04f 0900 	mov.w	r9, #0
 800e8a4:	e7de      	b.n	800e864 <_printf_float+0x16c>
 800e8a6:	b913      	cbnz	r3, 800e8ae <_printf_float+0x1b6>
 800e8a8:	6822      	ldr	r2, [r4, #0]
 800e8aa:	07d2      	lsls	r2, r2, #31
 800e8ac:	d501      	bpl.n	800e8b2 <_printf_float+0x1ba>
 800e8ae:	3302      	adds	r3, #2
 800e8b0:	e7f4      	b.n	800e89c <_printf_float+0x1a4>
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	e7f2      	b.n	800e89c <_printf_float+0x1a4>
 800e8b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8bc:	4299      	cmp	r1, r3
 800e8be:	db05      	blt.n	800e8cc <_printf_float+0x1d4>
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	6121      	str	r1, [r4, #16]
 800e8c4:	07d8      	lsls	r0, r3, #31
 800e8c6:	d5ea      	bpl.n	800e89e <_printf_float+0x1a6>
 800e8c8:	1c4b      	adds	r3, r1, #1
 800e8ca:	e7e7      	b.n	800e89c <_printf_float+0x1a4>
 800e8cc:	2900      	cmp	r1, #0
 800e8ce:	bfd4      	ite	le
 800e8d0:	f1c1 0202 	rsble	r2, r1, #2
 800e8d4:	2201      	movgt	r2, #1
 800e8d6:	4413      	add	r3, r2
 800e8d8:	e7e0      	b.n	800e89c <_printf_float+0x1a4>
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	055a      	lsls	r2, r3, #21
 800e8de:	d407      	bmi.n	800e8f0 <_printf_float+0x1f8>
 800e8e0:	6923      	ldr	r3, [r4, #16]
 800e8e2:	4642      	mov	r2, r8
 800e8e4:	4631      	mov	r1, r6
 800e8e6:	4628      	mov	r0, r5
 800e8e8:	47b8      	blx	r7
 800e8ea:	3001      	adds	r0, #1
 800e8ec:	d12c      	bne.n	800e948 <_printf_float+0x250>
 800e8ee:	e764      	b.n	800e7ba <_printf_float+0xc2>
 800e8f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e8f4:	f240 80e0 	bls.w	800eab8 <_printf_float+0x3c0>
 800e8f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	2300      	movs	r3, #0
 800e900:	f7f2 f902 	bl	8000b08 <__aeabi_dcmpeq>
 800e904:	2800      	cmp	r0, #0
 800e906:	d034      	beq.n	800e972 <_printf_float+0x27a>
 800e908:	4a37      	ldr	r2, [pc, #220]	; (800e9e8 <_printf_float+0x2f0>)
 800e90a:	2301      	movs	r3, #1
 800e90c:	4631      	mov	r1, r6
 800e90e:	4628      	mov	r0, r5
 800e910:	47b8      	blx	r7
 800e912:	3001      	adds	r0, #1
 800e914:	f43f af51 	beq.w	800e7ba <_printf_float+0xc2>
 800e918:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e91c:	429a      	cmp	r2, r3
 800e91e:	db02      	blt.n	800e926 <_printf_float+0x22e>
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	07d8      	lsls	r0, r3, #31
 800e924:	d510      	bpl.n	800e948 <_printf_float+0x250>
 800e926:	ee18 3a10 	vmov	r3, s16
 800e92a:	4652      	mov	r2, sl
 800e92c:	4631      	mov	r1, r6
 800e92e:	4628      	mov	r0, r5
 800e930:	47b8      	blx	r7
 800e932:	3001      	adds	r0, #1
 800e934:	f43f af41 	beq.w	800e7ba <_printf_float+0xc2>
 800e938:	f04f 0800 	mov.w	r8, #0
 800e93c:	f104 091a 	add.w	r9, r4, #26
 800e940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e942:	3b01      	subs	r3, #1
 800e944:	4543      	cmp	r3, r8
 800e946:	dc09      	bgt.n	800e95c <_printf_float+0x264>
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	079b      	lsls	r3, r3, #30
 800e94c:	f100 8105 	bmi.w	800eb5a <_printf_float+0x462>
 800e950:	68e0      	ldr	r0, [r4, #12]
 800e952:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e954:	4298      	cmp	r0, r3
 800e956:	bfb8      	it	lt
 800e958:	4618      	movlt	r0, r3
 800e95a:	e730      	b.n	800e7be <_printf_float+0xc6>
 800e95c:	2301      	movs	r3, #1
 800e95e:	464a      	mov	r2, r9
 800e960:	4631      	mov	r1, r6
 800e962:	4628      	mov	r0, r5
 800e964:	47b8      	blx	r7
 800e966:	3001      	adds	r0, #1
 800e968:	f43f af27 	beq.w	800e7ba <_printf_float+0xc2>
 800e96c:	f108 0801 	add.w	r8, r8, #1
 800e970:	e7e6      	b.n	800e940 <_printf_float+0x248>
 800e972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e974:	2b00      	cmp	r3, #0
 800e976:	dc39      	bgt.n	800e9ec <_printf_float+0x2f4>
 800e978:	4a1b      	ldr	r2, [pc, #108]	; (800e9e8 <_printf_float+0x2f0>)
 800e97a:	2301      	movs	r3, #1
 800e97c:	4631      	mov	r1, r6
 800e97e:	4628      	mov	r0, r5
 800e980:	47b8      	blx	r7
 800e982:	3001      	adds	r0, #1
 800e984:	f43f af19 	beq.w	800e7ba <_printf_float+0xc2>
 800e988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e98c:	4313      	orrs	r3, r2
 800e98e:	d102      	bne.n	800e996 <_printf_float+0x29e>
 800e990:	6823      	ldr	r3, [r4, #0]
 800e992:	07d9      	lsls	r1, r3, #31
 800e994:	d5d8      	bpl.n	800e948 <_printf_float+0x250>
 800e996:	ee18 3a10 	vmov	r3, s16
 800e99a:	4652      	mov	r2, sl
 800e99c:	4631      	mov	r1, r6
 800e99e:	4628      	mov	r0, r5
 800e9a0:	47b8      	blx	r7
 800e9a2:	3001      	adds	r0, #1
 800e9a4:	f43f af09 	beq.w	800e7ba <_printf_float+0xc2>
 800e9a8:	f04f 0900 	mov.w	r9, #0
 800e9ac:	f104 0a1a 	add.w	sl, r4, #26
 800e9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9b2:	425b      	negs	r3, r3
 800e9b4:	454b      	cmp	r3, r9
 800e9b6:	dc01      	bgt.n	800e9bc <_printf_float+0x2c4>
 800e9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9ba:	e792      	b.n	800e8e2 <_printf_float+0x1ea>
 800e9bc:	2301      	movs	r3, #1
 800e9be:	4652      	mov	r2, sl
 800e9c0:	4631      	mov	r1, r6
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	47b8      	blx	r7
 800e9c6:	3001      	adds	r0, #1
 800e9c8:	f43f aef7 	beq.w	800e7ba <_printf_float+0xc2>
 800e9cc:	f109 0901 	add.w	r9, r9, #1
 800e9d0:	e7ee      	b.n	800e9b0 <_printf_float+0x2b8>
 800e9d2:	bf00      	nop
 800e9d4:	7fefffff 	.word	0x7fefffff
 800e9d8:	080125c0 	.word	0x080125c0
 800e9dc:	080125c4 	.word	0x080125c4
 800e9e0:	080125cc 	.word	0x080125cc
 800e9e4:	080125c8 	.word	0x080125c8
 800e9e8:	080125d0 	.word	0x080125d0
 800e9ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	bfa8      	it	ge
 800e9f4:	461a      	movge	r2, r3
 800e9f6:	2a00      	cmp	r2, #0
 800e9f8:	4691      	mov	r9, r2
 800e9fa:	dc37      	bgt.n	800ea6c <_printf_float+0x374>
 800e9fc:	f04f 0b00 	mov.w	fp, #0
 800ea00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea04:	f104 021a 	add.w	r2, r4, #26
 800ea08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea0a:	9305      	str	r3, [sp, #20]
 800ea0c:	eba3 0309 	sub.w	r3, r3, r9
 800ea10:	455b      	cmp	r3, fp
 800ea12:	dc33      	bgt.n	800ea7c <_printf_float+0x384>
 800ea14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	db3b      	blt.n	800ea94 <_printf_float+0x39c>
 800ea1c:	6823      	ldr	r3, [r4, #0]
 800ea1e:	07da      	lsls	r2, r3, #31
 800ea20:	d438      	bmi.n	800ea94 <_printf_float+0x39c>
 800ea22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea24:	9a05      	ldr	r2, [sp, #20]
 800ea26:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea28:	1a9a      	subs	r2, r3, r2
 800ea2a:	eba3 0901 	sub.w	r9, r3, r1
 800ea2e:	4591      	cmp	r9, r2
 800ea30:	bfa8      	it	ge
 800ea32:	4691      	movge	r9, r2
 800ea34:	f1b9 0f00 	cmp.w	r9, #0
 800ea38:	dc35      	bgt.n	800eaa6 <_printf_float+0x3ae>
 800ea3a:	f04f 0800 	mov.w	r8, #0
 800ea3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea42:	f104 0a1a 	add.w	sl, r4, #26
 800ea46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea4a:	1a9b      	subs	r3, r3, r2
 800ea4c:	eba3 0309 	sub.w	r3, r3, r9
 800ea50:	4543      	cmp	r3, r8
 800ea52:	f77f af79 	ble.w	800e948 <_printf_float+0x250>
 800ea56:	2301      	movs	r3, #1
 800ea58:	4652      	mov	r2, sl
 800ea5a:	4631      	mov	r1, r6
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	47b8      	blx	r7
 800ea60:	3001      	adds	r0, #1
 800ea62:	f43f aeaa 	beq.w	800e7ba <_printf_float+0xc2>
 800ea66:	f108 0801 	add.w	r8, r8, #1
 800ea6a:	e7ec      	b.n	800ea46 <_printf_float+0x34e>
 800ea6c:	4613      	mov	r3, r2
 800ea6e:	4631      	mov	r1, r6
 800ea70:	4642      	mov	r2, r8
 800ea72:	4628      	mov	r0, r5
 800ea74:	47b8      	blx	r7
 800ea76:	3001      	adds	r0, #1
 800ea78:	d1c0      	bne.n	800e9fc <_printf_float+0x304>
 800ea7a:	e69e      	b.n	800e7ba <_printf_float+0xc2>
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	4631      	mov	r1, r6
 800ea80:	4628      	mov	r0, r5
 800ea82:	9205      	str	r2, [sp, #20]
 800ea84:	47b8      	blx	r7
 800ea86:	3001      	adds	r0, #1
 800ea88:	f43f ae97 	beq.w	800e7ba <_printf_float+0xc2>
 800ea8c:	9a05      	ldr	r2, [sp, #20]
 800ea8e:	f10b 0b01 	add.w	fp, fp, #1
 800ea92:	e7b9      	b.n	800ea08 <_printf_float+0x310>
 800ea94:	ee18 3a10 	vmov	r3, s16
 800ea98:	4652      	mov	r2, sl
 800ea9a:	4631      	mov	r1, r6
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	47b8      	blx	r7
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	d1be      	bne.n	800ea22 <_printf_float+0x32a>
 800eaa4:	e689      	b.n	800e7ba <_printf_float+0xc2>
 800eaa6:	9a05      	ldr	r2, [sp, #20]
 800eaa8:	464b      	mov	r3, r9
 800eaaa:	4442      	add	r2, r8
 800eaac:	4631      	mov	r1, r6
 800eaae:	4628      	mov	r0, r5
 800eab0:	47b8      	blx	r7
 800eab2:	3001      	adds	r0, #1
 800eab4:	d1c1      	bne.n	800ea3a <_printf_float+0x342>
 800eab6:	e680      	b.n	800e7ba <_printf_float+0xc2>
 800eab8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eaba:	2a01      	cmp	r2, #1
 800eabc:	dc01      	bgt.n	800eac2 <_printf_float+0x3ca>
 800eabe:	07db      	lsls	r3, r3, #31
 800eac0:	d538      	bpl.n	800eb34 <_printf_float+0x43c>
 800eac2:	2301      	movs	r3, #1
 800eac4:	4642      	mov	r2, r8
 800eac6:	4631      	mov	r1, r6
 800eac8:	4628      	mov	r0, r5
 800eaca:	47b8      	blx	r7
 800eacc:	3001      	adds	r0, #1
 800eace:	f43f ae74 	beq.w	800e7ba <_printf_float+0xc2>
 800ead2:	ee18 3a10 	vmov	r3, s16
 800ead6:	4652      	mov	r2, sl
 800ead8:	4631      	mov	r1, r6
 800eada:	4628      	mov	r0, r5
 800eadc:	47b8      	blx	r7
 800eade:	3001      	adds	r0, #1
 800eae0:	f43f ae6b 	beq.w	800e7ba <_printf_float+0xc2>
 800eae4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eae8:	2200      	movs	r2, #0
 800eaea:	2300      	movs	r3, #0
 800eaec:	f7f2 f80c 	bl	8000b08 <__aeabi_dcmpeq>
 800eaf0:	b9d8      	cbnz	r0, 800eb2a <_printf_float+0x432>
 800eaf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaf4:	f108 0201 	add.w	r2, r8, #1
 800eaf8:	3b01      	subs	r3, #1
 800eafa:	4631      	mov	r1, r6
 800eafc:	4628      	mov	r0, r5
 800eafe:	47b8      	blx	r7
 800eb00:	3001      	adds	r0, #1
 800eb02:	d10e      	bne.n	800eb22 <_printf_float+0x42a>
 800eb04:	e659      	b.n	800e7ba <_printf_float+0xc2>
 800eb06:	2301      	movs	r3, #1
 800eb08:	4652      	mov	r2, sl
 800eb0a:	4631      	mov	r1, r6
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	47b8      	blx	r7
 800eb10:	3001      	adds	r0, #1
 800eb12:	f43f ae52 	beq.w	800e7ba <_printf_float+0xc2>
 800eb16:	f108 0801 	add.w	r8, r8, #1
 800eb1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	4543      	cmp	r3, r8
 800eb20:	dcf1      	bgt.n	800eb06 <_printf_float+0x40e>
 800eb22:	464b      	mov	r3, r9
 800eb24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb28:	e6dc      	b.n	800e8e4 <_printf_float+0x1ec>
 800eb2a:	f04f 0800 	mov.w	r8, #0
 800eb2e:	f104 0a1a 	add.w	sl, r4, #26
 800eb32:	e7f2      	b.n	800eb1a <_printf_float+0x422>
 800eb34:	2301      	movs	r3, #1
 800eb36:	4642      	mov	r2, r8
 800eb38:	e7df      	b.n	800eafa <_printf_float+0x402>
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	464a      	mov	r2, r9
 800eb3e:	4631      	mov	r1, r6
 800eb40:	4628      	mov	r0, r5
 800eb42:	47b8      	blx	r7
 800eb44:	3001      	adds	r0, #1
 800eb46:	f43f ae38 	beq.w	800e7ba <_printf_float+0xc2>
 800eb4a:	f108 0801 	add.w	r8, r8, #1
 800eb4e:	68e3      	ldr	r3, [r4, #12]
 800eb50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb52:	1a5b      	subs	r3, r3, r1
 800eb54:	4543      	cmp	r3, r8
 800eb56:	dcf0      	bgt.n	800eb3a <_printf_float+0x442>
 800eb58:	e6fa      	b.n	800e950 <_printf_float+0x258>
 800eb5a:	f04f 0800 	mov.w	r8, #0
 800eb5e:	f104 0919 	add.w	r9, r4, #25
 800eb62:	e7f4      	b.n	800eb4e <_printf_float+0x456>

0800eb64 <_printf_common>:
 800eb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb68:	4616      	mov	r6, r2
 800eb6a:	4699      	mov	r9, r3
 800eb6c:	688a      	ldr	r2, [r1, #8]
 800eb6e:	690b      	ldr	r3, [r1, #16]
 800eb70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb74:	4293      	cmp	r3, r2
 800eb76:	bfb8      	it	lt
 800eb78:	4613      	movlt	r3, r2
 800eb7a:	6033      	str	r3, [r6, #0]
 800eb7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb80:	4607      	mov	r7, r0
 800eb82:	460c      	mov	r4, r1
 800eb84:	b10a      	cbz	r2, 800eb8a <_printf_common+0x26>
 800eb86:	3301      	adds	r3, #1
 800eb88:	6033      	str	r3, [r6, #0]
 800eb8a:	6823      	ldr	r3, [r4, #0]
 800eb8c:	0699      	lsls	r1, r3, #26
 800eb8e:	bf42      	ittt	mi
 800eb90:	6833      	ldrmi	r3, [r6, #0]
 800eb92:	3302      	addmi	r3, #2
 800eb94:	6033      	strmi	r3, [r6, #0]
 800eb96:	6825      	ldr	r5, [r4, #0]
 800eb98:	f015 0506 	ands.w	r5, r5, #6
 800eb9c:	d106      	bne.n	800ebac <_printf_common+0x48>
 800eb9e:	f104 0a19 	add.w	sl, r4, #25
 800eba2:	68e3      	ldr	r3, [r4, #12]
 800eba4:	6832      	ldr	r2, [r6, #0]
 800eba6:	1a9b      	subs	r3, r3, r2
 800eba8:	42ab      	cmp	r3, r5
 800ebaa:	dc26      	bgt.n	800ebfa <_printf_common+0x96>
 800ebac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ebb0:	1e13      	subs	r3, r2, #0
 800ebb2:	6822      	ldr	r2, [r4, #0]
 800ebb4:	bf18      	it	ne
 800ebb6:	2301      	movne	r3, #1
 800ebb8:	0692      	lsls	r2, r2, #26
 800ebba:	d42b      	bmi.n	800ec14 <_printf_common+0xb0>
 800ebbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebc0:	4649      	mov	r1, r9
 800ebc2:	4638      	mov	r0, r7
 800ebc4:	47c0      	blx	r8
 800ebc6:	3001      	adds	r0, #1
 800ebc8:	d01e      	beq.n	800ec08 <_printf_common+0xa4>
 800ebca:	6823      	ldr	r3, [r4, #0]
 800ebcc:	68e5      	ldr	r5, [r4, #12]
 800ebce:	6832      	ldr	r2, [r6, #0]
 800ebd0:	f003 0306 	and.w	r3, r3, #6
 800ebd4:	2b04      	cmp	r3, #4
 800ebd6:	bf08      	it	eq
 800ebd8:	1aad      	subeq	r5, r5, r2
 800ebda:	68a3      	ldr	r3, [r4, #8]
 800ebdc:	6922      	ldr	r2, [r4, #16]
 800ebde:	bf0c      	ite	eq
 800ebe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebe4:	2500      	movne	r5, #0
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	bfc4      	itt	gt
 800ebea:	1a9b      	subgt	r3, r3, r2
 800ebec:	18ed      	addgt	r5, r5, r3
 800ebee:	2600      	movs	r6, #0
 800ebf0:	341a      	adds	r4, #26
 800ebf2:	42b5      	cmp	r5, r6
 800ebf4:	d11a      	bne.n	800ec2c <_printf_common+0xc8>
 800ebf6:	2000      	movs	r0, #0
 800ebf8:	e008      	b.n	800ec0c <_printf_common+0xa8>
 800ebfa:	2301      	movs	r3, #1
 800ebfc:	4652      	mov	r2, sl
 800ebfe:	4649      	mov	r1, r9
 800ec00:	4638      	mov	r0, r7
 800ec02:	47c0      	blx	r8
 800ec04:	3001      	adds	r0, #1
 800ec06:	d103      	bne.n	800ec10 <_printf_common+0xac>
 800ec08:	f04f 30ff 	mov.w	r0, #4294967295
 800ec0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec10:	3501      	adds	r5, #1
 800ec12:	e7c6      	b.n	800eba2 <_printf_common+0x3e>
 800ec14:	18e1      	adds	r1, r4, r3
 800ec16:	1c5a      	adds	r2, r3, #1
 800ec18:	2030      	movs	r0, #48	; 0x30
 800ec1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec1e:	4422      	add	r2, r4
 800ec20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec28:	3302      	adds	r3, #2
 800ec2a:	e7c7      	b.n	800ebbc <_printf_common+0x58>
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	4622      	mov	r2, r4
 800ec30:	4649      	mov	r1, r9
 800ec32:	4638      	mov	r0, r7
 800ec34:	47c0      	blx	r8
 800ec36:	3001      	adds	r0, #1
 800ec38:	d0e6      	beq.n	800ec08 <_printf_common+0xa4>
 800ec3a:	3601      	adds	r6, #1
 800ec3c:	e7d9      	b.n	800ebf2 <_printf_common+0x8e>
	...

0800ec40 <_printf_i>:
 800ec40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ec44:	7e0f      	ldrb	r7, [r1, #24]
 800ec46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ec48:	2f78      	cmp	r7, #120	; 0x78
 800ec4a:	4691      	mov	r9, r2
 800ec4c:	4680      	mov	r8, r0
 800ec4e:	460c      	mov	r4, r1
 800ec50:	469a      	mov	sl, r3
 800ec52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ec56:	d807      	bhi.n	800ec68 <_printf_i+0x28>
 800ec58:	2f62      	cmp	r7, #98	; 0x62
 800ec5a:	d80a      	bhi.n	800ec72 <_printf_i+0x32>
 800ec5c:	2f00      	cmp	r7, #0
 800ec5e:	f000 80d8 	beq.w	800ee12 <_printf_i+0x1d2>
 800ec62:	2f58      	cmp	r7, #88	; 0x58
 800ec64:	f000 80a3 	beq.w	800edae <_printf_i+0x16e>
 800ec68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ec70:	e03a      	b.n	800ece8 <_printf_i+0xa8>
 800ec72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ec76:	2b15      	cmp	r3, #21
 800ec78:	d8f6      	bhi.n	800ec68 <_printf_i+0x28>
 800ec7a:	a101      	add	r1, pc, #4	; (adr r1, 800ec80 <_printf_i+0x40>)
 800ec7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec80:	0800ecd9 	.word	0x0800ecd9
 800ec84:	0800eced 	.word	0x0800eced
 800ec88:	0800ec69 	.word	0x0800ec69
 800ec8c:	0800ec69 	.word	0x0800ec69
 800ec90:	0800ec69 	.word	0x0800ec69
 800ec94:	0800ec69 	.word	0x0800ec69
 800ec98:	0800eced 	.word	0x0800eced
 800ec9c:	0800ec69 	.word	0x0800ec69
 800eca0:	0800ec69 	.word	0x0800ec69
 800eca4:	0800ec69 	.word	0x0800ec69
 800eca8:	0800ec69 	.word	0x0800ec69
 800ecac:	0800edf9 	.word	0x0800edf9
 800ecb0:	0800ed1d 	.word	0x0800ed1d
 800ecb4:	0800eddb 	.word	0x0800eddb
 800ecb8:	0800ec69 	.word	0x0800ec69
 800ecbc:	0800ec69 	.word	0x0800ec69
 800ecc0:	0800ee1b 	.word	0x0800ee1b
 800ecc4:	0800ec69 	.word	0x0800ec69
 800ecc8:	0800ed1d 	.word	0x0800ed1d
 800eccc:	0800ec69 	.word	0x0800ec69
 800ecd0:	0800ec69 	.word	0x0800ec69
 800ecd4:	0800ede3 	.word	0x0800ede3
 800ecd8:	682b      	ldr	r3, [r5, #0]
 800ecda:	1d1a      	adds	r2, r3, #4
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	602a      	str	r2, [r5, #0]
 800ece0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ece4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ece8:	2301      	movs	r3, #1
 800ecea:	e0a3      	b.n	800ee34 <_printf_i+0x1f4>
 800ecec:	6820      	ldr	r0, [r4, #0]
 800ecee:	6829      	ldr	r1, [r5, #0]
 800ecf0:	0606      	lsls	r6, r0, #24
 800ecf2:	f101 0304 	add.w	r3, r1, #4
 800ecf6:	d50a      	bpl.n	800ed0e <_printf_i+0xce>
 800ecf8:	680e      	ldr	r6, [r1, #0]
 800ecfa:	602b      	str	r3, [r5, #0]
 800ecfc:	2e00      	cmp	r6, #0
 800ecfe:	da03      	bge.n	800ed08 <_printf_i+0xc8>
 800ed00:	232d      	movs	r3, #45	; 0x2d
 800ed02:	4276      	negs	r6, r6
 800ed04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed08:	485e      	ldr	r0, [pc, #376]	; (800ee84 <_printf_i+0x244>)
 800ed0a:	230a      	movs	r3, #10
 800ed0c:	e019      	b.n	800ed42 <_printf_i+0x102>
 800ed0e:	680e      	ldr	r6, [r1, #0]
 800ed10:	602b      	str	r3, [r5, #0]
 800ed12:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed16:	bf18      	it	ne
 800ed18:	b236      	sxthne	r6, r6
 800ed1a:	e7ef      	b.n	800ecfc <_printf_i+0xbc>
 800ed1c:	682b      	ldr	r3, [r5, #0]
 800ed1e:	6820      	ldr	r0, [r4, #0]
 800ed20:	1d19      	adds	r1, r3, #4
 800ed22:	6029      	str	r1, [r5, #0]
 800ed24:	0601      	lsls	r1, r0, #24
 800ed26:	d501      	bpl.n	800ed2c <_printf_i+0xec>
 800ed28:	681e      	ldr	r6, [r3, #0]
 800ed2a:	e002      	b.n	800ed32 <_printf_i+0xf2>
 800ed2c:	0646      	lsls	r6, r0, #25
 800ed2e:	d5fb      	bpl.n	800ed28 <_printf_i+0xe8>
 800ed30:	881e      	ldrh	r6, [r3, #0]
 800ed32:	4854      	ldr	r0, [pc, #336]	; (800ee84 <_printf_i+0x244>)
 800ed34:	2f6f      	cmp	r7, #111	; 0x6f
 800ed36:	bf0c      	ite	eq
 800ed38:	2308      	moveq	r3, #8
 800ed3a:	230a      	movne	r3, #10
 800ed3c:	2100      	movs	r1, #0
 800ed3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed42:	6865      	ldr	r5, [r4, #4]
 800ed44:	60a5      	str	r5, [r4, #8]
 800ed46:	2d00      	cmp	r5, #0
 800ed48:	bfa2      	ittt	ge
 800ed4a:	6821      	ldrge	r1, [r4, #0]
 800ed4c:	f021 0104 	bicge.w	r1, r1, #4
 800ed50:	6021      	strge	r1, [r4, #0]
 800ed52:	b90e      	cbnz	r6, 800ed58 <_printf_i+0x118>
 800ed54:	2d00      	cmp	r5, #0
 800ed56:	d04d      	beq.n	800edf4 <_printf_i+0x1b4>
 800ed58:	4615      	mov	r5, r2
 800ed5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ed5e:	fb03 6711 	mls	r7, r3, r1, r6
 800ed62:	5dc7      	ldrb	r7, [r0, r7]
 800ed64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ed68:	4637      	mov	r7, r6
 800ed6a:	42bb      	cmp	r3, r7
 800ed6c:	460e      	mov	r6, r1
 800ed6e:	d9f4      	bls.n	800ed5a <_printf_i+0x11a>
 800ed70:	2b08      	cmp	r3, #8
 800ed72:	d10b      	bne.n	800ed8c <_printf_i+0x14c>
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	07de      	lsls	r6, r3, #31
 800ed78:	d508      	bpl.n	800ed8c <_printf_i+0x14c>
 800ed7a:	6923      	ldr	r3, [r4, #16]
 800ed7c:	6861      	ldr	r1, [r4, #4]
 800ed7e:	4299      	cmp	r1, r3
 800ed80:	bfde      	ittt	le
 800ed82:	2330      	movle	r3, #48	; 0x30
 800ed84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed8c:	1b52      	subs	r2, r2, r5
 800ed8e:	6122      	str	r2, [r4, #16]
 800ed90:	f8cd a000 	str.w	sl, [sp]
 800ed94:	464b      	mov	r3, r9
 800ed96:	aa03      	add	r2, sp, #12
 800ed98:	4621      	mov	r1, r4
 800ed9a:	4640      	mov	r0, r8
 800ed9c:	f7ff fee2 	bl	800eb64 <_printf_common>
 800eda0:	3001      	adds	r0, #1
 800eda2:	d14c      	bne.n	800ee3e <_printf_i+0x1fe>
 800eda4:	f04f 30ff 	mov.w	r0, #4294967295
 800eda8:	b004      	add	sp, #16
 800edaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edae:	4835      	ldr	r0, [pc, #212]	; (800ee84 <_printf_i+0x244>)
 800edb0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800edb4:	6829      	ldr	r1, [r5, #0]
 800edb6:	6823      	ldr	r3, [r4, #0]
 800edb8:	f851 6b04 	ldr.w	r6, [r1], #4
 800edbc:	6029      	str	r1, [r5, #0]
 800edbe:	061d      	lsls	r5, r3, #24
 800edc0:	d514      	bpl.n	800edec <_printf_i+0x1ac>
 800edc2:	07df      	lsls	r7, r3, #31
 800edc4:	bf44      	itt	mi
 800edc6:	f043 0320 	orrmi.w	r3, r3, #32
 800edca:	6023      	strmi	r3, [r4, #0]
 800edcc:	b91e      	cbnz	r6, 800edd6 <_printf_i+0x196>
 800edce:	6823      	ldr	r3, [r4, #0]
 800edd0:	f023 0320 	bic.w	r3, r3, #32
 800edd4:	6023      	str	r3, [r4, #0]
 800edd6:	2310      	movs	r3, #16
 800edd8:	e7b0      	b.n	800ed3c <_printf_i+0xfc>
 800edda:	6823      	ldr	r3, [r4, #0]
 800eddc:	f043 0320 	orr.w	r3, r3, #32
 800ede0:	6023      	str	r3, [r4, #0]
 800ede2:	2378      	movs	r3, #120	; 0x78
 800ede4:	4828      	ldr	r0, [pc, #160]	; (800ee88 <_printf_i+0x248>)
 800ede6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800edea:	e7e3      	b.n	800edb4 <_printf_i+0x174>
 800edec:	0659      	lsls	r1, r3, #25
 800edee:	bf48      	it	mi
 800edf0:	b2b6      	uxthmi	r6, r6
 800edf2:	e7e6      	b.n	800edc2 <_printf_i+0x182>
 800edf4:	4615      	mov	r5, r2
 800edf6:	e7bb      	b.n	800ed70 <_printf_i+0x130>
 800edf8:	682b      	ldr	r3, [r5, #0]
 800edfa:	6826      	ldr	r6, [r4, #0]
 800edfc:	6961      	ldr	r1, [r4, #20]
 800edfe:	1d18      	adds	r0, r3, #4
 800ee00:	6028      	str	r0, [r5, #0]
 800ee02:	0635      	lsls	r5, r6, #24
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	d501      	bpl.n	800ee0c <_printf_i+0x1cc>
 800ee08:	6019      	str	r1, [r3, #0]
 800ee0a:	e002      	b.n	800ee12 <_printf_i+0x1d2>
 800ee0c:	0670      	lsls	r0, r6, #25
 800ee0e:	d5fb      	bpl.n	800ee08 <_printf_i+0x1c8>
 800ee10:	8019      	strh	r1, [r3, #0]
 800ee12:	2300      	movs	r3, #0
 800ee14:	6123      	str	r3, [r4, #16]
 800ee16:	4615      	mov	r5, r2
 800ee18:	e7ba      	b.n	800ed90 <_printf_i+0x150>
 800ee1a:	682b      	ldr	r3, [r5, #0]
 800ee1c:	1d1a      	adds	r2, r3, #4
 800ee1e:	602a      	str	r2, [r5, #0]
 800ee20:	681d      	ldr	r5, [r3, #0]
 800ee22:	6862      	ldr	r2, [r4, #4]
 800ee24:	2100      	movs	r1, #0
 800ee26:	4628      	mov	r0, r5
 800ee28:	f7f1 f9fa 	bl	8000220 <memchr>
 800ee2c:	b108      	cbz	r0, 800ee32 <_printf_i+0x1f2>
 800ee2e:	1b40      	subs	r0, r0, r5
 800ee30:	6060      	str	r0, [r4, #4]
 800ee32:	6863      	ldr	r3, [r4, #4]
 800ee34:	6123      	str	r3, [r4, #16]
 800ee36:	2300      	movs	r3, #0
 800ee38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee3c:	e7a8      	b.n	800ed90 <_printf_i+0x150>
 800ee3e:	6923      	ldr	r3, [r4, #16]
 800ee40:	462a      	mov	r2, r5
 800ee42:	4649      	mov	r1, r9
 800ee44:	4640      	mov	r0, r8
 800ee46:	47d0      	blx	sl
 800ee48:	3001      	adds	r0, #1
 800ee4a:	d0ab      	beq.n	800eda4 <_printf_i+0x164>
 800ee4c:	6823      	ldr	r3, [r4, #0]
 800ee4e:	079b      	lsls	r3, r3, #30
 800ee50:	d413      	bmi.n	800ee7a <_printf_i+0x23a>
 800ee52:	68e0      	ldr	r0, [r4, #12]
 800ee54:	9b03      	ldr	r3, [sp, #12]
 800ee56:	4298      	cmp	r0, r3
 800ee58:	bfb8      	it	lt
 800ee5a:	4618      	movlt	r0, r3
 800ee5c:	e7a4      	b.n	800eda8 <_printf_i+0x168>
 800ee5e:	2301      	movs	r3, #1
 800ee60:	4632      	mov	r2, r6
 800ee62:	4649      	mov	r1, r9
 800ee64:	4640      	mov	r0, r8
 800ee66:	47d0      	blx	sl
 800ee68:	3001      	adds	r0, #1
 800ee6a:	d09b      	beq.n	800eda4 <_printf_i+0x164>
 800ee6c:	3501      	adds	r5, #1
 800ee6e:	68e3      	ldr	r3, [r4, #12]
 800ee70:	9903      	ldr	r1, [sp, #12]
 800ee72:	1a5b      	subs	r3, r3, r1
 800ee74:	42ab      	cmp	r3, r5
 800ee76:	dcf2      	bgt.n	800ee5e <_printf_i+0x21e>
 800ee78:	e7eb      	b.n	800ee52 <_printf_i+0x212>
 800ee7a:	2500      	movs	r5, #0
 800ee7c:	f104 0619 	add.w	r6, r4, #25
 800ee80:	e7f5      	b.n	800ee6e <_printf_i+0x22e>
 800ee82:	bf00      	nop
 800ee84:	080125d2 	.word	0x080125d2
 800ee88:	080125e3 	.word	0x080125e3

0800ee8c <strncpy>:
 800ee8c:	b510      	push	{r4, lr}
 800ee8e:	3901      	subs	r1, #1
 800ee90:	4603      	mov	r3, r0
 800ee92:	b132      	cbz	r2, 800eea2 <strncpy+0x16>
 800ee94:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ee98:	f803 4b01 	strb.w	r4, [r3], #1
 800ee9c:	3a01      	subs	r2, #1
 800ee9e:	2c00      	cmp	r4, #0
 800eea0:	d1f7      	bne.n	800ee92 <strncpy+0x6>
 800eea2:	441a      	add	r2, r3
 800eea4:	2100      	movs	r1, #0
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d100      	bne.n	800eeac <strncpy+0x20>
 800eeaa:	bd10      	pop	{r4, pc}
 800eeac:	f803 1b01 	strb.w	r1, [r3], #1
 800eeb0:	e7f9      	b.n	800eea6 <strncpy+0x1a>

0800eeb2 <quorem>:
 800eeb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb6:	6903      	ldr	r3, [r0, #16]
 800eeb8:	690c      	ldr	r4, [r1, #16]
 800eeba:	42a3      	cmp	r3, r4
 800eebc:	4607      	mov	r7, r0
 800eebe:	f2c0 8081 	blt.w	800efc4 <quorem+0x112>
 800eec2:	3c01      	subs	r4, #1
 800eec4:	f101 0814 	add.w	r8, r1, #20
 800eec8:	f100 0514 	add.w	r5, r0, #20
 800eecc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eed0:	9301      	str	r3, [sp, #4]
 800eed2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eed6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eeda:	3301      	adds	r3, #1
 800eedc:	429a      	cmp	r2, r3
 800eede:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eee2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eee6:	fbb2 f6f3 	udiv	r6, r2, r3
 800eeea:	d331      	bcc.n	800ef50 <quorem+0x9e>
 800eeec:	f04f 0e00 	mov.w	lr, #0
 800eef0:	4640      	mov	r0, r8
 800eef2:	46ac      	mov	ip, r5
 800eef4:	46f2      	mov	sl, lr
 800eef6:	f850 2b04 	ldr.w	r2, [r0], #4
 800eefa:	b293      	uxth	r3, r2
 800eefc:	fb06 e303 	mla	r3, r6, r3, lr
 800ef00:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	ebaa 0303 	sub.w	r3, sl, r3
 800ef0a:	f8dc a000 	ldr.w	sl, [ip]
 800ef0e:	0c12      	lsrs	r2, r2, #16
 800ef10:	fa13 f38a 	uxtah	r3, r3, sl
 800ef14:	fb06 e202 	mla	r2, r6, r2, lr
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	9b00      	ldr	r3, [sp, #0]
 800ef1c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ef20:	b292      	uxth	r2, r2
 800ef22:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ef26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef2a:	f8bd 3000 	ldrh.w	r3, [sp]
 800ef2e:	4581      	cmp	r9, r0
 800ef30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef34:	f84c 3b04 	str.w	r3, [ip], #4
 800ef38:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef3c:	d2db      	bcs.n	800eef6 <quorem+0x44>
 800ef3e:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef42:	b92b      	cbnz	r3, 800ef50 <quorem+0x9e>
 800ef44:	9b01      	ldr	r3, [sp, #4]
 800ef46:	3b04      	subs	r3, #4
 800ef48:	429d      	cmp	r5, r3
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	d32e      	bcc.n	800efac <quorem+0xfa>
 800ef4e:	613c      	str	r4, [r7, #16]
 800ef50:	4638      	mov	r0, r7
 800ef52:	f001 f8b5 	bl	80100c0 <__mcmp>
 800ef56:	2800      	cmp	r0, #0
 800ef58:	db24      	blt.n	800efa4 <quorem+0xf2>
 800ef5a:	3601      	adds	r6, #1
 800ef5c:	4628      	mov	r0, r5
 800ef5e:	f04f 0c00 	mov.w	ip, #0
 800ef62:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef66:	f8d0 e000 	ldr.w	lr, [r0]
 800ef6a:	b293      	uxth	r3, r2
 800ef6c:	ebac 0303 	sub.w	r3, ip, r3
 800ef70:	0c12      	lsrs	r2, r2, #16
 800ef72:	fa13 f38e 	uxtah	r3, r3, lr
 800ef76:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ef7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef84:	45c1      	cmp	r9, r8
 800ef86:	f840 3b04 	str.w	r3, [r0], #4
 800ef8a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ef8e:	d2e8      	bcs.n	800ef62 <quorem+0xb0>
 800ef90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef98:	b922      	cbnz	r2, 800efa4 <quorem+0xf2>
 800ef9a:	3b04      	subs	r3, #4
 800ef9c:	429d      	cmp	r5, r3
 800ef9e:	461a      	mov	r2, r3
 800efa0:	d30a      	bcc.n	800efb8 <quorem+0x106>
 800efa2:	613c      	str	r4, [r7, #16]
 800efa4:	4630      	mov	r0, r6
 800efa6:	b003      	add	sp, #12
 800efa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efac:	6812      	ldr	r2, [r2, #0]
 800efae:	3b04      	subs	r3, #4
 800efb0:	2a00      	cmp	r2, #0
 800efb2:	d1cc      	bne.n	800ef4e <quorem+0x9c>
 800efb4:	3c01      	subs	r4, #1
 800efb6:	e7c7      	b.n	800ef48 <quorem+0x96>
 800efb8:	6812      	ldr	r2, [r2, #0]
 800efba:	3b04      	subs	r3, #4
 800efbc:	2a00      	cmp	r2, #0
 800efbe:	d1f0      	bne.n	800efa2 <quorem+0xf0>
 800efc0:	3c01      	subs	r4, #1
 800efc2:	e7eb      	b.n	800ef9c <quorem+0xea>
 800efc4:	2000      	movs	r0, #0
 800efc6:	e7ee      	b.n	800efa6 <quorem+0xf4>

0800efc8 <_dtoa_r>:
 800efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efcc:	ed2d 8b04 	vpush	{d8-d9}
 800efd0:	ec57 6b10 	vmov	r6, r7, d0
 800efd4:	b093      	sub	sp, #76	; 0x4c
 800efd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800efd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800efdc:	9106      	str	r1, [sp, #24]
 800efde:	ee10 aa10 	vmov	sl, s0
 800efe2:	4604      	mov	r4, r0
 800efe4:	9209      	str	r2, [sp, #36]	; 0x24
 800efe6:	930c      	str	r3, [sp, #48]	; 0x30
 800efe8:	46bb      	mov	fp, r7
 800efea:	b975      	cbnz	r5, 800f00a <_dtoa_r+0x42>
 800efec:	2010      	movs	r0, #16
 800efee:	f000 fddd 	bl	800fbac <malloc>
 800eff2:	4602      	mov	r2, r0
 800eff4:	6260      	str	r0, [r4, #36]	; 0x24
 800eff6:	b920      	cbnz	r0, 800f002 <_dtoa_r+0x3a>
 800eff8:	4ba7      	ldr	r3, [pc, #668]	; (800f298 <_dtoa_r+0x2d0>)
 800effa:	21ea      	movs	r1, #234	; 0xea
 800effc:	48a7      	ldr	r0, [pc, #668]	; (800f29c <_dtoa_r+0x2d4>)
 800effe:	f001 fa67 	bl	80104d0 <__assert_func>
 800f002:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f006:	6005      	str	r5, [r0, #0]
 800f008:	60c5      	str	r5, [r0, #12]
 800f00a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f00c:	6819      	ldr	r1, [r3, #0]
 800f00e:	b151      	cbz	r1, 800f026 <_dtoa_r+0x5e>
 800f010:	685a      	ldr	r2, [r3, #4]
 800f012:	604a      	str	r2, [r1, #4]
 800f014:	2301      	movs	r3, #1
 800f016:	4093      	lsls	r3, r2
 800f018:	608b      	str	r3, [r1, #8]
 800f01a:	4620      	mov	r0, r4
 800f01c:	f000 fe0e 	bl	800fc3c <_Bfree>
 800f020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f022:	2200      	movs	r2, #0
 800f024:	601a      	str	r2, [r3, #0]
 800f026:	1e3b      	subs	r3, r7, #0
 800f028:	bfaa      	itet	ge
 800f02a:	2300      	movge	r3, #0
 800f02c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800f030:	f8c8 3000 	strge.w	r3, [r8]
 800f034:	4b9a      	ldr	r3, [pc, #616]	; (800f2a0 <_dtoa_r+0x2d8>)
 800f036:	bfbc      	itt	lt
 800f038:	2201      	movlt	r2, #1
 800f03a:	f8c8 2000 	strlt.w	r2, [r8]
 800f03e:	ea33 030b 	bics.w	r3, r3, fp
 800f042:	d11b      	bne.n	800f07c <_dtoa_r+0xb4>
 800f044:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f046:	f242 730f 	movw	r3, #9999	; 0x270f
 800f04a:	6013      	str	r3, [r2, #0]
 800f04c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f050:	4333      	orrs	r3, r6
 800f052:	f000 8592 	beq.w	800fb7a <_dtoa_r+0xbb2>
 800f056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f058:	b963      	cbnz	r3, 800f074 <_dtoa_r+0xac>
 800f05a:	4b92      	ldr	r3, [pc, #584]	; (800f2a4 <_dtoa_r+0x2dc>)
 800f05c:	e022      	b.n	800f0a4 <_dtoa_r+0xdc>
 800f05e:	4b92      	ldr	r3, [pc, #584]	; (800f2a8 <_dtoa_r+0x2e0>)
 800f060:	9301      	str	r3, [sp, #4]
 800f062:	3308      	adds	r3, #8
 800f064:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f066:	6013      	str	r3, [r2, #0]
 800f068:	9801      	ldr	r0, [sp, #4]
 800f06a:	b013      	add	sp, #76	; 0x4c
 800f06c:	ecbd 8b04 	vpop	{d8-d9}
 800f070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f074:	4b8b      	ldr	r3, [pc, #556]	; (800f2a4 <_dtoa_r+0x2dc>)
 800f076:	9301      	str	r3, [sp, #4]
 800f078:	3303      	adds	r3, #3
 800f07a:	e7f3      	b.n	800f064 <_dtoa_r+0x9c>
 800f07c:	2200      	movs	r2, #0
 800f07e:	2300      	movs	r3, #0
 800f080:	4650      	mov	r0, sl
 800f082:	4659      	mov	r1, fp
 800f084:	f7f1 fd40 	bl	8000b08 <__aeabi_dcmpeq>
 800f088:	ec4b ab19 	vmov	d9, sl, fp
 800f08c:	4680      	mov	r8, r0
 800f08e:	b158      	cbz	r0, 800f0a8 <_dtoa_r+0xe0>
 800f090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f092:	2301      	movs	r3, #1
 800f094:	6013      	str	r3, [r2, #0]
 800f096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f098:	2b00      	cmp	r3, #0
 800f09a:	f000 856b 	beq.w	800fb74 <_dtoa_r+0xbac>
 800f09e:	4883      	ldr	r0, [pc, #524]	; (800f2ac <_dtoa_r+0x2e4>)
 800f0a0:	6018      	str	r0, [r3, #0]
 800f0a2:	1e43      	subs	r3, r0, #1
 800f0a4:	9301      	str	r3, [sp, #4]
 800f0a6:	e7df      	b.n	800f068 <_dtoa_r+0xa0>
 800f0a8:	ec4b ab10 	vmov	d0, sl, fp
 800f0ac:	aa10      	add	r2, sp, #64	; 0x40
 800f0ae:	a911      	add	r1, sp, #68	; 0x44
 800f0b0:	4620      	mov	r0, r4
 800f0b2:	f001 f8ab 	bl	801020c <__d2b>
 800f0b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f0ba:	ee08 0a10 	vmov	s16, r0
 800f0be:	2d00      	cmp	r5, #0
 800f0c0:	f000 8084 	beq.w	800f1cc <_dtoa_r+0x204>
 800f0c4:	ee19 3a90 	vmov	r3, s19
 800f0c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f0d0:	4656      	mov	r6, sl
 800f0d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f0d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f0da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f0de:	4b74      	ldr	r3, [pc, #464]	; (800f2b0 <_dtoa_r+0x2e8>)
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	4630      	mov	r0, r6
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	f7f1 f8ef 	bl	80002c8 <__aeabi_dsub>
 800f0ea:	a365      	add	r3, pc, #404	; (adr r3, 800f280 <_dtoa_r+0x2b8>)
 800f0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f0:	f7f1 faa2 	bl	8000638 <__aeabi_dmul>
 800f0f4:	a364      	add	r3, pc, #400	; (adr r3, 800f288 <_dtoa_r+0x2c0>)
 800f0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0fa:	f7f1 f8e7 	bl	80002cc <__adddf3>
 800f0fe:	4606      	mov	r6, r0
 800f100:	4628      	mov	r0, r5
 800f102:	460f      	mov	r7, r1
 800f104:	f7f1 fa2e 	bl	8000564 <__aeabi_i2d>
 800f108:	a361      	add	r3, pc, #388	; (adr r3, 800f290 <_dtoa_r+0x2c8>)
 800f10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10e:	f7f1 fa93 	bl	8000638 <__aeabi_dmul>
 800f112:	4602      	mov	r2, r0
 800f114:	460b      	mov	r3, r1
 800f116:	4630      	mov	r0, r6
 800f118:	4639      	mov	r1, r7
 800f11a:	f7f1 f8d7 	bl	80002cc <__adddf3>
 800f11e:	4606      	mov	r6, r0
 800f120:	460f      	mov	r7, r1
 800f122:	f7f1 fd39 	bl	8000b98 <__aeabi_d2iz>
 800f126:	2200      	movs	r2, #0
 800f128:	9000      	str	r0, [sp, #0]
 800f12a:	2300      	movs	r3, #0
 800f12c:	4630      	mov	r0, r6
 800f12e:	4639      	mov	r1, r7
 800f130:	f7f1 fcf4 	bl	8000b1c <__aeabi_dcmplt>
 800f134:	b150      	cbz	r0, 800f14c <_dtoa_r+0x184>
 800f136:	9800      	ldr	r0, [sp, #0]
 800f138:	f7f1 fa14 	bl	8000564 <__aeabi_i2d>
 800f13c:	4632      	mov	r2, r6
 800f13e:	463b      	mov	r3, r7
 800f140:	f7f1 fce2 	bl	8000b08 <__aeabi_dcmpeq>
 800f144:	b910      	cbnz	r0, 800f14c <_dtoa_r+0x184>
 800f146:	9b00      	ldr	r3, [sp, #0]
 800f148:	3b01      	subs	r3, #1
 800f14a:	9300      	str	r3, [sp, #0]
 800f14c:	9b00      	ldr	r3, [sp, #0]
 800f14e:	2b16      	cmp	r3, #22
 800f150:	d85a      	bhi.n	800f208 <_dtoa_r+0x240>
 800f152:	9a00      	ldr	r2, [sp, #0]
 800f154:	4b57      	ldr	r3, [pc, #348]	; (800f2b4 <_dtoa_r+0x2ec>)
 800f156:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f15e:	ec51 0b19 	vmov	r0, r1, d9
 800f162:	f7f1 fcdb 	bl	8000b1c <__aeabi_dcmplt>
 800f166:	2800      	cmp	r0, #0
 800f168:	d050      	beq.n	800f20c <_dtoa_r+0x244>
 800f16a:	9b00      	ldr	r3, [sp, #0]
 800f16c:	3b01      	subs	r3, #1
 800f16e:	9300      	str	r3, [sp, #0]
 800f170:	2300      	movs	r3, #0
 800f172:	930b      	str	r3, [sp, #44]	; 0x2c
 800f174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f176:	1b5d      	subs	r5, r3, r5
 800f178:	1e6b      	subs	r3, r5, #1
 800f17a:	9305      	str	r3, [sp, #20]
 800f17c:	bf45      	ittet	mi
 800f17e:	f1c5 0301 	rsbmi	r3, r5, #1
 800f182:	9304      	strmi	r3, [sp, #16]
 800f184:	2300      	movpl	r3, #0
 800f186:	2300      	movmi	r3, #0
 800f188:	bf4c      	ite	mi
 800f18a:	9305      	strmi	r3, [sp, #20]
 800f18c:	9304      	strpl	r3, [sp, #16]
 800f18e:	9b00      	ldr	r3, [sp, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	db3d      	blt.n	800f210 <_dtoa_r+0x248>
 800f194:	9b05      	ldr	r3, [sp, #20]
 800f196:	9a00      	ldr	r2, [sp, #0]
 800f198:	920a      	str	r2, [sp, #40]	; 0x28
 800f19a:	4413      	add	r3, r2
 800f19c:	9305      	str	r3, [sp, #20]
 800f19e:	2300      	movs	r3, #0
 800f1a0:	9307      	str	r3, [sp, #28]
 800f1a2:	9b06      	ldr	r3, [sp, #24]
 800f1a4:	2b09      	cmp	r3, #9
 800f1a6:	f200 8089 	bhi.w	800f2bc <_dtoa_r+0x2f4>
 800f1aa:	2b05      	cmp	r3, #5
 800f1ac:	bfc4      	itt	gt
 800f1ae:	3b04      	subgt	r3, #4
 800f1b0:	9306      	strgt	r3, [sp, #24]
 800f1b2:	9b06      	ldr	r3, [sp, #24]
 800f1b4:	f1a3 0302 	sub.w	r3, r3, #2
 800f1b8:	bfcc      	ite	gt
 800f1ba:	2500      	movgt	r5, #0
 800f1bc:	2501      	movle	r5, #1
 800f1be:	2b03      	cmp	r3, #3
 800f1c0:	f200 8087 	bhi.w	800f2d2 <_dtoa_r+0x30a>
 800f1c4:	e8df f003 	tbb	[pc, r3]
 800f1c8:	59383a2d 	.word	0x59383a2d
 800f1cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f1d0:	441d      	add	r5, r3
 800f1d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f1d6:	2b20      	cmp	r3, #32
 800f1d8:	bfc1      	itttt	gt
 800f1da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f1de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f1e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800f1e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f1ea:	bfda      	itte	le
 800f1ec:	f1c3 0320 	rsble	r3, r3, #32
 800f1f0:	fa06 f003 	lslle.w	r0, r6, r3
 800f1f4:	4318      	orrgt	r0, r3
 800f1f6:	f7f1 f9a5 	bl	8000544 <__aeabi_ui2d>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	4606      	mov	r6, r0
 800f1fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f202:	3d01      	subs	r5, #1
 800f204:	930e      	str	r3, [sp, #56]	; 0x38
 800f206:	e76a      	b.n	800f0de <_dtoa_r+0x116>
 800f208:	2301      	movs	r3, #1
 800f20a:	e7b2      	b.n	800f172 <_dtoa_r+0x1aa>
 800f20c:	900b      	str	r0, [sp, #44]	; 0x2c
 800f20e:	e7b1      	b.n	800f174 <_dtoa_r+0x1ac>
 800f210:	9b04      	ldr	r3, [sp, #16]
 800f212:	9a00      	ldr	r2, [sp, #0]
 800f214:	1a9b      	subs	r3, r3, r2
 800f216:	9304      	str	r3, [sp, #16]
 800f218:	4253      	negs	r3, r2
 800f21a:	9307      	str	r3, [sp, #28]
 800f21c:	2300      	movs	r3, #0
 800f21e:	930a      	str	r3, [sp, #40]	; 0x28
 800f220:	e7bf      	b.n	800f1a2 <_dtoa_r+0x1da>
 800f222:	2300      	movs	r3, #0
 800f224:	9308      	str	r3, [sp, #32]
 800f226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f228:	2b00      	cmp	r3, #0
 800f22a:	dc55      	bgt.n	800f2d8 <_dtoa_r+0x310>
 800f22c:	2301      	movs	r3, #1
 800f22e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f232:	461a      	mov	r2, r3
 800f234:	9209      	str	r2, [sp, #36]	; 0x24
 800f236:	e00c      	b.n	800f252 <_dtoa_r+0x28a>
 800f238:	2301      	movs	r3, #1
 800f23a:	e7f3      	b.n	800f224 <_dtoa_r+0x25c>
 800f23c:	2300      	movs	r3, #0
 800f23e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f240:	9308      	str	r3, [sp, #32]
 800f242:	9b00      	ldr	r3, [sp, #0]
 800f244:	4413      	add	r3, r2
 800f246:	9302      	str	r3, [sp, #8]
 800f248:	3301      	adds	r3, #1
 800f24a:	2b01      	cmp	r3, #1
 800f24c:	9303      	str	r3, [sp, #12]
 800f24e:	bfb8      	it	lt
 800f250:	2301      	movlt	r3, #1
 800f252:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f254:	2200      	movs	r2, #0
 800f256:	6042      	str	r2, [r0, #4]
 800f258:	2204      	movs	r2, #4
 800f25a:	f102 0614 	add.w	r6, r2, #20
 800f25e:	429e      	cmp	r6, r3
 800f260:	6841      	ldr	r1, [r0, #4]
 800f262:	d93d      	bls.n	800f2e0 <_dtoa_r+0x318>
 800f264:	4620      	mov	r0, r4
 800f266:	f000 fca9 	bl	800fbbc <_Balloc>
 800f26a:	9001      	str	r0, [sp, #4]
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d13b      	bne.n	800f2e8 <_dtoa_r+0x320>
 800f270:	4b11      	ldr	r3, [pc, #68]	; (800f2b8 <_dtoa_r+0x2f0>)
 800f272:	4602      	mov	r2, r0
 800f274:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f278:	e6c0      	b.n	800effc <_dtoa_r+0x34>
 800f27a:	2301      	movs	r3, #1
 800f27c:	e7df      	b.n	800f23e <_dtoa_r+0x276>
 800f27e:	bf00      	nop
 800f280:	636f4361 	.word	0x636f4361
 800f284:	3fd287a7 	.word	0x3fd287a7
 800f288:	8b60c8b3 	.word	0x8b60c8b3
 800f28c:	3fc68a28 	.word	0x3fc68a28
 800f290:	509f79fb 	.word	0x509f79fb
 800f294:	3fd34413 	.word	0x3fd34413
 800f298:	08012601 	.word	0x08012601
 800f29c:	08012618 	.word	0x08012618
 800f2a0:	7ff00000 	.word	0x7ff00000
 800f2a4:	080125fd 	.word	0x080125fd
 800f2a8:	080125f4 	.word	0x080125f4
 800f2ac:	080125d1 	.word	0x080125d1
 800f2b0:	3ff80000 	.word	0x3ff80000
 800f2b4:	08012708 	.word	0x08012708
 800f2b8:	08012673 	.word	0x08012673
 800f2bc:	2501      	movs	r5, #1
 800f2be:	2300      	movs	r3, #0
 800f2c0:	9306      	str	r3, [sp, #24]
 800f2c2:	9508      	str	r5, [sp, #32]
 800f2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f2c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	2312      	movs	r3, #18
 800f2d0:	e7b0      	b.n	800f234 <_dtoa_r+0x26c>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	9308      	str	r3, [sp, #32]
 800f2d6:	e7f5      	b.n	800f2c4 <_dtoa_r+0x2fc>
 800f2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f2de:	e7b8      	b.n	800f252 <_dtoa_r+0x28a>
 800f2e0:	3101      	adds	r1, #1
 800f2e2:	6041      	str	r1, [r0, #4]
 800f2e4:	0052      	lsls	r2, r2, #1
 800f2e6:	e7b8      	b.n	800f25a <_dtoa_r+0x292>
 800f2e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2ea:	9a01      	ldr	r2, [sp, #4]
 800f2ec:	601a      	str	r2, [r3, #0]
 800f2ee:	9b03      	ldr	r3, [sp, #12]
 800f2f0:	2b0e      	cmp	r3, #14
 800f2f2:	f200 809d 	bhi.w	800f430 <_dtoa_r+0x468>
 800f2f6:	2d00      	cmp	r5, #0
 800f2f8:	f000 809a 	beq.w	800f430 <_dtoa_r+0x468>
 800f2fc:	9b00      	ldr	r3, [sp, #0]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	dd32      	ble.n	800f368 <_dtoa_r+0x3a0>
 800f302:	4ab7      	ldr	r2, [pc, #732]	; (800f5e0 <_dtoa_r+0x618>)
 800f304:	f003 030f 	and.w	r3, r3, #15
 800f308:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f30c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f310:	9b00      	ldr	r3, [sp, #0]
 800f312:	05d8      	lsls	r0, r3, #23
 800f314:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f318:	d516      	bpl.n	800f348 <_dtoa_r+0x380>
 800f31a:	4bb2      	ldr	r3, [pc, #712]	; (800f5e4 <_dtoa_r+0x61c>)
 800f31c:	ec51 0b19 	vmov	r0, r1, d9
 800f320:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f324:	f7f1 fab2 	bl	800088c <__aeabi_ddiv>
 800f328:	f007 070f 	and.w	r7, r7, #15
 800f32c:	4682      	mov	sl, r0
 800f32e:	468b      	mov	fp, r1
 800f330:	2503      	movs	r5, #3
 800f332:	4eac      	ldr	r6, [pc, #688]	; (800f5e4 <_dtoa_r+0x61c>)
 800f334:	b957      	cbnz	r7, 800f34c <_dtoa_r+0x384>
 800f336:	4642      	mov	r2, r8
 800f338:	464b      	mov	r3, r9
 800f33a:	4650      	mov	r0, sl
 800f33c:	4659      	mov	r1, fp
 800f33e:	f7f1 faa5 	bl	800088c <__aeabi_ddiv>
 800f342:	4682      	mov	sl, r0
 800f344:	468b      	mov	fp, r1
 800f346:	e028      	b.n	800f39a <_dtoa_r+0x3d2>
 800f348:	2502      	movs	r5, #2
 800f34a:	e7f2      	b.n	800f332 <_dtoa_r+0x36a>
 800f34c:	07f9      	lsls	r1, r7, #31
 800f34e:	d508      	bpl.n	800f362 <_dtoa_r+0x39a>
 800f350:	4640      	mov	r0, r8
 800f352:	4649      	mov	r1, r9
 800f354:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f358:	f7f1 f96e 	bl	8000638 <__aeabi_dmul>
 800f35c:	3501      	adds	r5, #1
 800f35e:	4680      	mov	r8, r0
 800f360:	4689      	mov	r9, r1
 800f362:	107f      	asrs	r7, r7, #1
 800f364:	3608      	adds	r6, #8
 800f366:	e7e5      	b.n	800f334 <_dtoa_r+0x36c>
 800f368:	f000 809b 	beq.w	800f4a2 <_dtoa_r+0x4da>
 800f36c:	9b00      	ldr	r3, [sp, #0]
 800f36e:	4f9d      	ldr	r7, [pc, #628]	; (800f5e4 <_dtoa_r+0x61c>)
 800f370:	425e      	negs	r6, r3
 800f372:	4b9b      	ldr	r3, [pc, #620]	; (800f5e0 <_dtoa_r+0x618>)
 800f374:	f006 020f 	and.w	r2, r6, #15
 800f378:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f380:	ec51 0b19 	vmov	r0, r1, d9
 800f384:	f7f1 f958 	bl	8000638 <__aeabi_dmul>
 800f388:	1136      	asrs	r6, r6, #4
 800f38a:	4682      	mov	sl, r0
 800f38c:	468b      	mov	fp, r1
 800f38e:	2300      	movs	r3, #0
 800f390:	2502      	movs	r5, #2
 800f392:	2e00      	cmp	r6, #0
 800f394:	d17a      	bne.n	800f48c <_dtoa_r+0x4c4>
 800f396:	2b00      	cmp	r3, #0
 800f398:	d1d3      	bne.n	800f342 <_dtoa_r+0x37a>
 800f39a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	f000 8082 	beq.w	800f4a6 <_dtoa_r+0x4de>
 800f3a2:	4b91      	ldr	r3, [pc, #580]	; (800f5e8 <_dtoa_r+0x620>)
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	4650      	mov	r0, sl
 800f3a8:	4659      	mov	r1, fp
 800f3aa:	f7f1 fbb7 	bl	8000b1c <__aeabi_dcmplt>
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	d079      	beq.n	800f4a6 <_dtoa_r+0x4de>
 800f3b2:	9b03      	ldr	r3, [sp, #12]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d076      	beq.n	800f4a6 <_dtoa_r+0x4de>
 800f3b8:	9b02      	ldr	r3, [sp, #8]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	dd36      	ble.n	800f42c <_dtoa_r+0x464>
 800f3be:	9b00      	ldr	r3, [sp, #0]
 800f3c0:	4650      	mov	r0, sl
 800f3c2:	4659      	mov	r1, fp
 800f3c4:	1e5f      	subs	r7, r3, #1
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	4b88      	ldr	r3, [pc, #544]	; (800f5ec <_dtoa_r+0x624>)
 800f3ca:	f7f1 f935 	bl	8000638 <__aeabi_dmul>
 800f3ce:	9e02      	ldr	r6, [sp, #8]
 800f3d0:	4682      	mov	sl, r0
 800f3d2:	468b      	mov	fp, r1
 800f3d4:	3501      	adds	r5, #1
 800f3d6:	4628      	mov	r0, r5
 800f3d8:	f7f1 f8c4 	bl	8000564 <__aeabi_i2d>
 800f3dc:	4652      	mov	r2, sl
 800f3de:	465b      	mov	r3, fp
 800f3e0:	f7f1 f92a 	bl	8000638 <__aeabi_dmul>
 800f3e4:	4b82      	ldr	r3, [pc, #520]	; (800f5f0 <_dtoa_r+0x628>)
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	f7f0 ff70 	bl	80002cc <__adddf3>
 800f3ec:	46d0      	mov	r8, sl
 800f3ee:	46d9      	mov	r9, fp
 800f3f0:	4682      	mov	sl, r0
 800f3f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f3f6:	2e00      	cmp	r6, #0
 800f3f8:	d158      	bne.n	800f4ac <_dtoa_r+0x4e4>
 800f3fa:	4b7e      	ldr	r3, [pc, #504]	; (800f5f4 <_dtoa_r+0x62c>)
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	4640      	mov	r0, r8
 800f400:	4649      	mov	r1, r9
 800f402:	f7f0 ff61 	bl	80002c8 <__aeabi_dsub>
 800f406:	4652      	mov	r2, sl
 800f408:	465b      	mov	r3, fp
 800f40a:	4680      	mov	r8, r0
 800f40c:	4689      	mov	r9, r1
 800f40e:	f7f1 fba3 	bl	8000b58 <__aeabi_dcmpgt>
 800f412:	2800      	cmp	r0, #0
 800f414:	f040 8295 	bne.w	800f942 <_dtoa_r+0x97a>
 800f418:	4652      	mov	r2, sl
 800f41a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f41e:	4640      	mov	r0, r8
 800f420:	4649      	mov	r1, r9
 800f422:	f7f1 fb7b 	bl	8000b1c <__aeabi_dcmplt>
 800f426:	2800      	cmp	r0, #0
 800f428:	f040 8289 	bne.w	800f93e <_dtoa_r+0x976>
 800f42c:	ec5b ab19 	vmov	sl, fp, d9
 800f430:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f432:	2b00      	cmp	r3, #0
 800f434:	f2c0 8148 	blt.w	800f6c8 <_dtoa_r+0x700>
 800f438:	9a00      	ldr	r2, [sp, #0]
 800f43a:	2a0e      	cmp	r2, #14
 800f43c:	f300 8144 	bgt.w	800f6c8 <_dtoa_r+0x700>
 800f440:	4b67      	ldr	r3, [pc, #412]	; (800f5e0 <_dtoa_r+0x618>)
 800f442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f446:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f44a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f280 80d5 	bge.w	800f5fc <_dtoa_r+0x634>
 800f452:	9b03      	ldr	r3, [sp, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	f300 80d1 	bgt.w	800f5fc <_dtoa_r+0x634>
 800f45a:	f040 826f 	bne.w	800f93c <_dtoa_r+0x974>
 800f45e:	4b65      	ldr	r3, [pc, #404]	; (800f5f4 <_dtoa_r+0x62c>)
 800f460:	2200      	movs	r2, #0
 800f462:	4640      	mov	r0, r8
 800f464:	4649      	mov	r1, r9
 800f466:	f7f1 f8e7 	bl	8000638 <__aeabi_dmul>
 800f46a:	4652      	mov	r2, sl
 800f46c:	465b      	mov	r3, fp
 800f46e:	f7f1 fb69 	bl	8000b44 <__aeabi_dcmpge>
 800f472:	9e03      	ldr	r6, [sp, #12]
 800f474:	4637      	mov	r7, r6
 800f476:	2800      	cmp	r0, #0
 800f478:	f040 8245 	bne.w	800f906 <_dtoa_r+0x93e>
 800f47c:	9d01      	ldr	r5, [sp, #4]
 800f47e:	2331      	movs	r3, #49	; 0x31
 800f480:	f805 3b01 	strb.w	r3, [r5], #1
 800f484:	9b00      	ldr	r3, [sp, #0]
 800f486:	3301      	adds	r3, #1
 800f488:	9300      	str	r3, [sp, #0]
 800f48a:	e240      	b.n	800f90e <_dtoa_r+0x946>
 800f48c:	07f2      	lsls	r2, r6, #31
 800f48e:	d505      	bpl.n	800f49c <_dtoa_r+0x4d4>
 800f490:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f494:	f7f1 f8d0 	bl	8000638 <__aeabi_dmul>
 800f498:	3501      	adds	r5, #1
 800f49a:	2301      	movs	r3, #1
 800f49c:	1076      	asrs	r6, r6, #1
 800f49e:	3708      	adds	r7, #8
 800f4a0:	e777      	b.n	800f392 <_dtoa_r+0x3ca>
 800f4a2:	2502      	movs	r5, #2
 800f4a4:	e779      	b.n	800f39a <_dtoa_r+0x3d2>
 800f4a6:	9f00      	ldr	r7, [sp, #0]
 800f4a8:	9e03      	ldr	r6, [sp, #12]
 800f4aa:	e794      	b.n	800f3d6 <_dtoa_r+0x40e>
 800f4ac:	9901      	ldr	r1, [sp, #4]
 800f4ae:	4b4c      	ldr	r3, [pc, #304]	; (800f5e0 <_dtoa_r+0x618>)
 800f4b0:	4431      	add	r1, r6
 800f4b2:	910d      	str	r1, [sp, #52]	; 0x34
 800f4b4:	9908      	ldr	r1, [sp, #32]
 800f4b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f4ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f4be:	2900      	cmp	r1, #0
 800f4c0:	d043      	beq.n	800f54a <_dtoa_r+0x582>
 800f4c2:	494d      	ldr	r1, [pc, #308]	; (800f5f8 <_dtoa_r+0x630>)
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	f7f1 f9e1 	bl	800088c <__aeabi_ddiv>
 800f4ca:	4652      	mov	r2, sl
 800f4cc:	465b      	mov	r3, fp
 800f4ce:	f7f0 fefb 	bl	80002c8 <__aeabi_dsub>
 800f4d2:	9d01      	ldr	r5, [sp, #4]
 800f4d4:	4682      	mov	sl, r0
 800f4d6:	468b      	mov	fp, r1
 800f4d8:	4649      	mov	r1, r9
 800f4da:	4640      	mov	r0, r8
 800f4dc:	f7f1 fb5c 	bl	8000b98 <__aeabi_d2iz>
 800f4e0:	4606      	mov	r6, r0
 800f4e2:	f7f1 f83f 	bl	8000564 <__aeabi_i2d>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	4640      	mov	r0, r8
 800f4ec:	4649      	mov	r1, r9
 800f4ee:	f7f0 feeb 	bl	80002c8 <__aeabi_dsub>
 800f4f2:	3630      	adds	r6, #48	; 0x30
 800f4f4:	f805 6b01 	strb.w	r6, [r5], #1
 800f4f8:	4652      	mov	r2, sl
 800f4fa:	465b      	mov	r3, fp
 800f4fc:	4680      	mov	r8, r0
 800f4fe:	4689      	mov	r9, r1
 800f500:	f7f1 fb0c 	bl	8000b1c <__aeabi_dcmplt>
 800f504:	2800      	cmp	r0, #0
 800f506:	d163      	bne.n	800f5d0 <_dtoa_r+0x608>
 800f508:	4642      	mov	r2, r8
 800f50a:	464b      	mov	r3, r9
 800f50c:	4936      	ldr	r1, [pc, #216]	; (800f5e8 <_dtoa_r+0x620>)
 800f50e:	2000      	movs	r0, #0
 800f510:	f7f0 feda 	bl	80002c8 <__aeabi_dsub>
 800f514:	4652      	mov	r2, sl
 800f516:	465b      	mov	r3, fp
 800f518:	f7f1 fb00 	bl	8000b1c <__aeabi_dcmplt>
 800f51c:	2800      	cmp	r0, #0
 800f51e:	f040 80b5 	bne.w	800f68c <_dtoa_r+0x6c4>
 800f522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f524:	429d      	cmp	r5, r3
 800f526:	d081      	beq.n	800f42c <_dtoa_r+0x464>
 800f528:	4b30      	ldr	r3, [pc, #192]	; (800f5ec <_dtoa_r+0x624>)
 800f52a:	2200      	movs	r2, #0
 800f52c:	4650      	mov	r0, sl
 800f52e:	4659      	mov	r1, fp
 800f530:	f7f1 f882 	bl	8000638 <__aeabi_dmul>
 800f534:	4b2d      	ldr	r3, [pc, #180]	; (800f5ec <_dtoa_r+0x624>)
 800f536:	4682      	mov	sl, r0
 800f538:	468b      	mov	fp, r1
 800f53a:	4640      	mov	r0, r8
 800f53c:	4649      	mov	r1, r9
 800f53e:	2200      	movs	r2, #0
 800f540:	f7f1 f87a 	bl	8000638 <__aeabi_dmul>
 800f544:	4680      	mov	r8, r0
 800f546:	4689      	mov	r9, r1
 800f548:	e7c6      	b.n	800f4d8 <_dtoa_r+0x510>
 800f54a:	4650      	mov	r0, sl
 800f54c:	4659      	mov	r1, fp
 800f54e:	f7f1 f873 	bl	8000638 <__aeabi_dmul>
 800f552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f554:	9d01      	ldr	r5, [sp, #4]
 800f556:	930f      	str	r3, [sp, #60]	; 0x3c
 800f558:	4682      	mov	sl, r0
 800f55a:	468b      	mov	fp, r1
 800f55c:	4649      	mov	r1, r9
 800f55e:	4640      	mov	r0, r8
 800f560:	f7f1 fb1a 	bl	8000b98 <__aeabi_d2iz>
 800f564:	4606      	mov	r6, r0
 800f566:	f7f0 fffd 	bl	8000564 <__aeabi_i2d>
 800f56a:	3630      	adds	r6, #48	; 0x30
 800f56c:	4602      	mov	r2, r0
 800f56e:	460b      	mov	r3, r1
 800f570:	4640      	mov	r0, r8
 800f572:	4649      	mov	r1, r9
 800f574:	f7f0 fea8 	bl	80002c8 <__aeabi_dsub>
 800f578:	f805 6b01 	strb.w	r6, [r5], #1
 800f57c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f57e:	429d      	cmp	r5, r3
 800f580:	4680      	mov	r8, r0
 800f582:	4689      	mov	r9, r1
 800f584:	f04f 0200 	mov.w	r2, #0
 800f588:	d124      	bne.n	800f5d4 <_dtoa_r+0x60c>
 800f58a:	4b1b      	ldr	r3, [pc, #108]	; (800f5f8 <_dtoa_r+0x630>)
 800f58c:	4650      	mov	r0, sl
 800f58e:	4659      	mov	r1, fp
 800f590:	f7f0 fe9c 	bl	80002cc <__adddf3>
 800f594:	4602      	mov	r2, r0
 800f596:	460b      	mov	r3, r1
 800f598:	4640      	mov	r0, r8
 800f59a:	4649      	mov	r1, r9
 800f59c:	f7f1 fadc 	bl	8000b58 <__aeabi_dcmpgt>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	d173      	bne.n	800f68c <_dtoa_r+0x6c4>
 800f5a4:	4652      	mov	r2, sl
 800f5a6:	465b      	mov	r3, fp
 800f5a8:	4913      	ldr	r1, [pc, #76]	; (800f5f8 <_dtoa_r+0x630>)
 800f5aa:	2000      	movs	r0, #0
 800f5ac:	f7f0 fe8c 	bl	80002c8 <__aeabi_dsub>
 800f5b0:	4602      	mov	r2, r0
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	4640      	mov	r0, r8
 800f5b6:	4649      	mov	r1, r9
 800f5b8:	f7f1 fab0 	bl	8000b1c <__aeabi_dcmplt>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	f43f af35 	beq.w	800f42c <_dtoa_r+0x464>
 800f5c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f5c4:	1e6b      	subs	r3, r5, #1
 800f5c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f5cc:	2b30      	cmp	r3, #48	; 0x30
 800f5ce:	d0f8      	beq.n	800f5c2 <_dtoa_r+0x5fa>
 800f5d0:	9700      	str	r7, [sp, #0]
 800f5d2:	e049      	b.n	800f668 <_dtoa_r+0x6a0>
 800f5d4:	4b05      	ldr	r3, [pc, #20]	; (800f5ec <_dtoa_r+0x624>)
 800f5d6:	f7f1 f82f 	bl	8000638 <__aeabi_dmul>
 800f5da:	4680      	mov	r8, r0
 800f5dc:	4689      	mov	r9, r1
 800f5de:	e7bd      	b.n	800f55c <_dtoa_r+0x594>
 800f5e0:	08012708 	.word	0x08012708
 800f5e4:	080126e0 	.word	0x080126e0
 800f5e8:	3ff00000 	.word	0x3ff00000
 800f5ec:	40240000 	.word	0x40240000
 800f5f0:	401c0000 	.word	0x401c0000
 800f5f4:	40140000 	.word	0x40140000
 800f5f8:	3fe00000 	.word	0x3fe00000
 800f5fc:	9d01      	ldr	r5, [sp, #4]
 800f5fe:	4656      	mov	r6, sl
 800f600:	465f      	mov	r7, fp
 800f602:	4642      	mov	r2, r8
 800f604:	464b      	mov	r3, r9
 800f606:	4630      	mov	r0, r6
 800f608:	4639      	mov	r1, r7
 800f60a:	f7f1 f93f 	bl	800088c <__aeabi_ddiv>
 800f60e:	f7f1 fac3 	bl	8000b98 <__aeabi_d2iz>
 800f612:	4682      	mov	sl, r0
 800f614:	f7f0 ffa6 	bl	8000564 <__aeabi_i2d>
 800f618:	4642      	mov	r2, r8
 800f61a:	464b      	mov	r3, r9
 800f61c:	f7f1 f80c 	bl	8000638 <__aeabi_dmul>
 800f620:	4602      	mov	r2, r0
 800f622:	460b      	mov	r3, r1
 800f624:	4630      	mov	r0, r6
 800f626:	4639      	mov	r1, r7
 800f628:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f62c:	f7f0 fe4c 	bl	80002c8 <__aeabi_dsub>
 800f630:	f805 6b01 	strb.w	r6, [r5], #1
 800f634:	9e01      	ldr	r6, [sp, #4]
 800f636:	9f03      	ldr	r7, [sp, #12]
 800f638:	1bae      	subs	r6, r5, r6
 800f63a:	42b7      	cmp	r7, r6
 800f63c:	4602      	mov	r2, r0
 800f63e:	460b      	mov	r3, r1
 800f640:	d135      	bne.n	800f6ae <_dtoa_r+0x6e6>
 800f642:	f7f0 fe43 	bl	80002cc <__adddf3>
 800f646:	4642      	mov	r2, r8
 800f648:	464b      	mov	r3, r9
 800f64a:	4606      	mov	r6, r0
 800f64c:	460f      	mov	r7, r1
 800f64e:	f7f1 fa83 	bl	8000b58 <__aeabi_dcmpgt>
 800f652:	b9d0      	cbnz	r0, 800f68a <_dtoa_r+0x6c2>
 800f654:	4642      	mov	r2, r8
 800f656:	464b      	mov	r3, r9
 800f658:	4630      	mov	r0, r6
 800f65a:	4639      	mov	r1, r7
 800f65c:	f7f1 fa54 	bl	8000b08 <__aeabi_dcmpeq>
 800f660:	b110      	cbz	r0, 800f668 <_dtoa_r+0x6a0>
 800f662:	f01a 0f01 	tst.w	sl, #1
 800f666:	d110      	bne.n	800f68a <_dtoa_r+0x6c2>
 800f668:	4620      	mov	r0, r4
 800f66a:	ee18 1a10 	vmov	r1, s16
 800f66e:	f000 fae5 	bl	800fc3c <_Bfree>
 800f672:	2300      	movs	r3, #0
 800f674:	9800      	ldr	r0, [sp, #0]
 800f676:	702b      	strb	r3, [r5, #0]
 800f678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f67a:	3001      	adds	r0, #1
 800f67c:	6018      	str	r0, [r3, #0]
 800f67e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f680:	2b00      	cmp	r3, #0
 800f682:	f43f acf1 	beq.w	800f068 <_dtoa_r+0xa0>
 800f686:	601d      	str	r5, [r3, #0]
 800f688:	e4ee      	b.n	800f068 <_dtoa_r+0xa0>
 800f68a:	9f00      	ldr	r7, [sp, #0]
 800f68c:	462b      	mov	r3, r5
 800f68e:	461d      	mov	r5, r3
 800f690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f694:	2a39      	cmp	r2, #57	; 0x39
 800f696:	d106      	bne.n	800f6a6 <_dtoa_r+0x6de>
 800f698:	9a01      	ldr	r2, [sp, #4]
 800f69a:	429a      	cmp	r2, r3
 800f69c:	d1f7      	bne.n	800f68e <_dtoa_r+0x6c6>
 800f69e:	9901      	ldr	r1, [sp, #4]
 800f6a0:	2230      	movs	r2, #48	; 0x30
 800f6a2:	3701      	adds	r7, #1
 800f6a4:	700a      	strb	r2, [r1, #0]
 800f6a6:	781a      	ldrb	r2, [r3, #0]
 800f6a8:	3201      	adds	r2, #1
 800f6aa:	701a      	strb	r2, [r3, #0]
 800f6ac:	e790      	b.n	800f5d0 <_dtoa_r+0x608>
 800f6ae:	4ba6      	ldr	r3, [pc, #664]	; (800f948 <_dtoa_r+0x980>)
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f7f0 ffc1 	bl	8000638 <__aeabi_dmul>
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	4606      	mov	r6, r0
 800f6bc:	460f      	mov	r7, r1
 800f6be:	f7f1 fa23 	bl	8000b08 <__aeabi_dcmpeq>
 800f6c2:	2800      	cmp	r0, #0
 800f6c4:	d09d      	beq.n	800f602 <_dtoa_r+0x63a>
 800f6c6:	e7cf      	b.n	800f668 <_dtoa_r+0x6a0>
 800f6c8:	9a08      	ldr	r2, [sp, #32]
 800f6ca:	2a00      	cmp	r2, #0
 800f6cc:	f000 80d7 	beq.w	800f87e <_dtoa_r+0x8b6>
 800f6d0:	9a06      	ldr	r2, [sp, #24]
 800f6d2:	2a01      	cmp	r2, #1
 800f6d4:	f300 80ba 	bgt.w	800f84c <_dtoa_r+0x884>
 800f6d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6da:	2a00      	cmp	r2, #0
 800f6dc:	f000 80b2 	beq.w	800f844 <_dtoa_r+0x87c>
 800f6e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f6e4:	9e07      	ldr	r6, [sp, #28]
 800f6e6:	9d04      	ldr	r5, [sp, #16]
 800f6e8:	9a04      	ldr	r2, [sp, #16]
 800f6ea:	441a      	add	r2, r3
 800f6ec:	9204      	str	r2, [sp, #16]
 800f6ee:	9a05      	ldr	r2, [sp, #20]
 800f6f0:	2101      	movs	r1, #1
 800f6f2:	441a      	add	r2, r3
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	9205      	str	r2, [sp, #20]
 800f6f8:	f000 fb58 	bl	800fdac <__i2b>
 800f6fc:	4607      	mov	r7, r0
 800f6fe:	2d00      	cmp	r5, #0
 800f700:	dd0c      	ble.n	800f71c <_dtoa_r+0x754>
 800f702:	9b05      	ldr	r3, [sp, #20]
 800f704:	2b00      	cmp	r3, #0
 800f706:	dd09      	ble.n	800f71c <_dtoa_r+0x754>
 800f708:	42ab      	cmp	r3, r5
 800f70a:	9a04      	ldr	r2, [sp, #16]
 800f70c:	bfa8      	it	ge
 800f70e:	462b      	movge	r3, r5
 800f710:	1ad2      	subs	r2, r2, r3
 800f712:	9204      	str	r2, [sp, #16]
 800f714:	9a05      	ldr	r2, [sp, #20]
 800f716:	1aed      	subs	r5, r5, r3
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	9305      	str	r3, [sp, #20]
 800f71c:	9b07      	ldr	r3, [sp, #28]
 800f71e:	b31b      	cbz	r3, 800f768 <_dtoa_r+0x7a0>
 800f720:	9b08      	ldr	r3, [sp, #32]
 800f722:	2b00      	cmp	r3, #0
 800f724:	f000 80af 	beq.w	800f886 <_dtoa_r+0x8be>
 800f728:	2e00      	cmp	r6, #0
 800f72a:	dd13      	ble.n	800f754 <_dtoa_r+0x78c>
 800f72c:	4639      	mov	r1, r7
 800f72e:	4632      	mov	r2, r6
 800f730:	4620      	mov	r0, r4
 800f732:	f000 fbfb 	bl	800ff2c <__pow5mult>
 800f736:	ee18 2a10 	vmov	r2, s16
 800f73a:	4601      	mov	r1, r0
 800f73c:	4607      	mov	r7, r0
 800f73e:	4620      	mov	r0, r4
 800f740:	f000 fb4a 	bl	800fdd8 <__multiply>
 800f744:	ee18 1a10 	vmov	r1, s16
 800f748:	4680      	mov	r8, r0
 800f74a:	4620      	mov	r0, r4
 800f74c:	f000 fa76 	bl	800fc3c <_Bfree>
 800f750:	ee08 8a10 	vmov	s16, r8
 800f754:	9b07      	ldr	r3, [sp, #28]
 800f756:	1b9a      	subs	r2, r3, r6
 800f758:	d006      	beq.n	800f768 <_dtoa_r+0x7a0>
 800f75a:	ee18 1a10 	vmov	r1, s16
 800f75e:	4620      	mov	r0, r4
 800f760:	f000 fbe4 	bl	800ff2c <__pow5mult>
 800f764:	ee08 0a10 	vmov	s16, r0
 800f768:	2101      	movs	r1, #1
 800f76a:	4620      	mov	r0, r4
 800f76c:	f000 fb1e 	bl	800fdac <__i2b>
 800f770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f772:	2b00      	cmp	r3, #0
 800f774:	4606      	mov	r6, r0
 800f776:	f340 8088 	ble.w	800f88a <_dtoa_r+0x8c2>
 800f77a:	461a      	mov	r2, r3
 800f77c:	4601      	mov	r1, r0
 800f77e:	4620      	mov	r0, r4
 800f780:	f000 fbd4 	bl	800ff2c <__pow5mult>
 800f784:	9b06      	ldr	r3, [sp, #24]
 800f786:	2b01      	cmp	r3, #1
 800f788:	4606      	mov	r6, r0
 800f78a:	f340 8081 	ble.w	800f890 <_dtoa_r+0x8c8>
 800f78e:	f04f 0800 	mov.w	r8, #0
 800f792:	6933      	ldr	r3, [r6, #16]
 800f794:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f798:	6918      	ldr	r0, [r3, #16]
 800f79a:	f000 fab7 	bl	800fd0c <__hi0bits>
 800f79e:	f1c0 0020 	rsb	r0, r0, #32
 800f7a2:	9b05      	ldr	r3, [sp, #20]
 800f7a4:	4418      	add	r0, r3
 800f7a6:	f010 001f 	ands.w	r0, r0, #31
 800f7aa:	f000 8092 	beq.w	800f8d2 <_dtoa_r+0x90a>
 800f7ae:	f1c0 0320 	rsb	r3, r0, #32
 800f7b2:	2b04      	cmp	r3, #4
 800f7b4:	f340 808a 	ble.w	800f8cc <_dtoa_r+0x904>
 800f7b8:	f1c0 001c 	rsb	r0, r0, #28
 800f7bc:	9b04      	ldr	r3, [sp, #16]
 800f7be:	4403      	add	r3, r0
 800f7c0:	9304      	str	r3, [sp, #16]
 800f7c2:	9b05      	ldr	r3, [sp, #20]
 800f7c4:	4403      	add	r3, r0
 800f7c6:	4405      	add	r5, r0
 800f7c8:	9305      	str	r3, [sp, #20]
 800f7ca:	9b04      	ldr	r3, [sp, #16]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	dd07      	ble.n	800f7e0 <_dtoa_r+0x818>
 800f7d0:	ee18 1a10 	vmov	r1, s16
 800f7d4:	461a      	mov	r2, r3
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	f000 fc02 	bl	800ffe0 <__lshift>
 800f7dc:	ee08 0a10 	vmov	s16, r0
 800f7e0:	9b05      	ldr	r3, [sp, #20]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	dd05      	ble.n	800f7f2 <_dtoa_r+0x82a>
 800f7e6:	4631      	mov	r1, r6
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	f000 fbf8 	bl	800ffe0 <__lshift>
 800f7f0:	4606      	mov	r6, r0
 800f7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d06e      	beq.n	800f8d6 <_dtoa_r+0x90e>
 800f7f8:	ee18 0a10 	vmov	r0, s16
 800f7fc:	4631      	mov	r1, r6
 800f7fe:	f000 fc5f 	bl	80100c0 <__mcmp>
 800f802:	2800      	cmp	r0, #0
 800f804:	da67      	bge.n	800f8d6 <_dtoa_r+0x90e>
 800f806:	9b00      	ldr	r3, [sp, #0]
 800f808:	3b01      	subs	r3, #1
 800f80a:	ee18 1a10 	vmov	r1, s16
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	220a      	movs	r2, #10
 800f812:	2300      	movs	r3, #0
 800f814:	4620      	mov	r0, r4
 800f816:	f000 fa33 	bl	800fc80 <__multadd>
 800f81a:	9b08      	ldr	r3, [sp, #32]
 800f81c:	ee08 0a10 	vmov	s16, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	f000 81b1 	beq.w	800fb88 <_dtoa_r+0xbc0>
 800f826:	2300      	movs	r3, #0
 800f828:	4639      	mov	r1, r7
 800f82a:	220a      	movs	r2, #10
 800f82c:	4620      	mov	r0, r4
 800f82e:	f000 fa27 	bl	800fc80 <__multadd>
 800f832:	9b02      	ldr	r3, [sp, #8]
 800f834:	2b00      	cmp	r3, #0
 800f836:	4607      	mov	r7, r0
 800f838:	f300 808e 	bgt.w	800f958 <_dtoa_r+0x990>
 800f83c:	9b06      	ldr	r3, [sp, #24]
 800f83e:	2b02      	cmp	r3, #2
 800f840:	dc51      	bgt.n	800f8e6 <_dtoa_r+0x91e>
 800f842:	e089      	b.n	800f958 <_dtoa_r+0x990>
 800f844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f84a:	e74b      	b.n	800f6e4 <_dtoa_r+0x71c>
 800f84c:	9b03      	ldr	r3, [sp, #12]
 800f84e:	1e5e      	subs	r6, r3, #1
 800f850:	9b07      	ldr	r3, [sp, #28]
 800f852:	42b3      	cmp	r3, r6
 800f854:	bfbf      	itttt	lt
 800f856:	9b07      	ldrlt	r3, [sp, #28]
 800f858:	9607      	strlt	r6, [sp, #28]
 800f85a:	1af2      	sublt	r2, r6, r3
 800f85c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f85e:	bfb6      	itet	lt
 800f860:	189b      	addlt	r3, r3, r2
 800f862:	1b9e      	subge	r6, r3, r6
 800f864:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f866:	9b03      	ldr	r3, [sp, #12]
 800f868:	bfb8      	it	lt
 800f86a:	2600      	movlt	r6, #0
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	bfb7      	itett	lt
 800f870:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f874:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f878:	1a9d      	sublt	r5, r3, r2
 800f87a:	2300      	movlt	r3, #0
 800f87c:	e734      	b.n	800f6e8 <_dtoa_r+0x720>
 800f87e:	9e07      	ldr	r6, [sp, #28]
 800f880:	9d04      	ldr	r5, [sp, #16]
 800f882:	9f08      	ldr	r7, [sp, #32]
 800f884:	e73b      	b.n	800f6fe <_dtoa_r+0x736>
 800f886:	9a07      	ldr	r2, [sp, #28]
 800f888:	e767      	b.n	800f75a <_dtoa_r+0x792>
 800f88a:	9b06      	ldr	r3, [sp, #24]
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	dc18      	bgt.n	800f8c2 <_dtoa_r+0x8fa>
 800f890:	f1ba 0f00 	cmp.w	sl, #0
 800f894:	d115      	bne.n	800f8c2 <_dtoa_r+0x8fa>
 800f896:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f89a:	b993      	cbnz	r3, 800f8c2 <_dtoa_r+0x8fa>
 800f89c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f8a0:	0d1b      	lsrs	r3, r3, #20
 800f8a2:	051b      	lsls	r3, r3, #20
 800f8a4:	b183      	cbz	r3, 800f8c8 <_dtoa_r+0x900>
 800f8a6:	9b04      	ldr	r3, [sp, #16]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	9304      	str	r3, [sp, #16]
 800f8ac:	9b05      	ldr	r3, [sp, #20]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	9305      	str	r3, [sp, #20]
 800f8b2:	f04f 0801 	mov.w	r8, #1
 800f8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	f47f af6a 	bne.w	800f792 <_dtoa_r+0x7ca>
 800f8be:	2001      	movs	r0, #1
 800f8c0:	e76f      	b.n	800f7a2 <_dtoa_r+0x7da>
 800f8c2:	f04f 0800 	mov.w	r8, #0
 800f8c6:	e7f6      	b.n	800f8b6 <_dtoa_r+0x8ee>
 800f8c8:	4698      	mov	r8, r3
 800f8ca:	e7f4      	b.n	800f8b6 <_dtoa_r+0x8ee>
 800f8cc:	f43f af7d 	beq.w	800f7ca <_dtoa_r+0x802>
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	301c      	adds	r0, #28
 800f8d4:	e772      	b.n	800f7bc <_dtoa_r+0x7f4>
 800f8d6:	9b03      	ldr	r3, [sp, #12]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	dc37      	bgt.n	800f94c <_dtoa_r+0x984>
 800f8dc:	9b06      	ldr	r3, [sp, #24]
 800f8de:	2b02      	cmp	r3, #2
 800f8e0:	dd34      	ble.n	800f94c <_dtoa_r+0x984>
 800f8e2:	9b03      	ldr	r3, [sp, #12]
 800f8e4:	9302      	str	r3, [sp, #8]
 800f8e6:	9b02      	ldr	r3, [sp, #8]
 800f8e8:	b96b      	cbnz	r3, 800f906 <_dtoa_r+0x93e>
 800f8ea:	4631      	mov	r1, r6
 800f8ec:	2205      	movs	r2, #5
 800f8ee:	4620      	mov	r0, r4
 800f8f0:	f000 f9c6 	bl	800fc80 <__multadd>
 800f8f4:	4601      	mov	r1, r0
 800f8f6:	4606      	mov	r6, r0
 800f8f8:	ee18 0a10 	vmov	r0, s16
 800f8fc:	f000 fbe0 	bl	80100c0 <__mcmp>
 800f900:	2800      	cmp	r0, #0
 800f902:	f73f adbb 	bgt.w	800f47c <_dtoa_r+0x4b4>
 800f906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f908:	9d01      	ldr	r5, [sp, #4]
 800f90a:	43db      	mvns	r3, r3
 800f90c:	9300      	str	r3, [sp, #0]
 800f90e:	f04f 0800 	mov.w	r8, #0
 800f912:	4631      	mov	r1, r6
 800f914:	4620      	mov	r0, r4
 800f916:	f000 f991 	bl	800fc3c <_Bfree>
 800f91a:	2f00      	cmp	r7, #0
 800f91c:	f43f aea4 	beq.w	800f668 <_dtoa_r+0x6a0>
 800f920:	f1b8 0f00 	cmp.w	r8, #0
 800f924:	d005      	beq.n	800f932 <_dtoa_r+0x96a>
 800f926:	45b8      	cmp	r8, r7
 800f928:	d003      	beq.n	800f932 <_dtoa_r+0x96a>
 800f92a:	4641      	mov	r1, r8
 800f92c:	4620      	mov	r0, r4
 800f92e:	f000 f985 	bl	800fc3c <_Bfree>
 800f932:	4639      	mov	r1, r7
 800f934:	4620      	mov	r0, r4
 800f936:	f000 f981 	bl	800fc3c <_Bfree>
 800f93a:	e695      	b.n	800f668 <_dtoa_r+0x6a0>
 800f93c:	2600      	movs	r6, #0
 800f93e:	4637      	mov	r7, r6
 800f940:	e7e1      	b.n	800f906 <_dtoa_r+0x93e>
 800f942:	9700      	str	r7, [sp, #0]
 800f944:	4637      	mov	r7, r6
 800f946:	e599      	b.n	800f47c <_dtoa_r+0x4b4>
 800f948:	40240000 	.word	0x40240000
 800f94c:	9b08      	ldr	r3, [sp, #32]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f000 80ca 	beq.w	800fae8 <_dtoa_r+0xb20>
 800f954:	9b03      	ldr	r3, [sp, #12]
 800f956:	9302      	str	r3, [sp, #8]
 800f958:	2d00      	cmp	r5, #0
 800f95a:	dd05      	ble.n	800f968 <_dtoa_r+0x9a0>
 800f95c:	4639      	mov	r1, r7
 800f95e:	462a      	mov	r2, r5
 800f960:	4620      	mov	r0, r4
 800f962:	f000 fb3d 	bl	800ffe0 <__lshift>
 800f966:	4607      	mov	r7, r0
 800f968:	f1b8 0f00 	cmp.w	r8, #0
 800f96c:	d05b      	beq.n	800fa26 <_dtoa_r+0xa5e>
 800f96e:	6879      	ldr	r1, [r7, #4]
 800f970:	4620      	mov	r0, r4
 800f972:	f000 f923 	bl	800fbbc <_Balloc>
 800f976:	4605      	mov	r5, r0
 800f978:	b928      	cbnz	r0, 800f986 <_dtoa_r+0x9be>
 800f97a:	4b87      	ldr	r3, [pc, #540]	; (800fb98 <_dtoa_r+0xbd0>)
 800f97c:	4602      	mov	r2, r0
 800f97e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f982:	f7ff bb3b 	b.w	800effc <_dtoa_r+0x34>
 800f986:	693a      	ldr	r2, [r7, #16]
 800f988:	3202      	adds	r2, #2
 800f98a:	0092      	lsls	r2, r2, #2
 800f98c:	f107 010c 	add.w	r1, r7, #12
 800f990:	300c      	adds	r0, #12
 800f992:	f7fe fdfb 	bl	800e58c <memcpy>
 800f996:	2201      	movs	r2, #1
 800f998:	4629      	mov	r1, r5
 800f99a:	4620      	mov	r0, r4
 800f99c:	f000 fb20 	bl	800ffe0 <__lshift>
 800f9a0:	9b01      	ldr	r3, [sp, #4]
 800f9a2:	f103 0901 	add.w	r9, r3, #1
 800f9a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f9aa:	4413      	add	r3, r2
 800f9ac:	9305      	str	r3, [sp, #20]
 800f9ae:	f00a 0301 	and.w	r3, sl, #1
 800f9b2:	46b8      	mov	r8, r7
 800f9b4:	9304      	str	r3, [sp, #16]
 800f9b6:	4607      	mov	r7, r0
 800f9b8:	4631      	mov	r1, r6
 800f9ba:	ee18 0a10 	vmov	r0, s16
 800f9be:	f7ff fa78 	bl	800eeb2 <quorem>
 800f9c2:	4641      	mov	r1, r8
 800f9c4:	9002      	str	r0, [sp, #8]
 800f9c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f9ca:	ee18 0a10 	vmov	r0, s16
 800f9ce:	f000 fb77 	bl	80100c0 <__mcmp>
 800f9d2:	463a      	mov	r2, r7
 800f9d4:	9003      	str	r0, [sp, #12]
 800f9d6:	4631      	mov	r1, r6
 800f9d8:	4620      	mov	r0, r4
 800f9da:	f000 fb8d 	bl	80100f8 <__mdiff>
 800f9de:	68c2      	ldr	r2, [r0, #12]
 800f9e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800f9e4:	4605      	mov	r5, r0
 800f9e6:	bb02      	cbnz	r2, 800fa2a <_dtoa_r+0xa62>
 800f9e8:	4601      	mov	r1, r0
 800f9ea:	ee18 0a10 	vmov	r0, s16
 800f9ee:	f000 fb67 	bl	80100c0 <__mcmp>
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	4629      	mov	r1, r5
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	9207      	str	r2, [sp, #28]
 800f9fa:	f000 f91f 	bl	800fc3c <_Bfree>
 800f9fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800fa02:	ea43 0102 	orr.w	r1, r3, r2
 800fa06:	9b04      	ldr	r3, [sp, #16]
 800fa08:	430b      	orrs	r3, r1
 800fa0a:	464d      	mov	r5, r9
 800fa0c:	d10f      	bne.n	800fa2e <_dtoa_r+0xa66>
 800fa0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fa12:	d02a      	beq.n	800fa6a <_dtoa_r+0xaa2>
 800fa14:	9b03      	ldr	r3, [sp, #12]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	dd02      	ble.n	800fa20 <_dtoa_r+0xa58>
 800fa1a:	9b02      	ldr	r3, [sp, #8]
 800fa1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800fa20:	f88b a000 	strb.w	sl, [fp]
 800fa24:	e775      	b.n	800f912 <_dtoa_r+0x94a>
 800fa26:	4638      	mov	r0, r7
 800fa28:	e7ba      	b.n	800f9a0 <_dtoa_r+0x9d8>
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	e7e2      	b.n	800f9f4 <_dtoa_r+0xa2c>
 800fa2e:	9b03      	ldr	r3, [sp, #12]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	db04      	blt.n	800fa3e <_dtoa_r+0xa76>
 800fa34:	9906      	ldr	r1, [sp, #24]
 800fa36:	430b      	orrs	r3, r1
 800fa38:	9904      	ldr	r1, [sp, #16]
 800fa3a:	430b      	orrs	r3, r1
 800fa3c:	d122      	bne.n	800fa84 <_dtoa_r+0xabc>
 800fa3e:	2a00      	cmp	r2, #0
 800fa40:	ddee      	ble.n	800fa20 <_dtoa_r+0xa58>
 800fa42:	ee18 1a10 	vmov	r1, s16
 800fa46:	2201      	movs	r2, #1
 800fa48:	4620      	mov	r0, r4
 800fa4a:	f000 fac9 	bl	800ffe0 <__lshift>
 800fa4e:	4631      	mov	r1, r6
 800fa50:	ee08 0a10 	vmov	s16, r0
 800fa54:	f000 fb34 	bl	80100c0 <__mcmp>
 800fa58:	2800      	cmp	r0, #0
 800fa5a:	dc03      	bgt.n	800fa64 <_dtoa_r+0xa9c>
 800fa5c:	d1e0      	bne.n	800fa20 <_dtoa_r+0xa58>
 800fa5e:	f01a 0f01 	tst.w	sl, #1
 800fa62:	d0dd      	beq.n	800fa20 <_dtoa_r+0xa58>
 800fa64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fa68:	d1d7      	bne.n	800fa1a <_dtoa_r+0xa52>
 800fa6a:	2339      	movs	r3, #57	; 0x39
 800fa6c:	f88b 3000 	strb.w	r3, [fp]
 800fa70:	462b      	mov	r3, r5
 800fa72:	461d      	mov	r5, r3
 800fa74:	3b01      	subs	r3, #1
 800fa76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fa7a:	2a39      	cmp	r2, #57	; 0x39
 800fa7c:	d071      	beq.n	800fb62 <_dtoa_r+0xb9a>
 800fa7e:	3201      	adds	r2, #1
 800fa80:	701a      	strb	r2, [r3, #0]
 800fa82:	e746      	b.n	800f912 <_dtoa_r+0x94a>
 800fa84:	2a00      	cmp	r2, #0
 800fa86:	dd07      	ble.n	800fa98 <_dtoa_r+0xad0>
 800fa88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fa8c:	d0ed      	beq.n	800fa6a <_dtoa_r+0xaa2>
 800fa8e:	f10a 0301 	add.w	r3, sl, #1
 800fa92:	f88b 3000 	strb.w	r3, [fp]
 800fa96:	e73c      	b.n	800f912 <_dtoa_r+0x94a>
 800fa98:	9b05      	ldr	r3, [sp, #20]
 800fa9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fa9e:	4599      	cmp	r9, r3
 800faa0:	d047      	beq.n	800fb32 <_dtoa_r+0xb6a>
 800faa2:	ee18 1a10 	vmov	r1, s16
 800faa6:	2300      	movs	r3, #0
 800faa8:	220a      	movs	r2, #10
 800faaa:	4620      	mov	r0, r4
 800faac:	f000 f8e8 	bl	800fc80 <__multadd>
 800fab0:	45b8      	cmp	r8, r7
 800fab2:	ee08 0a10 	vmov	s16, r0
 800fab6:	f04f 0300 	mov.w	r3, #0
 800faba:	f04f 020a 	mov.w	r2, #10
 800fabe:	4641      	mov	r1, r8
 800fac0:	4620      	mov	r0, r4
 800fac2:	d106      	bne.n	800fad2 <_dtoa_r+0xb0a>
 800fac4:	f000 f8dc 	bl	800fc80 <__multadd>
 800fac8:	4680      	mov	r8, r0
 800faca:	4607      	mov	r7, r0
 800facc:	f109 0901 	add.w	r9, r9, #1
 800fad0:	e772      	b.n	800f9b8 <_dtoa_r+0x9f0>
 800fad2:	f000 f8d5 	bl	800fc80 <__multadd>
 800fad6:	4639      	mov	r1, r7
 800fad8:	4680      	mov	r8, r0
 800fada:	2300      	movs	r3, #0
 800fadc:	220a      	movs	r2, #10
 800fade:	4620      	mov	r0, r4
 800fae0:	f000 f8ce 	bl	800fc80 <__multadd>
 800fae4:	4607      	mov	r7, r0
 800fae6:	e7f1      	b.n	800facc <_dtoa_r+0xb04>
 800fae8:	9b03      	ldr	r3, [sp, #12]
 800faea:	9302      	str	r3, [sp, #8]
 800faec:	9d01      	ldr	r5, [sp, #4]
 800faee:	ee18 0a10 	vmov	r0, s16
 800faf2:	4631      	mov	r1, r6
 800faf4:	f7ff f9dd 	bl	800eeb2 <quorem>
 800faf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fafc:	9b01      	ldr	r3, [sp, #4]
 800fafe:	f805 ab01 	strb.w	sl, [r5], #1
 800fb02:	1aea      	subs	r2, r5, r3
 800fb04:	9b02      	ldr	r3, [sp, #8]
 800fb06:	4293      	cmp	r3, r2
 800fb08:	dd09      	ble.n	800fb1e <_dtoa_r+0xb56>
 800fb0a:	ee18 1a10 	vmov	r1, s16
 800fb0e:	2300      	movs	r3, #0
 800fb10:	220a      	movs	r2, #10
 800fb12:	4620      	mov	r0, r4
 800fb14:	f000 f8b4 	bl	800fc80 <__multadd>
 800fb18:	ee08 0a10 	vmov	s16, r0
 800fb1c:	e7e7      	b.n	800faee <_dtoa_r+0xb26>
 800fb1e:	9b02      	ldr	r3, [sp, #8]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	bfc8      	it	gt
 800fb24:	461d      	movgt	r5, r3
 800fb26:	9b01      	ldr	r3, [sp, #4]
 800fb28:	bfd8      	it	le
 800fb2a:	2501      	movle	r5, #1
 800fb2c:	441d      	add	r5, r3
 800fb2e:	f04f 0800 	mov.w	r8, #0
 800fb32:	ee18 1a10 	vmov	r1, s16
 800fb36:	2201      	movs	r2, #1
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f000 fa51 	bl	800ffe0 <__lshift>
 800fb3e:	4631      	mov	r1, r6
 800fb40:	ee08 0a10 	vmov	s16, r0
 800fb44:	f000 fabc 	bl	80100c0 <__mcmp>
 800fb48:	2800      	cmp	r0, #0
 800fb4a:	dc91      	bgt.n	800fa70 <_dtoa_r+0xaa8>
 800fb4c:	d102      	bne.n	800fb54 <_dtoa_r+0xb8c>
 800fb4e:	f01a 0f01 	tst.w	sl, #1
 800fb52:	d18d      	bne.n	800fa70 <_dtoa_r+0xaa8>
 800fb54:	462b      	mov	r3, r5
 800fb56:	461d      	mov	r5, r3
 800fb58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb5c:	2a30      	cmp	r2, #48	; 0x30
 800fb5e:	d0fa      	beq.n	800fb56 <_dtoa_r+0xb8e>
 800fb60:	e6d7      	b.n	800f912 <_dtoa_r+0x94a>
 800fb62:	9a01      	ldr	r2, [sp, #4]
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d184      	bne.n	800fa72 <_dtoa_r+0xaaa>
 800fb68:	9b00      	ldr	r3, [sp, #0]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	9300      	str	r3, [sp, #0]
 800fb6e:	2331      	movs	r3, #49	; 0x31
 800fb70:	7013      	strb	r3, [r2, #0]
 800fb72:	e6ce      	b.n	800f912 <_dtoa_r+0x94a>
 800fb74:	4b09      	ldr	r3, [pc, #36]	; (800fb9c <_dtoa_r+0xbd4>)
 800fb76:	f7ff ba95 	b.w	800f0a4 <_dtoa_r+0xdc>
 800fb7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	f47f aa6e 	bne.w	800f05e <_dtoa_r+0x96>
 800fb82:	4b07      	ldr	r3, [pc, #28]	; (800fba0 <_dtoa_r+0xbd8>)
 800fb84:	f7ff ba8e 	b.w	800f0a4 <_dtoa_r+0xdc>
 800fb88:	9b02      	ldr	r3, [sp, #8]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	dcae      	bgt.n	800faec <_dtoa_r+0xb24>
 800fb8e:	9b06      	ldr	r3, [sp, #24]
 800fb90:	2b02      	cmp	r3, #2
 800fb92:	f73f aea8 	bgt.w	800f8e6 <_dtoa_r+0x91e>
 800fb96:	e7a9      	b.n	800faec <_dtoa_r+0xb24>
 800fb98:	08012673 	.word	0x08012673
 800fb9c:	080125d0 	.word	0x080125d0
 800fba0:	080125f4 	.word	0x080125f4

0800fba4 <_localeconv_r>:
 800fba4:	4800      	ldr	r0, [pc, #0]	; (800fba8 <_localeconv_r+0x4>)
 800fba6:	4770      	bx	lr
 800fba8:	20000198 	.word	0x20000198

0800fbac <malloc>:
 800fbac:	4b02      	ldr	r3, [pc, #8]	; (800fbb8 <malloc+0xc>)
 800fbae:	4601      	mov	r1, r0
 800fbb0:	6818      	ldr	r0, [r3, #0]
 800fbb2:	f000 bc09 	b.w	80103c8 <_malloc_r>
 800fbb6:	bf00      	nop
 800fbb8:	20000044 	.word	0x20000044

0800fbbc <_Balloc>:
 800fbbc:	b570      	push	{r4, r5, r6, lr}
 800fbbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fbc0:	4604      	mov	r4, r0
 800fbc2:	460d      	mov	r5, r1
 800fbc4:	b976      	cbnz	r6, 800fbe4 <_Balloc+0x28>
 800fbc6:	2010      	movs	r0, #16
 800fbc8:	f7ff fff0 	bl	800fbac <malloc>
 800fbcc:	4602      	mov	r2, r0
 800fbce:	6260      	str	r0, [r4, #36]	; 0x24
 800fbd0:	b920      	cbnz	r0, 800fbdc <_Balloc+0x20>
 800fbd2:	4b18      	ldr	r3, [pc, #96]	; (800fc34 <_Balloc+0x78>)
 800fbd4:	4818      	ldr	r0, [pc, #96]	; (800fc38 <_Balloc+0x7c>)
 800fbd6:	2166      	movs	r1, #102	; 0x66
 800fbd8:	f000 fc7a 	bl	80104d0 <__assert_func>
 800fbdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbe0:	6006      	str	r6, [r0, #0]
 800fbe2:	60c6      	str	r6, [r0, #12]
 800fbe4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fbe6:	68f3      	ldr	r3, [r6, #12]
 800fbe8:	b183      	cbz	r3, 800fc0c <_Balloc+0x50>
 800fbea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fbf2:	b9b8      	cbnz	r0, 800fc24 <_Balloc+0x68>
 800fbf4:	2101      	movs	r1, #1
 800fbf6:	fa01 f605 	lsl.w	r6, r1, r5
 800fbfa:	1d72      	adds	r2, r6, #5
 800fbfc:	0092      	lsls	r2, r2, #2
 800fbfe:	4620      	mov	r0, r4
 800fc00:	f000 fb60 	bl	80102c4 <_calloc_r>
 800fc04:	b160      	cbz	r0, 800fc20 <_Balloc+0x64>
 800fc06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fc0a:	e00e      	b.n	800fc2a <_Balloc+0x6e>
 800fc0c:	2221      	movs	r2, #33	; 0x21
 800fc0e:	2104      	movs	r1, #4
 800fc10:	4620      	mov	r0, r4
 800fc12:	f000 fb57 	bl	80102c4 <_calloc_r>
 800fc16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc18:	60f0      	str	r0, [r6, #12]
 800fc1a:	68db      	ldr	r3, [r3, #12]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d1e4      	bne.n	800fbea <_Balloc+0x2e>
 800fc20:	2000      	movs	r0, #0
 800fc22:	bd70      	pop	{r4, r5, r6, pc}
 800fc24:	6802      	ldr	r2, [r0, #0]
 800fc26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc30:	e7f7      	b.n	800fc22 <_Balloc+0x66>
 800fc32:	bf00      	nop
 800fc34:	08012601 	.word	0x08012601
 800fc38:	08012684 	.word	0x08012684

0800fc3c <_Bfree>:
 800fc3c:	b570      	push	{r4, r5, r6, lr}
 800fc3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc40:	4605      	mov	r5, r0
 800fc42:	460c      	mov	r4, r1
 800fc44:	b976      	cbnz	r6, 800fc64 <_Bfree+0x28>
 800fc46:	2010      	movs	r0, #16
 800fc48:	f7ff ffb0 	bl	800fbac <malloc>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	6268      	str	r0, [r5, #36]	; 0x24
 800fc50:	b920      	cbnz	r0, 800fc5c <_Bfree+0x20>
 800fc52:	4b09      	ldr	r3, [pc, #36]	; (800fc78 <_Bfree+0x3c>)
 800fc54:	4809      	ldr	r0, [pc, #36]	; (800fc7c <_Bfree+0x40>)
 800fc56:	218a      	movs	r1, #138	; 0x8a
 800fc58:	f000 fc3a 	bl	80104d0 <__assert_func>
 800fc5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc60:	6006      	str	r6, [r0, #0]
 800fc62:	60c6      	str	r6, [r0, #12]
 800fc64:	b13c      	cbz	r4, 800fc76 <_Bfree+0x3a>
 800fc66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fc68:	6862      	ldr	r2, [r4, #4]
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc70:	6021      	str	r1, [r4, #0]
 800fc72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc76:	bd70      	pop	{r4, r5, r6, pc}
 800fc78:	08012601 	.word	0x08012601
 800fc7c:	08012684 	.word	0x08012684

0800fc80 <__multadd>:
 800fc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc84:	690d      	ldr	r5, [r1, #16]
 800fc86:	4607      	mov	r7, r0
 800fc88:	460c      	mov	r4, r1
 800fc8a:	461e      	mov	r6, r3
 800fc8c:	f101 0c14 	add.w	ip, r1, #20
 800fc90:	2000      	movs	r0, #0
 800fc92:	f8dc 3000 	ldr.w	r3, [ip]
 800fc96:	b299      	uxth	r1, r3
 800fc98:	fb02 6101 	mla	r1, r2, r1, r6
 800fc9c:	0c1e      	lsrs	r6, r3, #16
 800fc9e:	0c0b      	lsrs	r3, r1, #16
 800fca0:	fb02 3306 	mla	r3, r2, r6, r3
 800fca4:	b289      	uxth	r1, r1
 800fca6:	3001      	adds	r0, #1
 800fca8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fcac:	4285      	cmp	r5, r0
 800fcae:	f84c 1b04 	str.w	r1, [ip], #4
 800fcb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fcb6:	dcec      	bgt.n	800fc92 <__multadd+0x12>
 800fcb8:	b30e      	cbz	r6, 800fcfe <__multadd+0x7e>
 800fcba:	68a3      	ldr	r3, [r4, #8]
 800fcbc:	42ab      	cmp	r3, r5
 800fcbe:	dc19      	bgt.n	800fcf4 <__multadd+0x74>
 800fcc0:	6861      	ldr	r1, [r4, #4]
 800fcc2:	4638      	mov	r0, r7
 800fcc4:	3101      	adds	r1, #1
 800fcc6:	f7ff ff79 	bl	800fbbc <_Balloc>
 800fcca:	4680      	mov	r8, r0
 800fccc:	b928      	cbnz	r0, 800fcda <__multadd+0x5a>
 800fcce:	4602      	mov	r2, r0
 800fcd0:	4b0c      	ldr	r3, [pc, #48]	; (800fd04 <__multadd+0x84>)
 800fcd2:	480d      	ldr	r0, [pc, #52]	; (800fd08 <__multadd+0x88>)
 800fcd4:	21b5      	movs	r1, #181	; 0xb5
 800fcd6:	f000 fbfb 	bl	80104d0 <__assert_func>
 800fcda:	6922      	ldr	r2, [r4, #16]
 800fcdc:	3202      	adds	r2, #2
 800fcde:	f104 010c 	add.w	r1, r4, #12
 800fce2:	0092      	lsls	r2, r2, #2
 800fce4:	300c      	adds	r0, #12
 800fce6:	f7fe fc51 	bl	800e58c <memcpy>
 800fcea:	4621      	mov	r1, r4
 800fcec:	4638      	mov	r0, r7
 800fcee:	f7ff ffa5 	bl	800fc3c <_Bfree>
 800fcf2:	4644      	mov	r4, r8
 800fcf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fcf8:	3501      	adds	r5, #1
 800fcfa:	615e      	str	r6, [r3, #20]
 800fcfc:	6125      	str	r5, [r4, #16]
 800fcfe:	4620      	mov	r0, r4
 800fd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd04:	08012673 	.word	0x08012673
 800fd08:	08012684 	.word	0x08012684

0800fd0c <__hi0bits>:
 800fd0c:	0c03      	lsrs	r3, r0, #16
 800fd0e:	041b      	lsls	r3, r3, #16
 800fd10:	b9d3      	cbnz	r3, 800fd48 <__hi0bits+0x3c>
 800fd12:	0400      	lsls	r0, r0, #16
 800fd14:	2310      	movs	r3, #16
 800fd16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fd1a:	bf04      	itt	eq
 800fd1c:	0200      	lsleq	r0, r0, #8
 800fd1e:	3308      	addeq	r3, #8
 800fd20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fd24:	bf04      	itt	eq
 800fd26:	0100      	lsleq	r0, r0, #4
 800fd28:	3304      	addeq	r3, #4
 800fd2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fd2e:	bf04      	itt	eq
 800fd30:	0080      	lsleq	r0, r0, #2
 800fd32:	3302      	addeq	r3, #2
 800fd34:	2800      	cmp	r0, #0
 800fd36:	db05      	blt.n	800fd44 <__hi0bits+0x38>
 800fd38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fd3c:	f103 0301 	add.w	r3, r3, #1
 800fd40:	bf08      	it	eq
 800fd42:	2320      	moveq	r3, #32
 800fd44:	4618      	mov	r0, r3
 800fd46:	4770      	bx	lr
 800fd48:	2300      	movs	r3, #0
 800fd4a:	e7e4      	b.n	800fd16 <__hi0bits+0xa>

0800fd4c <__lo0bits>:
 800fd4c:	6803      	ldr	r3, [r0, #0]
 800fd4e:	f013 0207 	ands.w	r2, r3, #7
 800fd52:	4601      	mov	r1, r0
 800fd54:	d00b      	beq.n	800fd6e <__lo0bits+0x22>
 800fd56:	07da      	lsls	r2, r3, #31
 800fd58:	d423      	bmi.n	800fda2 <__lo0bits+0x56>
 800fd5a:	0798      	lsls	r0, r3, #30
 800fd5c:	bf49      	itett	mi
 800fd5e:	085b      	lsrmi	r3, r3, #1
 800fd60:	089b      	lsrpl	r3, r3, #2
 800fd62:	2001      	movmi	r0, #1
 800fd64:	600b      	strmi	r3, [r1, #0]
 800fd66:	bf5c      	itt	pl
 800fd68:	600b      	strpl	r3, [r1, #0]
 800fd6a:	2002      	movpl	r0, #2
 800fd6c:	4770      	bx	lr
 800fd6e:	b298      	uxth	r0, r3
 800fd70:	b9a8      	cbnz	r0, 800fd9e <__lo0bits+0x52>
 800fd72:	0c1b      	lsrs	r3, r3, #16
 800fd74:	2010      	movs	r0, #16
 800fd76:	b2da      	uxtb	r2, r3
 800fd78:	b90a      	cbnz	r2, 800fd7e <__lo0bits+0x32>
 800fd7a:	3008      	adds	r0, #8
 800fd7c:	0a1b      	lsrs	r3, r3, #8
 800fd7e:	071a      	lsls	r2, r3, #28
 800fd80:	bf04      	itt	eq
 800fd82:	091b      	lsreq	r3, r3, #4
 800fd84:	3004      	addeq	r0, #4
 800fd86:	079a      	lsls	r2, r3, #30
 800fd88:	bf04      	itt	eq
 800fd8a:	089b      	lsreq	r3, r3, #2
 800fd8c:	3002      	addeq	r0, #2
 800fd8e:	07da      	lsls	r2, r3, #31
 800fd90:	d403      	bmi.n	800fd9a <__lo0bits+0x4e>
 800fd92:	085b      	lsrs	r3, r3, #1
 800fd94:	f100 0001 	add.w	r0, r0, #1
 800fd98:	d005      	beq.n	800fda6 <__lo0bits+0x5a>
 800fd9a:	600b      	str	r3, [r1, #0]
 800fd9c:	4770      	bx	lr
 800fd9e:	4610      	mov	r0, r2
 800fda0:	e7e9      	b.n	800fd76 <__lo0bits+0x2a>
 800fda2:	2000      	movs	r0, #0
 800fda4:	4770      	bx	lr
 800fda6:	2020      	movs	r0, #32
 800fda8:	4770      	bx	lr
	...

0800fdac <__i2b>:
 800fdac:	b510      	push	{r4, lr}
 800fdae:	460c      	mov	r4, r1
 800fdb0:	2101      	movs	r1, #1
 800fdb2:	f7ff ff03 	bl	800fbbc <_Balloc>
 800fdb6:	4602      	mov	r2, r0
 800fdb8:	b928      	cbnz	r0, 800fdc6 <__i2b+0x1a>
 800fdba:	4b05      	ldr	r3, [pc, #20]	; (800fdd0 <__i2b+0x24>)
 800fdbc:	4805      	ldr	r0, [pc, #20]	; (800fdd4 <__i2b+0x28>)
 800fdbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fdc2:	f000 fb85 	bl	80104d0 <__assert_func>
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	6144      	str	r4, [r0, #20]
 800fdca:	6103      	str	r3, [r0, #16]
 800fdcc:	bd10      	pop	{r4, pc}
 800fdce:	bf00      	nop
 800fdd0:	08012673 	.word	0x08012673
 800fdd4:	08012684 	.word	0x08012684

0800fdd8 <__multiply>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	4691      	mov	r9, r2
 800fdde:	690a      	ldr	r2, [r1, #16]
 800fde0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fde4:	429a      	cmp	r2, r3
 800fde6:	bfb8      	it	lt
 800fde8:	460b      	movlt	r3, r1
 800fdea:	460c      	mov	r4, r1
 800fdec:	bfbc      	itt	lt
 800fdee:	464c      	movlt	r4, r9
 800fdf0:	4699      	movlt	r9, r3
 800fdf2:	6927      	ldr	r7, [r4, #16]
 800fdf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fdf8:	68a3      	ldr	r3, [r4, #8]
 800fdfa:	6861      	ldr	r1, [r4, #4]
 800fdfc:	eb07 060a 	add.w	r6, r7, sl
 800fe00:	42b3      	cmp	r3, r6
 800fe02:	b085      	sub	sp, #20
 800fe04:	bfb8      	it	lt
 800fe06:	3101      	addlt	r1, #1
 800fe08:	f7ff fed8 	bl	800fbbc <_Balloc>
 800fe0c:	b930      	cbnz	r0, 800fe1c <__multiply+0x44>
 800fe0e:	4602      	mov	r2, r0
 800fe10:	4b44      	ldr	r3, [pc, #272]	; (800ff24 <__multiply+0x14c>)
 800fe12:	4845      	ldr	r0, [pc, #276]	; (800ff28 <__multiply+0x150>)
 800fe14:	f240 115d 	movw	r1, #349	; 0x15d
 800fe18:	f000 fb5a 	bl	80104d0 <__assert_func>
 800fe1c:	f100 0514 	add.w	r5, r0, #20
 800fe20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fe24:	462b      	mov	r3, r5
 800fe26:	2200      	movs	r2, #0
 800fe28:	4543      	cmp	r3, r8
 800fe2a:	d321      	bcc.n	800fe70 <__multiply+0x98>
 800fe2c:	f104 0314 	add.w	r3, r4, #20
 800fe30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fe34:	f109 0314 	add.w	r3, r9, #20
 800fe38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fe3c:	9202      	str	r2, [sp, #8]
 800fe3e:	1b3a      	subs	r2, r7, r4
 800fe40:	3a15      	subs	r2, #21
 800fe42:	f022 0203 	bic.w	r2, r2, #3
 800fe46:	3204      	adds	r2, #4
 800fe48:	f104 0115 	add.w	r1, r4, #21
 800fe4c:	428f      	cmp	r7, r1
 800fe4e:	bf38      	it	cc
 800fe50:	2204      	movcc	r2, #4
 800fe52:	9201      	str	r2, [sp, #4]
 800fe54:	9a02      	ldr	r2, [sp, #8]
 800fe56:	9303      	str	r3, [sp, #12]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d80c      	bhi.n	800fe76 <__multiply+0x9e>
 800fe5c:	2e00      	cmp	r6, #0
 800fe5e:	dd03      	ble.n	800fe68 <__multiply+0x90>
 800fe60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d05a      	beq.n	800ff1e <__multiply+0x146>
 800fe68:	6106      	str	r6, [r0, #16]
 800fe6a:	b005      	add	sp, #20
 800fe6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe70:	f843 2b04 	str.w	r2, [r3], #4
 800fe74:	e7d8      	b.n	800fe28 <__multiply+0x50>
 800fe76:	f8b3 a000 	ldrh.w	sl, [r3]
 800fe7a:	f1ba 0f00 	cmp.w	sl, #0
 800fe7e:	d024      	beq.n	800feca <__multiply+0xf2>
 800fe80:	f104 0e14 	add.w	lr, r4, #20
 800fe84:	46a9      	mov	r9, r5
 800fe86:	f04f 0c00 	mov.w	ip, #0
 800fe8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fe8e:	f8d9 1000 	ldr.w	r1, [r9]
 800fe92:	fa1f fb82 	uxth.w	fp, r2
 800fe96:	b289      	uxth	r1, r1
 800fe98:	fb0a 110b 	mla	r1, sl, fp, r1
 800fe9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fea0:	f8d9 2000 	ldr.w	r2, [r9]
 800fea4:	4461      	add	r1, ip
 800fea6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800feaa:	fb0a c20b 	mla	r2, sl, fp, ip
 800feae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800feb2:	b289      	uxth	r1, r1
 800feb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800feb8:	4577      	cmp	r7, lr
 800feba:	f849 1b04 	str.w	r1, [r9], #4
 800febe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fec2:	d8e2      	bhi.n	800fe8a <__multiply+0xb2>
 800fec4:	9a01      	ldr	r2, [sp, #4]
 800fec6:	f845 c002 	str.w	ip, [r5, r2]
 800feca:	9a03      	ldr	r2, [sp, #12]
 800fecc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fed0:	3304      	adds	r3, #4
 800fed2:	f1b9 0f00 	cmp.w	r9, #0
 800fed6:	d020      	beq.n	800ff1a <__multiply+0x142>
 800fed8:	6829      	ldr	r1, [r5, #0]
 800feda:	f104 0c14 	add.w	ip, r4, #20
 800fede:	46ae      	mov	lr, r5
 800fee0:	f04f 0a00 	mov.w	sl, #0
 800fee4:	f8bc b000 	ldrh.w	fp, [ip]
 800fee8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800feec:	fb09 220b 	mla	r2, r9, fp, r2
 800fef0:	4492      	add	sl, r2
 800fef2:	b289      	uxth	r1, r1
 800fef4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fef8:	f84e 1b04 	str.w	r1, [lr], #4
 800fefc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ff00:	f8be 1000 	ldrh.w	r1, [lr]
 800ff04:	0c12      	lsrs	r2, r2, #16
 800ff06:	fb09 1102 	mla	r1, r9, r2, r1
 800ff0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ff0e:	4567      	cmp	r7, ip
 800ff10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ff14:	d8e6      	bhi.n	800fee4 <__multiply+0x10c>
 800ff16:	9a01      	ldr	r2, [sp, #4]
 800ff18:	50a9      	str	r1, [r5, r2]
 800ff1a:	3504      	adds	r5, #4
 800ff1c:	e79a      	b.n	800fe54 <__multiply+0x7c>
 800ff1e:	3e01      	subs	r6, #1
 800ff20:	e79c      	b.n	800fe5c <__multiply+0x84>
 800ff22:	bf00      	nop
 800ff24:	08012673 	.word	0x08012673
 800ff28:	08012684 	.word	0x08012684

0800ff2c <__pow5mult>:
 800ff2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff30:	4615      	mov	r5, r2
 800ff32:	f012 0203 	ands.w	r2, r2, #3
 800ff36:	4606      	mov	r6, r0
 800ff38:	460f      	mov	r7, r1
 800ff3a:	d007      	beq.n	800ff4c <__pow5mult+0x20>
 800ff3c:	4c25      	ldr	r4, [pc, #148]	; (800ffd4 <__pow5mult+0xa8>)
 800ff3e:	3a01      	subs	r2, #1
 800ff40:	2300      	movs	r3, #0
 800ff42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff46:	f7ff fe9b 	bl	800fc80 <__multadd>
 800ff4a:	4607      	mov	r7, r0
 800ff4c:	10ad      	asrs	r5, r5, #2
 800ff4e:	d03d      	beq.n	800ffcc <__pow5mult+0xa0>
 800ff50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ff52:	b97c      	cbnz	r4, 800ff74 <__pow5mult+0x48>
 800ff54:	2010      	movs	r0, #16
 800ff56:	f7ff fe29 	bl	800fbac <malloc>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	6270      	str	r0, [r6, #36]	; 0x24
 800ff5e:	b928      	cbnz	r0, 800ff6c <__pow5mult+0x40>
 800ff60:	4b1d      	ldr	r3, [pc, #116]	; (800ffd8 <__pow5mult+0xac>)
 800ff62:	481e      	ldr	r0, [pc, #120]	; (800ffdc <__pow5mult+0xb0>)
 800ff64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ff68:	f000 fab2 	bl	80104d0 <__assert_func>
 800ff6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff70:	6004      	str	r4, [r0, #0]
 800ff72:	60c4      	str	r4, [r0, #12]
 800ff74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ff78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff7c:	b94c      	cbnz	r4, 800ff92 <__pow5mult+0x66>
 800ff7e:	f240 2171 	movw	r1, #625	; 0x271
 800ff82:	4630      	mov	r0, r6
 800ff84:	f7ff ff12 	bl	800fdac <__i2b>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff8e:	4604      	mov	r4, r0
 800ff90:	6003      	str	r3, [r0, #0]
 800ff92:	f04f 0900 	mov.w	r9, #0
 800ff96:	07eb      	lsls	r3, r5, #31
 800ff98:	d50a      	bpl.n	800ffb0 <__pow5mult+0x84>
 800ff9a:	4639      	mov	r1, r7
 800ff9c:	4622      	mov	r2, r4
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	f7ff ff1a 	bl	800fdd8 <__multiply>
 800ffa4:	4639      	mov	r1, r7
 800ffa6:	4680      	mov	r8, r0
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	f7ff fe47 	bl	800fc3c <_Bfree>
 800ffae:	4647      	mov	r7, r8
 800ffb0:	106d      	asrs	r5, r5, #1
 800ffb2:	d00b      	beq.n	800ffcc <__pow5mult+0xa0>
 800ffb4:	6820      	ldr	r0, [r4, #0]
 800ffb6:	b938      	cbnz	r0, 800ffc8 <__pow5mult+0x9c>
 800ffb8:	4622      	mov	r2, r4
 800ffba:	4621      	mov	r1, r4
 800ffbc:	4630      	mov	r0, r6
 800ffbe:	f7ff ff0b 	bl	800fdd8 <__multiply>
 800ffc2:	6020      	str	r0, [r4, #0]
 800ffc4:	f8c0 9000 	str.w	r9, [r0]
 800ffc8:	4604      	mov	r4, r0
 800ffca:	e7e4      	b.n	800ff96 <__pow5mult+0x6a>
 800ffcc:	4638      	mov	r0, r7
 800ffce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffd2:	bf00      	nop
 800ffd4:	080127d0 	.word	0x080127d0
 800ffd8:	08012601 	.word	0x08012601
 800ffdc:	08012684 	.word	0x08012684

0800ffe0 <__lshift>:
 800ffe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffe4:	460c      	mov	r4, r1
 800ffe6:	6849      	ldr	r1, [r1, #4]
 800ffe8:	6923      	ldr	r3, [r4, #16]
 800ffea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ffee:	68a3      	ldr	r3, [r4, #8]
 800fff0:	4607      	mov	r7, r0
 800fff2:	4691      	mov	r9, r2
 800fff4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fff8:	f108 0601 	add.w	r6, r8, #1
 800fffc:	42b3      	cmp	r3, r6
 800fffe:	db0b      	blt.n	8010018 <__lshift+0x38>
 8010000:	4638      	mov	r0, r7
 8010002:	f7ff fddb 	bl	800fbbc <_Balloc>
 8010006:	4605      	mov	r5, r0
 8010008:	b948      	cbnz	r0, 801001e <__lshift+0x3e>
 801000a:	4602      	mov	r2, r0
 801000c:	4b2a      	ldr	r3, [pc, #168]	; (80100b8 <__lshift+0xd8>)
 801000e:	482b      	ldr	r0, [pc, #172]	; (80100bc <__lshift+0xdc>)
 8010010:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010014:	f000 fa5c 	bl	80104d0 <__assert_func>
 8010018:	3101      	adds	r1, #1
 801001a:	005b      	lsls	r3, r3, #1
 801001c:	e7ee      	b.n	800fffc <__lshift+0x1c>
 801001e:	2300      	movs	r3, #0
 8010020:	f100 0114 	add.w	r1, r0, #20
 8010024:	f100 0210 	add.w	r2, r0, #16
 8010028:	4618      	mov	r0, r3
 801002a:	4553      	cmp	r3, sl
 801002c:	db37      	blt.n	801009e <__lshift+0xbe>
 801002e:	6920      	ldr	r0, [r4, #16]
 8010030:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010034:	f104 0314 	add.w	r3, r4, #20
 8010038:	f019 091f 	ands.w	r9, r9, #31
 801003c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010040:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010044:	d02f      	beq.n	80100a6 <__lshift+0xc6>
 8010046:	f1c9 0e20 	rsb	lr, r9, #32
 801004a:	468a      	mov	sl, r1
 801004c:	f04f 0c00 	mov.w	ip, #0
 8010050:	681a      	ldr	r2, [r3, #0]
 8010052:	fa02 f209 	lsl.w	r2, r2, r9
 8010056:	ea42 020c 	orr.w	r2, r2, ip
 801005a:	f84a 2b04 	str.w	r2, [sl], #4
 801005e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010062:	4298      	cmp	r0, r3
 8010064:	fa22 fc0e 	lsr.w	ip, r2, lr
 8010068:	d8f2      	bhi.n	8010050 <__lshift+0x70>
 801006a:	1b03      	subs	r3, r0, r4
 801006c:	3b15      	subs	r3, #21
 801006e:	f023 0303 	bic.w	r3, r3, #3
 8010072:	3304      	adds	r3, #4
 8010074:	f104 0215 	add.w	r2, r4, #21
 8010078:	4290      	cmp	r0, r2
 801007a:	bf38      	it	cc
 801007c:	2304      	movcc	r3, #4
 801007e:	f841 c003 	str.w	ip, [r1, r3]
 8010082:	f1bc 0f00 	cmp.w	ip, #0
 8010086:	d001      	beq.n	801008c <__lshift+0xac>
 8010088:	f108 0602 	add.w	r6, r8, #2
 801008c:	3e01      	subs	r6, #1
 801008e:	4638      	mov	r0, r7
 8010090:	612e      	str	r6, [r5, #16]
 8010092:	4621      	mov	r1, r4
 8010094:	f7ff fdd2 	bl	800fc3c <_Bfree>
 8010098:	4628      	mov	r0, r5
 801009a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801009e:	f842 0f04 	str.w	r0, [r2, #4]!
 80100a2:	3301      	adds	r3, #1
 80100a4:	e7c1      	b.n	801002a <__lshift+0x4a>
 80100a6:	3904      	subs	r1, #4
 80100a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80100ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80100b0:	4298      	cmp	r0, r3
 80100b2:	d8f9      	bhi.n	80100a8 <__lshift+0xc8>
 80100b4:	e7ea      	b.n	801008c <__lshift+0xac>
 80100b6:	bf00      	nop
 80100b8:	08012673 	.word	0x08012673
 80100bc:	08012684 	.word	0x08012684

080100c0 <__mcmp>:
 80100c0:	b530      	push	{r4, r5, lr}
 80100c2:	6902      	ldr	r2, [r0, #16]
 80100c4:	690c      	ldr	r4, [r1, #16]
 80100c6:	1b12      	subs	r2, r2, r4
 80100c8:	d10e      	bne.n	80100e8 <__mcmp+0x28>
 80100ca:	f100 0314 	add.w	r3, r0, #20
 80100ce:	3114      	adds	r1, #20
 80100d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80100d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80100d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80100dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80100e0:	42a5      	cmp	r5, r4
 80100e2:	d003      	beq.n	80100ec <__mcmp+0x2c>
 80100e4:	d305      	bcc.n	80100f2 <__mcmp+0x32>
 80100e6:	2201      	movs	r2, #1
 80100e8:	4610      	mov	r0, r2
 80100ea:	bd30      	pop	{r4, r5, pc}
 80100ec:	4283      	cmp	r3, r0
 80100ee:	d3f3      	bcc.n	80100d8 <__mcmp+0x18>
 80100f0:	e7fa      	b.n	80100e8 <__mcmp+0x28>
 80100f2:	f04f 32ff 	mov.w	r2, #4294967295
 80100f6:	e7f7      	b.n	80100e8 <__mcmp+0x28>

080100f8 <__mdiff>:
 80100f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fc:	460c      	mov	r4, r1
 80100fe:	4606      	mov	r6, r0
 8010100:	4611      	mov	r1, r2
 8010102:	4620      	mov	r0, r4
 8010104:	4690      	mov	r8, r2
 8010106:	f7ff ffdb 	bl	80100c0 <__mcmp>
 801010a:	1e05      	subs	r5, r0, #0
 801010c:	d110      	bne.n	8010130 <__mdiff+0x38>
 801010e:	4629      	mov	r1, r5
 8010110:	4630      	mov	r0, r6
 8010112:	f7ff fd53 	bl	800fbbc <_Balloc>
 8010116:	b930      	cbnz	r0, 8010126 <__mdiff+0x2e>
 8010118:	4b3a      	ldr	r3, [pc, #232]	; (8010204 <__mdiff+0x10c>)
 801011a:	4602      	mov	r2, r0
 801011c:	f240 2132 	movw	r1, #562	; 0x232
 8010120:	4839      	ldr	r0, [pc, #228]	; (8010208 <__mdiff+0x110>)
 8010122:	f000 f9d5 	bl	80104d0 <__assert_func>
 8010126:	2301      	movs	r3, #1
 8010128:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801012c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010130:	bfa4      	itt	ge
 8010132:	4643      	movge	r3, r8
 8010134:	46a0      	movge	r8, r4
 8010136:	4630      	mov	r0, r6
 8010138:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801013c:	bfa6      	itte	ge
 801013e:	461c      	movge	r4, r3
 8010140:	2500      	movge	r5, #0
 8010142:	2501      	movlt	r5, #1
 8010144:	f7ff fd3a 	bl	800fbbc <_Balloc>
 8010148:	b920      	cbnz	r0, 8010154 <__mdiff+0x5c>
 801014a:	4b2e      	ldr	r3, [pc, #184]	; (8010204 <__mdiff+0x10c>)
 801014c:	4602      	mov	r2, r0
 801014e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010152:	e7e5      	b.n	8010120 <__mdiff+0x28>
 8010154:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010158:	6926      	ldr	r6, [r4, #16]
 801015a:	60c5      	str	r5, [r0, #12]
 801015c:	f104 0914 	add.w	r9, r4, #20
 8010160:	f108 0514 	add.w	r5, r8, #20
 8010164:	f100 0e14 	add.w	lr, r0, #20
 8010168:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801016c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010170:	f108 0210 	add.w	r2, r8, #16
 8010174:	46f2      	mov	sl, lr
 8010176:	2100      	movs	r1, #0
 8010178:	f859 3b04 	ldr.w	r3, [r9], #4
 801017c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010180:	fa1f f883 	uxth.w	r8, r3
 8010184:	fa11 f18b 	uxtah	r1, r1, fp
 8010188:	0c1b      	lsrs	r3, r3, #16
 801018a:	eba1 0808 	sub.w	r8, r1, r8
 801018e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010192:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010196:	fa1f f888 	uxth.w	r8, r8
 801019a:	1419      	asrs	r1, r3, #16
 801019c:	454e      	cmp	r6, r9
 801019e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80101a2:	f84a 3b04 	str.w	r3, [sl], #4
 80101a6:	d8e7      	bhi.n	8010178 <__mdiff+0x80>
 80101a8:	1b33      	subs	r3, r6, r4
 80101aa:	3b15      	subs	r3, #21
 80101ac:	f023 0303 	bic.w	r3, r3, #3
 80101b0:	3304      	adds	r3, #4
 80101b2:	3415      	adds	r4, #21
 80101b4:	42a6      	cmp	r6, r4
 80101b6:	bf38      	it	cc
 80101b8:	2304      	movcc	r3, #4
 80101ba:	441d      	add	r5, r3
 80101bc:	4473      	add	r3, lr
 80101be:	469e      	mov	lr, r3
 80101c0:	462e      	mov	r6, r5
 80101c2:	4566      	cmp	r6, ip
 80101c4:	d30e      	bcc.n	80101e4 <__mdiff+0xec>
 80101c6:	f10c 0203 	add.w	r2, ip, #3
 80101ca:	1b52      	subs	r2, r2, r5
 80101cc:	f022 0203 	bic.w	r2, r2, #3
 80101d0:	3d03      	subs	r5, #3
 80101d2:	45ac      	cmp	ip, r5
 80101d4:	bf38      	it	cc
 80101d6:	2200      	movcc	r2, #0
 80101d8:	441a      	add	r2, r3
 80101da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80101de:	b17b      	cbz	r3, 8010200 <__mdiff+0x108>
 80101e0:	6107      	str	r7, [r0, #16]
 80101e2:	e7a3      	b.n	801012c <__mdiff+0x34>
 80101e4:	f856 8b04 	ldr.w	r8, [r6], #4
 80101e8:	fa11 f288 	uxtah	r2, r1, r8
 80101ec:	1414      	asrs	r4, r2, #16
 80101ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80101f2:	b292      	uxth	r2, r2
 80101f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80101f8:	f84e 2b04 	str.w	r2, [lr], #4
 80101fc:	1421      	asrs	r1, r4, #16
 80101fe:	e7e0      	b.n	80101c2 <__mdiff+0xca>
 8010200:	3f01      	subs	r7, #1
 8010202:	e7ea      	b.n	80101da <__mdiff+0xe2>
 8010204:	08012673 	.word	0x08012673
 8010208:	08012684 	.word	0x08012684

0801020c <__d2b>:
 801020c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010210:	4689      	mov	r9, r1
 8010212:	2101      	movs	r1, #1
 8010214:	ec57 6b10 	vmov	r6, r7, d0
 8010218:	4690      	mov	r8, r2
 801021a:	f7ff fccf 	bl	800fbbc <_Balloc>
 801021e:	4604      	mov	r4, r0
 8010220:	b930      	cbnz	r0, 8010230 <__d2b+0x24>
 8010222:	4602      	mov	r2, r0
 8010224:	4b25      	ldr	r3, [pc, #148]	; (80102bc <__d2b+0xb0>)
 8010226:	4826      	ldr	r0, [pc, #152]	; (80102c0 <__d2b+0xb4>)
 8010228:	f240 310a 	movw	r1, #778	; 0x30a
 801022c:	f000 f950 	bl	80104d0 <__assert_func>
 8010230:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010234:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010238:	bb35      	cbnz	r5, 8010288 <__d2b+0x7c>
 801023a:	2e00      	cmp	r6, #0
 801023c:	9301      	str	r3, [sp, #4]
 801023e:	d028      	beq.n	8010292 <__d2b+0x86>
 8010240:	4668      	mov	r0, sp
 8010242:	9600      	str	r6, [sp, #0]
 8010244:	f7ff fd82 	bl	800fd4c <__lo0bits>
 8010248:	9900      	ldr	r1, [sp, #0]
 801024a:	b300      	cbz	r0, 801028e <__d2b+0x82>
 801024c:	9a01      	ldr	r2, [sp, #4]
 801024e:	f1c0 0320 	rsb	r3, r0, #32
 8010252:	fa02 f303 	lsl.w	r3, r2, r3
 8010256:	430b      	orrs	r3, r1
 8010258:	40c2      	lsrs	r2, r0
 801025a:	6163      	str	r3, [r4, #20]
 801025c:	9201      	str	r2, [sp, #4]
 801025e:	9b01      	ldr	r3, [sp, #4]
 8010260:	61a3      	str	r3, [r4, #24]
 8010262:	2b00      	cmp	r3, #0
 8010264:	bf14      	ite	ne
 8010266:	2202      	movne	r2, #2
 8010268:	2201      	moveq	r2, #1
 801026a:	6122      	str	r2, [r4, #16]
 801026c:	b1d5      	cbz	r5, 80102a4 <__d2b+0x98>
 801026e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010272:	4405      	add	r5, r0
 8010274:	f8c9 5000 	str.w	r5, [r9]
 8010278:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801027c:	f8c8 0000 	str.w	r0, [r8]
 8010280:	4620      	mov	r0, r4
 8010282:	b003      	add	sp, #12
 8010284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801028c:	e7d5      	b.n	801023a <__d2b+0x2e>
 801028e:	6161      	str	r1, [r4, #20]
 8010290:	e7e5      	b.n	801025e <__d2b+0x52>
 8010292:	a801      	add	r0, sp, #4
 8010294:	f7ff fd5a 	bl	800fd4c <__lo0bits>
 8010298:	9b01      	ldr	r3, [sp, #4]
 801029a:	6163      	str	r3, [r4, #20]
 801029c:	2201      	movs	r2, #1
 801029e:	6122      	str	r2, [r4, #16]
 80102a0:	3020      	adds	r0, #32
 80102a2:	e7e3      	b.n	801026c <__d2b+0x60>
 80102a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80102a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80102ac:	f8c9 0000 	str.w	r0, [r9]
 80102b0:	6918      	ldr	r0, [r3, #16]
 80102b2:	f7ff fd2b 	bl	800fd0c <__hi0bits>
 80102b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80102ba:	e7df      	b.n	801027c <__d2b+0x70>
 80102bc:	08012673 	.word	0x08012673
 80102c0:	08012684 	.word	0x08012684

080102c4 <_calloc_r>:
 80102c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102c6:	fba1 2402 	umull	r2, r4, r1, r2
 80102ca:	b94c      	cbnz	r4, 80102e0 <_calloc_r+0x1c>
 80102cc:	4611      	mov	r1, r2
 80102ce:	9201      	str	r2, [sp, #4]
 80102d0:	f000 f87a 	bl	80103c8 <_malloc_r>
 80102d4:	9a01      	ldr	r2, [sp, #4]
 80102d6:	4605      	mov	r5, r0
 80102d8:	b930      	cbnz	r0, 80102e8 <_calloc_r+0x24>
 80102da:	4628      	mov	r0, r5
 80102dc:	b003      	add	sp, #12
 80102de:	bd30      	pop	{r4, r5, pc}
 80102e0:	220c      	movs	r2, #12
 80102e2:	6002      	str	r2, [r0, #0]
 80102e4:	2500      	movs	r5, #0
 80102e6:	e7f8      	b.n	80102da <_calloc_r+0x16>
 80102e8:	4621      	mov	r1, r4
 80102ea:	f7fe f95d 	bl	800e5a8 <memset>
 80102ee:	e7f4      	b.n	80102da <_calloc_r+0x16>

080102f0 <_free_r>:
 80102f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102f2:	2900      	cmp	r1, #0
 80102f4:	d044      	beq.n	8010380 <_free_r+0x90>
 80102f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102fa:	9001      	str	r0, [sp, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f1a1 0404 	sub.w	r4, r1, #4
 8010302:	bfb8      	it	lt
 8010304:	18e4      	addlt	r4, r4, r3
 8010306:	f000 f925 	bl	8010554 <__malloc_lock>
 801030a:	4a1e      	ldr	r2, [pc, #120]	; (8010384 <_free_r+0x94>)
 801030c:	9801      	ldr	r0, [sp, #4]
 801030e:	6813      	ldr	r3, [r2, #0]
 8010310:	b933      	cbnz	r3, 8010320 <_free_r+0x30>
 8010312:	6063      	str	r3, [r4, #4]
 8010314:	6014      	str	r4, [r2, #0]
 8010316:	b003      	add	sp, #12
 8010318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801031c:	f000 b920 	b.w	8010560 <__malloc_unlock>
 8010320:	42a3      	cmp	r3, r4
 8010322:	d908      	bls.n	8010336 <_free_r+0x46>
 8010324:	6825      	ldr	r5, [r4, #0]
 8010326:	1961      	adds	r1, r4, r5
 8010328:	428b      	cmp	r3, r1
 801032a:	bf01      	itttt	eq
 801032c:	6819      	ldreq	r1, [r3, #0]
 801032e:	685b      	ldreq	r3, [r3, #4]
 8010330:	1949      	addeq	r1, r1, r5
 8010332:	6021      	streq	r1, [r4, #0]
 8010334:	e7ed      	b.n	8010312 <_free_r+0x22>
 8010336:	461a      	mov	r2, r3
 8010338:	685b      	ldr	r3, [r3, #4]
 801033a:	b10b      	cbz	r3, 8010340 <_free_r+0x50>
 801033c:	42a3      	cmp	r3, r4
 801033e:	d9fa      	bls.n	8010336 <_free_r+0x46>
 8010340:	6811      	ldr	r1, [r2, #0]
 8010342:	1855      	adds	r5, r2, r1
 8010344:	42a5      	cmp	r5, r4
 8010346:	d10b      	bne.n	8010360 <_free_r+0x70>
 8010348:	6824      	ldr	r4, [r4, #0]
 801034a:	4421      	add	r1, r4
 801034c:	1854      	adds	r4, r2, r1
 801034e:	42a3      	cmp	r3, r4
 8010350:	6011      	str	r1, [r2, #0]
 8010352:	d1e0      	bne.n	8010316 <_free_r+0x26>
 8010354:	681c      	ldr	r4, [r3, #0]
 8010356:	685b      	ldr	r3, [r3, #4]
 8010358:	6053      	str	r3, [r2, #4]
 801035a:	4421      	add	r1, r4
 801035c:	6011      	str	r1, [r2, #0]
 801035e:	e7da      	b.n	8010316 <_free_r+0x26>
 8010360:	d902      	bls.n	8010368 <_free_r+0x78>
 8010362:	230c      	movs	r3, #12
 8010364:	6003      	str	r3, [r0, #0]
 8010366:	e7d6      	b.n	8010316 <_free_r+0x26>
 8010368:	6825      	ldr	r5, [r4, #0]
 801036a:	1961      	adds	r1, r4, r5
 801036c:	428b      	cmp	r3, r1
 801036e:	bf04      	itt	eq
 8010370:	6819      	ldreq	r1, [r3, #0]
 8010372:	685b      	ldreq	r3, [r3, #4]
 8010374:	6063      	str	r3, [r4, #4]
 8010376:	bf04      	itt	eq
 8010378:	1949      	addeq	r1, r1, r5
 801037a:	6021      	streq	r1, [r4, #0]
 801037c:	6054      	str	r4, [r2, #4]
 801037e:	e7ca      	b.n	8010316 <_free_r+0x26>
 8010380:	b003      	add	sp, #12
 8010382:	bd30      	pop	{r4, r5, pc}
 8010384:	20001010 	.word	0x20001010

08010388 <sbrk_aligned>:
 8010388:	b570      	push	{r4, r5, r6, lr}
 801038a:	4e0e      	ldr	r6, [pc, #56]	; (80103c4 <sbrk_aligned+0x3c>)
 801038c:	460c      	mov	r4, r1
 801038e:	6831      	ldr	r1, [r6, #0]
 8010390:	4605      	mov	r5, r0
 8010392:	b911      	cbnz	r1, 801039a <sbrk_aligned+0x12>
 8010394:	f000 f88c 	bl	80104b0 <_sbrk_r>
 8010398:	6030      	str	r0, [r6, #0]
 801039a:	4621      	mov	r1, r4
 801039c:	4628      	mov	r0, r5
 801039e:	f000 f887 	bl	80104b0 <_sbrk_r>
 80103a2:	1c43      	adds	r3, r0, #1
 80103a4:	d00a      	beq.n	80103bc <sbrk_aligned+0x34>
 80103a6:	1cc4      	adds	r4, r0, #3
 80103a8:	f024 0403 	bic.w	r4, r4, #3
 80103ac:	42a0      	cmp	r0, r4
 80103ae:	d007      	beq.n	80103c0 <sbrk_aligned+0x38>
 80103b0:	1a21      	subs	r1, r4, r0
 80103b2:	4628      	mov	r0, r5
 80103b4:	f000 f87c 	bl	80104b0 <_sbrk_r>
 80103b8:	3001      	adds	r0, #1
 80103ba:	d101      	bne.n	80103c0 <sbrk_aligned+0x38>
 80103bc:	f04f 34ff 	mov.w	r4, #4294967295
 80103c0:	4620      	mov	r0, r4
 80103c2:	bd70      	pop	{r4, r5, r6, pc}
 80103c4:	20001014 	.word	0x20001014

080103c8 <_malloc_r>:
 80103c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103cc:	1ccd      	adds	r5, r1, #3
 80103ce:	f025 0503 	bic.w	r5, r5, #3
 80103d2:	3508      	adds	r5, #8
 80103d4:	2d0c      	cmp	r5, #12
 80103d6:	bf38      	it	cc
 80103d8:	250c      	movcc	r5, #12
 80103da:	2d00      	cmp	r5, #0
 80103dc:	4607      	mov	r7, r0
 80103de:	db01      	blt.n	80103e4 <_malloc_r+0x1c>
 80103e0:	42a9      	cmp	r1, r5
 80103e2:	d905      	bls.n	80103f0 <_malloc_r+0x28>
 80103e4:	230c      	movs	r3, #12
 80103e6:	603b      	str	r3, [r7, #0]
 80103e8:	2600      	movs	r6, #0
 80103ea:	4630      	mov	r0, r6
 80103ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f0:	4e2e      	ldr	r6, [pc, #184]	; (80104ac <_malloc_r+0xe4>)
 80103f2:	f000 f8af 	bl	8010554 <__malloc_lock>
 80103f6:	6833      	ldr	r3, [r6, #0]
 80103f8:	461c      	mov	r4, r3
 80103fa:	bb34      	cbnz	r4, 801044a <_malloc_r+0x82>
 80103fc:	4629      	mov	r1, r5
 80103fe:	4638      	mov	r0, r7
 8010400:	f7ff ffc2 	bl	8010388 <sbrk_aligned>
 8010404:	1c43      	adds	r3, r0, #1
 8010406:	4604      	mov	r4, r0
 8010408:	d14d      	bne.n	80104a6 <_malloc_r+0xde>
 801040a:	6834      	ldr	r4, [r6, #0]
 801040c:	4626      	mov	r6, r4
 801040e:	2e00      	cmp	r6, #0
 8010410:	d140      	bne.n	8010494 <_malloc_r+0xcc>
 8010412:	6823      	ldr	r3, [r4, #0]
 8010414:	4631      	mov	r1, r6
 8010416:	4638      	mov	r0, r7
 8010418:	eb04 0803 	add.w	r8, r4, r3
 801041c:	f000 f848 	bl	80104b0 <_sbrk_r>
 8010420:	4580      	cmp	r8, r0
 8010422:	d13a      	bne.n	801049a <_malloc_r+0xd2>
 8010424:	6821      	ldr	r1, [r4, #0]
 8010426:	3503      	adds	r5, #3
 8010428:	1a6d      	subs	r5, r5, r1
 801042a:	f025 0503 	bic.w	r5, r5, #3
 801042e:	3508      	adds	r5, #8
 8010430:	2d0c      	cmp	r5, #12
 8010432:	bf38      	it	cc
 8010434:	250c      	movcc	r5, #12
 8010436:	4629      	mov	r1, r5
 8010438:	4638      	mov	r0, r7
 801043a:	f7ff ffa5 	bl	8010388 <sbrk_aligned>
 801043e:	3001      	adds	r0, #1
 8010440:	d02b      	beq.n	801049a <_malloc_r+0xd2>
 8010442:	6823      	ldr	r3, [r4, #0]
 8010444:	442b      	add	r3, r5
 8010446:	6023      	str	r3, [r4, #0]
 8010448:	e00e      	b.n	8010468 <_malloc_r+0xa0>
 801044a:	6822      	ldr	r2, [r4, #0]
 801044c:	1b52      	subs	r2, r2, r5
 801044e:	d41e      	bmi.n	801048e <_malloc_r+0xc6>
 8010450:	2a0b      	cmp	r2, #11
 8010452:	d916      	bls.n	8010482 <_malloc_r+0xba>
 8010454:	1961      	adds	r1, r4, r5
 8010456:	42a3      	cmp	r3, r4
 8010458:	6025      	str	r5, [r4, #0]
 801045a:	bf18      	it	ne
 801045c:	6059      	strne	r1, [r3, #4]
 801045e:	6863      	ldr	r3, [r4, #4]
 8010460:	bf08      	it	eq
 8010462:	6031      	streq	r1, [r6, #0]
 8010464:	5162      	str	r2, [r4, r5]
 8010466:	604b      	str	r3, [r1, #4]
 8010468:	4638      	mov	r0, r7
 801046a:	f104 060b 	add.w	r6, r4, #11
 801046e:	f000 f877 	bl	8010560 <__malloc_unlock>
 8010472:	f026 0607 	bic.w	r6, r6, #7
 8010476:	1d23      	adds	r3, r4, #4
 8010478:	1af2      	subs	r2, r6, r3
 801047a:	d0b6      	beq.n	80103ea <_malloc_r+0x22>
 801047c:	1b9b      	subs	r3, r3, r6
 801047e:	50a3      	str	r3, [r4, r2]
 8010480:	e7b3      	b.n	80103ea <_malloc_r+0x22>
 8010482:	6862      	ldr	r2, [r4, #4]
 8010484:	42a3      	cmp	r3, r4
 8010486:	bf0c      	ite	eq
 8010488:	6032      	streq	r2, [r6, #0]
 801048a:	605a      	strne	r2, [r3, #4]
 801048c:	e7ec      	b.n	8010468 <_malloc_r+0xa0>
 801048e:	4623      	mov	r3, r4
 8010490:	6864      	ldr	r4, [r4, #4]
 8010492:	e7b2      	b.n	80103fa <_malloc_r+0x32>
 8010494:	4634      	mov	r4, r6
 8010496:	6876      	ldr	r6, [r6, #4]
 8010498:	e7b9      	b.n	801040e <_malloc_r+0x46>
 801049a:	230c      	movs	r3, #12
 801049c:	603b      	str	r3, [r7, #0]
 801049e:	4638      	mov	r0, r7
 80104a0:	f000 f85e 	bl	8010560 <__malloc_unlock>
 80104a4:	e7a1      	b.n	80103ea <_malloc_r+0x22>
 80104a6:	6025      	str	r5, [r4, #0]
 80104a8:	e7de      	b.n	8010468 <_malloc_r+0xa0>
 80104aa:	bf00      	nop
 80104ac:	20001010 	.word	0x20001010

080104b0 <_sbrk_r>:
 80104b0:	b538      	push	{r3, r4, r5, lr}
 80104b2:	4d06      	ldr	r5, [pc, #24]	; (80104cc <_sbrk_r+0x1c>)
 80104b4:	2300      	movs	r3, #0
 80104b6:	4604      	mov	r4, r0
 80104b8:	4608      	mov	r0, r1
 80104ba:	602b      	str	r3, [r5, #0]
 80104bc:	f002 f81e 	bl	80124fc <_sbrk>
 80104c0:	1c43      	adds	r3, r0, #1
 80104c2:	d102      	bne.n	80104ca <_sbrk_r+0x1a>
 80104c4:	682b      	ldr	r3, [r5, #0]
 80104c6:	b103      	cbz	r3, 80104ca <_sbrk_r+0x1a>
 80104c8:	6023      	str	r3, [r4, #0]
 80104ca:	bd38      	pop	{r3, r4, r5, pc}
 80104cc:	20001018 	.word	0x20001018

080104d0 <__assert_func>:
 80104d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80104d2:	4614      	mov	r4, r2
 80104d4:	461a      	mov	r2, r3
 80104d6:	4b09      	ldr	r3, [pc, #36]	; (80104fc <__assert_func+0x2c>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4605      	mov	r5, r0
 80104dc:	68d8      	ldr	r0, [r3, #12]
 80104de:	b14c      	cbz	r4, 80104f4 <__assert_func+0x24>
 80104e0:	4b07      	ldr	r3, [pc, #28]	; (8010500 <__assert_func+0x30>)
 80104e2:	9100      	str	r1, [sp, #0]
 80104e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80104e8:	4906      	ldr	r1, [pc, #24]	; (8010504 <__assert_func+0x34>)
 80104ea:	462b      	mov	r3, r5
 80104ec:	f000 f80e 	bl	801050c <fiprintf>
 80104f0:	f000 fa64 	bl	80109bc <abort>
 80104f4:	4b04      	ldr	r3, [pc, #16]	; (8010508 <__assert_func+0x38>)
 80104f6:	461c      	mov	r4, r3
 80104f8:	e7f3      	b.n	80104e2 <__assert_func+0x12>
 80104fa:	bf00      	nop
 80104fc:	20000044 	.word	0x20000044
 8010500:	080127dc 	.word	0x080127dc
 8010504:	080127e9 	.word	0x080127e9
 8010508:	08012817 	.word	0x08012817

0801050c <fiprintf>:
 801050c:	b40e      	push	{r1, r2, r3}
 801050e:	b503      	push	{r0, r1, lr}
 8010510:	4601      	mov	r1, r0
 8010512:	ab03      	add	r3, sp, #12
 8010514:	4805      	ldr	r0, [pc, #20]	; (801052c <fiprintf+0x20>)
 8010516:	f853 2b04 	ldr.w	r2, [r3], #4
 801051a:	6800      	ldr	r0, [r0, #0]
 801051c:	9301      	str	r3, [sp, #4]
 801051e:	f000 f84f 	bl	80105c0 <_vfiprintf_r>
 8010522:	b002      	add	sp, #8
 8010524:	f85d eb04 	ldr.w	lr, [sp], #4
 8010528:	b003      	add	sp, #12
 801052a:	4770      	bx	lr
 801052c:	20000044 	.word	0x20000044

08010530 <__ascii_mbtowc>:
 8010530:	b082      	sub	sp, #8
 8010532:	b901      	cbnz	r1, 8010536 <__ascii_mbtowc+0x6>
 8010534:	a901      	add	r1, sp, #4
 8010536:	b142      	cbz	r2, 801054a <__ascii_mbtowc+0x1a>
 8010538:	b14b      	cbz	r3, 801054e <__ascii_mbtowc+0x1e>
 801053a:	7813      	ldrb	r3, [r2, #0]
 801053c:	600b      	str	r3, [r1, #0]
 801053e:	7812      	ldrb	r2, [r2, #0]
 8010540:	1e10      	subs	r0, r2, #0
 8010542:	bf18      	it	ne
 8010544:	2001      	movne	r0, #1
 8010546:	b002      	add	sp, #8
 8010548:	4770      	bx	lr
 801054a:	4610      	mov	r0, r2
 801054c:	e7fb      	b.n	8010546 <__ascii_mbtowc+0x16>
 801054e:	f06f 0001 	mvn.w	r0, #1
 8010552:	e7f8      	b.n	8010546 <__ascii_mbtowc+0x16>

08010554 <__malloc_lock>:
 8010554:	4801      	ldr	r0, [pc, #4]	; (801055c <__malloc_lock+0x8>)
 8010556:	f000 bbf1 	b.w	8010d3c <__retarget_lock_acquire_recursive>
 801055a:	bf00      	nop
 801055c:	2000101c 	.word	0x2000101c

08010560 <__malloc_unlock>:
 8010560:	4801      	ldr	r0, [pc, #4]	; (8010568 <__malloc_unlock+0x8>)
 8010562:	f000 bbec 	b.w	8010d3e <__retarget_lock_release_recursive>
 8010566:	bf00      	nop
 8010568:	2000101c 	.word	0x2000101c

0801056c <__sfputc_r>:
 801056c:	6893      	ldr	r3, [r2, #8]
 801056e:	3b01      	subs	r3, #1
 8010570:	2b00      	cmp	r3, #0
 8010572:	b410      	push	{r4}
 8010574:	6093      	str	r3, [r2, #8]
 8010576:	da08      	bge.n	801058a <__sfputc_r+0x1e>
 8010578:	6994      	ldr	r4, [r2, #24]
 801057a:	42a3      	cmp	r3, r4
 801057c:	db01      	blt.n	8010582 <__sfputc_r+0x16>
 801057e:	290a      	cmp	r1, #10
 8010580:	d103      	bne.n	801058a <__sfputc_r+0x1e>
 8010582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010586:	f000 b94b 	b.w	8010820 <__swbuf_r>
 801058a:	6813      	ldr	r3, [r2, #0]
 801058c:	1c58      	adds	r0, r3, #1
 801058e:	6010      	str	r0, [r2, #0]
 8010590:	7019      	strb	r1, [r3, #0]
 8010592:	4608      	mov	r0, r1
 8010594:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010598:	4770      	bx	lr

0801059a <__sfputs_r>:
 801059a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801059c:	4606      	mov	r6, r0
 801059e:	460f      	mov	r7, r1
 80105a0:	4614      	mov	r4, r2
 80105a2:	18d5      	adds	r5, r2, r3
 80105a4:	42ac      	cmp	r4, r5
 80105a6:	d101      	bne.n	80105ac <__sfputs_r+0x12>
 80105a8:	2000      	movs	r0, #0
 80105aa:	e007      	b.n	80105bc <__sfputs_r+0x22>
 80105ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105b0:	463a      	mov	r2, r7
 80105b2:	4630      	mov	r0, r6
 80105b4:	f7ff ffda 	bl	801056c <__sfputc_r>
 80105b8:	1c43      	adds	r3, r0, #1
 80105ba:	d1f3      	bne.n	80105a4 <__sfputs_r+0xa>
 80105bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080105c0 <_vfiprintf_r>:
 80105c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105c4:	460d      	mov	r5, r1
 80105c6:	b09d      	sub	sp, #116	; 0x74
 80105c8:	4614      	mov	r4, r2
 80105ca:	4698      	mov	r8, r3
 80105cc:	4606      	mov	r6, r0
 80105ce:	b118      	cbz	r0, 80105d8 <_vfiprintf_r+0x18>
 80105d0:	6983      	ldr	r3, [r0, #24]
 80105d2:	b90b      	cbnz	r3, 80105d8 <_vfiprintf_r+0x18>
 80105d4:	f000 fb14 	bl	8010c00 <__sinit>
 80105d8:	4b89      	ldr	r3, [pc, #548]	; (8010800 <_vfiprintf_r+0x240>)
 80105da:	429d      	cmp	r5, r3
 80105dc:	d11b      	bne.n	8010616 <_vfiprintf_r+0x56>
 80105de:	6875      	ldr	r5, [r6, #4]
 80105e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105e2:	07d9      	lsls	r1, r3, #31
 80105e4:	d405      	bmi.n	80105f2 <_vfiprintf_r+0x32>
 80105e6:	89ab      	ldrh	r3, [r5, #12]
 80105e8:	059a      	lsls	r2, r3, #22
 80105ea:	d402      	bmi.n	80105f2 <_vfiprintf_r+0x32>
 80105ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80105ee:	f000 fba5 	bl	8010d3c <__retarget_lock_acquire_recursive>
 80105f2:	89ab      	ldrh	r3, [r5, #12]
 80105f4:	071b      	lsls	r3, r3, #28
 80105f6:	d501      	bpl.n	80105fc <_vfiprintf_r+0x3c>
 80105f8:	692b      	ldr	r3, [r5, #16]
 80105fa:	b9eb      	cbnz	r3, 8010638 <_vfiprintf_r+0x78>
 80105fc:	4629      	mov	r1, r5
 80105fe:	4630      	mov	r0, r6
 8010600:	f000 f96e 	bl	80108e0 <__swsetup_r>
 8010604:	b1c0      	cbz	r0, 8010638 <_vfiprintf_r+0x78>
 8010606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010608:	07dc      	lsls	r4, r3, #31
 801060a:	d50e      	bpl.n	801062a <_vfiprintf_r+0x6a>
 801060c:	f04f 30ff 	mov.w	r0, #4294967295
 8010610:	b01d      	add	sp, #116	; 0x74
 8010612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010616:	4b7b      	ldr	r3, [pc, #492]	; (8010804 <_vfiprintf_r+0x244>)
 8010618:	429d      	cmp	r5, r3
 801061a:	d101      	bne.n	8010620 <_vfiprintf_r+0x60>
 801061c:	68b5      	ldr	r5, [r6, #8]
 801061e:	e7df      	b.n	80105e0 <_vfiprintf_r+0x20>
 8010620:	4b79      	ldr	r3, [pc, #484]	; (8010808 <_vfiprintf_r+0x248>)
 8010622:	429d      	cmp	r5, r3
 8010624:	bf08      	it	eq
 8010626:	68f5      	ldreq	r5, [r6, #12]
 8010628:	e7da      	b.n	80105e0 <_vfiprintf_r+0x20>
 801062a:	89ab      	ldrh	r3, [r5, #12]
 801062c:	0598      	lsls	r0, r3, #22
 801062e:	d4ed      	bmi.n	801060c <_vfiprintf_r+0x4c>
 8010630:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010632:	f000 fb84 	bl	8010d3e <__retarget_lock_release_recursive>
 8010636:	e7e9      	b.n	801060c <_vfiprintf_r+0x4c>
 8010638:	2300      	movs	r3, #0
 801063a:	9309      	str	r3, [sp, #36]	; 0x24
 801063c:	2320      	movs	r3, #32
 801063e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010642:	f8cd 800c 	str.w	r8, [sp, #12]
 8010646:	2330      	movs	r3, #48	; 0x30
 8010648:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801080c <_vfiprintf_r+0x24c>
 801064c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010650:	f04f 0901 	mov.w	r9, #1
 8010654:	4623      	mov	r3, r4
 8010656:	469a      	mov	sl, r3
 8010658:	f813 2b01 	ldrb.w	r2, [r3], #1
 801065c:	b10a      	cbz	r2, 8010662 <_vfiprintf_r+0xa2>
 801065e:	2a25      	cmp	r2, #37	; 0x25
 8010660:	d1f9      	bne.n	8010656 <_vfiprintf_r+0x96>
 8010662:	ebba 0b04 	subs.w	fp, sl, r4
 8010666:	d00b      	beq.n	8010680 <_vfiprintf_r+0xc0>
 8010668:	465b      	mov	r3, fp
 801066a:	4622      	mov	r2, r4
 801066c:	4629      	mov	r1, r5
 801066e:	4630      	mov	r0, r6
 8010670:	f7ff ff93 	bl	801059a <__sfputs_r>
 8010674:	3001      	adds	r0, #1
 8010676:	f000 80aa 	beq.w	80107ce <_vfiprintf_r+0x20e>
 801067a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801067c:	445a      	add	r2, fp
 801067e:	9209      	str	r2, [sp, #36]	; 0x24
 8010680:	f89a 3000 	ldrb.w	r3, [sl]
 8010684:	2b00      	cmp	r3, #0
 8010686:	f000 80a2 	beq.w	80107ce <_vfiprintf_r+0x20e>
 801068a:	2300      	movs	r3, #0
 801068c:	f04f 32ff 	mov.w	r2, #4294967295
 8010690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010694:	f10a 0a01 	add.w	sl, sl, #1
 8010698:	9304      	str	r3, [sp, #16]
 801069a:	9307      	str	r3, [sp, #28]
 801069c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106a0:	931a      	str	r3, [sp, #104]	; 0x68
 80106a2:	4654      	mov	r4, sl
 80106a4:	2205      	movs	r2, #5
 80106a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106aa:	4858      	ldr	r0, [pc, #352]	; (801080c <_vfiprintf_r+0x24c>)
 80106ac:	f7ef fdb8 	bl	8000220 <memchr>
 80106b0:	9a04      	ldr	r2, [sp, #16]
 80106b2:	b9d8      	cbnz	r0, 80106ec <_vfiprintf_r+0x12c>
 80106b4:	06d1      	lsls	r1, r2, #27
 80106b6:	bf44      	itt	mi
 80106b8:	2320      	movmi	r3, #32
 80106ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106be:	0713      	lsls	r3, r2, #28
 80106c0:	bf44      	itt	mi
 80106c2:	232b      	movmi	r3, #43	; 0x2b
 80106c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106c8:	f89a 3000 	ldrb.w	r3, [sl]
 80106cc:	2b2a      	cmp	r3, #42	; 0x2a
 80106ce:	d015      	beq.n	80106fc <_vfiprintf_r+0x13c>
 80106d0:	9a07      	ldr	r2, [sp, #28]
 80106d2:	4654      	mov	r4, sl
 80106d4:	2000      	movs	r0, #0
 80106d6:	f04f 0c0a 	mov.w	ip, #10
 80106da:	4621      	mov	r1, r4
 80106dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106e0:	3b30      	subs	r3, #48	; 0x30
 80106e2:	2b09      	cmp	r3, #9
 80106e4:	d94e      	bls.n	8010784 <_vfiprintf_r+0x1c4>
 80106e6:	b1b0      	cbz	r0, 8010716 <_vfiprintf_r+0x156>
 80106e8:	9207      	str	r2, [sp, #28]
 80106ea:	e014      	b.n	8010716 <_vfiprintf_r+0x156>
 80106ec:	eba0 0308 	sub.w	r3, r0, r8
 80106f0:	fa09 f303 	lsl.w	r3, r9, r3
 80106f4:	4313      	orrs	r3, r2
 80106f6:	9304      	str	r3, [sp, #16]
 80106f8:	46a2      	mov	sl, r4
 80106fa:	e7d2      	b.n	80106a2 <_vfiprintf_r+0xe2>
 80106fc:	9b03      	ldr	r3, [sp, #12]
 80106fe:	1d19      	adds	r1, r3, #4
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	9103      	str	r1, [sp, #12]
 8010704:	2b00      	cmp	r3, #0
 8010706:	bfbb      	ittet	lt
 8010708:	425b      	neglt	r3, r3
 801070a:	f042 0202 	orrlt.w	r2, r2, #2
 801070e:	9307      	strge	r3, [sp, #28]
 8010710:	9307      	strlt	r3, [sp, #28]
 8010712:	bfb8      	it	lt
 8010714:	9204      	strlt	r2, [sp, #16]
 8010716:	7823      	ldrb	r3, [r4, #0]
 8010718:	2b2e      	cmp	r3, #46	; 0x2e
 801071a:	d10c      	bne.n	8010736 <_vfiprintf_r+0x176>
 801071c:	7863      	ldrb	r3, [r4, #1]
 801071e:	2b2a      	cmp	r3, #42	; 0x2a
 8010720:	d135      	bne.n	801078e <_vfiprintf_r+0x1ce>
 8010722:	9b03      	ldr	r3, [sp, #12]
 8010724:	1d1a      	adds	r2, r3, #4
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	9203      	str	r2, [sp, #12]
 801072a:	2b00      	cmp	r3, #0
 801072c:	bfb8      	it	lt
 801072e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010732:	3402      	adds	r4, #2
 8010734:	9305      	str	r3, [sp, #20]
 8010736:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801081c <_vfiprintf_r+0x25c>
 801073a:	7821      	ldrb	r1, [r4, #0]
 801073c:	2203      	movs	r2, #3
 801073e:	4650      	mov	r0, sl
 8010740:	f7ef fd6e 	bl	8000220 <memchr>
 8010744:	b140      	cbz	r0, 8010758 <_vfiprintf_r+0x198>
 8010746:	2340      	movs	r3, #64	; 0x40
 8010748:	eba0 000a 	sub.w	r0, r0, sl
 801074c:	fa03 f000 	lsl.w	r0, r3, r0
 8010750:	9b04      	ldr	r3, [sp, #16]
 8010752:	4303      	orrs	r3, r0
 8010754:	3401      	adds	r4, #1
 8010756:	9304      	str	r3, [sp, #16]
 8010758:	f814 1b01 	ldrb.w	r1, [r4], #1
 801075c:	482c      	ldr	r0, [pc, #176]	; (8010810 <_vfiprintf_r+0x250>)
 801075e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010762:	2206      	movs	r2, #6
 8010764:	f7ef fd5c 	bl	8000220 <memchr>
 8010768:	2800      	cmp	r0, #0
 801076a:	d03f      	beq.n	80107ec <_vfiprintf_r+0x22c>
 801076c:	4b29      	ldr	r3, [pc, #164]	; (8010814 <_vfiprintf_r+0x254>)
 801076e:	bb1b      	cbnz	r3, 80107b8 <_vfiprintf_r+0x1f8>
 8010770:	9b03      	ldr	r3, [sp, #12]
 8010772:	3307      	adds	r3, #7
 8010774:	f023 0307 	bic.w	r3, r3, #7
 8010778:	3308      	adds	r3, #8
 801077a:	9303      	str	r3, [sp, #12]
 801077c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801077e:	443b      	add	r3, r7
 8010780:	9309      	str	r3, [sp, #36]	; 0x24
 8010782:	e767      	b.n	8010654 <_vfiprintf_r+0x94>
 8010784:	fb0c 3202 	mla	r2, ip, r2, r3
 8010788:	460c      	mov	r4, r1
 801078a:	2001      	movs	r0, #1
 801078c:	e7a5      	b.n	80106da <_vfiprintf_r+0x11a>
 801078e:	2300      	movs	r3, #0
 8010790:	3401      	adds	r4, #1
 8010792:	9305      	str	r3, [sp, #20]
 8010794:	4619      	mov	r1, r3
 8010796:	f04f 0c0a 	mov.w	ip, #10
 801079a:	4620      	mov	r0, r4
 801079c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107a0:	3a30      	subs	r2, #48	; 0x30
 80107a2:	2a09      	cmp	r2, #9
 80107a4:	d903      	bls.n	80107ae <_vfiprintf_r+0x1ee>
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d0c5      	beq.n	8010736 <_vfiprintf_r+0x176>
 80107aa:	9105      	str	r1, [sp, #20]
 80107ac:	e7c3      	b.n	8010736 <_vfiprintf_r+0x176>
 80107ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80107b2:	4604      	mov	r4, r0
 80107b4:	2301      	movs	r3, #1
 80107b6:	e7f0      	b.n	801079a <_vfiprintf_r+0x1da>
 80107b8:	ab03      	add	r3, sp, #12
 80107ba:	9300      	str	r3, [sp, #0]
 80107bc:	462a      	mov	r2, r5
 80107be:	4b16      	ldr	r3, [pc, #88]	; (8010818 <_vfiprintf_r+0x258>)
 80107c0:	a904      	add	r1, sp, #16
 80107c2:	4630      	mov	r0, r6
 80107c4:	f7fd ff98 	bl	800e6f8 <_printf_float>
 80107c8:	4607      	mov	r7, r0
 80107ca:	1c78      	adds	r0, r7, #1
 80107cc:	d1d6      	bne.n	801077c <_vfiprintf_r+0x1bc>
 80107ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80107d0:	07d9      	lsls	r1, r3, #31
 80107d2:	d405      	bmi.n	80107e0 <_vfiprintf_r+0x220>
 80107d4:	89ab      	ldrh	r3, [r5, #12]
 80107d6:	059a      	lsls	r2, r3, #22
 80107d8:	d402      	bmi.n	80107e0 <_vfiprintf_r+0x220>
 80107da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80107dc:	f000 faaf 	bl	8010d3e <__retarget_lock_release_recursive>
 80107e0:	89ab      	ldrh	r3, [r5, #12]
 80107e2:	065b      	lsls	r3, r3, #25
 80107e4:	f53f af12 	bmi.w	801060c <_vfiprintf_r+0x4c>
 80107e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107ea:	e711      	b.n	8010610 <_vfiprintf_r+0x50>
 80107ec:	ab03      	add	r3, sp, #12
 80107ee:	9300      	str	r3, [sp, #0]
 80107f0:	462a      	mov	r2, r5
 80107f2:	4b09      	ldr	r3, [pc, #36]	; (8010818 <_vfiprintf_r+0x258>)
 80107f4:	a904      	add	r1, sp, #16
 80107f6:	4630      	mov	r0, r6
 80107f8:	f7fe fa22 	bl	800ec40 <_printf_i>
 80107fc:	e7e4      	b.n	80107c8 <_vfiprintf_r+0x208>
 80107fe:	bf00      	nop
 8010800:	08012954 	.word	0x08012954
 8010804:	08012974 	.word	0x08012974
 8010808:	08012934 	.word	0x08012934
 801080c:	08012822 	.word	0x08012822
 8010810:	0801282c 	.word	0x0801282c
 8010814:	0800e6f9 	.word	0x0800e6f9
 8010818:	0801059b 	.word	0x0801059b
 801081c:	08012828 	.word	0x08012828

08010820 <__swbuf_r>:
 8010820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010822:	460e      	mov	r6, r1
 8010824:	4614      	mov	r4, r2
 8010826:	4605      	mov	r5, r0
 8010828:	b118      	cbz	r0, 8010832 <__swbuf_r+0x12>
 801082a:	6983      	ldr	r3, [r0, #24]
 801082c:	b90b      	cbnz	r3, 8010832 <__swbuf_r+0x12>
 801082e:	f000 f9e7 	bl	8010c00 <__sinit>
 8010832:	4b21      	ldr	r3, [pc, #132]	; (80108b8 <__swbuf_r+0x98>)
 8010834:	429c      	cmp	r4, r3
 8010836:	d12b      	bne.n	8010890 <__swbuf_r+0x70>
 8010838:	686c      	ldr	r4, [r5, #4]
 801083a:	69a3      	ldr	r3, [r4, #24]
 801083c:	60a3      	str	r3, [r4, #8]
 801083e:	89a3      	ldrh	r3, [r4, #12]
 8010840:	071a      	lsls	r2, r3, #28
 8010842:	d52f      	bpl.n	80108a4 <__swbuf_r+0x84>
 8010844:	6923      	ldr	r3, [r4, #16]
 8010846:	b36b      	cbz	r3, 80108a4 <__swbuf_r+0x84>
 8010848:	6923      	ldr	r3, [r4, #16]
 801084a:	6820      	ldr	r0, [r4, #0]
 801084c:	1ac0      	subs	r0, r0, r3
 801084e:	6963      	ldr	r3, [r4, #20]
 8010850:	b2f6      	uxtb	r6, r6
 8010852:	4283      	cmp	r3, r0
 8010854:	4637      	mov	r7, r6
 8010856:	dc04      	bgt.n	8010862 <__swbuf_r+0x42>
 8010858:	4621      	mov	r1, r4
 801085a:	4628      	mov	r0, r5
 801085c:	f000 f93c 	bl	8010ad8 <_fflush_r>
 8010860:	bb30      	cbnz	r0, 80108b0 <__swbuf_r+0x90>
 8010862:	68a3      	ldr	r3, [r4, #8]
 8010864:	3b01      	subs	r3, #1
 8010866:	60a3      	str	r3, [r4, #8]
 8010868:	6823      	ldr	r3, [r4, #0]
 801086a:	1c5a      	adds	r2, r3, #1
 801086c:	6022      	str	r2, [r4, #0]
 801086e:	701e      	strb	r6, [r3, #0]
 8010870:	6963      	ldr	r3, [r4, #20]
 8010872:	3001      	adds	r0, #1
 8010874:	4283      	cmp	r3, r0
 8010876:	d004      	beq.n	8010882 <__swbuf_r+0x62>
 8010878:	89a3      	ldrh	r3, [r4, #12]
 801087a:	07db      	lsls	r3, r3, #31
 801087c:	d506      	bpl.n	801088c <__swbuf_r+0x6c>
 801087e:	2e0a      	cmp	r6, #10
 8010880:	d104      	bne.n	801088c <__swbuf_r+0x6c>
 8010882:	4621      	mov	r1, r4
 8010884:	4628      	mov	r0, r5
 8010886:	f000 f927 	bl	8010ad8 <_fflush_r>
 801088a:	b988      	cbnz	r0, 80108b0 <__swbuf_r+0x90>
 801088c:	4638      	mov	r0, r7
 801088e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010890:	4b0a      	ldr	r3, [pc, #40]	; (80108bc <__swbuf_r+0x9c>)
 8010892:	429c      	cmp	r4, r3
 8010894:	d101      	bne.n	801089a <__swbuf_r+0x7a>
 8010896:	68ac      	ldr	r4, [r5, #8]
 8010898:	e7cf      	b.n	801083a <__swbuf_r+0x1a>
 801089a:	4b09      	ldr	r3, [pc, #36]	; (80108c0 <__swbuf_r+0xa0>)
 801089c:	429c      	cmp	r4, r3
 801089e:	bf08      	it	eq
 80108a0:	68ec      	ldreq	r4, [r5, #12]
 80108a2:	e7ca      	b.n	801083a <__swbuf_r+0x1a>
 80108a4:	4621      	mov	r1, r4
 80108a6:	4628      	mov	r0, r5
 80108a8:	f000 f81a 	bl	80108e0 <__swsetup_r>
 80108ac:	2800      	cmp	r0, #0
 80108ae:	d0cb      	beq.n	8010848 <__swbuf_r+0x28>
 80108b0:	f04f 37ff 	mov.w	r7, #4294967295
 80108b4:	e7ea      	b.n	801088c <__swbuf_r+0x6c>
 80108b6:	bf00      	nop
 80108b8:	08012954 	.word	0x08012954
 80108bc:	08012974 	.word	0x08012974
 80108c0:	08012934 	.word	0x08012934

080108c4 <__ascii_wctomb>:
 80108c4:	b149      	cbz	r1, 80108da <__ascii_wctomb+0x16>
 80108c6:	2aff      	cmp	r2, #255	; 0xff
 80108c8:	bf85      	ittet	hi
 80108ca:	238a      	movhi	r3, #138	; 0x8a
 80108cc:	6003      	strhi	r3, [r0, #0]
 80108ce:	700a      	strbls	r2, [r1, #0]
 80108d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80108d4:	bf98      	it	ls
 80108d6:	2001      	movls	r0, #1
 80108d8:	4770      	bx	lr
 80108da:	4608      	mov	r0, r1
 80108dc:	4770      	bx	lr
	...

080108e0 <__swsetup_r>:
 80108e0:	4b32      	ldr	r3, [pc, #200]	; (80109ac <__swsetup_r+0xcc>)
 80108e2:	b570      	push	{r4, r5, r6, lr}
 80108e4:	681d      	ldr	r5, [r3, #0]
 80108e6:	4606      	mov	r6, r0
 80108e8:	460c      	mov	r4, r1
 80108ea:	b125      	cbz	r5, 80108f6 <__swsetup_r+0x16>
 80108ec:	69ab      	ldr	r3, [r5, #24]
 80108ee:	b913      	cbnz	r3, 80108f6 <__swsetup_r+0x16>
 80108f0:	4628      	mov	r0, r5
 80108f2:	f000 f985 	bl	8010c00 <__sinit>
 80108f6:	4b2e      	ldr	r3, [pc, #184]	; (80109b0 <__swsetup_r+0xd0>)
 80108f8:	429c      	cmp	r4, r3
 80108fa:	d10f      	bne.n	801091c <__swsetup_r+0x3c>
 80108fc:	686c      	ldr	r4, [r5, #4]
 80108fe:	89a3      	ldrh	r3, [r4, #12]
 8010900:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010904:	0719      	lsls	r1, r3, #28
 8010906:	d42c      	bmi.n	8010962 <__swsetup_r+0x82>
 8010908:	06dd      	lsls	r5, r3, #27
 801090a:	d411      	bmi.n	8010930 <__swsetup_r+0x50>
 801090c:	2309      	movs	r3, #9
 801090e:	6033      	str	r3, [r6, #0]
 8010910:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010914:	81a3      	strh	r3, [r4, #12]
 8010916:	f04f 30ff 	mov.w	r0, #4294967295
 801091a:	e03e      	b.n	801099a <__swsetup_r+0xba>
 801091c:	4b25      	ldr	r3, [pc, #148]	; (80109b4 <__swsetup_r+0xd4>)
 801091e:	429c      	cmp	r4, r3
 8010920:	d101      	bne.n	8010926 <__swsetup_r+0x46>
 8010922:	68ac      	ldr	r4, [r5, #8]
 8010924:	e7eb      	b.n	80108fe <__swsetup_r+0x1e>
 8010926:	4b24      	ldr	r3, [pc, #144]	; (80109b8 <__swsetup_r+0xd8>)
 8010928:	429c      	cmp	r4, r3
 801092a:	bf08      	it	eq
 801092c:	68ec      	ldreq	r4, [r5, #12]
 801092e:	e7e6      	b.n	80108fe <__swsetup_r+0x1e>
 8010930:	0758      	lsls	r0, r3, #29
 8010932:	d512      	bpl.n	801095a <__swsetup_r+0x7a>
 8010934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010936:	b141      	cbz	r1, 801094a <__swsetup_r+0x6a>
 8010938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801093c:	4299      	cmp	r1, r3
 801093e:	d002      	beq.n	8010946 <__swsetup_r+0x66>
 8010940:	4630      	mov	r0, r6
 8010942:	f7ff fcd5 	bl	80102f0 <_free_r>
 8010946:	2300      	movs	r3, #0
 8010948:	6363      	str	r3, [r4, #52]	; 0x34
 801094a:	89a3      	ldrh	r3, [r4, #12]
 801094c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010950:	81a3      	strh	r3, [r4, #12]
 8010952:	2300      	movs	r3, #0
 8010954:	6063      	str	r3, [r4, #4]
 8010956:	6923      	ldr	r3, [r4, #16]
 8010958:	6023      	str	r3, [r4, #0]
 801095a:	89a3      	ldrh	r3, [r4, #12]
 801095c:	f043 0308 	orr.w	r3, r3, #8
 8010960:	81a3      	strh	r3, [r4, #12]
 8010962:	6923      	ldr	r3, [r4, #16]
 8010964:	b94b      	cbnz	r3, 801097a <__swsetup_r+0x9a>
 8010966:	89a3      	ldrh	r3, [r4, #12]
 8010968:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801096c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010970:	d003      	beq.n	801097a <__swsetup_r+0x9a>
 8010972:	4621      	mov	r1, r4
 8010974:	4630      	mov	r0, r6
 8010976:	f000 fa09 	bl	8010d8c <__smakebuf_r>
 801097a:	89a0      	ldrh	r0, [r4, #12]
 801097c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010980:	f010 0301 	ands.w	r3, r0, #1
 8010984:	d00a      	beq.n	801099c <__swsetup_r+0xbc>
 8010986:	2300      	movs	r3, #0
 8010988:	60a3      	str	r3, [r4, #8]
 801098a:	6963      	ldr	r3, [r4, #20]
 801098c:	425b      	negs	r3, r3
 801098e:	61a3      	str	r3, [r4, #24]
 8010990:	6923      	ldr	r3, [r4, #16]
 8010992:	b943      	cbnz	r3, 80109a6 <__swsetup_r+0xc6>
 8010994:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010998:	d1ba      	bne.n	8010910 <__swsetup_r+0x30>
 801099a:	bd70      	pop	{r4, r5, r6, pc}
 801099c:	0781      	lsls	r1, r0, #30
 801099e:	bf58      	it	pl
 80109a0:	6963      	ldrpl	r3, [r4, #20]
 80109a2:	60a3      	str	r3, [r4, #8]
 80109a4:	e7f4      	b.n	8010990 <__swsetup_r+0xb0>
 80109a6:	2000      	movs	r0, #0
 80109a8:	e7f7      	b.n	801099a <__swsetup_r+0xba>
 80109aa:	bf00      	nop
 80109ac:	20000044 	.word	0x20000044
 80109b0:	08012954 	.word	0x08012954
 80109b4:	08012974 	.word	0x08012974
 80109b8:	08012934 	.word	0x08012934

080109bc <abort>:
 80109bc:	b508      	push	{r3, lr}
 80109be:	2006      	movs	r0, #6
 80109c0:	f000 fa4c 	bl	8010e5c <raise>
 80109c4:	2001      	movs	r0, #1
 80109c6:	f001 fdaf 	bl	8012528 <_exit>
	...

080109cc <__sflush_r>:
 80109cc:	898a      	ldrh	r2, [r1, #12]
 80109ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109d2:	4605      	mov	r5, r0
 80109d4:	0710      	lsls	r0, r2, #28
 80109d6:	460c      	mov	r4, r1
 80109d8:	d458      	bmi.n	8010a8c <__sflush_r+0xc0>
 80109da:	684b      	ldr	r3, [r1, #4]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	dc05      	bgt.n	80109ec <__sflush_r+0x20>
 80109e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	dc02      	bgt.n	80109ec <__sflush_r+0x20>
 80109e6:	2000      	movs	r0, #0
 80109e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80109ee:	2e00      	cmp	r6, #0
 80109f0:	d0f9      	beq.n	80109e6 <__sflush_r+0x1a>
 80109f2:	2300      	movs	r3, #0
 80109f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80109f8:	682f      	ldr	r7, [r5, #0]
 80109fa:	602b      	str	r3, [r5, #0]
 80109fc:	d032      	beq.n	8010a64 <__sflush_r+0x98>
 80109fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a00:	89a3      	ldrh	r3, [r4, #12]
 8010a02:	075a      	lsls	r2, r3, #29
 8010a04:	d505      	bpl.n	8010a12 <__sflush_r+0x46>
 8010a06:	6863      	ldr	r3, [r4, #4]
 8010a08:	1ac0      	subs	r0, r0, r3
 8010a0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a0c:	b10b      	cbz	r3, 8010a12 <__sflush_r+0x46>
 8010a0e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a10:	1ac0      	subs	r0, r0, r3
 8010a12:	2300      	movs	r3, #0
 8010a14:	4602      	mov	r2, r0
 8010a16:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a18:	6a21      	ldr	r1, [r4, #32]
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	47b0      	blx	r6
 8010a1e:	1c43      	adds	r3, r0, #1
 8010a20:	89a3      	ldrh	r3, [r4, #12]
 8010a22:	d106      	bne.n	8010a32 <__sflush_r+0x66>
 8010a24:	6829      	ldr	r1, [r5, #0]
 8010a26:	291d      	cmp	r1, #29
 8010a28:	d82c      	bhi.n	8010a84 <__sflush_r+0xb8>
 8010a2a:	4a2a      	ldr	r2, [pc, #168]	; (8010ad4 <__sflush_r+0x108>)
 8010a2c:	40ca      	lsrs	r2, r1
 8010a2e:	07d6      	lsls	r6, r2, #31
 8010a30:	d528      	bpl.n	8010a84 <__sflush_r+0xb8>
 8010a32:	2200      	movs	r2, #0
 8010a34:	6062      	str	r2, [r4, #4]
 8010a36:	04d9      	lsls	r1, r3, #19
 8010a38:	6922      	ldr	r2, [r4, #16]
 8010a3a:	6022      	str	r2, [r4, #0]
 8010a3c:	d504      	bpl.n	8010a48 <__sflush_r+0x7c>
 8010a3e:	1c42      	adds	r2, r0, #1
 8010a40:	d101      	bne.n	8010a46 <__sflush_r+0x7a>
 8010a42:	682b      	ldr	r3, [r5, #0]
 8010a44:	b903      	cbnz	r3, 8010a48 <__sflush_r+0x7c>
 8010a46:	6560      	str	r0, [r4, #84]	; 0x54
 8010a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a4a:	602f      	str	r7, [r5, #0]
 8010a4c:	2900      	cmp	r1, #0
 8010a4e:	d0ca      	beq.n	80109e6 <__sflush_r+0x1a>
 8010a50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a54:	4299      	cmp	r1, r3
 8010a56:	d002      	beq.n	8010a5e <__sflush_r+0x92>
 8010a58:	4628      	mov	r0, r5
 8010a5a:	f7ff fc49 	bl	80102f0 <_free_r>
 8010a5e:	2000      	movs	r0, #0
 8010a60:	6360      	str	r0, [r4, #52]	; 0x34
 8010a62:	e7c1      	b.n	80109e8 <__sflush_r+0x1c>
 8010a64:	6a21      	ldr	r1, [r4, #32]
 8010a66:	2301      	movs	r3, #1
 8010a68:	4628      	mov	r0, r5
 8010a6a:	47b0      	blx	r6
 8010a6c:	1c41      	adds	r1, r0, #1
 8010a6e:	d1c7      	bne.n	8010a00 <__sflush_r+0x34>
 8010a70:	682b      	ldr	r3, [r5, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d0c4      	beq.n	8010a00 <__sflush_r+0x34>
 8010a76:	2b1d      	cmp	r3, #29
 8010a78:	d001      	beq.n	8010a7e <__sflush_r+0xb2>
 8010a7a:	2b16      	cmp	r3, #22
 8010a7c:	d101      	bne.n	8010a82 <__sflush_r+0xb6>
 8010a7e:	602f      	str	r7, [r5, #0]
 8010a80:	e7b1      	b.n	80109e6 <__sflush_r+0x1a>
 8010a82:	89a3      	ldrh	r3, [r4, #12]
 8010a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a88:	81a3      	strh	r3, [r4, #12]
 8010a8a:	e7ad      	b.n	80109e8 <__sflush_r+0x1c>
 8010a8c:	690f      	ldr	r7, [r1, #16]
 8010a8e:	2f00      	cmp	r7, #0
 8010a90:	d0a9      	beq.n	80109e6 <__sflush_r+0x1a>
 8010a92:	0793      	lsls	r3, r2, #30
 8010a94:	680e      	ldr	r6, [r1, #0]
 8010a96:	bf08      	it	eq
 8010a98:	694b      	ldreq	r3, [r1, #20]
 8010a9a:	600f      	str	r7, [r1, #0]
 8010a9c:	bf18      	it	ne
 8010a9e:	2300      	movne	r3, #0
 8010aa0:	eba6 0807 	sub.w	r8, r6, r7
 8010aa4:	608b      	str	r3, [r1, #8]
 8010aa6:	f1b8 0f00 	cmp.w	r8, #0
 8010aaa:	dd9c      	ble.n	80109e6 <__sflush_r+0x1a>
 8010aac:	6a21      	ldr	r1, [r4, #32]
 8010aae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ab0:	4643      	mov	r3, r8
 8010ab2:	463a      	mov	r2, r7
 8010ab4:	4628      	mov	r0, r5
 8010ab6:	47b0      	blx	r6
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	dc06      	bgt.n	8010aca <__sflush_r+0xfe>
 8010abc:	89a3      	ldrh	r3, [r4, #12]
 8010abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ac2:	81a3      	strh	r3, [r4, #12]
 8010ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ac8:	e78e      	b.n	80109e8 <__sflush_r+0x1c>
 8010aca:	4407      	add	r7, r0
 8010acc:	eba8 0800 	sub.w	r8, r8, r0
 8010ad0:	e7e9      	b.n	8010aa6 <__sflush_r+0xda>
 8010ad2:	bf00      	nop
 8010ad4:	20400001 	.word	0x20400001

08010ad8 <_fflush_r>:
 8010ad8:	b538      	push	{r3, r4, r5, lr}
 8010ada:	690b      	ldr	r3, [r1, #16]
 8010adc:	4605      	mov	r5, r0
 8010ade:	460c      	mov	r4, r1
 8010ae0:	b913      	cbnz	r3, 8010ae8 <_fflush_r+0x10>
 8010ae2:	2500      	movs	r5, #0
 8010ae4:	4628      	mov	r0, r5
 8010ae6:	bd38      	pop	{r3, r4, r5, pc}
 8010ae8:	b118      	cbz	r0, 8010af2 <_fflush_r+0x1a>
 8010aea:	6983      	ldr	r3, [r0, #24]
 8010aec:	b90b      	cbnz	r3, 8010af2 <_fflush_r+0x1a>
 8010aee:	f000 f887 	bl	8010c00 <__sinit>
 8010af2:	4b14      	ldr	r3, [pc, #80]	; (8010b44 <_fflush_r+0x6c>)
 8010af4:	429c      	cmp	r4, r3
 8010af6:	d11b      	bne.n	8010b30 <_fflush_r+0x58>
 8010af8:	686c      	ldr	r4, [r5, #4]
 8010afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d0ef      	beq.n	8010ae2 <_fflush_r+0xa>
 8010b02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010b04:	07d0      	lsls	r0, r2, #31
 8010b06:	d404      	bmi.n	8010b12 <_fflush_r+0x3a>
 8010b08:	0599      	lsls	r1, r3, #22
 8010b0a:	d402      	bmi.n	8010b12 <_fflush_r+0x3a>
 8010b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b0e:	f000 f915 	bl	8010d3c <__retarget_lock_acquire_recursive>
 8010b12:	4628      	mov	r0, r5
 8010b14:	4621      	mov	r1, r4
 8010b16:	f7ff ff59 	bl	80109cc <__sflush_r>
 8010b1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b1c:	07da      	lsls	r2, r3, #31
 8010b1e:	4605      	mov	r5, r0
 8010b20:	d4e0      	bmi.n	8010ae4 <_fflush_r+0xc>
 8010b22:	89a3      	ldrh	r3, [r4, #12]
 8010b24:	059b      	lsls	r3, r3, #22
 8010b26:	d4dd      	bmi.n	8010ae4 <_fflush_r+0xc>
 8010b28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b2a:	f000 f908 	bl	8010d3e <__retarget_lock_release_recursive>
 8010b2e:	e7d9      	b.n	8010ae4 <_fflush_r+0xc>
 8010b30:	4b05      	ldr	r3, [pc, #20]	; (8010b48 <_fflush_r+0x70>)
 8010b32:	429c      	cmp	r4, r3
 8010b34:	d101      	bne.n	8010b3a <_fflush_r+0x62>
 8010b36:	68ac      	ldr	r4, [r5, #8]
 8010b38:	e7df      	b.n	8010afa <_fflush_r+0x22>
 8010b3a:	4b04      	ldr	r3, [pc, #16]	; (8010b4c <_fflush_r+0x74>)
 8010b3c:	429c      	cmp	r4, r3
 8010b3e:	bf08      	it	eq
 8010b40:	68ec      	ldreq	r4, [r5, #12]
 8010b42:	e7da      	b.n	8010afa <_fflush_r+0x22>
 8010b44:	08012954 	.word	0x08012954
 8010b48:	08012974 	.word	0x08012974
 8010b4c:	08012934 	.word	0x08012934

08010b50 <std>:
 8010b50:	2300      	movs	r3, #0
 8010b52:	b510      	push	{r4, lr}
 8010b54:	4604      	mov	r4, r0
 8010b56:	e9c0 3300 	strd	r3, r3, [r0]
 8010b5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010b5e:	6083      	str	r3, [r0, #8]
 8010b60:	8181      	strh	r1, [r0, #12]
 8010b62:	6643      	str	r3, [r0, #100]	; 0x64
 8010b64:	81c2      	strh	r2, [r0, #14]
 8010b66:	6183      	str	r3, [r0, #24]
 8010b68:	4619      	mov	r1, r3
 8010b6a:	2208      	movs	r2, #8
 8010b6c:	305c      	adds	r0, #92	; 0x5c
 8010b6e:	f7fd fd1b 	bl	800e5a8 <memset>
 8010b72:	4b05      	ldr	r3, [pc, #20]	; (8010b88 <std+0x38>)
 8010b74:	6263      	str	r3, [r4, #36]	; 0x24
 8010b76:	4b05      	ldr	r3, [pc, #20]	; (8010b8c <std+0x3c>)
 8010b78:	62a3      	str	r3, [r4, #40]	; 0x28
 8010b7a:	4b05      	ldr	r3, [pc, #20]	; (8010b90 <std+0x40>)
 8010b7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010b7e:	4b05      	ldr	r3, [pc, #20]	; (8010b94 <std+0x44>)
 8010b80:	6224      	str	r4, [r4, #32]
 8010b82:	6323      	str	r3, [r4, #48]	; 0x30
 8010b84:	bd10      	pop	{r4, pc}
 8010b86:	bf00      	nop
 8010b88:	08010e95 	.word	0x08010e95
 8010b8c:	08010eb7 	.word	0x08010eb7
 8010b90:	08010eef 	.word	0x08010eef
 8010b94:	08010f13 	.word	0x08010f13

08010b98 <_cleanup_r>:
 8010b98:	4901      	ldr	r1, [pc, #4]	; (8010ba0 <_cleanup_r+0x8>)
 8010b9a:	f000 b8af 	b.w	8010cfc <_fwalk_reent>
 8010b9e:	bf00      	nop
 8010ba0:	08010ad9 	.word	0x08010ad9

08010ba4 <__sfmoreglue>:
 8010ba4:	b570      	push	{r4, r5, r6, lr}
 8010ba6:	2268      	movs	r2, #104	; 0x68
 8010ba8:	1e4d      	subs	r5, r1, #1
 8010baa:	4355      	muls	r5, r2
 8010bac:	460e      	mov	r6, r1
 8010bae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010bb2:	f7ff fc09 	bl	80103c8 <_malloc_r>
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	b140      	cbz	r0, 8010bcc <__sfmoreglue+0x28>
 8010bba:	2100      	movs	r1, #0
 8010bbc:	e9c0 1600 	strd	r1, r6, [r0]
 8010bc0:	300c      	adds	r0, #12
 8010bc2:	60a0      	str	r0, [r4, #8]
 8010bc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010bc8:	f7fd fcee 	bl	800e5a8 <memset>
 8010bcc:	4620      	mov	r0, r4
 8010bce:	bd70      	pop	{r4, r5, r6, pc}

08010bd0 <__sfp_lock_acquire>:
 8010bd0:	4801      	ldr	r0, [pc, #4]	; (8010bd8 <__sfp_lock_acquire+0x8>)
 8010bd2:	f000 b8b3 	b.w	8010d3c <__retarget_lock_acquire_recursive>
 8010bd6:	bf00      	nop
 8010bd8:	2000101d 	.word	0x2000101d

08010bdc <__sfp_lock_release>:
 8010bdc:	4801      	ldr	r0, [pc, #4]	; (8010be4 <__sfp_lock_release+0x8>)
 8010bde:	f000 b8ae 	b.w	8010d3e <__retarget_lock_release_recursive>
 8010be2:	bf00      	nop
 8010be4:	2000101d 	.word	0x2000101d

08010be8 <__sinit_lock_acquire>:
 8010be8:	4801      	ldr	r0, [pc, #4]	; (8010bf0 <__sinit_lock_acquire+0x8>)
 8010bea:	f000 b8a7 	b.w	8010d3c <__retarget_lock_acquire_recursive>
 8010bee:	bf00      	nop
 8010bf0:	2000101e 	.word	0x2000101e

08010bf4 <__sinit_lock_release>:
 8010bf4:	4801      	ldr	r0, [pc, #4]	; (8010bfc <__sinit_lock_release+0x8>)
 8010bf6:	f000 b8a2 	b.w	8010d3e <__retarget_lock_release_recursive>
 8010bfa:	bf00      	nop
 8010bfc:	2000101e 	.word	0x2000101e

08010c00 <__sinit>:
 8010c00:	b510      	push	{r4, lr}
 8010c02:	4604      	mov	r4, r0
 8010c04:	f7ff fff0 	bl	8010be8 <__sinit_lock_acquire>
 8010c08:	69a3      	ldr	r3, [r4, #24]
 8010c0a:	b11b      	cbz	r3, 8010c14 <__sinit+0x14>
 8010c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c10:	f7ff bff0 	b.w	8010bf4 <__sinit_lock_release>
 8010c14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010c18:	6523      	str	r3, [r4, #80]	; 0x50
 8010c1a:	4b13      	ldr	r3, [pc, #76]	; (8010c68 <__sinit+0x68>)
 8010c1c:	4a13      	ldr	r2, [pc, #76]	; (8010c6c <__sinit+0x6c>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	62a2      	str	r2, [r4, #40]	; 0x28
 8010c22:	42a3      	cmp	r3, r4
 8010c24:	bf04      	itt	eq
 8010c26:	2301      	moveq	r3, #1
 8010c28:	61a3      	streq	r3, [r4, #24]
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	f000 f820 	bl	8010c70 <__sfp>
 8010c30:	6060      	str	r0, [r4, #4]
 8010c32:	4620      	mov	r0, r4
 8010c34:	f000 f81c 	bl	8010c70 <__sfp>
 8010c38:	60a0      	str	r0, [r4, #8]
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f000 f818 	bl	8010c70 <__sfp>
 8010c40:	2200      	movs	r2, #0
 8010c42:	60e0      	str	r0, [r4, #12]
 8010c44:	2104      	movs	r1, #4
 8010c46:	6860      	ldr	r0, [r4, #4]
 8010c48:	f7ff ff82 	bl	8010b50 <std>
 8010c4c:	68a0      	ldr	r0, [r4, #8]
 8010c4e:	2201      	movs	r2, #1
 8010c50:	2109      	movs	r1, #9
 8010c52:	f7ff ff7d 	bl	8010b50 <std>
 8010c56:	68e0      	ldr	r0, [r4, #12]
 8010c58:	2202      	movs	r2, #2
 8010c5a:	2112      	movs	r1, #18
 8010c5c:	f7ff ff78 	bl	8010b50 <std>
 8010c60:	2301      	movs	r3, #1
 8010c62:	61a3      	str	r3, [r4, #24]
 8010c64:	e7d2      	b.n	8010c0c <__sinit+0xc>
 8010c66:	bf00      	nop
 8010c68:	080125bc 	.word	0x080125bc
 8010c6c:	08010b99 	.word	0x08010b99

08010c70 <__sfp>:
 8010c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c72:	4607      	mov	r7, r0
 8010c74:	f7ff ffac 	bl	8010bd0 <__sfp_lock_acquire>
 8010c78:	4b1e      	ldr	r3, [pc, #120]	; (8010cf4 <__sfp+0x84>)
 8010c7a:	681e      	ldr	r6, [r3, #0]
 8010c7c:	69b3      	ldr	r3, [r6, #24]
 8010c7e:	b913      	cbnz	r3, 8010c86 <__sfp+0x16>
 8010c80:	4630      	mov	r0, r6
 8010c82:	f7ff ffbd 	bl	8010c00 <__sinit>
 8010c86:	3648      	adds	r6, #72	; 0x48
 8010c88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010c8c:	3b01      	subs	r3, #1
 8010c8e:	d503      	bpl.n	8010c98 <__sfp+0x28>
 8010c90:	6833      	ldr	r3, [r6, #0]
 8010c92:	b30b      	cbz	r3, 8010cd8 <__sfp+0x68>
 8010c94:	6836      	ldr	r6, [r6, #0]
 8010c96:	e7f7      	b.n	8010c88 <__sfp+0x18>
 8010c98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010c9c:	b9d5      	cbnz	r5, 8010cd4 <__sfp+0x64>
 8010c9e:	4b16      	ldr	r3, [pc, #88]	; (8010cf8 <__sfp+0x88>)
 8010ca0:	60e3      	str	r3, [r4, #12]
 8010ca2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010ca6:	6665      	str	r5, [r4, #100]	; 0x64
 8010ca8:	f000 f847 	bl	8010d3a <__retarget_lock_init_recursive>
 8010cac:	f7ff ff96 	bl	8010bdc <__sfp_lock_release>
 8010cb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010cb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010cb8:	6025      	str	r5, [r4, #0]
 8010cba:	61a5      	str	r5, [r4, #24]
 8010cbc:	2208      	movs	r2, #8
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010cc4:	f7fd fc70 	bl	800e5a8 <memset>
 8010cc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010ccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cd4:	3468      	adds	r4, #104	; 0x68
 8010cd6:	e7d9      	b.n	8010c8c <__sfp+0x1c>
 8010cd8:	2104      	movs	r1, #4
 8010cda:	4638      	mov	r0, r7
 8010cdc:	f7ff ff62 	bl	8010ba4 <__sfmoreglue>
 8010ce0:	4604      	mov	r4, r0
 8010ce2:	6030      	str	r0, [r6, #0]
 8010ce4:	2800      	cmp	r0, #0
 8010ce6:	d1d5      	bne.n	8010c94 <__sfp+0x24>
 8010ce8:	f7ff ff78 	bl	8010bdc <__sfp_lock_release>
 8010cec:	230c      	movs	r3, #12
 8010cee:	603b      	str	r3, [r7, #0]
 8010cf0:	e7ee      	b.n	8010cd0 <__sfp+0x60>
 8010cf2:	bf00      	nop
 8010cf4:	080125bc 	.word	0x080125bc
 8010cf8:	ffff0001 	.word	0xffff0001

08010cfc <_fwalk_reent>:
 8010cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d00:	4606      	mov	r6, r0
 8010d02:	4688      	mov	r8, r1
 8010d04:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010d08:	2700      	movs	r7, #0
 8010d0a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010d0e:	f1b9 0901 	subs.w	r9, r9, #1
 8010d12:	d505      	bpl.n	8010d20 <_fwalk_reent+0x24>
 8010d14:	6824      	ldr	r4, [r4, #0]
 8010d16:	2c00      	cmp	r4, #0
 8010d18:	d1f7      	bne.n	8010d0a <_fwalk_reent+0xe>
 8010d1a:	4638      	mov	r0, r7
 8010d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d20:	89ab      	ldrh	r3, [r5, #12]
 8010d22:	2b01      	cmp	r3, #1
 8010d24:	d907      	bls.n	8010d36 <_fwalk_reent+0x3a>
 8010d26:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010d2a:	3301      	adds	r3, #1
 8010d2c:	d003      	beq.n	8010d36 <_fwalk_reent+0x3a>
 8010d2e:	4629      	mov	r1, r5
 8010d30:	4630      	mov	r0, r6
 8010d32:	47c0      	blx	r8
 8010d34:	4307      	orrs	r7, r0
 8010d36:	3568      	adds	r5, #104	; 0x68
 8010d38:	e7e9      	b.n	8010d0e <_fwalk_reent+0x12>

08010d3a <__retarget_lock_init_recursive>:
 8010d3a:	4770      	bx	lr

08010d3c <__retarget_lock_acquire_recursive>:
 8010d3c:	4770      	bx	lr

08010d3e <__retarget_lock_release_recursive>:
 8010d3e:	4770      	bx	lr

08010d40 <__swhatbuf_r>:
 8010d40:	b570      	push	{r4, r5, r6, lr}
 8010d42:	460e      	mov	r6, r1
 8010d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d48:	2900      	cmp	r1, #0
 8010d4a:	b096      	sub	sp, #88	; 0x58
 8010d4c:	4614      	mov	r4, r2
 8010d4e:	461d      	mov	r5, r3
 8010d50:	da08      	bge.n	8010d64 <__swhatbuf_r+0x24>
 8010d52:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010d56:	2200      	movs	r2, #0
 8010d58:	602a      	str	r2, [r5, #0]
 8010d5a:	061a      	lsls	r2, r3, #24
 8010d5c:	d410      	bmi.n	8010d80 <__swhatbuf_r+0x40>
 8010d5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d62:	e00e      	b.n	8010d82 <__swhatbuf_r+0x42>
 8010d64:	466a      	mov	r2, sp
 8010d66:	f000 f8fb 	bl	8010f60 <_fstat_r>
 8010d6a:	2800      	cmp	r0, #0
 8010d6c:	dbf1      	blt.n	8010d52 <__swhatbuf_r+0x12>
 8010d6e:	9a01      	ldr	r2, [sp, #4]
 8010d70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010d74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010d78:	425a      	negs	r2, r3
 8010d7a:	415a      	adcs	r2, r3
 8010d7c:	602a      	str	r2, [r5, #0]
 8010d7e:	e7ee      	b.n	8010d5e <__swhatbuf_r+0x1e>
 8010d80:	2340      	movs	r3, #64	; 0x40
 8010d82:	2000      	movs	r0, #0
 8010d84:	6023      	str	r3, [r4, #0]
 8010d86:	b016      	add	sp, #88	; 0x58
 8010d88:	bd70      	pop	{r4, r5, r6, pc}
	...

08010d8c <__smakebuf_r>:
 8010d8c:	898b      	ldrh	r3, [r1, #12]
 8010d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010d90:	079d      	lsls	r5, r3, #30
 8010d92:	4606      	mov	r6, r0
 8010d94:	460c      	mov	r4, r1
 8010d96:	d507      	bpl.n	8010da8 <__smakebuf_r+0x1c>
 8010d98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010d9c:	6023      	str	r3, [r4, #0]
 8010d9e:	6123      	str	r3, [r4, #16]
 8010da0:	2301      	movs	r3, #1
 8010da2:	6163      	str	r3, [r4, #20]
 8010da4:	b002      	add	sp, #8
 8010da6:	bd70      	pop	{r4, r5, r6, pc}
 8010da8:	ab01      	add	r3, sp, #4
 8010daa:	466a      	mov	r2, sp
 8010dac:	f7ff ffc8 	bl	8010d40 <__swhatbuf_r>
 8010db0:	9900      	ldr	r1, [sp, #0]
 8010db2:	4605      	mov	r5, r0
 8010db4:	4630      	mov	r0, r6
 8010db6:	f7ff fb07 	bl	80103c8 <_malloc_r>
 8010dba:	b948      	cbnz	r0, 8010dd0 <__smakebuf_r+0x44>
 8010dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dc0:	059a      	lsls	r2, r3, #22
 8010dc2:	d4ef      	bmi.n	8010da4 <__smakebuf_r+0x18>
 8010dc4:	f023 0303 	bic.w	r3, r3, #3
 8010dc8:	f043 0302 	orr.w	r3, r3, #2
 8010dcc:	81a3      	strh	r3, [r4, #12]
 8010dce:	e7e3      	b.n	8010d98 <__smakebuf_r+0xc>
 8010dd0:	4b0d      	ldr	r3, [pc, #52]	; (8010e08 <__smakebuf_r+0x7c>)
 8010dd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8010dd4:	89a3      	ldrh	r3, [r4, #12]
 8010dd6:	6020      	str	r0, [r4, #0]
 8010dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ddc:	81a3      	strh	r3, [r4, #12]
 8010dde:	9b00      	ldr	r3, [sp, #0]
 8010de0:	6163      	str	r3, [r4, #20]
 8010de2:	9b01      	ldr	r3, [sp, #4]
 8010de4:	6120      	str	r0, [r4, #16]
 8010de6:	b15b      	cbz	r3, 8010e00 <__smakebuf_r+0x74>
 8010de8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dec:	4630      	mov	r0, r6
 8010dee:	f000 f8c9 	bl	8010f84 <_isatty_r>
 8010df2:	b128      	cbz	r0, 8010e00 <__smakebuf_r+0x74>
 8010df4:	89a3      	ldrh	r3, [r4, #12]
 8010df6:	f023 0303 	bic.w	r3, r3, #3
 8010dfa:	f043 0301 	orr.w	r3, r3, #1
 8010dfe:	81a3      	strh	r3, [r4, #12]
 8010e00:	89a0      	ldrh	r0, [r4, #12]
 8010e02:	4305      	orrs	r5, r0
 8010e04:	81a5      	strh	r5, [r4, #12]
 8010e06:	e7cd      	b.n	8010da4 <__smakebuf_r+0x18>
 8010e08:	08010b99 	.word	0x08010b99

08010e0c <_raise_r>:
 8010e0c:	291f      	cmp	r1, #31
 8010e0e:	b538      	push	{r3, r4, r5, lr}
 8010e10:	4604      	mov	r4, r0
 8010e12:	460d      	mov	r5, r1
 8010e14:	d904      	bls.n	8010e20 <_raise_r+0x14>
 8010e16:	2316      	movs	r3, #22
 8010e18:	6003      	str	r3, [r0, #0]
 8010e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8010e1e:	bd38      	pop	{r3, r4, r5, pc}
 8010e20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010e22:	b112      	cbz	r2, 8010e2a <_raise_r+0x1e>
 8010e24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010e28:	b94b      	cbnz	r3, 8010e3e <_raise_r+0x32>
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	f000 f830 	bl	8010e90 <_getpid_r>
 8010e30:	462a      	mov	r2, r5
 8010e32:	4601      	mov	r1, r0
 8010e34:	4620      	mov	r0, r4
 8010e36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010e3a:	f000 b817 	b.w	8010e6c <_kill_r>
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d00a      	beq.n	8010e58 <_raise_r+0x4c>
 8010e42:	1c59      	adds	r1, r3, #1
 8010e44:	d103      	bne.n	8010e4e <_raise_r+0x42>
 8010e46:	2316      	movs	r3, #22
 8010e48:	6003      	str	r3, [r0, #0]
 8010e4a:	2001      	movs	r0, #1
 8010e4c:	e7e7      	b.n	8010e1e <_raise_r+0x12>
 8010e4e:	2400      	movs	r4, #0
 8010e50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010e54:	4628      	mov	r0, r5
 8010e56:	4798      	blx	r3
 8010e58:	2000      	movs	r0, #0
 8010e5a:	e7e0      	b.n	8010e1e <_raise_r+0x12>

08010e5c <raise>:
 8010e5c:	4b02      	ldr	r3, [pc, #8]	; (8010e68 <raise+0xc>)
 8010e5e:	4601      	mov	r1, r0
 8010e60:	6818      	ldr	r0, [r3, #0]
 8010e62:	f7ff bfd3 	b.w	8010e0c <_raise_r>
 8010e66:	bf00      	nop
 8010e68:	20000044 	.word	0x20000044

08010e6c <_kill_r>:
 8010e6c:	b538      	push	{r3, r4, r5, lr}
 8010e6e:	4d07      	ldr	r5, [pc, #28]	; (8010e8c <_kill_r+0x20>)
 8010e70:	2300      	movs	r3, #0
 8010e72:	4604      	mov	r4, r0
 8010e74:	4608      	mov	r0, r1
 8010e76:	4611      	mov	r1, r2
 8010e78:	602b      	str	r3, [r5, #0]
 8010e7a:	f001 fb27 	bl	80124cc <_kill>
 8010e7e:	1c43      	adds	r3, r0, #1
 8010e80:	d102      	bne.n	8010e88 <_kill_r+0x1c>
 8010e82:	682b      	ldr	r3, [r5, #0]
 8010e84:	b103      	cbz	r3, 8010e88 <_kill_r+0x1c>
 8010e86:	6023      	str	r3, [r4, #0]
 8010e88:	bd38      	pop	{r3, r4, r5, pc}
 8010e8a:	bf00      	nop
 8010e8c:	20001018 	.word	0x20001018

08010e90 <_getpid_r>:
 8010e90:	f001 bb0c 	b.w	80124ac <_getpid>

08010e94 <__sread>:
 8010e94:	b510      	push	{r4, lr}
 8010e96:	460c      	mov	r4, r1
 8010e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e9c:	f000 f894 	bl	8010fc8 <_read_r>
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	bfab      	itete	ge
 8010ea4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010ea6:	89a3      	ldrhlt	r3, [r4, #12]
 8010ea8:	181b      	addge	r3, r3, r0
 8010eaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010eae:	bfac      	ite	ge
 8010eb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8010eb2:	81a3      	strhlt	r3, [r4, #12]
 8010eb4:	bd10      	pop	{r4, pc}

08010eb6 <__swrite>:
 8010eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010eba:	461f      	mov	r7, r3
 8010ebc:	898b      	ldrh	r3, [r1, #12]
 8010ebe:	05db      	lsls	r3, r3, #23
 8010ec0:	4605      	mov	r5, r0
 8010ec2:	460c      	mov	r4, r1
 8010ec4:	4616      	mov	r6, r2
 8010ec6:	d505      	bpl.n	8010ed4 <__swrite+0x1e>
 8010ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ecc:	2302      	movs	r3, #2
 8010ece:	2200      	movs	r2, #0
 8010ed0:	f000 f868 	bl	8010fa4 <_lseek_r>
 8010ed4:	89a3      	ldrh	r3, [r4, #12]
 8010ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010ede:	81a3      	strh	r3, [r4, #12]
 8010ee0:	4632      	mov	r2, r6
 8010ee2:	463b      	mov	r3, r7
 8010ee4:	4628      	mov	r0, r5
 8010ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010eea:	f000 b817 	b.w	8010f1c <_write_r>

08010eee <__sseek>:
 8010eee:	b510      	push	{r4, lr}
 8010ef0:	460c      	mov	r4, r1
 8010ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ef6:	f000 f855 	bl	8010fa4 <_lseek_r>
 8010efa:	1c43      	adds	r3, r0, #1
 8010efc:	89a3      	ldrh	r3, [r4, #12]
 8010efe:	bf15      	itete	ne
 8010f00:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f0a:	81a3      	strheq	r3, [r4, #12]
 8010f0c:	bf18      	it	ne
 8010f0e:	81a3      	strhne	r3, [r4, #12]
 8010f10:	bd10      	pop	{r4, pc}

08010f12 <__sclose>:
 8010f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f16:	f000 b813 	b.w	8010f40 <_close_r>
	...

08010f1c <_write_r>:
 8010f1c:	b538      	push	{r3, r4, r5, lr}
 8010f1e:	4d07      	ldr	r5, [pc, #28]	; (8010f3c <_write_r+0x20>)
 8010f20:	4604      	mov	r4, r0
 8010f22:	4608      	mov	r0, r1
 8010f24:	4611      	mov	r1, r2
 8010f26:	2200      	movs	r2, #0
 8010f28:	602a      	str	r2, [r5, #0]
 8010f2a:	461a      	mov	r2, r3
 8010f2c:	f001 faf4 	bl	8012518 <_write>
 8010f30:	1c43      	adds	r3, r0, #1
 8010f32:	d102      	bne.n	8010f3a <_write_r+0x1e>
 8010f34:	682b      	ldr	r3, [r5, #0]
 8010f36:	b103      	cbz	r3, 8010f3a <_write_r+0x1e>
 8010f38:	6023      	str	r3, [r4, #0]
 8010f3a:	bd38      	pop	{r3, r4, r5, pc}
 8010f3c:	20001018 	.word	0x20001018

08010f40 <_close_r>:
 8010f40:	b538      	push	{r3, r4, r5, lr}
 8010f42:	4d06      	ldr	r5, [pc, #24]	; (8010f5c <_close_r+0x1c>)
 8010f44:	2300      	movs	r3, #0
 8010f46:	4604      	mov	r4, r0
 8010f48:	4608      	mov	r0, r1
 8010f4a:	602b      	str	r3, [r5, #0]
 8010f4c:	f001 fa9e 	bl	801248c <_close>
 8010f50:	1c43      	adds	r3, r0, #1
 8010f52:	d102      	bne.n	8010f5a <_close_r+0x1a>
 8010f54:	682b      	ldr	r3, [r5, #0]
 8010f56:	b103      	cbz	r3, 8010f5a <_close_r+0x1a>
 8010f58:	6023      	str	r3, [r4, #0]
 8010f5a:	bd38      	pop	{r3, r4, r5, pc}
 8010f5c:	20001018 	.word	0x20001018

08010f60 <_fstat_r>:
 8010f60:	b538      	push	{r3, r4, r5, lr}
 8010f62:	4d07      	ldr	r5, [pc, #28]	; (8010f80 <_fstat_r+0x20>)
 8010f64:	2300      	movs	r3, #0
 8010f66:	4604      	mov	r4, r0
 8010f68:	4608      	mov	r0, r1
 8010f6a:	4611      	mov	r1, r2
 8010f6c:	602b      	str	r3, [r5, #0]
 8010f6e:	f001 fa95 	bl	801249c <_fstat>
 8010f72:	1c43      	adds	r3, r0, #1
 8010f74:	d102      	bne.n	8010f7c <_fstat_r+0x1c>
 8010f76:	682b      	ldr	r3, [r5, #0]
 8010f78:	b103      	cbz	r3, 8010f7c <_fstat_r+0x1c>
 8010f7a:	6023      	str	r3, [r4, #0]
 8010f7c:	bd38      	pop	{r3, r4, r5, pc}
 8010f7e:	bf00      	nop
 8010f80:	20001018 	.word	0x20001018

08010f84 <_isatty_r>:
 8010f84:	b538      	push	{r3, r4, r5, lr}
 8010f86:	4d06      	ldr	r5, [pc, #24]	; (8010fa0 <_isatty_r+0x1c>)
 8010f88:	2300      	movs	r3, #0
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	4608      	mov	r0, r1
 8010f8e:	602b      	str	r3, [r5, #0]
 8010f90:	f001 fa94 	bl	80124bc <_isatty>
 8010f94:	1c43      	adds	r3, r0, #1
 8010f96:	d102      	bne.n	8010f9e <_isatty_r+0x1a>
 8010f98:	682b      	ldr	r3, [r5, #0]
 8010f9a:	b103      	cbz	r3, 8010f9e <_isatty_r+0x1a>
 8010f9c:	6023      	str	r3, [r4, #0]
 8010f9e:	bd38      	pop	{r3, r4, r5, pc}
 8010fa0:	20001018 	.word	0x20001018

08010fa4 <_lseek_r>:
 8010fa4:	b538      	push	{r3, r4, r5, lr}
 8010fa6:	4d07      	ldr	r5, [pc, #28]	; (8010fc4 <_lseek_r+0x20>)
 8010fa8:	4604      	mov	r4, r0
 8010faa:	4608      	mov	r0, r1
 8010fac:	4611      	mov	r1, r2
 8010fae:	2200      	movs	r2, #0
 8010fb0:	602a      	str	r2, [r5, #0]
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	f001 fa92 	bl	80124dc <_lseek>
 8010fb8:	1c43      	adds	r3, r0, #1
 8010fba:	d102      	bne.n	8010fc2 <_lseek_r+0x1e>
 8010fbc:	682b      	ldr	r3, [r5, #0]
 8010fbe:	b103      	cbz	r3, 8010fc2 <_lseek_r+0x1e>
 8010fc0:	6023      	str	r3, [r4, #0]
 8010fc2:	bd38      	pop	{r3, r4, r5, pc}
 8010fc4:	20001018 	.word	0x20001018

08010fc8 <_read_r>:
 8010fc8:	b538      	push	{r3, r4, r5, lr}
 8010fca:	4d07      	ldr	r5, [pc, #28]	; (8010fe8 <_read_r+0x20>)
 8010fcc:	4604      	mov	r4, r0
 8010fce:	4608      	mov	r0, r1
 8010fd0:	4611      	mov	r1, r2
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	602a      	str	r2, [r5, #0]
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	f001 fa88 	bl	80124ec <_read>
 8010fdc:	1c43      	adds	r3, r0, #1
 8010fde:	d102      	bne.n	8010fe6 <_read_r+0x1e>
 8010fe0:	682b      	ldr	r3, [r5, #0]
 8010fe2:	b103      	cbz	r3, 8010fe6 <_read_r+0x1e>
 8010fe4:	6023      	str	r3, [r4, #0]
 8010fe6:	bd38      	pop	{r3, r4, r5, pc}
 8010fe8:	20001018 	.word	0x20001018
 8010fec:	00000000 	.word	0x00000000

08010ff0 <atan>:
 8010ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff4:	ec55 4b10 	vmov	r4, r5, d0
 8010ff8:	4bc3      	ldr	r3, [pc, #780]	; (8011308 <atan+0x318>)
 8010ffa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010ffe:	429e      	cmp	r6, r3
 8011000:	46ab      	mov	fp, r5
 8011002:	dd18      	ble.n	8011036 <atan+0x46>
 8011004:	4bc1      	ldr	r3, [pc, #772]	; (801130c <atan+0x31c>)
 8011006:	429e      	cmp	r6, r3
 8011008:	dc01      	bgt.n	801100e <atan+0x1e>
 801100a:	d109      	bne.n	8011020 <atan+0x30>
 801100c:	b144      	cbz	r4, 8011020 <atan+0x30>
 801100e:	4622      	mov	r2, r4
 8011010:	462b      	mov	r3, r5
 8011012:	4620      	mov	r0, r4
 8011014:	4629      	mov	r1, r5
 8011016:	f7ef f959 	bl	80002cc <__adddf3>
 801101a:	4604      	mov	r4, r0
 801101c:	460d      	mov	r5, r1
 801101e:	e006      	b.n	801102e <atan+0x3e>
 8011020:	f1bb 0f00 	cmp.w	fp, #0
 8011024:	f300 8131 	bgt.w	801128a <atan+0x29a>
 8011028:	a59b      	add	r5, pc, #620	; (adr r5, 8011298 <atan+0x2a8>)
 801102a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801102e:	ec45 4b10 	vmov	d0, r4, r5
 8011032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011036:	4bb6      	ldr	r3, [pc, #728]	; (8011310 <atan+0x320>)
 8011038:	429e      	cmp	r6, r3
 801103a:	dc14      	bgt.n	8011066 <atan+0x76>
 801103c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011040:	429e      	cmp	r6, r3
 8011042:	dc0d      	bgt.n	8011060 <atan+0x70>
 8011044:	a396      	add	r3, pc, #600	; (adr r3, 80112a0 <atan+0x2b0>)
 8011046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801104a:	ee10 0a10 	vmov	r0, s0
 801104e:	4629      	mov	r1, r5
 8011050:	f7ef f93c 	bl	80002cc <__adddf3>
 8011054:	4baf      	ldr	r3, [pc, #700]	; (8011314 <atan+0x324>)
 8011056:	2200      	movs	r2, #0
 8011058:	f7ef fd7e 	bl	8000b58 <__aeabi_dcmpgt>
 801105c:	2800      	cmp	r0, #0
 801105e:	d1e6      	bne.n	801102e <atan+0x3e>
 8011060:	f04f 3aff 	mov.w	sl, #4294967295
 8011064:	e02b      	b.n	80110be <atan+0xce>
 8011066:	f000 f963 	bl	8011330 <fabs>
 801106a:	4bab      	ldr	r3, [pc, #684]	; (8011318 <atan+0x328>)
 801106c:	429e      	cmp	r6, r3
 801106e:	ec55 4b10 	vmov	r4, r5, d0
 8011072:	f300 80bf 	bgt.w	80111f4 <atan+0x204>
 8011076:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801107a:	429e      	cmp	r6, r3
 801107c:	f300 80a0 	bgt.w	80111c0 <atan+0x1d0>
 8011080:	ee10 2a10 	vmov	r2, s0
 8011084:	ee10 0a10 	vmov	r0, s0
 8011088:	462b      	mov	r3, r5
 801108a:	4629      	mov	r1, r5
 801108c:	f7ef f91e 	bl	80002cc <__adddf3>
 8011090:	4ba0      	ldr	r3, [pc, #640]	; (8011314 <atan+0x324>)
 8011092:	2200      	movs	r2, #0
 8011094:	f7ef f918 	bl	80002c8 <__aeabi_dsub>
 8011098:	2200      	movs	r2, #0
 801109a:	4606      	mov	r6, r0
 801109c:	460f      	mov	r7, r1
 801109e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80110a2:	4620      	mov	r0, r4
 80110a4:	4629      	mov	r1, r5
 80110a6:	f7ef f911 	bl	80002cc <__adddf3>
 80110aa:	4602      	mov	r2, r0
 80110ac:	460b      	mov	r3, r1
 80110ae:	4630      	mov	r0, r6
 80110b0:	4639      	mov	r1, r7
 80110b2:	f7ef fbeb 	bl	800088c <__aeabi_ddiv>
 80110b6:	f04f 0a00 	mov.w	sl, #0
 80110ba:	4604      	mov	r4, r0
 80110bc:	460d      	mov	r5, r1
 80110be:	4622      	mov	r2, r4
 80110c0:	462b      	mov	r3, r5
 80110c2:	4620      	mov	r0, r4
 80110c4:	4629      	mov	r1, r5
 80110c6:	f7ef fab7 	bl	8000638 <__aeabi_dmul>
 80110ca:	4602      	mov	r2, r0
 80110cc:	460b      	mov	r3, r1
 80110ce:	4680      	mov	r8, r0
 80110d0:	4689      	mov	r9, r1
 80110d2:	f7ef fab1 	bl	8000638 <__aeabi_dmul>
 80110d6:	a374      	add	r3, pc, #464	; (adr r3, 80112a8 <atan+0x2b8>)
 80110d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110dc:	4606      	mov	r6, r0
 80110de:	460f      	mov	r7, r1
 80110e0:	f7ef faaa 	bl	8000638 <__aeabi_dmul>
 80110e4:	a372      	add	r3, pc, #456	; (adr r3, 80112b0 <atan+0x2c0>)
 80110e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ea:	f7ef f8ef 	bl	80002cc <__adddf3>
 80110ee:	4632      	mov	r2, r6
 80110f0:	463b      	mov	r3, r7
 80110f2:	f7ef faa1 	bl	8000638 <__aeabi_dmul>
 80110f6:	a370      	add	r3, pc, #448	; (adr r3, 80112b8 <atan+0x2c8>)
 80110f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fc:	f7ef f8e6 	bl	80002cc <__adddf3>
 8011100:	4632      	mov	r2, r6
 8011102:	463b      	mov	r3, r7
 8011104:	f7ef fa98 	bl	8000638 <__aeabi_dmul>
 8011108:	a36d      	add	r3, pc, #436	; (adr r3, 80112c0 <atan+0x2d0>)
 801110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110e:	f7ef f8dd 	bl	80002cc <__adddf3>
 8011112:	4632      	mov	r2, r6
 8011114:	463b      	mov	r3, r7
 8011116:	f7ef fa8f 	bl	8000638 <__aeabi_dmul>
 801111a:	a36b      	add	r3, pc, #428	; (adr r3, 80112c8 <atan+0x2d8>)
 801111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011120:	f7ef f8d4 	bl	80002cc <__adddf3>
 8011124:	4632      	mov	r2, r6
 8011126:	463b      	mov	r3, r7
 8011128:	f7ef fa86 	bl	8000638 <__aeabi_dmul>
 801112c:	a368      	add	r3, pc, #416	; (adr r3, 80112d0 <atan+0x2e0>)
 801112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011132:	f7ef f8cb 	bl	80002cc <__adddf3>
 8011136:	4642      	mov	r2, r8
 8011138:	464b      	mov	r3, r9
 801113a:	f7ef fa7d 	bl	8000638 <__aeabi_dmul>
 801113e:	a366      	add	r3, pc, #408	; (adr r3, 80112d8 <atan+0x2e8>)
 8011140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011144:	4680      	mov	r8, r0
 8011146:	4689      	mov	r9, r1
 8011148:	4630      	mov	r0, r6
 801114a:	4639      	mov	r1, r7
 801114c:	f7ef fa74 	bl	8000638 <__aeabi_dmul>
 8011150:	a363      	add	r3, pc, #396	; (adr r3, 80112e0 <atan+0x2f0>)
 8011152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011156:	f7ef f8b7 	bl	80002c8 <__aeabi_dsub>
 801115a:	4632      	mov	r2, r6
 801115c:	463b      	mov	r3, r7
 801115e:	f7ef fa6b 	bl	8000638 <__aeabi_dmul>
 8011162:	a361      	add	r3, pc, #388	; (adr r3, 80112e8 <atan+0x2f8>)
 8011164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011168:	f7ef f8ae 	bl	80002c8 <__aeabi_dsub>
 801116c:	4632      	mov	r2, r6
 801116e:	463b      	mov	r3, r7
 8011170:	f7ef fa62 	bl	8000638 <__aeabi_dmul>
 8011174:	a35e      	add	r3, pc, #376	; (adr r3, 80112f0 <atan+0x300>)
 8011176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117a:	f7ef f8a5 	bl	80002c8 <__aeabi_dsub>
 801117e:	4632      	mov	r2, r6
 8011180:	463b      	mov	r3, r7
 8011182:	f7ef fa59 	bl	8000638 <__aeabi_dmul>
 8011186:	a35c      	add	r3, pc, #368	; (adr r3, 80112f8 <atan+0x308>)
 8011188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118c:	f7ef f89c 	bl	80002c8 <__aeabi_dsub>
 8011190:	4632      	mov	r2, r6
 8011192:	463b      	mov	r3, r7
 8011194:	f7ef fa50 	bl	8000638 <__aeabi_dmul>
 8011198:	4602      	mov	r2, r0
 801119a:	460b      	mov	r3, r1
 801119c:	4640      	mov	r0, r8
 801119e:	4649      	mov	r1, r9
 80111a0:	f7ef f894 	bl	80002cc <__adddf3>
 80111a4:	4622      	mov	r2, r4
 80111a6:	462b      	mov	r3, r5
 80111a8:	f7ef fa46 	bl	8000638 <__aeabi_dmul>
 80111ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80111b0:	4602      	mov	r2, r0
 80111b2:	460b      	mov	r3, r1
 80111b4:	d14b      	bne.n	801124e <atan+0x25e>
 80111b6:	4620      	mov	r0, r4
 80111b8:	4629      	mov	r1, r5
 80111ba:	f7ef f885 	bl	80002c8 <__aeabi_dsub>
 80111be:	e72c      	b.n	801101a <atan+0x2a>
 80111c0:	ee10 0a10 	vmov	r0, s0
 80111c4:	4b53      	ldr	r3, [pc, #332]	; (8011314 <atan+0x324>)
 80111c6:	2200      	movs	r2, #0
 80111c8:	4629      	mov	r1, r5
 80111ca:	f7ef f87d 	bl	80002c8 <__aeabi_dsub>
 80111ce:	4b51      	ldr	r3, [pc, #324]	; (8011314 <atan+0x324>)
 80111d0:	4606      	mov	r6, r0
 80111d2:	460f      	mov	r7, r1
 80111d4:	2200      	movs	r2, #0
 80111d6:	4620      	mov	r0, r4
 80111d8:	4629      	mov	r1, r5
 80111da:	f7ef f877 	bl	80002cc <__adddf3>
 80111de:	4602      	mov	r2, r0
 80111e0:	460b      	mov	r3, r1
 80111e2:	4630      	mov	r0, r6
 80111e4:	4639      	mov	r1, r7
 80111e6:	f7ef fb51 	bl	800088c <__aeabi_ddiv>
 80111ea:	f04f 0a01 	mov.w	sl, #1
 80111ee:	4604      	mov	r4, r0
 80111f0:	460d      	mov	r5, r1
 80111f2:	e764      	b.n	80110be <atan+0xce>
 80111f4:	4b49      	ldr	r3, [pc, #292]	; (801131c <atan+0x32c>)
 80111f6:	429e      	cmp	r6, r3
 80111f8:	da1d      	bge.n	8011236 <atan+0x246>
 80111fa:	ee10 0a10 	vmov	r0, s0
 80111fe:	4b48      	ldr	r3, [pc, #288]	; (8011320 <atan+0x330>)
 8011200:	2200      	movs	r2, #0
 8011202:	4629      	mov	r1, r5
 8011204:	f7ef f860 	bl	80002c8 <__aeabi_dsub>
 8011208:	4b45      	ldr	r3, [pc, #276]	; (8011320 <atan+0x330>)
 801120a:	4606      	mov	r6, r0
 801120c:	460f      	mov	r7, r1
 801120e:	2200      	movs	r2, #0
 8011210:	4620      	mov	r0, r4
 8011212:	4629      	mov	r1, r5
 8011214:	f7ef fa10 	bl	8000638 <__aeabi_dmul>
 8011218:	4b3e      	ldr	r3, [pc, #248]	; (8011314 <atan+0x324>)
 801121a:	2200      	movs	r2, #0
 801121c:	f7ef f856 	bl	80002cc <__adddf3>
 8011220:	4602      	mov	r2, r0
 8011222:	460b      	mov	r3, r1
 8011224:	4630      	mov	r0, r6
 8011226:	4639      	mov	r1, r7
 8011228:	f7ef fb30 	bl	800088c <__aeabi_ddiv>
 801122c:	f04f 0a02 	mov.w	sl, #2
 8011230:	4604      	mov	r4, r0
 8011232:	460d      	mov	r5, r1
 8011234:	e743      	b.n	80110be <atan+0xce>
 8011236:	462b      	mov	r3, r5
 8011238:	ee10 2a10 	vmov	r2, s0
 801123c:	4939      	ldr	r1, [pc, #228]	; (8011324 <atan+0x334>)
 801123e:	2000      	movs	r0, #0
 8011240:	f7ef fb24 	bl	800088c <__aeabi_ddiv>
 8011244:	f04f 0a03 	mov.w	sl, #3
 8011248:	4604      	mov	r4, r0
 801124a:	460d      	mov	r5, r1
 801124c:	e737      	b.n	80110be <atan+0xce>
 801124e:	4b36      	ldr	r3, [pc, #216]	; (8011328 <atan+0x338>)
 8011250:	4e36      	ldr	r6, [pc, #216]	; (801132c <atan+0x33c>)
 8011252:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8011256:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801125a:	e9da 2300 	ldrd	r2, r3, [sl]
 801125e:	f7ef f833 	bl	80002c8 <__aeabi_dsub>
 8011262:	4622      	mov	r2, r4
 8011264:	462b      	mov	r3, r5
 8011266:	f7ef f82f 	bl	80002c8 <__aeabi_dsub>
 801126a:	4602      	mov	r2, r0
 801126c:	460b      	mov	r3, r1
 801126e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011272:	f7ef f829 	bl	80002c8 <__aeabi_dsub>
 8011276:	f1bb 0f00 	cmp.w	fp, #0
 801127a:	4604      	mov	r4, r0
 801127c:	460d      	mov	r5, r1
 801127e:	f6bf aed6 	bge.w	801102e <atan+0x3e>
 8011282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011286:	461d      	mov	r5, r3
 8011288:	e6d1      	b.n	801102e <atan+0x3e>
 801128a:	a51d      	add	r5, pc, #116	; (adr r5, 8011300 <atan+0x310>)
 801128c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011290:	e6cd      	b.n	801102e <atan+0x3e>
 8011292:	bf00      	nop
 8011294:	f3af 8000 	nop.w
 8011298:	54442d18 	.word	0x54442d18
 801129c:	bff921fb 	.word	0xbff921fb
 80112a0:	8800759c 	.word	0x8800759c
 80112a4:	7e37e43c 	.word	0x7e37e43c
 80112a8:	e322da11 	.word	0xe322da11
 80112ac:	3f90ad3a 	.word	0x3f90ad3a
 80112b0:	24760deb 	.word	0x24760deb
 80112b4:	3fa97b4b 	.word	0x3fa97b4b
 80112b8:	a0d03d51 	.word	0xa0d03d51
 80112bc:	3fb10d66 	.word	0x3fb10d66
 80112c0:	c54c206e 	.word	0xc54c206e
 80112c4:	3fb745cd 	.word	0x3fb745cd
 80112c8:	920083ff 	.word	0x920083ff
 80112cc:	3fc24924 	.word	0x3fc24924
 80112d0:	5555550d 	.word	0x5555550d
 80112d4:	3fd55555 	.word	0x3fd55555
 80112d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80112dc:	bfa2b444 	.word	0xbfa2b444
 80112e0:	52defd9a 	.word	0x52defd9a
 80112e4:	3fadde2d 	.word	0x3fadde2d
 80112e8:	af749a6d 	.word	0xaf749a6d
 80112ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80112f0:	fe231671 	.word	0xfe231671
 80112f4:	3fbc71c6 	.word	0x3fbc71c6
 80112f8:	9998ebc4 	.word	0x9998ebc4
 80112fc:	3fc99999 	.word	0x3fc99999
 8011300:	54442d18 	.word	0x54442d18
 8011304:	3ff921fb 	.word	0x3ff921fb
 8011308:	440fffff 	.word	0x440fffff
 801130c:	7ff00000 	.word	0x7ff00000
 8011310:	3fdbffff 	.word	0x3fdbffff
 8011314:	3ff00000 	.word	0x3ff00000
 8011318:	3ff2ffff 	.word	0x3ff2ffff
 801131c:	40038000 	.word	0x40038000
 8011320:	3ff80000 	.word	0x3ff80000
 8011324:	bff00000 	.word	0xbff00000
 8011328:	080129b8 	.word	0x080129b8
 801132c:	08012998 	.word	0x08012998

08011330 <fabs>:
 8011330:	ec51 0b10 	vmov	r0, r1, d0
 8011334:	ee10 2a10 	vmov	r2, s0
 8011338:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801133c:	ec43 2b10 	vmov	d0, r2, r3
 8011340:	4770      	bx	lr
 8011342:	0000      	movs	r0, r0
 8011344:	0000      	movs	r0, r0
	...

08011348 <tan>:
 8011348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801134a:	ec53 2b10 	vmov	r2, r3, d0
 801134e:	4816      	ldr	r0, [pc, #88]	; (80113a8 <tan+0x60>)
 8011350:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011354:	4281      	cmp	r1, r0
 8011356:	dc07      	bgt.n	8011368 <tan+0x20>
 8011358:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80113a0 <tan+0x58>
 801135c:	2001      	movs	r0, #1
 801135e:	b005      	add	sp, #20
 8011360:	f85d eb04 	ldr.w	lr, [sp], #4
 8011364:	f000 bd80 	b.w	8011e68 <__kernel_tan>
 8011368:	4810      	ldr	r0, [pc, #64]	; (80113ac <tan+0x64>)
 801136a:	4281      	cmp	r1, r0
 801136c:	dd09      	ble.n	8011382 <tan+0x3a>
 801136e:	ee10 0a10 	vmov	r0, s0
 8011372:	4619      	mov	r1, r3
 8011374:	f7ee ffa8 	bl	80002c8 <__aeabi_dsub>
 8011378:	ec41 0b10 	vmov	d0, r0, r1
 801137c:	b005      	add	sp, #20
 801137e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011382:	4668      	mov	r0, sp
 8011384:	f000 f814 	bl	80113b0 <__ieee754_rem_pio2>
 8011388:	0040      	lsls	r0, r0, #1
 801138a:	f000 0002 	and.w	r0, r0, #2
 801138e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011392:	ed9d 0b00 	vldr	d0, [sp]
 8011396:	f1c0 0001 	rsb	r0, r0, #1
 801139a:	f000 fd65 	bl	8011e68 <__kernel_tan>
 801139e:	e7ed      	b.n	801137c <tan+0x34>
	...
 80113a8:	3fe921fb 	.word	0x3fe921fb
 80113ac:	7fefffff 	.word	0x7fefffff

080113b0 <__ieee754_rem_pio2>:
 80113b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b4:	ed2d 8b02 	vpush	{d8}
 80113b8:	ec55 4b10 	vmov	r4, r5, d0
 80113bc:	4bca      	ldr	r3, [pc, #808]	; (80116e8 <__ieee754_rem_pio2+0x338>)
 80113be:	b08b      	sub	sp, #44	; 0x2c
 80113c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80113c4:	4598      	cmp	r8, r3
 80113c6:	4682      	mov	sl, r0
 80113c8:	9502      	str	r5, [sp, #8]
 80113ca:	dc08      	bgt.n	80113de <__ieee754_rem_pio2+0x2e>
 80113cc:	2200      	movs	r2, #0
 80113ce:	2300      	movs	r3, #0
 80113d0:	ed80 0b00 	vstr	d0, [r0]
 80113d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80113d8:	f04f 0b00 	mov.w	fp, #0
 80113dc:	e028      	b.n	8011430 <__ieee754_rem_pio2+0x80>
 80113de:	4bc3      	ldr	r3, [pc, #780]	; (80116ec <__ieee754_rem_pio2+0x33c>)
 80113e0:	4598      	cmp	r8, r3
 80113e2:	dc78      	bgt.n	80114d6 <__ieee754_rem_pio2+0x126>
 80113e4:	9b02      	ldr	r3, [sp, #8]
 80113e6:	4ec2      	ldr	r6, [pc, #776]	; (80116f0 <__ieee754_rem_pio2+0x340>)
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	ee10 0a10 	vmov	r0, s0
 80113ee:	a3b0      	add	r3, pc, #704	; (adr r3, 80116b0 <__ieee754_rem_pio2+0x300>)
 80113f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f4:	4629      	mov	r1, r5
 80113f6:	dd39      	ble.n	801146c <__ieee754_rem_pio2+0xbc>
 80113f8:	f7ee ff66 	bl	80002c8 <__aeabi_dsub>
 80113fc:	45b0      	cmp	r8, r6
 80113fe:	4604      	mov	r4, r0
 8011400:	460d      	mov	r5, r1
 8011402:	d01b      	beq.n	801143c <__ieee754_rem_pio2+0x8c>
 8011404:	a3ac      	add	r3, pc, #688	; (adr r3, 80116b8 <__ieee754_rem_pio2+0x308>)
 8011406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801140a:	f7ee ff5d 	bl	80002c8 <__aeabi_dsub>
 801140e:	4602      	mov	r2, r0
 8011410:	460b      	mov	r3, r1
 8011412:	e9ca 2300 	strd	r2, r3, [sl]
 8011416:	4620      	mov	r0, r4
 8011418:	4629      	mov	r1, r5
 801141a:	f7ee ff55 	bl	80002c8 <__aeabi_dsub>
 801141e:	a3a6      	add	r3, pc, #664	; (adr r3, 80116b8 <__ieee754_rem_pio2+0x308>)
 8011420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011424:	f7ee ff50 	bl	80002c8 <__aeabi_dsub>
 8011428:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801142c:	f04f 0b01 	mov.w	fp, #1
 8011430:	4658      	mov	r0, fp
 8011432:	b00b      	add	sp, #44	; 0x2c
 8011434:	ecbd 8b02 	vpop	{d8}
 8011438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801143c:	a3a0      	add	r3, pc, #640	; (adr r3, 80116c0 <__ieee754_rem_pio2+0x310>)
 801143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011442:	f7ee ff41 	bl	80002c8 <__aeabi_dsub>
 8011446:	a3a0      	add	r3, pc, #640	; (adr r3, 80116c8 <__ieee754_rem_pio2+0x318>)
 8011448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801144c:	4604      	mov	r4, r0
 801144e:	460d      	mov	r5, r1
 8011450:	f7ee ff3a 	bl	80002c8 <__aeabi_dsub>
 8011454:	4602      	mov	r2, r0
 8011456:	460b      	mov	r3, r1
 8011458:	e9ca 2300 	strd	r2, r3, [sl]
 801145c:	4620      	mov	r0, r4
 801145e:	4629      	mov	r1, r5
 8011460:	f7ee ff32 	bl	80002c8 <__aeabi_dsub>
 8011464:	a398      	add	r3, pc, #608	; (adr r3, 80116c8 <__ieee754_rem_pio2+0x318>)
 8011466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146a:	e7db      	b.n	8011424 <__ieee754_rem_pio2+0x74>
 801146c:	f7ee ff2e 	bl	80002cc <__adddf3>
 8011470:	45b0      	cmp	r8, r6
 8011472:	4604      	mov	r4, r0
 8011474:	460d      	mov	r5, r1
 8011476:	d016      	beq.n	80114a6 <__ieee754_rem_pio2+0xf6>
 8011478:	a38f      	add	r3, pc, #572	; (adr r3, 80116b8 <__ieee754_rem_pio2+0x308>)
 801147a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147e:	f7ee ff25 	bl	80002cc <__adddf3>
 8011482:	4602      	mov	r2, r0
 8011484:	460b      	mov	r3, r1
 8011486:	e9ca 2300 	strd	r2, r3, [sl]
 801148a:	4620      	mov	r0, r4
 801148c:	4629      	mov	r1, r5
 801148e:	f7ee ff1b 	bl	80002c8 <__aeabi_dsub>
 8011492:	a389      	add	r3, pc, #548	; (adr r3, 80116b8 <__ieee754_rem_pio2+0x308>)
 8011494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011498:	f7ee ff18 	bl	80002cc <__adddf3>
 801149c:	f04f 3bff 	mov.w	fp, #4294967295
 80114a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80114a4:	e7c4      	b.n	8011430 <__ieee754_rem_pio2+0x80>
 80114a6:	a386      	add	r3, pc, #536	; (adr r3, 80116c0 <__ieee754_rem_pio2+0x310>)
 80114a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ac:	f7ee ff0e 	bl	80002cc <__adddf3>
 80114b0:	a385      	add	r3, pc, #532	; (adr r3, 80116c8 <__ieee754_rem_pio2+0x318>)
 80114b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b6:	4604      	mov	r4, r0
 80114b8:	460d      	mov	r5, r1
 80114ba:	f7ee ff07 	bl	80002cc <__adddf3>
 80114be:	4602      	mov	r2, r0
 80114c0:	460b      	mov	r3, r1
 80114c2:	e9ca 2300 	strd	r2, r3, [sl]
 80114c6:	4620      	mov	r0, r4
 80114c8:	4629      	mov	r1, r5
 80114ca:	f7ee fefd 	bl	80002c8 <__aeabi_dsub>
 80114ce:	a37e      	add	r3, pc, #504	; (adr r3, 80116c8 <__ieee754_rem_pio2+0x318>)
 80114d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d4:	e7e0      	b.n	8011498 <__ieee754_rem_pio2+0xe8>
 80114d6:	4b87      	ldr	r3, [pc, #540]	; (80116f4 <__ieee754_rem_pio2+0x344>)
 80114d8:	4598      	cmp	r8, r3
 80114da:	f300 80d9 	bgt.w	8011690 <__ieee754_rem_pio2+0x2e0>
 80114de:	f7ff ff27 	bl	8011330 <fabs>
 80114e2:	ec55 4b10 	vmov	r4, r5, d0
 80114e6:	ee10 0a10 	vmov	r0, s0
 80114ea:	a379      	add	r3, pc, #484	; (adr r3, 80116d0 <__ieee754_rem_pio2+0x320>)
 80114ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f0:	4629      	mov	r1, r5
 80114f2:	f7ef f8a1 	bl	8000638 <__aeabi_dmul>
 80114f6:	4b80      	ldr	r3, [pc, #512]	; (80116f8 <__ieee754_rem_pio2+0x348>)
 80114f8:	2200      	movs	r2, #0
 80114fa:	f7ee fee7 	bl	80002cc <__adddf3>
 80114fe:	f7ef fb4b 	bl	8000b98 <__aeabi_d2iz>
 8011502:	4683      	mov	fp, r0
 8011504:	f7ef f82e 	bl	8000564 <__aeabi_i2d>
 8011508:	4602      	mov	r2, r0
 801150a:	460b      	mov	r3, r1
 801150c:	ec43 2b18 	vmov	d8, r2, r3
 8011510:	a367      	add	r3, pc, #412	; (adr r3, 80116b0 <__ieee754_rem_pio2+0x300>)
 8011512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011516:	f7ef f88f 	bl	8000638 <__aeabi_dmul>
 801151a:	4602      	mov	r2, r0
 801151c:	460b      	mov	r3, r1
 801151e:	4620      	mov	r0, r4
 8011520:	4629      	mov	r1, r5
 8011522:	f7ee fed1 	bl	80002c8 <__aeabi_dsub>
 8011526:	a364      	add	r3, pc, #400	; (adr r3, 80116b8 <__ieee754_rem_pio2+0x308>)
 8011528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801152c:	4606      	mov	r6, r0
 801152e:	460f      	mov	r7, r1
 8011530:	ec51 0b18 	vmov	r0, r1, d8
 8011534:	f7ef f880 	bl	8000638 <__aeabi_dmul>
 8011538:	f1bb 0f1f 	cmp.w	fp, #31
 801153c:	4604      	mov	r4, r0
 801153e:	460d      	mov	r5, r1
 8011540:	dc0d      	bgt.n	801155e <__ieee754_rem_pio2+0x1ae>
 8011542:	4b6e      	ldr	r3, [pc, #440]	; (80116fc <__ieee754_rem_pio2+0x34c>)
 8011544:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801154c:	4543      	cmp	r3, r8
 801154e:	d006      	beq.n	801155e <__ieee754_rem_pio2+0x1ae>
 8011550:	4622      	mov	r2, r4
 8011552:	462b      	mov	r3, r5
 8011554:	4630      	mov	r0, r6
 8011556:	4639      	mov	r1, r7
 8011558:	f7ee feb6 	bl	80002c8 <__aeabi_dsub>
 801155c:	e00f      	b.n	801157e <__ieee754_rem_pio2+0x1ce>
 801155e:	462b      	mov	r3, r5
 8011560:	4622      	mov	r2, r4
 8011562:	4630      	mov	r0, r6
 8011564:	4639      	mov	r1, r7
 8011566:	f7ee feaf 	bl	80002c8 <__aeabi_dsub>
 801156a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801156e:	9303      	str	r3, [sp, #12]
 8011570:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011574:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011578:	f1b8 0f10 	cmp.w	r8, #16
 801157c:	dc02      	bgt.n	8011584 <__ieee754_rem_pio2+0x1d4>
 801157e:	e9ca 0100 	strd	r0, r1, [sl]
 8011582:	e039      	b.n	80115f8 <__ieee754_rem_pio2+0x248>
 8011584:	a34e      	add	r3, pc, #312	; (adr r3, 80116c0 <__ieee754_rem_pio2+0x310>)
 8011586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801158a:	ec51 0b18 	vmov	r0, r1, d8
 801158e:	f7ef f853 	bl	8000638 <__aeabi_dmul>
 8011592:	4604      	mov	r4, r0
 8011594:	460d      	mov	r5, r1
 8011596:	4602      	mov	r2, r0
 8011598:	460b      	mov	r3, r1
 801159a:	4630      	mov	r0, r6
 801159c:	4639      	mov	r1, r7
 801159e:	f7ee fe93 	bl	80002c8 <__aeabi_dsub>
 80115a2:	4602      	mov	r2, r0
 80115a4:	460b      	mov	r3, r1
 80115a6:	4680      	mov	r8, r0
 80115a8:	4689      	mov	r9, r1
 80115aa:	4630      	mov	r0, r6
 80115ac:	4639      	mov	r1, r7
 80115ae:	f7ee fe8b 	bl	80002c8 <__aeabi_dsub>
 80115b2:	4622      	mov	r2, r4
 80115b4:	462b      	mov	r3, r5
 80115b6:	f7ee fe87 	bl	80002c8 <__aeabi_dsub>
 80115ba:	a343      	add	r3, pc, #268	; (adr r3, 80116c8 <__ieee754_rem_pio2+0x318>)
 80115bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c0:	4604      	mov	r4, r0
 80115c2:	460d      	mov	r5, r1
 80115c4:	ec51 0b18 	vmov	r0, r1, d8
 80115c8:	f7ef f836 	bl	8000638 <__aeabi_dmul>
 80115cc:	4622      	mov	r2, r4
 80115ce:	462b      	mov	r3, r5
 80115d0:	f7ee fe7a 	bl	80002c8 <__aeabi_dsub>
 80115d4:	4602      	mov	r2, r0
 80115d6:	460b      	mov	r3, r1
 80115d8:	4604      	mov	r4, r0
 80115da:	460d      	mov	r5, r1
 80115dc:	4640      	mov	r0, r8
 80115de:	4649      	mov	r1, r9
 80115e0:	f7ee fe72 	bl	80002c8 <__aeabi_dsub>
 80115e4:	9a03      	ldr	r2, [sp, #12]
 80115e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80115ea:	1ad3      	subs	r3, r2, r3
 80115ec:	2b31      	cmp	r3, #49	; 0x31
 80115ee:	dc24      	bgt.n	801163a <__ieee754_rem_pio2+0x28a>
 80115f0:	e9ca 0100 	strd	r0, r1, [sl]
 80115f4:	4646      	mov	r6, r8
 80115f6:	464f      	mov	r7, r9
 80115f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80115fc:	4630      	mov	r0, r6
 80115fe:	4642      	mov	r2, r8
 8011600:	464b      	mov	r3, r9
 8011602:	4639      	mov	r1, r7
 8011604:	f7ee fe60 	bl	80002c8 <__aeabi_dsub>
 8011608:	462b      	mov	r3, r5
 801160a:	4622      	mov	r2, r4
 801160c:	f7ee fe5c 	bl	80002c8 <__aeabi_dsub>
 8011610:	9b02      	ldr	r3, [sp, #8]
 8011612:	2b00      	cmp	r3, #0
 8011614:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011618:	f6bf af0a 	bge.w	8011430 <__ieee754_rem_pio2+0x80>
 801161c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011620:	f8ca 3004 	str.w	r3, [sl, #4]
 8011624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011628:	f8ca 8000 	str.w	r8, [sl]
 801162c:	f8ca 0008 	str.w	r0, [sl, #8]
 8011630:	f8ca 300c 	str.w	r3, [sl, #12]
 8011634:	f1cb 0b00 	rsb	fp, fp, #0
 8011638:	e6fa      	b.n	8011430 <__ieee754_rem_pio2+0x80>
 801163a:	a327      	add	r3, pc, #156	; (adr r3, 80116d8 <__ieee754_rem_pio2+0x328>)
 801163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011640:	ec51 0b18 	vmov	r0, r1, d8
 8011644:	f7ee fff8 	bl	8000638 <__aeabi_dmul>
 8011648:	4604      	mov	r4, r0
 801164a:	460d      	mov	r5, r1
 801164c:	4602      	mov	r2, r0
 801164e:	460b      	mov	r3, r1
 8011650:	4640      	mov	r0, r8
 8011652:	4649      	mov	r1, r9
 8011654:	f7ee fe38 	bl	80002c8 <__aeabi_dsub>
 8011658:	4602      	mov	r2, r0
 801165a:	460b      	mov	r3, r1
 801165c:	4606      	mov	r6, r0
 801165e:	460f      	mov	r7, r1
 8011660:	4640      	mov	r0, r8
 8011662:	4649      	mov	r1, r9
 8011664:	f7ee fe30 	bl	80002c8 <__aeabi_dsub>
 8011668:	4622      	mov	r2, r4
 801166a:	462b      	mov	r3, r5
 801166c:	f7ee fe2c 	bl	80002c8 <__aeabi_dsub>
 8011670:	a31b      	add	r3, pc, #108	; (adr r3, 80116e0 <__ieee754_rem_pio2+0x330>)
 8011672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011676:	4604      	mov	r4, r0
 8011678:	460d      	mov	r5, r1
 801167a:	ec51 0b18 	vmov	r0, r1, d8
 801167e:	f7ee ffdb 	bl	8000638 <__aeabi_dmul>
 8011682:	4622      	mov	r2, r4
 8011684:	462b      	mov	r3, r5
 8011686:	f7ee fe1f 	bl	80002c8 <__aeabi_dsub>
 801168a:	4604      	mov	r4, r0
 801168c:	460d      	mov	r5, r1
 801168e:	e75f      	b.n	8011550 <__ieee754_rem_pio2+0x1a0>
 8011690:	4b1b      	ldr	r3, [pc, #108]	; (8011700 <__ieee754_rem_pio2+0x350>)
 8011692:	4598      	cmp	r8, r3
 8011694:	dd36      	ble.n	8011704 <__ieee754_rem_pio2+0x354>
 8011696:	ee10 2a10 	vmov	r2, s0
 801169a:	462b      	mov	r3, r5
 801169c:	4620      	mov	r0, r4
 801169e:	4629      	mov	r1, r5
 80116a0:	f7ee fe12 	bl	80002c8 <__aeabi_dsub>
 80116a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80116a8:	e9ca 0100 	strd	r0, r1, [sl]
 80116ac:	e694      	b.n	80113d8 <__ieee754_rem_pio2+0x28>
 80116ae:	bf00      	nop
 80116b0:	54400000 	.word	0x54400000
 80116b4:	3ff921fb 	.word	0x3ff921fb
 80116b8:	1a626331 	.word	0x1a626331
 80116bc:	3dd0b461 	.word	0x3dd0b461
 80116c0:	1a600000 	.word	0x1a600000
 80116c4:	3dd0b461 	.word	0x3dd0b461
 80116c8:	2e037073 	.word	0x2e037073
 80116cc:	3ba3198a 	.word	0x3ba3198a
 80116d0:	6dc9c883 	.word	0x6dc9c883
 80116d4:	3fe45f30 	.word	0x3fe45f30
 80116d8:	2e000000 	.word	0x2e000000
 80116dc:	3ba3198a 	.word	0x3ba3198a
 80116e0:	252049c1 	.word	0x252049c1
 80116e4:	397b839a 	.word	0x397b839a
 80116e8:	3fe921fb 	.word	0x3fe921fb
 80116ec:	4002d97b 	.word	0x4002d97b
 80116f0:	3ff921fb 	.word	0x3ff921fb
 80116f4:	413921fb 	.word	0x413921fb
 80116f8:	3fe00000 	.word	0x3fe00000
 80116fc:	080129d8 	.word	0x080129d8
 8011700:	7fefffff 	.word	0x7fefffff
 8011704:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011708:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801170c:	ee10 0a10 	vmov	r0, s0
 8011710:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8011714:	ee10 6a10 	vmov	r6, s0
 8011718:	460f      	mov	r7, r1
 801171a:	f7ef fa3d 	bl	8000b98 <__aeabi_d2iz>
 801171e:	f7ee ff21 	bl	8000564 <__aeabi_i2d>
 8011722:	4602      	mov	r2, r0
 8011724:	460b      	mov	r3, r1
 8011726:	4630      	mov	r0, r6
 8011728:	4639      	mov	r1, r7
 801172a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801172e:	f7ee fdcb 	bl	80002c8 <__aeabi_dsub>
 8011732:	4b23      	ldr	r3, [pc, #140]	; (80117c0 <__ieee754_rem_pio2+0x410>)
 8011734:	2200      	movs	r2, #0
 8011736:	f7ee ff7f 	bl	8000638 <__aeabi_dmul>
 801173a:	460f      	mov	r7, r1
 801173c:	4606      	mov	r6, r0
 801173e:	f7ef fa2b 	bl	8000b98 <__aeabi_d2iz>
 8011742:	f7ee ff0f 	bl	8000564 <__aeabi_i2d>
 8011746:	4602      	mov	r2, r0
 8011748:	460b      	mov	r3, r1
 801174a:	4630      	mov	r0, r6
 801174c:	4639      	mov	r1, r7
 801174e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011752:	f7ee fdb9 	bl	80002c8 <__aeabi_dsub>
 8011756:	4b1a      	ldr	r3, [pc, #104]	; (80117c0 <__ieee754_rem_pio2+0x410>)
 8011758:	2200      	movs	r2, #0
 801175a:	f7ee ff6d 	bl	8000638 <__aeabi_dmul>
 801175e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011762:	ad04      	add	r5, sp, #16
 8011764:	f04f 0803 	mov.w	r8, #3
 8011768:	46a9      	mov	r9, r5
 801176a:	2600      	movs	r6, #0
 801176c:	2700      	movs	r7, #0
 801176e:	4632      	mov	r2, r6
 8011770:	463b      	mov	r3, r7
 8011772:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8011776:	46c3      	mov	fp, r8
 8011778:	3d08      	subs	r5, #8
 801177a:	f108 38ff 	add.w	r8, r8, #4294967295
 801177e:	f7ef f9c3 	bl	8000b08 <__aeabi_dcmpeq>
 8011782:	2800      	cmp	r0, #0
 8011784:	d1f3      	bne.n	801176e <__ieee754_rem_pio2+0x3be>
 8011786:	4b0f      	ldr	r3, [pc, #60]	; (80117c4 <__ieee754_rem_pio2+0x414>)
 8011788:	9301      	str	r3, [sp, #4]
 801178a:	2302      	movs	r3, #2
 801178c:	9300      	str	r3, [sp, #0]
 801178e:	4622      	mov	r2, r4
 8011790:	465b      	mov	r3, fp
 8011792:	4651      	mov	r1, sl
 8011794:	4648      	mov	r0, r9
 8011796:	f000 f817 	bl	80117c8 <__kernel_rem_pio2>
 801179a:	9b02      	ldr	r3, [sp, #8]
 801179c:	2b00      	cmp	r3, #0
 801179e:	4683      	mov	fp, r0
 80117a0:	f6bf ae46 	bge.w	8011430 <__ieee754_rem_pio2+0x80>
 80117a4:	e9da 2100 	ldrd	r2, r1, [sl]
 80117a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80117ac:	e9ca 2300 	strd	r2, r3, [sl]
 80117b0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80117b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80117b8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80117bc:	e73a      	b.n	8011634 <__ieee754_rem_pio2+0x284>
 80117be:	bf00      	nop
 80117c0:	41700000 	.word	0x41700000
 80117c4:	08012a58 	.word	0x08012a58

080117c8 <__kernel_rem_pio2>:
 80117c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117cc:	ed2d 8b02 	vpush	{d8}
 80117d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80117d4:	f112 0f14 	cmn.w	r2, #20
 80117d8:	9308      	str	r3, [sp, #32]
 80117da:	9101      	str	r1, [sp, #4]
 80117dc:	4bc4      	ldr	r3, [pc, #784]	; (8011af0 <__kernel_rem_pio2+0x328>)
 80117de:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80117e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80117e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80117e6:	9302      	str	r3, [sp, #8]
 80117e8:	9b08      	ldr	r3, [sp, #32]
 80117ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80117ee:	bfa8      	it	ge
 80117f0:	1ed4      	subge	r4, r2, #3
 80117f2:	9306      	str	r3, [sp, #24]
 80117f4:	bfb2      	itee	lt
 80117f6:	2400      	movlt	r4, #0
 80117f8:	2318      	movge	r3, #24
 80117fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80117fe:	f06f 0317 	mvn.w	r3, #23
 8011802:	fb04 3303 	mla	r3, r4, r3, r3
 8011806:	eb03 0a02 	add.w	sl, r3, r2
 801180a:	9b02      	ldr	r3, [sp, #8]
 801180c:	9a06      	ldr	r2, [sp, #24]
 801180e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011ae0 <__kernel_rem_pio2+0x318>
 8011812:	eb03 0802 	add.w	r8, r3, r2
 8011816:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011818:	1aa7      	subs	r7, r4, r2
 801181a:	ae22      	add	r6, sp, #136	; 0x88
 801181c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011820:	2500      	movs	r5, #0
 8011822:	4545      	cmp	r5, r8
 8011824:	dd13      	ble.n	801184e <__kernel_rem_pio2+0x86>
 8011826:	9b08      	ldr	r3, [sp, #32]
 8011828:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011ae0 <__kernel_rem_pio2+0x318>
 801182c:	aa22      	add	r2, sp, #136	; 0x88
 801182e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011832:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011836:	f04f 0800 	mov.w	r8, #0
 801183a:	9b02      	ldr	r3, [sp, #8]
 801183c:	4598      	cmp	r8, r3
 801183e:	dc2f      	bgt.n	80118a0 <__kernel_rem_pio2+0xd8>
 8011840:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011844:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8011848:	462f      	mov	r7, r5
 801184a:	2600      	movs	r6, #0
 801184c:	e01b      	b.n	8011886 <__kernel_rem_pio2+0xbe>
 801184e:	42ef      	cmn	r7, r5
 8011850:	d407      	bmi.n	8011862 <__kernel_rem_pio2+0x9a>
 8011852:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011856:	f7ee fe85 	bl	8000564 <__aeabi_i2d>
 801185a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801185e:	3501      	adds	r5, #1
 8011860:	e7df      	b.n	8011822 <__kernel_rem_pio2+0x5a>
 8011862:	ec51 0b18 	vmov	r0, r1, d8
 8011866:	e7f8      	b.n	801185a <__kernel_rem_pio2+0x92>
 8011868:	e9d7 2300 	ldrd	r2, r3, [r7]
 801186c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011870:	f7ee fee2 	bl	8000638 <__aeabi_dmul>
 8011874:	4602      	mov	r2, r0
 8011876:	460b      	mov	r3, r1
 8011878:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801187c:	f7ee fd26 	bl	80002cc <__adddf3>
 8011880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011884:	3601      	adds	r6, #1
 8011886:	9b06      	ldr	r3, [sp, #24]
 8011888:	429e      	cmp	r6, r3
 801188a:	f1a7 0708 	sub.w	r7, r7, #8
 801188e:	ddeb      	ble.n	8011868 <__kernel_rem_pio2+0xa0>
 8011890:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011894:	f108 0801 	add.w	r8, r8, #1
 8011898:	ecab 7b02 	vstmia	fp!, {d7}
 801189c:	3508      	adds	r5, #8
 801189e:	e7cc      	b.n	801183a <__kernel_rem_pio2+0x72>
 80118a0:	9b02      	ldr	r3, [sp, #8]
 80118a2:	aa0e      	add	r2, sp, #56	; 0x38
 80118a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80118a8:	930d      	str	r3, [sp, #52]	; 0x34
 80118aa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80118ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80118b0:	9c02      	ldr	r4, [sp, #8]
 80118b2:	930c      	str	r3, [sp, #48]	; 0x30
 80118b4:	00e3      	lsls	r3, r4, #3
 80118b6:	930a      	str	r3, [sp, #40]	; 0x28
 80118b8:	ab9a      	add	r3, sp, #616	; 0x268
 80118ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80118be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80118c2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80118c6:	ab72      	add	r3, sp, #456	; 0x1c8
 80118c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80118cc:	46c3      	mov	fp, r8
 80118ce:	46a1      	mov	r9, r4
 80118d0:	f1b9 0f00 	cmp.w	r9, #0
 80118d4:	f1a5 0508 	sub.w	r5, r5, #8
 80118d8:	dc77      	bgt.n	80119ca <__kernel_rem_pio2+0x202>
 80118da:	ec47 6b10 	vmov	d0, r6, r7
 80118de:	4650      	mov	r0, sl
 80118e0:	f000 fd4e 	bl	8012380 <scalbn>
 80118e4:	ec57 6b10 	vmov	r6, r7, d0
 80118e8:	2200      	movs	r2, #0
 80118ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80118ee:	ee10 0a10 	vmov	r0, s0
 80118f2:	4639      	mov	r1, r7
 80118f4:	f7ee fea0 	bl	8000638 <__aeabi_dmul>
 80118f8:	ec41 0b10 	vmov	d0, r0, r1
 80118fc:	f000 fcc0 	bl	8012280 <floor>
 8011900:	4b7c      	ldr	r3, [pc, #496]	; (8011af4 <__kernel_rem_pio2+0x32c>)
 8011902:	ec51 0b10 	vmov	r0, r1, d0
 8011906:	2200      	movs	r2, #0
 8011908:	f7ee fe96 	bl	8000638 <__aeabi_dmul>
 801190c:	4602      	mov	r2, r0
 801190e:	460b      	mov	r3, r1
 8011910:	4630      	mov	r0, r6
 8011912:	4639      	mov	r1, r7
 8011914:	f7ee fcd8 	bl	80002c8 <__aeabi_dsub>
 8011918:	460f      	mov	r7, r1
 801191a:	4606      	mov	r6, r0
 801191c:	f7ef f93c 	bl	8000b98 <__aeabi_d2iz>
 8011920:	9004      	str	r0, [sp, #16]
 8011922:	f7ee fe1f 	bl	8000564 <__aeabi_i2d>
 8011926:	4602      	mov	r2, r0
 8011928:	460b      	mov	r3, r1
 801192a:	4630      	mov	r0, r6
 801192c:	4639      	mov	r1, r7
 801192e:	f7ee fccb 	bl	80002c8 <__aeabi_dsub>
 8011932:	f1ba 0f00 	cmp.w	sl, #0
 8011936:	4606      	mov	r6, r0
 8011938:	460f      	mov	r7, r1
 801193a:	dd6d      	ble.n	8011a18 <__kernel_rem_pio2+0x250>
 801193c:	1e62      	subs	r2, r4, #1
 801193e:	ab0e      	add	r3, sp, #56	; 0x38
 8011940:	9d04      	ldr	r5, [sp, #16]
 8011942:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011946:	f1ca 0118 	rsb	r1, sl, #24
 801194a:	fa40 f301 	asr.w	r3, r0, r1
 801194e:	441d      	add	r5, r3
 8011950:	408b      	lsls	r3, r1
 8011952:	1ac0      	subs	r0, r0, r3
 8011954:	ab0e      	add	r3, sp, #56	; 0x38
 8011956:	9504      	str	r5, [sp, #16]
 8011958:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801195c:	f1ca 0317 	rsb	r3, sl, #23
 8011960:	fa40 fb03 	asr.w	fp, r0, r3
 8011964:	f1bb 0f00 	cmp.w	fp, #0
 8011968:	dd65      	ble.n	8011a36 <__kernel_rem_pio2+0x26e>
 801196a:	9b04      	ldr	r3, [sp, #16]
 801196c:	2200      	movs	r2, #0
 801196e:	3301      	adds	r3, #1
 8011970:	9304      	str	r3, [sp, #16]
 8011972:	4615      	mov	r5, r2
 8011974:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011978:	4294      	cmp	r4, r2
 801197a:	f300 809c 	bgt.w	8011ab6 <__kernel_rem_pio2+0x2ee>
 801197e:	f1ba 0f00 	cmp.w	sl, #0
 8011982:	dd07      	ble.n	8011994 <__kernel_rem_pio2+0x1cc>
 8011984:	f1ba 0f01 	cmp.w	sl, #1
 8011988:	f000 80c0 	beq.w	8011b0c <__kernel_rem_pio2+0x344>
 801198c:	f1ba 0f02 	cmp.w	sl, #2
 8011990:	f000 80c6 	beq.w	8011b20 <__kernel_rem_pio2+0x358>
 8011994:	f1bb 0f02 	cmp.w	fp, #2
 8011998:	d14d      	bne.n	8011a36 <__kernel_rem_pio2+0x26e>
 801199a:	4632      	mov	r2, r6
 801199c:	463b      	mov	r3, r7
 801199e:	4956      	ldr	r1, [pc, #344]	; (8011af8 <__kernel_rem_pio2+0x330>)
 80119a0:	2000      	movs	r0, #0
 80119a2:	f7ee fc91 	bl	80002c8 <__aeabi_dsub>
 80119a6:	4606      	mov	r6, r0
 80119a8:	460f      	mov	r7, r1
 80119aa:	2d00      	cmp	r5, #0
 80119ac:	d043      	beq.n	8011a36 <__kernel_rem_pio2+0x26e>
 80119ae:	4650      	mov	r0, sl
 80119b0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011ae8 <__kernel_rem_pio2+0x320>
 80119b4:	f000 fce4 	bl	8012380 <scalbn>
 80119b8:	4630      	mov	r0, r6
 80119ba:	4639      	mov	r1, r7
 80119bc:	ec53 2b10 	vmov	r2, r3, d0
 80119c0:	f7ee fc82 	bl	80002c8 <__aeabi_dsub>
 80119c4:	4606      	mov	r6, r0
 80119c6:	460f      	mov	r7, r1
 80119c8:	e035      	b.n	8011a36 <__kernel_rem_pio2+0x26e>
 80119ca:	4b4c      	ldr	r3, [pc, #304]	; (8011afc <__kernel_rem_pio2+0x334>)
 80119cc:	2200      	movs	r2, #0
 80119ce:	4630      	mov	r0, r6
 80119d0:	4639      	mov	r1, r7
 80119d2:	f7ee fe31 	bl	8000638 <__aeabi_dmul>
 80119d6:	f7ef f8df 	bl	8000b98 <__aeabi_d2iz>
 80119da:	f7ee fdc3 	bl	8000564 <__aeabi_i2d>
 80119de:	4602      	mov	r2, r0
 80119e0:	460b      	mov	r3, r1
 80119e2:	ec43 2b18 	vmov	d8, r2, r3
 80119e6:	4b46      	ldr	r3, [pc, #280]	; (8011b00 <__kernel_rem_pio2+0x338>)
 80119e8:	2200      	movs	r2, #0
 80119ea:	f7ee fe25 	bl	8000638 <__aeabi_dmul>
 80119ee:	4602      	mov	r2, r0
 80119f0:	460b      	mov	r3, r1
 80119f2:	4630      	mov	r0, r6
 80119f4:	4639      	mov	r1, r7
 80119f6:	f7ee fc67 	bl	80002c8 <__aeabi_dsub>
 80119fa:	f7ef f8cd 	bl	8000b98 <__aeabi_d2iz>
 80119fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a02:	f84b 0b04 	str.w	r0, [fp], #4
 8011a06:	ec51 0b18 	vmov	r0, r1, d8
 8011a0a:	f7ee fc5f 	bl	80002cc <__adddf3>
 8011a0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8011a12:	4606      	mov	r6, r0
 8011a14:	460f      	mov	r7, r1
 8011a16:	e75b      	b.n	80118d0 <__kernel_rem_pio2+0x108>
 8011a18:	d106      	bne.n	8011a28 <__kernel_rem_pio2+0x260>
 8011a1a:	1e63      	subs	r3, r4, #1
 8011a1c:	aa0e      	add	r2, sp, #56	; 0x38
 8011a1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011a22:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8011a26:	e79d      	b.n	8011964 <__kernel_rem_pio2+0x19c>
 8011a28:	4b36      	ldr	r3, [pc, #216]	; (8011b04 <__kernel_rem_pio2+0x33c>)
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	f7ef f88a 	bl	8000b44 <__aeabi_dcmpge>
 8011a30:	2800      	cmp	r0, #0
 8011a32:	d13d      	bne.n	8011ab0 <__kernel_rem_pio2+0x2e8>
 8011a34:	4683      	mov	fp, r0
 8011a36:	2200      	movs	r2, #0
 8011a38:	2300      	movs	r3, #0
 8011a3a:	4630      	mov	r0, r6
 8011a3c:	4639      	mov	r1, r7
 8011a3e:	f7ef f863 	bl	8000b08 <__aeabi_dcmpeq>
 8011a42:	2800      	cmp	r0, #0
 8011a44:	f000 80c0 	beq.w	8011bc8 <__kernel_rem_pio2+0x400>
 8011a48:	1e65      	subs	r5, r4, #1
 8011a4a:	462b      	mov	r3, r5
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	9902      	ldr	r1, [sp, #8]
 8011a50:	428b      	cmp	r3, r1
 8011a52:	da6c      	bge.n	8011b2e <__kernel_rem_pio2+0x366>
 8011a54:	2a00      	cmp	r2, #0
 8011a56:	f000 8089 	beq.w	8011b6c <__kernel_rem_pio2+0x3a4>
 8011a5a:	ab0e      	add	r3, sp, #56	; 0x38
 8011a5c:	f1aa 0a18 	sub.w	sl, sl, #24
 8011a60:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	f000 80ad 	beq.w	8011bc4 <__kernel_rem_pio2+0x3fc>
 8011a6a:	4650      	mov	r0, sl
 8011a6c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011ae8 <__kernel_rem_pio2+0x320>
 8011a70:	f000 fc86 	bl	8012380 <scalbn>
 8011a74:	ab9a      	add	r3, sp, #616	; 0x268
 8011a76:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011a7a:	ec57 6b10 	vmov	r6, r7, d0
 8011a7e:	00ec      	lsls	r4, r5, #3
 8011a80:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8011a84:	46aa      	mov	sl, r5
 8011a86:	f1ba 0f00 	cmp.w	sl, #0
 8011a8a:	f280 80d6 	bge.w	8011c3a <__kernel_rem_pio2+0x472>
 8011a8e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011ae0 <__kernel_rem_pio2+0x318>
 8011a92:	462e      	mov	r6, r5
 8011a94:	2e00      	cmp	r6, #0
 8011a96:	f2c0 8104 	blt.w	8011ca2 <__kernel_rem_pio2+0x4da>
 8011a9a:	ab72      	add	r3, sp, #456	; 0x1c8
 8011a9c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011aa0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011b08 <__kernel_rem_pio2+0x340>
 8011aa4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011aa8:	f04f 0800 	mov.w	r8, #0
 8011aac:	1baf      	subs	r7, r5, r6
 8011aae:	e0ea      	b.n	8011c86 <__kernel_rem_pio2+0x4be>
 8011ab0:	f04f 0b02 	mov.w	fp, #2
 8011ab4:	e759      	b.n	801196a <__kernel_rem_pio2+0x1a2>
 8011ab6:	f8d8 3000 	ldr.w	r3, [r8]
 8011aba:	b955      	cbnz	r5, 8011ad2 <__kernel_rem_pio2+0x30a>
 8011abc:	b123      	cbz	r3, 8011ac8 <__kernel_rem_pio2+0x300>
 8011abe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011ac2:	f8c8 3000 	str.w	r3, [r8]
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	3201      	adds	r2, #1
 8011aca:	f108 0804 	add.w	r8, r8, #4
 8011ace:	461d      	mov	r5, r3
 8011ad0:	e752      	b.n	8011978 <__kernel_rem_pio2+0x1b0>
 8011ad2:	1acb      	subs	r3, r1, r3
 8011ad4:	f8c8 3000 	str.w	r3, [r8]
 8011ad8:	462b      	mov	r3, r5
 8011ada:	e7f5      	b.n	8011ac8 <__kernel_rem_pio2+0x300>
 8011adc:	f3af 8000 	nop.w
	...
 8011aec:	3ff00000 	.word	0x3ff00000
 8011af0:	08012ba0 	.word	0x08012ba0
 8011af4:	40200000 	.word	0x40200000
 8011af8:	3ff00000 	.word	0x3ff00000
 8011afc:	3e700000 	.word	0x3e700000
 8011b00:	41700000 	.word	0x41700000
 8011b04:	3fe00000 	.word	0x3fe00000
 8011b08:	08012b60 	.word	0x08012b60
 8011b0c:	1e62      	subs	r2, r4, #1
 8011b0e:	ab0e      	add	r3, sp, #56	; 0x38
 8011b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b14:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011b18:	a90e      	add	r1, sp, #56	; 0x38
 8011b1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011b1e:	e739      	b.n	8011994 <__kernel_rem_pio2+0x1cc>
 8011b20:	1e62      	subs	r2, r4, #1
 8011b22:	ab0e      	add	r3, sp, #56	; 0x38
 8011b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011b2c:	e7f4      	b.n	8011b18 <__kernel_rem_pio2+0x350>
 8011b2e:	a90e      	add	r1, sp, #56	; 0x38
 8011b30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011b34:	3b01      	subs	r3, #1
 8011b36:	430a      	orrs	r2, r1
 8011b38:	e789      	b.n	8011a4e <__kernel_rem_pio2+0x286>
 8011b3a:	3301      	adds	r3, #1
 8011b3c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011b40:	2900      	cmp	r1, #0
 8011b42:	d0fa      	beq.n	8011b3a <__kernel_rem_pio2+0x372>
 8011b44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b46:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011b4a:	446a      	add	r2, sp
 8011b4c:	3a98      	subs	r2, #152	; 0x98
 8011b4e:	920a      	str	r2, [sp, #40]	; 0x28
 8011b50:	9a08      	ldr	r2, [sp, #32]
 8011b52:	18e3      	adds	r3, r4, r3
 8011b54:	18a5      	adds	r5, r4, r2
 8011b56:	aa22      	add	r2, sp, #136	; 0x88
 8011b58:	f104 0801 	add.w	r8, r4, #1
 8011b5c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011b60:	9304      	str	r3, [sp, #16]
 8011b62:	9b04      	ldr	r3, [sp, #16]
 8011b64:	4543      	cmp	r3, r8
 8011b66:	da04      	bge.n	8011b72 <__kernel_rem_pio2+0x3aa>
 8011b68:	461c      	mov	r4, r3
 8011b6a:	e6a3      	b.n	80118b4 <__kernel_rem_pio2+0xec>
 8011b6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b6e:	2301      	movs	r3, #1
 8011b70:	e7e4      	b.n	8011b3c <__kernel_rem_pio2+0x374>
 8011b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b74:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011b78:	f7ee fcf4 	bl	8000564 <__aeabi_i2d>
 8011b7c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b82:	46ab      	mov	fp, r5
 8011b84:	461c      	mov	r4, r3
 8011b86:	f04f 0900 	mov.w	r9, #0
 8011b8a:	2600      	movs	r6, #0
 8011b8c:	2700      	movs	r7, #0
 8011b8e:	9b06      	ldr	r3, [sp, #24]
 8011b90:	4599      	cmp	r9, r3
 8011b92:	dd06      	ble.n	8011ba2 <__kernel_rem_pio2+0x3da>
 8011b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b96:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011b9a:	f108 0801 	add.w	r8, r8, #1
 8011b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8011ba0:	e7df      	b.n	8011b62 <__kernel_rem_pio2+0x39a>
 8011ba2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011ba6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011baa:	f7ee fd45 	bl	8000638 <__aeabi_dmul>
 8011bae:	4602      	mov	r2, r0
 8011bb0:	460b      	mov	r3, r1
 8011bb2:	4630      	mov	r0, r6
 8011bb4:	4639      	mov	r1, r7
 8011bb6:	f7ee fb89 	bl	80002cc <__adddf3>
 8011bba:	f109 0901 	add.w	r9, r9, #1
 8011bbe:	4606      	mov	r6, r0
 8011bc0:	460f      	mov	r7, r1
 8011bc2:	e7e4      	b.n	8011b8e <__kernel_rem_pio2+0x3c6>
 8011bc4:	3d01      	subs	r5, #1
 8011bc6:	e748      	b.n	8011a5a <__kernel_rem_pio2+0x292>
 8011bc8:	ec47 6b10 	vmov	d0, r6, r7
 8011bcc:	f1ca 0000 	rsb	r0, sl, #0
 8011bd0:	f000 fbd6 	bl	8012380 <scalbn>
 8011bd4:	ec57 6b10 	vmov	r6, r7, d0
 8011bd8:	4ba0      	ldr	r3, [pc, #640]	; (8011e5c <__kernel_rem_pio2+0x694>)
 8011bda:	ee10 0a10 	vmov	r0, s0
 8011bde:	2200      	movs	r2, #0
 8011be0:	4639      	mov	r1, r7
 8011be2:	f7ee ffaf 	bl	8000b44 <__aeabi_dcmpge>
 8011be6:	b1f8      	cbz	r0, 8011c28 <__kernel_rem_pio2+0x460>
 8011be8:	4b9d      	ldr	r3, [pc, #628]	; (8011e60 <__kernel_rem_pio2+0x698>)
 8011bea:	2200      	movs	r2, #0
 8011bec:	4630      	mov	r0, r6
 8011bee:	4639      	mov	r1, r7
 8011bf0:	f7ee fd22 	bl	8000638 <__aeabi_dmul>
 8011bf4:	f7ee ffd0 	bl	8000b98 <__aeabi_d2iz>
 8011bf8:	4680      	mov	r8, r0
 8011bfa:	f7ee fcb3 	bl	8000564 <__aeabi_i2d>
 8011bfe:	4b97      	ldr	r3, [pc, #604]	; (8011e5c <__kernel_rem_pio2+0x694>)
 8011c00:	2200      	movs	r2, #0
 8011c02:	f7ee fd19 	bl	8000638 <__aeabi_dmul>
 8011c06:	460b      	mov	r3, r1
 8011c08:	4602      	mov	r2, r0
 8011c0a:	4639      	mov	r1, r7
 8011c0c:	4630      	mov	r0, r6
 8011c0e:	f7ee fb5b 	bl	80002c8 <__aeabi_dsub>
 8011c12:	f7ee ffc1 	bl	8000b98 <__aeabi_d2iz>
 8011c16:	1c65      	adds	r5, r4, #1
 8011c18:	ab0e      	add	r3, sp, #56	; 0x38
 8011c1a:	f10a 0a18 	add.w	sl, sl, #24
 8011c1e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c22:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011c26:	e720      	b.n	8011a6a <__kernel_rem_pio2+0x2a2>
 8011c28:	4630      	mov	r0, r6
 8011c2a:	4639      	mov	r1, r7
 8011c2c:	f7ee ffb4 	bl	8000b98 <__aeabi_d2iz>
 8011c30:	ab0e      	add	r3, sp, #56	; 0x38
 8011c32:	4625      	mov	r5, r4
 8011c34:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c38:	e717      	b.n	8011a6a <__kernel_rem_pio2+0x2a2>
 8011c3a:	ab0e      	add	r3, sp, #56	; 0x38
 8011c3c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011c40:	f7ee fc90 	bl	8000564 <__aeabi_i2d>
 8011c44:	4632      	mov	r2, r6
 8011c46:	463b      	mov	r3, r7
 8011c48:	f7ee fcf6 	bl	8000638 <__aeabi_dmul>
 8011c4c:	4b84      	ldr	r3, [pc, #528]	; (8011e60 <__kernel_rem_pio2+0x698>)
 8011c4e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8011c52:	2200      	movs	r2, #0
 8011c54:	4630      	mov	r0, r6
 8011c56:	4639      	mov	r1, r7
 8011c58:	f7ee fcee 	bl	8000638 <__aeabi_dmul>
 8011c5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011c60:	4606      	mov	r6, r0
 8011c62:	460f      	mov	r7, r1
 8011c64:	e70f      	b.n	8011a86 <__kernel_rem_pio2+0x2be>
 8011c66:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011c6a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011c6e:	f7ee fce3 	bl	8000638 <__aeabi_dmul>
 8011c72:	4602      	mov	r2, r0
 8011c74:	460b      	mov	r3, r1
 8011c76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c7a:	f7ee fb27 	bl	80002cc <__adddf3>
 8011c7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011c82:	f108 0801 	add.w	r8, r8, #1
 8011c86:	9b02      	ldr	r3, [sp, #8]
 8011c88:	4598      	cmp	r8, r3
 8011c8a:	dc01      	bgt.n	8011c90 <__kernel_rem_pio2+0x4c8>
 8011c8c:	45b8      	cmp	r8, r7
 8011c8e:	ddea      	ble.n	8011c66 <__kernel_rem_pio2+0x49e>
 8011c90:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011c94:	ab4a      	add	r3, sp, #296	; 0x128
 8011c96:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011c9a:	ed87 7b00 	vstr	d7, [r7]
 8011c9e:	3e01      	subs	r6, #1
 8011ca0:	e6f8      	b.n	8011a94 <__kernel_rem_pio2+0x2cc>
 8011ca2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011ca4:	2b02      	cmp	r3, #2
 8011ca6:	dc0b      	bgt.n	8011cc0 <__kernel_rem_pio2+0x4f8>
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	dc35      	bgt.n	8011d18 <__kernel_rem_pio2+0x550>
 8011cac:	d059      	beq.n	8011d62 <__kernel_rem_pio2+0x59a>
 8011cae:	9b04      	ldr	r3, [sp, #16]
 8011cb0:	f003 0007 	and.w	r0, r3, #7
 8011cb4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011cb8:	ecbd 8b02 	vpop	{d8}
 8011cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011cc2:	2b03      	cmp	r3, #3
 8011cc4:	d1f3      	bne.n	8011cae <__kernel_rem_pio2+0x4e6>
 8011cc6:	ab4a      	add	r3, sp, #296	; 0x128
 8011cc8:	4423      	add	r3, r4
 8011cca:	9306      	str	r3, [sp, #24]
 8011ccc:	461c      	mov	r4, r3
 8011cce:	469a      	mov	sl, r3
 8011cd0:	9502      	str	r5, [sp, #8]
 8011cd2:	9b02      	ldr	r3, [sp, #8]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	f1aa 0a08 	sub.w	sl, sl, #8
 8011cda:	dc6b      	bgt.n	8011db4 <__kernel_rem_pio2+0x5ec>
 8011cdc:	46aa      	mov	sl, r5
 8011cde:	f1ba 0f01 	cmp.w	sl, #1
 8011ce2:	f1a4 0408 	sub.w	r4, r4, #8
 8011ce6:	f300 8085 	bgt.w	8011df4 <__kernel_rem_pio2+0x62c>
 8011cea:	9c06      	ldr	r4, [sp, #24]
 8011cec:	2000      	movs	r0, #0
 8011cee:	3408      	adds	r4, #8
 8011cf0:	2100      	movs	r1, #0
 8011cf2:	2d01      	cmp	r5, #1
 8011cf4:	f300 809d 	bgt.w	8011e32 <__kernel_rem_pio2+0x66a>
 8011cf8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011cfc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8011d00:	f1bb 0f00 	cmp.w	fp, #0
 8011d04:	f040 809b 	bne.w	8011e3e <__kernel_rem_pio2+0x676>
 8011d08:	9b01      	ldr	r3, [sp, #4]
 8011d0a:	e9c3 5600 	strd	r5, r6, [r3]
 8011d0e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011d12:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011d16:	e7ca      	b.n	8011cae <__kernel_rem_pio2+0x4e6>
 8011d18:	3408      	adds	r4, #8
 8011d1a:	ab4a      	add	r3, sp, #296	; 0x128
 8011d1c:	441c      	add	r4, r3
 8011d1e:	462e      	mov	r6, r5
 8011d20:	2000      	movs	r0, #0
 8011d22:	2100      	movs	r1, #0
 8011d24:	2e00      	cmp	r6, #0
 8011d26:	da36      	bge.n	8011d96 <__kernel_rem_pio2+0x5ce>
 8011d28:	f1bb 0f00 	cmp.w	fp, #0
 8011d2c:	d039      	beq.n	8011da2 <__kernel_rem_pio2+0x5da>
 8011d2e:	4602      	mov	r2, r0
 8011d30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d34:	9c01      	ldr	r4, [sp, #4]
 8011d36:	e9c4 2300 	strd	r2, r3, [r4]
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	460b      	mov	r3, r1
 8011d3e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011d42:	f7ee fac1 	bl	80002c8 <__aeabi_dsub>
 8011d46:	ae4c      	add	r6, sp, #304	; 0x130
 8011d48:	2401      	movs	r4, #1
 8011d4a:	42a5      	cmp	r5, r4
 8011d4c:	da2c      	bge.n	8011da8 <__kernel_rem_pio2+0x5e0>
 8011d4e:	f1bb 0f00 	cmp.w	fp, #0
 8011d52:	d002      	beq.n	8011d5a <__kernel_rem_pio2+0x592>
 8011d54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d58:	4619      	mov	r1, r3
 8011d5a:	9b01      	ldr	r3, [sp, #4]
 8011d5c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011d60:	e7a5      	b.n	8011cae <__kernel_rem_pio2+0x4e6>
 8011d62:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8011d66:	eb0d 0403 	add.w	r4, sp, r3
 8011d6a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011d6e:	2000      	movs	r0, #0
 8011d70:	2100      	movs	r1, #0
 8011d72:	2d00      	cmp	r5, #0
 8011d74:	da09      	bge.n	8011d8a <__kernel_rem_pio2+0x5c2>
 8011d76:	f1bb 0f00 	cmp.w	fp, #0
 8011d7a:	d002      	beq.n	8011d82 <__kernel_rem_pio2+0x5ba>
 8011d7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d80:	4619      	mov	r1, r3
 8011d82:	9b01      	ldr	r3, [sp, #4]
 8011d84:	e9c3 0100 	strd	r0, r1, [r3]
 8011d88:	e791      	b.n	8011cae <__kernel_rem_pio2+0x4e6>
 8011d8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d8e:	f7ee fa9d 	bl	80002cc <__adddf3>
 8011d92:	3d01      	subs	r5, #1
 8011d94:	e7ed      	b.n	8011d72 <__kernel_rem_pio2+0x5aa>
 8011d96:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d9a:	f7ee fa97 	bl	80002cc <__adddf3>
 8011d9e:	3e01      	subs	r6, #1
 8011da0:	e7c0      	b.n	8011d24 <__kernel_rem_pio2+0x55c>
 8011da2:	4602      	mov	r2, r0
 8011da4:	460b      	mov	r3, r1
 8011da6:	e7c5      	b.n	8011d34 <__kernel_rem_pio2+0x56c>
 8011da8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011dac:	f7ee fa8e 	bl	80002cc <__adddf3>
 8011db0:	3401      	adds	r4, #1
 8011db2:	e7ca      	b.n	8011d4a <__kernel_rem_pio2+0x582>
 8011db4:	e9da 8900 	ldrd	r8, r9, [sl]
 8011db8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011dbc:	9b02      	ldr	r3, [sp, #8]
 8011dbe:	3b01      	subs	r3, #1
 8011dc0:	9302      	str	r3, [sp, #8]
 8011dc2:	4632      	mov	r2, r6
 8011dc4:	463b      	mov	r3, r7
 8011dc6:	4640      	mov	r0, r8
 8011dc8:	4649      	mov	r1, r9
 8011dca:	f7ee fa7f 	bl	80002cc <__adddf3>
 8011dce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	460b      	mov	r3, r1
 8011dd6:	4640      	mov	r0, r8
 8011dd8:	4649      	mov	r1, r9
 8011dda:	f7ee fa75 	bl	80002c8 <__aeabi_dsub>
 8011dde:	4632      	mov	r2, r6
 8011de0:	463b      	mov	r3, r7
 8011de2:	f7ee fa73 	bl	80002cc <__adddf3>
 8011de6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011dea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011dee:	ed8a 7b00 	vstr	d7, [sl]
 8011df2:	e76e      	b.n	8011cd2 <__kernel_rem_pio2+0x50a>
 8011df4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011df8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011dfc:	4640      	mov	r0, r8
 8011dfe:	4632      	mov	r2, r6
 8011e00:	463b      	mov	r3, r7
 8011e02:	4649      	mov	r1, r9
 8011e04:	f7ee fa62 	bl	80002cc <__adddf3>
 8011e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e0c:	4602      	mov	r2, r0
 8011e0e:	460b      	mov	r3, r1
 8011e10:	4640      	mov	r0, r8
 8011e12:	4649      	mov	r1, r9
 8011e14:	f7ee fa58 	bl	80002c8 <__aeabi_dsub>
 8011e18:	4632      	mov	r2, r6
 8011e1a:	463b      	mov	r3, r7
 8011e1c:	f7ee fa56 	bl	80002cc <__adddf3>
 8011e20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011e28:	ed84 7b00 	vstr	d7, [r4]
 8011e2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011e30:	e755      	b.n	8011cde <__kernel_rem_pio2+0x516>
 8011e32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e36:	f7ee fa49 	bl	80002cc <__adddf3>
 8011e3a:	3d01      	subs	r5, #1
 8011e3c:	e759      	b.n	8011cf2 <__kernel_rem_pio2+0x52a>
 8011e3e:	9b01      	ldr	r3, [sp, #4]
 8011e40:	9a01      	ldr	r2, [sp, #4]
 8011e42:	601d      	str	r5, [r3, #0]
 8011e44:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011e48:	605c      	str	r4, [r3, #4]
 8011e4a:	609f      	str	r7, [r3, #8]
 8011e4c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011e50:	60d3      	str	r3, [r2, #12]
 8011e52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e56:	6110      	str	r0, [r2, #16]
 8011e58:	6153      	str	r3, [r2, #20]
 8011e5a:	e728      	b.n	8011cae <__kernel_rem_pio2+0x4e6>
 8011e5c:	41700000 	.word	0x41700000
 8011e60:	3e700000 	.word	0x3e700000
 8011e64:	00000000 	.word	0x00000000

08011e68 <__kernel_tan>:
 8011e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e6c:	ed2d 8b06 	vpush	{d8-d10}
 8011e70:	ec5b ab10 	vmov	sl, fp, d0
 8011e74:	4be0      	ldr	r3, [pc, #896]	; (80121f8 <__kernel_tan+0x390>)
 8011e76:	b083      	sub	sp, #12
 8011e78:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8011e7c:	429f      	cmp	r7, r3
 8011e7e:	ec59 8b11 	vmov	r8, r9, d1
 8011e82:	4606      	mov	r6, r0
 8011e84:	f8cd b000 	str.w	fp, [sp]
 8011e88:	dc61      	bgt.n	8011f4e <__kernel_tan+0xe6>
 8011e8a:	ee10 0a10 	vmov	r0, s0
 8011e8e:	4659      	mov	r1, fp
 8011e90:	f7ee fe82 	bl	8000b98 <__aeabi_d2iz>
 8011e94:	4605      	mov	r5, r0
 8011e96:	2800      	cmp	r0, #0
 8011e98:	f040 8083 	bne.w	8011fa2 <__kernel_tan+0x13a>
 8011e9c:	1c73      	adds	r3, r6, #1
 8011e9e:	4652      	mov	r2, sl
 8011ea0:	4313      	orrs	r3, r2
 8011ea2:	433b      	orrs	r3, r7
 8011ea4:	d112      	bne.n	8011ecc <__kernel_tan+0x64>
 8011ea6:	ec4b ab10 	vmov	d0, sl, fp
 8011eaa:	f7ff fa41 	bl	8011330 <fabs>
 8011eae:	49d3      	ldr	r1, [pc, #844]	; (80121fc <__kernel_tan+0x394>)
 8011eb0:	ec53 2b10 	vmov	r2, r3, d0
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	f7ee fce9 	bl	800088c <__aeabi_ddiv>
 8011eba:	4682      	mov	sl, r0
 8011ebc:	468b      	mov	fp, r1
 8011ebe:	ec4b ab10 	vmov	d0, sl, fp
 8011ec2:	b003      	add	sp, #12
 8011ec4:	ecbd 8b06 	vpop	{d8-d10}
 8011ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ecc:	2e01      	cmp	r6, #1
 8011ece:	d0f6      	beq.n	8011ebe <__kernel_tan+0x56>
 8011ed0:	4642      	mov	r2, r8
 8011ed2:	464b      	mov	r3, r9
 8011ed4:	4650      	mov	r0, sl
 8011ed6:	4659      	mov	r1, fp
 8011ed8:	f7ee f9f8 	bl	80002cc <__adddf3>
 8011edc:	4602      	mov	r2, r0
 8011ede:	460b      	mov	r3, r1
 8011ee0:	460f      	mov	r7, r1
 8011ee2:	2000      	movs	r0, #0
 8011ee4:	49c6      	ldr	r1, [pc, #792]	; (8012200 <__kernel_tan+0x398>)
 8011ee6:	f7ee fcd1 	bl	800088c <__aeabi_ddiv>
 8011eea:	e9cd 0100 	strd	r0, r1, [sp]
 8011eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ef2:	462e      	mov	r6, r5
 8011ef4:	4652      	mov	r2, sl
 8011ef6:	462c      	mov	r4, r5
 8011ef8:	4630      	mov	r0, r6
 8011efa:	461d      	mov	r5, r3
 8011efc:	4639      	mov	r1, r7
 8011efe:	465b      	mov	r3, fp
 8011f00:	f7ee f9e2 	bl	80002c8 <__aeabi_dsub>
 8011f04:	4602      	mov	r2, r0
 8011f06:	460b      	mov	r3, r1
 8011f08:	4640      	mov	r0, r8
 8011f0a:	4649      	mov	r1, r9
 8011f0c:	f7ee f9dc 	bl	80002c8 <__aeabi_dsub>
 8011f10:	4632      	mov	r2, r6
 8011f12:	462b      	mov	r3, r5
 8011f14:	f7ee fb90 	bl	8000638 <__aeabi_dmul>
 8011f18:	4632      	mov	r2, r6
 8011f1a:	4680      	mov	r8, r0
 8011f1c:	4689      	mov	r9, r1
 8011f1e:	462b      	mov	r3, r5
 8011f20:	4630      	mov	r0, r6
 8011f22:	4639      	mov	r1, r7
 8011f24:	f7ee fb88 	bl	8000638 <__aeabi_dmul>
 8011f28:	4bb4      	ldr	r3, [pc, #720]	; (80121fc <__kernel_tan+0x394>)
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	f7ee f9ce 	bl	80002cc <__adddf3>
 8011f30:	4602      	mov	r2, r0
 8011f32:	460b      	mov	r3, r1
 8011f34:	4640      	mov	r0, r8
 8011f36:	4649      	mov	r1, r9
 8011f38:	f7ee f9c8 	bl	80002cc <__adddf3>
 8011f3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011f40:	f7ee fb7a 	bl	8000638 <__aeabi_dmul>
 8011f44:	4622      	mov	r2, r4
 8011f46:	462b      	mov	r3, r5
 8011f48:	f7ee f9c0 	bl	80002cc <__adddf3>
 8011f4c:	e7b5      	b.n	8011eba <__kernel_tan+0x52>
 8011f4e:	4bad      	ldr	r3, [pc, #692]	; (8012204 <__kernel_tan+0x39c>)
 8011f50:	429f      	cmp	r7, r3
 8011f52:	dd26      	ble.n	8011fa2 <__kernel_tan+0x13a>
 8011f54:	9b00      	ldr	r3, [sp, #0]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	da09      	bge.n	8011f6e <__kernel_tan+0x106>
 8011f5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011f5e:	469b      	mov	fp, r3
 8011f60:	ee10 aa10 	vmov	sl, s0
 8011f64:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011f68:	ee11 8a10 	vmov	r8, s2
 8011f6c:	4699      	mov	r9, r3
 8011f6e:	4652      	mov	r2, sl
 8011f70:	465b      	mov	r3, fp
 8011f72:	a183      	add	r1, pc, #524	; (adr r1, 8012180 <__kernel_tan+0x318>)
 8011f74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f78:	f7ee f9a6 	bl	80002c8 <__aeabi_dsub>
 8011f7c:	4642      	mov	r2, r8
 8011f7e:	464b      	mov	r3, r9
 8011f80:	4604      	mov	r4, r0
 8011f82:	460d      	mov	r5, r1
 8011f84:	a180      	add	r1, pc, #512	; (adr r1, 8012188 <__kernel_tan+0x320>)
 8011f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f8a:	f7ee f99d 	bl	80002c8 <__aeabi_dsub>
 8011f8e:	4622      	mov	r2, r4
 8011f90:	462b      	mov	r3, r5
 8011f92:	f7ee f99b 	bl	80002cc <__adddf3>
 8011f96:	f04f 0800 	mov.w	r8, #0
 8011f9a:	4682      	mov	sl, r0
 8011f9c:	468b      	mov	fp, r1
 8011f9e:	f04f 0900 	mov.w	r9, #0
 8011fa2:	4652      	mov	r2, sl
 8011fa4:	465b      	mov	r3, fp
 8011fa6:	4650      	mov	r0, sl
 8011fa8:	4659      	mov	r1, fp
 8011faa:	f7ee fb45 	bl	8000638 <__aeabi_dmul>
 8011fae:	4602      	mov	r2, r0
 8011fb0:	460b      	mov	r3, r1
 8011fb2:	ec43 2b18 	vmov	d8, r2, r3
 8011fb6:	f7ee fb3f 	bl	8000638 <__aeabi_dmul>
 8011fba:	ec53 2b18 	vmov	r2, r3, d8
 8011fbe:	4604      	mov	r4, r0
 8011fc0:	460d      	mov	r5, r1
 8011fc2:	4650      	mov	r0, sl
 8011fc4:	4659      	mov	r1, fp
 8011fc6:	f7ee fb37 	bl	8000638 <__aeabi_dmul>
 8011fca:	a371      	add	r3, pc, #452	; (adr r3, 8012190 <__kernel_tan+0x328>)
 8011fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd0:	ec41 0b19 	vmov	d9, r0, r1
 8011fd4:	4620      	mov	r0, r4
 8011fd6:	4629      	mov	r1, r5
 8011fd8:	f7ee fb2e 	bl	8000638 <__aeabi_dmul>
 8011fdc:	a36e      	add	r3, pc, #440	; (adr r3, 8012198 <__kernel_tan+0x330>)
 8011fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe2:	f7ee f973 	bl	80002cc <__adddf3>
 8011fe6:	4622      	mov	r2, r4
 8011fe8:	462b      	mov	r3, r5
 8011fea:	f7ee fb25 	bl	8000638 <__aeabi_dmul>
 8011fee:	a36c      	add	r3, pc, #432	; (adr r3, 80121a0 <__kernel_tan+0x338>)
 8011ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff4:	f7ee f96a 	bl	80002cc <__adddf3>
 8011ff8:	4622      	mov	r2, r4
 8011ffa:	462b      	mov	r3, r5
 8011ffc:	f7ee fb1c 	bl	8000638 <__aeabi_dmul>
 8012000:	a369      	add	r3, pc, #420	; (adr r3, 80121a8 <__kernel_tan+0x340>)
 8012002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012006:	f7ee f961 	bl	80002cc <__adddf3>
 801200a:	4622      	mov	r2, r4
 801200c:	462b      	mov	r3, r5
 801200e:	f7ee fb13 	bl	8000638 <__aeabi_dmul>
 8012012:	a367      	add	r3, pc, #412	; (adr r3, 80121b0 <__kernel_tan+0x348>)
 8012014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012018:	f7ee f958 	bl	80002cc <__adddf3>
 801201c:	4622      	mov	r2, r4
 801201e:	462b      	mov	r3, r5
 8012020:	f7ee fb0a 	bl	8000638 <__aeabi_dmul>
 8012024:	a364      	add	r3, pc, #400	; (adr r3, 80121b8 <__kernel_tan+0x350>)
 8012026:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202a:	f7ee f94f 	bl	80002cc <__adddf3>
 801202e:	ec53 2b18 	vmov	r2, r3, d8
 8012032:	f7ee fb01 	bl	8000638 <__aeabi_dmul>
 8012036:	a362      	add	r3, pc, #392	; (adr r3, 80121c0 <__kernel_tan+0x358>)
 8012038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203c:	ec41 0b1a 	vmov	d10, r0, r1
 8012040:	4620      	mov	r0, r4
 8012042:	4629      	mov	r1, r5
 8012044:	f7ee faf8 	bl	8000638 <__aeabi_dmul>
 8012048:	a35f      	add	r3, pc, #380	; (adr r3, 80121c8 <__kernel_tan+0x360>)
 801204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204e:	f7ee f93d 	bl	80002cc <__adddf3>
 8012052:	4622      	mov	r2, r4
 8012054:	462b      	mov	r3, r5
 8012056:	f7ee faef 	bl	8000638 <__aeabi_dmul>
 801205a:	a35d      	add	r3, pc, #372	; (adr r3, 80121d0 <__kernel_tan+0x368>)
 801205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012060:	f7ee f934 	bl	80002cc <__adddf3>
 8012064:	4622      	mov	r2, r4
 8012066:	462b      	mov	r3, r5
 8012068:	f7ee fae6 	bl	8000638 <__aeabi_dmul>
 801206c:	a35a      	add	r3, pc, #360	; (adr r3, 80121d8 <__kernel_tan+0x370>)
 801206e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012072:	f7ee f92b 	bl	80002cc <__adddf3>
 8012076:	4622      	mov	r2, r4
 8012078:	462b      	mov	r3, r5
 801207a:	f7ee fadd 	bl	8000638 <__aeabi_dmul>
 801207e:	a358      	add	r3, pc, #352	; (adr r3, 80121e0 <__kernel_tan+0x378>)
 8012080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012084:	f7ee f922 	bl	80002cc <__adddf3>
 8012088:	4622      	mov	r2, r4
 801208a:	462b      	mov	r3, r5
 801208c:	f7ee fad4 	bl	8000638 <__aeabi_dmul>
 8012090:	a355      	add	r3, pc, #340	; (adr r3, 80121e8 <__kernel_tan+0x380>)
 8012092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012096:	f7ee f919 	bl	80002cc <__adddf3>
 801209a:	4602      	mov	r2, r0
 801209c:	460b      	mov	r3, r1
 801209e:	ec51 0b1a 	vmov	r0, r1, d10
 80120a2:	f7ee f913 	bl	80002cc <__adddf3>
 80120a6:	ec53 2b19 	vmov	r2, r3, d9
 80120aa:	f7ee fac5 	bl	8000638 <__aeabi_dmul>
 80120ae:	4642      	mov	r2, r8
 80120b0:	464b      	mov	r3, r9
 80120b2:	f7ee f90b 	bl	80002cc <__adddf3>
 80120b6:	ec53 2b18 	vmov	r2, r3, d8
 80120ba:	f7ee fabd 	bl	8000638 <__aeabi_dmul>
 80120be:	4642      	mov	r2, r8
 80120c0:	464b      	mov	r3, r9
 80120c2:	f7ee f903 	bl	80002cc <__adddf3>
 80120c6:	a34a      	add	r3, pc, #296	; (adr r3, 80121f0 <__kernel_tan+0x388>)
 80120c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120cc:	4604      	mov	r4, r0
 80120ce:	460d      	mov	r5, r1
 80120d0:	ec51 0b19 	vmov	r0, r1, d9
 80120d4:	f7ee fab0 	bl	8000638 <__aeabi_dmul>
 80120d8:	4622      	mov	r2, r4
 80120da:	462b      	mov	r3, r5
 80120dc:	f7ee f8f6 	bl	80002cc <__adddf3>
 80120e0:	460b      	mov	r3, r1
 80120e2:	ec41 0b18 	vmov	d8, r0, r1
 80120e6:	4602      	mov	r2, r0
 80120e8:	4659      	mov	r1, fp
 80120ea:	4650      	mov	r0, sl
 80120ec:	f7ee f8ee 	bl	80002cc <__adddf3>
 80120f0:	4b44      	ldr	r3, [pc, #272]	; (8012204 <__kernel_tan+0x39c>)
 80120f2:	429f      	cmp	r7, r3
 80120f4:	4604      	mov	r4, r0
 80120f6:	460d      	mov	r5, r1
 80120f8:	f340 8086 	ble.w	8012208 <__kernel_tan+0x3a0>
 80120fc:	4630      	mov	r0, r6
 80120fe:	f7ee fa31 	bl	8000564 <__aeabi_i2d>
 8012102:	4622      	mov	r2, r4
 8012104:	4680      	mov	r8, r0
 8012106:	4689      	mov	r9, r1
 8012108:	462b      	mov	r3, r5
 801210a:	4620      	mov	r0, r4
 801210c:	4629      	mov	r1, r5
 801210e:	f7ee fa93 	bl	8000638 <__aeabi_dmul>
 8012112:	4642      	mov	r2, r8
 8012114:	4606      	mov	r6, r0
 8012116:	460f      	mov	r7, r1
 8012118:	464b      	mov	r3, r9
 801211a:	4620      	mov	r0, r4
 801211c:	4629      	mov	r1, r5
 801211e:	f7ee f8d5 	bl	80002cc <__adddf3>
 8012122:	4602      	mov	r2, r0
 8012124:	460b      	mov	r3, r1
 8012126:	4630      	mov	r0, r6
 8012128:	4639      	mov	r1, r7
 801212a:	f7ee fbaf 	bl	800088c <__aeabi_ddiv>
 801212e:	ec53 2b18 	vmov	r2, r3, d8
 8012132:	f7ee f8c9 	bl	80002c8 <__aeabi_dsub>
 8012136:	4602      	mov	r2, r0
 8012138:	460b      	mov	r3, r1
 801213a:	4650      	mov	r0, sl
 801213c:	4659      	mov	r1, fp
 801213e:	f7ee f8c3 	bl	80002c8 <__aeabi_dsub>
 8012142:	4602      	mov	r2, r0
 8012144:	460b      	mov	r3, r1
 8012146:	f7ee f8c1 	bl	80002cc <__adddf3>
 801214a:	4602      	mov	r2, r0
 801214c:	460b      	mov	r3, r1
 801214e:	4640      	mov	r0, r8
 8012150:	4649      	mov	r1, r9
 8012152:	f7ee f8b9 	bl	80002c8 <__aeabi_dsub>
 8012156:	9b00      	ldr	r3, [sp, #0]
 8012158:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 801215c:	f00a 0a02 	and.w	sl, sl, #2
 8012160:	4604      	mov	r4, r0
 8012162:	f1ca 0001 	rsb	r0, sl, #1
 8012166:	460d      	mov	r5, r1
 8012168:	f7ee f9fc 	bl	8000564 <__aeabi_i2d>
 801216c:	4602      	mov	r2, r0
 801216e:	460b      	mov	r3, r1
 8012170:	4620      	mov	r0, r4
 8012172:	4629      	mov	r1, r5
 8012174:	f7ee fa60 	bl	8000638 <__aeabi_dmul>
 8012178:	e69f      	b.n	8011eba <__kernel_tan+0x52>
 801217a:	bf00      	nop
 801217c:	f3af 8000 	nop.w
 8012180:	54442d18 	.word	0x54442d18
 8012184:	3fe921fb 	.word	0x3fe921fb
 8012188:	33145c07 	.word	0x33145c07
 801218c:	3c81a626 	.word	0x3c81a626
 8012190:	74bf7ad4 	.word	0x74bf7ad4
 8012194:	3efb2a70 	.word	0x3efb2a70
 8012198:	32f0a7e9 	.word	0x32f0a7e9
 801219c:	3f12b80f 	.word	0x3f12b80f
 80121a0:	1a8d1068 	.word	0x1a8d1068
 80121a4:	3f3026f7 	.word	0x3f3026f7
 80121a8:	fee08315 	.word	0xfee08315
 80121ac:	3f57dbc8 	.word	0x3f57dbc8
 80121b0:	e96e8493 	.word	0xe96e8493
 80121b4:	3f8226e3 	.word	0x3f8226e3
 80121b8:	1bb341fe 	.word	0x1bb341fe
 80121bc:	3faba1ba 	.word	0x3faba1ba
 80121c0:	db605373 	.word	0xdb605373
 80121c4:	bef375cb 	.word	0xbef375cb
 80121c8:	a03792a6 	.word	0xa03792a6
 80121cc:	3f147e88 	.word	0x3f147e88
 80121d0:	f2f26501 	.word	0xf2f26501
 80121d4:	3f4344d8 	.word	0x3f4344d8
 80121d8:	c9560328 	.word	0xc9560328
 80121dc:	3f6d6d22 	.word	0x3f6d6d22
 80121e0:	8406d637 	.word	0x8406d637
 80121e4:	3f9664f4 	.word	0x3f9664f4
 80121e8:	1110fe7a 	.word	0x1110fe7a
 80121ec:	3fc11111 	.word	0x3fc11111
 80121f0:	55555563 	.word	0x55555563
 80121f4:	3fd55555 	.word	0x3fd55555
 80121f8:	3e2fffff 	.word	0x3e2fffff
 80121fc:	3ff00000 	.word	0x3ff00000
 8012200:	bff00000 	.word	0xbff00000
 8012204:	3fe59427 	.word	0x3fe59427
 8012208:	2e01      	cmp	r6, #1
 801220a:	d02f      	beq.n	801226c <__kernel_tan+0x404>
 801220c:	460f      	mov	r7, r1
 801220e:	4602      	mov	r2, r0
 8012210:	460b      	mov	r3, r1
 8012212:	4689      	mov	r9, r1
 8012214:	2000      	movs	r0, #0
 8012216:	4917      	ldr	r1, [pc, #92]	; (8012274 <__kernel_tan+0x40c>)
 8012218:	f7ee fb38 	bl	800088c <__aeabi_ddiv>
 801221c:	2600      	movs	r6, #0
 801221e:	e9cd 0100 	strd	r0, r1, [sp]
 8012222:	4652      	mov	r2, sl
 8012224:	465b      	mov	r3, fp
 8012226:	4630      	mov	r0, r6
 8012228:	4639      	mov	r1, r7
 801222a:	f7ee f84d 	bl	80002c8 <__aeabi_dsub>
 801222e:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012232:	4602      	mov	r2, r0
 8012234:	460b      	mov	r3, r1
 8012236:	ec51 0b18 	vmov	r0, r1, d8
 801223a:	f7ee f845 	bl	80002c8 <__aeabi_dsub>
 801223e:	4632      	mov	r2, r6
 8012240:	462b      	mov	r3, r5
 8012242:	f7ee f9f9 	bl	8000638 <__aeabi_dmul>
 8012246:	46b0      	mov	r8, r6
 8012248:	460f      	mov	r7, r1
 801224a:	4642      	mov	r2, r8
 801224c:	462b      	mov	r3, r5
 801224e:	4634      	mov	r4, r6
 8012250:	4649      	mov	r1, r9
 8012252:	4606      	mov	r6, r0
 8012254:	4640      	mov	r0, r8
 8012256:	f7ee f9ef 	bl	8000638 <__aeabi_dmul>
 801225a:	4b07      	ldr	r3, [pc, #28]	; (8012278 <__kernel_tan+0x410>)
 801225c:	2200      	movs	r2, #0
 801225e:	f7ee f835 	bl	80002cc <__adddf3>
 8012262:	4602      	mov	r2, r0
 8012264:	460b      	mov	r3, r1
 8012266:	4630      	mov	r0, r6
 8012268:	4639      	mov	r1, r7
 801226a:	e665      	b.n	8011f38 <__kernel_tan+0xd0>
 801226c:	4682      	mov	sl, r0
 801226e:	468b      	mov	fp, r1
 8012270:	e625      	b.n	8011ebe <__kernel_tan+0x56>
 8012272:	bf00      	nop
 8012274:	bff00000 	.word	0xbff00000
 8012278:	3ff00000 	.word	0x3ff00000
 801227c:	00000000 	.word	0x00000000

08012280 <floor>:
 8012280:	ec51 0b10 	vmov	r0, r1, d0
 8012284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012288:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801228c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012290:	2e13      	cmp	r6, #19
 8012292:	ee10 5a10 	vmov	r5, s0
 8012296:	ee10 8a10 	vmov	r8, s0
 801229a:	460c      	mov	r4, r1
 801229c:	dc32      	bgt.n	8012304 <floor+0x84>
 801229e:	2e00      	cmp	r6, #0
 80122a0:	da14      	bge.n	80122cc <floor+0x4c>
 80122a2:	a333      	add	r3, pc, #204	; (adr r3, 8012370 <floor+0xf0>)
 80122a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a8:	f7ee f810 	bl	80002cc <__adddf3>
 80122ac:	2200      	movs	r2, #0
 80122ae:	2300      	movs	r3, #0
 80122b0:	f7ee fc52 	bl	8000b58 <__aeabi_dcmpgt>
 80122b4:	b138      	cbz	r0, 80122c6 <floor+0x46>
 80122b6:	2c00      	cmp	r4, #0
 80122b8:	da57      	bge.n	801236a <floor+0xea>
 80122ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80122be:	431d      	orrs	r5, r3
 80122c0:	d001      	beq.n	80122c6 <floor+0x46>
 80122c2:	4c2d      	ldr	r4, [pc, #180]	; (8012378 <floor+0xf8>)
 80122c4:	2500      	movs	r5, #0
 80122c6:	4621      	mov	r1, r4
 80122c8:	4628      	mov	r0, r5
 80122ca:	e025      	b.n	8012318 <floor+0x98>
 80122cc:	4f2b      	ldr	r7, [pc, #172]	; (801237c <floor+0xfc>)
 80122ce:	4137      	asrs	r7, r6
 80122d0:	ea01 0307 	and.w	r3, r1, r7
 80122d4:	4303      	orrs	r3, r0
 80122d6:	d01f      	beq.n	8012318 <floor+0x98>
 80122d8:	a325      	add	r3, pc, #148	; (adr r3, 8012370 <floor+0xf0>)
 80122da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122de:	f7ed fff5 	bl	80002cc <__adddf3>
 80122e2:	2200      	movs	r2, #0
 80122e4:	2300      	movs	r3, #0
 80122e6:	f7ee fc37 	bl	8000b58 <__aeabi_dcmpgt>
 80122ea:	2800      	cmp	r0, #0
 80122ec:	d0eb      	beq.n	80122c6 <floor+0x46>
 80122ee:	2c00      	cmp	r4, #0
 80122f0:	bfbe      	ittt	lt
 80122f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80122f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80122fa:	19a4      	addlt	r4, r4, r6
 80122fc:	ea24 0407 	bic.w	r4, r4, r7
 8012300:	2500      	movs	r5, #0
 8012302:	e7e0      	b.n	80122c6 <floor+0x46>
 8012304:	2e33      	cmp	r6, #51	; 0x33
 8012306:	dd0b      	ble.n	8012320 <floor+0xa0>
 8012308:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801230c:	d104      	bne.n	8012318 <floor+0x98>
 801230e:	ee10 2a10 	vmov	r2, s0
 8012312:	460b      	mov	r3, r1
 8012314:	f7ed ffda 	bl	80002cc <__adddf3>
 8012318:	ec41 0b10 	vmov	d0, r0, r1
 801231c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012320:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012324:	f04f 33ff 	mov.w	r3, #4294967295
 8012328:	fa23 f707 	lsr.w	r7, r3, r7
 801232c:	4207      	tst	r7, r0
 801232e:	d0f3      	beq.n	8012318 <floor+0x98>
 8012330:	a30f      	add	r3, pc, #60	; (adr r3, 8012370 <floor+0xf0>)
 8012332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012336:	f7ed ffc9 	bl	80002cc <__adddf3>
 801233a:	2200      	movs	r2, #0
 801233c:	2300      	movs	r3, #0
 801233e:	f7ee fc0b 	bl	8000b58 <__aeabi_dcmpgt>
 8012342:	2800      	cmp	r0, #0
 8012344:	d0bf      	beq.n	80122c6 <floor+0x46>
 8012346:	2c00      	cmp	r4, #0
 8012348:	da02      	bge.n	8012350 <floor+0xd0>
 801234a:	2e14      	cmp	r6, #20
 801234c:	d103      	bne.n	8012356 <floor+0xd6>
 801234e:	3401      	adds	r4, #1
 8012350:	ea25 0507 	bic.w	r5, r5, r7
 8012354:	e7b7      	b.n	80122c6 <floor+0x46>
 8012356:	2301      	movs	r3, #1
 8012358:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801235c:	fa03 f606 	lsl.w	r6, r3, r6
 8012360:	4435      	add	r5, r6
 8012362:	4545      	cmp	r5, r8
 8012364:	bf38      	it	cc
 8012366:	18e4      	addcc	r4, r4, r3
 8012368:	e7f2      	b.n	8012350 <floor+0xd0>
 801236a:	2500      	movs	r5, #0
 801236c:	462c      	mov	r4, r5
 801236e:	e7aa      	b.n	80122c6 <floor+0x46>
 8012370:	8800759c 	.word	0x8800759c
 8012374:	7e37e43c 	.word	0x7e37e43c
 8012378:	bff00000 	.word	0xbff00000
 801237c:	000fffff 	.word	0x000fffff

08012380 <scalbn>:
 8012380:	b570      	push	{r4, r5, r6, lr}
 8012382:	ec55 4b10 	vmov	r4, r5, d0
 8012386:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801238a:	4606      	mov	r6, r0
 801238c:	462b      	mov	r3, r5
 801238e:	b99a      	cbnz	r2, 80123b8 <scalbn+0x38>
 8012390:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012394:	4323      	orrs	r3, r4
 8012396:	d036      	beq.n	8012406 <scalbn+0x86>
 8012398:	4b39      	ldr	r3, [pc, #228]	; (8012480 <scalbn+0x100>)
 801239a:	4629      	mov	r1, r5
 801239c:	ee10 0a10 	vmov	r0, s0
 80123a0:	2200      	movs	r2, #0
 80123a2:	f7ee f949 	bl	8000638 <__aeabi_dmul>
 80123a6:	4b37      	ldr	r3, [pc, #220]	; (8012484 <scalbn+0x104>)
 80123a8:	429e      	cmp	r6, r3
 80123aa:	4604      	mov	r4, r0
 80123ac:	460d      	mov	r5, r1
 80123ae:	da10      	bge.n	80123d2 <scalbn+0x52>
 80123b0:	a32b      	add	r3, pc, #172	; (adr r3, 8012460 <scalbn+0xe0>)
 80123b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b6:	e03a      	b.n	801242e <scalbn+0xae>
 80123b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80123bc:	428a      	cmp	r2, r1
 80123be:	d10c      	bne.n	80123da <scalbn+0x5a>
 80123c0:	ee10 2a10 	vmov	r2, s0
 80123c4:	4620      	mov	r0, r4
 80123c6:	4629      	mov	r1, r5
 80123c8:	f7ed ff80 	bl	80002cc <__adddf3>
 80123cc:	4604      	mov	r4, r0
 80123ce:	460d      	mov	r5, r1
 80123d0:	e019      	b.n	8012406 <scalbn+0x86>
 80123d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80123d6:	460b      	mov	r3, r1
 80123d8:	3a36      	subs	r2, #54	; 0x36
 80123da:	4432      	add	r2, r6
 80123dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80123e0:	428a      	cmp	r2, r1
 80123e2:	dd08      	ble.n	80123f6 <scalbn+0x76>
 80123e4:	2d00      	cmp	r5, #0
 80123e6:	a120      	add	r1, pc, #128	; (adr r1, 8012468 <scalbn+0xe8>)
 80123e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123ec:	da1c      	bge.n	8012428 <scalbn+0xa8>
 80123ee:	a120      	add	r1, pc, #128	; (adr r1, 8012470 <scalbn+0xf0>)
 80123f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123f4:	e018      	b.n	8012428 <scalbn+0xa8>
 80123f6:	2a00      	cmp	r2, #0
 80123f8:	dd08      	ble.n	801240c <scalbn+0x8c>
 80123fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80123fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012402:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012406:	ec45 4b10 	vmov	d0, r4, r5
 801240a:	bd70      	pop	{r4, r5, r6, pc}
 801240c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012410:	da19      	bge.n	8012446 <scalbn+0xc6>
 8012412:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012416:	429e      	cmp	r6, r3
 8012418:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801241c:	dd0a      	ble.n	8012434 <scalbn+0xb4>
 801241e:	a112      	add	r1, pc, #72	; (adr r1, 8012468 <scalbn+0xe8>)
 8012420:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d1e2      	bne.n	80123ee <scalbn+0x6e>
 8012428:	a30f      	add	r3, pc, #60	; (adr r3, 8012468 <scalbn+0xe8>)
 801242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242e:	f7ee f903 	bl	8000638 <__aeabi_dmul>
 8012432:	e7cb      	b.n	80123cc <scalbn+0x4c>
 8012434:	a10a      	add	r1, pc, #40	; (adr r1, 8012460 <scalbn+0xe0>)
 8012436:	e9d1 0100 	ldrd	r0, r1, [r1]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d0b8      	beq.n	80123b0 <scalbn+0x30>
 801243e:	a10e      	add	r1, pc, #56	; (adr r1, 8012478 <scalbn+0xf8>)
 8012440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012444:	e7b4      	b.n	80123b0 <scalbn+0x30>
 8012446:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801244a:	3236      	adds	r2, #54	; 0x36
 801244c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012450:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8012454:	4620      	mov	r0, r4
 8012456:	4b0c      	ldr	r3, [pc, #48]	; (8012488 <scalbn+0x108>)
 8012458:	2200      	movs	r2, #0
 801245a:	e7e8      	b.n	801242e <scalbn+0xae>
 801245c:	f3af 8000 	nop.w
 8012460:	c2f8f359 	.word	0xc2f8f359
 8012464:	01a56e1f 	.word	0x01a56e1f
 8012468:	8800759c 	.word	0x8800759c
 801246c:	7e37e43c 	.word	0x7e37e43c
 8012470:	8800759c 	.word	0x8800759c
 8012474:	fe37e43c 	.word	0xfe37e43c
 8012478:	c2f8f359 	.word	0xc2f8f359
 801247c:	81a56e1f 	.word	0x81a56e1f
 8012480:	43500000 	.word	0x43500000
 8012484:	ffff3cb0 	.word	0xffff3cb0
 8012488:	3c900000 	.word	0x3c900000

0801248c <_close>:
 801248c:	4b02      	ldr	r3, [pc, #8]	; (8012498 <_close+0xc>)
 801248e:	2258      	movs	r2, #88	; 0x58
 8012490:	601a      	str	r2, [r3, #0]
 8012492:	f04f 30ff 	mov.w	r0, #4294967295
 8012496:	4770      	bx	lr
 8012498:	20001018 	.word	0x20001018

0801249c <_fstat>:
 801249c:	4b02      	ldr	r3, [pc, #8]	; (80124a8 <_fstat+0xc>)
 801249e:	2258      	movs	r2, #88	; 0x58
 80124a0:	601a      	str	r2, [r3, #0]
 80124a2:	f04f 30ff 	mov.w	r0, #4294967295
 80124a6:	4770      	bx	lr
 80124a8:	20001018 	.word	0x20001018

080124ac <_getpid>:
 80124ac:	4b02      	ldr	r3, [pc, #8]	; (80124b8 <_getpid+0xc>)
 80124ae:	2258      	movs	r2, #88	; 0x58
 80124b0:	601a      	str	r2, [r3, #0]
 80124b2:	f04f 30ff 	mov.w	r0, #4294967295
 80124b6:	4770      	bx	lr
 80124b8:	20001018 	.word	0x20001018

080124bc <_isatty>:
 80124bc:	4b02      	ldr	r3, [pc, #8]	; (80124c8 <_isatty+0xc>)
 80124be:	2258      	movs	r2, #88	; 0x58
 80124c0:	601a      	str	r2, [r3, #0]
 80124c2:	2000      	movs	r0, #0
 80124c4:	4770      	bx	lr
 80124c6:	bf00      	nop
 80124c8:	20001018 	.word	0x20001018

080124cc <_kill>:
 80124cc:	4b02      	ldr	r3, [pc, #8]	; (80124d8 <_kill+0xc>)
 80124ce:	2258      	movs	r2, #88	; 0x58
 80124d0:	601a      	str	r2, [r3, #0]
 80124d2:	f04f 30ff 	mov.w	r0, #4294967295
 80124d6:	4770      	bx	lr
 80124d8:	20001018 	.word	0x20001018

080124dc <_lseek>:
 80124dc:	4b02      	ldr	r3, [pc, #8]	; (80124e8 <_lseek+0xc>)
 80124de:	2258      	movs	r2, #88	; 0x58
 80124e0:	601a      	str	r2, [r3, #0]
 80124e2:	f04f 30ff 	mov.w	r0, #4294967295
 80124e6:	4770      	bx	lr
 80124e8:	20001018 	.word	0x20001018

080124ec <_read>:
 80124ec:	4b02      	ldr	r3, [pc, #8]	; (80124f8 <_read+0xc>)
 80124ee:	2258      	movs	r2, #88	; 0x58
 80124f0:	601a      	str	r2, [r3, #0]
 80124f2:	f04f 30ff 	mov.w	r0, #4294967295
 80124f6:	4770      	bx	lr
 80124f8:	20001018 	.word	0x20001018

080124fc <_sbrk>:
 80124fc:	4a04      	ldr	r2, [pc, #16]	; (8012510 <_sbrk+0x14>)
 80124fe:	6811      	ldr	r1, [r2, #0]
 8012500:	4603      	mov	r3, r0
 8012502:	b909      	cbnz	r1, 8012508 <_sbrk+0xc>
 8012504:	4903      	ldr	r1, [pc, #12]	; (8012514 <_sbrk+0x18>)
 8012506:	6011      	str	r1, [r2, #0]
 8012508:	6810      	ldr	r0, [r2, #0]
 801250a:	4403      	add	r3, r0
 801250c:	6013      	str	r3, [r2, #0]
 801250e:	4770      	bx	lr
 8012510:	20001020 	.word	0x20001020
 8012514:	20001028 	.word	0x20001028

08012518 <_write>:
 8012518:	4b02      	ldr	r3, [pc, #8]	; (8012524 <_write+0xc>)
 801251a:	2258      	movs	r2, #88	; 0x58
 801251c:	601a      	str	r2, [r3, #0]
 801251e:	f04f 30ff 	mov.w	r0, #4294967295
 8012522:	4770      	bx	lr
 8012524:	20001018 	.word	0x20001018

08012528 <_exit>:
 8012528:	e7fe      	b.n	8012528 <_exit>
	...

0801252c <_init>:
 801252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801252e:	bf00      	nop
 8012530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012532:	bc08      	pop	{r3}
 8012534:	469e      	mov	lr, r3
 8012536:	4770      	bx	lr

08012538 <_fini>:
 8012538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801253a:	bf00      	nop
 801253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801253e:	bc08      	pop	{r3}
 8012540:	469e      	mov	lr, r3
 8012542:	4770      	bx	lr
