
Robonaut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011e4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  08012020  08012020  00022020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126a0  080126a0  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  080126a0  080126a0  000226a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080126a8  080126a8  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080126a8  080126a8  000226a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080126ac  080126ac  000226ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080126b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab8  20000210  080128c0  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc8  080128c0  00030cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ef60  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d38  00000000  00000000  0005f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c28  00000000  00000000  00062ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001aa8  00000000  00000000  00064b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ae0c  00000000  00000000  000665a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023ce2  00000000  00000000  000913b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010287d  00000000  00000000  000b5096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b7913  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e24  00000000  00000000  001b7964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001c0788  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001c0854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012004 	.word	0x08012004

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08012004 	.word	0x08012004

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <BT_TransmitMsg>:

#include <string.h>
#include "main.h"

void BT_TransmitMsg(UART_HandleTypeDef *huart, unsigned char *msg_to_send)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	uint32_t len = strlen((char*)msg_to_send);
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f7ff f93a 	bl	8000210 <strlen>
 8000f9c:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t*)msg_to_send, len, 100);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	2364      	movs	r3, #100	; 0x64
 8000fa4:	6839      	ldr	r1, [r7, #0]
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f006 ff9d 	bl	8007ee6 <HAL_UART_Transmit>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <LS_LED_Light>:
#include <stdbool.h>
#include <math.h>

// Az utolsó beadott érték mindig 33-nál nagyobb legyen!
void LS_LED_Light(SPI_HandleTypeDef *hspi, uint8_t *leds_to_light)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_on[4] = {0};
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
	uint8_t fb_leds_on_temp[4] = {0};
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
	for (int i=0; leds_to_light[i]<33; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fca:	e082      	b.n	80010d2 <LS_LED_Light+0x11e>
	{
		switch(leds_to_light[i]/8) {
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	08db      	lsrs	r3, r3, #3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d877      	bhi.n	80010cc <LS_LED_Light+0x118>
 8000fdc:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <LS_LED_Light+0x30>)
 8000fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe2:	bf00      	nop
 8000fe4:	08000ff5 	.word	0x08000ff5
 8000fe8:	0800102b 	.word	0x0800102b
 8000fec:	08001061 	.word	0x08001061
 8000ff0:	08001097 	.word	0x08001097
		case 0:
			fb_leds_on_temp[3] = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
 8000ffc:	e006      	b.n	800100c <LS_LED_Light+0x58>
				fb_leds_on_temp[3] <<= 1;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	3301      	adds	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	6a3a      	ldr	r2, [r7, #32]
 800101a:	429a      	cmp	r2, r3
 800101c:	dbef      	blt.n	8000ffe <LS_LED_Light+0x4a>
			}
			fb_leds_on[3] |= fb_leds_on_temp[3];
 800101e:	7cfa      	ldrb	r2, [r7, #19]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	4313      	orrs	r3, r2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	74fb      	strb	r3, [r7, #19]
			break;
 8001028:	e050      	b.n	80010cc <LS_LED_Light+0x118>
		case 1:
			fb_leds_on_temp[2] = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	e006      	b.n	8001042 <LS_LED_Light+0x8e>
				fb_leds_on_temp[2] <<= 1;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	3301      	adds	r3, #1
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbef      	blt.n	8001034 <LS_LED_Light+0x80>
			}
			fb_leds_on[2] |= fb_leds_on_temp[2];
 8001054:	7cba      	ldrb	r2, [r7, #18]
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	4313      	orrs	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	74bb      	strb	r3, [r7, #18]
			break;
 800105e:	e035      	b.n	80010cc <LS_LED_Light+0x118>
		case 2:
			fb_leds_on_temp[1] = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	e006      	b.n	8001078 <LS_LED_Light+0xc4>
				fb_leds_on_temp[1] <<= 1;
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	3301      	adds	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	429a      	cmp	r2, r3
 8001088:	dbef      	blt.n	800106a <LS_LED_Light+0xb6>
			}
			fb_leds_on[1] |= fb_leds_on_temp[1];
 800108a:	7c7a      	ldrb	r2, [r7, #17]
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	4313      	orrs	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	747b      	strb	r3, [r7, #17]
			break;
 8001094:	e01a      	b.n	80010cc <LS_LED_Light+0x118>
		case 3:
			fb_leds_on_temp[0] = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e006      	b.n	80010ae <LS_LED_Light+0xfa>
				fb_leds_on_temp[0] <<= 1;
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbef      	blt.n	80010a0 <LS_LED_Light+0xec>
			}
			fb_leds_on[0] |= fb_leds_on_temp[0];
 80010c0:	7c3a      	ldrb	r2, [r7, #16]
 80010c2:	7b3b      	ldrb	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	743b      	strb	r3, [r7, #16]
			break;
 80010ca:	bf00      	nop
	for (int i=0; leds_to_light[i]<33; i++)
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	3301      	adds	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b20      	cmp	r3, #32
 80010dc:	f67f af76 	bls.w	8000fcc <LS_LED_Light+0x18>
		}
	}
	LS_LED_Send(hspi, fb_leds_on);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f804 	bl	80010f4 <LS_LED_Send>
}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <LS_LED_Send>:

void LS_LED_Send(SPI_HandleTypeDef *hspi, uint8_t *leds_on)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 80010fe:	2364      	movs	r3, #100	; 0x64
 8001100:	2204      	movs	r2, #4
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f004 fd66 	bl	8005bd6 <HAL_SPI_Transmit>

	// Latch enable
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <LS_LED_Send+0x4c>)
 8001112:	f002 feef 	bl	8003ef4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <LS_LED_Send+0x4c>)
 800111e:	f002 fee9 	bl	8003ef4 <HAL_GPIO_WritePin>

	//Output enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2104      	movs	r1, #4
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <LS_LED_Send+0x50>)
 8001128:	f002 fee4 	bl	8003ef4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2104      	movs	r1, #4
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <LS_LED_Send+0x50>)
 8001132:	f002 fedf 	bl	8003ef4 <HAL_GPIO_WritePin>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00

08001148 <LS_INF_Send>:

void LS_INF_Send(SPI_HandleTypeDef *hspi, uint8_t *infs_on)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, infs_on, 4, 100);
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	2204      	movs	r2, #4
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f004 fd3c 	bl	8005bd6 <HAL_SPI_Transmit>

	// Inf Latch enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <LS_INF_Send+0x50>)
 8001166:	f002 fec5 	bl	8003ef4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <LS_INF_Send+0x50>)
 8001172:	f002 febf 	bl	8003ef4 <HAL_GPIO_WritePin>

	// Inf Output enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <LS_INF_Send+0x50>)
 800117e:	f002 feb9 	bl	8003ef4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <LS_INF_Send+0x50>)
 800118a:	f002 feb3 	bl	8003ef4 <HAL_GPIO_WritePin>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020000 	.word	0x40020000

0800119c <LS_ADC_ChipSelect>:
			  HAL_Delay(100);
		  }
}

void LS_ADC_ChipSelect(int CS)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	switch(CS) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d827      	bhi.n	80011fc <LS_ADC_ChipSelect+0x60>
 80011ac:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <LS_ADC_ChipSelect+0x18>)
 80011ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b2:	bf00      	nop
 80011b4:	080011c5 	.word	0x080011c5
 80011b8:	080011d3 	.word	0x080011d3
 80011bc:	080011e1 	.word	0x080011e1
 80011c0:	080011ef 	.word	0x080011ef
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ca:	481b      	ldr	r0, [pc, #108]	; (8001238 <LS_ADC_ChipSelect+0x9c>)
 80011cc:	f002 fe92 	bl	8003ef4 <HAL_GPIO_WritePin>
		break;
 80011d0:	e02d      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d8:	4818      	ldr	r0, [pc, #96]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011da:	f002 fe8b 	bl	8003ef4 <HAL_GPIO_WritePin>
		break;
 80011de:	e026      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011e8:	f002 fe84 	bl	8003ef4 <HAL_GPIO_WritePin>
		break;
 80011ec:	e01f      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011f6:	f002 fe7d 	bl	8003ef4 <HAL_GPIO_WritePin>
		break;
 80011fa:	e018      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	default:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <LS_ADC_ChipSelect+0x9c>)
 8001204:	f002 fe76 	bl	8003ef4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 8001210:	f002 fe70 	bl	8003ef4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 800121c:	f002 fe6a 	bl	8003ef4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 8001228:	f002 fe64 	bl	8003ef4 <HAL_GPIO_WritePin>
	}
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020800 	.word	0x40020800
 800123c:	40020400 	.word	0x40020400

08001240 <LS_Holavonal_favago>:
	sum -= 32*250;
	line = (double)weighted_sum/sum;
	return line;
}

float LS_Holavonal_favago(uint16_t *ADC_values, int prev_value, int* summ, int* MA_sum){
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
    int m = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    int sum = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
    float alpha = 0.1;
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <LS_Holavonal_favago+0xd8>)
 8001258:	613b      	str	r3, [r7, #16]
    *summ = 0;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
    for(int i=0; i<32; i++){
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e01c      	b.n	80012a0 <LS_Holavonal_favago+0x60>
        if (ADC_values[i] > 2500){
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4413      	add	r3, r2
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001274:	4293      	cmp	r3, r2
 8001276:	d910      	bls.n	800129a <LS_Holavonal_favago+0x5a>
        	*summ += ADC_values[i];
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	0052      	lsls	r2, r2, #1
 8001280:	68f9      	ldr	r1, [r7, #12]
 8001282:	440a      	add	r2, r1
 8001284:	8812      	ldrh	r2, [r2, #0]
 8001286:	441a      	add	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	601a      	str	r2, [r3, #0]
            sum += i;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	4413      	add	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
            m++;
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	3301      	adds	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<32; i++){
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b1f      	cmp	r3, #31
 80012a4:	dddf      	ble.n	8001266 <LS_Holavonal_favago+0x26>
        }
    }
    if(m == 0)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <LS_Holavonal_favago+0x78>
		return prev_value;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	e027      	b.n	8001308 <LS_Holavonal_favago+0xc8>
    *MA_sum = alpha * *summ + (1-alpha) * *MA_sum;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f0:	ee17 2a90 	vmov	r2, s15
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	601a      	str	r2, [r3, #0]
    return sum/m;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	3dcccccd 	.word	0x3dcccccd

0800131c <LineSensor_FrontAndBack>:
	}
}

void LineSensor_FrontAndBack(UART_HandleTypeDef *huart, SPI_HandleTypeDef *hspi_led, SPI_HandleTypeDef *hspi_sense_front,
		SPI_HandleTypeDef *hspi_sense_rear, uint16_t *ADC_values_front, uint16_t *ADC_values_rear)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b090      	sub	sp, #64	; 0x40
 8001320:	af02      	add	r7, sp, #8
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
	uint8_t leds_on[4];// = {1, 1, 1, 1};

	uint8_t ADC_inputs[] = {0, 8, 16, 24, 32, 40, 48, 56};
 800132a:	4a92      	ldr	r2, [pc, #584]	; (8001574 <LineSensor_FrontAndBack+0x258>)
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001334:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ADC_received_msg[2];

	//LS_INF_Send(&hspi3, leds_off);

	// Turn on first set of LEDs
	leds_on[0] = 1;leds_on[1] = 1;leds_on[2] = 1;leds_on[3] = 1;
 8001338:	2301      	movs	r3, #1
 800133a:	f887 3020 	strb.w	r3, [r7, #32]
 800133e:	2301      	movs	r3, #1
 8001340:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001344:	2301      	movs	r3, #1
 8001346:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800134a:	2301      	movs	r3, #1
 800134c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	LS_INF_Send(hspi_led, leds_on);
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	4619      	mov	r1, r3
 8001356:	68b8      	ldr	r0, [r7, #8]
 8001358:	f7ff fef6 	bl	8001148 <LS_INF_Send>
	HAL_Delay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f002 f88d 	bl	800347c <HAL_Delay>
	// Retrieve data from first set of ADCs - Front
	for (int i=1; i<5; i++)
 8001362:	2301      	movs	r3, #1
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
 8001366:	e02a      	b.n	80013be <LineSensor_FrontAndBack+0xa2>
	{
	  LS_ADC_ChipSelect(i);
 8001368:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800136a:	f7ff ff17 	bl	800119c <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 800136e:	f107 0214 	add.w	r2, r7, #20
 8001372:	f107 0118 	add.w	r1, r7, #24
 8001376:	2364      	movs	r3, #100	; 0x64
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2302      	movs	r3, #2
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f004 fd66 	bl	8005e4e <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 8001382:	f107 0214 	add.w	r2, r7, #20
 8001386:	f107 0118 	add.w	r1, r7, #24
 800138a:	2364      	movs	r3, #100	; 0x64
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2302      	movs	r3, #2
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f004 fd5c 	bl	8005e4e <HAL_SPI_TransmitReceive>
	  ADC_values_front[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001396:	7d7b      	ldrb	r3, [r7, #21]
 8001398:	b21a      	sxth	r2, r3
 800139a:	7d3b      	ldrb	r3, [r7, #20]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b219      	sxth	r1, r3
 80013a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a6:	3b01      	subs	r3, #1
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013ac:	4413      	add	r3, r2
 80013ae:	b28a      	uxth	r2, r1
 80013b0:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fef2 	bl	800119c <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 80013b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ba:	3301      	adds	r3, #1
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
 80013be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	ddd1      	ble.n	8001368 <LineSensor_FrontAndBack+0x4c>
	}
	// Ez működjön, aztán lehet optimalizálni, hogy egy loopon belül kérjük be az adatokat mindettőtől
	// Retrieve data from first set of ADCs - Rear
	for (int i=1; i<5; i++)
 80013c4:	2301      	movs	r3, #1
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
 80013c8:	e02a      	b.n	8001420 <LineSensor_FrontAndBack+0x104>
	{
	  LS_ADC_ChipSelect(i);
 80013ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013cc:	f7ff fee6 	bl	800119c <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013d0:	f107 0214 	add.w	r2, r7, #20
 80013d4:	f107 0118 	add.w	r1, r7, #24
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2302      	movs	r3, #2
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f004 fd35 	bl	8005e4e <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013e4:	f107 0214 	add.w	r2, r7, #20
 80013e8:	f107 0118 	add.w	r1, r7, #24
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2302      	movs	r3, #2
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f004 fd2b 	bl	8005e4e <HAL_SPI_TransmitReceive>
	  ADC_values_rear[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80013f8:	7d7b      	ldrb	r3, [r7, #21]
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	7d3b      	ldrb	r3, [r7, #20]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21b      	sxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b219      	sxth	r1, r3
 8001406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001408:	3b01      	subs	r3, #1
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800140e:	4413      	add	r3, r2
 8001410:	b28a      	uxth	r2, r1
 8001412:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fec1 	bl	800119c <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 800141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141c:	3301      	adds	r3, #1
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
 8001420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001422:	2b04      	cmp	r3, #4
 8001424:	ddd1      	ble.n	80013ca <LineSensor_FrontAndBack+0xae>
	}

	// Shift the LEDs by one
	for (int k=0; k<7; k++)
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142a:	e099      	b.n	8001560 <LineSensor_FrontAndBack+0x244>
	{
	  leds_on[0] <<= 1;
 800142c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f887 3020 	strb.w	r3, [r7, #32]
	  leds_on[1] <<= 1;
 8001438:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  leds_on[2] <<= 1;
 8001444:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  leds_on[3] <<= 1;
 8001450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  LS_INF_Send(hspi_led, leds_on);
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	4619      	mov	r1, r3
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f7ff fe70 	bl	8001148 <LS_INF_Send>
	  HAL_Delay(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f002 f807 	bl	800347c <HAL_Delay>

	  //Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 800146e:	2301      	movs	r3, #1
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
 8001472:	e034      	b.n	80014de <LineSensor_FrontAndBack+0x1c2>
	  {
		  LS_ADC_ChipSelect(i);
 8001474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001476:	f7ff fe91 	bl	800119c <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 800147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147c:	3301      	adds	r3, #1
 800147e:	f107 0218 	add.w	r2, r7, #24
 8001482:	18d1      	adds	r1, r2, r3
 8001484:	f107 0214 	add.w	r2, r7, #20
 8001488:	2364      	movs	r3, #100	; 0x64
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2302      	movs	r3, #2
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f004 fcdd 	bl	8005e4e <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 8001494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001496:	3301      	adds	r3, #1
 8001498:	f107 0218 	add.w	r2, r7, #24
 800149c:	18d1      	adds	r1, r2, r3
 800149e:	f107 0214 	add.w	r2, r7, #20
 80014a2:	2364      	movs	r3, #100	; 0x64
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2302      	movs	r3, #2
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f004 fcd0 	bl	8005e4e <HAL_SPI_TransmitReceive>
		  ADC_values_front[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80014ae:	7d7b      	ldrb	r3, [r7, #21]
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	7d3b      	ldrb	r3, [r7, #20]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b219      	sxth	r1, r3
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	3b01      	subs	r3, #1
 80014c0:	00da      	lsls	r2, r3, #3
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	4413      	add	r3, r2
 80014c6:	3301      	adds	r3, #1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014cc:	4413      	add	r3, r2
 80014ce:	b28a      	uxth	r2, r1
 80014d0:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fe62 	bl	800119c <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	3301      	adds	r3, #1
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	ddc7      	ble.n	8001474 <LineSensor_FrontAndBack+0x158>
	  }

	  // Szintén lehet optimalizálni
	  // Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 80014e4:	2301      	movs	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
 80014e8:	e034      	b.n	8001554 <LineSensor_FrontAndBack+0x238>
	  {
		  LS_ADC_ChipSelect(i);
 80014ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014ec:	f7ff fe56 	bl	800119c <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	3301      	adds	r3, #1
 80014f4:	f107 0218 	add.w	r2, r7, #24
 80014f8:	18d1      	adds	r1, r2, r3
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	2364      	movs	r3, #100	; 0x64
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2302      	movs	r3, #2
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f004 fca2 	bl	8005e4e <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	3301      	adds	r3, #1
 800150e:	f107 0218 	add.w	r2, r7, #24
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	f107 0214 	add.w	r2, r7, #20
 8001518:	2364      	movs	r3, #100	; 0x64
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2302      	movs	r3, #2
 800151e:	6838      	ldr	r0, [r7, #0]
 8001520:	f004 fc95 	bl	8005e4e <HAL_SPI_TransmitReceive>
		  ADC_values_rear[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001524:	7d7b      	ldrb	r3, [r7, #21]
 8001526:	b21a      	sxth	r2, r3
 8001528:	7d3b      	ldrb	r3, [r7, #20]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b219      	sxth	r1, r3
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	3b01      	subs	r3, #1
 8001536:	00da      	lsls	r2, r3, #3
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	4413      	add	r3, r2
 800153c:	3301      	adds	r3, #1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001542:	4413      	add	r3, r2
 8001544:	b28a      	uxth	r2, r1
 8001546:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fe27 	bl	800119c <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	3301      	adds	r3, #1
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	2b04      	cmp	r3, #4
 8001558:	ddc7      	ble.n	80014ea <LineSensor_FrontAndBack+0x1ce>
	for (int k=0; k<7; k++)
 800155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155c:	3301      	adds	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	2b06      	cmp	r3, #6
 8001564:	f77f af62 	ble.w	800142c <LineSensor_FrontAndBack+0x110>
//			line_pos[0] = ADC_values_rear[i];
//	}

//	unsigned char BT_send_msg_buff[200];
//	LS_BT_SendData(huart, BT_send_msg_buff, ADC_values_rear);
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3738      	adds	r7, #56	; 0x38
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	08012028 	.word	0x08012028

08001578 <LS_feedback_all>:

void LS_feedback_all(SPI_HandleTypeDef *hspi_led, uint16_t *ADC_values)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
 8001582:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <LS_feedback_all+0x7c>)
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800158c:	6018      	str	r0, [r3, #0]
 800158e:	3304      	adds	r3, #4
 8001590:	7019      	strb	r1, [r3, #0]
	uint8_t leds_off[4] = {0};
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	e016      	b.n	80015ce <LS_feedback_all+0x56>
			if (ADC_values[i]>2500){
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d90a      	bls.n	80015c8 <LS_feedback_all+0x50>
				fb_leds_to_light[j] = i;
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	b2d9      	uxtb	r1, r3
 80015b6:	f107 0210 	add.w	r2, r7, #16
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	460a      	mov	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
				j++;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	3301      	adds	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b1f      	cmp	r3, #31
 80015d2:	dde5      	ble.n	80015a0 <LS_feedback_all+0x28>
			}
		}

	LS_LED_Send(hspi_led, leds_off);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fd8a 	bl	80010f4 <LS_LED_Send>
	LS_LED_Light(hspi_led, fb_leds_to_light);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fce4 	bl	8000fb4 <LS_LED_Light>
}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	08012030 	.word	0x08012030

080015f8 <LS_delta_angle>:
	}
	LS_LED_Send(hspi_led, leds_off);
	LS_LED_Light(hspi_led, fb_leds_to_light);
}

float LS_delta_angle(float p1, float p2){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001602:	edc7 0a00 	vstr	s1, [r7]
    float delta = atan((p2-(31-p1))*6.5/460);
 8001606:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800160a:	edd7 7a01 	vldr	s15, [r7, #4]
 800160e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001612:	ed97 7a00 	vldr	s14, [r7]
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	ee17 0a90 	vmov	r0, s15
 800161e:	f7fe ffb3 	bl	8000588 <__aeabi_f2d>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <LS_delta_angle+0x88>)
 8001628:	f7ff f806 	bl	8000638 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	a310      	add	r3, pc, #64	; (adr r3, 8001678 <LS_delta_angle+0x80>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff f927 	bl	800088c <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ec43 2b17 	vmov	d7, r2, r3
 8001646:	eeb0 0a47 	vmov.f32	s0, s14
 800164a:	eef0 0a67 	vmov.f32	s1, s15
 800164e:	f00f fa3b 	bl	8010ac8 <atan>
 8001652:	ec53 2b10 	vmov	r2, r3, d0
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fac5 	bl	8000be8 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	60fb      	str	r3, [r7, #12]
    return delta;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	ee07 3a90 	vmov	s15, r3
}
 8001668:	eeb0 0a67 	vmov.f32	s0, s15
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	00000000 	.word	0x00000000
 800167c:	407cc000 	.word	0x407cc000
 8001680:	401a0000 	.word	0x401a0000
 8001684:	00000000 	.word	0x00000000

08001688 <LS_p>:



float LS_p(float f1){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0a01 	vstr	s0, [r7, #4]
    float p = (15.5-f1)*0.0065;//m-ben adja vissza a p-t
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ff78 	bl	8000588 <__aeabi_f2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	f04f 0000 	mov.w	r0, #0
 80016a0:	490f      	ldr	r1, [pc, #60]	; (80016e0 <LS_p+0x58>)
 80016a2:	f7fe fe11 	bl	80002c8 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	a30a      	add	r3, pc, #40	; (adr r3, 80016d8 <LS_p+0x50>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe ffc0 	bl	8000638 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa92 	bl	8000be8 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	60fb      	str	r3, [r7, #12]
    return p;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	ee07 3a90 	vmov	s15, r3
}
 80016ce:	eeb0 0a67 	vmov.f32	s0, s15
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	76c8b439 	.word	0x76c8b439
 80016dc:	3f7a9fbe 	.word	0x3f7a9fbe
 80016e0:	402f0000 	.word	0x402f0000

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0a8      	sub	sp, #160	; 0xa0
 80016e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ea:	f001 fe55 	bl	8003398 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ee:	f000 f9f5 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f2:	f000 fee3 	bl	80024bc <MX_GPIO_Init>
  MX_I2C1_Init();
 80016f6:	f000 fab5 	bl	8001c64 <MX_I2C1_Init>
  MX_I2C3_Init();
 80016fa:	f000 fb0f 	bl	8001d1c <MX_I2C3_Init>
  MX_SPI1_Init();
 80016fe:	f000 fb3b 	bl	8001d78 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001702:	f000 fb6f 	bl	8001de4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001706:	f000 fba3 	bl	8001e50 <MX_SPI3_Init>
  MX_ADC1_Init();
 800170a:	f000 fa59 	bl	8001bc0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800170e:	f000 fbd7 	bl	8001ec0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001712:	f000 fc55 	bl	8001fc0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001716:	f000 fccd 	bl	80020b4 <MX_TIM4_Init>
  MX_TIM13_Init();
 800171a:	f000 fe2d 	bl	8002378 <MX_TIM13_Init>
  MX_TIM5_Init();
 800171e:	f000 fd5b 	bl	80021d8 <MX_TIM5_Init>
  MX_I2C2_Init();
 8001722:	f000 facd 	bl	8001cc0 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001726:	f000 fe75 	bl	8002414 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800172a:	f000 fe9d 	bl	8002468 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 800172e:	f000 fdc9 	bl	80022c4 <MX_TIM7_Init>
  MX_TIM10_Init();
 8001732:	f000 fdfd 	bl	8002330 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // initialize vl53l1x communication parameters
  Dev1->I2cHandle = &hi2c2;
 8001736:	4bbc      	ldr	r3, [pc, #752]	; (8001a28 <main+0x344>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4abc      	ldr	r2, [pc, #752]	; (8001a2c <main+0x348>)
 800173c:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  Dev1->I2cDevAddr = 0x52;
 8001740:	4bb9      	ldr	r3, [pc, #740]	; (8001a28 <main+0x344>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2252      	movs	r2, #82	; 0x52
 8001746:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
//  HAL_Delay(2); // 2ms reset time
//  HAL_GPIO_WritePin(XSHUT1_GPIO_Port, XSHUT1_Pin, GPIO_PIN_RESET);
//  HAL_Delay(2); // 2ms reset time

  // set ToF1
  HAL_GPIO_WritePin(ToF_XSDN_36_GPIO_Port, ToF_XSDN_36_Pin, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	2101      	movs	r1, #1
 800174e:	48b8      	ldr	r0, [pc, #736]	; (8001a30 <main+0x34c>)
 8001750:	f002 fbd0 	bl	8003ef4 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8001754:	2002      	movs	r0, #2
 8001756:	f001 fe91 	bl	800347c <HAL_Delay>
//  HAL_Delay(10);
//  Dev2->I2cDevAddr = 0x50; // set Dev2 0x50

//  /*** VL53L1X Initialization ***/
//  // Dev1
  VL53L1_WaitDeviceBooted( Dev1 );
 800175a:	4bb3      	ldr	r3, [pc, #716]	; (8001a28 <main+0x344>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f006 ff8e 	bl	8008680 <VL53L1_WaitDeviceBooted>
  VL53L1_DataInit( Dev1 );
 8001764:	4bb0      	ldr	r3, [pc, #704]	; (8001a28 <main+0x344>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f006 ff31 	bl	80085d0 <VL53L1_DataInit>
  VL53L1_StaticInit( Dev1 );
 800176e:	4bae      	ldr	r3, [pc, #696]	; (8001a28 <main+0x344>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f006 ff65 	bl	8008642 <VL53L1_StaticInit>
  VL53L1_SetDistanceMode( Dev1, VL53L1_DISTANCEMODE_LONG );
 8001778:	4bab      	ldr	r3, [pc, #684]	; (8001a28 <main+0x344>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2103      	movs	r1, #3
 800177e:	4618      	mov	r0, r3
 8001780:	f007 f8ae 	bl	80088e0 <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds( Dev1, 20000 );
 8001784:	4ba8      	ldr	r3, [pc, #672]	; (8001a28 <main+0x344>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f644 6120 	movw	r1, #20000	; 0x4e20
 800178c:	4618      	mov	r0, r3
 800178e:	f007 f91d 	bl	80089cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
  VL53L1_SetInterMeasurementPeriodMilliSeconds( Dev1, 25 );
 8001792:	4ba5      	ldr	r3, [pc, #660]	; (8001a28 <main+0x344>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2119      	movs	r1, #25
 8001798:	4618      	mov	r0, r3
 800179a:	f007 faa3 	bl	8008ce4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
  VL53L1_StartMeasurement( Dev1 );
 800179e:	4ba2      	ldr	r3, [pc, #648]	; (8001a28 <main+0x344>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f007 fbdc 	bl	8008f60 <VL53L1_StartMeasurement>

  //unsigned char ADC_value_string[10];
  //uint8_t leds_on[4];// = {1, 1, 1, 1};
  //uint8_t fb_leds_on[4] = {0};
  //uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
  uint16_t ADC_values_front[32] = {0};
 80017a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ac:	2240      	movs	r2, #64	; 0x40
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f00c fa99 	bl	800dce8 <memset>
  uint16_t ADC_values_rear[32] = {0};
 80017b6:	f107 0308 	add.w	r3, r7, #8
 80017ba:	2240      	movs	r2, #64	; 0x40
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f00c fa92 	bl	800dce8 <memset>
  float line_pos[2];
//  bool feedback_rear = false;
  float delta, p, str_angle;
  enum circuit_section circuit_Section = Fast_section;
 80017c4:	2301      	movs	r3, #1
 80017c6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
//  circuit_Section = Fast_section;
  //LS_INF_Send(&hspi3, leds_off);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Dead man switch PWM input
 80017ca:	2100      	movs	r1, #0
 80017cc:	4899      	ldr	r0, [pc, #612]	; (8001a34 <main+0x350>)
 80017ce:	f005 f8e7 	bl	80069a0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);    // Dead man switch PWM input
 80017d2:	2104      	movs	r1, #4
 80017d4:	4897      	ldr	r0, [pc, #604]	; (8001a34 <main+0x350>)
 80017d6:	f005 f807 	bl	80067e8 <HAL_TIM_IC_Start>

  HAL_TIM_Base_Start_IT(&htim10);
 80017da:	4897      	ldr	r0, [pc, #604]	; (8001a38 <main+0x354>)
 80017dc:	f004 fdf4 	bl	80063c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80017e0:	2100      	movs	r1, #0
 80017e2:	4896      	ldr	r0, [pc, #600]	; (8001a3c <main+0x358>)
 80017e4:	f004 fee8 	bl	80065b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80017e8:	2104      	movs	r1, #4
 80017ea:	4895      	ldr	r0, [pc, #596]	; (8001a40 <main+0x35c>)
 80017ec:	f004 fee4 	bl	80065b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80017f0:	2100      	movs	r1, #0
 80017f2:	4894      	ldr	r0, [pc, #592]	; (8001a44 <main+0x360>)
 80017f4:	f004 fee0 	bl	80065b8 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	4b90      	ldr	r3, [pc, #576]	; (8001a48 <main+0x364>)
 8001806:	4a91      	ldr	r2, [pc, #580]	; (8001a4c <main+0x368>)
 8001808:	4991      	ldr	r1, [pc, #580]	; (8001a50 <main+0x36c>)
 800180a:	4892      	ldr	r0, [pc, #584]	; (8001a54 <main+0x370>)
 800180c:	f7ff fd86 	bl	800131c <LineSensor_FrontAndBack>
	  line_pos[0] = LS_Holavonal_favago(ADC_values_front, line_pos[0], &summ, &MA_sum_front);
 8001810:	edd7 7a00 	vldr	s15, [r7]
 8001814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001818:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800181c:	4b8e      	ldr	r3, [pc, #568]	; (8001a58 <main+0x374>)
 800181e:	4a8f      	ldr	r2, [pc, #572]	; (8001a5c <main+0x378>)
 8001820:	ee17 1a90 	vmov	r1, s15
 8001824:	f7ff fd0c 	bl	8001240 <LS_Holavonal_favago>
 8001828:	eef0 7a40 	vmov.f32	s15, s0
 800182c:	edc7 7a00 	vstr	s15, [r7]
	  line_pos[1] = LS_Holavonal_favago(ADC_values_rear, line_pos[1], &summ2, &MA_sum_rear);
 8001830:	edd7 7a01 	vldr	s15, [r7, #4]
 8001834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001838:	f107 0008 	add.w	r0, r7, #8
 800183c:	4b88      	ldr	r3, [pc, #544]	; (8001a60 <main+0x37c>)
 800183e:	4a89      	ldr	r2, [pc, #548]	; (8001a64 <main+0x380>)
 8001840:	ee17 1a90 	vmov	r1, s15
 8001844:	f7ff fcfc 	bl	8001240 <LS_Holavonal_favago>
 8001848:	eef0 7a40 	vmov.f32	s15, s0
 800184c:	edc7 7a01 	vstr	s15, [r7, #4]
	  LS_feedback_all(&hspi3, ADC_values_front);
 8001850:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001854:	4619      	mov	r1, r3
 8001856:	487e      	ldr	r0, [pc, #504]	; (8001a50 <main+0x36c>)
 8001858:	f7ff fe8e 	bl	8001578 <LS_feedback_all>
//	  //LS_feedback_led(&hspi3, line_pos, feedback_rear);

	  delta = LS_delta_angle(line_pos[0], line_pos[1]);
 800185c:	edd7 7a00 	vldr	s15, [r7]
 8001860:	ed97 7a01 	vldr	s14, [r7, #4]
 8001864:	eef0 0a47 	vmov.f32	s1, s14
 8001868:	eeb0 0a67 	vmov.f32	s0, s15
 800186c:	f7ff fec4 	bl	80015f8 <LS_delta_angle>
 8001870:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c
	  p = LS_p(line_pos[0]);
 8001874:	edd7 7a00 	vldr	s15, [r7]
 8001878:	eeb0 0a67 	vmov.f32	s0, s15
 800187c:	f7ff ff04 	bl	8001688 <LS_p>
 8001880:	ed87 0a22 	vstr	s0, [r7, #136]	; 0x88
	  MotorDrive(&htim4, duty_motor);
 8001884:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <main+0x384>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	486e      	ldr	r0, [pc, #440]	; (8001a44 <main+0x360>)
 800188c:	f000 ff71 	bl	8002772 <MotorDrive>
	  ServoPosition(&htim5, str_angle);
 8001890:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001894:	f7fe fe78 	bl	8000588 <__aeabi_f2d>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	ec43 2b10 	vmov	d0, r2, r3
 80018a0:	4866      	ldr	r0, [pc, #408]	; (8001a3c <main+0x358>)
 80018a2:	f000 ffb9 	bl	8002818 <ServoPosition>
	  if(duty_deadman>10 && duty_deadman < 15){
 80018a6:	4b71      	ldr	r3, [pc, #452]	; (8001a6c <main+0x388>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b8:	dd10      	ble.n	80018dc <main+0x1f8>
 80018ba:	4b6c      	ldr	r3, [pc, #432]	; (8001a6c <main+0x388>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80018c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018cc:	d506      	bpl.n	80018dc <main+0x1f8>
		  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d4:	4866      	ldr	r0, [pc, #408]	; (8001a70 <main+0x38c>)
 80018d6:	f002 fb0d 	bl	8003ef4 <HAL_GPIO_WritePin>
 80018da:	e005      	b.n	80018e8 <main+0x204>
		  }
	  else
		  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 80018dc:	2200      	movs	r2, #0
 80018de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e2:	4863      	ldr	r0, [pc, #396]	; (8001a70 <main+0x38c>)
 80018e4:	f002 fb06 	bl	8003ef4 <HAL_GPIO_WritePin>


	  switch(circuit_Section) {
 80018e8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80018ec:	2b04      	cmp	r3, #4
 80018ee:	f200 80d0 	bhi.w	8001a92 <main+0x3ae>
 80018f2:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <main+0x214>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	08001981 	.word	0x08001981
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	08001947 	.word	0x08001947
 8001904:	080019ab 	.word	0x080019ab
 8001908:	080019e5 	.word	0x080019e5
	  	  case Fast_section:
			//duty_motor = DUTY_FAST;
			str_angle = SteeringAngle(p, delta, KP_FAST, KD_FAST);
 800190c:	eddf 1a59 	vldr	s3, [pc, #356]	; 8001a74 <main+0x390>
 8001910:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8001a78 <main+0x394>
 8001914:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 8001918:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 800191c:	f000 ffe0 	bl	80028e0 <SteeringAngle>
 8001920:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
			if (decel_end_flag == 0 && 10000 < MA_sum_front){
 8001924:	4b55      	ldr	r3, [pc, #340]	; (8001a7c <main+0x398>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d175      	bne.n	8001a18 <main+0x334>
 800192c:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <main+0x374>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f242 7210 	movw	r2, #10000	; 0x2710
 8001934:	4293      	cmp	r3, r2
 8001936:	dd6f      	ble.n	8001a18 <main+0x334>
			  // kb. 2 másodpercenkétn előidéz egy interruptot
			  HAL_TIM_Base_Start_IT(&htim7);
 8001938:	4851      	ldr	r0, [pc, #324]	; (8001a80 <main+0x39c>)
 800193a:	f004 fd45 	bl	80063c8 <HAL_TIM_Base_Start_IT>
			  circuit_Section = Braking;
 800193e:	2302      	movs	r3, #2
 8001940:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			}
			break;
 8001944:	e068      	b.n	8001a18 <main+0x334>
	  	  case Braking:
	  		chicane_coming=true;
 8001946:	4b4f      	ldr	r3, [pc, #316]	; (8001a84 <main+0x3a0>)
 8001948:	2201      	movs	r2, #1
 800194a:	701a      	strb	r2, [r3, #0]
	  		//duty_motor = DUTY_BRAKE;
	  		str_angle = SteeringAngle(p, delta, KP_FAST, KD_FAST);
 800194c:	eddf 1a49 	vldr	s3, [pc, #292]	; 8001a74 <main+0x390>
 8001950:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8001a78 <main+0x394>
 8001954:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 8001958:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 800195c:	f000 ffc0 	bl	80028e0 <SteeringAngle>
 8001960:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	  		if (decel_end_flag == 3){
 8001964:	4b45      	ldr	r3, [pc, #276]	; (8001a7c <main+0x398>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d157      	bne.n	8001a1c <main+0x338>
				HAL_TIM_Base_Stop_IT(&htim7);
 800196c:	4844      	ldr	r0, [pc, #272]	; (8001a80 <main+0x39c>)
 800196e:	f004 fd9b 	bl	80064a8 <HAL_TIM_Base_Stop_IT>
				decel_end_flag =0;
 8001972:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <main+0x398>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
				circuit_Section = Slow_section;
 8001978:	2300      	movs	r3, #0
 800197a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			}
	  		break;
 800197e:	e04d      	b.n	8001a1c <main+0x338>
	  	  case Slow_section:
	  		//duty_motor = DUTY_SLOW;
	  		str_angle = SteeringAngle(p, delta, KP_SLOW, KD_SLOW);
 8001980:	eddf 1a41 	vldr	s3, [pc, #260]	; 8001a88 <main+0x3a4>
 8001984:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8001a8c <main+0x3a8>
 8001988:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 800198c:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 8001990:	f000 ffa6 	bl	80028e0 <SteeringAngle>
 8001994:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	  		if (MA_sum_front < 8000){
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <main+0x374>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80019a0:	da3e      	bge.n	8001a20 <main+0x33c>
	  			 circuit_Section = Slow_waiting;
 80019a2:	2303      	movs	r3, #3
 80019a4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  		}
	  		break;
 80019a8:	e03a      	b.n	8001a20 <main+0x33c>
	  	  case Slow_waiting:
	  		//duty_motor = DUTY_SLOW;
			str_angle = SteeringAngle(p, delta, KP_SLOW, KD_SLOW);
 80019aa:	eddf 1a37 	vldr	s3, [pc, #220]	; 8001a88 <main+0x3a4>
 80019ae:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8001a8c <main+0x3a8>
 80019b2:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 80019b6:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 80019ba:	f000 ff91 	bl	80028e0 <SteeringAngle>
 80019be:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	  		if (decel_end_flag == 0 && 9000 < MA_sum_front){
 80019c2:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <main+0x398>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d12c      	bne.n	8001a24 <main+0x340>
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <main+0x374>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f242 3228 	movw	r2, #9000	; 0x2328
 80019d2:	4293      	cmp	r3, r2
 80019d4:	dd26      	ble.n	8001a24 <main+0x340>
	  			HAL_TIM_Base_Start_IT(&htim7);
 80019d6:	482a      	ldr	r0, [pc, #168]	; (8001a80 <main+0x39c>)
 80019d8:	f004 fcf6 	bl	80063c8 <HAL_TIM_Base_Start_IT>
	  			circuit_Section = Acceleration;
 80019dc:	2304      	movs	r3, #4
 80019de:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	  		}
	  		break;
 80019e2:	e01f      	b.n	8001a24 <main+0x340>
	  	  case Acceleration:
	  		//duty_motor = DUTY_FAST;
	  		str_angle = SteeringAngle(p, delta, KP_FAST, KD_FAST);
 80019e4:	eddf 1a23 	vldr	s3, [pc, #140]	; 8001a74 <main+0x390>
 80019e8:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8001a78 <main+0x394>
 80019ec:	edd7 0a23 	vldr	s1, [r7, #140]	; 0x8c
 80019f0:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 80019f4:	f000 ff74 	bl	80028e0 <SteeringAngle>
 80019f8:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	  		if (decel_end_flag == 2){
 80019fc:	4b1f      	ldr	r3, [pc, #124]	; (8001a7c <main+0x398>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d145      	bne.n	8001a90 <main+0x3ac>
				HAL_TIM_Base_Stop_IT(&htim7);
 8001a04:	481e      	ldr	r0, [pc, #120]	; (8001a80 <main+0x39c>)
 8001a06:	f004 fd4f 	bl	80064a8 <HAL_TIM_Base_Stop_IT>
				decel_end_flag =0;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <main+0x398>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
				circuit_Section = Fast_section;
 8001a10:	2301      	movs	r3, #1
 8001a12:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
			}
	  		break;
 8001a16:	e03b      	b.n	8001a90 <main+0x3ac>
			break;
 8001a18:	bf00      	nop
 8001a1a:	e03a      	b.n	8001a92 <main+0x3ae>
	  		break;
 8001a1c:	bf00      	nop
 8001a1e:	e038      	b.n	8001a92 <main+0x3ae>
	  		break;
 8001a20:	bf00      	nop
 8001a22:	e036      	b.n	8001a92 <main+0x3ae>
	  		break;
 8001a24:	bf00      	nop
 8001a26:	e034      	b.n	8001a92 <main+0x3ae>
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	200002c8 	.word	0x200002c8
 8001a30:	40020400 	.word	0x40020400
 8001a34:	20000478 	.word	0x20000478
 8001a38:	200005e0 	.word	0x200005e0
 8001a3c:	20000550 	.word	0x20000550
 8001a40:	200004c0 	.word	0x200004c0
 8001a44:	20000508 	.word	0x20000508
 8001a48:	200003c8 	.word	0x200003c8
 8001a4c:	20000370 	.word	0x20000370
 8001a50:	20000420 	.word	0x20000420
 8001a54:	20000670 	.word	0x20000670
 8001a58:	200007c0 	.word	0x200007c0
 8001a5c:	200007c8 	.word	0x200007c8
 8001a60:	200007c4 	.word	0x200007c4
 8001a64:	200007cc 	.word	0x200007cc
 8001a68:	20000bac 	.word	0x20000bac
 8001a6c:	20000ba8 	.word	0x20000ba8
 8001a70:	40020000 	.word	0x40020000
 8001a74:	3f16e2eb 	.word	0x3f16e2eb
 8001a78:	bf380347 	.word	0xbf380347
 8001a7c:	20000b98 	.word	0x20000b98
 8001a80:	20000598 	.word	0x20000598
 8001a84:	20000b9c 	.word	0x20000b9c
 8001a88:	3ea5a1cb 	.word	0x3ea5a1cb
 8001a8c:	c0b6809d 	.word	0xc0b6809d
	  		break;
 8001a90:	bf00      	nop
	  }

	  duty_motor = MotorFollowControl(&prev_error, RangingData.RangeMilliMeter);
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <main+0x3e0>)
 8001a94:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <main+0x3e4>)
 8001a9c:	f000 fe80 	bl	80027a0 <MotorFollowControl>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <main+0x3e8>)
 8001aa4:	6013      	str	r3, [r2, #0]


	  sprintf( (char*)BT_send_msg_buff, "DST: %d, Duty cycle: %d\n\r", RangingData.RangeMilliMeter, duty_motor);
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <main+0x3e0>)
 8001aa8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <main+0x3e8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4907      	ldr	r1, [pc, #28]	; (8001ad0 <main+0x3ec>)
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <main+0x3f0>)
 8001ab6:	f00c fd89 	bl	800e5cc <siprintf>
	  BT_TransmitMsg(&huart2, BT_send_msg_buff);
 8001aba:	4906      	ldr	r1, [pc, #24]	; (8001ad4 <main+0x3f0>)
 8001abc:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <main+0x3f4>)
 8001abe:	f7ff fa65 	bl	8000f8c <BT_TransmitMsg>
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 8001ac2:	e699      	b.n	80017f8 <main+0x114>
 8001ac4:	200007d0 	.word	0x200007d0
 8001ac8:	20000b94 	.word	0x20000b94
 8001acc:	20000bac 	.word	0x20000bac
 8001ad0:	08012038 	.word	0x08012038
 8001ad4:	200006f8 	.word	0x200006f8
 8001ad8:	20000670 	.word	0x20000670

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b094      	sub	sp, #80	; 0x50
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	2234      	movs	r2, #52	; 0x34
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f00c f8fc 	bl	800dce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <SystemClock_Config+0xdc>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	4a2b      	ldr	r2, [pc, #172]	; (8001bb8 <SystemClock_Config+0xdc>)
 8001b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b10:	4b29      	ldr	r3, [pc, #164]	; (8001bb8 <SystemClock_Config+0xdc>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <SystemClock_Config+0xe0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a25      	ldr	r2, [pc, #148]	; (8001bbc <SystemClock_Config+0xe0>)
 8001b26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <SystemClock_Config+0xe0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b42:	2302      	movs	r3, #2
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001b50:	23b4      	movs	r3, #180	; 0xb4
 8001b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b60:	f107 031c 	add.w	r3, r7, #28
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 fd0f 	bl	8005588 <HAL_RCC_OscConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001b70:	f000 fdfa 	bl	8002768 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b74:	f003 f96e 	bl	8004e54 <HAL_PWREx_EnableOverDrive>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001b7e:	f000 fdf3 	bl	8002768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b82:	230f      	movs	r3, #15
 8001b84:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b86:	2302      	movs	r3, #2
 8001b88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b8e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b98:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b9a:	f107 0308 	add.w	r3, r7, #8
 8001b9e:	2105      	movs	r1, #5
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 f9a7 	bl	8004ef4 <HAL_RCC_ClockConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001bac:	f000 fddc 	bl	8002768 <Error_Handler>
  }
}
 8001bb0:	bf00      	nop
 8001bb2:	3750      	adds	r7, #80	; 0x50
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40007000 	.word	0x40007000

08001bc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001bd4:	4a21      	ldr	r2, [pc, #132]	; (8001c5c <MX_ADC1_Init+0x9c>)
 8001bd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001bda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bec:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <MX_ADC1_Init+0xa0>)
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c06:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001c22:	f001 fc4f 	bl	80034c4 <HAL_ADC_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001c2c:	f000 fd9c 	bl	8002768 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c30:	2301      	movs	r3, #1
 8001c32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c34:	2301      	movs	r3, #1
 8001c36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4805      	ldr	r0, [pc, #20]	; (8001c58 <MX_ADC1_Init+0x98>)
 8001c42:	f001 fc83 	bl	800354c <HAL_ADC_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001c4c:	f000 fd8c 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c50:	bf00      	nop
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	2000022c 	.word	0x2000022c
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	0f000001 	.word	0x0f000001

08001c64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c6a:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <MX_I2C1_Init+0x54>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c70:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <MX_I2C1_Init+0x58>)
 8001c72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c94:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <MX_I2C1_Init+0x50>)
 8001ca2:	f002 f941 	bl	8003f28 <HAL_I2C_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cac:	f000 fd5c 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000274 	.word	0x20000274
 8001cb8:	40005400 	.word	0x40005400
 8001cbc:	000186a0 	.word	0x000186a0

08001cc0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cc6:	4a13      	ldr	r2, [pc, #76]	; (8001d14 <MX_I2C2_Init+0x54>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001ccc:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <MX_I2C2_Init+0x58>)
 8001cce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ce2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cfc:	4804      	ldr	r0, [pc, #16]	; (8001d10 <MX_I2C2_Init+0x50>)
 8001cfe:	f002 f913 	bl	8003f28 <HAL_I2C_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d08:	f000 fd2e 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	200002c8 	.word	0x200002c8
 8001d14:	40005800 	.word	0x40005800
 8001d18:	000186a0 	.word	0x000186a0

08001d1c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_I2C3_Init+0x50>)
 8001d22:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <MX_I2C3_Init+0x54>)
 8001d24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_I2C3_Init+0x50>)
 8001d28:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <MX_I2C3_Init+0x58>)
 8001d2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_I2C3_Init+0x50>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_I2C3_Init+0x50>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_I2C3_Init+0x50>)
 8001d3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d3e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <MX_I2C3_Init+0x50>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_I2C3_Init+0x50>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <MX_I2C3_Init+0x50>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_I2C3_Init+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <MX_I2C3_Init+0x50>)
 8001d5a:	f002 f8e5 	bl	8003f28 <HAL_I2C_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001d64:	f000 fd00 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	2000031c 	.word	0x2000031c
 8001d70:	40005c00 	.word	0x40005c00
 8001d74:	000186a0 	.word	0x000186a0

08001d78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001d7e:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <MX_SPI1_Init+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001d84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d8a:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d90:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001dac:	2228      	movs	r2, #40	; 0x28
 8001dae:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001db6:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001dc4:	220a      	movs	r2, #10
 8001dc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001dc8:	4804      	ldr	r0, [pc, #16]	; (8001ddc <MX_SPI1_Init+0x64>)
 8001dca:	f003 fe7b 	bl	8005ac4 <HAL_SPI_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001dd4:	f000 fcc8 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000370 	.word	0x20000370
 8001de0:	40013000 	.word	0x40013000

08001de4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001de8:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001dea:	4a18      	ldr	r2, [pc, #96]	; (8001e4c <MX_SPI2_Init+0x68>)
 8001dec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001df0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001df6:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001e18:	2220      	movs	r2, #32
 8001e1a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e22:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e28:	4b07      	ldr	r3, [pc, #28]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001e30:	220a      	movs	r2, #10
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e34:	4804      	ldr	r0, [pc, #16]	; (8001e48 <MX_SPI2_Init+0x64>)
 8001e36:	f003 fe45 	bl	8005ac4 <HAL_SPI_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e40:	f000 fc92 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200003c8 	.word	0x200003c8
 8001e4c:	40003800 	.word	0x40003800

08001e50 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e54:	4b18      	ldr	r3, [pc, #96]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001e56:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <MX_SPI3_Init+0x6c>)
 8001e58:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e5a:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001e5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e60:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001e64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e68:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e6a:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e70:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e76:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e82:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001e86:	2210      	movs	r2, #16
 8001e88:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e8a:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001e9e:	220a      	movs	r2, #10
 8001ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <MX_SPI3_Init+0x68>)
 8001ea4:	f003 fe0e 	bl	8005ac4 <HAL_SPI_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001eae:	f000 fc5b 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001eb2:	bf00      	nop
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000420 	.word	0x20000420
 8001ebc:	40003c00 	.word	0x40003c00

08001ec0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08c      	sub	sp, #48	; 0x30
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
 8001ed4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ed6:	f107 030c 	add.w	r3, r7, #12
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <MX_TIM2_Init+0xfc>)
 8001eee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ef2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8001ef4:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <MX_TIM2_Init+0xfc>)
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <MX_TIM2_Init+0xfc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f00:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <MX_TIM2_Init+0xfc>)
 8001f02:	f04f 32ff 	mov.w	r2, #4294967295
 8001f06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <MX_TIM2_Init+0xfc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <MX_TIM2_Init+0xfc>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001f14:	4829      	ldr	r0, [pc, #164]	; (8001fbc <MX_TIM2_Init+0xfc>)
 8001f16:	f004 fc17 	bl	8006748 <HAL_TIM_IC_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001f20:	f000 fc22 	bl	8002768 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001f24:	2304      	movs	r3, #4
 8001f26:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001f28:	2350      	movs	r3, #80	; 0x50
 8001f2a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001f38:	f107 031c 	add.w	r3, r7, #28
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	481f      	ldr	r0, [pc, #124]	; (8001fbc <MX_TIM2_Init+0xfc>)
 8001f40:	f005 f983 	bl	800724a <HAL_TIM_SlaveConfigSynchro>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001f4a:	f000 fc0d 	bl	8002768 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f52:	2301      	movs	r3, #1
 8001f54:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	2200      	movs	r2, #0
 8001f64:	4619      	mov	r1, r3
 8001f66:	4815      	ldr	r0, [pc, #84]	; (8001fbc <MX_TIM2_Init+0xfc>)
 8001f68:	f004 ff4a 	bl	8006e00 <HAL_TIM_IC_ConfigChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001f72:	f000 fbf9 	bl	8002768 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001f76:	2302      	movs	r3, #2
 8001f78:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	2204      	movs	r2, #4
 8001f84:	4619      	mov	r1, r3
 8001f86:	480d      	ldr	r0, [pc, #52]	; (8001fbc <MX_TIM2_Init+0xfc>)
 8001f88:	f004 ff3a 	bl	8006e00 <HAL_TIM_IC_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001f92:	f000 fbe9 	bl	8002768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4806      	ldr	r0, [pc, #24]	; (8001fbc <MX_TIM2_Init+0xfc>)
 8001fa4:	f005 fec2 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001fae:	f000 fbdb 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fb2:	bf00      	nop
 8001fb4:	3730      	adds	r7, #48	; 0x30
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000478 	.word	0x20000478

08001fc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08e      	sub	sp, #56	; 0x38
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd4:	f107 0320 	add.w	r3, r7, #32
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
 8001fec:	615a      	str	r2, [r3, #20]
 8001fee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ff0:	4b2e      	ldr	r3, [pc, #184]	; (80020ac <MX_TIM3_Init+0xec>)
 8001ff2:	4a2f      	ldr	r2, [pc, #188]	; (80020b0 <MX_TIM3_Init+0xf0>)
 8001ff4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ff6:	4b2d      	ldr	r3, [pc, #180]	; (80020ac <MX_TIM3_Init+0xec>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <MX_TIM3_Init+0xec>)
 8001ffe:	2220      	movs	r2, #32
 8002000:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8002002:	4b2a      	ldr	r3, [pc, #168]	; (80020ac <MX_TIM3_Init+0xec>)
 8002004:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002008:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200a:	4b28      	ldr	r3, [pc, #160]	; (80020ac <MX_TIM3_Init+0xec>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002010:	4b26      	ldr	r3, [pc, #152]	; (80020ac <MX_TIM3_Init+0xec>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002016:	4825      	ldr	r0, [pc, #148]	; (80020ac <MX_TIM3_Init+0xec>)
 8002018:	f004 f986 	bl	8006328 <HAL_TIM_Base_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002022:	f000 fba1 	bl	8002768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800202c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002030:	4619      	mov	r1, r3
 8002032:	481e      	ldr	r0, [pc, #120]	; (80020ac <MX_TIM3_Init+0xec>)
 8002034:	f005 f842 	bl	80070bc <HAL_TIM_ConfigClockSource>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800203e:	f000 fb93 	bl	8002768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002042:	481a      	ldr	r0, [pc, #104]	; (80020ac <MX_TIM3_Init+0xec>)
 8002044:	f004 fa5f 	bl	8006506 <HAL_TIM_PWM_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800204e:	f000 fb8b 	bl	8002768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002052:	2320      	movs	r3, #32
 8002054:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	4619      	mov	r1, r3
 8002060:	4812      	ldr	r0, [pc, #72]	; (80020ac <MX_TIM3_Init+0xec>)
 8002062:	f005 fe63 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800206c:	f000 fb7c 	bl	8002768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002070:	2360      	movs	r3, #96	; 0x60
 8002072:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1900;
 8002074:	f240 736c 	movw	r3, #1900	; 0x76c
 8002078:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800207a:	2302      	movs	r3, #2
 800207c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2204      	movs	r2, #4
 8002086:	4619      	mov	r1, r3
 8002088:	4808      	ldr	r0, [pc, #32]	; (80020ac <MX_TIM3_Init+0xec>)
 800208a:	f004 ff55 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002094:	f000 fb68 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8002098:	4804      	ldr	r0, [pc, #16]	; (80020ac <MX_TIM3_Init+0xec>)
 800209a:	f004 f995 	bl	80063c8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800209e:	4803      	ldr	r0, [pc, #12]	; (80020ac <MX_TIM3_Init+0xec>)
 80020a0:	f000 ffc0 	bl	8003024 <HAL_TIM_MspPostInit>

}
 80020a4:	bf00      	nop
 80020a6:	3738      	adds	r7, #56	; 0x38
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200004c0 	.word	0x200004c0
 80020b0:	40000400 	.word	0x40000400

080020b4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b092      	sub	sp, #72	; 0x48
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
 80020c4:	609a      	str	r2, [r3, #8]
 80020c6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80020c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	609a      	str	r2, [r3, #8]
 80020d4:	60da      	str	r2, [r3, #12]
 80020d6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020e2:	463b      	mov	r3, r7
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
 80020ee:	611a      	str	r2, [r3, #16]
 80020f0:	615a      	str	r2, [r3, #20]
 80020f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020f4:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <MX_TIM4_Init+0x11c>)
 80020f6:	4a37      	ldr	r2, [pc, #220]	; (80021d4 <MX_TIM4_Init+0x120>)
 80020f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <MX_TIM4_Init+0x11c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002100:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <MX_TIM4_Init+0x11c>)
 8002102:	2240      	movs	r2, #64	; 0x40
 8002104:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <MX_TIM4_Init+0x11c>)
 8002108:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800210c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210e:	4b30      	ldr	r3, [pc, #192]	; (80021d0 <MX_TIM4_Init+0x11c>)
 8002110:	2200      	movs	r2, #0
 8002112:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002114:	4b2e      	ldr	r3, [pc, #184]	; (80021d0 <MX_TIM4_Init+0x11c>)
 8002116:	2200      	movs	r2, #0
 8002118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800211a:	482d      	ldr	r0, [pc, #180]	; (80021d0 <MX_TIM4_Init+0x11c>)
 800211c:	f004 f904 	bl	8006328 <HAL_TIM_Base_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002126:	f000 fb1f 	bl	8002768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800212a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800212e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002130:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002134:	4619      	mov	r1, r3
 8002136:	4826      	ldr	r0, [pc, #152]	; (80021d0 <MX_TIM4_Init+0x11c>)
 8002138:	f004 ffc0 	bl	80070bc <HAL_TIM_ConfigClockSource>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002142:	f000 fb11 	bl	8002768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002146:	4822      	ldr	r0, [pc, #136]	; (80021d0 <MX_TIM4_Init+0x11c>)
 8002148:	f004 f9dd 	bl	8006506 <HAL_TIM_PWM_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8002152:	f000 fb09 	bl	8002768 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002156:	2306      	movs	r3, #6
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 800215a:	2320      	movs	r3, #32
 800215c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800215e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002162:	4619      	mov	r1, r3
 8002164:	481a      	ldr	r0, [pc, #104]	; (80021d0 <MX_TIM4_Init+0x11c>)
 8002166:	f005 f870 	bl	800724a <HAL_TIM_SlaveConfigSynchro>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8002170:	f000 fafa 	bl	8002768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002174:	2320      	movs	r3, #32
 8002176:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800217c:	f107 031c 	add.w	r3, r7, #28
 8002180:	4619      	mov	r1, r3
 8002182:	4813      	ldr	r0, [pc, #76]	; (80021d0 <MX_TIM4_Init+0x11c>)
 8002184:	f005 fdd2 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800218e:	f000 faeb 	bl	8002768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002192:	2360      	movs	r3, #96	; 0x60
 8002194:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	2200      	movs	r2, #0
 80021a8:	4619      	mov	r1, r3
 80021aa:	4809      	ldr	r0, [pc, #36]	; (80021d0 <MX_TIM4_Init+0x11c>)
 80021ac:	f004 fec4 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 80021b6:	f000 fad7 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 80021ba:	4805      	ldr	r0, [pc, #20]	; (80021d0 <MX_TIM4_Init+0x11c>)
 80021bc:	f004 f904 	bl	80063c8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <MX_TIM4_Init+0x11c>)
 80021c2:	f000 ff2f 	bl	8003024 <HAL_TIM_MspPostInit>

}
 80021c6:	bf00      	nop
 80021c8:	3748      	adds	r7, #72	; 0x48
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000508 	.word	0x20000508
 80021d4:	40000800 	.word	0x40000800

080021d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08e      	sub	sp, #56	; 0x38
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ec:	f107 0320 	add.w	r3, r7, #32
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f6:	1d3b      	adds	r3, r7, #4
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
 8002204:	615a      	str	r2, [r3, #20]
 8002206:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002208:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <MX_TIM5_Init+0xe4>)
 800220a:	4a2d      	ldr	r2, [pc, #180]	; (80022c0 <MX_TIM5_Init+0xe8>)
 800220c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 30-1;
 800220e:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <MX_TIM5_Init+0xe4>)
 8002210:	221d      	movs	r2, #29
 8002212:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002214:	4b29      	ldr	r3, [pc, #164]	; (80022bc <MX_TIM5_Init+0xe4>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000-1;
 800221a:	4b28      	ldr	r3, [pc, #160]	; (80022bc <MX_TIM5_Init+0xe4>)
 800221c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002220:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <MX_TIM5_Init+0xe4>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002228:	4b24      	ldr	r3, [pc, #144]	; (80022bc <MX_TIM5_Init+0xe4>)
 800222a:	2200      	movs	r2, #0
 800222c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800222e:	4823      	ldr	r0, [pc, #140]	; (80022bc <MX_TIM5_Init+0xe4>)
 8002230:	f004 f87a 	bl	8006328 <HAL_TIM_Base_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 800223a:	f000 fa95 	bl	8002768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002248:	4619      	mov	r1, r3
 800224a:	481c      	ldr	r0, [pc, #112]	; (80022bc <MX_TIM5_Init+0xe4>)
 800224c:	f004 ff36 	bl	80070bc <HAL_TIM_ConfigClockSource>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002256:	f000 fa87 	bl	8002768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800225a:	4818      	ldr	r0, [pc, #96]	; (80022bc <MX_TIM5_Init+0xe4>)
 800225c:	f004 f953 	bl	8006506 <HAL_TIM_PWM_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002266:	f000 fa7f 	bl	8002768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226a:	2300      	movs	r3, #0
 800226c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002272:	f107 0320 	add.w	r3, r7, #32
 8002276:	4619      	mov	r1, r3
 8002278:	4810      	ldr	r0, [pc, #64]	; (80022bc <MX_TIM5_Init+0xe4>)
 800227a:	f005 fd57 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002284:	f000 fa70 	bl	8002768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002288:	2360      	movs	r3, #96	; 0x60
 800228a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	2200      	movs	r2, #0
 800229c:	4619      	mov	r1, r3
 800229e:	4807      	ldr	r0, [pc, #28]	; (80022bc <MX_TIM5_Init+0xe4>)
 80022a0:	f004 fe4a 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 80022aa:	f000 fa5d 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022ae:	4803      	ldr	r0, [pc, #12]	; (80022bc <MX_TIM5_Init+0xe4>)
 80022b0:	f000 feb8 	bl	8003024 <HAL_TIM_MspPostInit>

}
 80022b4:	bf00      	nop
 80022b6:	3738      	adds	r7, #56	; 0x38
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	20000550 	.word	0x20000550
 80022c0:	40000c00 	.word	0x40000c00

080022c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ca:	463b      	mov	r3, r7
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <MX_TIM7_Init+0x64>)
 80022d4:	4a15      	ldr	r2, [pc, #84]	; (800232c <MX_TIM7_Init+0x68>)
 80022d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <MX_TIM7_Init+0x64>)
 80022da:	f242 720f 	movw	r2, #9999	; 0x270f
 80022de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <MX_TIM7_Init+0x64>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4500-1;
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <MX_TIM7_Init+0x64>)
 80022e8:	f241 1293 	movw	r2, #4499	; 0x1193
 80022ec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ee:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <MX_TIM7_Init+0x64>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80022f4:	480c      	ldr	r0, [pc, #48]	; (8002328 <MX_TIM7_Init+0x64>)
 80022f6:	f004 f817 	bl	8006328 <HAL_TIM_Base_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002300:	f000 fa32 	bl	8002768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002304:	2300      	movs	r3, #0
 8002306:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800230c:	463b      	mov	r3, r7
 800230e:	4619      	mov	r1, r3
 8002310:	4805      	ldr	r0, [pc, #20]	; (8002328 <MX_TIM7_Init+0x64>)
 8002312:	f005 fd0b 	bl	8007d2c <HAL_TIMEx_MasterConfigSynchronization>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800231c:	f000 fa24 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20000598 	.word	0x20000598
 800232c:	40001400 	.word	0x40001400

08002330 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002334:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <MX_TIM10_Init+0x40>)
 8002336:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <MX_TIM10_Init+0x44>)
 8002338:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 45000-1;
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <MX_TIM10_Init+0x40>)
 800233c:	f64a 72c7 	movw	r2, #44999	; 0xafc7
 8002340:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002342:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_TIM10_Init+0x40>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 400-1;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_TIM10_Init+0x40>)
 800234a:	f240 128f 	movw	r2, #399	; 0x18f
 800234e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <MX_TIM10_Init+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_TIM10_Init+0x40>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800235c:	4804      	ldr	r0, [pc, #16]	; (8002370 <MX_TIM10_Init+0x40>)
 800235e:	f003 ffe3 	bl	8006328 <HAL_TIM_Base_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002368:	f000 f9fe 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200005e0 	.word	0x200005e0
 8002374:	40014400 	.word	0x40014400

08002378 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800237e:	1d3b      	adds	r3, r7, #4
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
 800238c:	615a      	str	r2, [r3, #20]
 800238e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002390:	4b1e      	ldr	r3, [pc, #120]	; (800240c <MX_TIM13_Init+0x94>)
 8002392:	4a1f      	ldr	r2, [pc, #124]	; (8002410 <MX_TIM13_Init+0x98>)
 8002394:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <MX_TIM13_Init+0x94>)
 8002398:	2200      	movs	r2, #0
 800239a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <MX_TIM13_Init+0x94>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80023a2:	4b1a      	ldr	r3, [pc, #104]	; (800240c <MX_TIM13_Init+0x94>)
 80023a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <MX_TIM13_Init+0x94>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b0:	4b16      	ldr	r3, [pc, #88]	; (800240c <MX_TIM13_Init+0x94>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80023b6:	4815      	ldr	r0, [pc, #84]	; (800240c <MX_TIM13_Init+0x94>)
 80023b8:	f003 ffb6 	bl	8006328 <HAL_TIM_Base_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80023c2:	f000 f9d1 	bl	8002768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80023c6:	4811      	ldr	r0, [pc, #68]	; (800240c <MX_TIM13_Init+0x94>)
 80023c8:	f004 f89d 	bl	8006506 <HAL_TIM_PWM_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80023d2:	f000 f9c9 	bl	8002768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d6:	2360      	movs	r3, #96	; 0x60
 80023d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	2200      	movs	r2, #0
 80023ea:	4619      	mov	r1, r3
 80023ec:	4807      	ldr	r0, [pc, #28]	; (800240c <MX_TIM13_Init+0x94>)
 80023ee:	f004 fda3 	bl	8006f38 <HAL_TIM_PWM_ConfigChannel>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80023f8:	f000 f9b6 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80023fc:	4803      	ldr	r0, [pc, #12]	; (800240c <MX_TIM13_Init+0x94>)
 80023fe:	f000 fe11 	bl	8003024 <HAL_TIM_MspPostInit>

}
 8002402:	bf00      	nop
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000628 	.word	0x20000628
 8002410:	40001c00 	.word	0x40001c00

08002414 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <MX_USART2_UART_Init+0x4c>)
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <MX_USART2_UART_Init+0x50>)
 800241c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <MX_USART2_UART_Init+0x4c>)
 8002420:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002426:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <MX_USART2_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <MX_USART2_UART_Init+0x4c>)
 800242e:	2200      	movs	r2, #0
 8002430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <MX_USART2_UART_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <MX_USART2_UART_Init+0x4c>)
 800243a:	220c      	movs	r2, #12
 800243c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <MX_USART2_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <MX_USART2_UART_Init+0x4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_USART2_UART_Init+0x4c>)
 800244c:	f005 fcfe 	bl	8007e4c <HAL_UART_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002456:	f000 f987 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000670 	.word	0x20000670
 8002464:	40004400 	.word	0x40004400

08002468 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800246c:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_USART6_UART_Init+0x4c>)
 800246e:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <MX_USART6_UART_Init+0x50>)
 8002470:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <MX_USART6_UART_Init+0x4c>)
 8002474:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002478:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_USART6_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_USART6_UART_Init+0x4c>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <MX_USART6_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_USART6_UART_Init+0x4c>)
 800248e:	220c      	movs	r2, #12
 8002490:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <MX_USART6_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_USART6_UART_Init+0x4c>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <MX_USART6_UART_Init+0x4c>)
 80024a0:	f005 fcd4 	bl	8007e4c <HAL_UART_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80024aa:	f000 f95d 	bl	8002768 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200006b4 	.word	0x200006b4
 80024b8:	40011400 	.word	0x40011400

080024bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c2:	f107 0314 	add.w	r3, r7, #20
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
 80024d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b67      	ldr	r3, [pc, #412]	; (8002674 <MX_GPIO_Init+0x1b8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a66      	ldr	r2, [pc, #408]	; (8002674 <MX_GPIO_Init+0x1b8>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b64      	ldr	r3, [pc, #400]	; (8002674 <MX_GPIO_Init+0x1b8>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b60      	ldr	r3, [pc, #384]	; (8002674 <MX_GPIO_Init+0x1b8>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a5f      	ldr	r2, [pc, #380]	; (8002674 <MX_GPIO_Init+0x1b8>)
 80024f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b5d      	ldr	r3, [pc, #372]	; (8002674 <MX_GPIO_Init+0x1b8>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	4b59      	ldr	r3, [pc, #356]	; (8002674 <MX_GPIO_Init+0x1b8>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a58      	ldr	r2, [pc, #352]	; (8002674 <MX_GPIO_Init+0x1b8>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b56      	ldr	r3, [pc, #344]	; (8002674 <MX_GPIO_Init+0x1b8>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	4b52      	ldr	r3, [pc, #328]	; (8002674 <MX_GPIO_Init+0x1b8>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a51      	ldr	r2, [pc, #324]	; (8002674 <MX_GPIO_Init+0x1b8>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b4f      	ldr	r3, [pc, #316]	; (8002674 <MX_GPIO_Init+0x1b8>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <MX_GPIO_Init+0x1b8>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <MX_GPIO_Init+0x1b8>)
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	6313      	str	r3, [r2, #48]	; 0x30
 8002552:	4b48      	ldr	r3, [pc, #288]	; (8002674 <MX_GPIO_Init+0x1b8>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 800255e:	2200      	movs	r2, #0
 8002560:	f24d 0107 	movw	r1, #53255	; 0xd007
 8002564:	4844      	ldr	r0, [pc, #272]	; (8002678 <MX_GPIO_Init+0x1bc>)
 8002566:	f001 fcc5 	bl	8003ef4 <HAL_GPIO_WritePin>
                          |AD_CS3_Pin|AD_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_CS1_Pin|LED_LE_Pin, GPIO_PIN_RESET);
 800256a:	2200      	movs	r2, #0
 800256c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8002570:	4842      	ldr	r0, [pc, #264]	; (800267c <MX_GPIO_Init+0x1c0>)
 8002572:	f001 fcbf 	bl	8003ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin, GPIO_PIN_RESET);
 8002576:	2200      	movs	r2, #0
 8002578:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 800257c:	4840      	ldr	r0, [pc, #256]	; (8002680 <MX_GPIO_Init+0x1c4>)
 800257e:	f001 fcb9 	bl	8003ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_RESET);
 8002582:	2200      	movs	r2, #0
 8002584:	2104      	movs	r1, #4
 8002586:	483f      	ldr	r0, [pc, #252]	; (8002684 <MX_GPIO_Init+0x1c8>)
 8002588:	f001 fcb4 	bl	8003ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800258c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002592:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	4836      	ldr	r0, [pc, #216]	; (800267c <MX_GPIO_Init+0x1c0>)
 80025a4:	f001 fb12 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : Dead_man_SW_Pin DRV_PWR_FB_Pin */
  GPIO_InitStruct.Pin = Dead_man_SW_Pin|DRV_PWR_FB_Pin;
 80025a8:	2311      	movs	r3, #17
 80025aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	4619      	mov	r1, r3
 80025ba:	4830      	ldr	r0, [pc, #192]	; (800267c <MX_GPIO_Init+0x1c0>)
 80025bc:	f001 fb06 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_INT_Pin */
  GPIO_InitStruct.Pin = I2C_INT_Pin;
 80025c0:	2320      	movs	r3, #32
 80025c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025c4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2C_INT_GPIO_Port, &GPIO_InitStruct);
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	4619      	mov	r1, r3
 80025d4:	4829      	ldr	r0, [pc, #164]	; (800267c <MX_GPIO_Init+0x1c0>)
 80025d6:	f001 faf9 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_XSDN_36_Pin ToF_XSDN_25_Pin ToF_XSDN_14_Pin AD_CS4_Pin
                           AD_CS3_Pin AD_CS2_Pin */
  GPIO_InitStruct.Pin = ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 80025da:	f24d 0307 	movw	r3, #53255	; 0xd007
 80025de:	617b      	str	r3, [r7, #20]
                          |AD_CS3_Pin|AD_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e0:	2301      	movs	r3, #1
 80025e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e8:	2300      	movs	r3, #0
 80025ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ec:	f107 0314 	add.w	r3, r7, #20
 80025f0:	4619      	mov	r1, r3
 80025f2:	4821      	ldr	r0, [pc, #132]	; (8002678 <MX_GPIO_Init+0x1bc>)
 80025f4:	f001 faea 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_CS1_Pin LED_LE_Pin */
  GPIO_InitStruct.Pin = AD_CS1_Pin|LED_LE_Pin;
 80025f8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80025fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fe:	2301      	movs	r3, #1
 8002600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	481a      	ldr	r0, [pc, #104]	; (800267c <MX_GPIO_Init+0x1c0>)
 8002612:	f001 fadb 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : INF_LE_Pin INF_OE_Pin DRV_EN_Pin */
  GPIO_InitStruct.Pin = INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin;
 8002616:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 800261a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800261c:	2301      	movs	r3, #1
 800261e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	4814      	ldr	r0, [pc, #80]	; (8002680 <MX_GPIO_Init+0x1c4>)
 8002630:	f001 facc 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_FB_Pin */
  GPIO_InitStruct.Pin = DRV_EN_FB_Pin;
 8002634:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_EN_FB_GPIO_Port, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	480d      	ldr	r0, [pc, #52]	; (8002680 <MX_GPIO_Init+0x1c4>)
 800264a:	f001 fabf 	bl	8003bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_OE_Pin;
 800264e:	2304      	movs	r3, #4
 8002650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002652:	2301      	movs	r3, #1
 8002654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OE_GPIO_Port, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4807      	ldr	r0, [pc, #28]	; (8002684 <MX_GPIO_Init+0x1c8>)
 8002666:	f001 fab1 	bl	8003bcc <HAL_GPIO_Init>

}
 800266a:	bf00      	nop
 800266c:	3728      	adds	r7, #40	; 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	40020400 	.word	0x40020400
 800267c:	40020800 	.word	0x40020800
 8002680:	40020000 	.word	0x40020000
 8002684:	40020c00 	.word	0x40020c00

08002688 <HAL_TIM_PeriodElapsedCallback>:
//			   ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
//	VL53L1_ClearInterruptAndStartMeasurement(Dev1);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	if (htim == &htim7)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a12      	ldr	r2, [pc, #72]	; (80026dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d104      	bne.n	80026a2 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		decel_end_flag++;
 8002698:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	3301      	adds	r3, #1
 800269e:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80026a0:	6013      	str	r3, [r2, #0]
	}
	if (htim == &htim10 )
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a0f      	ldr	r2, [pc, #60]	; (80026e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d114      	bne.n	80026d4 <HAL_TIM_PeriodElapsedCallback+0x4c>
	  {
		VL53L1_GetMeasurementDataReady  ( Dev1,  &DataReady ) ;
 80026aa:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	490f      	ldr	r1, [pc, #60]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80026b0:	4618      	mov	r0, r3
 80026b2:	f006 fcd7 	bl	8009064 <VL53L1_GetMeasurementDataReady>
		if(DataReady == 1){
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d105      	bne.n	80026ca <HAL_TIM_PeriodElapsedCallback+0x42>
			VL53L1_GetRangingMeasurementData( Dev1, &RangingData );
 80026be:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	490b      	ldr	r1, [pc, #44]	; (80026f0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80026c4:	4618      	mov	r0, r3
 80026c6:	f006 fe89 	bl	80093dc <VL53L1_GetRangingMeasurementData>
		}

		VL53L1_ClearInterruptAndStartMeasurement( Dev1 );
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f006 fcb2 	bl	8009038 <VL53L1_ClearInterruptAndStartMeasurement>
	  }
}
 80026d4:	bf00      	nop
 80026d6:	3708      	adds	r7, #8
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20000598 	.word	0x20000598
 80026e0:	20000b98 	.word	0x20000b98
 80026e4:	200005e0 	.word	0x200005e0
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000b90 	.word	0x20000b90
 80026f0:	200007d0 	.word	0x200007d0

080026f4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002704:	d124      	bne.n	8002750 <HAL_TIM_IC_CaptureCallback+0x5c>
		cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 2;
 8002706:	2100      	movs	r1, #0
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f004 fde1 	bl	80072d0 <HAL_TIM_ReadCapturedValue>
 800270e:	4603      	mov	r3, r0
 8002710:	3302      	adds	r3, #2
 8002712:	4a11      	ldr	r2, [pc, #68]	; (8002758 <HAL_TIM_IC_CaptureCallback+0x64>)
 8002714:	6013      	str	r3, [r2, #0]
		cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + 2;
 8002716:	2104      	movs	r1, #4
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f004 fdd9 	bl	80072d0 <HAL_TIM_ReadCapturedValue>
 800271e:	4603      	mov	r3, r0
 8002720:	3302      	adds	r3, #2
 8002722:	4a0e      	ldr	r2, [pc, #56]	; (800275c <HAL_TIM_IC_CaptureCallback+0x68>)
 8002724:	6013      	str	r3, [r2, #0]

		duty_deadman = (float) 100 * cnt_high / cnt_full;
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <HAL_TIM_IC_CaptureCallback+0x68>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002732:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002760 <HAL_TIM_IC_CaptureCallback+0x6c>
 8002736:	ee67 6a87 	vmul.f32	s13, s15, s14
 800273a:	4b07      	ldr	r3, [pc, #28]	; (8002758 <HAL_TIM_IC_CaptureCallback+0x64>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_TIM_IC_CaptureCallback+0x70>)
 800274c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000ba0 	.word	0x20000ba0
 800275c:	20000ba4 	.word	0x20000ba4
 8002760:	42c80000 	.word	0x42c80000
 8002764:	20000ba8 	.word	0x20000ba8

08002768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800276c:	b672      	cpsid	i
}
 800276e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002770:	e7fe      	b.n	8002770 <Error_Handler+0x8>

08002772 <MotorDrive>:
#include "main.h"

int MotorDrive(TIM_HandleTypeDef* const pwmHandle, int duty)
{
 8002772:	b480      	push	{r7}
 8002774:	b085      	sub	sp, #20
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
	int pwm_val = 100+(duty*20);
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	3364      	adds	r3, #100	; 0x64
 8002788:	60fb      	str	r3, [r7, #12]
	pwmHandle -> Instance -> CCR1 = pwm_val;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	635a      	str	r2, [r3, #52]	; 0x34
	return pwm_val;
 8002792:	68fb      	ldr	r3, [r7, #12]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3714      	adds	r7, #20
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <MotorFollowControl>:

int MotorFollowControl(int* prev_error, int current_distance)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
	int new_duty_motor;
	int reference_distance = 300;
 80027aa:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80027ae:	613b      	str	r3, [r7, #16]
	int error = reference_distance-current_distance;
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	60fb      	str	r3, [r7, #12]
	int d_error = error - *prev_error;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	60bb      	str	r3, [r7, #8]
	new_duty_motor = -error/20 + d_error/100;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a11      	ldr	r2, [pc, #68]	; (800280c <MotorFollowControl+0x6c>)
 80027c6:	fb82 1203 	smull	r1, r2, r2, r3
 80027ca:	10d2      	asrs	r2, r2, #3
 80027cc:	17db      	asrs	r3, r3, #31
 80027ce:	1a9a      	subs	r2, r3, r2
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	490f      	ldr	r1, [pc, #60]	; (8002810 <MotorFollowControl+0x70>)
 80027d4:	fb81 0103 	smull	r0, r1, r1, r3
 80027d8:	1149      	asrs	r1, r1, #5
 80027da:	17db      	asrs	r3, r3, #31
 80027dc:	1acb      	subs	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
	*prev_error = error;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]
	if (new_duty_motor > 20)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b14      	cmp	r3, #20
 80027ec:	dd01      	ble.n	80027f2 <MotorFollowControl+0x52>
		new_duty_motor = 20;
 80027ee:	2314      	movs	r3, #20
 80027f0:	617b      	str	r3, [r7, #20]
	if (new_duty_motor < 2)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	dc01      	bgt.n	80027fc <MotorFollowControl+0x5c>
		new_duty_motor = 2;
 80027f8:	2302      	movs	r3, #2
 80027fa:	617b      	str	r3, [r7, #20]
	return new_duty_motor;
 80027fc:	697b      	ldr	r3, [r7, #20]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	66666667 	.word	0x66666667
 8002810:	51eb851f 	.word	0x51eb851f
 8002814:	00000000 	.word	0x00000000

08002818 <ServoPosition>:
#include "main.h"
#include <math.h>

void ServoPosition(TIM_HandleTypeDef* const pwmHandle, double    angle){
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	ed87 0b00 	vstr	d0, [r7]
    if(angle < 20){angle = 20;}
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <ServoPosition+0xb8>)
 800282a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800282e:	f7fe f975 	bl	8000b1c <__aeabi_dcmplt>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <ServoPosition+0x2a>
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <ServoPosition+0xb8>)
 800283e:	e9c7 2300 	strd	r2, r3, [r7]
    if(angle>175){angle = 175;}
 8002842:	a31f      	add	r3, pc, #124	; (adr r3, 80028c0 <ServoPosition+0xa8>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800284c:	f7fe f984 	bl	8000b58 <__aeabi_dcmpgt>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <ServoPosition+0x48>
 8002856:	a31a      	add	r3, pc, #104	; (adr r3, 80028c0 <ServoPosition+0xa8>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	e9c7 2300 	strd	r2, r3, [r7]
    //angle2CCR = ((angle/180+1)/20*60000);
    pwmHandle->Instance->CCR1 = (int)((angle/180+1)/20*60000);//angle2CCR;
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <ServoPosition+0xbc>)
 8002866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800286a:	f7fe f80f 	bl	800088c <__aeabi_ddiv>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <ServoPosition+0xc0>)
 800287c:	f7fd fd26 	bl	80002cc <__adddf3>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <ServoPosition+0xb8>)
 800288e:	f7fd fffd 	bl	800088c <__aeabi_ddiv>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4610      	mov	r0, r2
 8002898:	4619      	mov	r1, r3
 800289a:	a30b      	add	r3, pc, #44	; (adr r3, 80028c8 <ServoPosition+0xb0>)
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	f7fd feca 	bl	8000638 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7fe f974 	bl	8000b98 <__aeabi_d2iz>
 80028b0:	4602      	mov	r2, r0
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	00000000 	.word	0x00000000
 80028c4:	4065e000 	.word	0x4065e000
 80028c8:	00000000 	.word	0x00000000
 80028cc:	40ed4c00 	.word	0x40ed4c00
 80028d0:	40340000 	.word	0x40340000
 80028d4:	40668000 	.word	0x40668000
 80028d8:	3ff00000 	.word	0x3ff00000
 80028dc:	00000000 	.word	0x00000000

080028e0 <SteeringAngle>:


float SteeringAngle(float p, float delta, float kp, float kd){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	ed87 0a03 	vstr	s0, [r7, #12]
 80028ea:	edc7 0a02 	vstr	s1, [r7, #8]
 80028ee:	ed87 1a01 	vstr	s2, [r7, #4]
 80028f2:	edc7 1a00 	vstr	s3, [r7]
	float phi = atan(0.7826*tan(-kp*p-kd*delta));
 80028f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80028fa:	eeb1 7a67 	vneg.f32	s14, s15
 80028fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002906:	edd7 6a00 	vldr	s13, [r7]
 800290a:	edd7 7a02 	vldr	s15, [r7, #8]
 800290e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002916:	ee17 0a90 	vmov	r0, s15
 800291a:	f7fd fe35 	bl	8000588 <__aeabi_f2d>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	ec43 2b10 	vmov	d0, r2, r3
 8002926:	f00e fa7b 	bl	8010e20 <tan>
 800292a:	ec51 0b10 	vmov	r0, r1, d0
 800292e:	a31d      	add	r3, pc, #116	; (adr r3, 80029a4 <SteeringAngle+0xc4>)
 8002930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002934:	f7fd fe80 	bl	8000638 <__aeabi_dmul>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	ec43 2b17 	vmov	d7, r2, r3
 8002940:	eeb0 0a47 	vmov.f32	s0, s14
 8002944:	eef0 0a67 	vmov.f32	s1, s15
 8002948:	f00e f8be 	bl	8010ac8 <atan>
 800294c:	ec53 2b10 	vmov	r2, r3, d0
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f7fe f948 	bl	8000be8 <__aeabi_d2f>
 8002958:	4603      	mov	r3, r0
 800295a:	617b      	str	r3, [r7, #20]
	// Egyenesfutás miatt megváltoztatva
	float servoangle=90-phi*269.04;//88
 800295c:	6978      	ldr	r0, [r7, #20]
 800295e:	f7fd fe13 	bl	8000588 <__aeabi_f2d>
 8002962:	a312      	add	r3, pc, #72	; (adr r3, 80029ac <SteeringAngle+0xcc>)
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	f7fd fe66 	bl	8000638 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	f04f 0000 	mov.w	r0, #0
 8002974:	490a      	ldr	r1, [pc, #40]	; (80029a0 <SteeringAngle+0xc0>)
 8002976:	f7fd fca7 	bl	80002c8 <__aeabi_dsub>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	f7fe f931 	bl	8000be8 <__aeabi_d2f>
 8002986:	4603      	mov	r3, r0
 8002988:	613b      	str	r3, [r7, #16]
	return servoangle;
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	ee07 3a90 	vmov	s15, r3
}
 8002990:	eeb0 0a67 	vmov.f32	s0, s15
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	f3af 8000 	nop.w
 80029a0:	40568000 	.word	0x40568000
 80029a4:	27bb2fec 	.word	0x27bb2fec
 80029a8:	3fe90b0f 	.word	0x3fe90b0f
 80029ac:	d70a3d71 	.word	0xd70a3d71
 80029b0:	4070d0a3 	.word	0x4070d0a3

080029b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_MspInit+0x4c>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_MspInit+0x4c>)
 80029c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_MspInit+0x4c>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_MspInit+0x4c>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <HAL_MspInit+0x4c>)
 80029e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_MspInit+0x4c>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80029f2:	2007      	movs	r0, #7
 80029f4:	f001 f8a8 	bl	8003b48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f8:	bf00      	nop
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800

08002a04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a17      	ldr	r2, [pc, #92]	; (8002a80 <HAL_ADC_MspInit+0x7c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d127      	bne.n	8002a76 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <HAL_ADC_MspInit+0x80>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <HAL_ADC_MspInit+0x80>)
 8002a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a34:	6453      	str	r3, [r2, #68]	; 0x44
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <HAL_ADC_MspInit+0x80>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_ADC_MspInit+0x80>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <HAL_ADC_MspInit+0x80>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_ADC_MspInit+0x80>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IMotor_Pin|UBatt_Pin;
 8002a5e:	2312      	movs	r3, #18
 8002a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a62:	2303      	movs	r3, #3
 8002a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	; (8002a88 <HAL_ADC_MspInit+0x84>)
 8002a72:	f001 f8ab 	bl	8003bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a76:	bf00      	nop
 8002a78:	3728      	adds	r7, #40	; 0x28
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40012000 	.word	0x40012000
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40020000 	.word	0x40020000

08002a8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08e      	sub	sp, #56	; 0x38
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5c      	ldr	r2, [pc, #368]	; (8002c1c <HAL_I2C_MspInit+0x190>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d12d      	bne.n	8002b0a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
 8002ab2:	4b5b      	ldr	r3, [pc, #364]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a5a      	ldr	r2, [pc, #360]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b58      	ldr	r3, [pc, #352]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	623b      	str	r3, [r7, #32]
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002aca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad0:	2312      	movs	r3, #18
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002adc:	2304      	movs	r3, #4
 8002ade:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	484f      	ldr	r0, [pc, #316]	; (8002c24 <HAL_I2C_MspInit+0x198>)
 8002ae8:	f001 f870 	bl	8003bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002aec:	2300      	movs	r3, #0
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	4b4b      	ldr	r3, [pc, #300]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	4a4a      	ldr	r2, [pc, #296]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002af6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002afa:	6413      	str	r3, [r2, #64]	; 0x40
 8002afc:	4b48      	ldr	r3, [pc, #288]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b08:	e083      	b.n	8002c12 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a46      	ldr	r2, [pc, #280]	; (8002c28 <HAL_I2C_MspInit+0x19c>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d12d      	bne.n	8002b70 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b14:	2300      	movs	r3, #0
 8002b16:	61bb      	str	r3, [r7, #24]
 8002b18:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	4a40      	ldr	r2, [pc, #256]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002b1e:	f043 0302 	orr.w	r3, r3, #2
 8002b22:	6313      	str	r3, [r2, #48]	; 0x30
 8002b24:	4b3e      	ldr	r3, [pc, #248]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8002b30:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b36:	2312      	movs	r3, #18
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b42:	2304      	movs	r3, #4
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4835      	ldr	r0, [pc, #212]	; (8002c24 <HAL_I2C_MspInit+0x198>)
 8002b4e:	f001 f83d 	bl	8003bcc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	4b32      	ldr	r3, [pc, #200]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	4a31      	ldr	r2, [pc, #196]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002b5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	4b2f      	ldr	r3, [pc, #188]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	697b      	ldr	r3, [r7, #20]
}
 8002b6e:	e050      	b.n	8002c12 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a2d      	ldr	r2, [pc, #180]	; (8002c2c <HAL_I2C_MspInit+0x1a0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d14b      	bne.n	8002c12 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
 8002b7e:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	4a27      	ldr	r2, [pc, #156]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002b84:	f043 0304 	orr.w	r3, r3, #4
 8002b88:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8a:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	4a20      	ldr	r2, [pc, #128]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba6:	4b1e      	ldr	r3, [pc, #120]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bb8:	2312      	movs	r3, #18
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4818      	ldr	r0, [pc, #96]	; (8002c30 <HAL_I2C_MspInit+0x1a4>)
 8002bd0:	f000 fffc 	bl	8003bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bda:	2312      	movs	r3, #18
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be2:	2303      	movs	r3, #3
 8002be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002be6:	2304      	movs	r3, #4
 8002be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4810      	ldr	r0, [pc, #64]	; (8002c34 <HAL_I2C_MspInit+0x1a8>)
 8002bf2:	f000 ffeb 	bl	8003bcc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	4a08      	ldr	r2, [pc, #32]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002c00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c04:	6413      	str	r3, [r2, #64]	; 0x40
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_I2C_MspInit+0x194>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	68bb      	ldr	r3, [r7, #8]
}
 8002c12:	bf00      	nop
 8002c14:	3738      	adds	r7, #56	; 0x38
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40005400 	.word	0x40005400
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40005800 	.word	0x40005800
 8002c2c:	40005c00 	.word	0x40005c00
 8002c30:	40020800 	.word	0x40020800
 8002c34:	40020000 	.word	0x40020000

08002c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b090      	sub	sp, #64	; 0x40
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	60da      	str	r2, [r3, #12]
 8002c4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a72      	ldr	r2, [pc, #456]	; (8002e20 <HAL_SPI_MspInit+0x1e8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d14a      	bne.n	8002cf0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5e:	4b71      	ldr	r3, [pc, #452]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4a70      	ldr	r2, [pc, #448]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002c64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c68:	6453      	str	r3, [r2, #68]	; 0x44
 8002c6a:	4b6e      	ldr	r3, [pc, #440]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c74:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
 8002c7a:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	4a69      	ldr	r2, [pc, #420]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6313      	str	r3, [r2, #48]	; 0x30
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	623b      	str	r3, [r7, #32]
 8002c96:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	4a62      	ldr	r2, [pc, #392]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002c9c:	f043 0302 	orr.w	r3, r3, #2
 8002ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca2:	4b60      	ldr	r3, [pc, #384]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	623b      	str	r3, [r7, #32]
 8002cac:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002cae:	23a0      	movs	r3, #160	; 0xa0
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cbe:	2305      	movs	r3, #5
 8002cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4857      	ldr	r0, [pc, #348]	; (8002e28 <HAL_SPI_MspInit+0x1f0>)
 8002cca:	f000 ff7f 	bl	8003bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cce:	2310      	movs	r3, #16
 8002cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cde:	2305      	movs	r3, #5
 8002ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4850      	ldr	r0, [pc, #320]	; (8002e2c <HAL_SPI_MspInit+0x1f4>)
 8002cea:	f000 ff6f 	bl	8003bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002cee:	e092      	b.n	8002e16 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a4e      	ldr	r2, [pc, #312]	; (8002e30 <HAL_SPI_MspInit+0x1f8>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d15b      	bne.n	8002db2 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61fb      	str	r3, [r7, #28]
 8002cfe:	4b49      	ldr	r3, [pc, #292]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	4a48      	ldr	r2, [pc, #288]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0a:	4b46      	ldr	r3, [pc, #280]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	4b42      	ldr	r3, [pc, #264]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a41      	ldr	r2, [pc, #260]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002d20:	f043 0304 	orr.w	r3, r3, #4
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b3f      	ldr	r3, [pc, #252]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	4b3b      	ldr	r3, [pc, #236]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	4a3a      	ldr	r2, [pc, #232]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	6313      	str	r3, [r2, #48]	; 0x30
 8002d42:	4b38      	ldr	r3, [pc, #224]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002d5e:	2307      	movs	r3, #7
 8002d60:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d66:	4619      	mov	r1, r3
 8002d68:	4832      	ldr	r0, [pc, #200]	; (8002e34 <HAL_SPI_MspInit+0x1fc>)
 8002d6a:	f000 ff2f 	bl	8003bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d6e:	2304      	movs	r3, #4
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d7e:	2305      	movs	r3, #5
 8002d80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d86:	4619      	mov	r1, r3
 8002d88:	482a      	ldr	r0, [pc, #168]	; (8002e34 <HAL_SPI_MspInit+0x1fc>)
 8002d8a:	f000 ff1f 	bl	8003bcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002da0:	2305      	movs	r3, #5
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002da8:	4619      	mov	r1, r3
 8002daa:	4820      	ldr	r0, [pc, #128]	; (8002e2c <HAL_SPI_MspInit+0x1f4>)
 8002dac:	f000 ff0e 	bl	8003bcc <HAL_GPIO_Init>
}
 8002db0:	e031      	b.n	8002e16 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a20      	ldr	r2, [pc, #128]	; (8002e38 <HAL_SPI_MspInit+0x200>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d12c      	bne.n	8002e16 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	4b18      	ldr	r3, [pc, #96]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002dc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dca:	6413      	str	r3, [r2, #64]	; 0x40
 8002dcc:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	4a10      	ldr	r2, [pc, #64]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	6313      	str	r3, [r2, #48]	; 0x30
 8002de8:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <HAL_SPI_MspInit+0x1ec>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	f003 0304 	and.w	r3, r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002df4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e02:	2303      	movs	r3, #3
 8002e04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e06:	2306      	movs	r3, #6
 8002e08:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4808      	ldr	r0, [pc, #32]	; (8002e34 <HAL_SPI_MspInit+0x1fc>)
 8002e12:	f000 fedb 	bl	8003bcc <HAL_GPIO_Init>
}
 8002e16:	bf00      	nop
 8002e18:	3740      	adds	r7, #64	; 0x40
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40013000 	.word	0x40013000
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40003800 	.word	0x40003800
 8002e34:	40020800 	.word	0x40020800
 8002e38:	40003c00 	.word	0x40003c00

08002e3c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d134      	bne.n	8002ec8 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <HAL_TIM_IC_MspInit+0x94>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a1a      	ldr	r2, [pc, #104]	; (8002ed0 <HAL_TIM_IC_MspInit+0x94>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b18      	ldr	r3, [pc, #96]	; (8002ed0 <HAL_TIM_IC_MspInit+0x94>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	613b      	str	r3, [r7, #16]
 8002e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_TIM_IC_MspInit+0x94>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <HAL_TIM_IC_MspInit+0x94>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_TIM_IC_MspInit+0x94>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <HAL_TIM_IC_MspInit+0x98>)
 8002eb4:	f000 fe8a 	bl	8003bcc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2100      	movs	r1, #0
 8002ebc:	201c      	movs	r0, #28
 8002ebe:	f000 fe4e 	bl	8003b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ec2:	201c      	movs	r0, #28
 8002ec4:	f000 fe67 	bl	8003b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ec8:	bf00      	nop
 8002eca:	3728      	adds	r7, #40	; 0x28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	40020000 	.word	0x40020000

08002ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a48      	ldr	r2, [pc, #288]	; (8003008 <HAL_TIM_Base_MspInit+0x130>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d10e      	bne.n	8002f08 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a46      	ldr	r2, [pc, #280]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b44      	ldr	r3, [pc, #272]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	61fb      	str	r3, [r7, #28]
 8002f04:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002f06:	e07a      	b.n	8002ffe <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a40      	ldr	r2, [pc, #256]	; (8003010 <HAL_TIM_Base_MspInit+0x138>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d10e      	bne.n	8002f30 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	4b3d      	ldr	r3, [pc, #244]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4a3c      	ldr	r2, [pc, #240]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002f1c:	f043 0304 	orr.w	r3, r3, #4
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	4b3a      	ldr	r3, [pc, #232]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f003 0304 	and.w	r3, r3, #4
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	69bb      	ldr	r3, [r7, #24]
}
 8002f2e:	e066      	b.n	8002ffe <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a37      	ldr	r2, [pc, #220]	; (8003014 <HAL_TIM_Base_MspInit+0x13c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d116      	bne.n	8002f68 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	4a32      	ldr	r2, [pc, #200]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002f44:	f043 0308 	orr.w	r3, r3, #8
 8002f48:	6413      	str	r3, [r2, #64]	; 0x40
 8002f4a:	4b30      	ldr	r3, [pc, #192]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f003 0308 	and.w	r3, r3, #8
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2100      	movs	r1, #0
 8002f5a:	2032      	movs	r0, #50	; 0x32
 8002f5c:	f000 fdff 	bl	8003b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002f60:	2032      	movs	r0, #50	; 0x32
 8002f62:	f000 fe18 	bl	8003b96 <HAL_NVIC_EnableIRQ>
}
 8002f66:	e04a      	b.n	8002ffe <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM7)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a2a      	ldr	r2, [pc, #168]	; (8003018 <HAL_TIM_Base_MspInit+0x140>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d116      	bne.n	8002fa0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	4b25      	ldr	r3, [pc, #148]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a24      	ldr	r2, [pc, #144]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002f7c:	f043 0320 	orr.w	r3, r3, #32
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
 8002f82:	4b22      	ldr	r3, [pc, #136]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2100      	movs	r1, #0
 8002f92:	2037      	movs	r0, #55	; 0x37
 8002f94:	f000 fde3 	bl	8003b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002f98:	2037      	movs	r0, #55	; 0x37
 8002f9a:	f000 fdfc 	bl	8003b96 <HAL_NVIC_EnableIRQ>
}
 8002f9e:	e02e      	b.n	8002ffe <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM10)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1d      	ldr	r2, [pc, #116]	; (800301c <HAL_TIM_Base_MspInit+0x144>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d116      	bne.n	8002fd8 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	4a16      	ldr	r2, [pc, #88]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fba:	4b14      	ldr	r3, [pc, #80]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	2019      	movs	r0, #25
 8002fcc:	f000 fdc7 	bl	8003b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002fd0:	2019      	movs	r0, #25
 8002fd2:	f000 fde0 	bl	8003b96 <HAL_NVIC_EnableIRQ>
}
 8002fd6:	e012      	b.n	8002ffe <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM13)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a10      	ldr	r2, [pc, #64]	; (8003020 <HAL_TIM_Base_MspInit+0x148>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d10d      	bne.n	8002ffe <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_TIM_Base_MspInit+0x134>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffa:	60bb      	str	r3, [r7, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
}
 8002ffe:	bf00      	nop
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40000400 	.word	0x40000400
 800300c:	40023800 	.word	0x40023800
 8003010:	40000800 	.word	0x40000800
 8003014:	40000c00 	.word	0x40000c00
 8003018:	40001400 	.word	0x40001400
 800301c:	40014400 	.word	0x40014400
 8003020:	40001c00 	.word	0x40001c00

08003024 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08c      	sub	sp, #48	; 0x30
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800302c:	f107 031c 	add.w	r3, r7, #28
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	60da      	str	r2, [r3, #12]
 800303a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a48      	ldr	r2, [pc, #288]	; (8003164 <HAL_TIM_MspPostInit+0x140>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d11e      	bne.n	8003084 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	61bb      	str	r3, [r7, #24]
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_TIM_MspPostInit+0x144>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a46      	ldr	r2, [pc, #280]	; (8003168 <HAL_TIM_MspPostInit+0x144>)
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b44      	ldr	r3, [pc, #272]	; (8003168 <HAL_TIM_MspPostInit+0x144>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	61bb      	str	r3, [r7, #24]
 8003060:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_PMW1_Pin;
 8003062:	2320      	movs	r3, #32
 8003064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003072:	2302      	movs	r3, #2
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PMW1_GPIO_Port, &GPIO_InitStruct);
 8003076:	f107 031c 	add.w	r3, r7, #28
 800307a:	4619      	mov	r1, r3
 800307c:	483b      	ldr	r0, [pc, #236]	; (800316c <HAL_TIM_MspPostInit+0x148>)
 800307e:	f000 fda5 	bl	8003bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8003082:	e06a      	b.n	800315a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a39      	ldr	r2, [pc, #228]	; (8003170 <HAL_TIM_MspPostInit+0x14c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d11e      	bne.n	80030cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	4b35      	ldr	r3, [pc, #212]	; (8003168 <HAL_TIM_MspPostInit+0x144>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003096:	4a34      	ldr	r2, [pc, #208]	; (8003168 <HAL_TIM_MspPostInit+0x144>)
 8003098:	f043 0302 	orr.w	r3, r3, #2
 800309c:	6313      	str	r3, [r2, #48]	; 0x30
 800309e:	4b32      	ldr	r3, [pc, #200]	; (8003168 <HAL_TIM_MspPostInit+0x144>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	617b      	str	r3, [r7, #20]
 80030a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DRV_PWM2_Pin;
 80030aa:	2340      	movs	r3, #64	; 0x40
 80030ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b6:	2300      	movs	r3, #0
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030ba:	2302      	movs	r3, #2
 80030bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PWM2_GPIO_Port, &GPIO_InitStruct);
 80030be:	f107 031c 	add.w	r3, r7, #28
 80030c2:	4619      	mov	r1, r3
 80030c4:	4829      	ldr	r0, [pc, #164]	; (800316c <HAL_TIM_MspPostInit+0x148>)
 80030c6:	f000 fd81 	bl	8003bcc <HAL_GPIO_Init>
}
 80030ca:	e046      	b.n	800315a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a28      	ldr	r2, [pc, #160]	; (8003174 <HAL_TIM_MspPostInit+0x150>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d11e      	bne.n	8003114 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	4b23      	ldr	r3, [pc, #140]	; (8003168 <HAL_TIM_MspPostInit+0x144>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4a22      	ldr	r2, [pc, #136]	; (8003168 <HAL_TIM_MspPostInit+0x144>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6313      	str	r3, [r2, #48]	; 0x30
 80030e6:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_TIM_MspPostInit+0x144>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM2_Pin;
 80030f2:	2301      	movs	r3, #1
 80030f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f6:	2302      	movs	r3, #2
 80030f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	2300      	movs	r3, #0
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003102:	2302      	movs	r3, #2
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM2_GPIO_Port, &GPIO_InitStruct);
 8003106:	f107 031c 	add.w	r3, r7, #28
 800310a:	4619      	mov	r1, r3
 800310c:	481a      	ldr	r0, [pc, #104]	; (8003178 <HAL_TIM_MspPostInit+0x154>)
 800310e:	f000 fd5d 	bl	8003bcc <HAL_GPIO_Init>
}
 8003112:	e022      	b.n	800315a <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM13)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a18      	ldr	r2, [pc, #96]	; (800317c <HAL_TIM_MspPostInit+0x158>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d11d      	bne.n	800315a <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_TIM_MspPostInit+0x144>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <HAL_TIM_MspPostInit+0x144>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <HAL_TIM_MspPostInit+0x144>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM_Pin;
 800313a:	2340      	movs	r3, #64	; 0x40
 800313c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313e:	2302      	movs	r3, #2
 8003140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003142:	2300      	movs	r3, #0
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003146:	2300      	movs	r3, #0
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800314a:	2309      	movs	r3, #9
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_GPIO_Port, &GPIO_InitStruct);
 800314e:	f107 031c 	add.w	r3, r7, #28
 8003152:	4619      	mov	r1, r3
 8003154:	4808      	ldr	r0, [pc, #32]	; (8003178 <HAL_TIM_MspPostInit+0x154>)
 8003156:	f000 fd39 	bl	8003bcc <HAL_GPIO_Init>
}
 800315a:	bf00      	nop
 800315c:	3730      	adds	r7, #48	; 0x30
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40000400 	.word	0x40000400
 8003168:	40023800 	.word	0x40023800
 800316c:	40020400 	.word	0x40020400
 8003170:	40000800 	.word	0x40000800
 8003174:	40000c00 	.word	0x40000c00
 8003178:	40020000 	.word	0x40020000
 800317c:	40001c00 	.word	0x40001c00

08003180 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08c      	sub	sp, #48	; 0x30
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 031c 	add.w	r3, r7, #28
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a32      	ldr	r2, [pc, #200]	; (8003268 <HAL_UART_MspInit+0xe8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d12c      	bne.n	80031fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031a2:	2300      	movs	r3, #0
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_UART_MspInit+0xec>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	4a30      	ldr	r2, [pc, #192]	; (800326c <HAL_UART_MspInit+0xec>)
 80031ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b0:	6413      	str	r3, [r2, #64]	; 0x40
 80031b2:	4b2e      	ldr	r3, [pc, #184]	; (800326c <HAL_UART_MspInit+0xec>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ba:	61bb      	str	r3, [r7, #24]
 80031bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	4b2a      	ldr	r3, [pc, #168]	; (800326c <HAL_UART_MspInit+0xec>)
 80031c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c6:	4a29      	ldr	r2, [pc, #164]	; (800326c <HAL_UART_MspInit+0xec>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6313      	str	r3, [r2, #48]	; 0x30
 80031ce:	4b27      	ldr	r3, [pc, #156]	; (800326c <HAL_UART_MspInit+0xec>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031da:	230c      	movs	r3, #12
 80031dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031de:	2302      	movs	r3, #2
 80031e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e6:	2303      	movs	r3, #3
 80031e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031ea:	2307      	movs	r3, #7
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ee:	f107 031c 	add.w	r3, r7, #28
 80031f2:	4619      	mov	r1, r3
 80031f4:	481e      	ldr	r0, [pc, #120]	; (8003270 <HAL_UART_MspInit+0xf0>)
 80031f6:	f000 fce9 	bl	8003bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80031fa:	e030      	b.n	800325e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <HAL_UART_MspInit+0xf4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d12b      	bne.n	800325e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	4b18      	ldr	r3, [pc, #96]	; (800326c <HAL_UART_MspInit+0xec>)
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	4a17      	ldr	r2, [pc, #92]	; (800326c <HAL_UART_MspInit+0xec>)
 8003210:	f043 0320 	orr.w	r3, r3, #32
 8003214:	6453      	str	r3, [r2, #68]	; 0x44
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <HAL_UART_MspInit+0xec>)
 8003218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_UART_MspInit+0xec>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	4a10      	ldr	r2, [pc, #64]	; (800326c <HAL_UART_MspInit+0xec>)
 800322c:	f043 0304 	orr.w	r3, r3, #4
 8003230:	6313      	str	r3, [r2, #48]	; 0x30
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <HAL_UART_MspInit+0xec>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|RADIO_RX_Pin;
 800323e:	23c0      	movs	r3, #192	; 0xc0
 8003240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324a:	2303      	movs	r3, #3
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800324e:	2308      	movs	r3, #8
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003252:	f107 031c 	add.w	r3, r7, #28
 8003256:	4619      	mov	r1, r3
 8003258:	4807      	ldr	r0, [pc, #28]	; (8003278 <HAL_UART_MspInit+0xf8>)
 800325a:	f000 fcb7 	bl	8003bcc <HAL_GPIO_Init>
}
 800325e:	bf00      	nop
 8003260:	3730      	adds	r7, #48	; 0x30
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40004400 	.word	0x40004400
 800326c:	40023800 	.word	0x40023800
 8003270:	40020000 	.word	0x40020000
 8003274:	40011400 	.word	0x40011400
 8003278:	40020800 	.word	0x40020800

0800327c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003280:	e7fe      	b.n	8003280 <NMI_Handler+0x4>

08003282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003286:	e7fe      	b.n	8003286 <HardFault_Handler+0x4>

08003288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800328c:	e7fe      	b.n	800328c <MemManage_Handler+0x4>

0800328e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003292:	e7fe      	b.n	8003292 <BusFault_Handler+0x4>

08003294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003298:	e7fe      	b.n	8003298 <UsageFault_Handler+0x4>

0800329a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032b6:	b480      	push	{r7}
 80032b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ba:	bf00      	nop
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c8:	f000 f8b8 	bl	800343c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80032d4:	4802      	ldr	r0, [pc, #8]	; (80032e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80032d6:	f003 fc8b 	bl	8006bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	200005e0 	.word	0x200005e0

080032e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032e8:	4802      	ldr	r0, [pc, #8]	; (80032f4 <TIM2_IRQHandler+0x10>)
 80032ea:	f003 fc81 	bl	8006bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032ee:	bf00      	nop
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000478 	.word	0x20000478

080032f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80032fc:	4802      	ldr	r0, [pc, #8]	; (8003308 <TIM5_IRQHandler+0x10>)
 80032fe:	f003 fc77 	bl	8006bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000550 	.word	0x20000550

0800330c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003310:	4802      	ldr	r0, [pc, #8]	; (800331c <TIM7_IRQHandler+0x10>)
 8003312:	f003 fc6d 	bl	8006bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003316:	bf00      	nop
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	20000598 	.word	0x20000598

08003320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003324:	4b06      	ldr	r3, [pc, #24]	; (8003340 <SystemInit+0x20>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <SystemInit+0x20>)
 800332c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003330:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003334:	bf00      	nop
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800337c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003348:	480d      	ldr	r0, [pc, #52]	; (8003380 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800334a:	490e      	ldr	r1, [pc, #56]	; (8003384 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800334c:	4a0e      	ldr	r2, [pc, #56]	; (8003388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800334e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003350:	e002      	b.n	8003358 <LoopCopyDataInit>

08003352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003356:	3304      	adds	r3, #4

08003358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800335a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800335c:	d3f9      	bcc.n	8003352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800335e:	4a0b      	ldr	r2, [pc, #44]	; (800338c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003360:	4c0b      	ldr	r4, [pc, #44]	; (8003390 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003364:	e001      	b.n	800336a <LoopFillZerobss>

08003366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003368:	3204      	adds	r2, #4

0800336a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800336a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800336c:	d3fb      	bcc.n	8003366 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800336e:	f7ff ffd7 	bl	8003320 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003372:	f00a fc87 	bl	800dc84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003376:	f7fe f9b5 	bl	80016e4 <main>
  bx  lr    
 800337a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800337c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003384:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8003388:	080126b0 	.word	0x080126b0
  ldr r2, =_sbss
 800338c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8003390:	20000cc8 	.word	0x20000cc8

08003394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003394:	e7fe      	b.n	8003394 <ADC_IRQHandler>
	...

08003398 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_Init+0x40>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a0d      	ldr	r2, [pc, #52]	; (80033d8 <HAL_Init+0x40>)
 80033a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033a8:	4b0b      	ldr	r3, [pc, #44]	; (80033d8 <HAL_Init+0x40>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0a      	ldr	r2, [pc, #40]	; (80033d8 <HAL_Init+0x40>)
 80033ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <HAL_Init+0x40>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a07      	ldr	r2, [pc, #28]	; (80033d8 <HAL_Init+0x40>)
 80033ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033c0:	2003      	movs	r0, #3
 80033c2:	f000 fbc1 	bl	8003b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f000 f808 	bl	80033dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033cc:	f7ff faf2 	bl	80029b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40023c00 	.word	0x40023c00

080033dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80033e4:	4b12      	ldr	r3, [pc, #72]	; (8003430 <HAL_InitTick+0x54>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_InitTick+0x58>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	4619      	mov	r1, r3
 80033ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fbd9 	bl	8003bb2 <HAL_SYSTICK_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e00e      	b.n	8003428 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b0f      	cmp	r3, #15
 800340e:	d80a      	bhi.n	8003426 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003410:	2200      	movs	r2, #0
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	f000 fba1 	bl	8003b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800341c:	4a06      	ldr	r2, [pc, #24]	; (8003438 <HAL_InitTick+0x5c>)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e000      	b.n	8003428 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
}
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000004 	.word	0x20000004
 8003434:	2000000c 	.word	0x2000000c
 8003438:	20000008 	.word	0x20000008

0800343c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_IncTick+0x20>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_IncTick+0x24>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4413      	add	r3, r2
 800344c:	4a04      	ldr	r2, [pc, #16]	; (8003460 <HAL_IncTick+0x24>)
 800344e:	6013      	str	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	2000000c 	.word	0x2000000c
 8003460:	20000bb0 	.word	0x20000bb0

08003464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  return uwTick;
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <HAL_GetTick+0x14>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	20000bb0 	.word	0x20000bb0

0800347c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003484:	f7ff ffee 	bl	8003464 <HAL_GetTick>
 8003488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003494:	d005      	beq.n	80034a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <HAL_Delay+0x44>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034a2:	bf00      	nop
 80034a4:	f7ff ffde 	bl	8003464 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d8f7      	bhi.n	80034a4 <HAL_Delay+0x28>
  {
  }
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	2000000c 	.word	0x2000000c

080034c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e033      	b.n	8003542 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff fa8e 	bl	8002a04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d118      	bne.n	8003534 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800350a:	f023 0302 	bic.w	r3, r3, #2
 800350e:	f043 0202 	orr.w	r2, r3, #2
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f94a 	bl	80037b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f023 0303 	bic.w	r3, r3, #3
 800352a:	f043 0201 	orr.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
 8003532:	e001      	b.n	8003538 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x1c>
 8003564:	2302      	movs	r3, #2
 8003566:	e113      	b.n	8003790 <HAL_ADC_ConfigChannel+0x244>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b09      	cmp	r3, #9
 8003576:	d925      	bls.n	80035c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68d9      	ldr	r1, [r3, #12]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	461a      	mov	r2, r3
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	3b1e      	subs	r3, #30
 800358e:	2207      	movs	r2, #7
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43da      	mvns	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	400a      	ands	r2, r1
 800359c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68d9      	ldr	r1, [r3, #12]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	4618      	mov	r0, r3
 80035b0:	4603      	mov	r3, r0
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	4403      	add	r3, r0
 80035b6:	3b1e      	subs	r3, #30
 80035b8:	409a      	lsls	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	e022      	b.n	800360a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6919      	ldr	r1, [r3, #16]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	2207      	movs	r2, #7
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	43da      	mvns	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	400a      	ands	r2, r1
 80035e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6919      	ldr	r1, [r3, #16]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	4618      	mov	r0, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	4403      	add	r3, r0
 8003600:	409a      	lsls	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b06      	cmp	r3, #6
 8003610:	d824      	bhi.n	800365c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	3b05      	subs	r3, #5
 8003624:	221f      	movs	r2, #31
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43da      	mvns	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	400a      	ands	r2, r1
 8003632:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	4618      	mov	r0, r3
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	3b05      	subs	r3, #5
 800364e:	fa00 f203 	lsl.w	r2, r0, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	635a      	str	r2, [r3, #52]	; 0x34
 800365a:	e04c      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b0c      	cmp	r3, #12
 8003662:	d824      	bhi.n	80036ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	3b23      	subs	r3, #35	; 0x23
 8003676:	221f      	movs	r2, #31
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43da      	mvns	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	400a      	ands	r2, r1
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	b29b      	uxth	r3, r3
 8003692:	4618      	mov	r0, r3
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	4613      	mov	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4413      	add	r3, r2
 800369e:	3b23      	subs	r3, #35	; 0x23
 80036a0:	fa00 f203 	lsl.w	r2, r0, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	631a      	str	r2, [r3, #48]	; 0x30
 80036ac:	e023      	b.n	80036f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	3b41      	subs	r3, #65	; 0x41
 80036c0:	221f      	movs	r2, #31
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	43da      	mvns	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	400a      	ands	r2, r1
 80036ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	b29b      	uxth	r3, r3
 80036dc:	4618      	mov	r0, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	3b41      	subs	r3, #65	; 0x41
 80036ea:	fa00 f203 	lsl.w	r2, r0, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036f6:	4b29      	ldr	r3, [pc, #164]	; (800379c <HAL_ADC_ConfigChannel+0x250>)
 80036f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a28      	ldr	r2, [pc, #160]	; (80037a0 <HAL_ADC_ConfigChannel+0x254>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d10f      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x1d8>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b12      	cmp	r3, #18
 800370a:	d10b      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <HAL_ADC_ConfigChannel+0x254>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d12b      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x23a>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1c      	ldr	r2, [pc, #112]	; (80037a4 <HAL_ADC_ConfigChannel+0x258>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d003      	beq.n	8003740 <HAL_ADC_ConfigChannel+0x1f4>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b11      	cmp	r3, #17
 800373e:	d122      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <HAL_ADC_ConfigChannel+0x258>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d111      	bne.n	8003786 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003762:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_ADC_ConfigChannel+0x25c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <HAL_ADC_ConfigChannel+0x260>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	0c9a      	lsrs	r2, r3, #18
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003778:	e002      	b.n	8003780 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	3b01      	subs	r3, #1
 800377e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f9      	bne.n	800377a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	40012300 	.word	0x40012300
 80037a0:	40012000 	.word	0x40012000
 80037a4:	10000012 	.word	0x10000012
 80037a8:	20000004 	.word	0x20000004
 80037ac:	431bde83 	.word	0x431bde83

080037b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037b8:	4b79      	ldr	r3, [pc, #484]	; (80039a0 <ADC_Init+0x1f0>)
 80037ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	431a      	orrs	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	021a      	lsls	r2, r3, #8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6859      	ldr	r1, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800382a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6899      	ldr	r1, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003842:	4a58      	ldr	r2, [pc, #352]	; (80039a4 <ADC_Init+0x1f4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d022      	beq.n	800388e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003856:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6899      	ldr	r1, [r3, #8]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003878:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6899      	ldr	r1, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	e00f      	b.n	80038ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800389c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0202 	bic.w	r2, r2, #2
 80038bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6899      	ldr	r1, [r3, #8]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	7e1b      	ldrb	r3, [r3, #24]
 80038c8:	005a      	lsls	r2, r3, #1
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01b      	beq.n	8003914 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6859      	ldr	r1, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	3b01      	subs	r3, #1
 8003908:	035a      	lsls	r2, r3, #13
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	e007      	b.n	8003924 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003922:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	3b01      	subs	r3, #1
 8003940:	051a      	lsls	r2, r3, #20
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003958:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6899      	ldr	r1, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003966:	025a      	lsls	r2, r3, #9
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800397e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6899      	ldr	r1, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	029a      	lsls	r2, r3, #10
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	609a      	str	r2, [r3, #8]
}
 8003994:	bf00      	nop
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40012300 	.word	0x40012300
 80039a4:	0f000001 	.word	0x0f000001

080039a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039b8:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039c4:	4013      	ands	r3, r2
 80039c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039da:	4a04      	ldr	r2, [pc, #16]	; (80039ec <__NVIC_SetPriorityGrouping+0x44>)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	60d3      	str	r3, [r2, #12]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	e000ed00 	.word	0xe000ed00

080039f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039f4:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <__NVIC_GetPriorityGrouping+0x18>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	f003 0307 	and.w	r3, r3, #7
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	db0b      	blt.n	8003a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a1e:	79fb      	ldrb	r3, [r7, #7]
 8003a20:	f003 021f 	and.w	r2, r3, #31
 8003a24:	4907      	ldr	r1, [pc, #28]	; (8003a44 <__NVIC_EnableIRQ+0x38>)
 8003a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2001      	movs	r0, #1
 8003a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000e100 	.word	0xe000e100

08003a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	6039      	str	r1, [r7, #0]
 8003a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	db0a      	blt.n	8003a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	490c      	ldr	r1, [pc, #48]	; (8003a94 <__NVIC_SetPriority+0x4c>)
 8003a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a66:	0112      	lsls	r2, r2, #4
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a70:	e00a      	b.n	8003a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	4908      	ldr	r1, [pc, #32]	; (8003a98 <__NVIC_SetPriority+0x50>)
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	3b04      	subs	r3, #4
 8003a80:	0112      	lsls	r2, r2, #4
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	440b      	add	r3, r1
 8003a86:	761a      	strb	r2, [r3, #24]
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000e100 	.word	0xe000e100
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b089      	sub	sp, #36	; 0x24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f1c3 0307 	rsb	r3, r3, #7
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	bf28      	it	cs
 8003aba:	2304      	movcs	r3, #4
 8003abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	2b06      	cmp	r3, #6
 8003ac4:	d902      	bls.n	8003acc <NVIC_EncodePriority+0x30>
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	3b03      	subs	r3, #3
 8003aca:	e000      	b.n	8003ace <NVIC_EncodePriority+0x32>
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	43da      	mvns	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	401a      	ands	r2, r3
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	fa01 f303 	lsl.w	r3, r1, r3
 8003aee:	43d9      	mvns	r1, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	4313      	orrs	r3, r2
         );
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3724      	adds	r7, #36	; 0x24
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b14:	d301      	bcc.n	8003b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b16:	2301      	movs	r3, #1
 8003b18:	e00f      	b.n	8003b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b1a:	4a0a      	ldr	r2, [pc, #40]	; (8003b44 <SysTick_Config+0x40>)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b22:	210f      	movs	r1, #15
 8003b24:	f04f 30ff 	mov.w	r0, #4294967295
 8003b28:	f7ff ff8e 	bl	8003a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <SysTick_Config+0x40>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b32:	4b04      	ldr	r3, [pc, #16]	; (8003b44 <SysTick_Config+0x40>)
 8003b34:	2207      	movs	r2, #7
 8003b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	e000e010 	.word	0xe000e010

08003b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff29 	bl	80039a8 <__NVIC_SetPriorityGrouping>
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b086      	sub	sp, #24
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
 8003b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b70:	f7ff ff3e 	bl	80039f0 <__NVIC_GetPriorityGrouping>
 8003b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	6978      	ldr	r0, [r7, #20]
 8003b7c:	f7ff ff8e 	bl	8003a9c <NVIC_EncodePriority>
 8003b80:	4602      	mov	r2, r0
 8003b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff5d 	bl	8003a48 <__NVIC_SetPriority>
}
 8003b8e:	bf00      	nop
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7ff ff31 	bl	8003a0c <__NVIC_EnableIRQ>
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff ffa2 	bl	8003b04 <SysTick_Config>
 8003bc0:	4603      	mov	r3, r0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	e165      	b.n	8003eb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003be8:	2201      	movs	r2, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	f040 8154 	bne.w	8003eae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d005      	beq.n	8003c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d130      	bne.n	8003c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	2203      	movs	r2, #3
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c54:	2201      	movs	r2, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 0201 	and.w	r2, r3, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d017      	beq.n	8003cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d123      	bne.n	8003d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	08da      	lsrs	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3208      	adds	r2, #8
 8003cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	220f      	movs	r2, #15
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	08da      	lsrs	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3208      	adds	r2, #8
 8003d0a:	69b9      	ldr	r1, [r7, #24]
 8003d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0203 	and.w	r2, r3, #3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80ae 	beq.w	8003eae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	4b5d      	ldr	r3, [pc, #372]	; (8003ecc <HAL_GPIO_Init+0x300>)
 8003d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5a:	4a5c      	ldr	r2, [pc, #368]	; (8003ecc <HAL_GPIO_Init+0x300>)
 8003d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d60:	6453      	str	r3, [r2, #68]	; 0x44
 8003d62:	4b5a      	ldr	r3, [pc, #360]	; (8003ecc <HAL_GPIO_Init+0x300>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6a:	60fb      	str	r3, [r7, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d6e:	4a58      	ldr	r2, [pc, #352]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	089b      	lsrs	r3, r3, #2
 8003d74:	3302      	adds	r3, #2
 8003d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	220f      	movs	r2, #15
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a4f      	ldr	r2, [pc, #316]	; (8003ed4 <HAL_GPIO_Init+0x308>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d025      	beq.n	8003de6 <HAL_GPIO_Init+0x21a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a4e      	ldr	r2, [pc, #312]	; (8003ed8 <HAL_GPIO_Init+0x30c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d01f      	beq.n	8003de2 <HAL_GPIO_Init+0x216>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a4d      	ldr	r2, [pc, #308]	; (8003edc <HAL_GPIO_Init+0x310>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d019      	beq.n	8003dde <HAL_GPIO_Init+0x212>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a4c      	ldr	r2, [pc, #304]	; (8003ee0 <HAL_GPIO_Init+0x314>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d013      	beq.n	8003dda <HAL_GPIO_Init+0x20e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a4b      	ldr	r2, [pc, #300]	; (8003ee4 <HAL_GPIO_Init+0x318>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00d      	beq.n	8003dd6 <HAL_GPIO_Init+0x20a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a4a      	ldr	r2, [pc, #296]	; (8003ee8 <HAL_GPIO_Init+0x31c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d007      	beq.n	8003dd2 <HAL_GPIO_Init+0x206>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a49      	ldr	r2, [pc, #292]	; (8003eec <HAL_GPIO_Init+0x320>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d101      	bne.n	8003dce <HAL_GPIO_Init+0x202>
 8003dca:	2306      	movs	r3, #6
 8003dcc:	e00c      	b.n	8003de8 <HAL_GPIO_Init+0x21c>
 8003dce:	2307      	movs	r3, #7
 8003dd0:	e00a      	b.n	8003de8 <HAL_GPIO_Init+0x21c>
 8003dd2:	2305      	movs	r3, #5
 8003dd4:	e008      	b.n	8003de8 <HAL_GPIO_Init+0x21c>
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	e006      	b.n	8003de8 <HAL_GPIO_Init+0x21c>
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e004      	b.n	8003de8 <HAL_GPIO_Init+0x21c>
 8003dde:	2302      	movs	r3, #2
 8003de0:	e002      	b.n	8003de8 <HAL_GPIO_Init+0x21c>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <HAL_GPIO_Init+0x21c>
 8003de6:	2300      	movs	r3, #0
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	f002 0203 	and.w	r2, r2, #3
 8003dee:	0092      	lsls	r2, r2, #2
 8003df0:	4093      	lsls	r3, r2
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003df8:	4935      	ldr	r1, [pc, #212]	; (8003ed0 <HAL_GPIO_Init+0x304>)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	3302      	adds	r3, #2
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e06:	4b3a      	ldr	r3, [pc, #232]	; (8003ef0 <HAL_GPIO_Init+0x324>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e2a:	4a31      	ldr	r2, [pc, #196]	; (8003ef0 <HAL_GPIO_Init+0x324>)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e30:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <HAL_GPIO_Init+0x324>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e54:	4a26      	ldr	r2, [pc, #152]	; (8003ef0 <HAL_GPIO_Init+0x324>)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e5a:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <HAL_GPIO_Init+0x324>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e7e:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <HAL_GPIO_Init+0x324>)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e84:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <HAL_GPIO_Init+0x324>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ea8:	4a11      	ldr	r2, [pc, #68]	; (8003ef0 <HAL_GPIO_Init+0x324>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	61fb      	str	r3, [r7, #28]
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b0f      	cmp	r3, #15
 8003eb8:	f67f ae96 	bls.w	8003be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	3724      	adds	r7, #36	; 0x24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40013800 	.word	0x40013800
 8003ed4:	40020000 	.word	0x40020000
 8003ed8:	40020400 	.word	0x40020400
 8003edc:	40020800 	.word	0x40020800
 8003ee0:	40020c00 	.word	0x40020c00
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40021400 	.word	0x40021400
 8003eec:	40021800 	.word	0x40021800
 8003ef0:	40013c00 	.word	0x40013c00

08003ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	807b      	strh	r3, [r7, #2]
 8003f00:	4613      	mov	r3, r2
 8003f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f04:	787b      	ldrb	r3, [r7, #1]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f0a:	887a      	ldrh	r2, [r7, #2]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f10:	e003      	b.n	8003f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f12:	887b      	ldrh	r3, [r7, #2]
 8003f14:	041a      	lsls	r2, r3, #16
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	619a      	str	r2, [r3, #24]
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e12b      	b.n	8004192 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fe fd9c 	bl	8002a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2224      	movs	r2, #36	; 0x24
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f001 f8a4 	bl	80050d8 <HAL_RCC_GetPCLK1Freq>
 8003f90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4a81      	ldr	r2, [pc, #516]	; (800419c <HAL_I2C_Init+0x274>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d807      	bhi.n	8003fac <HAL_I2C_Init+0x84>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a80      	ldr	r2, [pc, #512]	; (80041a0 <HAL_I2C_Init+0x278>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	bf94      	ite	ls
 8003fa4:	2301      	movls	r3, #1
 8003fa6:	2300      	movhi	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	e006      	b.n	8003fba <HAL_I2C_Init+0x92>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a7d      	ldr	r2, [pc, #500]	; (80041a4 <HAL_I2C_Init+0x27c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	bf94      	ite	ls
 8003fb4:	2301      	movls	r3, #1
 8003fb6:	2300      	movhi	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e0e7      	b.n	8004192 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4a78      	ldr	r2, [pc, #480]	; (80041a8 <HAL_I2C_Init+0x280>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	0c9b      	lsrs	r3, r3, #18
 8003fcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	4a6a      	ldr	r2, [pc, #424]	; (800419c <HAL_I2C_Init+0x274>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d802      	bhi.n	8003ffc <HAL_I2C_Init+0xd4>
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	e009      	b.n	8004010 <HAL_I2C_Init+0xe8>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	4a69      	ldr	r2, [pc, #420]	; (80041ac <HAL_I2C_Init+0x284>)
 8004008:	fba2 2303 	umull	r2, r3, r2, r3
 800400c:	099b      	lsrs	r3, r3, #6
 800400e:	3301      	adds	r3, #1
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	430b      	orrs	r3, r1
 8004016:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004022:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	495c      	ldr	r1, [pc, #368]	; (800419c <HAL_I2C_Init+0x274>)
 800402c:	428b      	cmp	r3, r1
 800402e:	d819      	bhi.n	8004064 <HAL_I2C_Init+0x13c>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1e59      	subs	r1, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	fbb1 f3f3 	udiv	r3, r1, r3
 800403e:	1c59      	adds	r1, r3, #1
 8004040:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004044:	400b      	ands	r3, r1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_I2C_Init+0x138>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1e59      	subs	r1, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	fbb1 f3f3 	udiv	r3, r1, r3
 8004058:	3301      	adds	r3, #1
 800405a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800405e:	e051      	b.n	8004104 <HAL_I2C_Init+0x1dc>
 8004060:	2304      	movs	r3, #4
 8004062:	e04f      	b.n	8004104 <HAL_I2C_Init+0x1dc>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d111      	bne.n	8004090 <HAL_I2C_Init+0x168>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	1e58      	subs	r0, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6859      	ldr	r1, [r3, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	440b      	add	r3, r1
 800407a:	fbb0 f3f3 	udiv	r3, r0, r3
 800407e:	3301      	adds	r3, #1
 8004080:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004084:	2b00      	cmp	r3, #0
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e012      	b.n	80040b6 <HAL_I2C_Init+0x18e>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	1e58      	subs	r0, r3, #1
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6859      	ldr	r1, [r3, #4]
 8004098:	460b      	mov	r3, r1
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	0099      	lsls	r1, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040a6:	3301      	adds	r3, #1
 80040a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	bf0c      	ite	eq
 80040b0:	2301      	moveq	r3, #1
 80040b2:	2300      	movne	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_I2C_Init+0x196>
 80040ba:	2301      	movs	r3, #1
 80040bc:	e022      	b.n	8004104 <HAL_I2C_Init+0x1dc>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10e      	bne.n	80040e4 <HAL_I2C_Init+0x1bc>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	1e58      	subs	r0, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6859      	ldr	r1, [r3, #4]
 80040ce:	460b      	mov	r3, r1
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	440b      	add	r3, r1
 80040d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80040d8:	3301      	adds	r3, #1
 80040da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040e2:	e00f      	b.n	8004104 <HAL_I2C_Init+0x1dc>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	1e58      	subs	r0, r3, #1
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6859      	ldr	r1, [r3, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	0099      	lsls	r1, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80040fa:	3301      	adds	r3, #1
 80040fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	6809      	ldr	r1, [r1, #0]
 8004108:	4313      	orrs	r3, r2
 800410a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69da      	ldr	r2, [r3, #28]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004132:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	6911      	ldr	r1, [r2, #16]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68d2      	ldr	r2, [r2, #12]
 800413e:	4311      	orrs	r1, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	430b      	orrs	r3, r1
 8004146:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695a      	ldr	r2, [r3, #20]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	000186a0 	.word	0x000186a0
 80041a0:	001e847f 	.word	0x001e847f
 80041a4:	003d08ff 	.word	0x003d08ff
 80041a8:	431bde83 	.word	0x431bde83
 80041ac:	10624dd3 	.word	0x10624dd3

080041b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	461a      	mov	r2, r3
 80041bc:	460b      	mov	r3, r1
 80041be:	817b      	strh	r3, [r7, #10]
 80041c0:	4613      	mov	r3, r2
 80041c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041c4:	f7ff f94e 	bl	8003464 <HAL_GetTick>
 80041c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	f040 80e0 	bne.w	8004398 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	2319      	movs	r3, #25
 80041de:	2201      	movs	r2, #1
 80041e0:	4970      	ldr	r1, [pc, #448]	; (80043a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fc58 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
 80041f0:	e0d3      	b.n	800439a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_I2C_Master_Transmit+0x50>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e0cc      	b.n	800439a <HAL_I2C_Master_Transmit+0x1ea>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	d007      	beq.n	8004226 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004234:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2221      	movs	r2, #33	; 0x21
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2210      	movs	r2, #16
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	893a      	ldrh	r2, [r7, #8]
 8004256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a50      	ldr	r2, [pc, #320]	; (80043a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004268:	8979      	ldrh	r1, [r7, #10]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	6a3a      	ldr	r2, [r7, #32]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fac2 	bl	80047f8 <I2C_MasterRequestWrite>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e08d      	b.n	800439a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004294:	e066      	b.n	8004364 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	6a39      	ldr	r1, [r7, #32]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fcd2 	bl	8004c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d107      	bne.n	80042be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e06b      	b.n	800439a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	781a      	ldrb	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d11b      	bne.n	8004338 <HAL_I2C_Master_Transmit+0x188>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d017      	beq.n	8004338 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	6a39      	ldr	r1, [r7, #32]
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fcc2 	bl	8004cc6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	2b04      	cmp	r3, #4
 800434e:	d107      	bne.n	8004360 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e01a      	b.n	800439a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	d194      	bne.n	8004296 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	e000      	b.n	800439a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004398:	2302      	movs	r3, #2
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	00100002 	.word	0x00100002
 80043a8:	ffff0000 	.word	0xffff0000

080043ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08c      	sub	sp, #48	; 0x30
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	607a      	str	r2, [r7, #4]
 80043b6:	461a      	mov	r2, r3
 80043b8:	460b      	mov	r3, r1
 80043ba:	817b      	strh	r3, [r7, #10]
 80043bc:	4613      	mov	r3, r2
 80043be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043c0:	f7ff f850 	bl	8003464 <HAL_GetTick>
 80043c4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	f040 820b 	bne.w	80047ea <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	2319      	movs	r3, #25
 80043da:	2201      	movs	r2, #1
 80043dc:	497c      	ldr	r1, [pc, #496]	; (80045d0 <HAL_I2C_Master_Receive+0x224>)
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fb5a 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80043ea:	2302      	movs	r3, #2
 80043ec:	e1fe      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_I2C_Master_Receive+0x50>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e1f7      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d007      	beq.n	8004422 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004430:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2222      	movs	r2, #34	; 0x22
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2210      	movs	r2, #16
 800443e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	893a      	ldrh	r2, [r7, #8]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a5c      	ldr	r2, [pc, #368]	; (80045d4 <HAL_I2C_Master_Receive+0x228>)
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004464:	8979      	ldrh	r1, [r7, #10]
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fa46 	bl	80048fc <I2C_MasterRequestRead>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e1b8      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	2b00      	cmp	r3, #0
 8004480:	d113      	bne.n	80044aa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004482:	2300      	movs	r3, #0
 8004484:	623b      	str	r3, [r7, #32]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	623b      	str	r3, [r7, #32]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	623b      	str	r3, [r7, #32]
 8004496:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e18c      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d11b      	bne.n	80044ea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e16c      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d11b      	bne.n	800452a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004500:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004510:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	e14c      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004538:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004550:	e138      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004556:	2b03      	cmp	r3, #3
 8004558:	f200 80f1 	bhi.w	800473e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	2b01      	cmp	r3, #1
 8004562:	d123      	bne.n	80045ac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004566:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fbed 	bl	8004d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e139      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045aa:	e10b      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d14e      	bne.n	8004652 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	2200      	movs	r2, #0
 80045bc:	4906      	ldr	r1, [pc, #24]	; (80045d8 <HAL_I2C_Master_Receive+0x22c>)
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fa6a 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e10e      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
 80045ce:	bf00      	nop
 80045d0:	00100002 	.word	0x00100002
 80045d4:	ffff0000 	.word	0xffff0000
 80045d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004650:	e0b8      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	2200      	movs	r2, #0
 800465a:	4966      	ldr	r1, [pc, #408]	; (80047f4 <HAL_I2C_Master_Receive+0x448>)
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fa1b 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0bf      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	2200      	movs	r2, #0
 80046b6:	494f      	ldr	r1, [pc, #316]	; (80047f4 <HAL_I2C_Master_Receive+0x448>)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f9ed 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e091      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800473c:	e042      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800473e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fb00 	bl	8004d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e04c      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b04      	cmp	r3, #4
 8004790:	d118      	bne.n	80047c4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f47f aec2 	bne.w	8004552 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3728      	adds	r7, #40	; 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	00010004 	.word	0x00010004

080047f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	460b      	mov	r3, r1
 8004806:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d006      	beq.n	8004822 <I2C_MasterRequestWrite+0x2a>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d003      	beq.n	8004822 <I2C_MasterRequestWrite+0x2a>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004820:	d108      	bne.n	8004834 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e00b      	b.n	800484c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	2b12      	cmp	r3, #18
 800483a:	d107      	bne.n	800484c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f91d 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00d      	beq.n	8004880 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004872:	d103      	bne.n	800487c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e035      	b.n	80048ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004888:	d108      	bne.n	800489c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800488a:	897b      	ldrh	r3, [r7, #10]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004898:	611a      	str	r2, [r3, #16]
 800489a:	e01b      	b.n	80048d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800489c:	897b      	ldrh	r3, [r7, #10]
 800489e:	11db      	asrs	r3, r3, #7
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f003 0306 	and.w	r3, r3, #6
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f063 030f 	orn	r3, r3, #15
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	490e      	ldr	r1, [pc, #56]	; (80048f4 <I2C_MasterRequestWrite+0xfc>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f943 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e010      	b.n	80048ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048ca:	897b      	ldrh	r3, [r7, #10]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4907      	ldr	r1, [pc, #28]	; (80048f8 <I2C_MasterRequestWrite+0x100>)
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f933 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	00010008 	.word	0x00010008
 80048f8:	00010002 	.word	0x00010002

080048fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	460b      	mov	r3, r1
 800490a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004920:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d006      	beq.n	8004936 <I2C_MasterRequestRead+0x3a>
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d003      	beq.n	8004936 <I2C_MasterRequestRead+0x3a>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004934:	d108      	bne.n	8004948 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e00b      	b.n	8004960 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	2b11      	cmp	r3, #17
 800494e:	d107      	bne.n	8004960 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800495e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f893 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00d      	beq.n	8004994 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004986:	d103      	bne.n	8004990 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e079      	b.n	8004a88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800499c:	d108      	bne.n	80049b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	611a      	str	r2, [r3, #16]
 80049ae:	e05f      	b.n	8004a70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049b0:	897b      	ldrh	r3, [r7, #10]
 80049b2:	11db      	asrs	r3, r3, #7
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f003 0306 	and.w	r3, r3, #6
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	f063 030f 	orn	r3, r3, #15
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4930      	ldr	r1, [pc, #192]	; (8004a90 <I2C_MasterRequestRead+0x194>)
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f8b9 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e054      	b.n	8004a88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049de:	897b      	ldrh	r3, [r7, #10]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4929      	ldr	r1, [pc, #164]	; (8004a94 <I2C_MasterRequestRead+0x198>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f8a9 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e044      	b.n	8004a88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f831 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00d      	beq.n	8004a58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4a:	d103      	bne.n	8004a54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e017      	b.n	8004a88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a58:	897b      	ldrh	r3, [r7, #10]
 8004a5a:	11db      	asrs	r3, r3, #7
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f003 0306 	and.w	r3, r3, #6
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f063 030e 	orn	r3, r3, #14
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4907      	ldr	r1, [pc, #28]	; (8004a94 <I2C_MasterRequestRead+0x198>)
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f865 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	00010008 	.word	0x00010008
 8004a94:	00010002 	.word	0x00010002

08004a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa8:	e025      	b.n	8004af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d021      	beq.n	8004af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fe fcd7 	bl	8003464 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d116      	bne.n	8004af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e023      	b.n	8004b3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10d      	bne.n	8004b1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	43da      	mvns	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf0c      	ite	eq
 8004b12:	2301      	moveq	r3, #1
 8004b14:	2300      	movne	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	e00c      	b.n	8004b36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	43da      	mvns	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4013      	ands	r3, r2
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bf0c      	ite	eq
 8004b2e:	2301      	moveq	r3, #1
 8004b30:	2300      	movne	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d0b6      	beq.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b54:	e051      	b.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b64:	d123      	bne.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f043 0204 	orr.w	r2, r3, #4
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e046      	b.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb4:	d021      	beq.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb6:	f7fe fc55 	bl	8003464 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d116      	bne.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f043 0220 	orr.w	r2, r3, #32
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e020      	b.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d10c      	bne.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	43da      	mvns	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bf14      	ite	ne
 8004c16:	2301      	movne	r3, #1
 8004c18:	2300      	moveq	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	e00b      	b.n	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	43da      	mvns	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d18d      	bne.n	8004b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c50:	e02d      	b.n	8004cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f8ce 	bl	8004df4 <I2C_IsAcknowledgeFailed>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e02d      	b.n	8004cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d021      	beq.n	8004cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6a:	f7fe fbfb 	bl	8003464 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d302      	bcc.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d116      	bne.n	8004cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f043 0220 	orr.w	r2, r3, #32
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e007      	b.n	8004cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb8:	2b80      	cmp	r3, #128	; 0x80
 8004cba:	d1ca      	bne.n	8004c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cd2:	e02d      	b.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f88d 	bl	8004df4 <I2C_IsAcknowledgeFailed>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e02d      	b.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d021      	beq.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cec:	f7fe fbba 	bl	8003464 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d302      	bcc.n	8004d02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d116      	bne.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e007      	b.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d1ca      	bne.n	8004cd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d54:	e042      	b.n	8004ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d119      	bne.n	8004d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0210 	mvn.w	r2, #16
 8004d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e029      	b.n	8004dec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d98:	f7fe fb64 	bl	8003464 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d302      	bcc.n	8004dae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d116      	bne.n	8004ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	f043 0220 	orr.w	r2, r3, #32
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e007      	b.n	8004dec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d1b5      	bne.n	8004d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0a:	d11b      	bne.n	8004e44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	f043 0204 	orr.w	r2, r3, #4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
	...

08004e54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	603b      	str	r3, [r7, #0]
 8004e62:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a1f      	ldr	r2, [pc, #124]	; (8004ee4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_PWREx_EnableOverDrive+0x90>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ee8 <HAL_PWREx_EnableOverDrive+0x94>)
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e80:	f7fe faf0 	bl	8003464 <HAL_GetTick>
 8004e84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e86:	e009      	b.n	8004e9c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e88:	f7fe faec 	bl	8003464 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e96:	d901      	bls.n	8004e9c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e01f      	b.n	8004edc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e9c:	4b13      	ldr	r3, [pc, #76]	; (8004eec <HAL_PWREx_EnableOverDrive+0x98>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ea8:	d1ee      	bne.n	8004e88 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004eaa:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004eb0:	f7fe fad8 	bl	8003464 <HAL_GetTick>
 8004eb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004eb6:	e009      	b.n	8004ecc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004eb8:	f7fe fad4 	bl	8003464 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ec6:	d901      	bls.n	8004ecc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e007      	b.n	8004edc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ecc:	4b07      	ldr	r3, [pc, #28]	; (8004eec <HAL_PWREx_EnableOverDrive+0x98>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ed8:	d1ee      	bne.n	8004eb8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	420e0040 	.word	0x420e0040
 8004eec:	40007000 	.word	0x40007000
 8004ef0:	420e0044 	.word	0x420e0044

08004ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0cc      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f08:	4b68      	ldr	r3, [pc, #416]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d90c      	bls.n	8004f30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f16:	4b65      	ldr	r3, [pc, #404]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f1e:	4b63      	ldr	r3, [pc, #396]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 030f 	and.w	r3, r3, #15
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d001      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e0b8      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d020      	beq.n	8004f7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d005      	beq.n	8004f54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f48:	4b59      	ldr	r3, [pc, #356]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	4a58      	ldr	r2, [pc, #352]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f60:	4b53      	ldr	r3, [pc, #332]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	4a52      	ldr	r2, [pc, #328]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f6c:	4b50      	ldr	r3, [pc, #320]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	494d      	ldr	r1, [pc, #308]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d044      	beq.n	8005014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d107      	bne.n	8004fa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f92:	4b47      	ldr	r3, [pc, #284]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d119      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e07f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d003      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb2:	4b3f      	ldr	r3, [pc, #252]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e06f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc2:	4b3b      	ldr	r3, [pc, #236]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e067      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fd2:	4b37      	ldr	r3, [pc, #220]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f023 0203 	bic.w	r2, r3, #3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	4934      	ldr	r1, [pc, #208]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fe4:	f7fe fa3e 	bl	8003464 <HAL_GetTick>
 8004fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fec:	f7fe fa3a 	bl	8003464 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e04f      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005002:	4b2b      	ldr	r3, [pc, #172]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 020c 	and.w	r2, r3, #12
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	429a      	cmp	r2, r3
 8005012:	d1eb      	bne.n	8004fec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005014:	4b25      	ldr	r3, [pc, #148]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 030f 	and.w	r3, r3, #15
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d20c      	bcs.n	800503c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005022:	4b22      	ldr	r3, [pc, #136]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800502a:	4b20      	ldr	r3, [pc, #128]	; (80050ac <HAL_RCC_ClockConfig+0x1b8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d001      	beq.n	800503c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e032      	b.n	80050a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d008      	beq.n	800505a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005048:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	4916      	ldr	r1, [pc, #88]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0308 	and.w	r3, r3, #8
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005066:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	490e      	ldr	r1, [pc, #56]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800507a:	f000 f855 	bl	8005128 <HAL_RCC_GetSysClockFreq>
 800507e:	4602      	mov	r2, r0
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	091b      	lsrs	r3, r3, #4
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	490a      	ldr	r1, [pc, #40]	; (80050b4 <HAL_RCC_ClockConfig+0x1c0>)
 800508c:	5ccb      	ldrb	r3, [r1, r3]
 800508e:	fa22 f303 	lsr.w	r3, r2, r3
 8005092:	4a09      	ldr	r2, [pc, #36]	; (80050b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005096:	4b09      	ldr	r3, [pc, #36]	; (80050bc <HAL_RCC_ClockConfig+0x1c8>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe f99e 	bl	80033dc <HAL_InitTick>

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40023c00 	.word	0x40023c00
 80050b0:	40023800 	.word	0x40023800
 80050b4:	08012090 	.word	0x08012090
 80050b8:	20000004 	.word	0x20000004
 80050bc:	20000008 	.word	0x20000008

080050c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c4:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80050c6:	681b      	ldr	r3, [r3, #0]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000004 	.word	0x20000004

080050d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050dc:	f7ff fff0 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 80050e0:	4602      	mov	r2, r0
 80050e2:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	0a9b      	lsrs	r3, r3, #10
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	4903      	ldr	r1, [pc, #12]	; (80050fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ee:	5ccb      	ldrb	r3, [r1, r3]
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40023800 	.word	0x40023800
 80050fc:	080120a0 	.word	0x080120a0

08005100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005104:	f7ff ffdc 	bl	80050c0 <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b05      	ldr	r3, [pc, #20]	; (8005120 <HAL_RCC_GetPCLK2Freq+0x20>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0b5b      	lsrs	r3, r3, #13
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4903      	ldr	r1, [pc, #12]	; (8005124 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800511c:	4618      	mov	r0, r3
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40023800 	.word	0x40023800
 8005124:	080120a0 	.word	0x080120a0

08005128 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800512c:	b0ae      	sub	sp, #184	; 0xb8
 800512e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800514e:	4bcb      	ldr	r3, [pc, #812]	; (800547c <HAL_RCC_GetSysClockFreq+0x354>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b0c      	cmp	r3, #12
 8005158:	f200 8206 	bhi.w	8005568 <HAL_RCC_GetSysClockFreq+0x440>
 800515c:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <HAL_RCC_GetSysClockFreq+0x3c>)
 800515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005162:	bf00      	nop
 8005164:	08005199 	.word	0x08005199
 8005168:	08005569 	.word	0x08005569
 800516c:	08005569 	.word	0x08005569
 8005170:	08005569 	.word	0x08005569
 8005174:	080051a1 	.word	0x080051a1
 8005178:	08005569 	.word	0x08005569
 800517c:	08005569 	.word	0x08005569
 8005180:	08005569 	.word	0x08005569
 8005184:	080051a9 	.word	0x080051a9
 8005188:	08005569 	.word	0x08005569
 800518c:	08005569 	.word	0x08005569
 8005190:	08005569 	.word	0x08005569
 8005194:	08005399 	.word	0x08005399
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005198:	4bb9      	ldr	r3, [pc, #740]	; (8005480 <HAL_RCC_GetSysClockFreq+0x358>)
 800519a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800519e:	e1e7      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051a0:	4bb8      	ldr	r3, [pc, #736]	; (8005484 <HAL_RCC_GetSysClockFreq+0x35c>)
 80051a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80051a6:	e1e3      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051a8:	4bb4      	ldr	r3, [pc, #720]	; (800547c <HAL_RCC_GetSysClockFreq+0x354>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051b4:	4bb1      	ldr	r3, [pc, #708]	; (800547c <HAL_RCC_GetSysClockFreq+0x354>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d071      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c0:	4bae      	ldr	r3, [pc, #696]	; (800547c <HAL_RCC_GetSysClockFreq+0x354>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	099b      	lsrs	r3, r3, #6
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80051cc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80051d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80051d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051dc:	2300      	movs	r3, #0
 80051de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80051e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051e6:	4622      	mov	r2, r4
 80051e8:	462b      	mov	r3, r5
 80051ea:	f04f 0000 	mov.w	r0, #0
 80051ee:	f04f 0100 	mov.w	r1, #0
 80051f2:	0159      	lsls	r1, r3, #5
 80051f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051f8:	0150      	lsls	r0, r2, #5
 80051fa:	4602      	mov	r2, r0
 80051fc:	460b      	mov	r3, r1
 80051fe:	4621      	mov	r1, r4
 8005200:	1a51      	subs	r1, r2, r1
 8005202:	6439      	str	r1, [r7, #64]	; 0x40
 8005204:	4629      	mov	r1, r5
 8005206:	eb63 0301 	sbc.w	r3, r3, r1
 800520a:	647b      	str	r3, [r7, #68]	; 0x44
 800520c:	f04f 0200 	mov.w	r2, #0
 8005210:	f04f 0300 	mov.w	r3, #0
 8005214:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005218:	4649      	mov	r1, r9
 800521a:	018b      	lsls	r3, r1, #6
 800521c:	4641      	mov	r1, r8
 800521e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005222:	4641      	mov	r1, r8
 8005224:	018a      	lsls	r2, r1, #6
 8005226:	4641      	mov	r1, r8
 8005228:	1a51      	subs	r1, r2, r1
 800522a:	63b9      	str	r1, [r7, #56]	; 0x38
 800522c:	4649      	mov	r1, r9
 800522e:	eb63 0301 	sbc.w	r3, r3, r1
 8005232:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005240:	4649      	mov	r1, r9
 8005242:	00cb      	lsls	r3, r1, #3
 8005244:	4641      	mov	r1, r8
 8005246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800524a:	4641      	mov	r1, r8
 800524c:	00ca      	lsls	r2, r1, #3
 800524e:	4610      	mov	r0, r2
 8005250:	4619      	mov	r1, r3
 8005252:	4603      	mov	r3, r0
 8005254:	4622      	mov	r2, r4
 8005256:	189b      	adds	r3, r3, r2
 8005258:	633b      	str	r3, [r7, #48]	; 0x30
 800525a:	462b      	mov	r3, r5
 800525c:	460a      	mov	r2, r1
 800525e:	eb42 0303 	adc.w	r3, r2, r3
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005270:	4629      	mov	r1, r5
 8005272:	024b      	lsls	r3, r1, #9
 8005274:	4621      	mov	r1, r4
 8005276:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800527a:	4621      	mov	r1, r4
 800527c:	024a      	lsls	r2, r1, #9
 800527e:	4610      	mov	r0, r2
 8005280:	4619      	mov	r1, r3
 8005282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005286:	2200      	movs	r2, #0
 8005288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800528c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005290:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005294:	f7fb fcf8 	bl	8000c88 <__aeabi_uldivmod>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4613      	mov	r3, r2
 800529e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052a2:	e067      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052a4:	4b75      	ldr	r3, [pc, #468]	; (800547c <HAL_RCC_GetSysClockFreq+0x354>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	099b      	lsrs	r3, r3, #6
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052b0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80052b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80052be:	2300      	movs	r3, #0
 80052c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80052c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80052c6:	4622      	mov	r2, r4
 80052c8:	462b      	mov	r3, r5
 80052ca:	f04f 0000 	mov.w	r0, #0
 80052ce:	f04f 0100 	mov.w	r1, #0
 80052d2:	0159      	lsls	r1, r3, #5
 80052d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052d8:	0150      	lsls	r0, r2, #5
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4621      	mov	r1, r4
 80052e0:	1a51      	subs	r1, r2, r1
 80052e2:	62b9      	str	r1, [r7, #40]	; 0x28
 80052e4:	4629      	mov	r1, r5
 80052e6:	eb63 0301 	sbc.w	r3, r3, r1
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80052f8:	4649      	mov	r1, r9
 80052fa:	018b      	lsls	r3, r1, #6
 80052fc:	4641      	mov	r1, r8
 80052fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005302:	4641      	mov	r1, r8
 8005304:	018a      	lsls	r2, r1, #6
 8005306:	4641      	mov	r1, r8
 8005308:	ebb2 0a01 	subs.w	sl, r2, r1
 800530c:	4649      	mov	r1, r9
 800530e:	eb63 0b01 	sbc.w	fp, r3, r1
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800531e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005322:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005326:	4692      	mov	sl, r2
 8005328:	469b      	mov	fp, r3
 800532a:	4623      	mov	r3, r4
 800532c:	eb1a 0303 	adds.w	r3, sl, r3
 8005330:	623b      	str	r3, [r7, #32]
 8005332:	462b      	mov	r3, r5
 8005334:	eb4b 0303 	adc.w	r3, fp, r3
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005346:	4629      	mov	r1, r5
 8005348:	028b      	lsls	r3, r1, #10
 800534a:	4621      	mov	r1, r4
 800534c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005350:	4621      	mov	r1, r4
 8005352:	028a      	lsls	r2, r1, #10
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800535c:	2200      	movs	r2, #0
 800535e:	673b      	str	r3, [r7, #112]	; 0x70
 8005360:	677a      	str	r2, [r7, #116]	; 0x74
 8005362:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005366:	f7fb fc8f 	bl	8000c88 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4613      	mov	r3, r2
 8005370:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005374:	4b41      	ldr	r3, [pc, #260]	; (800547c <HAL_RCC_GetSysClockFreq+0x354>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	0c1b      	lsrs	r3, r3, #16
 800537a:	f003 0303 	and.w	r3, r3, #3
 800537e:	3301      	adds	r3, #1
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800538a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800538e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005392:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005396:	e0eb      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005398:	4b38      	ldr	r3, [pc, #224]	; (800547c <HAL_RCC_GetSysClockFreq+0x354>)
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053a4:	4b35      	ldr	r3, [pc, #212]	; (800547c <HAL_RCC_GetSysClockFreq+0x354>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d06b      	beq.n	8005488 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053b0:	4b32      	ldr	r3, [pc, #200]	; (800547c <HAL_RCC_GetSysClockFreq+0x354>)
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	099b      	lsrs	r3, r3, #6
 80053b6:	2200      	movs	r2, #0
 80053b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80053ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80053bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	663b      	str	r3, [r7, #96]	; 0x60
 80053c4:	2300      	movs	r3, #0
 80053c6:	667b      	str	r3, [r7, #100]	; 0x64
 80053c8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80053cc:	4622      	mov	r2, r4
 80053ce:	462b      	mov	r3, r5
 80053d0:	f04f 0000 	mov.w	r0, #0
 80053d4:	f04f 0100 	mov.w	r1, #0
 80053d8:	0159      	lsls	r1, r3, #5
 80053da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053de:	0150      	lsls	r0, r2, #5
 80053e0:	4602      	mov	r2, r0
 80053e2:	460b      	mov	r3, r1
 80053e4:	4621      	mov	r1, r4
 80053e6:	1a51      	subs	r1, r2, r1
 80053e8:	61b9      	str	r1, [r7, #24]
 80053ea:	4629      	mov	r1, r5
 80053ec:	eb63 0301 	sbc.w	r3, r3, r1
 80053f0:	61fb      	str	r3, [r7, #28]
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80053fe:	4659      	mov	r1, fp
 8005400:	018b      	lsls	r3, r1, #6
 8005402:	4651      	mov	r1, sl
 8005404:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005408:	4651      	mov	r1, sl
 800540a:	018a      	lsls	r2, r1, #6
 800540c:	4651      	mov	r1, sl
 800540e:	ebb2 0801 	subs.w	r8, r2, r1
 8005412:	4659      	mov	r1, fp
 8005414:	eb63 0901 	sbc.w	r9, r3, r1
 8005418:	f04f 0200 	mov.w	r2, #0
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005424:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005428:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800542c:	4690      	mov	r8, r2
 800542e:	4699      	mov	r9, r3
 8005430:	4623      	mov	r3, r4
 8005432:	eb18 0303 	adds.w	r3, r8, r3
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	462b      	mov	r3, r5
 800543a:	eb49 0303 	adc.w	r3, r9, r3
 800543e:	617b      	str	r3, [r7, #20]
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800544c:	4629      	mov	r1, r5
 800544e:	024b      	lsls	r3, r1, #9
 8005450:	4621      	mov	r1, r4
 8005452:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005456:	4621      	mov	r1, r4
 8005458:	024a      	lsls	r2, r1, #9
 800545a:	4610      	mov	r0, r2
 800545c:	4619      	mov	r1, r3
 800545e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005462:	2200      	movs	r2, #0
 8005464:	65bb      	str	r3, [r7, #88]	; 0x58
 8005466:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005468:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800546c:	f7fb fc0c 	bl	8000c88 <__aeabi_uldivmod>
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	4613      	mov	r3, r2
 8005476:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800547a:	e065      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x420>
 800547c:	40023800 	.word	0x40023800
 8005480:	00f42400 	.word	0x00f42400
 8005484:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005488:	4b3d      	ldr	r3, [pc, #244]	; (8005580 <HAL_RCC_GetSysClockFreq+0x458>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	099b      	lsrs	r3, r3, #6
 800548e:	2200      	movs	r2, #0
 8005490:	4618      	mov	r0, r3
 8005492:	4611      	mov	r1, r2
 8005494:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005498:	653b      	str	r3, [r7, #80]	; 0x50
 800549a:	2300      	movs	r3, #0
 800549c:	657b      	str	r3, [r7, #84]	; 0x54
 800549e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80054a2:	4642      	mov	r2, r8
 80054a4:	464b      	mov	r3, r9
 80054a6:	f04f 0000 	mov.w	r0, #0
 80054aa:	f04f 0100 	mov.w	r1, #0
 80054ae:	0159      	lsls	r1, r3, #5
 80054b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054b4:	0150      	lsls	r0, r2, #5
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	4641      	mov	r1, r8
 80054bc:	1a51      	subs	r1, r2, r1
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	4649      	mov	r1, r9
 80054c2:	eb63 0301 	sbc.w	r3, r3, r1
 80054c6:	60fb      	str	r3, [r7, #12]
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80054d4:	4659      	mov	r1, fp
 80054d6:	018b      	lsls	r3, r1, #6
 80054d8:	4651      	mov	r1, sl
 80054da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054de:	4651      	mov	r1, sl
 80054e0:	018a      	lsls	r2, r1, #6
 80054e2:	4651      	mov	r1, sl
 80054e4:	1a54      	subs	r4, r2, r1
 80054e6:	4659      	mov	r1, fp
 80054e8:	eb63 0501 	sbc.w	r5, r3, r1
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	00eb      	lsls	r3, r5, #3
 80054f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054fa:	00e2      	lsls	r2, r4, #3
 80054fc:	4614      	mov	r4, r2
 80054fe:	461d      	mov	r5, r3
 8005500:	4643      	mov	r3, r8
 8005502:	18e3      	adds	r3, r4, r3
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	464b      	mov	r3, r9
 8005508:	eb45 0303 	adc.w	r3, r5, r3
 800550c:	607b      	str	r3, [r7, #4]
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	e9d7 4500 	ldrd	r4, r5, [r7]
 800551a:	4629      	mov	r1, r5
 800551c:	028b      	lsls	r3, r1, #10
 800551e:	4621      	mov	r1, r4
 8005520:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005524:	4621      	mov	r1, r4
 8005526:	028a      	lsls	r2, r1, #10
 8005528:	4610      	mov	r0, r2
 800552a:	4619      	mov	r1, r3
 800552c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005530:	2200      	movs	r2, #0
 8005532:	64bb      	str	r3, [r7, #72]	; 0x48
 8005534:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005536:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800553a:	f7fb fba5 	bl	8000c88 <__aeabi_uldivmod>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4613      	mov	r3, r2
 8005544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005548:	4b0d      	ldr	r3, [pc, #52]	; (8005580 <HAL_RCC_GetSysClockFreq+0x458>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	0f1b      	lsrs	r3, r3, #28
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005556:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800555a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800555e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005562:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005566:	e003      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005568:	4b06      	ldr	r3, [pc, #24]	; (8005584 <HAL_RCC_GetSysClockFreq+0x45c>)
 800556a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800556e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005570:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005574:	4618      	mov	r0, r3
 8005576:	37b8      	adds	r7, #184	; 0xb8
 8005578:	46bd      	mov	sp, r7
 800557a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800557e:	bf00      	nop
 8005580:	40023800 	.word	0x40023800
 8005584:	00f42400 	.word	0x00f42400

08005588 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e28d      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 8083 	beq.w	80056ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055a8:	4b94      	ldr	r3, [pc, #592]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 030c 	and.w	r3, r3, #12
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d019      	beq.n	80055e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055b4:	4b91      	ldr	r3, [pc, #580]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80055bc:	2b08      	cmp	r3, #8
 80055be:	d106      	bne.n	80055ce <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055c0:	4b8e      	ldr	r3, [pc, #568]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055cc:	d00c      	beq.n	80055e8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ce:	4b8b      	ldr	r3, [pc, #556]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80055d6:	2b0c      	cmp	r3, #12
 80055d8:	d112      	bne.n	8005600 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055da:	4b88      	ldr	r3, [pc, #544]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055e6:	d10b      	bne.n	8005600 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e8:	4b84      	ldr	r3, [pc, #528]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d05b      	beq.n	80056ac <HAL_RCC_OscConfig+0x124>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d157      	bne.n	80056ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e25a      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005608:	d106      	bne.n	8005618 <HAL_RCC_OscConfig+0x90>
 800560a:	4b7c      	ldr	r3, [pc, #496]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a7b      	ldr	r2, [pc, #492]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 8005610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e01d      	b.n	8005654 <HAL_RCC_OscConfig+0xcc>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005620:	d10c      	bne.n	800563c <HAL_RCC_OscConfig+0xb4>
 8005622:	4b76      	ldr	r3, [pc, #472]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a75      	ldr	r2, [pc, #468]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 8005628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	4b73      	ldr	r3, [pc, #460]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a72      	ldr	r2, [pc, #456]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 8005634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005638:	6013      	str	r3, [r2, #0]
 800563a:	e00b      	b.n	8005654 <HAL_RCC_OscConfig+0xcc>
 800563c:	4b6f      	ldr	r3, [pc, #444]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a6e      	ldr	r2, [pc, #440]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 8005642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005646:	6013      	str	r3, [r2, #0]
 8005648:	4b6c      	ldr	r3, [pc, #432]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a6b      	ldr	r2, [pc, #428]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 800564e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d013      	beq.n	8005684 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565c:	f7fd ff02 	bl	8003464 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005664:	f7fd fefe 	bl	8003464 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b64      	cmp	r3, #100	; 0x64
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e21f      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005676:	4b61      	ldr	r3, [pc, #388]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f0      	beq.n	8005664 <HAL_RCC_OscConfig+0xdc>
 8005682:	e014      	b.n	80056ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005684:	f7fd feee 	bl	8003464 <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800568c:	f7fd feea 	bl	8003464 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b64      	cmp	r3, #100	; 0x64
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e20b      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800569e:	4b57      	ldr	r3, [pc, #348]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x104>
 80056aa:	e000      	b.n	80056ae <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d06f      	beq.n	800579a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056ba:	4b50      	ldr	r3, [pc, #320]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 030c 	and.w	r3, r3, #12
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d017      	beq.n	80056f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056c6:	4b4d      	ldr	r3, [pc, #308]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80056ce:	2b08      	cmp	r3, #8
 80056d0:	d105      	bne.n	80056de <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056d2:	4b4a      	ldr	r3, [pc, #296]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00b      	beq.n	80056f6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056de:	4b47      	ldr	r3, [pc, #284]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80056e6:	2b0c      	cmp	r3, #12
 80056e8:	d11c      	bne.n	8005724 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056ea:	4b44      	ldr	r3, [pc, #272]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d116      	bne.n	8005724 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056f6:	4b41      	ldr	r3, [pc, #260]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d005      	beq.n	800570e <HAL_RCC_OscConfig+0x186>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d001      	beq.n	800570e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e1d3      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570e:	4b3b      	ldr	r3, [pc, #236]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4937      	ldr	r1, [pc, #220]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 800571e:	4313      	orrs	r3, r2
 8005720:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005722:	e03a      	b.n	800579a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d020      	beq.n	800576e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800572c:	4b34      	ldr	r3, [pc, #208]	; (8005800 <HAL_RCC_OscConfig+0x278>)
 800572e:	2201      	movs	r2, #1
 8005730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005732:	f7fd fe97 	bl	8003464 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800573a:	f7fd fe93 	bl	8003464 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e1b4      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800574c:	4b2b      	ldr	r3, [pc, #172]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0f0      	beq.n	800573a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005758:	4b28      	ldr	r3, [pc, #160]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	4925      	ldr	r1, [pc, #148]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]
 800576c:	e015      	b.n	800579a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800576e:	4b24      	ldr	r3, [pc, #144]	; (8005800 <HAL_RCC_OscConfig+0x278>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005774:	f7fd fe76 	bl	8003464 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800577c:	f7fd fe72 	bl	8003464 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e193      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578e:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1f0      	bne.n	800577c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0308 	and.w	r3, r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d036      	beq.n	8005814 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d016      	beq.n	80057dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057ae:	4b15      	ldr	r3, [pc, #84]	; (8005804 <HAL_RCC_OscConfig+0x27c>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b4:	f7fd fe56 	bl	8003464 <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057bc:	f7fd fe52 	bl	8003464 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e173      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ce:	4b0b      	ldr	r3, [pc, #44]	; (80057fc <HAL_RCC_OscConfig+0x274>)
 80057d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x234>
 80057da:	e01b      	b.n	8005814 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057dc:	4b09      	ldr	r3, [pc, #36]	; (8005804 <HAL_RCC_OscConfig+0x27c>)
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e2:	f7fd fe3f 	bl	8003464 <HAL_GetTick>
 80057e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e8:	e00e      	b.n	8005808 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057ea:	f7fd fe3b 	bl	8003464 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d907      	bls.n	8005808 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e15c      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
 80057fc:	40023800 	.word	0x40023800
 8005800:	42470000 	.word	0x42470000
 8005804:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005808:	4b8a      	ldr	r3, [pc, #552]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 800580a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1ea      	bne.n	80057ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8097 	beq.w	8005950 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005822:	2300      	movs	r3, #0
 8005824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005826:	4b83      	ldr	r3, [pc, #524]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10f      	bne.n	8005852 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005832:	2300      	movs	r3, #0
 8005834:	60bb      	str	r3, [r7, #8]
 8005836:	4b7f      	ldr	r3, [pc, #508]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	4a7e      	ldr	r2, [pc, #504]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 800583c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005840:	6413      	str	r3, [r2, #64]	; 0x40
 8005842:	4b7c      	ldr	r3, [pc, #496]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800584e:	2301      	movs	r3, #1
 8005850:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005852:	4b79      	ldr	r3, [pc, #484]	; (8005a38 <HAL_RCC_OscConfig+0x4b0>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585a:	2b00      	cmp	r3, #0
 800585c:	d118      	bne.n	8005890 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800585e:	4b76      	ldr	r3, [pc, #472]	; (8005a38 <HAL_RCC_OscConfig+0x4b0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a75      	ldr	r2, [pc, #468]	; (8005a38 <HAL_RCC_OscConfig+0x4b0>)
 8005864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800586a:	f7fd fdfb 	bl	8003464 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005872:	f7fd fdf7 	bl	8003464 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e118      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005884:	4b6c      	ldr	r3, [pc, #432]	; (8005a38 <HAL_RCC_OscConfig+0x4b0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f0      	beq.n	8005872 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d106      	bne.n	80058a6 <HAL_RCC_OscConfig+0x31e>
 8005898:	4b66      	ldr	r3, [pc, #408]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589c:	4a65      	ldr	r2, [pc, #404]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6713      	str	r3, [r2, #112]	; 0x70
 80058a4:	e01c      	b.n	80058e0 <HAL_RCC_OscConfig+0x358>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b05      	cmp	r3, #5
 80058ac:	d10c      	bne.n	80058c8 <HAL_RCC_OscConfig+0x340>
 80058ae:	4b61      	ldr	r3, [pc, #388]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	4a60      	ldr	r2, [pc, #384]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 80058b4:	f043 0304 	orr.w	r3, r3, #4
 80058b8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ba:	4b5e      	ldr	r3, [pc, #376]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058be:	4a5d      	ldr	r2, [pc, #372]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 80058c0:	f043 0301 	orr.w	r3, r3, #1
 80058c4:	6713      	str	r3, [r2, #112]	; 0x70
 80058c6:	e00b      	b.n	80058e0 <HAL_RCC_OscConfig+0x358>
 80058c8:	4b5a      	ldr	r3, [pc, #360]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 80058ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058cc:	4a59      	ldr	r2, [pc, #356]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	6713      	str	r3, [r2, #112]	; 0x70
 80058d4:	4b57      	ldr	r3, [pc, #348]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 80058d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d8:	4a56      	ldr	r2, [pc, #344]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 80058da:	f023 0304 	bic.w	r3, r3, #4
 80058de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d015      	beq.n	8005914 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e8:	f7fd fdbc 	bl	8003464 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ee:	e00a      	b.n	8005906 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f0:	f7fd fdb8 	bl	8003464 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fe:	4293      	cmp	r3, r2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e0d7      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005906:	4b4b      	ldr	r3, [pc, #300]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d0ee      	beq.n	80058f0 <HAL_RCC_OscConfig+0x368>
 8005912:	e014      	b.n	800593e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005914:	f7fd fda6 	bl	8003464 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800591a:	e00a      	b.n	8005932 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800591c:	f7fd fda2 	bl	8003464 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f241 3288 	movw	r2, #5000	; 0x1388
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e0c1      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005932:	4b40      	ldr	r3, [pc, #256]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1ee      	bne.n	800591c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800593e:	7dfb      	ldrb	r3, [r7, #23]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d105      	bne.n	8005950 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005944:	4b3b      	ldr	r3, [pc, #236]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	4a3a      	ldr	r2, [pc, #232]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 800594a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800594e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80ad 	beq.w	8005ab4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800595a:	4b36      	ldr	r3, [pc, #216]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 030c 	and.w	r3, r3, #12
 8005962:	2b08      	cmp	r3, #8
 8005964:	d060      	beq.n	8005a28 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d145      	bne.n	80059fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800596e:	4b33      	ldr	r3, [pc, #204]	; (8005a3c <HAL_RCC_OscConfig+0x4b4>)
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005974:	f7fd fd76 	bl	8003464 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800597a:	e008      	b.n	800598e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800597c:	f7fd fd72 	bl	8003464 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	2b02      	cmp	r3, #2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e093      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598e:	4b29      	ldr	r3, [pc, #164]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1f0      	bne.n	800597c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a8:	019b      	lsls	r3, r3, #6
 80059aa:	431a      	orrs	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	3b01      	subs	r3, #1
 80059b4:	041b      	lsls	r3, r3, #16
 80059b6:	431a      	orrs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	061b      	lsls	r3, r3, #24
 80059be:	431a      	orrs	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	071b      	lsls	r3, r3, #28
 80059c6:	491b      	ldr	r1, [pc, #108]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059cc:	4b1b      	ldr	r3, [pc, #108]	; (8005a3c <HAL_RCC_OscConfig+0x4b4>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d2:	f7fd fd47 	bl	8003464 <HAL_GetTick>
 80059d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059da:	f7fd fd43 	bl	8003464 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e064      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ec:	4b11      	ldr	r3, [pc, #68]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f0      	beq.n	80059da <HAL_RCC_OscConfig+0x452>
 80059f8:	e05c      	b.n	8005ab4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059fa:	4b10      	ldr	r3, [pc, #64]	; (8005a3c <HAL_RCC_OscConfig+0x4b4>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a00:	f7fd fd30 	bl	8003464 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a08:	f7fd fd2c 	bl	8003464 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e04d      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a1a:	4b06      	ldr	r3, [pc, #24]	; (8005a34 <HAL_RCC_OscConfig+0x4ac>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f0      	bne.n	8005a08 <HAL_RCC_OscConfig+0x480>
 8005a26:	e045      	b.n	8005ab4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d107      	bne.n	8005a40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e040      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
 8005a34:	40023800 	.word	0x40023800
 8005a38:	40007000 	.word	0x40007000
 8005a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a40:	4b1f      	ldr	r3, [pc, #124]	; (8005ac0 <HAL_RCC_OscConfig+0x538>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d030      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d129      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d122      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a70:	4013      	ands	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d119      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	085b      	lsrs	r3, r3, #1
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d10f      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d107      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40023800 	.word	0x40023800

08005ac4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e07b      	b.n	8005bce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d108      	bne.n	8005af0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ae6:	d009      	beq.n	8005afc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	61da      	str	r2, [r3, #28]
 8005aee:	e005      	b.n	8005afc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f7fd f88e 	bl	8002c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2202      	movs	r2, #2
 8005b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b44:	431a      	orrs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b4e:	431a      	orrs	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	431a      	orrs	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	431a      	orrs	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b6c:	431a      	orrs	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b76:	431a      	orrs	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b80:	ea42 0103 	orr.w	r1, r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	0c1b      	lsrs	r3, r3, #16
 8005b9a:	f003 0104 	and.w	r1, r3, #4
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	f003 0210 	and.w	r2, r3, #16
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	69da      	ldr	r2, [r3, #28]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b088      	sub	sp, #32
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <HAL_SPI_Transmit+0x22>
 8005bf4:	2302      	movs	r3, #2
 8005bf6:	e126      	b.n	8005e46 <HAL_SPI_Transmit+0x270>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c00:	f7fd fc30 	bl	8003464 <HAL_GetTick>
 8005c04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d002      	beq.n	8005c1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c16:	2302      	movs	r3, #2
 8005c18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c1a:	e10b      	b.n	8005e34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <HAL_SPI_Transmit+0x52>
 8005c22:	88fb      	ldrh	r3, [r7, #6]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d102      	bne.n	8005c2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c2c:	e102      	b.n	8005e34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2203      	movs	r2, #3
 8005c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	88fa      	ldrh	r2, [r7, #6]
 8005c46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	88fa      	ldrh	r2, [r7, #6]
 8005c4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c74:	d10f      	bne.n	8005c96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca0:	2b40      	cmp	r3, #64	; 0x40
 8005ca2:	d007      	beq.n	8005cb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cbc:	d14b      	bne.n	8005d56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <HAL_SPI_Transmit+0xf6>
 8005cc6:	8afb      	ldrh	r3, [r7, #22]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d13e      	bne.n	8005d4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd0:	881a      	ldrh	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	1c9a      	adds	r2, r3, #2
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	3b01      	subs	r3, #1
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005cf0:	e02b      	b.n	8005d4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d112      	bne.n	8005d26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	881a      	ldrh	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d10:	1c9a      	adds	r2, r3, #2
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	86da      	strh	r2, [r3, #54]	; 0x36
 8005d24:	e011      	b.n	8005d4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d26:	f7fd fb9d 	bl	8003464 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d803      	bhi.n	8005d3e <HAL_SPI_Transmit+0x168>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3c:	d102      	bne.n	8005d44 <HAL_SPI_Transmit+0x16e>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d102      	bne.n	8005d4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d48:	e074      	b.n	8005e34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1ce      	bne.n	8005cf2 <HAL_SPI_Transmit+0x11c>
 8005d54:	e04c      	b.n	8005df0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <HAL_SPI_Transmit+0x18e>
 8005d5e:	8afb      	ldrh	r3, [r7, #22]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d140      	bne.n	8005de6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	7812      	ldrb	r2, [r2, #0]
 8005d70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005d8a:	e02c      	b.n	8005de6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d113      	bne.n	8005dc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	330c      	adds	r3, #12
 8005da4:	7812      	ldrb	r2, [r2, #0]
 8005da6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005dc0:	e011      	b.n	8005de6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc2:	f7fd fb4f 	bl	8003464 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d803      	bhi.n	8005dda <HAL_SPI_Transmit+0x204>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d102      	bne.n	8005de0 <HAL_SPI_Transmit+0x20a>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d102      	bne.n	8005de6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005de4:	e026      	b.n	8005e34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1cd      	bne.n	8005d8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	68f8      	ldr	r0, [r7, #12]
 8005df6:	f000 fa55 	bl	80062a4 <SPI_EndRxTxTransaction>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2220      	movs	r2, #32
 8005e04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	613b      	str	r3, [r7, #16]
 8005e22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	77fb      	strb	r3, [r7, #31]
 8005e30:	e000      	b.n	8005e34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005e32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3720      	adds	r7, #32
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b08c      	sub	sp, #48	; 0x30
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e60:	2300      	movs	r3, #0
 8005e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_SPI_TransmitReceive+0x26>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e18a      	b.n	800618a <HAL_SPI_TransmitReceive+0x33c>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e7c:	f7fd faf2 	bl	8003464 <HAL_GetTick>
 8005e80:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e92:	887b      	ldrh	r3, [r7, #2]
 8005e94:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d00f      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x70>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ea4:	d107      	bne.n	8005eb6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d103      	bne.n	8005eb6 <HAL_SPI_TransmitReceive+0x68>
 8005eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d003      	beq.n	8005ebe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ebc:	e15b      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x82>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <HAL_SPI_TransmitReceive+0x82>
 8005eca:	887b      	ldrh	r3, [r7, #2]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ed6:	e14e      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d003      	beq.n	8005eec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2205      	movs	r2, #5
 8005ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	887a      	ldrh	r2, [r7, #2]
 8005efc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	887a      	ldrh	r2, [r7, #2]
 8005f02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	887a      	ldrh	r2, [r7, #2]
 8005f0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	887a      	ldrh	r2, [r7, #2]
 8005f14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	d007      	beq.n	8005f40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f48:	d178      	bne.n	800603c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_SPI_TransmitReceive+0x10a>
 8005f52:	8b7b      	ldrh	r3, [r7, #26]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d166      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	881a      	ldrh	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	1c9a      	adds	r2, r3, #2
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f7c:	e053      	b.n	8006026 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d11b      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x176>
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d016      	beq.n	8005fc4 <HAL_SPI_TransmitReceive+0x176>
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d113      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	881a      	ldrh	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	1c9a      	adds	r2, r3, #2
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d119      	bne.n	8006006 <HAL_SPI_TransmitReceive+0x1b8>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d014      	beq.n	8006006 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	b292      	uxth	r2, r2
 8005fe8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	1c9a      	adds	r2, r3, #2
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006002:	2301      	movs	r3, #1
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006006:	f7fd fa2d 	bl	8003464 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006012:	429a      	cmp	r2, r3
 8006014:	d807      	bhi.n	8006026 <HAL_SPI_TransmitReceive+0x1d8>
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d003      	beq.n	8006026 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006024:	e0a7      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1a6      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x130>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1a1      	bne.n	8005f7e <HAL_SPI_TransmitReceive+0x130>
 800603a:	e07c      	b.n	8006136 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <HAL_SPI_TransmitReceive+0x1fc>
 8006044:	8b7b      	ldrh	r3, [r7, #26]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d16b      	bne.n	8006122 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	7812      	ldrb	r2, [r2, #0]
 8006056:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006070:	e057      	b.n	8006122 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b02      	cmp	r3, #2
 800607e:	d11c      	bne.n	80060ba <HAL_SPI_TransmitReceive+0x26c>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006084:	b29b      	uxth	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d017      	beq.n	80060ba <HAL_SPI_TransmitReceive+0x26c>
 800608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d114      	bne.n	80060ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	7812      	ldrb	r2, [r2, #0]
 800609c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	3b01      	subs	r3, #1
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d119      	bne.n	80060fc <HAL_SPI_TransmitReceive+0x2ae>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d014      	beq.n	80060fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060f8:	2301      	movs	r3, #1
 80060fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060fc:	f7fd f9b2 	bl	8003464 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006108:	429a      	cmp	r2, r3
 800610a:	d803      	bhi.n	8006114 <HAL_SPI_TransmitReceive+0x2c6>
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006112:	d102      	bne.n	800611a <HAL_SPI_TransmitReceive+0x2cc>
 8006114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006116:	2b00      	cmp	r3, #0
 8006118:	d103      	bne.n	8006122 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006120:	e029      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1a2      	bne.n	8006072 <HAL_SPI_TransmitReceive+0x224>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d19d      	bne.n	8006072 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006138:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 f8b2 	bl	80062a4 <SPI_EndRxTxTransaction>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d006      	beq.n	8006154 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006152:	e010      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10b      	bne.n	8006174 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800615c:	2300      	movs	r3, #0
 800615e:	617b      	str	r3, [r7, #20]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	e000      	b.n	8006176 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006174:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006186:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800618a:	4618      	mov	r0, r3
 800618c:	3730      	adds	r7, #48	; 0x30
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
	...

08006194 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	603b      	str	r3, [r7, #0]
 80061a0:	4613      	mov	r3, r2
 80061a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061a4:	f7fd f95e 	bl	8003464 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	4413      	add	r3, r2
 80061b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061b4:	f7fd f956 	bl	8003464 <HAL_GetTick>
 80061b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061ba:	4b39      	ldr	r3, [pc, #228]	; (80062a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	015b      	lsls	r3, r3, #5
 80061c0:	0d1b      	lsrs	r3, r3, #20
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	fb02 f303 	mul.w	r3, r2, r3
 80061c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ca:	e054      	b.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d050      	beq.n	8006276 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061d4:	f7fd f946 	bl	8003464 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d902      	bls.n	80061ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d13d      	bne.n	8006266 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006202:	d111      	bne.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800620c:	d004      	beq.n	8006218 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006216:	d107      	bne.n	8006228 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006226:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006230:	d10f      	bne.n	8006252 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006240:	601a      	str	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006250:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2201      	movs	r2, #1
 8006256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e017      	b.n	8006296 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	3b01      	subs	r3, #1
 8006274:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4013      	ands	r3, r2
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	429a      	cmp	r2, r3
 8006284:	bf0c      	ite	eq
 8006286:	2301      	moveq	r3, #1
 8006288:	2300      	movne	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	461a      	mov	r2, r3
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	429a      	cmp	r2, r3
 8006292:	d19b      	bne.n	80061cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3720      	adds	r7, #32
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000004 	.word	0x20000004

080062a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062b0:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <SPI_EndRxTxTransaction+0x7c>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <SPI_EndRxTxTransaction+0x80>)
 80062b6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ba:	0d5b      	lsrs	r3, r3, #21
 80062bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80062c0:	fb02 f303 	mul.w	r3, r2, r3
 80062c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062ce:	d112      	bne.n	80062f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2200      	movs	r2, #0
 80062d8:	2180      	movs	r1, #128	; 0x80
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f7ff ff5a 	bl	8006194 <SPI_WaitFlagStateUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d016      	beq.n	8006314 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ea:	f043 0220 	orr.w	r2, r3, #32
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e00f      	b.n	8006316 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	3b01      	subs	r3, #1
 8006300:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800630c:	2b80      	cmp	r3, #128	; 0x80
 800630e:	d0f2      	beq.n	80062f6 <SPI_EndRxTxTransaction+0x52>
 8006310:	e000      	b.n	8006314 <SPI_EndRxTxTransaction+0x70>
        break;
 8006312:	bf00      	nop
  }

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000004 	.word	0x20000004
 8006324:	165e9f81 	.word	0x165e9f81

08006328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006336:	2301      	movs	r3, #1
 8006338:	e041      	b.n	80063be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d106      	bne.n	8006354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fc fdc2 	bl	8002ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3304      	adds	r3, #4
 8006364:	4619      	mov	r1, r3
 8006366:	4610      	mov	r0, r2
 8006368:	f001 f814 	bl	8007394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3708      	adds	r7, #8
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d001      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e04e      	b.n	800647e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a23      	ldr	r2, [pc, #140]	; (800648c <HAL_TIM_Base_Start_IT+0xc4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d022      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640a:	d01d      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <HAL_TIM_Base_Start_IT+0xc8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d018      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <HAL_TIM_Base_Start_IT+0xcc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1c      	ldr	r2, [pc, #112]	; (8006498 <HAL_TIM_Base_Start_IT+0xd0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00e      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1b      	ldr	r2, [pc, #108]	; (800649c <HAL_TIM_Base_Start_IT+0xd4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d009      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a19      	ldr	r2, [pc, #100]	; (80064a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d004      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d111      	bne.n	800646c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b06      	cmp	r3, #6
 8006458:	d010      	beq.n	800647c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0201 	orr.w	r2, r2, #1
 8006468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646a:	e007      	b.n	800647c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	40000400 	.word	0x40000400
 8006494:	40000800 	.word	0x40000800
 8006498:	40000c00 	.word	0x40000c00
 800649c:	40010400 	.word	0x40010400
 80064a0:	40014000 	.word	0x40014000
 80064a4:	40001800 	.word	0x40001800

080064a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0201 	bic.w	r2, r2, #1
 80064be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6a1a      	ldr	r2, [r3, #32]
 80064c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80064ca:	4013      	ands	r3, r2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10f      	bne.n	80064f0 <HAL_TIM_Base_Stop_IT+0x48>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6a1a      	ldr	r2, [r3, #32]
 80064d6:	f240 4344 	movw	r3, #1092	; 0x444
 80064da:	4013      	ands	r3, r2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d107      	bne.n	80064f0 <HAL_TIM_Base_Stop_IT+0x48>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0201 	bic.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b082      	sub	sp, #8
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e041      	b.n	800659c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d106      	bne.n	8006532 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f839 	bl	80065a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	3304      	adds	r3, #4
 8006542:	4619      	mov	r1, r3
 8006544:	4610      	mov	r0, r2
 8006546:	f000 ff25 	bl	8007394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <HAL_TIM_PWM_Start+0x24>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	bf14      	ite	ne
 80065d4:	2301      	movne	r3, #1
 80065d6:	2300      	moveq	r3, #0
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	e022      	b.n	8006622 <HAL_TIM_PWM_Start+0x6a>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	2b04      	cmp	r3, #4
 80065e0:	d109      	bne.n	80065f6 <HAL_TIM_PWM_Start+0x3e>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	bf14      	ite	ne
 80065ee:	2301      	movne	r3, #1
 80065f0:	2300      	moveq	r3, #0
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	e015      	b.n	8006622 <HAL_TIM_PWM_Start+0x6a>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d109      	bne.n	8006610 <HAL_TIM_PWM_Start+0x58>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	bf14      	ite	ne
 8006608:	2301      	movne	r3, #1
 800660a:	2300      	moveq	r3, #0
 800660c:	b2db      	uxtb	r3, r3
 800660e:	e008      	b.n	8006622 <HAL_TIM_PWM_Start+0x6a>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b01      	cmp	r3, #1
 800661a:	bf14      	ite	ne
 800661c:	2301      	movne	r3, #1
 800661e:	2300      	moveq	r3, #0
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e07c      	b.n	8006724 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d104      	bne.n	800663a <HAL_TIM_PWM_Start+0x82>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006638:	e013      	b.n	8006662 <HAL_TIM_PWM_Start+0xaa>
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	2b04      	cmp	r3, #4
 800663e:	d104      	bne.n	800664a <HAL_TIM_PWM_Start+0x92>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006648:	e00b      	b.n	8006662 <HAL_TIM_PWM_Start+0xaa>
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b08      	cmp	r3, #8
 800664e:	d104      	bne.n	800665a <HAL_TIM_PWM_Start+0xa2>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006658:	e003      	b.n	8006662 <HAL_TIM_PWM_Start+0xaa>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2201      	movs	r2, #1
 8006668:	6839      	ldr	r1, [r7, #0]
 800666a:	4618      	mov	r0, r3
 800666c:	f001 fb38 	bl	8007ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a2d      	ldr	r2, [pc, #180]	; (800672c <HAL_TIM_PWM_Start+0x174>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <HAL_TIM_PWM_Start+0xcc>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2c      	ldr	r2, [pc, #176]	; (8006730 <HAL_TIM_PWM_Start+0x178>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d101      	bne.n	8006688 <HAL_TIM_PWM_Start+0xd0>
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <HAL_TIM_PWM_Start+0xd2>
 8006688:	2300      	movs	r3, #0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d007      	beq.n	800669e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800669c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a22      	ldr	r2, [pc, #136]	; (800672c <HAL_TIM_PWM_Start+0x174>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d022      	beq.n	80066ee <HAL_TIM_PWM_Start+0x136>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b0:	d01d      	beq.n	80066ee <HAL_TIM_PWM_Start+0x136>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a1f      	ldr	r2, [pc, #124]	; (8006734 <HAL_TIM_PWM_Start+0x17c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d018      	beq.n	80066ee <HAL_TIM_PWM_Start+0x136>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a1d      	ldr	r2, [pc, #116]	; (8006738 <HAL_TIM_PWM_Start+0x180>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d013      	beq.n	80066ee <HAL_TIM_PWM_Start+0x136>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1c      	ldr	r2, [pc, #112]	; (800673c <HAL_TIM_PWM_Start+0x184>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d00e      	beq.n	80066ee <HAL_TIM_PWM_Start+0x136>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a16      	ldr	r2, [pc, #88]	; (8006730 <HAL_TIM_PWM_Start+0x178>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d009      	beq.n	80066ee <HAL_TIM_PWM_Start+0x136>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a18      	ldr	r2, [pc, #96]	; (8006740 <HAL_TIM_PWM_Start+0x188>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d004      	beq.n	80066ee <HAL_TIM_PWM_Start+0x136>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a16      	ldr	r2, [pc, #88]	; (8006744 <HAL_TIM_PWM_Start+0x18c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d111      	bne.n	8006712 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b06      	cmp	r3, #6
 80066fe:	d010      	beq.n	8006722 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006710:	e007      	b.n	8006722 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0201 	orr.w	r2, r2, #1
 8006720:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	40010000 	.word	0x40010000
 8006730:	40010400 	.word	0x40010400
 8006734:	40000400 	.word	0x40000400
 8006738:	40000800 	.word	0x40000800
 800673c:	40000c00 	.word	0x40000c00
 8006740:	40014000 	.word	0x40014000
 8006744:	40001800 	.word	0x40001800

08006748 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d101      	bne.n	800675a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e041      	b.n	80067de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d106      	bne.n	8006774 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fc fb64 	bl	8002e3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f000 fe04 	bl	8007394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <HAL_TIM_IC_Start+0x1a>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	e013      	b.n	800682a <HAL_TIM_IC_Start+0x42>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b04      	cmp	r3, #4
 8006806:	d104      	bne.n	8006812 <HAL_TIM_IC_Start+0x2a>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800680e:	b2db      	uxtb	r3, r3
 8006810:	e00b      	b.n	800682a <HAL_TIM_IC_Start+0x42>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b08      	cmp	r3, #8
 8006816:	d104      	bne.n	8006822 <HAL_TIM_IC_Start+0x3a>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800681e:	b2db      	uxtb	r3, r3
 8006820:	e003      	b.n	800682a <HAL_TIM_IC_Start+0x42>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006828:	b2db      	uxtb	r3, r3
 800682a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d104      	bne.n	800683c <HAL_TIM_IC_Start+0x54>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006838:	b2db      	uxtb	r3, r3
 800683a:	e013      	b.n	8006864 <HAL_TIM_IC_Start+0x7c>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b04      	cmp	r3, #4
 8006840:	d104      	bne.n	800684c <HAL_TIM_IC_Start+0x64>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006848:	b2db      	uxtb	r3, r3
 800684a:	e00b      	b.n	8006864 <HAL_TIM_IC_Start+0x7c>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b08      	cmp	r3, #8
 8006850:	d104      	bne.n	800685c <HAL_TIM_IC_Start+0x74>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006858:	b2db      	uxtb	r3, r3
 800685a:	e003      	b.n	8006864 <HAL_TIM_IC_Start+0x7c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006862:	b2db      	uxtb	r3, r3
 8006864:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006866:	7bfb      	ldrb	r3, [r7, #15]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d102      	bne.n	8006872 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800686c:	7bbb      	ldrb	r3, [r7, #14]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d001      	beq.n	8006876 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e081      	b.n	800697a <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d104      	bne.n	8006886 <HAL_TIM_IC_Start+0x9e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006884:	e013      	b.n	80068ae <HAL_TIM_IC_Start+0xc6>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	2b04      	cmp	r3, #4
 800688a:	d104      	bne.n	8006896 <HAL_TIM_IC_Start+0xae>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2202      	movs	r2, #2
 8006890:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006894:	e00b      	b.n	80068ae <HAL_TIM_IC_Start+0xc6>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b08      	cmp	r3, #8
 800689a:	d104      	bne.n	80068a6 <HAL_TIM_IC_Start+0xbe>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068a4:	e003      	b.n	80068ae <HAL_TIM_IC_Start+0xc6>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2202      	movs	r2, #2
 80068aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d104      	bne.n	80068be <HAL_TIM_IC_Start+0xd6>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068bc:	e013      	b.n	80068e6 <HAL_TIM_IC_Start+0xfe>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b04      	cmp	r3, #4
 80068c2:	d104      	bne.n	80068ce <HAL_TIM_IC_Start+0xe6>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068cc:	e00b      	b.n	80068e6 <HAL_TIM_IC_Start+0xfe>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d104      	bne.n	80068de <HAL_TIM_IC_Start+0xf6>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068dc:	e003      	b.n	80068e6 <HAL_TIM_IC_Start+0xfe>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2202      	movs	r2, #2
 80068e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2201      	movs	r2, #1
 80068ec:	6839      	ldr	r1, [r7, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f001 f9f6 	bl	8007ce0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a22      	ldr	r2, [pc, #136]	; (8006984 <HAL_TIM_IC_Start+0x19c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d022      	beq.n	8006944 <HAL_TIM_IC_Start+0x15c>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006906:	d01d      	beq.n	8006944 <HAL_TIM_IC_Start+0x15c>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a1e      	ldr	r2, [pc, #120]	; (8006988 <HAL_TIM_IC_Start+0x1a0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d018      	beq.n	8006944 <HAL_TIM_IC_Start+0x15c>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a1d      	ldr	r2, [pc, #116]	; (800698c <HAL_TIM_IC_Start+0x1a4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d013      	beq.n	8006944 <HAL_TIM_IC_Start+0x15c>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <HAL_TIM_IC_Start+0x1a8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00e      	beq.n	8006944 <HAL_TIM_IC_Start+0x15c>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1a      	ldr	r2, [pc, #104]	; (8006994 <HAL_TIM_IC_Start+0x1ac>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d009      	beq.n	8006944 <HAL_TIM_IC_Start+0x15c>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a18      	ldr	r2, [pc, #96]	; (8006998 <HAL_TIM_IC_Start+0x1b0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d004      	beq.n	8006944 <HAL_TIM_IC_Start+0x15c>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a17      	ldr	r2, [pc, #92]	; (800699c <HAL_TIM_IC_Start+0x1b4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d111      	bne.n	8006968 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f003 0307 	and.w	r3, r3, #7
 800694e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b06      	cmp	r3, #6
 8006954:	d010      	beq.n	8006978 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0201 	orr.w	r2, r2, #1
 8006964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006966:	e007      	b.n	8006978 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0201 	orr.w	r2, r2, #1
 8006976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40010000 	.word	0x40010000
 8006988:	40000400 	.word	0x40000400
 800698c:	40000800 	.word	0x40000800
 8006990:	40000c00 	.word	0x40000c00
 8006994:	40010400 	.word	0x40010400
 8006998:	40014000 	.word	0x40014000
 800699c:	40001800 	.word	0x40001800

080069a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <HAL_TIM_IC_Start_IT+0x1e>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	e013      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x46>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d104      	bne.n	80069ce <HAL_TIM_IC_Start_IT+0x2e>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	e00b      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x46>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d104      	bne.n	80069de <HAL_TIM_IC_Start_IT+0x3e>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	e003      	b.n	80069e6 <HAL_TIM_IC_Start_IT+0x46>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <HAL_TIM_IC_Start_IT+0x58>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	e013      	b.n	8006a20 <HAL_TIM_IC_Start_IT+0x80>
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d104      	bne.n	8006a08 <HAL_TIM_IC_Start_IT+0x68>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	e00b      	b.n	8006a20 <HAL_TIM_IC_Start_IT+0x80>
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	2b08      	cmp	r3, #8
 8006a0c:	d104      	bne.n	8006a18 <HAL_TIM_IC_Start_IT+0x78>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	e003      	b.n	8006a20 <HAL_TIM_IC_Start_IT+0x80>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a22:	7bbb      	ldrb	r3, [r7, #14]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d102      	bne.n	8006a2e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a28:	7b7b      	ldrb	r3, [r7, #13]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d001      	beq.n	8006a32 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e0cc      	b.n	8006bcc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d104      	bne.n	8006a42 <HAL_TIM_IC_Start_IT+0xa2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a40:	e013      	b.n	8006a6a <HAL_TIM_IC_Start_IT+0xca>
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d104      	bne.n	8006a52 <HAL_TIM_IC_Start_IT+0xb2>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a50:	e00b      	b.n	8006a6a <HAL_TIM_IC_Start_IT+0xca>
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d104      	bne.n	8006a62 <HAL_TIM_IC_Start_IT+0xc2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a60:	e003      	b.n	8006a6a <HAL_TIM_IC_Start_IT+0xca>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2202      	movs	r2, #2
 8006a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d104      	bne.n	8006a7a <HAL_TIM_IC_Start_IT+0xda>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a78:	e013      	b.n	8006aa2 <HAL_TIM_IC_Start_IT+0x102>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d104      	bne.n	8006a8a <HAL_TIM_IC_Start_IT+0xea>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a88:	e00b      	b.n	8006aa2 <HAL_TIM_IC_Start_IT+0x102>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d104      	bne.n	8006a9a <HAL_TIM_IC_Start_IT+0xfa>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a98:	e003      	b.n	8006aa2 <HAL_TIM_IC_Start_IT+0x102>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b0c      	cmp	r3, #12
 8006aa6:	d841      	bhi.n	8006b2c <HAL_TIM_IC_Start_IT+0x18c>
 8006aa8:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <HAL_TIM_IC_Start_IT+0x110>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006ae5 	.word	0x08006ae5
 8006ab4:	08006b2d 	.word	0x08006b2d
 8006ab8:	08006b2d 	.word	0x08006b2d
 8006abc:	08006b2d 	.word	0x08006b2d
 8006ac0:	08006af7 	.word	0x08006af7
 8006ac4:	08006b2d 	.word	0x08006b2d
 8006ac8:	08006b2d 	.word	0x08006b2d
 8006acc:	08006b2d 	.word	0x08006b2d
 8006ad0:	08006b09 	.word	0x08006b09
 8006ad4:	08006b2d 	.word	0x08006b2d
 8006ad8:	08006b2d 	.word	0x08006b2d
 8006adc:	08006b2d 	.word	0x08006b2d
 8006ae0:	08006b1b 	.word	0x08006b1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0202 	orr.w	r2, r2, #2
 8006af2:	60da      	str	r2, [r3, #12]
      break;
 8006af4:	e01d      	b.n	8006b32 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f042 0204 	orr.w	r2, r2, #4
 8006b04:	60da      	str	r2, [r3, #12]
      break;
 8006b06:	e014      	b.n	8006b32 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f042 0208 	orr.w	r2, r2, #8
 8006b16:	60da      	str	r2, [r3, #12]
      break;
 8006b18:	e00b      	b.n	8006b32 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68da      	ldr	r2, [r3, #12]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f042 0210 	orr.w	r2, r2, #16
 8006b28:	60da      	str	r2, [r3, #12]
      break;
 8006b2a:	e002      	b.n	8006b32 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b30:	bf00      	nop
  }

  if (status == HAL_OK)
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d148      	bne.n	8006bca <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f001 f8cd 	bl	8007ce0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a22      	ldr	r2, [pc, #136]	; (8006bd4 <HAL_TIM_IC_Start_IT+0x234>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d022      	beq.n	8006b96 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b58:	d01d      	beq.n	8006b96 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a1e      	ldr	r2, [pc, #120]	; (8006bd8 <HAL_TIM_IC_Start_IT+0x238>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d018      	beq.n	8006b96 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a1c      	ldr	r2, [pc, #112]	; (8006bdc <HAL_TIM_IC_Start_IT+0x23c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d013      	beq.n	8006b96 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1b      	ldr	r2, [pc, #108]	; (8006be0 <HAL_TIM_IC_Start_IT+0x240>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00e      	beq.n	8006b96 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <HAL_TIM_IC_Start_IT+0x244>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d009      	beq.n	8006b96 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <HAL_TIM_IC_Start_IT+0x248>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d004      	beq.n	8006b96 <HAL_TIM_IC_Start_IT+0x1f6>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a16      	ldr	r2, [pc, #88]	; (8006bec <HAL_TIM_IC_Start_IT+0x24c>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d111      	bne.n	8006bba <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	2b06      	cmp	r3, #6
 8006ba6:	d010      	beq.n	8006bca <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0201 	orr.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb8:	e007      	b.n	8006bca <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0201 	orr.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	40010000 	.word	0x40010000
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40000c00 	.word	0x40000c00
 8006be4:	40010400 	.word	0x40010400
 8006be8:	40014000 	.word	0x40014000
 8006bec:	40001800 	.word	0x40001800

08006bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d122      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0302 	and.w	r3, r3, #2
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d11b      	bne.n	8006c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0202 	mvn.w	r2, #2
 8006c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fb fd5e 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 8006c38:	e005      	b.n	8006c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fb8c 	bl	8007358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fb93 	bl	800736c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f003 0304 	and.w	r3, r3, #4
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d122      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b04      	cmp	r3, #4
 8006c66:	d11b      	bne.n	8006ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f06f 0204 	mvn.w	r2, #4
 8006c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f7fb fd34 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 8006c8c:	e005      	b.n	8006c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fb62 	bl	8007358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fb69 	bl	800736c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d122      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	f003 0308 	and.w	r3, r3, #8
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d11b      	bne.n	8006cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f06f 0208 	mvn.w	r2, #8
 8006cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2204      	movs	r2, #4
 8006cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7fb fd0a 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 8006ce0:	e005      	b.n	8006cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fb38 	bl	8007358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fb3f 	bl	800736c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	f003 0310 	and.w	r3, r3, #16
 8006cfe:	2b10      	cmp	r3, #16
 8006d00:	d122      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0310 	and.w	r3, r3, #16
 8006d0c:	2b10      	cmp	r3, #16
 8006d0e:	d11b      	bne.n	8006d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f06f 0210 	mvn.w	r2, #16
 8006d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2208      	movs	r2, #8
 8006d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fb fce0 	bl	80026f4 <HAL_TIM_IC_CaptureCallback>
 8006d34:	e005      	b.n	8006d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 fb0e 	bl	8007358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fb15 	bl	800736c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d10e      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d107      	bne.n	8006d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f06f 0201 	mvn.w	r2, #1
 8006d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fb fc8a 	bl	8002688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	d10e      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8c:	2b80      	cmp	r3, #128	; 0x80
 8006d8e:	d107      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 f84c 	bl	8007e38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006daa:	2b40      	cmp	r3, #64	; 0x40
 8006dac:	d10e      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db8:	2b40      	cmp	r3, #64	; 0x40
 8006dba:	d107      	bne.n	8006dcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fada 	bl	8007380 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0320 	and.w	r3, r3, #32
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	d10e      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f003 0320 	and.w	r3, r3, #32
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d107      	bne.n	8006df8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f06f 0220 	mvn.w	r2, #32
 8006df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 f816 	bl	8007e24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006df8:	bf00      	nop
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e088      	b.n	8006f30 <HAL_TIM_IC_ConfigChannel+0x130>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d11b      	bne.n	8006e64 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6819      	ldr	r1, [r3, #0]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	685a      	ldr	r2, [r3, #4]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f000 fd8c 	bl	8007958 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f022 020c 	bic.w	r2, r2, #12
 8006e4e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	6999      	ldr	r1, [r3, #24]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	689a      	ldr	r2, [r3, #8]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	619a      	str	r2, [r3, #24]
 8006e62:	e060      	b.n	8006f26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d11c      	bne.n	8006ea4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6818      	ldr	r0, [r3, #0]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	6819      	ldr	r1, [r3, #0]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f000 fe10 	bl	8007a9e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	699a      	ldr	r2, [r3, #24]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e8c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	6999      	ldr	r1, [r3, #24]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	021a      	lsls	r2, r3, #8
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	619a      	str	r2, [r3, #24]
 8006ea2:	e040      	b.n	8006f26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b08      	cmp	r3, #8
 8006ea8:	d11b      	bne.n	8006ee2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6818      	ldr	r0, [r3, #0]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	6819      	ldr	r1, [r3, #0]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	f000 fe5d 	bl	8007b78 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f022 020c 	bic.w	r2, r2, #12
 8006ecc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69d9      	ldr	r1, [r3, #28]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	61da      	str	r2, [r3, #28]
 8006ee0:	e021      	b.n	8006f26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b0c      	cmp	r3, #12
 8006ee6:	d11c      	bne.n	8006f22 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	6819      	ldr	r1, [r3, #0]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f000 fe7a 	bl	8007bf0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69da      	ldr	r2, [r3, #28]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006f0a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69d9      	ldr	r1, [r3, #28]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	021a      	lsls	r2, r3, #8
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	61da      	str	r2, [r3, #28]
 8006f20:	e001      	b.n	8006f26 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3718      	adds	r7, #24
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f44:	2300      	movs	r3, #0
 8006f46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f52:	2302      	movs	r3, #2
 8006f54:	e0ae      	b.n	80070b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b0c      	cmp	r3, #12
 8006f62:	f200 809f 	bhi.w	80070a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f66:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006fa1 	.word	0x08006fa1
 8006f70:	080070a5 	.word	0x080070a5
 8006f74:	080070a5 	.word	0x080070a5
 8006f78:	080070a5 	.word	0x080070a5
 8006f7c:	08006fe1 	.word	0x08006fe1
 8006f80:	080070a5 	.word	0x080070a5
 8006f84:	080070a5 	.word	0x080070a5
 8006f88:	080070a5 	.word	0x080070a5
 8006f8c:	08007023 	.word	0x08007023
 8006f90:	080070a5 	.word	0x080070a5
 8006f94:	080070a5 	.word	0x080070a5
 8006f98:	080070a5 	.word	0x080070a5
 8006f9c:	08007063 	.word	0x08007063
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68b9      	ldr	r1, [r7, #8]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fa94 	bl	80074d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	699a      	ldr	r2, [r3, #24]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0208 	orr.w	r2, r2, #8
 8006fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699a      	ldr	r2, [r3, #24]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0204 	bic.w	r2, r2, #4
 8006fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6999      	ldr	r1, [r3, #24]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	691a      	ldr	r2, [r3, #16]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	619a      	str	r2, [r3, #24]
      break;
 8006fde:	e064      	b.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 fae4 	bl	80075b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800700a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6999      	ldr	r1, [r3, #24]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	021a      	lsls	r2, r3, #8
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	619a      	str	r2, [r3, #24]
      break;
 8007020:	e043      	b.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68b9      	ldr	r1, [r7, #8]
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fb39 	bl	80076a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0208 	orr.w	r2, r2, #8
 800703c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	69da      	ldr	r2, [r3, #28]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0204 	bic.w	r2, r2, #4
 800704c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69d9      	ldr	r1, [r3, #28]
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	691a      	ldr	r2, [r3, #16]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	430a      	orrs	r2, r1
 800705e:	61da      	str	r2, [r3, #28]
      break;
 8007060:	e023      	b.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68b9      	ldr	r1, [r7, #8]
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fb8d 	bl	8007788 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	69da      	ldr	r2, [r3, #28]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800707c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69da      	ldr	r2, [r3, #28]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800708c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	69d9      	ldr	r1, [r3, #28]
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	021a      	lsls	r2, r3, #8
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	61da      	str	r2, [r3, #28]
      break;
 80070a2:	e002      	b.n	80070aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	75fb      	strb	r3, [r7, #23]
      break;
 80070a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d101      	bne.n	80070d8 <HAL_TIM_ConfigClockSource+0x1c>
 80070d4:	2302      	movs	r3, #2
 80070d6:	e0b4      	b.n	8007242 <HAL_TIM_ConfigClockSource+0x186>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007110:	d03e      	beq.n	8007190 <HAL_TIM_ConfigClockSource+0xd4>
 8007112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007116:	f200 8087 	bhi.w	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 800711a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711e:	f000 8086 	beq.w	800722e <HAL_TIM_ConfigClockSource+0x172>
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007126:	d87f      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007128:	2b70      	cmp	r3, #112	; 0x70
 800712a:	d01a      	beq.n	8007162 <HAL_TIM_ConfigClockSource+0xa6>
 800712c:	2b70      	cmp	r3, #112	; 0x70
 800712e:	d87b      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007130:	2b60      	cmp	r3, #96	; 0x60
 8007132:	d050      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x11a>
 8007134:	2b60      	cmp	r3, #96	; 0x60
 8007136:	d877      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007138:	2b50      	cmp	r3, #80	; 0x50
 800713a:	d03c      	beq.n	80071b6 <HAL_TIM_ConfigClockSource+0xfa>
 800713c:	2b50      	cmp	r3, #80	; 0x50
 800713e:	d873      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	d058      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x13a>
 8007144:	2b40      	cmp	r3, #64	; 0x40
 8007146:	d86f      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007148:	2b30      	cmp	r3, #48	; 0x30
 800714a:	d064      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15a>
 800714c:	2b30      	cmp	r3, #48	; 0x30
 800714e:	d86b      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007150:	2b20      	cmp	r3, #32
 8007152:	d060      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15a>
 8007154:	2b20      	cmp	r3, #32
 8007156:	d867      	bhi.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d05c      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15a>
 800715c:	2b10      	cmp	r3, #16
 800715e:	d05a      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x15a>
 8007160:	e062      	b.n	8007228 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6818      	ldr	r0, [r3, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6899      	ldr	r1, [r3, #8]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	685a      	ldr	r2, [r3, #4]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f000 fd95 	bl	8007ca0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007184:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	609a      	str	r2, [r3, #8]
      break;
 800718e:	e04f      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	6899      	ldr	r1, [r3, #8]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	f000 fd7e 	bl	8007ca0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071b2:	609a      	str	r2, [r3, #8]
      break;
 80071b4:	e03c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	6859      	ldr	r1, [r3, #4]
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	461a      	mov	r2, r3
 80071c4:	f000 fc3c 	bl	8007a40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2150      	movs	r1, #80	; 0x50
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 fd4b 	bl	8007c6a <TIM_ITRx_SetConfig>
      break;
 80071d4:	e02c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6818      	ldr	r0, [r3, #0]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6859      	ldr	r1, [r3, #4]
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f000 fc98 	bl	8007b18 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2160      	movs	r1, #96	; 0x60
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fd3b 	bl	8007c6a <TIM_ITRx_SetConfig>
      break;
 80071f4:	e01c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	461a      	mov	r2, r3
 8007204:	f000 fc1c 	bl	8007a40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2140      	movs	r1, #64	; 0x40
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fd2b 	bl	8007c6a <TIM_ITRx_SetConfig>
      break;
 8007214:	e00c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4619      	mov	r1, r3
 8007220:	4610      	mov	r0, r2
 8007222:	f000 fd22 	bl	8007c6a <TIM_ITRx_SetConfig>
      break;
 8007226:	e003      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	73fb      	strb	r3, [r7, #15]
      break;
 800722c:	e000      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800722e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007240:	7bfb      	ldrb	r3, [r7, #15]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800725a:	2b01      	cmp	r3, #1
 800725c:	d101      	bne.n	8007262 <HAL_TIM_SlaveConfigSynchro+0x18>
 800725e:	2302      	movs	r3, #2
 8007260:	e031      	b.n	80072c6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2202      	movs	r2, #2
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fadd 	bl	8007834 <TIM_SlaveTimer_SetConfig>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d009      	beq.n	8007294 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e018      	b.n	80072c6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68da      	ldr	r2, [r3, #12]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072a2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68da      	ldr	r2, [r3, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072b2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	2b0c      	cmp	r3, #12
 80072e2:	d831      	bhi.n	8007348 <HAL_TIM_ReadCapturedValue+0x78>
 80072e4:	a201      	add	r2, pc, #4	; (adr r2, 80072ec <HAL_TIM_ReadCapturedValue+0x1c>)
 80072e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ea:	bf00      	nop
 80072ec:	08007321 	.word	0x08007321
 80072f0:	08007349 	.word	0x08007349
 80072f4:	08007349 	.word	0x08007349
 80072f8:	08007349 	.word	0x08007349
 80072fc:	0800732b 	.word	0x0800732b
 8007300:	08007349 	.word	0x08007349
 8007304:	08007349 	.word	0x08007349
 8007308:	08007349 	.word	0x08007349
 800730c:	08007335 	.word	0x08007335
 8007310:	08007349 	.word	0x08007349
 8007314:	08007349 	.word	0x08007349
 8007318:	08007349 	.word	0x08007349
 800731c:	0800733f 	.word	0x0800733f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007326:	60fb      	str	r3, [r7, #12]

      break;
 8007328:	e00f      	b.n	800734a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007330:	60fb      	str	r3, [r7, #12]

      break;
 8007332:	e00a      	b.n	800734a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733a:	60fb      	str	r3, [r7, #12]

      break;
 800733c:	e005      	b.n	800734a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	60fb      	str	r3, [r7, #12]

      break;
 8007346:	e000      	b.n	800734a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007348:	bf00      	nop
  }

  return tmpreg;
 800734a:	68fb      	ldr	r3, [r7, #12]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a40      	ldr	r2, [pc, #256]	; (80074a8 <TIM_Base_SetConfig+0x114>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d013      	beq.n	80073d4 <TIM_Base_SetConfig+0x40>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b2:	d00f      	beq.n	80073d4 <TIM_Base_SetConfig+0x40>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a3d      	ldr	r2, [pc, #244]	; (80074ac <TIM_Base_SetConfig+0x118>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d00b      	beq.n	80073d4 <TIM_Base_SetConfig+0x40>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a3c      	ldr	r2, [pc, #240]	; (80074b0 <TIM_Base_SetConfig+0x11c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d007      	beq.n	80073d4 <TIM_Base_SetConfig+0x40>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a3b      	ldr	r2, [pc, #236]	; (80074b4 <TIM_Base_SetConfig+0x120>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d003      	beq.n	80073d4 <TIM_Base_SetConfig+0x40>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a3a      	ldr	r2, [pc, #232]	; (80074b8 <TIM_Base_SetConfig+0x124>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d108      	bne.n	80073e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a2f      	ldr	r2, [pc, #188]	; (80074a8 <TIM_Base_SetConfig+0x114>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d02b      	beq.n	8007446 <TIM_Base_SetConfig+0xb2>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f4:	d027      	beq.n	8007446 <TIM_Base_SetConfig+0xb2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a2c      	ldr	r2, [pc, #176]	; (80074ac <TIM_Base_SetConfig+0x118>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d023      	beq.n	8007446 <TIM_Base_SetConfig+0xb2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a2b      	ldr	r2, [pc, #172]	; (80074b0 <TIM_Base_SetConfig+0x11c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d01f      	beq.n	8007446 <TIM_Base_SetConfig+0xb2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a2a      	ldr	r2, [pc, #168]	; (80074b4 <TIM_Base_SetConfig+0x120>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d01b      	beq.n	8007446 <TIM_Base_SetConfig+0xb2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a29      	ldr	r2, [pc, #164]	; (80074b8 <TIM_Base_SetConfig+0x124>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d017      	beq.n	8007446 <TIM_Base_SetConfig+0xb2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a28      	ldr	r2, [pc, #160]	; (80074bc <TIM_Base_SetConfig+0x128>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d013      	beq.n	8007446 <TIM_Base_SetConfig+0xb2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a27      	ldr	r2, [pc, #156]	; (80074c0 <TIM_Base_SetConfig+0x12c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00f      	beq.n	8007446 <TIM_Base_SetConfig+0xb2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a26      	ldr	r2, [pc, #152]	; (80074c4 <TIM_Base_SetConfig+0x130>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00b      	beq.n	8007446 <TIM_Base_SetConfig+0xb2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a25      	ldr	r2, [pc, #148]	; (80074c8 <TIM_Base_SetConfig+0x134>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d007      	beq.n	8007446 <TIM_Base_SetConfig+0xb2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a24      	ldr	r2, [pc, #144]	; (80074cc <TIM_Base_SetConfig+0x138>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d003      	beq.n	8007446 <TIM_Base_SetConfig+0xb2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a23      	ldr	r2, [pc, #140]	; (80074d0 <TIM_Base_SetConfig+0x13c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d108      	bne.n	8007458 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800744c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a0a      	ldr	r2, [pc, #40]	; (80074a8 <TIM_Base_SetConfig+0x114>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d003      	beq.n	800748c <TIM_Base_SetConfig+0xf8>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a0c      	ldr	r2, [pc, #48]	; (80074b8 <TIM_Base_SetConfig+0x124>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d103      	bne.n	8007494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	615a      	str	r2, [r3, #20]
}
 800749a:	bf00      	nop
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	40010000 	.word	0x40010000
 80074ac:	40000400 	.word	0x40000400
 80074b0:	40000800 	.word	0x40000800
 80074b4:	40000c00 	.word	0x40000c00
 80074b8:	40010400 	.word	0x40010400
 80074bc:	40014000 	.word	0x40014000
 80074c0:	40014400 	.word	0x40014400
 80074c4:	40014800 	.word	0x40014800
 80074c8:	40001800 	.word	0x40001800
 80074cc:	40001c00 	.word	0x40001c00
 80074d0:	40002000 	.word	0x40002000

080074d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	f023 0201 	bic.w	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0303 	bic.w	r3, r3, #3
 800750a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f023 0302 	bic.w	r3, r3, #2
 800751c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a20      	ldr	r2, [pc, #128]	; (80075ac <TIM_OC1_SetConfig+0xd8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_OC1_SetConfig+0x64>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a1f      	ldr	r2, [pc, #124]	; (80075b0 <TIM_OC1_SetConfig+0xdc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d10c      	bne.n	8007552 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f023 0308 	bic.w	r3, r3, #8
 800753e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	4313      	orrs	r3, r2
 8007548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f023 0304 	bic.w	r3, r3, #4
 8007550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a15      	ldr	r2, [pc, #84]	; (80075ac <TIM_OC1_SetConfig+0xd8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d003      	beq.n	8007562 <TIM_OC1_SetConfig+0x8e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a14      	ldr	r2, [pc, #80]	; (80075b0 <TIM_OC1_SetConfig+0xdc>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d111      	bne.n	8007586 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4313      	orrs	r3, r2
 8007584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	621a      	str	r2, [r3, #32]
}
 80075a0:	bf00      	nop
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	40010000 	.word	0x40010000
 80075b0:	40010400 	.word	0x40010400

080075b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f023 0210 	bic.w	r2, r3, #16
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	699b      	ldr	r3, [r3, #24]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	021b      	lsls	r3, r3, #8
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f023 0320 	bic.w	r3, r3, #32
 80075fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4313      	orrs	r3, r2
 800760a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a22      	ldr	r2, [pc, #136]	; (8007698 <TIM_OC2_SetConfig+0xe4>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d003      	beq.n	800761c <TIM_OC2_SetConfig+0x68>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a21      	ldr	r2, [pc, #132]	; (800769c <TIM_OC2_SetConfig+0xe8>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d10d      	bne.n	8007638 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	4313      	orrs	r3, r2
 800762e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007636:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a17      	ldr	r2, [pc, #92]	; (8007698 <TIM_OC2_SetConfig+0xe4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d003      	beq.n	8007648 <TIM_OC2_SetConfig+0x94>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a16      	ldr	r2, [pc, #88]	; (800769c <TIM_OC2_SetConfig+0xe8>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d113      	bne.n	8007670 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800764e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	4313      	orrs	r3, r2
 8007662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	4313      	orrs	r3, r2
 800766e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	693a      	ldr	r2, [r7, #16]
 8007674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	621a      	str	r2, [r3, #32]
}
 800768a:	bf00      	nop
 800768c:	371c      	adds	r7, #28
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	40010000 	.word	0x40010000
 800769c:	40010400 	.word	0x40010400

080076a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 0303 	bic.w	r3, r3, #3
 80076d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4313      	orrs	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	021b      	lsls	r3, r3, #8
 80076f0:	697a      	ldr	r2, [r7, #20]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a21      	ldr	r2, [pc, #132]	; (8007780 <TIM_OC3_SetConfig+0xe0>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_OC3_SetConfig+0x66>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a20      	ldr	r2, [pc, #128]	; (8007784 <TIM_OC3_SetConfig+0xe4>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d10d      	bne.n	8007722 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800770c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	021b      	lsls	r3, r3, #8
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	4313      	orrs	r3, r2
 8007718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a16      	ldr	r2, [pc, #88]	; (8007780 <TIM_OC3_SetConfig+0xe0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d003      	beq.n	8007732 <TIM_OC3_SetConfig+0x92>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a15      	ldr	r2, [pc, #84]	; (8007784 <TIM_OC3_SetConfig+0xe4>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d113      	bne.n	800775a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	4313      	orrs	r3, r2
 800774c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	4313      	orrs	r3, r2
 8007758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	685a      	ldr	r2, [r3, #4]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	621a      	str	r2, [r3, #32]
}
 8007774:	bf00      	nop
 8007776:	371c      	adds	r7, #28
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr
 8007780:	40010000 	.word	0x40010000
 8007784:	40010400 	.word	0x40010400

08007788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	031b      	lsls	r3, r3, #12
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	4313      	orrs	r3, r2
 80077de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a12      	ldr	r2, [pc, #72]	; (800782c <TIM_OC4_SetConfig+0xa4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d003      	beq.n	80077f0 <TIM_OC4_SetConfig+0x68>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a11      	ldr	r2, [pc, #68]	; (8007830 <TIM_OC4_SetConfig+0xa8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d109      	bne.n	8007804 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	019b      	lsls	r3, r3, #6
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	621a      	str	r2, [r3, #32]
}
 800781e:	bf00      	nop
 8007820:	371c      	adds	r7, #28
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	40010000 	.word	0x40010000
 8007830:	40010400 	.word	0x40010400

08007834 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007850:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f023 0307 	bic.w	r3, r3, #7
 8007862:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2b70      	cmp	r3, #112	; 0x70
 800787c:	d01a      	beq.n	80078b4 <TIM_SlaveTimer_SetConfig+0x80>
 800787e:	2b70      	cmp	r3, #112	; 0x70
 8007880:	d860      	bhi.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
 8007882:	2b60      	cmp	r3, #96	; 0x60
 8007884:	d054      	beq.n	8007930 <TIM_SlaveTimer_SetConfig+0xfc>
 8007886:	2b60      	cmp	r3, #96	; 0x60
 8007888:	d85c      	bhi.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
 800788a:	2b50      	cmp	r3, #80	; 0x50
 800788c:	d046      	beq.n	800791c <TIM_SlaveTimer_SetConfig+0xe8>
 800788e:	2b50      	cmp	r3, #80	; 0x50
 8007890:	d858      	bhi.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
 8007892:	2b40      	cmp	r3, #64	; 0x40
 8007894:	d019      	beq.n	80078ca <TIM_SlaveTimer_SetConfig+0x96>
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d854      	bhi.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
 800789a:	2b30      	cmp	r3, #48	; 0x30
 800789c:	d055      	beq.n	800794a <TIM_SlaveTimer_SetConfig+0x116>
 800789e:	2b30      	cmp	r3, #48	; 0x30
 80078a0:	d850      	bhi.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
 80078a2:	2b20      	cmp	r3, #32
 80078a4:	d051      	beq.n	800794a <TIM_SlaveTimer_SetConfig+0x116>
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	d84c      	bhi.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d04d      	beq.n	800794a <TIM_SlaveTimer_SetConfig+0x116>
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d04b      	beq.n	800794a <TIM_SlaveTimer_SetConfig+0x116>
 80078b2:	e047      	b.n	8007944 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	68d9      	ldr	r1, [r3, #12]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	689a      	ldr	r2, [r3, #8]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f000 f9ec 	bl	8007ca0 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80078c8:	e040      	b.n	800794c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d101      	bne.n	80078d6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e03b      	b.n	800794e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6a1a      	ldr	r2, [r3, #32]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0201 	bic.w	r2, r2, #1
 80078ec:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078fc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	4313      	orrs	r3, r2
 8007908:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	621a      	str	r2, [r3, #32]
      break;
 800791a:	e017      	b.n	800794c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	6899      	ldr	r1, [r3, #8]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	691b      	ldr	r3, [r3, #16]
 8007928:	461a      	mov	r2, r3
 800792a:	f000 f889 	bl	8007a40 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800792e:	e00d      	b.n	800794c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	6899      	ldr	r1, [r3, #8]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	461a      	mov	r2, r3
 800793e:	f000 f8eb 	bl	8007b18 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007942:	e003      	b.n	800794c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	75fb      	strb	r3, [r7, #23]
      break;
 8007948:	e000      	b.n	800794c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800794a:	bf00      	nop
  }

  return status;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
}
 800794e:	4618      	mov	r0, r3
 8007950:	3718      	adds	r7, #24
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007958:	b480      	push	{r7}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
 8007964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f023 0201 	bic.w	r2, r3, #1
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	4a28      	ldr	r2, [pc, #160]	; (8007a24 <TIM_TI1_SetConfig+0xcc>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d01b      	beq.n	80079be <TIM_TI1_SetConfig+0x66>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800798c:	d017      	beq.n	80079be <TIM_TI1_SetConfig+0x66>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	4a25      	ldr	r2, [pc, #148]	; (8007a28 <TIM_TI1_SetConfig+0xd0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d013      	beq.n	80079be <TIM_TI1_SetConfig+0x66>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	4a24      	ldr	r2, [pc, #144]	; (8007a2c <TIM_TI1_SetConfig+0xd4>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00f      	beq.n	80079be <TIM_TI1_SetConfig+0x66>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4a23      	ldr	r2, [pc, #140]	; (8007a30 <TIM_TI1_SetConfig+0xd8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00b      	beq.n	80079be <TIM_TI1_SetConfig+0x66>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4a22      	ldr	r2, [pc, #136]	; (8007a34 <TIM_TI1_SetConfig+0xdc>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d007      	beq.n	80079be <TIM_TI1_SetConfig+0x66>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	4a21      	ldr	r2, [pc, #132]	; (8007a38 <TIM_TI1_SetConfig+0xe0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d003      	beq.n	80079be <TIM_TI1_SetConfig+0x66>
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	4a20      	ldr	r2, [pc, #128]	; (8007a3c <TIM_TI1_SetConfig+0xe4>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d101      	bne.n	80079c2 <TIM_TI1_SetConfig+0x6a>
 80079be:	2301      	movs	r3, #1
 80079c0:	e000      	b.n	80079c4 <TIM_TI1_SetConfig+0x6c>
 80079c2:	2300      	movs	r3, #0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d008      	beq.n	80079da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f023 0303 	bic.w	r3, r3, #3
 80079ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]
 80079d8:	e003      	b.n	80079e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f043 0301 	orr.w	r3, r3, #1
 80079e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f023 030a 	bic.w	r3, r3, #10
 80079fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	f003 030a 	and.w	r3, r3, #10
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	693a      	ldr	r2, [r7, #16]
 8007a14:	621a      	str	r2, [r3, #32]
}
 8007a16:	bf00      	nop
 8007a18:	371c      	adds	r7, #28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	40010000 	.word	0x40010000
 8007a28:	40000400 	.word	0x40000400
 8007a2c:	40000800 	.word	0x40000800
 8007a30:	40000c00 	.word	0x40000c00
 8007a34:	40010400 	.word	0x40010400
 8007a38:	40014000 	.word	0x40014000
 8007a3c:	40001800 	.word	0x40001800

08007a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	f023 0201 	bic.w	r2, r3, #1
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	699b      	ldr	r3, [r3, #24]
 8007a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	f023 030a 	bic.w	r3, r3, #10
 8007a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	621a      	str	r2, [r3, #32]
}
 8007a92:	bf00      	nop
 8007a94:	371c      	adds	r7, #28
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b087      	sub	sp, #28
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
 8007aaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6a1b      	ldr	r3, [r3, #32]
 8007ab0:	f023 0210 	bic.w	r2, r3, #16
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	021b      	lsls	r3, r3, #8
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007adc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	031b      	lsls	r3, r3, #12
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007af0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	621a      	str	r2, [r3, #32]
}
 8007b0c:	bf00      	nop
 8007b0e:	371c      	adds	r7, #28
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	f023 0210 	bic.w	r2, r3, #16
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b42:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	031b      	lsls	r3, r3, #12
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b54:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	011b      	lsls	r3, r3, #4
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	621a      	str	r2, [r3, #32]
}
 8007b6c:	bf00      	nop
 8007b6e:	371c      	adds	r7, #28
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b087      	sub	sp, #28
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	69db      	ldr	r3, [r3, #28]
 8007b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6a1b      	ldr	r3, [r3, #32]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f023 0303 	bic.w	r3, r3, #3
 8007ba4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007bc8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	621a      	str	r2, [r3, #32]
}
 8007be4:	bf00      	nop
 8007be6:	371c      	adds	r7, #28
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
 8007c14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	021b      	lsls	r3, r3, #8
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c2e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	031b      	lsls	r3, r3, #12
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c42:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	031b      	lsls	r3, r3, #12
 8007c48:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	697a      	ldr	r2, [r7, #20]
 8007c56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	621a      	str	r2, [r3, #32]
}
 8007c5e:	bf00      	nop
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b085      	sub	sp, #20
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
 8007c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	f043 0307 	orr.w	r3, r3, #7
 8007c8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	609a      	str	r2, [r3, #8]
}
 8007c94:	bf00      	nop
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	021a      	lsls	r2, r3, #8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	609a      	str	r2, [r3, #8]
}
 8007cd4:	bf00      	nop
 8007cd6:	371c      	adds	r7, #28
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	f003 031f 	and.w	r3, r3, #31
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6a1a      	ldr	r2, [r3, #32]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	43db      	mvns	r3, r3
 8007d02:	401a      	ands	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a1a      	ldr	r2, [r3, #32]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	f003 031f 	and.w	r3, r3, #31
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	fa01 f303 	lsl.w	r3, r1, r3
 8007d18:	431a      	orrs	r2, r3
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
	...

08007d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d101      	bne.n	8007d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d40:	2302      	movs	r3, #2
 8007d42:	e05a      	b.n	8007dfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a21      	ldr	r2, [pc, #132]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d022      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d90:	d01d      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a1d      	ldr	r2, [pc, #116]	; (8007e0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d018      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a1a      	ldr	r2, [pc, #104]	; (8007e14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d00e      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d009      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a17      	ldr	r2, [pc, #92]	; (8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d004      	beq.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a15      	ldr	r2, [pc, #84]	; (8007e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d10c      	bne.n	8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
 8007e06:	bf00      	nop
 8007e08:	40010000 	.word	0x40010000
 8007e0c:	40000400 	.word	0x40000400
 8007e10:	40000800 	.word	0x40000800
 8007e14:	40000c00 	.word	0x40000c00
 8007e18:	40010400 	.word	0x40010400
 8007e1c:	40014000 	.word	0x40014000
 8007e20:	40001800 	.word	0x40001800

08007e24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e03f      	b.n	8007ede <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d106      	bne.n	8007e78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7fb f984 	bl	8003180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2224      	movs	r2, #36	; 0x24
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f929 	bl	80080e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	691a      	ldr	r2, [r3, #16]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ea4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	695a      	ldr	r2, [r3, #20]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007eb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	68da      	ldr	r2, [r3, #12]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ec4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2220      	movs	r2, #32
 8007ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007edc:	2300      	movs	r3, #0
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b08a      	sub	sp, #40	; 0x28
 8007eea:	af02      	add	r7, sp, #8
 8007eec:	60f8      	str	r0, [r7, #12]
 8007eee:	60b9      	str	r1, [r7, #8]
 8007ef0:	603b      	str	r3, [r7, #0]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d17c      	bne.n	8008000 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d002      	beq.n	8007f12 <HAL_UART_Transmit+0x2c>
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e075      	b.n	8008002 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d101      	bne.n	8007f24 <HAL_UART_Transmit+0x3e>
 8007f20:	2302      	movs	r3, #2
 8007f22:	e06e      	b.n	8008002 <HAL_UART_Transmit+0x11c>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2221      	movs	r2, #33	; 0x21
 8007f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f3a:	f7fb fa93 	bl	8003464 <HAL_GetTick>
 8007f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	88fa      	ldrh	r2, [r7, #6]
 8007f44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	88fa      	ldrh	r2, [r7, #6]
 8007f4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f54:	d108      	bne.n	8007f68 <HAL_UART_Transmit+0x82>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d104      	bne.n	8007f68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	e003      	b.n	8007f70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f78:	e02a      	b.n	8007fd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2200      	movs	r2, #0
 8007f82:	2180      	movs	r1, #128	; 0x80
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f840 	bl	800800a <UART_WaitOnFlagUntilTimeout>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e036      	b.n	8008002 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007fa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	3302      	adds	r3, #2
 8007fae:	61bb      	str	r3, [r7, #24]
 8007fb0:	e007      	b.n	8007fc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	781a      	ldrb	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1cf      	bne.n	8007f7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2140      	movs	r1, #64	; 0x40
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 f810 	bl	800800a <UART_WaitOnFlagUntilTimeout>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e006      	b.n	8008002 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e000      	b.n	8008002 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008000:	2302      	movs	r3, #2
  }
}
 8008002:	4618      	mov	r0, r3
 8008004:	3720      	adds	r7, #32
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b090      	sub	sp, #64	; 0x40
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	60b9      	str	r1, [r7, #8]
 8008014:	603b      	str	r3, [r7, #0]
 8008016:	4613      	mov	r3, r2
 8008018:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800801a:	e050      	b.n	80080be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800801c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800801e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008022:	d04c      	beq.n	80080be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008026:	2b00      	cmp	r3, #0
 8008028:	d007      	beq.n	800803a <UART_WaitOnFlagUntilTimeout+0x30>
 800802a:	f7fb fa1b 	bl	8003464 <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008036:	429a      	cmp	r2, r3
 8008038:	d241      	bcs.n	80080be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	330c      	adds	r3, #12
 8008040:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	e853 3f00 	ldrex	r3, [r3]
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008050:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	330c      	adds	r3, #12
 8008058:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800805a:	637a      	str	r2, [r7, #52]	; 0x34
 800805c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008060:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1e5      	bne.n	800803a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3314      	adds	r3, #20
 8008074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	e853 3f00 	ldrex	r3, [r3]
 800807c:	613b      	str	r3, [r7, #16]
   return(result);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f023 0301 	bic.w	r3, r3, #1
 8008084:	63bb      	str	r3, [r7, #56]	; 0x38
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3314      	adds	r3, #20
 800808c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800808e:	623a      	str	r2, [r7, #32]
 8008090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	69f9      	ldr	r1, [r7, #28]
 8008094:	6a3a      	ldr	r2, [r7, #32]
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	61bb      	str	r3, [r7, #24]
   return(result);
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e5      	bne.n	800806e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2220      	movs	r2, #32
 80080ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e00f      	b.n	80080de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4013      	ands	r3, r2
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	bf0c      	ite	eq
 80080ce:	2301      	moveq	r3, #1
 80080d0:	2300      	movne	r3, #0
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	461a      	mov	r2, r3
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d09f      	beq.n	800801c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3740      	adds	r7, #64	; 0x40
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080ec:	b0c0      	sub	sp, #256	; 0x100
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008104:	68d9      	ldr	r1, [r3, #12]
 8008106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	ea40 0301 	orr.w	r3, r0, r1
 8008110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	431a      	orrs	r2, r3
 8008120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	431a      	orrs	r2, r3
 8008128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	4313      	orrs	r3, r2
 8008130:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008140:	f021 010c 	bic.w	r1, r1, #12
 8008144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800814e:	430b      	orrs	r3, r1
 8008150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800815e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008162:	6999      	ldr	r1, [r3, #24]
 8008164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	ea40 0301 	orr.w	r3, r0, r1
 800816e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	4b8f      	ldr	r3, [pc, #572]	; (80083b4 <UART_SetConfig+0x2cc>)
 8008178:	429a      	cmp	r2, r3
 800817a:	d005      	beq.n	8008188 <UART_SetConfig+0xa0>
 800817c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	4b8d      	ldr	r3, [pc, #564]	; (80083b8 <UART_SetConfig+0x2d0>)
 8008184:	429a      	cmp	r2, r3
 8008186:	d104      	bne.n	8008192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008188:	f7fc ffba 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 800818c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008190:	e003      	b.n	800819a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008192:	f7fc ffa1 	bl	80050d8 <HAL_RCC_GetPCLK1Freq>
 8008196:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800819a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a4:	f040 810c 	bne.w	80083c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ac:	2200      	movs	r2, #0
 80081ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80081b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80081ba:	4622      	mov	r2, r4
 80081bc:	462b      	mov	r3, r5
 80081be:	1891      	adds	r1, r2, r2
 80081c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80081c2:	415b      	adcs	r3, r3
 80081c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081ca:	4621      	mov	r1, r4
 80081cc:	eb12 0801 	adds.w	r8, r2, r1
 80081d0:	4629      	mov	r1, r5
 80081d2:	eb43 0901 	adc.w	r9, r3, r1
 80081d6:	f04f 0200 	mov.w	r2, #0
 80081da:	f04f 0300 	mov.w	r3, #0
 80081de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081ea:	4690      	mov	r8, r2
 80081ec:	4699      	mov	r9, r3
 80081ee:	4623      	mov	r3, r4
 80081f0:	eb18 0303 	adds.w	r3, r8, r3
 80081f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081f8:	462b      	mov	r3, r5
 80081fa:	eb49 0303 	adc.w	r3, r9, r3
 80081fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800820e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008216:	460b      	mov	r3, r1
 8008218:	18db      	adds	r3, r3, r3
 800821a:	653b      	str	r3, [r7, #80]	; 0x50
 800821c:	4613      	mov	r3, r2
 800821e:	eb42 0303 	adc.w	r3, r2, r3
 8008222:	657b      	str	r3, [r7, #84]	; 0x54
 8008224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800822c:	f7f8 fd2c 	bl	8000c88 <__aeabi_uldivmod>
 8008230:	4602      	mov	r2, r0
 8008232:	460b      	mov	r3, r1
 8008234:	4b61      	ldr	r3, [pc, #388]	; (80083bc <UART_SetConfig+0x2d4>)
 8008236:	fba3 2302 	umull	r2, r3, r3, r2
 800823a:	095b      	lsrs	r3, r3, #5
 800823c:	011c      	lsls	r4, r3, #4
 800823e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008242:	2200      	movs	r2, #0
 8008244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008248:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800824c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008250:	4642      	mov	r2, r8
 8008252:	464b      	mov	r3, r9
 8008254:	1891      	adds	r1, r2, r2
 8008256:	64b9      	str	r1, [r7, #72]	; 0x48
 8008258:	415b      	adcs	r3, r3
 800825a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800825c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008260:	4641      	mov	r1, r8
 8008262:	eb12 0a01 	adds.w	sl, r2, r1
 8008266:	4649      	mov	r1, r9
 8008268:	eb43 0b01 	adc.w	fp, r3, r1
 800826c:	f04f 0200 	mov.w	r2, #0
 8008270:	f04f 0300 	mov.w	r3, #0
 8008274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800827c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008280:	4692      	mov	sl, r2
 8008282:	469b      	mov	fp, r3
 8008284:	4643      	mov	r3, r8
 8008286:	eb1a 0303 	adds.w	r3, sl, r3
 800828a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800828e:	464b      	mov	r3, r9
 8008290:	eb4b 0303 	adc.w	r3, fp, r3
 8008294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80082a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80082ac:	460b      	mov	r3, r1
 80082ae:	18db      	adds	r3, r3, r3
 80082b0:	643b      	str	r3, [r7, #64]	; 0x40
 80082b2:	4613      	mov	r3, r2
 80082b4:	eb42 0303 	adc.w	r3, r2, r3
 80082b8:	647b      	str	r3, [r7, #68]	; 0x44
 80082ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80082c2:	f7f8 fce1 	bl	8000c88 <__aeabi_uldivmod>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	4611      	mov	r1, r2
 80082cc:	4b3b      	ldr	r3, [pc, #236]	; (80083bc <UART_SetConfig+0x2d4>)
 80082ce:	fba3 2301 	umull	r2, r3, r3, r1
 80082d2:	095b      	lsrs	r3, r3, #5
 80082d4:	2264      	movs	r2, #100	; 0x64
 80082d6:	fb02 f303 	mul.w	r3, r2, r3
 80082da:	1acb      	subs	r3, r1, r3
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082e2:	4b36      	ldr	r3, [pc, #216]	; (80083bc <UART_SetConfig+0x2d4>)
 80082e4:	fba3 2302 	umull	r2, r3, r3, r2
 80082e8:	095b      	lsrs	r3, r3, #5
 80082ea:	005b      	lsls	r3, r3, #1
 80082ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082f0:	441c      	add	r4, r3
 80082f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80082fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008304:	4642      	mov	r2, r8
 8008306:	464b      	mov	r3, r9
 8008308:	1891      	adds	r1, r2, r2
 800830a:	63b9      	str	r1, [r7, #56]	; 0x38
 800830c:	415b      	adcs	r3, r3
 800830e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008314:	4641      	mov	r1, r8
 8008316:	1851      	adds	r1, r2, r1
 8008318:	6339      	str	r1, [r7, #48]	; 0x30
 800831a:	4649      	mov	r1, r9
 800831c:	414b      	adcs	r3, r1
 800831e:	637b      	str	r3, [r7, #52]	; 0x34
 8008320:	f04f 0200 	mov.w	r2, #0
 8008324:	f04f 0300 	mov.w	r3, #0
 8008328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800832c:	4659      	mov	r1, fp
 800832e:	00cb      	lsls	r3, r1, #3
 8008330:	4651      	mov	r1, sl
 8008332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008336:	4651      	mov	r1, sl
 8008338:	00ca      	lsls	r2, r1, #3
 800833a:	4610      	mov	r0, r2
 800833c:	4619      	mov	r1, r3
 800833e:	4603      	mov	r3, r0
 8008340:	4642      	mov	r2, r8
 8008342:	189b      	adds	r3, r3, r2
 8008344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008348:	464b      	mov	r3, r9
 800834a:	460a      	mov	r2, r1
 800834c:	eb42 0303 	adc.w	r3, r2, r3
 8008350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008360:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008368:	460b      	mov	r3, r1
 800836a:	18db      	adds	r3, r3, r3
 800836c:	62bb      	str	r3, [r7, #40]	; 0x28
 800836e:	4613      	mov	r3, r2
 8008370:	eb42 0303 	adc.w	r3, r2, r3
 8008374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800837a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800837e:	f7f8 fc83 	bl	8000c88 <__aeabi_uldivmod>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4b0d      	ldr	r3, [pc, #52]	; (80083bc <UART_SetConfig+0x2d4>)
 8008388:	fba3 1302 	umull	r1, r3, r3, r2
 800838c:	095b      	lsrs	r3, r3, #5
 800838e:	2164      	movs	r1, #100	; 0x64
 8008390:	fb01 f303 	mul.w	r3, r1, r3
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	00db      	lsls	r3, r3, #3
 8008398:	3332      	adds	r3, #50	; 0x32
 800839a:	4a08      	ldr	r2, [pc, #32]	; (80083bc <UART_SetConfig+0x2d4>)
 800839c:	fba2 2303 	umull	r2, r3, r2, r3
 80083a0:	095b      	lsrs	r3, r3, #5
 80083a2:	f003 0207 	and.w	r2, r3, #7
 80083a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4422      	add	r2, r4
 80083ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083b0:	e105      	b.n	80085be <UART_SetConfig+0x4d6>
 80083b2:	bf00      	nop
 80083b4:	40011000 	.word	0x40011000
 80083b8:	40011400 	.word	0x40011400
 80083bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c4:	2200      	movs	r2, #0
 80083c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083d2:	4642      	mov	r2, r8
 80083d4:	464b      	mov	r3, r9
 80083d6:	1891      	adds	r1, r2, r2
 80083d8:	6239      	str	r1, [r7, #32]
 80083da:	415b      	adcs	r3, r3
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
 80083de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083e2:	4641      	mov	r1, r8
 80083e4:	1854      	adds	r4, r2, r1
 80083e6:	4649      	mov	r1, r9
 80083e8:	eb43 0501 	adc.w	r5, r3, r1
 80083ec:	f04f 0200 	mov.w	r2, #0
 80083f0:	f04f 0300 	mov.w	r3, #0
 80083f4:	00eb      	lsls	r3, r5, #3
 80083f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083fa:	00e2      	lsls	r2, r4, #3
 80083fc:	4614      	mov	r4, r2
 80083fe:	461d      	mov	r5, r3
 8008400:	4643      	mov	r3, r8
 8008402:	18e3      	adds	r3, r4, r3
 8008404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008408:	464b      	mov	r3, r9
 800840a:	eb45 0303 	adc.w	r3, r5, r3
 800840e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800841e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008422:	f04f 0200 	mov.w	r2, #0
 8008426:	f04f 0300 	mov.w	r3, #0
 800842a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800842e:	4629      	mov	r1, r5
 8008430:	008b      	lsls	r3, r1, #2
 8008432:	4621      	mov	r1, r4
 8008434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008438:	4621      	mov	r1, r4
 800843a:	008a      	lsls	r2, r1, #2
 800843c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008440:	f7f8 fc22 	bl	8000c88 <__aeabi_uldivmod>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	4b60      	ldr	r3, [pc, #384]	; (80085cc <UART_SetConfig+0x4e4>)
 800844a:	fba3 2302 	umull	r2, r3, r3, r2
 800844e:	095b      	lsrs	r3, r3, #5
 8008450:	011c      	lsls	r4, r3, #4
 8008452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008456:	2200      	movs	r2, #0
 8008458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800845c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008464:	4642      	mov	r2, r8
 8008466:	464b      	mov	r3, r9
 8008468:	1891      	adds	r1, r2, r2
 800846a:	61b9      	str	r1, [r7, #24]
 800846c:	415b      	adcs	r3, r3
 800846e:	61fb      	str	r3, [r7, #28]
 8008470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008474:	4641      	mov	r1, r8
 8008476:	1851      	adds	r1, r2, r1
 8008478:	6139      	str	r1, [r7, #16]
 800847a:	4649      	mov	r1, r9
 800847c:	414b      	adcs	r3, r1
 800847e:	617b      	str	r3, [r7, #20]
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	f04f 0300 	mov.w	r3, #0
 8008488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800848c:	4659      	mov	r1, fp
 800848e:	00cb      	lsls	r3, r1, #3
 8008490:	4651      	mov	r1, sl
 8008492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008496:	4651      	mov	r1, sl
 8008498:	00ca      	lsls	r2, r1, #3
 800849a:	4610      	mov	r0, r2
 800849c:	4619      	mov	r1, r3
 800849e:	4603      	mov	r3, r0
 80084a0:	4642      	mov	r2, r8
 80084a2:	189b      	adds	r3, r3, r2
 80084a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084a8:	464b      	mov	r3, r9
 80084aa:	460a      	mov	r2, r1
 80084ac:	eb42 0303 	adc.w	r3, r2, r3
 80084b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80084be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084cc:	4649      	mov	r1, r9
 80084ce:	008b      	lsls	r3, r1, #2
 80084d0:	4641      	mov	r1, r8
 80084d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084d6:	4641      	mov	r1, r8
 80084d8:	008a      	lsls	r2, r1, #2
 80084da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084de:	f7f8 fbd3 	bl	8000c88 <__aeabi_uldivmod>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	4b39      	ldr	r3, [pc, #228]	; (80085cc <UART_SetConfig+0x4e4>)
 80084e8:	fba3 1302 	umull	r1, r3, r3, r2
 80084ec:	095b      	lsrs	r3, r3, #5
 80084ee:	2164      	movs	r1, #100	; 0x64
 80084f0:	fb01 f303 	mul.w	r3, r1, r3
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	3332      	adds	r3, #50	; 0x32
 80084fa:	4a34      	ldr	r2, [pc, #208]	; (80085cc <UART_SetConfig+0x4e4>)
 80084fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008500:	095b      	lsrs	r3, r3, #5
 8008502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008506:	441c      	add	r4, r3
 8008508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800850c:	2200      	movs	r2, #0
 800850e:	673b      	str	r3, [r7, #112]	; 0x70
 8008510:	677a      	str	r2, [r7, #116]	; 0x74
 8008512:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008516:	4642      	mov	r2, r8
 8008518:	464b      	mov	r3, r9
 800851a:	1891      	adds	r1, r2, r2
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	415b      	adcs	r3, r3
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008526:	4641      	mov	r1, r8
 8008528:	1851      	adds	r1, r2, r1
 800852a:	6039      	str	r1, [r7, #0]
 800852c:	4649      	mov	r1, r9
 800852e:	414b      	adcs	r3, r1
 8008530:	607b      	str	r3, [r7, #4]
 8008532:	f04f 0200 	mov.w	r2, #0
 8008536:	f04f 0300 	mov.w	r3, #0
 800853a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800853e:	4659      	mov	r1, fp
 8008540:	00cb      	lsls	r3, r1, #3
 8008542:	4651      	mov	r1, sl
 8008544:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008548:	4651      	mov	r1, sl
 800854a:	00ca      	lsls	r2, r1, #3
 800854c:	4610      	mov	r0, r2
 800854e:	4619      	mov	r1, r3
 8008550:	4603      	mov	r3, r0
 8008552:	4642      	mov	r2, r8
 8008554:	189b      	adds	r3, r3, r2
 8008556:	66bb      	str	r3, [r7, #104]	; 0x68
 8008558:	464b      	mov	r3, r9
 800855a:	460a      	mov	r2, r1
 800855c:	eb42 0303 	adc.w	r3, r2, r3
 8008560:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	663b      	str	r3, [r7, #96]	; 0x60
 800856c:	667a      	str	r2, [r7, #100]	; 0x64
 800856e:	f04f 0200 	mov.w	r2, #0
 8008572:	f04f 0300 	mov.w	r3, #0
 8008576:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800857a:	4649      	mov	r1, r9
 800857c:	008b      	lsls	r3, r1, #2
 800857e:	4641      	mov	r1, r8
 8008580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008584:	4641      	mov	r1, r8
 8008586:	008a      	lsls	r2, r1, #2
 8008588:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800858c:	f7f8 fb7c 	bl	8000c88 <__aeabi_uldivmod>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <UART_SetConfig+0x4e4>)
 8008596:	fba3 1302 	umull	r1, r3, r3, r2
 800859a:	095b      	lsrs	r3, r3, #5
 800859c:	2164      	movs	r1, #100	; 0x64
 800859e:	fb01 f303 	mul.w	r3, r1, r3
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	011b      	lsls	r3, r3, #4
 80085a6:	3332      	adds	r3, #50	; 0x32
 80085a8:	4a08      	ldr	r2, [pc, #32]	; (80085cc <UART_SetConfig+0x4e4>)
 80085aa:	fba2 2303 	umull	r2, r3, r2, r3
 80085ae:	095b      	lsrs	r3, r3, #5
 80085b0:	f003 020f 	and.w	r2, r3, #15
 80085b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4422      	add	r2, r4
 80085bc:	609a      	str	r2, [r3, #8]
}
 80085be:	bf00      	nop
 80085c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80085c4:	46bd      	mov	sp, r7
 80085c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ca:	bf00      	nop
 80085cc:	51eb851f 	.word	0x51eb851f

080085d0 <VL53L1_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 80085dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d105      	bne.n	80085f0 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 80085e4:	2101      	movs	r1, #1
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f001 f85c 	bl	80096a4 <VL53L1_data_init>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L1_ERROR_NONE)
 80085f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d103      	bne.n	8008600 <VL53L1_DataInit+0x30>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008600:	2300      	movs	r3, #0
 8008602:	73bb      	strb	r3, [r7, #14]
 8008604:	e012      	b.n	800862c <VL53L1_DataInit+0x5c>
		if (Status == VL53L1_ERROR_NONE)
 8008606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d112      	bne.n	8008634 <VL53L1_DataInit+0x64>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800860e:	7bbb      	ldrb	r3, [r7, #14]
 8008610:	b29b      	uxth	r3, r3
 8008612:	2201      	movs	r2, #1
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fbd1 	bl	8008dbe <VL53L1_SetLimitCheckEnable>
 800861c:	4603      	mov	r3, r0
 800861e:	461a      	mov	r2, r3
 8008620:	7bfb      	ldrb	r3, [r7, #15]
 8008622:	4313      	orrs	r3, r2
 8008624:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008626:	7bbb      	ldrb	r3, [r7, #14]
 8008628:	3301      	adds	r3, #1
 800862a:	73bb      	strb	r3, [r7, #14]
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d9e9      	bls.n	8008606 <VL53L1_DataInit+0x36>
 8008632:	e000      	b.n	8008636 <VL53L1_DataInit+0x66>
		else
			break;
 8008634:	bf00      	nop

	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008636:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800863a:	4618      	mov	r0, r3
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800864a:	2300      	movs	r3, #0
 800864c:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2203      	movs	r2, #3
 8008652:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8008656:	2320      	movs	r3, #32
 8008658:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7bba      	ldrb	r2, [r7, #14]
 800865e:	709a      	strb	r2, [r3, #2]

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8008660:	2108      	movs	r1, #8
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f8f7 	bl	8008856 <VL53L1_SetPresetMode>
 8008668:	4603      	mov	r3, r0
 800866a:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2208      	movs	r2, #8
 8008670:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */

	LOG_FUNCTION_END(Status);
	return Status;
 8008674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800868c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f005 f89f 	bl	800d7d4 <VL53L1_poll_for_boot_completion>
 8008696:	4603      	mov	r3, r0
 8008698:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800869a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	4603      	mov	r3, r0
 80086b0:	603a      	str	r2, [r7, #0]
 80086b2:	71fb      	strb	r3, [r7, #7]
 80086b4:	460b      	mov	r3, r1
 80086b6:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 80086bc:	4a2b      	ldr	r2, [pc, #172]	; (800876c <ComputeDevicePresetMode+0xc4>)
 80086be:	f107 0310 	add.w	r3, r7, #16
 80086c2:	6812      	ldr	r2, [r2, #0]
 80086c4:	4611      	mov	r1, r2
 80086c6:	8019      	strh	r1, [r3, #0]
 80086c8:	3302      	adds	r3, #2
 80086ca:	0c12      	lsrs	r2, r2, #16
 80086cc:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 80086ce:	4a28      	ldr	r2, [pc, #160]	; (8008770 <ComputeDevicePresetMode+0xc8>)
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	6812      	ldr	r2, [r2, #0]
 80086d6:	4611      	mov	r1, r2
 80086d8:	8019      	strh	r1, [r3, #0]
 80086da:	3302      	adds	r3, #2
 80086dc:	0c12      	lsrs	r2, r2, #16
 80086de:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80086e0:	4a24      	ldr	r2, [pc, #144]	; (8008774 <ComputeDevicePresetMode+0xcc>)
 80086e2:	f107 0308 	add.w	r3, r7, #8
 80086e6:	6812      	ldr	r2, [r2, #0]
 80086e8:	4611      	mov	r1, r2
 80086ea:	8019      	strh	r1, [r3, #0]
 80086ec:	3302      	adds	r3, #2
 80086ee:	0c12      	lsrs	r2, r2, #16
 80086f0:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2201      	movs	r2, #1
 80086f6:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 80086f8:	79bb      	ldrb	r3, [r7, #6]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d002      	beq.n	8008704 <ComputeDevicePresetMode+0x5c>
 80086fe:	2b02      	cmp	r3, #2
 8008700:	d003      	beq.n	800870a <ComputeDevicePresetMode+0x62>
 8008702:	e005      	b.n	8008710 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8008704:	2300      	movs	r3, #0
 8008706:	75bb      	strb	r3, [r7, #22]
		break;
 8008708:	e004      	b.n	8008714 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 800870a:	2301      	movs	r3, #1
 800870c:	75bb      	strb	r3, [r7, #22]
		break;
 800870e:	e001      	b.n	8008714 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8008710:	2302      	movs	r3, #2
 8008712:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8008714:	79fb      	ldrb	r3, [r7, #7]
 8008716:	2b08      	cmp	r3, #8
 8008718:	d015      	beq.n	8008746 <ComputeDevicePresetMode+0x9e>
 800871a:	2b08      	cmp	r3, #8
 800871c:	dc1b      	bgt.n	8008756 <ComputeDevicePresetMode+0xae>
 800871e:	2b03      	cmp	r3, #3
 8008720:	d009      	beq.n	8008736 <ComputeDevicePresetMode+0x8e>
 8008722:	2b04      	cmp	r3, #4
 8008724:	d117      	bne.n	8008756 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8008726:	7dbb      	ldrb	r3, [r7, #22]
 8008728:	3318      	adds	r3, #24
 800872a:	443b      	add	r3, r7
 800872c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	701a      	strb	r2, [r3, #0]
		break;
 8008734:	e011      	b.n	800875a <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8008736:	7dbb      	ldrb	r3, [r7, #22]
 8008738:	3318      	adds	r3, #24
 800873a:	443b      	add	r3, r7
 800873c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	701a      	strb	r2, [r3, #0]
		break;
 8008744:	e009      	b.n	800875a <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8008746:	7dbb      	ldrb	r3, [r7, #22]
 8008748:	3318      	adds	r3, #24
 800874a:	443b      	add	r3, r7
 800874c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	701a      	strb	r2, [r3, #0]
		break;
 8008754:	e001      	b.n	800875a <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008756:	23f8      	movs	r3, #248	; 0xf8
 8008758:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 800875a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800875e:	4618      	mov	r0, r3
 8008760:	371c      	adds	r7, #28
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	08012080 	.word	0x08012080
 8008770:	08012084 	.word	0x08012084
 8008774:	08012088 	.word	0x08012088

08008778 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8008778:	b5b0      	push	{r4, r5, r7, lr}
 800877a:	b08e      	sub	sp, #56	; 0x38
 800877c:	af04      	add	r7, sp, #16
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	607b      	str	r3, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	72fb      	strb	r3, [r7, #11]
 8008786:	4613      	mov	r3, r2
 8008788:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800878a:	2300      	movs	r3, #0
 800878c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L1_DevicePresetModes   device_preset_mode;
	uint8_t measurement_mode;
	uint16_t dss_config__target_total_rate_mcps = 0;
 8008790:	2300      	movs	r3, #0
 8008792:	847b      	strh	r3, [r7, #34]	; 0x22
	uint32_t phasecal_config_timeout_us = 0;
 8008794:	2300      	movs	r3, #0
 8008796:	61fb      	str	r3, [r7, #28]
	uint32_t mm_config_timeout_us = 0;
 8008798:	2300      	movs	r3, #0
 800879a:	61bb      	str	r3, [r7, #24]
	uint32_t lld_range_config_timeout_us = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80087a0:	7afb      	ldrb	r3, [r7, #11]
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d002      	beq.n	80087ac <SetPresetMode+0x34>
 80087a6:	7afb      	ldrb	r3, [r7, #11]
 80087a8:	2b08      	cmp	r3, #8
 80087aa:	d103      	bne.n	80087b4 <SetPresetMode+0x3c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80087ac:	2340      	movs	r3, #64	; 0x40
 80087ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80087b2:	e002      	b.n	80087ba <SetPresetMode+0x42>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80087b4:	2320      	movs	r3, #32
 80087b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 80087ba:	f107 0225 	add.w	r2, r7, #37	; 0x25
 80087be:	7ab9      	ldrb	r1, [r7, #10]
 80087c0:	7afb      	ldrb	r3, [r7, #11]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7ff ff70 	bl	80086a8 <ComputeDevicePresetMode>
 80087c8:	4603      	mov	r3, r0
 80087ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 80087ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d112      	bne.n	80087fc <SetPresetMode+0x84>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80087d6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80087da:	f107 001c 	add.w	r0, r7, #28
 80087de:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80087e2:	f107 0314 	add.w	r3, r7, #20
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	f107 0318 	add.w	r3, r7, #24
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	4603      	mov	r3, r0
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f001 fa17 	bl	8009c24 <VL53L1_get_preset_mode_timing_cfg>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 80087fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008800:	2b00      	cmp	r3, #0
 8008802:	d112      	bne.n	800882a <SetPresetMode+0xb2>
		Status = VL53L1_set_preset_mode(
 8008804:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8008808:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800880a:	69fd      	ldr	r5, [r7, #28]
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	9102      	str	r1, [sp, #8]
 8008814:	9201      	str	r2, [sp, #4]
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	462b      	mov	r3, r5
 800881a:	4622      	mov	r2, r4
 800881c:	4601      	mov	r1, r0
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f001 faaa 	bl	8009d78 <VL53L1_set_preset_mode>
 8008824:	4603      	mov	r3, r0
 8008826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800882a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800882e:	2b00      	cmp	r3, #0
 8008830:	d103      	bne.n	800883a <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode,
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008838:	709a      	strb	r2, [r3, #2]
				measurement_mode);

	if (Status == VL53L1_ERROR_NONE)
 800883a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800883e:	2b00      	cmp	r3, #0
 8008840:	d103      	bne.n	800884a <SetPresetMode+0xd2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	7afa      	ldrb	r2, [r7, #11]
 8008846:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 800884a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800884e:	4618      	mov	r0, r3
 8008850:	3728      	adds	r7, #40	; 0x28
 8008852:	46bd      	mov	sp, r7
 8008854:	bdb0      	pop	{r4, r5, r7, pc}

08008856 <VL53L1_SetPresetMode>:
	return Status;
}


VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	460b      	mov	r3, r1
 8008860:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8008866:	2303      	movs	r3, #3
 8008868:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	/* fix for bug 495690 */
	Status = VL53L1_low_power_auto_data_init(Dev);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f003 fdb4 	bl	800c3d8 <VL53L1_low_power_auto_data_init>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

	Status = SetPresetMode(Dev,
 8008874:	7bba      	ldrb	r2, [r7, #14]
 8008876:	78f9      	ldrb	r1, [r7, #3]
 8008878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f7ff ff7b 	bl	8008778 <SetPresetMode>
 8008882:	4603      	mov	r3, r0
 8008884:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8008886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d117      	bne.n	80088be <VL53L1_SetPresetMode+0x68>
		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 800888e:	78fb      	ldrb	r3, [r7, #3]
 8008890:	2b04      	cmp	r3, #4
 8008892:	d005      	beq.n	80088a0 <VL53L1_SetPresetMode+0x4a>
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	2b03      	cmp	r3, #3
 8008898:	d002      	beq.n	80088a0 <VL53L1_SetPresetMode+0x4a>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	2b08      	cmp	r3, #8
 800889e:	d107      	bne.n	80088b0 <VL53L1_SetPresetMode+0x5a>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80088a0:	f24a 0128 	movw	r1, #41000	; 0xa028
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f891 	bl	80089cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80088aa:	4603      	mov	r3, r0
 80088ac:	73fb      	strb	r3, [r7, #15]
 80088ae:	e006      	b.n	80088be <VL53L1_SetPresetMode+0x68>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80088b0:	f248 2135 	movw	r1, #33333	; 0x8235
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f889 	bl	80089cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80088ba:	4603      	mov	r3, r0
 80088bc:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80088be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d106      	bne.n	80088d4 <VL53L1_SetPresetMode+0x7e>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 80088c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa0a 	bl	8008ce4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80088d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b088      	sub	sp, #32
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	77fb      	strb	r3, [r7, #31]
	VL53L1_PresetModes PresetMode;
	uint32_t inter_measurement_period_ms;
	uint32_t TimingBudget = 0;
 80088f0:	2300      	movs	r3, #0
 80088f2:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80088f4:	2300      	movs	r3, #0
 80088f6:	613b      	str	r3, [r7, #16]
	uint32_t PhaseCalTimeoutUs = 0;
 80088f8:	2300      	movs	r3, #0
 80088fa:	60fb      	str	r3, [r7, #12]
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8008902:	77bb      	strb	r3, [r7, #30]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8008904:	78fb      	ldrb	r3, [r7, #3]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d008      	beq.n	800891c <VL53L1_SetDistanceMode+0x3c>
 800890a:	78fb      	ldrb	r3, [r7, #3]
 800890c:	2b02      	cmp	r3, #2
 800890e:	d005      	beq.n	800891c <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	2b03      	cmp	r3, #3
 8008914:	d002      	beq.n	800891c <VL53L1_SetDistanceMode+0x3c>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8008916:	f06f 0303 	mvn.w	r3, #3
 800891a:	e052      	b.n	80089c2 <VL53L1_SetDistanceMode+0xe2>

	if (Status == VL53L1_ERROR_NONE)
 800891c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d107      	bne.n	8008934 <VL53L1_SetDistanceMode+0x54>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8008924:	f107 0308 	add.w	r3, r7, #8
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f001 f923 	bl	8009b76 <VL53L1_get_user_zone>
 8008930:	4603      	mov	r3, r0
 8008932:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 800893a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10a      	bne.n	8008958 <VL53L1_SetDistanceMode+0x78>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8008942:	f107 0314 	add.w	r3, r7, #20
 8008946:	f107 0210 	add.w	r2, r7, #16
 800894a:	f107 010c 	add.w	r1, r7, #12
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f001 f84c 	bl	80099ec <VL53L1_get_timeouts_us>
 8008954:	4603      	mov	r3, r0
 8008956:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8008958:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d107      	bne.n	8008970 <VL53L1_SetDistanceMode+0x90>
		Status = SetPresetMode(Dev,
 8008960:	78fa      	ldrb	r2, [r7, #3]
 8008962:	7fb9      	ldrb	r1, [r7, #30]
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7ff ff06 	bl	8008778 <SetPresetMode>
 800896c:	4603      	mov	r3, r0
 800896e:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				DistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8008970:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d103      	bne.n	8008980 <VL53L1_SetDistanceMode+0xa0>
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	78fa      	ldrb	r2, [r7, #3]
 800897c:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8008980:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10e      	bne.n	80089a6 <VL53L1_SetDistanceMode+0xc6>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8008988:	68f9      	ldr	r1, [r7, #12]
 800898a:	693a      	ldr	r2, [r7, #16]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fff4 	bl	800997c <VL53L1_set_timeouts_us>
 8008994:	4603      	mov	r3, r0
 8008996:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8008998:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d102      	bne.n	80089a6 <VL53L1_SetDistanceMode+0xc6>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80089a0:	697a      	ldr	r2, [r7, #20]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 80089a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d107      	bne.n	80089be <VL53L1_SetDistanceMode+0xde>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 80089ae:	f107 0308 	add.w	r3, r7, #8
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f001 f8bb 	bl	8009b30 <VL53L1_set_user_zone>
 80089ba:	4603      	mov	r3, r0
 80089bc:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 80089be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3720      	adds	r7, #32
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
	...

080089cc <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08c      	sub	sp, #48	; 0x30
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	76bb      	strb	r3, [r7, #26]
	uint8_t Mm2Enabled = 0;
 80089e0:	2300      	movs	r3, #0
 80089e2:	767b      	strb	r3, [r7, #25]
	uint32_t TimingGuard;
	uint32_t divisor;
	uint32_t TimingBudget = 0;
 80089e4:	2300      	movs	r3, #0
 80089e6:	617b      	str	r3, [r7, #20]
	uint32_t MmTimeoutUs = 0;
 80089e8:	2300      	movs	r3, #0
 80089ea:	613b      	str	r3, [r7, #16]
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80089f0:	4b64      	ldr	r3, [pc, #400]	; (8008b84 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1b8>)
 80089f2:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	4a64      	ldr	r2, [pc, #400]	; (8008b88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1bc>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d902      	bls.n	8008a02 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x36>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80089fc:	23fc      	movs	r3, #252	; 0xfc
 80089fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8008a02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d109      	bne.n	8008a1e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x52>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008a0a:	f107 031a 	add.w	r3, r7, #26
 8008a0e:	461a      	mov	r2, r3
 8008a10:	2105      	movs	r1, #5
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fa8d 	bl	8008f32 <VL53L1_GetSequenceStepEnable>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8008a1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d109      	bne.n	8008a3a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x6e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008a26:	f107 0319 	add.w	r3, r7, #25
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	2106      	movs	r1, #6
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fa7f 	bl	8008f32 <VL53L1_GetSequenceStepEnable>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8008a3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10b      	bne.n	8008a5a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x8e>
		Status = VL53L1_get_timeouts_us(Dev,
 8008a42:	f107 0314 	add.w	r3, r7, #20
 8008a46:	f107 0210 	add.w	r2, r7, #16
 8008a4a:	f107 010c 	add.w	r1, r7, #12
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 ffcc 	bl	80099ec <VL53L1_get_timeouts_us>
 8008a54:	4603      	mov	r3, r0
 8008a56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8008a5a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f040 8081 	bne.w	8008b66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
		PresetMode = VL53L1DevDataGet(Dev,
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8008a6a:	76fb      	strb	r3, [r7, #27]
				CurrentParameters.PresetMode);

		TimingGuard = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8008a70:	2301      	movs	r3, #1
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8008a74:	7efb      	ldrb	r3, [r7, #27]
 8008a76:	2b08      	cmp	r3, #8
 8008a78:	d026      	beq.n	8008ac8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xfc>
 8008a7a:	2b08      	cmp	r3, #8
 8008a7c:	dc43      	bgt.n	8008b06 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d00f      	beq.n	8008aa2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd6>
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d13f      	bne.n	8008b06 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13a>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008a86:	7ebb      	ldrb	r3, [r7, #26]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d002      	beq.n	8008a92 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 8008a8c:	7e7b      	ldrb	r3, [r7, #25]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d103      	bne.n	8008a9a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xce>
				TimingGuard = 5000;
 8008a92:	f241 3388 	movw	r3, #5000	; 0x1388
 8008a96:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8008a98:	e038      	b.n	8008b0c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
				TimingGuard = 1000;
 8008a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008aa0:	e034      	b.n	8008b0c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008aa8:	7ebb      	ldrb	r3, [r7, #26]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d002      	beq.n	8008ab4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe8>
 8008aae:	7e7b      	ldrb	r3, [r7, #25]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d103      	bne.n	8008abc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf0>
				TimingGuard = 26600;
 8008ab4:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8008ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008aba:	e002      	b.n	8008ac2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xf6>
			else
				TimingGuard = 21600;
 8008abc:	f245 4360 	movw	r3, #21600	; 0x5460
 8008ac0:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8008ac6:	e021      	b.n	8008b0c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8008ace:	23f5      	movs	r3, #245	; 0xf5
 8008ad0:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8008ad2:	f107 0308 	add.w	r3, r7, #8
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	f248 0136 	movw	r1, #32822	; 0x8036
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 fffb 	bl	800aad8 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	dd07      	ble.n	8008af8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				vhv += vhv_loops *
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	22f5      	movs	r2, #245	; 0xf5
 8008aec:	fb02 f303 	mul.w	r3, r2, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	4413      	add	r3, r2
 8008af6:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8008b00:	2302      	movs	r3, #2
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8008b04:	e002      	b.n	8008b0c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008b06:	23f8      	movs	r3, #248	; 0xf8
 8008b08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8008b0c:	683a      	ldr	r2, [r7, #0]
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	429a      	cmp	r2, r3
 8008b12:	d803      	bhi.n	8008b1c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x150>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8008b14:	23fc      	movs	r3, #252	; 0xfc
 8008b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b1a:	e003      	b.n	8008b24 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b20:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8008b22:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8008b24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d11c      	bne.n	8008b66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	69fa      	ldr	r2, [r7, #28]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d203      	bcs.n	8008b3c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x170>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8008b34:	23fc      	movs	r3, #252	; 0xfc
 8008b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b3a:	e00d      	b.n	8008b58 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x18c>
			else {
				TimingBudget /= divisor;
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b44:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8008b46:	68f9      	ldr	r1, [r7, #12]
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 ff15 	bl	800997c <VL53L1_set_timeouts_us>
 8008b52:	4603      	mov	r3, r0
 8008b54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8008b58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d102      	bne.n	8008b66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x19a>
				VL53L1DevDataSet(Dev,
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8008b66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d103      	bne.n	8008b76 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1aa>
		VL53L1DevDataSet(Dev,
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3730      	adds	r7, #48	; 0x30
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	00086470 	.word	0x00086470
 8008b88:	00989680 	.word	0x00989680

08008b8c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08c      	sub	sp, #48	; 0x30
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008b96:	2300      	movs	r3, #0
 8008b98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8008bba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d109      	bne.n	8008bd6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008bc2:	f107 031b 	add.w	r3, r7, #27
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	2105      	movs	r1, #5
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f9b1 	bl	8008f32 <VL53L1_GetSequenceStepEnable>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8008bd6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d109      	bne.n	8008bf2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8008bde:	f107 031a 	add.w	r3, r7, #26
 8008be2:	461a      	mov	r2, r3
 8008be4:	2106      	movs	r1, #6
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f9a3 	bl	8008f32 <VL53L1_GetSequenceStepEnable>
 8008bec:	4603      	mov	r3, r0
 8008bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8008bf2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10b      	bne.n	8008c12 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8008bfa:	f107 0310 	add.w	r3, r7, #16
 8008bfe:	f107 0214 	add.w	r2, r7, #20
 8008c02:	f107 010c 	add.w	r1, r7, #12
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fef0 	bl	80099ec <VL53L1_get_timeouts_us>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8008c12:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d156      	bne.n	8008cc8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13c>
		PresetMode = VL53L1DevDataGet(Dev,
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8008c20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				CurrentParameters.PresetMode);

		switch (PresetMode) {
 8008c24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c28:	2b08      	cmp	r3, #8
 8008c2a:	d02a      	beq.n	8008c82 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf6>
 8008c2c:	2b08      	cmp	r3, #8
 8008c2e:	dc47      	bgt.n	8008cc0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
 8008c30:	2b03      	cmp	r3, #3
 8008c32:	d012      	beq.n	8008c5a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xce>
 8008c34:	2b04      	cmp	r3, #4
 8008c36:	d143      	bne.n	8008cc0 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x134>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008c38:	7efb      	ldrb	r3, [r7, #27]
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d002      	beq.n	8008c44 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb8>
 8008c3e:	7ebb      	ldrb	r3, [r7, #26]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d105      	bne.n	8008c50 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc4>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8008c4e:	e03c      	b.n	8008cca <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8008c56:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008c58:	e037      	b.n	8008cca <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8008c5a:	7efb      	ldrb	r3, [r7, #27]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d002      	beq.n	8008c66 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xda>
 8008c60:	7ebb      	ldrb	r3, [r7, #26]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d106      	bne.n	8008c74 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe8>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8008c6c:	3334      	adds	r3, #52	; 0x34
 8008c6e:	005b      	lsls	r3, r3, #1
 8008c70:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8008c72:	e02a      	b.n	8008cca <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8008c7a:	3330      	adds	r3, #48	; 0x30
 8008c7c:	005b      	lsls	r3, r3, #1
 8008c7e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008c80:	e023      	b.n	8008cca <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8008c82:	23f5      	movs	r3, #245	; 0xf5
 8008c84:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8008c86:	f107 0308 	add.w	r3, r7, #8
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f248 0136 	movw	r1, #32822	; 0x8036
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f001 ff21 	bl	800aad8 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	dd07      	ble.n	8008cac <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x120>
				vhv += vhv_loops *
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	22f5      	movs	r2, #245	; 0xf5
 8008ca0:	fb02 f303 	mul.w	r3, r2, r3
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	4413      	add	r3, r2
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8008cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cae:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8008cb2:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	69fa      	ldr	r2, [r7, #28]
 8008cba:	4413      	add	r3, r2
 8008cbc:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8008cbe:	e004      	b.n	8008cca <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8008cc0:	23f8      	movs	r3, #248	; 0xf8
 8008cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008cc6:	e000      	b.n	8008cca <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x13e>
		}
	}
 8008cc8:	bf00      	nop
	if (Status == VL53L1_ERROR_NONE)
 8008cca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d102      	bne.n	8008cd8 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x14c>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cd6:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008cd8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3730      	adds	r7, #48	; 0x30
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	019b      	lsls	r3, r3, #6
 8008cfa:	4a09      	ldr	r2, [pc, #36]	; (8008d20 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8008cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008d00:	099b      	lsrs	r3, r3, #6
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	4413      	add	r3, r2
 8008d06:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8008d08:	68b9      	ldr	r1, [r7, #8]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fde7 	bl	80098de <VL53L1_set_inter_measurement_period_ms>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8008d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	10624dd3 	.word	0x10624dd3

08008d24 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8008d32:	f107 0308 	add.w	r3, r7, #8
 8008d36:	4619      	mov	r1, r3
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fdf9 	bl	8009930 <VL53L1_get_inter_measurement_period_ms>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	019b      	lsls	r3, r3, #6
 8008d48:	4907      	ldr	r1, [pc, #28]	; (8008d68 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8008d4a:	fba1 1303 	umull	r1, r3, r1, r3
 8008d4e:	099b      	lsrs	r3, r3, #6
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8008d54:	68ba      	ldr	r2, [r7, #8]
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8008d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	10624dd3 	.word	0x10624dd3

08008d6c <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	460b      	mov	r3, r1
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008d7e:	897b      	ldrh	r3, [r7, #10]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <SetLimitValue+0x1e>
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d009      	beq.n	8008d9c <SetLimitValue+0x30>
 8008d88:	e011      	b.n	8008dae <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	0b9b      	lsrs	r3, r3, #14
 8008d8e:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8008d90:	8abb      	ldrh	r3, [r7, #20]
 8008d92:	4619      	mov	r1, r3
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f001 f97b 	bl	800a090 <VL53L1_set_lite_sigma_threshold>
		break;
 8008d9a:	e00a      	b.n	8008db2 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	0a5b      	lsrs	r3, r3, #9
 8008da0:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8008da2:	8abb      	ldrh	r3, [r7, #20]
 8008da4:	4619      	mov	r1, r3
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f001 f99e 	bl	800a0e8 <VL53L1_set_lite_min_count_rate>
		break;
 8008dac:	e001      	b.n	8008db2 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008dae:	23fc      	movs	r3, #252	; 0xfc
 8008db0:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
 8008dc6:	460b      	mov	r3, r1
 8008dc8:	807b      	strh	r3, [r7, #2]
 8008dca:	4613      	mov	r3, r2
 8008dcc:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008dd6:	887b      	ldrh	r3, [r7, #2]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d902      	bls.n	8008de2 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008ddc:	23fc      	movs	r3, #252	; 0xfc
 8008dde:	73fb      	strb	r3, [r7, #15]
 8008de0:	e014      	b.n	8008e0c <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8008de2:	787b      	ldrb	r3, [r7, #1]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d102      	bne.n	8008dee <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8008de8:	2300      	movs	r3, #0
 8008dea:	60bb      	str	r3, [r7, #8]
 8008dec:	e006      	b.n	8008dfc <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008dee:	887b      	ldrh	r3, [r7, #2]
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	33e0      	adds	r3, #224	; 0xe0
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8008dfc:	887b      	ldrh	r3, [r7, #2]
 8008dfe:	68ba      	ldr	r2, [r7, #8]
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f7ff ffb2 	bl	8008d6c <SetLimitValue>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8008e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10c      	bne.n	8008e2e <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008e14:	787b      	ldrb	r3, [r7, #1]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	bf14      	ite	ne
 8008e1a:	2301      	movne	r3, #1
 8008e1c:	2300      	moveq	r3, #0
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	887b      	ldrh	r3, [r7, #2]
 8008e22:	4611      	mov	r1, r2
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	4413      	add	r3, r2
 8008e28:	460a      	mov	r2, r1
 8008e2a:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8008e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b087      	sub	sp, #28
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	460b      	mov	r3, r1
 8008e44:	607a      	str	r2, [r7, #4]
 8008e46:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008e4c:	897b      	ldrh	r3, [r7, #10]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d905      	bls.n	8008e5e <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008e52:	23fc      	movs	r3, #252	; 0xfc
 8008e54:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	701a      	strb	r2, [r3, #0]
 8008e5c:	e008      	b.n	8008e70 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008e5e:	897b      	ldrh	r3, [r7, #10]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	4413      	add	r3, r2
 8008e64:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8008e68:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	7dba      	ldrb	r2, [r7, #22]
 8008e6e:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008e70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	371c      	adds	r7, #28
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <VL53L1_GetLimitCheckValue>:
	return Status;
}

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b088      	sub	sp, #32
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	77fb      	strb	r3, [r7, #31]
	uint16_t MinCountRate;
	FixPoint1616_t TempFix1616 = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	61bb      	str	r3, [r7, #24]
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008e96:	897b      	ldrh	r3, [r7, #10]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <VL53L1_GetLimitCheckValue+0x22>
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d00c      	beq.n	8008eba <VL53L1_GetLimitCheckValue+0x3a>
 8008ea0:	e017      	b.n	8008ed2 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8008ea2:	f107 0314 	add.w	r3, r7, #20
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f001 f8db 	bl	800a064 <VL53L1_get_lite_sigma_threshold>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8008eb2:	8abb      	ldrh	r3, [r7, #20]
 8008eb4:	039b      	lsls	r3, r3, #14
 8008eb6:	61bb      	str	r3, [r7, #24]
		break;
 8008eb8:	e00d      	b.n	8008ed6 <VL53L1_GetLimitCheckValue+0x56>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8008eba:	f107 0316 	add.w	r3, r7, #22
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	68f8      	ldr	r0, [r7, #12]
 8008ec2:	f001 f8fb 	bl	800a0bc <VL53L1_get_lite_min_count_rate>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8008eca:	8afb      	ldrh	r3, [r7, #22]
 8008ecc:	025b      	lsls	r3, r3, #9
 8008ece:	61bb      	str	r3, [r7, #24]
		break;
 8008ed0:	e001      	b.n	8008ed6 <VL53L1_GetLimitCheckValue+0x56>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8008ed2:	23fc      	movs	r3, #252	; 0xfc
 8008ed4:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8008ed6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d123      	bne.n	8008f26 <VL53L1_GetLimitCheckValue+0xa6>

		if (TempFix1616 == 0) {
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d110      	bne.n	8008f06 <VL53L1_GetLimitCheckValue+0x86>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8008ee4:	897b      	ldrh	r3, [r7, #10]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	33e0      	adds	r3, #224	; 0xe0
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	69ba      	ldr	r2, [r7, #24]
 8008ef6:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008ef8:	897b      	ldrh	r3, [r7, #10]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	2200      	movs	r2, #0
 8008f00:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 8008f04:	e00f      	b.n	8008f26 <VL53L1_GetLimitCheckValue+0xa6>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008f0c:	897b      	ldrh	r3, [r7, #10]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	33e0      	adds	r3, #224	; 0xe0
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4413      	add	r3, r2
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8008f1a:	897b      	ldrh	r3, [r7, #10]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8008f26:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3720      	adds	r7, #32
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b086      	sub	sp, #24
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	607a      	str	r2, [r7, #4]
 8008f3e:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8008f44:	7afb      	ldrb	r3, [r7, #11]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	4619      	mov	r1, r3
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f000 fdb9 	bl	8009ac2 <VL53L1_get_sequence_config_bit>
 8008f50:	4603      	mov	r3, r0
 8008f52:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8008f54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b086      	sub	sp, #24
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	75fb      	strb	r3, [r7, #23]
	uint32_t MTBus, IMPms;


	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	789b      	ldrb	r3, [r3, #2]
 8008f70:	75bb      	strb	r3, [r7, #22]
	if (DeviceMeasurementMode != VL53L1_DEVICEMEASUREMENTMODE_TIMED)
 8008f72:	7dbb      	ldrb	r3, [r7, #22]
 8008f74:	2b40      	cmp	r3, #64	; 0x40
 8008f76:	d002      	beq.n	8008f7e <VL53L1_StartMeasurement+0x1e>
		VL53L1_LoadPatch(Dev);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 fa6b 	bl	8009454 <VL53L1_LoadPatch>
	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8008f84:	757b      	strb	r3, [r7, #21]
	switch (CurrPalState) {
 8008f86:	7d7b      	ldrb	r3, [r7, #21]
 8008f88:	2b63      	cmp	r3, #99	; 0x63
 8008f8a:	dc12      	bgt.n	8008fb2 <VL53L1_StartMeasurement+0x52>
 8008f8c:	2b62      	cmp	r3, #98	; 0x62
 8008f8e:	da0d      	bge.n	8008fac <VL53L1_StartMeasurement+0x4c>
 8008f90:	2b05      	cmp	r3, #5
 8008f92:	dc0e      	bgt.n	8008fb2 <VL53L1_StartMeasurement+0x52>
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	da09      	bge.n	8008fac <VL53L1_StartMeasurement+0x4c>
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	dc02      	bgt.n	8008fa2 <VL53L1_StartMeasurement+0x42>
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	da05      	bge.n	8008fac <VL53L1_StartMeasurement+0x4c>
 8008fa0:	e007      	b.n	8008fb2 <VL53L1_StartMeasurement+0x52>
 8008fa2:	2b03      	cmp	r3, #3
 8008fa4:	d105      	bne.n	8008fb2 <VL53L1_StartMeasurement+0x52>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	75fb      	strb	r3, [r7, #23]
		break;
 8008faa:	e004      	b.n	8008fb6 <VL53L1_StartMeasurement+0x56>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8008fac:	23f2      	movs	r3, #242	; 0xf2
 8008fae:	75fb      	strb	r3, [r7, #23]
		break;
 8008fb0:	e001      	b.n	8008fb6 <VL53L1_StartMeasurement+0x56>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8008fb2:	23fd      	movs	r3, #253	; 0xfd
 8008fb4:	75fb      	strb	r3, [r7, #23]
	}

	/* Check timing configuration between timing budget and
	 * inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 8008fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d11f      	bne.n	8008ffe <VL53L1_StartMeasurement+0x9e>
 8008fbe:	7dbb      	ldrb	r3, [r7, #22]
 8008fc0:	2b40      	cmp	r3, #64	; 0x40
 8008fc2:	d11c      	bne.n	8008ffe <VL53L1_StartMeasurement+0x9e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8008fc4:	f107 0310 	add.w	r3, r7, #16
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7ff fdde 	bl	8008b8c <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	4a17      	ldr	r2, [pc, #92]	; (8009034 <VL53L1_StartMeasurement+0xd4>)
 8008fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fdc:	099b      	lsrs	r3, r3, #6
 8008fde:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 8008fe0:	f107 030c 	add.w	r3, r7, #12
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7ff fe9c 	bl	8008d24 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 8008fec:	4603      	mov	r3, r0
 8008fee:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	1d1a      	adds	r2, r3, #4
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d901      	bls.n	8008ffe <VL53L1_StartMeasurement+0x9e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8008ffa:	23fc      	movs	r3, #252	; 0xfc
 8008ffc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 8008ffe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d107      	bne.n	8009016 <VL53L1_StartMeasurement+0xb6>
		Status = VL53L1_init_and_start_range(
 8009006:	7dbb      	ldrb	r3, [r7, #22]
 8009008:	2206      	movs	r2, #6
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f001 f8a1 	bl	800a154 <VL53L1_init_and_start_range>
 8009012:	4603      	mov	r3, r0
 8009014:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8009016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d103      	bne.n	8009026 <VL53L1_StartMeasurement+0xc6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2204      	movs	r2, #4
 8009022:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8009026:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800902a:	4618      	mov	r0, r3
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	10624dd3 	.word	0x10624dd3

08009038 <VL53L1_ClearInterruptAndStartMeasurement>:
	return Status;
}


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	789b      	ldrb	r3, [r3, #2]
 8009048:	73bb      	strb	r3, [r7, #14]

	Status = VL53L1_clear_interrupt_and_enable_next_range(Dev,
 800904a:	7bbb      	ldrb	r3, [r7, #14]
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f001 fc0e 	bl	800a870 <VL53L1_clear_interrupt_and_enable_next_range>
 8009054:	4603      	mov	r3, r0
 8009056:	73fb      	strb	r3, [r7, #15]
			DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8009058:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800905c:	4618      	mov	r0, r3
 800905e:	3710      	adds	r7, #16
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <VL53L1_GetMeasurementDataReady>:


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8009072:	6839      	ldr	r1, [r7, #0]
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f004 fb74 	bl	800d762 <VL53L1_is_new_data_ready>
 800907a:	4603      	mov	r3, r0
 800907c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800907e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
	...

0800908c <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 800908c:	b480      	push	{r7}
 800908e:	b08d      	sub	sp, #52	; 0x34
 8009090:	af00      	add	r7, sp, #0
 8009092:	4603      	mov	r3, r0
 8009094:	603a      	str	r2, [r7, #0]
 8009096:	71fb      	strb	r3, [r7, #7]
 8009098:	460b      	mov	r3, r1
 800909a:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 800909c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80090a0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 80090a2:	231e      	movs	r3, #30
 80090a4:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 80090a6:	4b33      	ldr	r3, [pc, #204]	; (8009174 <ComputeRQL+0xe8>)
 80090a8:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 80090aa:	4b33      	ldr	r3, [pc, #204]	; (8009178 <ComputeRQL+0xec>)
 80090ac:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 80090ae:	f641 139a 	movw	r3, #6554	; 0x199a
 80090b2:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 80090b4:	79fb      	ldrb	r3, [r7, #7]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d103      	bne.n	80090c2 <ComputeRQL+0x36>
		returnvalue = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090c0:	e04f      	b.n	8009162 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 80090c2:	79bb      	ldrb	r3, [r7, #6]
 80090c4:	2b07      	cmp	r3, #7
 80090c6:	d103      	bne.n	80090d0 <ComputeRQL+0x44>
		returnvalue = 50;
 80090c8:	2332      	movs	r3, #50	; 0x32
 80090ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090ce:	e048      	b.n	8009162 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80090d6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80090da:	429a      	cmp	r2, r3
 80090dc:	dd03      	ble.n	80090e6 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 80090de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80090e0:	041b      	lsls	r3, r3, #16
 80090e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090e4:	e007      	b.n	80090f6 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80090ec:	461a      	mov	r2, r3
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	fb02 f303 	mul.w	r3, r2, r3
 80090f4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 80090f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d020      	beq.n	800913e <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8009100:	461a      	mov	r2, r3
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	fb02 f303 	mul.w	r3, r2, r3
 8009108:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800910a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910c:	085b      	lsrs	r3, r3, #1
 800910e:	693a      	ldr	r2, [r7, #16]
 8009110:	4413      	add	r3, r2
 8009112:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	fbb2 f3f3 	udiv	r3, r2, r3
 800911c:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	041b      	lsls	r3, r3, #16
 8009122:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	429a      	cmp	r2, r3
 800912a:	d804      	bhi.n	8009136 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800912c:	69fa      	ldr	r2, [r7, #28]
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	62bb      	str	r3, [r7, #40]	; 0x28
 8009134:	e006      	b.n	8009144 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8009136:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800913a:	62bb      	str	r3, [r7, #40]	; 0x28
 800913c:	e002      	b.n	8009144 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800913e:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8009142:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8009144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009146:	0c1b      	lsrs	r3, r3, #16
 8009148:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800914a:	7bfb      	ldrb	r3, [r7, #15]
 800914c:	2b32      	cmp	r3, #50	; 0x32
 800914e:	d905      	bls.n	800915c <ComputeRQL+0xd0>
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	2b64      	cmp	r3, #100	; 0x64
 8009154:	bf28      	it	cs
 8009156:	2364      	movcs	r3, #100	; 0x64
 8009158:	b2db      	uxtb	r3, r3
 800915a:	e000      	b.n	800915e <ComputeRQL+0xd2>
 800915c:	2332      	movs	r3, #50	; 0x32
 800915e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8009162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009166:	4618      	mov	r0, r3
 8009168:	3734      	adds	r7, #52	; 0x34
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	0075b333 	.word	0x0075b333
 8009178:	0030cccd 	.word	0x0030cccd

0800917c <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	4603      	mov	r3, r0
 8009184:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8009186:	79fb      	ldrb	r3, [r7, #7]
 8009188:	3b04      	subs	r3, #4
 800918a:	2b0f      	cmp	r3, #15
 800918c:	d83d      	bhi.n	800920a <ConvertStatusLite+0x8e>
 800918e:	a201      	add	r2, pc, #4	; (adr r2, 8009194 <ConvertStatusLite+0x18>)
 8009190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009194:	080091e7 	.word	0x080091e7
 8009198:	080091e1 	.word	0x080091e1
 800919c:	080091ed 	.word	0x080091ed
 80091a0:	080091f3 	.word	0x080091f3
 80091a4:	080091ff 	.word	0x080091ff
 80091a8:	08009205 	.word	0x08009205
 80091ac:	0800920b 	.word	0x0800920b
 80091b0:	0800920b 	.word	0x0800920b
 80091b4:	080091f9 	.word	0x080091f9
 80091b8:	0800920b 	.word	0x0800920b
 80091bc:	0800920b 	.word	0x0800920b
 80091c0:	0800920b 	.word	0x0800920b
 80091c4:	0800920b 	.word	0x0800920b
 80091c8:	0800920b 	.word	0x0800920b
 80091cc:	080091d5 	.word	0x080091d5
 80091d0:	080091db 	.word	0x080091db
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80091d4:	230a      	movs	r3, #10
 80091d6:	73fb      	strb	r3, [r7, #15]
		break;
 80091d8:	e019      	b.n	800920e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80091da:	2306      	movs	r3, #6
 80091dc:	73fb      	strb	r3, [r7, #15]
		break;
 80091de:	e016      	b.n	800920e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80091e0:	2304      	movs	r3, #4
 80091e2:	73fb      	strb	r3, [r7, #15]
		break;
 80091e4:	e013      	b.n	800920e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80091e6:	2302      	movs	r3, #2
 80091e8:	73fb      	strb	r3, [r7, #15]
		break;
 80091ea:	e010      	b.n	800920e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80091ec:	2301      	movs	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
		break;
 80091f0:	e00d      	b.n	800920e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80091f2:	2307      	movs	r3, #7
 80091f4:	73fb      	strb	r3, [r7, #15]
		break;
 80091f6:	e00a      	b.n	800920e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80091f8:	2309      	movs	r3, #9
 80091fa:	73fb      	strb	r3, [r7, #15]
		break;
 80091fc:	e007      	b.n	800920e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80091fe:	2303      	movs	r3, #3
 8009200:	73fb      	strb	r3, [r7, #15]
		break;
 8009202:	e004      	b.n	800920e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]
		break;
 8009208:	e001      	b.n	800920e <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800920a:	23ff      	movs	r3, #255	; 0xff
 800920c:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 800920e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009210:	4618      	mov	r0, r3
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08c      	sub	sp, #48	; 0x30
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	607b      	str	r3, [r7, #4]
 8009226:	460b      	mov	r3, r1
 8009228:	72fb      	strb	r3, [r7, #11]
 800922a:	4613      	mov	r3, r2
 800922c:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800922e:	2300      	movs	r3, #0
 8009230:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685a      	ldr	r2, [r3, #4]
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009242:	f003 031f 	and.w	r3, r3, #31
 8009246:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800924a:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800924e:	7afb      	ldrb	r3, [r7, #11]
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	4618      	mov	r0, r3
 8009254:	f7ff ff1a 	bl	800908c <ComputeRQL>
 8009258:	4603      	mov	r3, r0
 800925a:	461a      	mov	r2, r3
 800925c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800925e:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009264:	025b      	lsls	r3, r3, #9
 8009266:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8009268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800926c:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8009272:	025b      	lsls	r3, r3, #9
 8009274:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8009276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800927a:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8009280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009282:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8009288:	025b      	lsls	r3, r3, #9
 800928a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 800928c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928e:	6a3a      	ldr	r2, [r7, #32]
 8009290:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8009298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929a:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 800929c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929e:	2200      	movs	r2, #0
 80092a0:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 80092a2:	7abb      	ldrb	r3, [r7, #10]
 80092a4:	2b11      	cmp	r3, #17
 80092a6:	d009      	beq.n	80092bc <SetSimpleData+0xa0>
 80092a8:	2b11      	cmp	r3, #17
 80092aa:	dc0f      	bgt.n	80092cc <SetSimpleData+0xb0>
 80092ac:	2b03      	cmp	r3, #3
 80092ae:	dc02      	bgt.n	80092b6 <SetSimpleData+0x9a>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dc03      	bgt.n	80092bc <SetSimpleData+0xa0>
 80092b4:	e00a      	b.n	80092cc <SetSimpleData+0xb0>
 80092b6:	2b0d      	cmp	r3, #13
 80092b8:	d004      	beq.n	80092c4 <SetSimpleData+0xa8>
 80092ba:	e007      	b.n	80092cc <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 80092bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092be:	2205      	movs	r2, #5
 80092c0:	76da      	strb	r2, [r3, #27]
		break;
 80092c2:	e006      	b.n	80092d2 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	220d      	movs	r2, #13
 80092c8:	76da      	strb	r2, [r3, #27]
		break;
 80092ca:	e002      	b.n	80092d2 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80092cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ce:	2200      	movs	r2, #0
 80092d0:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 80092d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d4:	7edb      	ldrb	r3, [r3, #27]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d108      	bne.n	80092ec <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 80092da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80092de:	4618      	mov	r0, r3
 80092e0:	f7ff ff4c 	bl	800917c <ConvertStatusLite>
 80092e4:	4603      	mov	r3, r0
 80092e6:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80092e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ea:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80092f0:	025b      	lsls	r3, r3, #9
 80092f2:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6a3a      	ldr	r2, [r7, #32]
 80092f8:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009300:	025b      	lsls	r3, r3, #9
 8009302:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a3a      	ldr	r2, [r7, #32]
 8009308:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 800930c:	f107 0314 	add.w	r3, r7, #20
 8009310:	461a      	mov	r2, r3
 8009312:	2100      	movs	r1, #0
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f7ff fdb3 	bl	8008e80 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 800931a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800931e:	2b06      	cmp	r3, #6
 8009320:	bf0c      	ite	eq
 8009322:	2301      	moveq	r3, #1
 8009324:	2300      	movne	r3, #0
 8009326:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8009328:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 800932a:	f107 0319 	add.w	r3, r7, #25
 800932e:	461a      	mov	r2, r3
 8009330:	2100      	movs	r1, #0
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f7ff fd81 	bl	8008e3a <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8009338:	7e7b      	ldrb	r3, [r7, #25]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d104      	bne.n	8009348 <SetSimpleData+0x12c>
 800933e:	7ffb      	ldrb	r3, [r7, #31]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d101      	bne.n	8009348 <SetSimpleData+0x12c>
 8009344:	2301      	movs	r3, #1
 8009346:	e000      	b.n	800934a <SetSimpleData+0x12e>
 8009348:	2300      	movs	r3, #0
 800934a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	7fba      	ldrb	r2, [r7, #30]
 8009350:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8009354:	f107 0314 	add.w	r3, r7, #20
 8009358:	461a      	mov	r2, r3
 800935a:	2101      	movs	r1, #1
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff fd8f 	bl	8008e80 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8009362:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009366:	2b04      	cmp	r3, #4
 8009368:	bf0c      	ite	eq
 800936a:	2301      	moveq	r3, #1
 800936c:	2300      	movne	r3, #0
 800936e:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8009370:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 8009372:	f107 0319 	add.w	r3, r7, #25
 8009376:	461a      	mov	r2, r3
 8009378:	2101      	movs	r1, #1
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7ff fd5d 	bl	8008e3a <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8009380:	7e7b      	ldrb	r3, [r7, #25]
 8009382:	2b01      	cmp	r3, #1
 8009384:	d104      	bne.n	8009390 <SetSimpleData+0x174>
 8009386:	7f7b      	ldrb	r3, [r7, #29]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d101      	bne.n	8009390 <SetSimpleData+0x174>
 800938c:	2301      	movs	r3, #1
 800938e:	e000      	b.n	8009392 <SetSimpleData+0x176>
 8009390:	2300      	movs	r3, #0
 8009392:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	7fba      	ldrb	r2, [r7, #30]
 8009398:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 800939c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939e:	8b1b      	ldrh	r3, [r3, #24]
 80093a0:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	7edb      	ldrb	r3, [r3, #27]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d110      	bne.n	80093cc <SetSimpleData+0x1b0>
 80093aa:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	da0c      	bge.n	80093cc <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 80093b2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80093b6:	4b08      	ldr	r3, [pc, #32]	; (80093d8 <SetSimpleData+0x1bc>)
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	429a      	cmp	r2, r3
 80093bc:	da03      	bge.n	80093c6 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 80093be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c0:	220e      	movs	r2, #14
 80093c2:	76da      	strb	r2, [r3, #27]
 80093c4:	e002      	b.n	80093cc <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 80093c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c8:	2200      	movs	r2, #0
 80093ca:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 80093cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3730      	adds	r7, #48	; 0x30
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	20000010 	.word	0x20000010

080093dc <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b0a8      	sub	sp, #160	; 0xa0
 80093e0:	af02      	add	r7, sp, #8
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t results;
	VL53L1_range_results_t *presults = &results;
 80093ec:	f107 0308 	add.w	r3, r7, #8
 80093f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 80093f4:	221c      	movs	r2, #28
 80093f6:	21ff      	movs	r1, #255	; 0xff
 80093f8:	6838      	ldr	r0, [r7, #0]
 80093fa:	f004 fc75 	bl	800dce8 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 80093fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8009402:	2102      	movs	r1, #2
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f001 f9c3 	bl	800a790 <VL53L1_get_device_results>
 800940a:	4603      	mov	r3, r0
 800940c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8009410:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8009414:	2b00      	cmp	r3, #0
 8009416:	d117      	bne.n	8009448 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8009418:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800941c:	789a      	ldrb	r2, [r3, #2]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 8009422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009426:	3304      	adds	r3, #4
 8009428:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 800942c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009430:	78da      	ldrb	r2, [r3, #3]
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800943a:	2101      	movs	r1, #1
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7ff feed 	bl	800921c <SetSimpleData>
 8009442:	4603      	mov	r3, r0
 8009444:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009448:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 800944c:	4618      	mov	r0, r3
 800944e:	3798      	adds	r7, #152	; 0x98
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <VL53L1_LoadPatch>:

/* End Group PAL IRQ Triggered events Functions */


static VL53L1_Error VL53L1_LoadPatch(VL53L1_DEV Dev)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b0c6      	sub	sp, #280	; 0x118
 8009458:	af00      	add	r7, sp, #0
 800945a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800945e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009462:	6018      	str	r0, [r3, #0]
	VL53L1_Error status = VL53L1_ERROR_NONE;
 8009464:	2300      	movs	r3, #0
 8009466:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t patch_tuning = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint8_t comms_buffer[256];
	uint32_t patch_power;
	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8009470:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10b      	bne.n	8009490 <VL53L1_LoadPatch+0x3c>
		status = VL53L1_WrByte(
 8009478:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800947c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009480:	2200      	movs	r2, #0
 8009482:	2185      	movs	r1, #133	; 0x85
 8009484:	6818      	ldr	r0, [r3, #0]
 8009486:	f004 fa7f 	bl	800d988 <VL53L1_WrByte>
 800948a:	4603      	mov	r3, r0
 800948c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_FIRMWARE__ENABLE,
				0x00);
	/* Force GO1 on */
	if (status == VL53L1_ERROR_NONE)
 8009490:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <VL53L1_LoadPatch+0x52>
		VL53L1_enable_powerforce(Dev);
 8009498:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800949c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	f002 fd5e 	bl	800bf62 <VL53L1_enable_powerforce>

	patch_tuning = BDTable[VL53L1_TUNING_PHASECAL_PATCH_POWER];
 80094a6:	4b7e      	ldr	r3, [pc, #504]	; (80096a0 <VL53L1_LoadPatch+0x24c>)
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	switch(patch_tuning) {
 80094ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d81a      	bhi.n	80094ec <VL53L1_LoadPatch+0x98>
 80094b6:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <VL53L1_LoadPatch+0x68>)
 80094b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094bc:	080094cd 	.word	0x080094cd
 80094c0:	080094d5 	.word	0x080094d5
 80094c4:	080094dd 	.word	0x080094dd
 80094c8:	080094e5 	.word	0x080094e5
	case 0:
		patch_power = 0x00;
 80094cc:	2300      	movs	r3, #0
 80094ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80094d2:	e00e      	b.n	80094f2 <VL53L1_LoadPatch+0x9e>
	case 1:
		patch_power = 0x10;
 80094d4:	2310      	movs	r3, #16
 80094d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80094da:	e00a      	b.n	80094f2 <VL53L1_LoadPatch+0x9e>
	case 2:
		patch_power = 0x20;
 80094dc:	2320      	movs	r3, #32
 80094de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80094e2:	e006      	b.n	80094f2 <VL53L1_LoadPatch+0x9e>
	case 3:
		patch_power = 0x40;
 80094e4:	2340      	movs	r3, #64	; 0x40
 80094e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		break;
 80094ea:	e002      	b.n	80094f2 <VL53L1_LoadPatch+0x9e>
	default:
		patch_power = 0x00;
 80094ec:	2300      	movs	r3, #0
 80094ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	}
	/* Set patch RAM offsets */
	if (status == VL53L1_ERROR_NONE) {
 80094f2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d134      	bne.n	8009564 <VL53L1_LoadPatch+0x110>
		/* Package up MultiByte transaction */
		comms_buffer[0] = 0x29;
 80094fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80094fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009502:	2229      	movs	r2, #41	; 0x29
 8009504:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0xC9;
 8009506:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800950a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800950e:	22c9      	movs	r2, #201	; 0xc9
 8009510:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x0E;
 8009512:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009516:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800951a:	220e      	movs	r2, #14
 800951c:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x40;
 800951e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009522:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009526:	2240      	movs	r2, #64	; 0x40
 8009528:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x28;
 800952a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800952e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009532:	2228      	movs	r2, #40	; 0x28
 8009534:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = patch_power;
 8009536:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800953a:	b2da      	uxtb	r2, r3
 800953c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009540:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009544:	715a      	strb	r2, [r3, #5]
		/* 0x10 for 60ms, 0x20 for 240ms and 0x40 for 3580ms */
		status = VL53L1_WriteMulti(
 8009546:	f107 020c 	add.w	r2, r7, #12
 800954a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800954e:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 8009552:	2306      	movs	r3, #6
 8009554:	f240 4176 	movw	r1, #1142	; 0x476
 8009558:	6800      	ldr	r0, [r0, #0]
 800955a:	f004 f9a9 	bl	800d8b0 <VL53L1_WriteMulti>
 800955e:	4603      	mov	r3, r0
 8009560:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__OFFSET_0,
				comms_buffer,
				6);
	}
	/* Set patch breakpoints */
	if (status == VL53L1_ERROR_NONE) {
 8009564:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009568:	2b00      	cmp	r3, #0
 800956a:	d132      	bne.n	80095d2 <VL53L1_LoadPatch+0x17e>
		comms_buffer[0] = 0x03;
 800956c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009570:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009574:	2203      	movs	r2, #3
 8009576:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x6D;
 8009578:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800957c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009580:	226d      	movs	r2, #109	; 0x6d
 8009582:	705a      	strb	r2, [r3, #1]
		comms_buffer[2] = 0x03;
 8009584:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009588:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800958c:	2203      	movs	r2, #3
 800958e:	709a      	strb	r2, [r3, #2]
		comms_buffer[3] = 0x6F;
 8009590:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009594:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009598:	226f      	movs	r2, #111	; 0x6f
 800959a:	70da      	strb	r2, [r3, #3]
		comms_buffer[4] = 0x07;
 800959c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095a4:	2207      	movs	r2, #7
 80095a6:	711a      	strb	r2, [r3, #4]
		comms_buffer[5] = 0x29;
 80095a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095b0:	2229      	movs	r2, #41	; 0x29
 80095b2:	715a      	strb	r2, [r3, #5]
		status = VL53L1_WriteMulti(
 80095b4:	f107 020c 	add.w	r2, r7, #12
 80095b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095bc:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80095c0:	2306      	movs	r3, #6
 80095c2:	f240 4196 	movw	r1, #1174	; 0x496
 80095c6:	6800      	ldr	r0, [r0, #0]
 80095c8:	f004 f972 	bl	800d8b0 <VL53L1_WriteMulti>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__ADDRESS_0,
				comms_buffer,
				6);
	}
	/* Enable patch JMP patches */
	if (status == VL53L1_ERROR_NONE) {
 80095d2:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d11a      	bne.n	8009610 <VL53L1_LoadPatch+0x1bc>
		comms_buffer[0] = 0x00;
 80095da:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095e2:	2200      	movs	r2, #0
 80095e4:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 80095e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80095ee:	2207      	movs	r2, #7
 80095f0:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 80095f2:	f107 020c 	add.w	r2, r7, #12
 80095f6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80095fa:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 80095fe:	2302      	movs	r3, #2
 8009600:	f240 4172 	movw	r1, #1138	; 0x472
 8009604:	6800      	ldr	r0, [r0, #0]
 8009606:	f004 f953 	bl	800d8b0 <VL53L1_WriteMulti>
 800960a:	4603      	mov	r3, r0
 800960c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__JMP_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable patch DATA patches */
	if (status == VL53L1_ERROR_NONE) {
 8009610:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009614:	2b00      	cmp	r3, #0
 8009616:	d11a      	bne.n	800964e <VL53L1_LoadPatch+0x1fa>
		comms_buffer[0] = 0x00;
 8009618:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800961c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8009620:	2200      	movs	r2, #0
 8009622:	701a      	strb	r2, [r3, #0]
		comms_buffer[1] = 0x07;
 8009624:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009628:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800962c:	2207      	movs	r2, #7
 800962e:	705a      	strb	r2, [r3, #1]
		status = VL53L1_WriteMulti(
 8009630:	f107 020c 	add.w	r2, r7, #12
 8009634:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009638:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800963c:	2302      	movs	r3, #2
 800963e:	f240 4174 	movw	r1, #1140	; 0x474
 8009642:	6800      	ldr	r0, [r0, #0]
 8009644:	f004 f934 	bl	800d8b0 <VL53L1_WriteMulti>
 8009648:	4603      	mov	r3, r0
 800964a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_PATCH__DATA_ENABLES,
				comms_buffer,
				2);
	}
	/* Enable firmware patching */
	if (status == VL53L1_ERROR_NONE)
 800964e:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10c      	bne.n	8009670 <VL53L1_LoadPatch+0x21c>
		status = VL53L1_WrByte(
 8009656:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800965a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800965e:	2201      	movs	r2, #1
 8009660:	f44f 618e 	mov.w	r1, #1136	; 0x470
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	f004 f98f 	bl	800d988 <VL53L1_WrByte>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				Dev,
				VL53L1_PATCH__CTRL,
				0x01);
	/* Enable Firmware */
	if (status == VL53L1_ERROR_NONE)
 8009670:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
 8009674:	2b00      	cmp	r3, #0
 8009676:	d10b      	bne.n	8009690 <VL53L1_LoadPatch+0x23c>
		status = VL53L1_WrByte(
 8009678:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800967c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8009680:	2201      	movs	r2, #1
 8009682:	2185      	movs	r1, #133	; 0x85
 8009684:	6818      	ldr	r0, [r3, #0]
 8009686:	f004 f97f 	bl	800d988 <VL53L1_WrByte>
 800968a:	4603      	mov	r3, r0
 800968c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
				VL53L1_FIRMWARE__ENABLE,
				0x01);

	LOG_FUNCTION_END(status);

	return status;
 8009690:	f997 3117 	ldrsb.w	r3, [r7, #279]	; 0x117
}
 8009694:	4618      	mov	r0, r3
 8009696:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20000010 	.word	0x20000010

080096a4 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 80096a4:	b5b0      	push	{r4, r5, r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af04      	add	r7, sp, #16
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80096b0:	2300      	movs	r3, #0
 80096b2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 80096b8:	2162      	movs	r1, #98	; 0x62
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f002 f90b 	bl	800b8d6 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	2200      	movs	r2, #0
 80096c4:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	2201      	movs	r2, #1
 80096ca:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2200      	movs	r2, #0
 80096d0:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2201      	movs	r2, #1
 80096d6:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2201      	movs	r2, #1
 80096dc:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096e4:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80096ec:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80096f4:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	2264      	movs	r2, #100	; 0x64
 80096fa:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009702:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	f240 72db 	movw	r2, #2011	; 0x7db
 8009712:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f002 f8c1 	bl	800b89e <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800971c:	78fb      	ldrb	r3, [r7, #3]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d008      	beq.n	8009734 <VL53L1_data_init+0x90>
 8009722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d104      	bne.n	8009734 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	f000 f857 	bl	80097de <VL53L1_read_p2p_data>
 8009730:	4603      	mov	r3, r0
 8009732:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800973a:	4618      	mov	r0, r3
 800973c:	f001 fbf0 	bl	800af20 <VL53L1_init_refspadchar_config_struct>
 8009740:	4603      	mov	r3, r0
 8009742:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800974a:	4618      	mov	r0, r3
 800974c:	f001 fc0c 	bl	800af68 <VL53L1_init_ssc_config_struct>
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	f103 0242 	add.w	r2, r3, #66	; 0x42
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8009760:	4619      	mov	r1, r3
 8009762:	4610      	mov	r0, r2
 8009764:	f001 fc21 	bl	800afaa <VL53L1_init_xtalk_config_struct>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8009772:	4618      	mov	r0, r3
 8009774:	f001 fc7b 	bl	800b06e <VL53L1_init_offset_cal_config_struct>
 8009778:	4603      	mov	r3, r0
 800977a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	33a4      	adds	r3, #164	; 0xa4
 8009780:	4618      	mov	r0, r3
 8009782:	f001 fc9b 	bl	800b0bc <VL53L1_init_tuning_parm_storage_struct>
 8009786:	4603      	mov	r3, r0
 8009788:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 800978a:	2120      	movs	r1, #32
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fcc1 	bl	800a114 <VL53L1_set_vhv_loopbound>
 8009792:	4603      	mov	r3, r0
 8009794:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8009796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d116      	bne.n	80097cc <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	7858      	ldrb	r0, [r3, #1]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	8b1c      	ldrh	r4, [r3, #24]
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	689d      	ldr	r5, [r3, #8]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	68ba      	ldr	r2, [r7, #8]
 80097b0:	6912      	ldr	r2, [r2, #16]
 80097b2:	68b9      	ldr	r1, [r7, #8]
 80097b4:	6949      	ldr	r1, [r1, #20]
 80097b6:	9102      	str	r1, [sp, #8]
 80097b8:	9201      	str	r2, [sp, #4]
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	462b      	mov	r3, r5
 80097be:	4622      	mov	r2, r4
 80097c0:	4601      	mov	r1, r0
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fad8 	bl	8009d78 <VL53L1_set_preset_mode>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f002 fe03 	bl	800c3d8 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 80097d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bdb0      	pop	{r4, r5, r7, pc}

080097de <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b084      	sub	sp, #16
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 80097e6:	2300      	movs	r3, #0
 80097e8:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80097ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d108      	bne.n	8009808 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f002 ff87 	bl	800c712 <VL53L1_get_static_nvm_managed>
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8009808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d107      	bne.n	8009820 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	3342      	adds	r3, #66	; 0x42
 8009814:	4619      	mov	r1, r3
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f003 f8b9 	bl	800c98e <VL53L1_get_customer_nvm_managed>
 800981c:	4603      	mov	r3, r0
 800981e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8009820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d115      	bne.n	8009854 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 800982e:	4619      	mov	r1, r3
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f003 ff6b 	bl	800d70c <VL53L1_get_nvm_copy_data>
 8009836:	4603      	mov	r3, r0
 8009838:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 800983a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d108      	bne.n	8009854 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	33f0      	adds	r3, #240	; 0xf0
 800984c:	4619      	mov	r1, r3
 800984e:	4610      	mov	r0, r2
 8009850:	f002 f9a3 	bl	800bb9a <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8009854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d109      	bne.n	8009870 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8009862:	461a      	mov	r2, r3
 8009864:	21de      	movs	r1, #222	; 0xde
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f004 f8ec 	bl	800da44 <VL53L1_RdWord>
 800986c:	4603      	mov	r3, r0
 800986e:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8009876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800987a:	d204      	bcs.n	8009886 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8009882:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8009886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d107      	bne.n	800989e <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	339e      	adds	r3, #158	; 0x9e
 8009892:	4619      	mov	r1, r3
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f990 	bl	8009bba <VL53L1_get_mode_mitigation_roi>
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d114      	bne.n	80098d2 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10f      	bne.n	80098d2 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80098b8:	011b      	lsls	r3, r3, #4
 80098ba:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 80098c8:	011b      	lsls	r3, r3, #4
 80098ca:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 80098d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80098de:	b480      	push	{r7}
 80098e0:	b085      	sub	sp, #20
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80098e8:	2300      	movs	r3, #0
 80098ea:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80098fa:	23f1      	movs	r3, #241	; 0xf1
 80098fc:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 80098fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10c      	bne.n	8009920 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	683a      	ldr	r2, [r7, #0]
 800990a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8009912:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8009920:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8009930:	b480      	push	{r7}
 8009932:	b085      	sub	sp, #20
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800993a:	2300      	movs	r3, #0
 800993c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8009948:	2b00      	cmp	r3, #0
 800994a:	d101      	bne.n	8009950 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800994c:	23f1      	movs	r3, #241	; 0xf1
 800994e:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8009950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d109      	bne.n	800996c <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 800995e:	68ba      	ldr	r2, [r7, #8]
 8009960:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8009964:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 800996c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3714      	adds	r7, #20
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b088      	sub	sp, #32
 8009980:	af02      	add	r7, sp, #8
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800998a:	2300      	movs	r3, #0
 800998c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8009998:	2b00      	cmp	r3, #0
 800999a:	d101      	bne.n	80099a0 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800999c:	23f1      	movs	r3, #241	; 0xf1
 800999e:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 80099a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d11b      	bne.n	80099e0 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
 80099cc:	9201      	str	r2, [sp, #4]
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	460b      	mov	r3, r1
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	6879      	ldr	r1, [r7, #4]
 80099d6:	68b8      	ldr	r0, [r7, #8]
 80099d8:	f002 fc30 	bl	800c23c <VL53L1_calc_timeout_register_values>
 80099dc:	4603      	mov	r3, r0
 80099de:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 80099e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3718      	adds	r7, #24
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b088      	sub	sp, #32
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
 80099f8:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80099fa:	2300      	movs	r3, #0
 80099fc:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8009a06:	2300      	movs	r3, #0
 8009a08:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8009a14:	23f1      	movs	r3, #241	; 0xf1
 8009a16:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8009a18:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d14a      	bne.n	8009ab6 <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	4610      	mov	r0, r2
 8009a30:	f002 faa9 	bl	800bf86 <VL53L1_calc_macro_period_us>
 8009a34:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 8009a3c:	6979      	ldr	r1, [r7, #20]
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f002 fb61 	bl	800c106 <VL53L1_calc_timeout_us>
 8009a44:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 8009a50:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8009a52:	8a7b      	ldrh	r3, [r7, #18]
 8009a54:	021b      	lsls	r3, r3, #8
 8009a56:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8009a5e:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8009a60:	4413      	add	r3, r2
 8009a62:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8009a64:	8a7b      	ldrh	r3, [r7, #18]
 8009a66:	6979      	ldr	r1, [r7, #20]
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f002 fb8c 	bl	800c186 <VL53L1_calc_decoded_timeout_us>
 8009a6e:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 8009a7a:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8009a7c:	8a7b      	ldrh	r3, [r7, #18]
 8009a7e:	021b      	lsls	r3, r3, #8
 8009a80:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8009a88:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8009a8a:	4413      	add	r3, r2
 8009a8c:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8009a8e:	8a7b      	ldrh	r3, [r7, #18]
 8009a90:	6979      	ldr	r1, [r7, #20]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f002 fb77 	bl	800c186 <VL53L1_calc_decoded_timeout_us>
 8009a98:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8009ab6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3720      	adds	r7, #32
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8009ac2:	b480      	push	{r7}
 8009ac4:	b087      	sub	sp, #28
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	60f8      	str	r0, [r7, #12]
 8009aca:	460b      	mov	r3, r1
 8009acc:	607a      	str	r2, [r7, #4]
 8009ace:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8009adc:	7afb      	ldrb	r3, [r7, #11]
 8009ade:	2b07      	cmp	r3, #7
 8009ae0:	d81c      	bhi.n	8009b1c <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8009ae2:	7afb      	ldrb	r3, [r7, #11]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d004      	beq.n	8009af2 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8009ae8:	7afb      	ldrb	r3, [r7, #11]
 8009aea:	2201      	movs	r2, #1
 8009aec:	fa02 f303 	lsl.w	r3, r2, r3
 8009af0:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 8009af8:	7dbb      	ldrb	r3, [r7, #22]
 8009afa:	4013      	ands	r3, r2
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8009b02:	7afb      	ldrb	r3, [r7, #11]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00b      	beq.n	8009b20 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	7afb      	ldrb	r3, [r7, #11]
 8009b10:	fa42 f303 	asr.w	r3, r2, r3
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	e001      	b.n	8009b20 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009b1c:	23fc      	movs	r3, #252	; 0xfc
 8009b1e:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8009b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	7858      	ldrb	r0, [r3, #1]
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	7819      	ldrb	r1, [r3, #0]
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 8009b50:	461a      	mov	r2, r3
 8009b52:	f002 fbec 	bl	800c32e <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	7898      	ldrb	r0, [r3, #2]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	78d9      	ldrb	r1, [r3, #3]
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8009b64:	461a      	mov	r2, r3
 8009b66:	f002 fc21 	bl	800c3ac <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8009b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3710      	adds	r7, #16
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}

08009b76 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b084      	sub	sp, #16
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
 8009b7e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009b80:	2300      	movs	r3, #0
 8009b82:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	3301      	adds	r3, #1
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	4619      	mov	r1, r3
 8009b96:	f002 fcd8 	bl	800c54a <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	1c99      	adds	r1, r3, #2
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	3303      	adds	r3, #3
 8009ba8:	461a      	mov	r2, r3
 8009baa:	f002 fbe7 	bl	800c37c <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8009bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b086      	sub	sp, #24
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 8009bde:	f107 020e 	add.w	r2, r7, #14
 8009be2:	f107 010d 	add.w	r1, r7, #13
 8009be6:	4618      	mov	r0, r3
 8009be8:	f002 fcaf 	bl	800c54a <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8009bec:	7bba      	ldrb	r2, [r7, #14]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8009bf2:	7b7a      	ldrb	r2, [r7, #13]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 8009bfe:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
 8009c02:	091b      	lsrs	r3, r3, #4
 8009c04:	b2da      	uxtb	r2, r3
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8009c0a:	7bfb      	ldrb	r3, [r7, #15]
 8009c0c:	f003 030f 	and.w	r3, r3, #15
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8009c16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
	...

08009c24 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	607a      	str	r2, [r7, #4]
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	460b      	mov	r3, r1
 8009c32:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009c34:	2300      	movs	r3, #0
 8009c36:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8009c3c:	7afb      	ldrb	r3, [r7, #11]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	2b25      	cmp	r3, #37	; 0x25
 8009c42:	f200 808e 	bhi.w	8009d62 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8009c46:	a201      	add	r2, pc, #4	; (adr r2, 8009c4c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009ce5 	.word	0x08009ce5
 8009c50:	08009ce5 	.word	0x08009ce5
 8009c54:	08009ce5 	.word	0x08009ce5
 8009c58:	08009ce5 	.word	0x08009ce5
 8009c5c:	08009ce5 	.word	0x08009ce5
 8009c60:	08009d0f 	.word	0x08009d0f
 8009c64:	08009d0f 	.word	0x08009d0f
 8009c68:	08009d0f 	.word	0x08009d0f
 8009c6c:	08009d63 	.word	0x08009d63
 8009c70:	08009d63 	.word	0x08009d63
 8009c74:	08009d63 	.word	0x08009d63
 8009c78:	08009d63 	.word	0x08009d63
 8009c7c:	08009d63 	.word	0x08009d63
 8009c80:	08009d63 	.word	0x08009d63
 8009c84:	08009d63 	.word	0x08009d63
 8009c88:	08009d63 	.word	0x08009d63
 8009c8c:	08009ce5 	.word	0x08009ce5
 8009c90:	08009d0f 	.word	0x08009d0f
 8009c94:	08009d63 	.word	0x08009d63
 8009c98:	08009d63 	.word	0x08009d63
 8009c9c:	08009d63 	.word	0x08009d63
 8009ca0:	08009d63 	.word	0x08009d63
 8009ca4:	08009d63 	.word	0x08009d63
 8009ca8:	08009d63 	.word	0x08009d63
 8009cac:	08009d63 	.word	0x08009d63
 8009cb0:	08009d63 	.word	0x08009d63
 8009cb4:	08009d63 	.word	0x08009d63
 8009cb8:	08009d63 	.word	0x08009d63
 8009cbc:	08009d63 	.word	0x08009d63
 8009cc0:	08009d63 	.word	0x08009d63
 8009cc4:	08009d63 	.word	0x08009d63
 8009cc8:	08009d63 	.word	0x08009d63
 8009ccc:	08009d63 	.word	0x08009d63
 8009cd0:	08009d63 	.word	0x08009d63
 8009cd4:	08009d63 	.word	0x08009d63
 8009cd8:	08009d39 	.word	0x08009d39
 8009cdc:	08009d39 	.word	0x08009d39
 8009ce0:	08009d39 	.word	0x08009d39
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 8009cfe:	6a3b      	ldr	r3, [r7, #32]
 8009d00:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	601a      	str	r2, [r3, #0]
	break;
 8009d0c:	e02c      	b.n	8009d68 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 8009d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d34:	601a      	str	r2, [r3, #0]
	break;
 8009d36:	e017      	b.n	8009d68 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 8009d52:	6a3b      	ldr	r3, [r7, #32]
 8009d54:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	601a      	str	r2, [r3, #0]
	break;
 8009d60:	e002      	b.n	8009d68 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8009d62:	23fc      	movs	r3, #252	; 0xfc
 8009d64:	75fb      	strb	r3, [r7, #23]
		break;
 8009d66:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8009d68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	371c      	adds	r7, #28
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b092      	sub	sp, #72	; 0x48
 8009d7c:	af04      	add	r7, sp, #16
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	607b      	str	r3, [r7, #4]
 8009d82:	460b      	mov	r3, r1
 8009d84:	72fb      	strb	r3, [r7, #11]
 8009d86:	4613      	mov	r3, r2
 8009d88:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8009d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8009da2:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8009da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8009daa:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8009db2:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009dba:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbe:	33a4      	adds	r3, #164	; 0xa4
 8009dc0:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8009dc8:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8009dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dcc:	7afa      	ldrb	r2, [r7, #11]
 8009dce:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009dd4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8009dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dda:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8009ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009de0:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8009de2:	2103      	movs	r1, #3
 8009de4:	68f8      	ldr	r0, [r7, #12]
 8009de6:	f001 fd76 	bl	800b8d6 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8009dea:	7afb      	ldrb	r3, [r7, #11]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	2b25      	cmp	r3, #37	; 0x25
 8009df0:	f200 810c 	bhi.w	800a00c <VL53L1_set_preset_mode+0x294>
 8009df4:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <VL53L1_set_preset_mode+0x84>)
 8009df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfa:	bf00      	nop
 8009dfc:	08009e95 	.word	0x08009e95
 8009e00:	08009eb1 	.word	0x08009eb1
 8009e04:	08009ecd 	.word	0x08009ecd
 8009e08:	08009ee9 	.word	0x08009ee9
 8009e0c:	08009f05 	.word	0x08009f05
 8009e10:	08009f21 	.word	0x08009f21
 8009e14:	08009f3d 	.word	0x08009f3d
 8009e18:	08009f59 	.word	0x08009f59
 8009e1c:	0800a00d 	.word	0x0800a00d
 8009e20:	0800a00d 	.word	0x0800a00d
 8009e24:	0800a00d 	.word	0x0800a00d
 8009e28:	0800a00d 	.word	0x0800a00d
 8009e2c:	0800a00d 	.word	0x0800a00d
 8009e30:	0800a00d 	.word	0x0800a00d
 8009e34:	0800a00d 	.word	0x0800a00d
 8009e38:	0800a00d 	.word	0x0800a00d
 8009e3c:	08009f75 	.word	0x08009f75
 8009e40:	08009f91 	.word	0x08009f91
 8009e44:	0800a00d 	.word	0x0800a00d
 8009e48:	0800a00d 	.word	0x0800a00d
 8009e4c:	0800a00d 	.word	0x0800a00d
 8009e50:	0800a00d 	.word	0x0800a00d
 8009e54:	0800a00d 	.word	0x0800a00d
 8009e58:	0800a00d 	.word	0x0800a00d
 8009e5c:	0800a00d 	.word	0x0800a00d
 8009e60:	0800a00d 	.word	0x0800a00d
 8009e64:	0800a00d 	.word	0x0800a00d
 8009e68:	0800a00d 	.word	0x0800a00d
 8009e6c:	0800a00d 	.word	0x0800a00d
 8009e70:	0800a00d 	.word	0x0800a00d
 8009e74:	0800a00d 	.word	0x0800a00d
 8009e78:	0800a00d 	.word	0x0800a00d
 8009e7c:	0800a00d 	.word	0x0800a00d
 8009e80:	0800a00d 	.word	0x0800a00d
 8009e84:	0800a00d 	.word	0x0800a00d
 8009e88:	08009fad 	.word	0x08009fad
 8009e8c:	08009fcd 	.word	0x08009fcd
 8009e90:	08009fed 	.word	0x08009fed

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ea4:	f001 f999 	bl	800b1da <VL53L1_preset_mode_standard_ranging>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009eae:	e0b1      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	9301      	str	r3, [sp, #4]
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	6a3b      	ldr	r3, [r7, #32]
 8009eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ec0:	f001 faa9 	bl	800b416 <VL53L1_preset_mode_standard_ranging_short_range>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009eca:	e0a3      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	9301      	str	r3, [sp, #4]
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	9300      	str	r3, [sp, #0]
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009eda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009edc:	f001 fadc 	bl	800b498 <VL53L1_preset_mode_standard_ranging_long_range>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009ee6:	e095      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	9301      	str	r3, [sp, #4]
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	6a3b      	ldr	r3, [r7, #32]
 8009ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ef6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ef8:	f001 fb0f 	bl	800b51a <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009f02:	e087      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	6a3b      	ldr	r3, [r7, #32]
 8009f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f14:	f001 fb26 	bl	800b564 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009f1e:	e079      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f30:	f001 fb3d 	bl	800b5ae <VL53L1_preset_mode_timed_ranging>
 8009f34:	4603      	mov	r3, r0
 8009f36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009f3a:	e06b      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	9301      	str	r3, [sp, #4]
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	9300      	str	r3, [sp, #0]
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f4c:	f001 fb69 	bl	800b622 <VL53L1_preset_mode_timed_ranging_short_range>
 8009f50:	4603      	mov	r3, r0
 8009f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009f56:	e05d      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	9301      	str	r3, [sp, #4]
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	9300      	str	r3, [sp, #0]
 8009f60:	6a3b      	ldr	r3, [r7, #32]
 8009f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f68:	f001 fb95 	bl	800b696 <VL53L1_preset_mode_timed_ranging_long_range>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009f72:	e04f      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8009f74:	69bb      	ldr	r3, [r7, #24]
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
 8009f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f84:	f001 fc69 	bl	800b85a <VL53L1_preset_mode_olt>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009f8e:	e041      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	9301      	str	r3, [sp, #4]
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fa0:	f001 fc25 	bl	800b7ee <VL53L1_preset_mode_singleshot_ranging>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8009faa:	e033      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	9302      	str	r3, [sp, #8]
 8009fb0:	69bb      	ldr	r3, [r7, #24]
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	69fb      	ldr	r3, [r7, #28]
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fc0:	f001 fbc9 	bl	800b756 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8009fca:	e023      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	9302      	str	r3, [sp, #8]
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	6a3b      	ldr	r3, [r7, #32]
 8009fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009fe0:	f001 fb93 	bl	800b70a <VL53L1_preset_mode_low_power_auto_ranging>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8009fea:	e013      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	9302      	str	r3, [sp, #8]
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	9301      	str	r3, [sp, #4]
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	9300      	str	r3, [sp, #0]
 8009ff8:	6a3b      	ldr	r3, [r7, #32]
 8009ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a000:	f001 fbcf 	bl	800b7a2 <VL53L1_preset_mode_low_power_auto_long_ranging>
 800a004:	4603      	mov	r3, r0
 800a006:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 800a00a:	e003      	b.n	800a014 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 800a00c:	23fc      	movs	r3, #252	; 0xfc
 800a00e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 800a012:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 800a014:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d105      	bne.n	800a028 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 800a01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01e:	893a      	ldrh	r2, [r7, #8]
 800a020:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	893a      	ldrh	r2, [r7, #8]
 800a026:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 800a028:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d108      	bne.n	800a042 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 800a030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a032:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a034:	6879      	ldr	r1, [r7, #4]
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f7ff fca0 	bl	800997c <VL53L1_set_timeouts_us>
 800a03c:	4603      	mov	r3, r0
 800a03e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 800a042:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800a046:	2b00      	cmp	r3, #0
 800a048:	d106      	bne.n	800a058 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 800a04a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f7ff fc46 	bl	80098de <VL53L1_set_inter_measurement_period_ms>
 800a052:	4603      	mov	r3, r0
 800a054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 800a058:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3738      	adds	r7, #56	; 0x38
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a06e:	2300      	movs	r3, #0
 800a070:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a080:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr

0800a090 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	887a      	ldrh	r2, [r7, #2]
 800a0a8:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 800a0ac:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr

0800a0bc <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800a0d8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	887a      	ldrh	r2, [r7, #2]
 800a100:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 800a104:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a108:	4618      	mov	r0, r3
 800a10a:	3714      	adds	r7, #20
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	460b      	mov	r3, r1
 800a11e:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800a120:	2300      	movs	r3, #0
 800a122:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800a12e:	f003 0303 	and.w	r3, r3, #3
 800a132:	b2da      	uxtb	r2, r3
 800a134:	78fb      	ldrb	r3, [r7, #3]
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	4413      	add	r3, r2
 800a13c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 800a144:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b0d0      	sub	sp, #320	; 0x140
 800a158:	af00      	add	r7, sp, #0
 800a15a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a15e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a162:	6018      	str	r0, [r3, #0]
 800a164:	4608      	mov	r0, r1
 800a166:	4611      	mov	r1, r2
 800a168:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a16c:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800a170:	4602      	mov	r2, r0
 800a172:	701a      	strb	r2, [r3, #0]
 800a174:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a178:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a17c:	460a      	mov	r2, r1
 800a17e:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a180:	2300      	movs	r3, #0
 800a182:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a186:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a18a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 800a194:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a198:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a19c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 800a1a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1a4:	3342      	adds	r3, #66	; 0x42
 800a1a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800a1aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a1b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 800a1b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1ba:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800a1be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 800a1c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1c6:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800a1ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800a1ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1d2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800a1d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800a1da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1de:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800a1e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 800a1e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1ea:	332c      	adds	r3, #44	; 0x2c
 800a1ec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 800a1f0:	f107 030c 	add.w	r3, r7, #12
 800a1f4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 800a210:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a214:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a218:	f2a2 123d 	subw	r2, r2, #317	; 0x13d
 800a21c:	7812      	ldrb	r2, [r2, #0]
 800a21e:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 800a220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a224:	791b      	ldrb	r3, [r3, #4]
 800a226:	b25b      	sxtb	r3, r3
 800a228:	f003 030f 	and.w	r3, r3, #15
 800a22c:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 800a22e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a232:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800a236:	f993 3000 	ldrsb.w	r3, [r3]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	b25b      	sxtb	r3, r3
 800a23e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 800a240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a244:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 800a246:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a24a:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 800a24e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a252:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 800a256:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a25a:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 800a25e:	2bff      	cmp	r3, #255	; 0xff
 800a260:	d104      	bne.n	800a26c <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 800a262:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a266:	2200      	movs	r2, #0
 800a268:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a26c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a270:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800a274:	2b01      	cmp	r3, #1
 800a276:	d139      	bne.n	800a2ec <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800a278:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a27c:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a280:	2b00      	cmp	r3, #0
 800a282:	d133      	bne.n	800a2ec <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 800a284:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a288:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 800a28c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a290:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 800a294:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a298:	2220      	movs	r2, #32
 800a29a:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 800a29e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2a2:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800a2a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d10c      	bne.n	800a2c8 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 800a2ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2b2:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 800a2be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800a2c6:	e004      	b.n	800a2d2 <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800a2c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 800a2d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a2d6:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	2b04      	cmp	r3, #4
 800a2de:	d805      	bhi.n	800a2ec <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800a2e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a2e4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a2e8:	2205      	movs	r2, #5
 800a2ea:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a2ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2f0:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d113      	bne.n	800a320 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800a2f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a2fc:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 800a300:	2b01      	cmp	r3, #1
 800a302:	d10d      	bne.n	800a320 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800a304:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a308:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 800a30c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a310:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800a314:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a318:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a31c:	2206      	movs	r2, #6
 800a31e:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 800a320:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a324:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	3b01      	subs	r3, #1
 800a32c:	2b05      	cmp	r3, #5
 800a32e:	d827      	bhi.n	800a380 <VL53L1_init_and_start_range+0x22c>
 800a330:	a201      	add	r2, pc, #4	; (adr r2, 800a338 <VL53L1_init_and_start_range+0x1e4>)
 800a332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a336:	bf00      	nop
 800a338:	0800a379 	.word	0x0800a379
 800a33c:	0800a371 	.word	0x0800a371
 800a340:	0800a369 	.word	0x0800a369
 800a344:	0800a361 	.word	0x0800a361
 800a348:	0800a359 	.word	0x0800a359
 800a34c:	0800a351 	.word	0x0800a351
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 800a350:	2301      	movs	r3, #1
 800a352:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a356:	e017      	b.n	800a388 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 800a358:	230d      	movs	r3, #13
 800a35a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a35e:	e013      	b.n	800a388 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 800a360:	2324      	movs	r3, #36	; 0x24
 800a362:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a366:	e00f      	b.n	800a388 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 800a368:	2344      	movs	r3, #68	; 0x44
 800a36a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a36e:	e00b      	b.n	800a388 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 800a370:	235a      	movs	r3, #90	; 0x5a
 800a372:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a376:	e007      	b.n	800a388 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 800a378:	2371      	movs	r3, #113	; 0x71
 800a37a:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a37e:	e003      	b.n	800a388 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 800a380:	2383      	movs	r3, #131	; 0x83
 800a382:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 800a386:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 800a388:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a38c:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800a390:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 800a394:	f107 030c 	add.w	r3, r7, #12
 800a398:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800a39c:	2300      	movs	r3, #0
 800a39e:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800a3a2:	e00b      	b.n	800a3bc <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 800a3a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a3a8:	1c5a      	adds	r2, r3, #1
 800a3aa:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800a3b2:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800a3bc:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800a3c0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d3ed      	bcc.n	800a3a4 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 800a3c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a3cc:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	2b05      	cmp	r3, #5
 800a3d4:	d917      	bls.n	800a406 <VL53L1_init_and_start_range+0x2b2>
 800a3d6:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d113      	bne.n	800a406 <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a3de:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a3e2:	f1c3 0301 	rsb	r3, r3, #1
 800a3e6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a3ea:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 800a3ee:	f107 020c 	add.w	r2, r7, #12
 800a3f2:	4413      	add	r3, r2
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	210b      	movs	r1, #11
 800a3f8:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 800a3fc:	f002 f8d4 	bl	800c5a8 <VL53L1_i2c_encode_static_nvm_managed>
 800a400:	4603      	mov	r3, r0
 800a402:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800a406:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a40a:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	2b04      	cmp	r3, #4
 800a412:	d917      	bls.n	800a444 <VL53L1_init_and_start_range+0x2f0>
 800a414:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d113      	bne.n	800a444 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a41c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a420:	f1c3 030d 	rsb	r3, r3, #13
 800a424:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a428:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800a42c:	f107 020c 	add.w	r2, r7, #12
 800a430:	4413      	add	r3, r2
 800a432:	461a      	mov	r2, r3
 800a434:	2117      	movs	r1, #23
 800a436:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800a43a:	f002 f991 	bl	800c760 <VL53L1_i2c_encode_customer_nvm_managed>
 800a43e:	4603      	mov	r3, r0
 800a440:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 800a444:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a448:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d917      	bls.n	800a482 <VL53L1_init_and_start_range+0x32e>
 800a452:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a456:	2b00      	cmp	r3, #0
 800a458:	d113      	bne.n	800a482 <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a45a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a45e:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 800a462:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a466:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 800a46a:	f107 020c 	add.w	r2, r7, #12
 800a46e:	4413      	add	r3, r2
 800a470:	461a      	mov	r2, r3
 800a472:	2120      	movs	r1, #32
 800a474:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800a478:	f002 fab0 	bl	800c9dc <VL53L1_i2c_encode_static_config>
 800a47c:	4603      	mov	r3, r0
 800a47e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 800a482:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a486:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d917      	bls.n	800a4c0 <VL53L1_init_and_start_range+0x36c>
 800a490:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a494:	2b00      	cmp	r3, #0
 800a496:	d113      	bne.n	800a4c0 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800a498:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a49c:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 800a4a0:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a4a4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800a4a8:	f107 020c 	add.w	r2, r7, #12
 800a4ac:	4413      	add	r3, r2
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	2116      	movs	r1, #22
 800a4b2:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800a4b6:	f002 fb74 	bl	800cba2 <VL53L1_i2c_encode_general_config>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 800a4c0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a4c4:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a4c8:	781b      	ldrb	r3, [r3, #0]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d917      	bls.n	800a4fe <VL53L1_init_and_start_range+0x3aa>
 800a4ce:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d113      	bne.n	800a4fe <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a4d6:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a4da:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800a4de:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a4e2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 800a4e6:	f107 020c 	add.w	r2, r7, #12
 800a4ea:	4413      	add	r3, r2
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	2117      	movs	r1, #23
 800a4f0:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a4f4:	f002 fbd9 	bl	800ccaa <VL53L1_i2c_encode_timing_config>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800a4fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a502:	f5a3 739f 	sub.w	r3, r3, #318	; 0x13e
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d036      	beq.n	800a57a <VL53L1_init_and_start_range+0x426>
 800a50c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a510:	2b00      	cmp	r3, #0
 800a512:	d132      	bne.n	800a57a <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800a514:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a518:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 800a51c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 800a520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a524:	791b      	ldrb	r3, [r3, #4]
 800a526:	f003 0320 	and.w	r3, r3, #32
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d017      	beq.n	800a55e <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 800a52e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a532:	789b      	ldrb	r3, [r3, #2]
 800a534:	f043 0301 	orr.w	r3, r3, #1
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a53e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 800a540:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a544:	789b      	ldrb	r3, [r3, #2]
 800a546:	f043 0301 	orr.w	r3, r3, #1
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a550:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 800a552:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a556:	789a      	ldrb	r2, [r3, #2]
 800a558:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a55c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a55e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 800a562:	f107 020c 	add.w	r2, r7, #12
 800a566:	4413      	add	r3, r2
 800a568:	461a      	mov	r2, r3
 800a56a:	2112      	movs	r1, #18
 800a56c:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 800a570:	f002 fc1d 	bl	800cdae <VL53L1_i2c_encode_dynamic_config>
 800a574:	4603      	mov	r3, r0
 800a576:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 800a57a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d113      	bne.n	800a5aa <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 800a582:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 800a586:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 800a58a:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 800a58e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 800a592:	f107 020c 	add.w	r2, r7, #12
 800a596:	4413      	add	r3, r2
 800a598:	461a      	mov	r2, r3
 800a59a:	2105      	movs	r1, #5
 800a59c:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 800a5a0:	f002 fc8a 	bl	800ceb8 <VL53L1_i2c_encode_system_control>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 800a5aa:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10f      	bne.n	800a5d2 <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 800a5b2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 800a5b6:	f107 020c 	add.w	r2, r7, #12
 800a5ba:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 800a5be:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800a5c2:	f5a0 709e 	sub.w	r0, r0, #316	; 0x13c
 800a5c6:	6800      	ldr	r0, [r0, #0]
 800a5c8:	f003 f972 	bl	800d8b0 <VL53L1_WriteMulti>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 800a5d2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d109      	bne.n	800a5ee <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800a5da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a5de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a5e2:	6818      	ldr	r0, [r3, #0]
 800a5e4:	f001 f9a0 	bl	800b928 <VL53L1_update_ll_driver_rd_state>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800a5ee:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d109      	bne.n	800a60a <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 800a5f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a5fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a5fe:	6818      	ldr	r0, [r3, #0]
 800a600:	f001 fa65 	bl	800bace <VL53L1_update_ll_driver_cfg_state>
 800a604:	4603      	mov	r3, r0
 800a606:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 800a60a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 800a60e:	4618      	mov	r0, r3
 800a610:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b0c8      	sub	sp, #288	; 0x120
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a622:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a626:	6018      	str	r0, [r3, #0]
 800a628:	460a      	mov	r2, r1
 800a62a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a62e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a632:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a634:	2300      	movs	r3, #0
 800a636:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800a63a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a63e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 800a648:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a64c:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800a650:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 800a654:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a658:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a65c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800a660:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a664:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 800a668:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 800a66c:	2388      	movs	r3, #136	; 0x88
 800a66e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 800a67e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a682:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d008      	beq.n	800a69e <VL53L1_get_measurement_results+0x86>
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d10d      	bne.n	800a6ac <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 800a690:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a694:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800a698:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800a69c:	e00a      	b.n	800a6b4 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 800a69e:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a6a2:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800a6a6:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800a6aa:	e003      	b.n	800a6b4 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 800a6ac:	232c      	movs	r3, #44	; 0x2c
 800a6ae:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 800a6b2:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800a6b4:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d10f      	bne.n	800a6dc <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 800a6bc:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
 800a6c0:	f107 0208 	add.w	r2, r7, #8
 800a6c4:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800a6c8:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800a6cc:	f5a0 708e 	sub.w	r0, r0, #284	; 0x11c
 800a6d0:	6800      	ldr	r0, [r0, #0]
 800a6d2:	f003 f923 	bl	800d91c <VL53L1_ReadMulti>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800a6dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a6e0:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d917      	bls.n	800a71a <VL53L1_get_measurement_results+0x102>
 800a6ea:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d113      	bne.n	800a71a <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800a6f2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a6f6:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 800a6fa:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800a6fe:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800a702:	f107 0208 	add.w	r2, r7, #8
 800a706:	4413      	add	r3, r2
 800a708:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800a70c:	4619      	mov	r1, r3
 800a70e:	2038      	movs	r0, #56	; 0x38
 800a710:	f002 fd64 	bl	800d1dc <VL53L1_i2c_decode_debug_results>
 800a714:	4603      	mov	r3, r0
 800a716:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 800a71a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800a71e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d017      	beq.n	800a758 <VL53L1_get_measurement_results+0x140>
 800a728:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d113      	bne.n	800a758 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800a730:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800a734:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 800a738:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800a73c:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 800a740:	f107 0208 	add.w	r2, r7, #8
 800a744:	4413      	add	r3, r2
 800a746:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800a74a:	4619      	mov	r1, r3
 800a74c:	2021      	movs	r0, #33	; 0x21
 800a74e:	f002 fce4 	bl	800d11a <VL53L1_i2c_decode_core_results>
 800a752:	4603      	mov	r3, r0
 800a754:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 800a758:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d110      	bne.n	800a782 <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 800a760:	2300      	movs	r3, #0
 800a762:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 800a766:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 800a76a:	f107 0208 	add.w	r2, r7, #8
 800a76e:	4413      	add	r3, r2
 800a770:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800a774:	4619      	mov	r1, r3
 800a776:	202c      	movs	r0, #44	; 0x2c
 800a778:	f002 fbd9 	bl	800cf2e <VL53L1_i2c_decode_system_results>
 800a77c:	4603      	mov	r3, r0
 800a77e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 800a782:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 800a786:	4618      	mov	r0, r3
 800a788:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	460b      	mov	r3, r1
 800a79a:	607a      	str	r2, [r7, #4]
 800a79c:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800a7ac:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800a7b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d106      	bne.n	800a7c8 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800a7ba:	7afb      	ldrb	r3, [r7, #11]
 800a7bc:	4619      	mov	r1, r3
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f7ff ff2a 	bl	800a618 <VL53L1_get_measurement_results>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800a7c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d10c      	bne.n	800a7ea <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 800a7d0:	69bb      	ldr	r3, [r7, #24]
 800a7d2:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	69bb      	ldr	r3, [r7, #24]
 800a7da:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	f503 7222 	add.w	r2, r3, #648	; 0x288
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	f000 f85d 	bl	800a8a4 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800a7ea:	69bb      	ldr	r3, [r7, #24]
 800a7ec:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d11f      	bne.n	800a834 <VL53L1_get_device_results+0xa4>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 800a7f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d10e      	bne.n	800a81a <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 800a802:	2b00      	cmp	r3, #0
 800a804:	d109      	bne.n	800a81a <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f001 fe33 	bl	800c472 <VL53L1_low_power_auto_setup_manual_calibration>
 800a80c:	4603      	mov	r3, r0
 800a80e:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 800a818:	e00c      	b.n	800a834 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 800a81a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d108      	bne.n	800a834 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d103      	bne.n	800a834 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	2202      	movs	r2, #2
 800a830:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 800a848:	2284      	movs	r2, #132	; 0x84
 800a84a:	6939      	ldr	r1, [r7, #16]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f003 fa3d 	bl	800dccc <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 800a852:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d104      	bne.n	800a864 <VL53L1_get_device_results+0xd4>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f001 f8ec 	bl	800ba38 <VL53L1_check_ll_driver_rd_state>
 800a860:	4603      	mov	r3, r0
 800a862:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800a864:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3720      	adds	r7, #32
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800a87c:	2300      	movs	r3, #0
 800a87e:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800a880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d107      	bne.n	800a898 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 800a888:	78fb      	ldrb	r3, [r7, #3]
 800a88a:	2203      	movs	r2, #3
 800a88c:	4619      	mov	r1, r3
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f7ff fc60 	bl	800a154 <VL53L1_init_and_start_range>
 800a894:	4603      	mov	r3, r0
 800a896:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 800a898:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b089      	sub	sp, #36	; 0x24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
 800a8b0:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	78da      	ldrb	r2, [r3, #3]
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	77fb      	strb	r3, [r7, #31]
 800a8d0:	e0d0      	b.n	800aa74 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	7ffa      	ldrb	r2, [r7, #31]
 800a8d6:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	78db      	ldrb	r3, [r3, #3]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10a      	bne.n	800a8fc <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	785b      	ldrb	r3, [r3, #1]
 800a8ea:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 800a8ee:	2b09      	cmp	r3, #9
 800a8f0:	d104      	bne.n	800a8fc <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	2213      	movs	r2, #19
 800a8f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8fa:	e007      	b.n	800a90c <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	785b      	ldrb	r3, [r3, #1]
 800a900:	f003 031f 	and.w	r3, r3, #31
 800a904:	b2da      	uxtb	r2, r3
			pdata->range_status =
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 800a90c:	7ffb      	ldrb	r3, [r7, #31]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d002      	beq.n	800a918 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 800a912:	2b01      	cmp	r3, #1
 800a914:	d05d      	beq.n	800a9d2 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 800a916:	e0a7      	b.n	800aa68 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	789b      	ldrb	r3, [r3, #2]
 800a91c:	2b07      	cmp	r3, #7
 800a91e:	d104      	bne.n	800a92a <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	821a      	strh	r2, [r3, #16]
 800a928:	e00c      	b.n	800a944 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	789b      	ldrb	r3, [r3, #2]
 800a92e:	2b08      	cmp	r3, #8
 800a930:	d104      	bne.n	800a93c <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	821a      	strh	r2, [r3, #16]
 800a93a:	e003      	b.n	800a944 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 800a950:	69bb      	ldr	r3, [r7, #24]
 800a952:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	895b      	ldrh	r3, [r3, #10]
 800a960:	015b      	lsls	r3, r3, #5
 800a962:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a96a:	d302      	bcc.n	800a972 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 800a96c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a970:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	b29a      	uxth	r2, r3
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 800a986:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	fb02 f303 	mul.w	r3, r2, r3
 800a990:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a998:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	da01      	bge.n	800a9a4 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 800a9a0:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800a9a4:	12db      	asrs	r3, r3, #11
 800a9a6:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800a9a8:	693b      	ldr	r3, [r7, #16]
 800a9aa:	b21a      	sxth	r2, r3
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 800a9bc:	69bb      	ldr	r3, [r7, #24]
 800a9be:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	621a      	str	r2, [r3, #32]

			break;
 800a9d0:	e04a      	b.n	800aa68 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 800a9de:	69bb      	ldr	r3, [r7, #24]
 800a9e0:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9e8:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	8bdb      	ldrh	r3, [r3, #30]
 800a9f6:	015b      	lsls	r3, r3, #5
 800a9f8:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa00:	d302      	bcc.n	800aa08 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 800aa02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa06:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 800aa1c:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	fb02 f303 	mul.w	r3, r2, r3
 800aa26:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa2e:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	da01      	bge.n	800aa3a <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 800aa36:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800aa3a:	12db      	asrs	r3, r3, #11
 800aa3c:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	b21a      	sxth	r2, r3
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	621a      	str	r2, [r3, #32]

			break;
 800aa66:	bf00      	nop
		}

		pdata++;
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	3340      	adds	r3, #64	; 0x40
 800aa6c:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 800aa6e:	7ffb      	ldrb	r3, [r7, #31]
 800aa70:	3301      	adds	r3, #1
 800aa72:	77fb      	strb	r3, [r7, #31]
 800aa74:	7ffb      	ldrb	r3, [r7, #31]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	f67f af2b 	bls.w	800a8d2 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	785b      	ldrb	r3, [r3, #1]
 800aa86:	f003 031f 	and.w	r3, r3, #31
 800aa8a:	2b11      	cmp	r3, #17
 800aa8c:	bf8c      	ite	hi
 800aa8e:	2201      	movhi	r2, #1
 800aa90:	2200      	movls	r2, #0
 800aa92:	b2d2      	uxtb	r2, r2
 800aa94:	2a00      	cmp	r2, #0
 800aa96:	d116      	bne.n	800aac6 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
 800aa98:	2201      	movs	r2, #1
 800aa9a:	409a      	lsls	r2, r3
 800aa9c:	4b0d      	ldr	r3, [pc, #52]	; (800aad4 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	bf14      	ite	ne
 800aaa4:	2301      	movne	r3, #1
 800aaa6:	2300      	moveq	r3, #0
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d00b      	beq.n	800aac6 <VL53L1_copy_sys_and_core_results_to_range_results+0x222>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	785b      	ldrb	r3, [r3, #1]
 800aab2:	f003 031f 	and.w	r3, r3, #31
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 800aac4:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 800aac6:	bf00      	nop
 800aac8:	3724      	adds	r7, #36	; 0x24
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	0002200e 	.word	0x0002200e

0800aad8 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	460b      	mov	r3, r1
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800aae6:	2300      	movs	r3, #0
 800aae8:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 800aaee:	897b      	ldrh	r3, [r7, #10]
 800aaf0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800aaf4:	2b38      	cmp	r3, #56	; 0x38
 800aaf6:	f200 8204 	bhi.w	800af02 <VL53L1_get_tuning_parm+0x42a>
 800aafa:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <VL53L1_get_tuning_parm+0x28>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800abe5 	.word	0x0800abe5
 800ab04:	0800abf3 	.word	0x0800abf3
 800ab08:	0800ac01 	.word	0x0800ac01
 800ab0c:	0800ac0f 	.word	0x0800ac0f
 800ab10:	0800ac1d 	.word	0x0800ac1d
 800ab14:	0800ac2b 	.word	0x0800ac2b
 800ab18:	0800ac39 	.word	0x0800ac39
 800ab1c:	0800ac47 	.word	0x0800ac47
 800ab20:	0800ac55 	.word	0x0800ac55
 800ab24:	0800ac63 	.word	0x0800ac63
 800ab28:	0800ac71 	.word	0x0800ac71
 800ab2c:	0800ac7f 	.word	0x0800ac7f
 800ab30:	0800ac8d 	.word	0x0800ac8d
 800ab34:	0800ac9b 	.word	0x0800ac9b
 800ab38:	0800aca9 	.word	0x0800aca9
 800ab3c:	0800acb7 	.word	0x0800acb7
 800ab40:	0800acc5 	.word	0x0800acc5
 800ab44:	0800acd3 	.word	0x0800acd3
 800ab48:	0800ace1 	.word	0x0800ace1
 800ab4c:	0800acef 	.word	0x0800acef
 800ab50:	0800acfd 	.word	0x0800acfd
 800ab54:	0800ad0b 	.word	0x0800ad0b
 800ab58:	0800ad19 	.word	0x0800ad19
 800ab5c:	0800ad27 	.word	0x0800ad27
 800ab60:	0800ad35 	.word	0x0800ad35
 800ab64:	0800ad43 	.word	0x0800ad43
 800ab68:	0800ad51 	.word	0x0800ad51
 800ab6c:	0800ad5f 	.word	0x0800ad5f
 800ab70:	0800ad6d 	.word	0x0800ad6d
 800ab74:	0800ad7b 	.word	0x0800ad7b
 800ab78:	0800ad89 	.word	0x0800ad89
 800ab7c:	0800ad97 	.word	0x0800ad97
 800ab80:	0800ada5 	.word	0x0800ada5
 800ab84:	0800adb3 	.word	0x0800adb3
 800ab88:	0800adc1 	.word	0x0800adc1
 800ab8c:	0800adcf 	.word	0x0800adcf
 800ab90:	0800addd 	.word	0x0800addd
 800ab94:	0800adeb 	.word	0x0800adeb
 800ab98:	0800adf9 	.word	0x0800adf9
 800ab9c:	0800ae07 	.word	0x0800ae07
 800aba0:	0800ae15 	.word	0x0800ae15
 800aba4:	0800ae23 	.word	0x0800ae23
 800aba8:	0800ae31 	.word	0x0800ae31
 800abac:	0800ae3f 	.word	0x0800ae3f
 800abb0:	0800ae4d 	.word	0x0800ae4d
 800abb4:	0800ae5b 	.word	0x0800ae5b
 800abb8:	0800ae69 	.word	0x0800ae69
 800abbc:	0800ae77 	.word	0x0800ae77
 800abc0:	0800ae85 	.word	0x0800ae85
 800abc4:	0800ae93 	.word	0x0800ae93
 800abc8:	0800aea1 	.word	0x0800aea1
 800abcc:	0800aeaf 	.word	0x0800aeaf
 800abd0:	0800aebd 	.word	0x0800aebd
 800abd4:	0800aecb 	.word	0x0800aecb
 800abd8:	0800aed9 	.word	0x0800aed9
 800abdc:	0800aee7 	.word	0x0800aee7
 800abe0:	0800aef5 	.word	0x0800aef5

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 800abea:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	601a      	str	r2, [r3, #0]
	break;
 800abf0:	e18e      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 800abf8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	601a      	str	r2, [r3, #0]
	break;
 800abfe:	e187      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800ac06:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	601a      	str	r2, [r3, #0]
	break;
 800ac0c:	e180      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800ac14:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	601a      	str	r2, [r3, #0]
	break;
 800ac1a:	e179      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ac22:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	601a      	str	r2, [r3, #0]
	break;
 800ac28:	e172      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800ac30:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	601a      	str	r2, [r3, #0]
	break;
 800ac36:	e16b      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 800ac3e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	601a      	str	r2, [r3, #0]
	break;
 800ac44:	e164      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800ac4c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	601a      	str	r2, [r3, #0]
	break;
 800ac52:	e15d      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800ac5a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	601a      	str	r2, [r3, #0]
	break;
 800ac60:	e156      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800ac68:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	601a      	str	r2, [r3, #0]
	break;
 800ac6e:	e14f      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 800ac76:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	601a      	str	r2, [r3, #0]
	break;
 800ac7c:	e148      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 800ac84:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	601a      	str	r2, [r3, #0]
	break;
 800ac8a:	e141      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 800ac92:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	601a      	str	r2, [r3, #0]
	break;
 800ac98:	e13a      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 800aca0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	601a      	str	r2, [r3, #0]
	break;
 800aca6:	e133      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800acae:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	601a      	str	r2, [r3, #0]
	break;
 800acb4:	e12c      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 800acbc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	601a      	str	r2, [r3, #0]
	break;
 800acc2:	e125      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 800acca:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	601a      	str	r2, [r3, #0]
	break;
 800acd0:	e11e      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 800acd8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	601a      	str	r2, [r3, #0]
	break;
 800acde:	e117      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 800ace6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	601a      	str	r2, [r3, #0]
	break;
 800acec:	e110      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800acf4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	601a      	str	r2, [r3, #0]
	break;
 800acfa:	e109      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800ad02:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	601a      	str	r2, [r3, #0]
	break;
 800ad08:	e102      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 800ad10:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	601a      	str	r2, [r3, #0]
	break;
 800ad16:	e0fb      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800ad1e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	601a      	str	r2, [r3, #0]
	break;
 800ad24:	e0f4      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 800ad2c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	601a      	str	r2, [r3, #0]
	break;
 800ad32:	e0ed      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800ad3a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	601a      	str	r2, [r3, #0]
	break;
 800ad40:	e0e6      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 800ad48:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	601a      	str	r2, [r3, #0]
	break;
 800ad4e:	e0df      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 800ad56:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	601a      	str	r2, [r3, #0]
	break;
 800ad5c:	e0d8      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800ad5e:	693b      	ldr	r3, [r7, #16]
 800ad60:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800ad64:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	601a      	str	r2, [r3, #0]
	break;
 800ad6a:	e0d1      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800ad72:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	601a      	str	r2, [r3, #0]
	break;
 800ad78:	e0ca      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800ad80:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	601a      	str	r2, [r3, #0]
	break;
 800ad86:	e0c3      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800ad8e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	601a      	str	r2, [r3, #0]
	break;
 800ad94:	e0bc      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 800ad96:	693b      	ldr	r3, [r7, #16]
 800ad98:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 800ad9c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	601a      	str	r2, [r3, #0]
	break;
 800ada2:	e0b5      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800adaa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	601a      	str	r2, [r3, #0]
	break;
 800adb0:	e0ae      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 800adb8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	601a      	str	r2, [r3, #0]
	break;
 800adbe:	e0a7      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 800adc6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	601a      	str	r2, [r3, #0]
	break;
 800adcc:	e0a0      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 800add4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	601a      	str	r2, [r3, #0]
	break;
 800adda:	e099      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800ade2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	601a      	str	r2, [r3, #0]
	break;
 800ade8:	e092      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800adf0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	601a      	str	r2, [r3, #0]
	break;
 800adf6:	e08b      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800adfe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	601a      	str	r2, [r3, #0]
	break;
 800ae04:	e084      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800ae0c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	601a      	str	r2, [r3, #0]
	break;
 800ae12:	e07d      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800ae1a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	601a      	str	r2, [r3, #0]
	break;
 800ae20:	e076      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800ae28:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	601a      	str	r2, [r3, #0]
	break;
 800ae2e:	e06f      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800ae36:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	601a      	str	r2, [r3, #0]
	break;
 800ae3c:	e068      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 800ae44:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	601a      	str	r2, [r3, #0]
	break;
 800ae4a:	e061      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800ae52:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	601a      	str	r2, [r3, #0]
	break;
 800ae58:	e05a      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800ae60:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	601a      	str	r2, [r3, #0]
	break;
 800ae66:	e053      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800ae6e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	601a      	str	r2, [r3, #0]
	break;
 800ae74:	e04c      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 800ae7c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	601a      	str	r2, [r3, #0]
	break;
 800ae82:	e045      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ae8a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	601a      	str	r2, [r3, #0]
	break;
 800ae90:	e03e      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ae98:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	601a      	str	r2, [r3, #0]
	break;
 800ae9e:	e037      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800aea0:	693b      	ldr	r3, [r7, #16]
 800aea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800aea6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	601a      	str	r2, [r3, #0]
	break;
 800aeac:	e030      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800aeb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	601a      	str	r2, [r3, #0]
	break;
 800aeba:	e029      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aec2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	601a      	str	r2, [r3, #0]
	break;
 800aec8:	e022      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800aed0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	601a      	str	r2, [r3, #0]
	break;
 800aed6:	e01b      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800aede:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	601a      	str	r2, [r3, #0]
	break;
 800aee4:	e014      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aeec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	601a      	str	r2, [r3, #0]
	break;
 800aef2:	e00d      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800aefa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	601a      	str	r2, [r3, #0]
	break;
 800af00:	e006      	b.n	800af10 <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800af08:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 800af0a:	23fc      	movs	r3, #252	; 0xfc
 800af0c:	75fb      	strb	r3, [r7, #23]
	break;
 800af0e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 800af10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800af14:	4618      	mov	r0, r3
 800af16:	371c      	adds	r7, #28
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af28:	2300      	movs	r3, #0
 800af2a:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2208      	movs	r2, #8
 800af30:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	220b      	movs	r2, #11
 800af36:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800af3e:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800af46:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800af4e:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800af56:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800af58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3714      	adds	r7, #20
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800af70:	2300      	movs	r3, #0
 800af72:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2212      	movs	r2, #18
 800af7e:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	220f      	movs	r2, #15
 800af84:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2202      	movs	r2, #2
 800af8a:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800af92:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	220c      	movs	r2, #12
 800af98:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800af9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3714      	adds	r7, #20
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b084      	sub	sp, #16
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
 800afb2:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800afb4:	2300      	movs	r3, #0
 800afb6:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	895b      	ldrh	r3, [r3, #10]
 800afbc:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	895b      	ldrh	r3, [r3, #10]
 800afda:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	2200      	movs	r2, #0
 800aff8:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	2240      	movs	r2, #64	; 0x40
 800affe:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d10d      	bne.n	800b024 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d108      	bne.n	800b024 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d103      	bne.n	800b024 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	2200      	movs	r2, #0
 800b020:	741a      	strb	r2, [r3, #16]
 800b022:	e002      	b.n	800b02a <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	2201      	movs	r2, #1
 800b028:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 800b02a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d114      	bne.n	800b05c <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 800b036:	2b01      	cmp	r3, #1
 800b038:	d110      	bne.n	800b05c <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	6818      	ldr	r0, [r3, #0]
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	7d1b      	ldrb	r3, [r3, #20]
 800b04e:	f000 ffc9 	bl	800bfe4 <VL53L1_calc_range_ignore_threshold>
 800b052:	4603      	mov	r3, r0
 800b054:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	82da      	strh	r2, [r3, #22]
 800b05a:	e002      	b.n	800b062 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	2200      	movs	r2, #0
 800b060:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b062:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800b06e:	b480      	push	{r7}
 800b070:	b085      	sub	sp, #20
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b076:	2300      	movs	r3, #0
 800b078:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b080:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b088:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b090:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b098:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2208      	movs	r2, #8
 800b09e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2228      	movs	r2, #40	; 0x28
 800b0a4:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2209      	movs	r2, #9
 800b0aa:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 800b0ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f248 0203 	movw	r2, #32771	; 0x8003
 800b0ce:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f248 0201 	movw	r2, #32769	; 0x8001
 800b0d6:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f248 0241 	movw	r2, #32833	; 0x8041
 800b0de:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	220e      	movs	r2, #14
 800b0e4:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	220a      	movs	r2, #10
 800b0ea:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2206      	movs	r2, #6
 800b0f0:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	220e      	movs	r2, #14
 800b0f6:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	220a      	movs	r2, #10
 800b0fc:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2206      	movs	r2, #6
 800b102:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2202      	movs	r2, #2
 800b108:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2221      	movs	r2, #33	; 0x21
 800b10e:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b122:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b12a:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800b132:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	22c0      	movs	r2, #192	; 0xc0
 800b138:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	22c0      	movs	r2, #192	; 0xc0
 800b13e:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	22c0      	movs	r2, #192	; 0xc0
 800b144:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2208      	movs	r2, #8
 800b14a:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2210      	movs	r2, #16
 800b150:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2202      	movs	r2, #2
 800b15e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2202      	movs	r2, #2
 800b16e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b180:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b188:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f248 0230 	movw	r2, #32816	; 0x8030
 800b190:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b198:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b1a0:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b1a8:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f24f 6218 	movw	r2, #63000	; 0xf618
 800b1b0:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800b1b8:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800b1c0:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800b1c8:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 800b1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3714      	adds	r7, #20
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b087      	sub	sp, #28
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	60f8      	str	r0, [r7, #12]
 800b1e2:	60b9      	str	r1, [r7, #8]
 800b1e4:	607a      	str	r2, [r7, #4]
 800b1e6:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b1f2:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2200      	movs	r2, #0
 800b204:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2200      	movs	r2, #0
 800b20a:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2200      	movs	r2, #0
 800b210:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2200      	movs	r2, #0
 800b216:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2211      	movs	r2, #17
 800b234:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2202      	movs	r2, #2
 800b23a:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2202      	movs	r2, #2
 800b246:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2208      	movs	r2, #8
 800b24c:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2200      	movs	r2, #0
 800b252:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 800b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25e:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2201      	movs	r2, #1
 800b272:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2200      	movs	r2, #0
 800b278:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2200      	movs	r2, #0
 800b284:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	22ff      	movs	r2, #255	; 0xff
 800b28a:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 800b28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28e:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800b294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b296:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	220b      	movs	r2, #11
 800b2c4:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c8:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	2202      	movs	r2, #2
 800b2d2:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	220d      	movs	r2, #13
 800b2d8:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 800b2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2dc:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 800b300:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	2200      	movs	r2, #0
 800b306:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	2238      	movs	r2, #56	; 0x38
 800b30c:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	22ff      	movs	r2, #255	; 0xff
 800b312:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	2201      	movs	r2, #1
 800b318:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	221a      	movs	r2, #26
 800b324:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2220      	movs	r2, #32
 800b330:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2201      	movs	r2, #1
 800b336:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	22cc      	movs	r2, #204	; 0xcc
 800b33c:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	220b      	movs	r2, #11
 800b342:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	22f5      	movs	r2, #245	; 0xf5
 800b34e:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2209      	movs	r2, #9
 800b354:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b358:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 800b35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b360:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2208      	movs	r2, #8
 800b36a:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2278      	movs	r2, #120	; 0x78
 800b370:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2200      	movs	r2, #0
 800b376:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2201      	movs	r2, #1
 800b382:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2200      	movs	r2, #0
 800b388:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	2200      	movs	r2, #0
 800b38e:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	2200      	movs	r2, #0
 800b394:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 800b396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b398:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	220b      	movs	r2, #11
 800b3a4:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2209      	movs	r2, #9
 800b3aa:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ae:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800b3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b6:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 800b3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ce:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	22c7      	movs	r2, #199	; 0xc7
 800b3da:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	22ff      	movs	r2, #255	; 0xff
 800b3e0:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	22db      	movs	r2, #219	; 0xdb
 800b3e6:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 800b3ee:	6a3b      	ldr	r3, [r7, #32]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 800b3f4:	6a3b      	ldr	r3, [r7, #32]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 800b3fa:	6a3b      	ldr	r3, [r7, #32]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 800b400:	6a3b      	ldr	r3, [r7, #32]
 800b402:	2221      	movs	r2, #33	; 0x21
 800b404:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 800b406:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	371c      	adds	r7, #28
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr

0800b416 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b088      	sub	sp, #32
 800b41a:	af02      	add	r7, sp, #8
 800b41c:	60f8      	str	r0, [r7, #12]
 800b41e:	60b9      	str	r1, [r7, #8]
 800b420:	607a      	str	r2, [r7, #4]
 800b422:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b424:	2300      	movs	r3, #0
 800b426:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	9301      	str	r3, [sp, #4]
 800b42c:	6a3b      	ldr	r3, [r7, #32]
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	68b9      	ldr	r1, [r7, #8]
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f7ff fecf 	bl	800b1da <VL53L1_preset_mode_standard_ranging>
 800b43c:	4603      	mov	r3, r0
 800b43e:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b440:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d121      	bne.n	800b48c <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2207      	movs	r2, #7
 800b44c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2205      	movs	r2, #5
 800b452:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b456:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 800b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45e:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2208      	movs	r2, #8
 800b468:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2238      	movs	r2, #56	; 0x38
 800b46e:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	2207      	movs	r2, #7
 800b474:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	2205      	movs	r2, #5
 800b47a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b48c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3718      	adds	r7, #24
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b088      	sub	sp, #32
 800b49c:	af02      	add	r7, sp, #8
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
 800b4a4:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	9301      	str	r3, [sp, #4]
 800b4ae:	6a3b      	ldr	r3, [r7, #32]
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f7ff fe8e 	bl	800b1da <VL53L1_preset_mode_standard_ranging>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b4c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d121      	bne.n	800b50e <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	220f      	movs	r2, #15
 800b4ce:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	220d      	movs	r2, #13
 800b4d4:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d8:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2208      	movs	r2, #8
 800b4ea:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	22b8      	movs	r2, #184	; 0xb8
 800b4f0:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	220f      	movs	r2, #15
 800b4f6:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	220d      	movs	r2, #13
 800b4fc:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b50e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b512:	4618      	mov	r0, r3
 800b514:	3718      	adds	r7, #24
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b088      	sub	sp, #32
 800b51e:	af02      	add	r7, sp, #8
 800b520:	60f8      	str	r0, [r7, #12]
 800b522:	60b9      	str	r1, [r7, #8]
 800b524:	607a      	str	r2, [r7, #4]
 800b526:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b528:	2300      	movs	r3, #0
 800b52a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52e:	9301      	str	r3, [sp, #4]
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	68b9      	ldr	r1, [r7, #8]
 800b53a:	68f8      	ldr	r0, [r7, #12]
 800b53c:	f7ff fe4d 	bl	800b1da <VL53L1_preset_mode_standard_ranging>
 800b540:	4603      	mov	r3, r0
 800b542:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b544:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d105      	bne.n	800b558 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	2202      	movs	r2, #2
 800b550:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	223b      	movs	r2, #59	; 0x3b
 800b556:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b558:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af02      	add	r7, sp, #8
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
 800b570:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b572:	2300      	movs	r3, #0
 800b574:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 800b576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b578:	9301      	str	r3, [sp, #4]
 800b57a:	6a3b      	ldr	r3, [r7, #32]
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	68b9      	ldr	r1, [r7, #8]
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f7ff fe28 	bl	800b1da <VL53L1_preset_mode_standard_ranging>
 800b58a:	4603      	mov	r3, r0
 800b58c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b58e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d105      	bne.n	800b5a2 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	2202      	movs	r2, #2
 800b59a:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	225b      	movs	r2, #91	; 0x5b
 800b5a0:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b5a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b088      	sub	sp, #32
 800b5b2:	af02      	add	r7, sp, #8
 800b5b4:	60f8      	str	r0, [r7, #12]
 800b5b6:	60b9      	str	r1, [r7, #8]
 800b5b8:	607a      	str	r2, [r7, #4]
 800b5ba:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800b5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c2:	9301      	str	r3, [sp, #4]
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	68b9      	ldr	r1, [r7, #8]
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f7ff fe03 	bl	800b1da <VL53L1_preset_mode_standard_ranging>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b5d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d11a      	bne.n	800b616 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	22b1      	movs	r2, #177	; 0xb1
 800b5f0:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	22d4      	movs	r2, #212	; 0xd4
 800b5fc:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b604:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b608:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	2240      	movs	r2, #64	; 0x40
 800b614:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3718      	adds	r7, #24
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b088      	sub	sp, #32
 800b626:	af02      	add	r7, sp, #8
 800b628:	60f8      	str	r0, [r7, #12]
 800b62a:	60b9      	str	r1, [r7, #8]
 800b62c:	607a      	str	r2, [r7, #4]
 800b62e:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b630:	2300      	movs	r3, #0
 800b632:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 800b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b636:	9301      	str	r3, [sp, #4]
 800b638:	6a3b      	ldr	r3, [r7, #32]
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	68b9      	ldr	r1, [r7, #8]
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f7ff fee7 	bl	800b416 <VL53L1_preset_mode_standard_ranging_short_range>
 800b648:	4603      	mov	r3, r0
 800b64a:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b64c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d11a      	bne.n	800b68a <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2200      	movs	r2, #0
 800b658:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2284      	movs	r2, #132	; 0x84
 800b664:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	22b1      	movs	r2, #177	; 0xb1
 800b670:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b678:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b67c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800b684:	6a3b      	ldr	r3, [r7, #32]
 800b686:	2240      	movs	r2, #64	; 0x40
 800b688:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b68a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	3718      	adds	r7, #24
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b088      	sub	sp, #32
 800b69a:	af02      	add	r7, sp, #8
 800b69c:	60f8      	str	r0, [r7, #12]
 800b69e:	60b9      	str	r1, [r7, #8]
 800b6a0:	607a      	str	r2, [r7, #4]
 800b6a2:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6aa:	9301      	str	r3, [sp, #4]
 800b6ac:	6a3b      	ldr	r3, [r7, #32]
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	68b9      	ldr	r1, [r7, #8]
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f7ff feee 	bl	800b498 <VL53L1_preset_mode_standard_ranging_long_range>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b6c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d11a      	bne.n	800b6fe <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2297      	movs	r2, #151	; 0x97
 800b6d8:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	22b1      	movs	r2, #177	; 0xb1
 800b6e4:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b6ec:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800b6f8:	6a3b      	ldr	r3, [r7, #32]
 800b6fa:	2240      	movs	r2, #64	; 0x40
 800b6fc:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b6fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b088      	sub	sp, #32
 800b70e:	af02      	add	r7, sp, #8
 800b710:	60f8      	str	r0, [r7, #12]
 800b712:	60b9      	str	r1, [r7, #8]
 800b714:	607a      	str	r2, [r7, #4]
 800b716:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b718:	2300      	movs	r3, #0
 800b71a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 800b71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71e:	9301      	str	r3, [sp, #4]
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	68b9      	ldr	r1, [r7, #8]
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f7ff ff3f 	bl	800b5ae <VL53L1_preset_mode_timed_ranging>
 800b730:	4603      	mov	r3, r0
 800b732:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800b734:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d106      	bne.n	800b74a <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800b73c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	68b8      	ldr	r0, [r7, #8]
 800b742:	f000 fe7d 	bl	800c440 <VL53L1_config_low_power_auto_mode>
 800b746:	4603      	mov	r3, r0
 800b748:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b74a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b088      	sub	sp, #32
 800b75a:	af02      	add	r7, sp, #8
 800b75c:	60f8      	str	r0, [r7, #12]
 800b75e:	60b9      	str	r1, [r7, #8]
 800b760:	607a      	str	r2, [r7, #4]
 800b762:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b764:	2300      	movs	r3, #0
 800b766:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 800b768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76a:	9301      	str	r3, [sp, #4]
 800b76c:	6a3b      	ldr	r3, [r7, #32]
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	68b9      	ldr	r1, [r7, #8]
 800b776:	68f8      	ldr	r0, [r7, #12]
 800b778:	f7ff ff53 	bl	800b622 <VL53L1_preset_mode_timed_ranging_short_range>
 800b77c:	4603      	mov	r3, r0
 800b77e:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800b780:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d106      	bne.n	800b796 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800b788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	68b8      	ldr	r0, [r7, #8]
 800b78e:	f000 fe57 	bl	800c440 <VL53L1_config_low_power_auto_mode>
 800b792:	4603      	mov	r3, r0
 800b794:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b796:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3718      	adds	r7, #24
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b088      	sub	sp, #32
 800b7a6:	af02      	add	r7, sp, #8
 800b7a8:	60f8      	str	r0, [r7, #12]
 800b7aa:	60b9      	str	r1, [r7, #8]
 800b7ac:	607a      	str	r2, [r7, #4]
 800b7ae:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	9301      	str	r3, [sp, #4]
 800b7b8:	6a3b      	ldr	r3, [r7, #32]
 800b7ba:	9300      	str	r3, [sp, #0]
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	687a      	ldr	r2, [r7, #4]
 800b7c0:	68b9      	ldr	r1, [r7, #8]
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f7ff ff67 	bl	800b696 <VL53L1_preset_mode_timed_ranging_long_range>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 800b7cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d106      	bne.n	800b7e2 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 800b7d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	68b8      	ldr	r0, [r7, #8]
 800b7da:	f000 fe31 	bl	800c440 <VL53L1_config_low_power_auto_mode>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 800b7e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b088      	sub	sp, #32
 800b7f2:	af02      	add	r7, sp, #8
 800b7f4:	60f8      	str	r0, [r7, #12]
 800b7f6:	60b9      	str	r1, [r7, #8]
 800b7f8:	607a      	str	r2, [r7, #4]
 800b7fa:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800b800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b802:	9301      	str	r3, [sp, #4]
 800b804:	6a3b      	ldr	r3, [r7, #32]
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	68b9      	ldr	r1, [r7, #8]
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f7ff fce3 	bl	800b1da <VL53L1_preset_mode_standard_ranging>
 800b814:	4603      	mov	r3, r0
 800b816:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d116      	bne.n	800b84e <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	2200      	movs	r2, #0
 800b824:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2200      	movs	r2, #0
 800b82a:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	22b1      	movs	r2, #177	; 0xb1
 800b830:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	22d4      	movs	r2, #212	; 0xd4
 800b83c:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 800b848:	6a3b      	ldr	r3, [r7, #32]
 800b84a:	2210      	movs	r2, #16
 800b84c:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 800b84e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b852:	4618      	mov	r0, r3
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b088      	sub	sp, #32
 800b85e:	af02      	add	r7, sp, #8
 800b860:	60f8      	str	r0, [r7, #12]
 800b862:	60b9      	str	r1, [r7, #8]
 800b864:	607a      	str	r2, [r7, #4]
 800b866:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800b868:	2300      	movs	r3, #0
 800b86a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800b86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86e:	9301      	str	r3, [sp, #4]
 800b870:	6a3b      	ldr	r3, [r7, #32]
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	68b9      	ldr	r1, [r7, #8]
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f7ff fcad 	bl	800b1da <VL53L1_preset_mode_standard_ranging>
 800b880:	4603      	mov	r3, r0
 800b882:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800b884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	2201      	movs	r2, #1
 800b890:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 800b892:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 800b89e:	b480      	push	{r7}
 800b8a0:	b085      	sub	sp, #20
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	2202      	movs	r2, #2
 800b8b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	220d      	movs	r2, #13
 800b8be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f640 028e 	movw	r2, #2190	; 0x88e
 800b8c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b8ca:	bf00      	nop
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 800b8d6:	b480      	push	{r7}
 800b8d8:	b085      	sub	sp, #20
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
 800b8de:	460b      	mov	r3, r1
 800b8e0:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	332c      	adds	r3, #44	; 0x2c
 800b8ea:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 800b8ec:	68bb      	ldr	r3, [r7, #8]
 800b8ee:	78fa      	ldrb	r2, [r7, #3]
 800b8f0:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	2202      	movs	r2, #2
 800b8fc:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	2200      	movs	r2, #0
 800b902:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	78fa      	ldrb	r2, [r7, #3]
 800b908:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	2200      	movs	r2, #0
 800b90e:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	2202      	movs	r2, #2
 800b914:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	2200      	movs	r2, #0
 800b91a:	71da      	strb	r2, [r3, #7]

}
 800b91c:	bf00      	nop
 800b91e:	3714      	adds	r7, #20
 800b920:	46bd      	mov	sp, r7
 800b922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b926:	4770      	bx	lr

0800b928 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800b928:	b480      	push	{r7}
 800b92a:	b087      	sub	sp, #28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 800b930:	2300      	movs	r3, #0
 800b932:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	332c      	adds	r3, #44	; 0x2c
 800b93c:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800b944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10c      	bne.n	800b966 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2203      	movs	r2, #3
 800b950:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2202      	movs	r2, #2
 800b95c:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2200      	movs	r2, #0
 800b962:	71da      	strb	r2, [r3, #7]
 800b964:	e060      	b.n	800ba28 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	795b      	ldrb	r3, [r3, #5]
 800b96a:	2bff      	cmp	r3, #255	; 0xff
 800b96c:	d103      	bne.n	800b976 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2280      	movs	r2, #128	; 0x80
 800b972:	715a      	strb	r2, [r3, #5]
 800b974:	e005      	b.n	800b982 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	795b      	ldrb	r3, [r3, #5]
 800b97a:	3301      	adds	r3, #1
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	799b      	ldrb	r3, [r3, #6]
 800b986:	f083 0302 	eor.w	r3, r3, #2
 800b98a:	b2da      	uxtb	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	791b      	ldrb	r3, [r3, #4]
 800b994:	3b03      	subs	r3, #3
 800b996:	2b05      	cmp	r3, #5
 800b998:	d839      	bhi.n	800ba0e <VL53L1_update_ll_driver_rd_state+0xe6>
 800b99a:	a201      	add	r2, pc, #4	; (adr r2, 800b9a0 <VL53L1_update_ll_driver_rd_state+0x78>)
 800b99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a0:	0800b9b9 	.word	0x0800b9b9
 800b9a4:	0800ba0f 	.word	0x0800ba0f
 800b9a8:	0800ba0f 	.word	0x0800ba0f
 800b9ac:	0800b9e3 	.word	0x0800b9e3
 800b9b0:	0800b9f1 	.word	0x0800b9f1
 800b9b4:	0800b9f9 	.word	0x0800b9f9

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 800b9be:	f003 0302 	and.w	r3, r3, #2
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	dd03      	ble.n	800b9ce <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2206      	movs	r2, #6
 800b9ca:	711a      	strb	r2, [r3, #4]
 800b9cc:	e002      	b.n	800b9d4 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2208      	movs	r2, #8
 800b9d2:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	71da      	strb	r2, [r3, #7]

		break;
 800b9e0:	e022      	b.n	800ba28 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2208      	movs	r2, #8
 800b9ec:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800b9ee:	e01b      	b.n	800ba28 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2208      	movs	r2, #8
 800b9f4:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800b9f6:	e017      	b.n	800ba28 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	79db      	ldrb	r3, [r3, #7]
 800b9fc:	f083 0301 	eor.w	r3, r3, #1
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	2208      	movs	r2, #8
 800ba0a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 800ba0c:	e00c      	b.n	800ba28 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	2203      	movs	r2, #3
 800ba12:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2200      	movs	r2, #0
 800ba18:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2202      	movs	r2, #2
 800ba1e:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2200      	movs	r2, #0
 800ba24:	71da      	strb	r2, [r3, #7]

		break;
 800ba26:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800ba28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	371c      	adds	r7, #28
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b089      	sub	sp, #36	; 0x24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800ba40:	2300      	movs	r3, #0
 800ba42:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 800ba48:	69bb      	ldr	r3, [r7, #24]
 800ba4a:	332c      	adds	r3, #44	; 0x2c
 800ba4c:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 800ba54:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 800ba56:	2300      	movs	r3, #0
 800ba58:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 800ba66:	f003 031f 	and.w	r3, r3, #31
 800ba6a:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	78db      	ldrb	r3, [r3, #3]
 800ba70:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 800ba76:	111b      	asrs	r3, r3, #4
 800ba78:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 800ba7a:	f003 0302 	and.w	r3, r3, #2
 800ba7e:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800ba86:	f003 0320 	and.w	r3, r3, #32
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d017      	beq.n	800babe <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 800ba8e:	697b      	ldr	r3, [r7, #20]
 800ba90:	791b      	ldrb	r3, [r3, #4]
 800ba92:	2b06      	cmp	r3, #6
 800ba94:	d105      	bne.n	800baa2 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 800ba96:	7bfb      	ldrb	r3, [r7, #15]
 800ba98:	2b12      	cmp	r3, #18
 800ba9a:	d010      	beq.n	800babe <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 800ba9c:	23ef      	movs	r3, #239	; 0xef
 800ba9e:	77fb      	strb	r3, [r7, #31]
 800baa0:	e00d      	b.n	800babe <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	795b      	ldrb	r3, [r3, #5]
 800baa6:	7bba      	ldrb	r2, [r7, #14]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d001      	beq.n	800bab0 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 800baac:	23ee      	movs	r3, #238	; 0xee
 800baae:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	799b      	ldrb	r3, [r3, #6]
 800bab4:	7b7a      	ldrb	r2, [r7, #13]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d001      	beq.n	800babe <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 800baba:	23ed      	movs	r3, #237	; 0xed
 800babc:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 800babe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3724      	adds	r7, #36	; 0x24
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr

0800bace <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 800bace:	b480      	push	{r7}
 800bad0:	b087      	sub	sp, #28
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 800bad6:	2300      	movs	r3, #0
 800bad8:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	332c      	adds	r3, #44	; 0x2c
 800bae2:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 800baea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10c      	bne.n	800bb0c <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2203      	movs	r2, #3
 800baf6:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2202      	movs	r2, #2
 800bb02:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2200      	movs	r2, #0
 800bb08:	70da      	strb	r2, [r3, #3]
 800bb0a:	e03e      	b.n	800bb8a <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	785b      	ldrb	r3, [r3, #1]
 800bb10:	2bff      	cmp	r3, #255	; 0xff
 800bb12:	d103      	bne.n	800bb1c <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2280      	movs	r2, #128	; 0x80
 800bb18:	705a      	strb	r2, [r3, #1]
 800bb1a:	e005      	b.n	800bb28 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	785b      	ldrb	r3, [r3, #1]
 800bb20:	3301      	adds	r3, #1
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	789b      	ldrb	r3, [r3, #2]
 800bb2c:	f083 0302 	eor.w	r3, r3, #2
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	2b03      	cmp	r3, #3
 800bb3c:	d002      	beq.n	800bb44 <VL53L1_update_ll_driver_cfg_state+0x76>
 800bb3e:	2b04      	cmp	r3, #4
 800bb40:	d00e      	beq.n	800bb60 <VL53L1_update_ll_driver_cfg_state+0x92>
 800bb42:	e015      	b.n	800bb70 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	78db      	ldrb	r3, [r3, #3]
 800bb48:	f083 0301 	eor.w	r3, r3, #1
 800bb4c:	b2da      	uxtb	r2, r3
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2201      	movs	r2, #1
 800bb56:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2204      	movs	r2, #4
 800bb5c:	701a      	strb	r2, [r3, #0]
		break;
 800bb5e:	e014      	b.n	800bb8a <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	78db      	ldrb	r3, [r3, #3]
 800bb64:	f083 0301 	eor.w	r3, r3, #1
 800bb68:	b2da      	uxtb	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	70da      	strb	r2, [r3, #3]

		break;
 800bb6e:	e00c      	b.n	800bb8a <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2203      	movs	r2, #3
 800bb74:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2202      	movs	r2, #2
 800bb80:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	70da      	strb	r2, [r3, #3]

		break;
 800bb88:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 800bb8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	371c      	adds	r7, #28
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b083      	sub	sp, #12
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	7c1a      	ldrb	r2, [r3, #16]
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	7c52      	ldrb	r2, [r2, #17]
 800bbb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	3302      	adds	r3, #2
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	7c92      	ldrb	r2, [r2, #18]
 800bbbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	3303      	adds	r3, #3
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	7cd2      	ldrb	r2, [r2, #19]
 800bbc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	3304      	adds	r3, #4
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	7d12      	ldrb	r2, [r2, #20]
 800bbd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	3305      	adds	r3, #5
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	7d52      	ldrb	r2, [r2, #21]
 800bbdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	3306      	adds	r3, #6
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	7d92      	ldrb	r2, [r2, #22]
 800bbe6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	3307      	adds	r3, #7
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	7dd2      	ldrb	r2, [r2, #23]
 800bbf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	3308      	adds	r3, #8
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	7e12      	ldrb	r2, [r2, #24]
 800bbfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	3309      	adds	r3, #9
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	7e52      	ldrb	r2, [r2, #25]
 800bc04:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	330a      	adds	r3, #10
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	7e92      	ldrb	r2, [r2, #26]
 800bc0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	330b      	adds	r3, #11
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	7ed2      	ldrb	r2, [r2, #27]
 800bc18:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	330c      	adds	r3, #12
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	7f12      	ldrb	r2, [r2, #28]
 800bc22:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	330d      	adds	r3, #13
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	7f52      	ldrb	r2, [r2, #29]
 800bc2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	330e      	adds	r3, #14
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	7f92      	ldrb	r2, [r2, #30]
 800bc36:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	330f      	adds	r3, #15
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	7fd2      	ldrb	r2, [r2, #31]
 800bc40:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	3310      	adds	r3, #16
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bc4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	3311      	adds	r3, #17
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800bc58:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	3312      	adds	r3, #18
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 800bc64:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	3313      	adds	r3, #19
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 800bc70:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	3314      	adds	r3, #20
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800bc7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	3315      	adds	r3, #21
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800bc88:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	3316      	adds	r3, #22
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 800bc94:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	3317      	adds	r3, #23
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 800bca0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	3318      	adds	r3, #24
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 800bcac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	3319      	adds	r3, #25
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800bcb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	331a      	adds	r3, #26
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 800bcc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	331b      	adds	r3, #27
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 800bcd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	331c      	adds	r3, #28
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800bcdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	331d      	adds	r3, #29
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800bce8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	331e      	adds	r3, #30
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 800bcf4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	331f      	adds	r3, #31
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 800bd00:	701a      	strb	r2, [r3, #0]
}
 800bd02:	bf00      	nop
 800bd04:	370c      	adds	r7, #12
 800bd06:	46bd      	mov	sp, r7
 800bd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0c:	4770      	bx	lr

0800bd0e <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800bd0e:	b480      	push	{r7}
 800bd10:	b085      	sub	sp, #20
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	4603      	mov	r3, r0
 800bd16:	603a      	str	r2, [r7, #0]
 800bd18:	80fb      	strh	r3, [r7, #6]
 800bd1a:	460b      	mov	r3, r1
 800bd1c:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 800bd22:	2300      	movs	r3, #0
 800bd24:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800bd26:	88fb      	ldrh	r3, [r7, #6]
 800bd28:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	81fb      	strh	r3, [r7, #14]
 800bd2e:	e00e      	b.n	800bd4e <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800bd30:	88ba      	ldrh	r2, [r7, #4]
 800bd32:	89fb      	ldrh	r3, [r7, #14]
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	3b01      	subs	r3, #1
 800bd38:	683a      	ldr	r2, [r7, #0]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	89ba      	ldrh	r2, [r7, #12]
 800bd3e:	b2d2      	uxtb	r2, r2
 800bd40:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800bd42:	89bb      	ldrh	r3, [r7, #12]
 800bd44:	0a1b      	lsrs	r3, r3, #8
 800bd46:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800bd48:	89fb      	ldrh	r3, [r7, #14]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	81fb      	strh	r3, [r7, #14]
 800bd4e:	89fa      	ldrh	r2, [r7, #14]
 800bd50:	88bb      	ldrh	r3, [r7, #4]
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d3ec      	bcc.n	800bd30 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 800bd56:	bf00      	nop
 800bd58:	bf00      	nop
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	6039      	str	r1, [r7, #0]
 800bd6e:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800bd70:	2300      	movs	r3, #0
 800bd72:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800bd74:	e00a      	b.n	800bd8c <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 800bd76:	89fb      	ldrh	r3, [r7, #14]
 800bd78:	021b      	lsls	r3, r3, #8
 800bd7a:	b21a      	sxth	r2, r3
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	1c59      	adds	r1, r3, #1
 800bd80:	6039      	str	r1, [r7, #0]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	b21b      	sxth	r3, r3
 800bd86:	4313      	orrs	r3, r2
 800bd88:	b21b      	sxth	r3, r3
 800bd8a:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800bd8c:	88fb      	ldrh	r3, [r7, #6]
 800bd8e:	1e5a      	subs	r2, r3, #1
 800bd90:	80fa      	strh	r2, [r7, #6]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1ef      	bne.n	800bd76 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 800bd96:	89fb      	ldrh	r3, [r7, #14]
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3714      	adds	r7, #20
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda2:	4770      	bx	lr

0800bda4 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	4603      	mov	r3, r0
 800bdac:	603a      	str	r2, [r7, #0]
 800bdae:	80fb      	strh	r3, [r7, #6]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 800bdbc:	88fb      	ldrh	r3, [r7, #6]
 800bdbe:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	81fb      	strh	r3, [r7, #14]
 800bdc4:	e00f      	b.n	800bde6 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800bdc6:	88ba      	ldrh	r2, [r7, #4]
 800bdc8:	89fb      	ldrh	r3, [r7, #14]
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	89ba      	ldrh	r2, [r7, #12]
 800bdd4:	b2d2      	uxtb	r2, r2
 800bdd6:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800bdd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bddc:	121b      	asrs	r3, r3, #8
 800bdde:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800bde0:	89fb      	ldrh	r3, [r7, #14]
 800bde2:	3301      	adds	r3, #1
 800bde4:	81fb      	strh	r3, [r7, #14]
 800bde6:	89fa      	ldrh	r2, [r7, #14]
 800bde8:	88bb      	ldrh	r3, [r7, #4]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d3eb      	bcc.n	800bdc6 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 800bdee:	bf00      	nop
 800bdf0:	bf00      	nop
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr

0800bdfc <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	4603      	mov	r3, r0
 800be04:	6039      	str	r1, [r7, #0]
 800be06:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 800be08:	2300      	movs	r3, #0
 800be0a:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	b25b      	sxtb	r3, r3
 800be12:	2b00      	cmp	r3, #0
 800be14:	da0e      	bge.n	800be34 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 800be16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be1a:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 800be1c:	e00a      	b.n	800be34 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 800be1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800be22:	021b      	lsls	r3, r3, #8
 800be24:	b21a      	sxth	r2, r3
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	1c59      	adds	r1, r3, #1
 800be2a:	6039      	str	r1, [r7, #0]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b21b      	sxth	r3, r3
 800be30:	4313      	orrs	r3, r2
 800be32:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 800be34:	88fb      	ldrh	r3, [r7, #6]
 800be36:	1e5a      	subs	r2, r3, #1
 800be38:	80fa      	strh	r2, [r7, #6]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1ef      	bne.n	800be1e <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 800be3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800be4e:	b480      	push	{r7}
 800be50:	b087      	sub	sp, #28
 800be52:	af00      	add	r7, sp, #0
 800be54:	60f8      	str	r0, [r7, #12]
 800be56:	460b      	mov	r3, r1
 800be58:	607a      	str	r2, [r7, #4]
 800be5a:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800be5c:	2300      	movs	r3, #0
 800be5e:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 800be60:	2300      	movs	r3, #0
 800be62:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 800be68:	2300      	movs	r3, #0
 800be6a:	82fb      	strh	r3, [r7, #22]
 800be6c:	e00e      	b.n	800be8c <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 800be6e:	897a      	ldrh	r2, [r7, #10]
 800be70:	8afb      	ldrh	r3, [r7, #22]
 800be72:	1ad3      	subs	r3, r2, r3
 800be74:	3b01      	subs	r3, #1
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	4413      	add	r3, r2
 800be7a:	693a      	ldr	r2, [r7, #16]
 800be7c:	b2d2      	uxtb	r2, r2
 800be7e:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	0a1b      	lsrs	r3, r3, #8
 800be84:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800be86:	8afb      	ldrh	r3, [r7, #22]
 800be88:	3301      	adds	r3, #1
 800be8a:	82fb      	strh	r3, [r7, #22]
 800be8c:	8afa      	ldrh	r2, [r7, #22]
 800be8e:	897b      	ldrh	r3, [r7, #10]
 800be90:	429a      	cmp	r2, r3
 800be92:	d3ec      	bcc.n	800be6e <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800be94:	bf00      	nop
 800be96:	bf00      	nop
 800be98:	371c      	adds	r7, #28
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr

0800bea2 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800bea2:	b480      	push	{r7}
 800bea4:	b085      	sub	sp, #20
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	4603      	mov	r3, r0
 800beaa:	6039      	str	r1, [r7, #0]
 800beac:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 800beae:	2300      	movs	r3, #0
 800beb0:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 800beb2:	e007      	b.n	800bec4 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	021a      	lsls	r2, r3, #8
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	1c59      	adds	r1, r3, #1
 800bebc:	6039      	str	r1, [r7, #0]
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	4313      	orrs	r3, r2
 800bec2:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800bec4:	88fb      	ldrh	r3, [r7, #6]
 800bec6:	1e5a      	subs	r2, r3, #1
 800bec8:	80fa      	strh	r2, [r7, #6]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1f2      	bne.n	800beb4 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 800bece:	68fb      	ldr	r3, [r7, #12]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	4603      	mov	r3, r0
 800bee4:	6039      	str	r1, [r7, #0]
 800bee6:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800bee8:	2300      	movs	r3, #0
 800beea:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	b25b      	sxtb	r3, r3
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	da0b      	bge.n	800bf0e <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 800bef6:	f04f 33ff 	mov.w	r3, #4294967295
 800befa:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 800befc:	e007      	b.n	800bf0e <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	021a      	lsls	r2, r3, #8
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	1c59      	adds	r1, r3, #1
 800bf06:	6039      	str	r1, [r7, #0]
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800bf0e:	88fb      	ldrh	r3, [r7, #6]
 800bf10:	1e5a      	subs	r2, r3, #1
 800bf12:	80fa      	strh	r2, [r7, #6]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d1f2      	bne.n	800befe <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 800bf18:	68fb      	ldr	r3, [r7, #12]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr

0800bf26 <VL53L1_set_powerforce_register>:


VL53L1_Error VL53L1_set_powerforce_register(
	VL53L1_DEV    Dev,
	uint8_t       value)
{
 800bf26:	b580      	push	{r7, lr}
 800bf28:	b084      	sub	sp, #16
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]
 800bf2e:	460b      	mov	r3, r1
 800bf30:	70fb      	strb	r3, [r7, #3]
	/*
	 * Set power force register
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800bf32:	2300      	movs	r3, #0
 800bf34:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	60bb      	str	r3, [r7, #8]

	pdev->sys_ctrl.power_management__go1_power_force = value;
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	78fa      	ldrb	r2, [r7, #3]
 800bf3e:	f883 21c8 	strb.w	r2, [r3, #456]	; 0x1c8

	status = VL53L1_WrByte(
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	f893 31c8 	ldrb.w	r3, [r3, #456]	; 0x1c8
 800bf48:	461a      	mov	r2, r3
 800bf4a:	2183      	movs	r1, #131	; 0x83
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f001 fd1b 	bl	800d988 <VL53L1_WrByte>
 800bf52:	4603      	mov	r3, r0
 800bf54:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_POWER_MANAGEMENT__GO1_POWER_FORCE,
			pdev->sys_ctrl.power_management__go1_power_force);

	return status;
 800bf56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <VL53L1_enable_powerforce>:


VL53L1_Error VL53L1_enable_powerforce(
	VL53L1_DEV    Dev)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b084      	sub	sp, #16
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
	/*
	 * Enable power force
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_powerforce_register(Dev, 0x01);
 800bf6e:	2101      	movs	r1, #1
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff ffd8 	bl	800bf26 <VL53L1_set_powerforce_register>
 800bf76:	4603      	mov	r3, r0
 800bf78:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(status);

	return status;
 800bf7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b086      	sub	sp, #24
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	460a      	mov	r2, r1
 800bf90:	80fb      	strh	r3, [r7, #6]
 800bf92:	4613      	mov	r3, r2
 800bf94:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 800bf96:	2300      	movs	r3, #0
 800bf98:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 800bfa2:	88fb      	ldrh	r3, [r7, #6]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f000 faa9 	bl	800c4fc <VL53L1_calc_pll_period_us>
 800bfaa:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 800bfac:	797b      	ldrb	r3, [r7, #5]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 fab8 	bl	800c524 <VL53L1_decode_vcsel_period>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800bfb8:	697a      	ldr	r2, [r7, #20]
 800bfba:	4613      	mov	r3, r2
 800bfbc:	00db      	lsls	r3, r3, #3
 800bfbe:	4413      	add	r3, r2
 800bfc0:	021b      	lsls	r3, r3, #8
 800bfc2:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	099b      	lsrs	r3, r3, #6
 800bfc8:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 800bfca:	7cfa      	ldrb	r2, [r7, #19]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	fb02 f303 	mul.w	r3, r2, r3
 800bfd2:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	099b      	lsrs	r3, r3, #6
 800bfd8:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 800bfda:	68fb      	ldr	r3, [r7, #12]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3718      	adds	r7, #24
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b089      	sub	sp, #36	; 0x24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	4608      	mov	r0, r1
 800bfee:	4611      	mov	r1, r2
 800bff0:	461a      	mov	r2, r3
 800bff2:	4603      	mov	r3, r0
 800bff4:	817b      	strh	r3, [r7, #10]
 800bff6:	460b      	mov	r3, r1
 800bff8:	813b      	strh	r3, [r7, #8]
 800bffa:	4613      	mov	r3, r2
 800bffc:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 800bffe:	2300      	movs	r3, #0
 800c000:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800c002:	2300      	movs	r3, #0
 800c004:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800c006:	2300      	movs	r3, #0
 800c008:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 800c00a:	2300      	movs	r3, #0
 800c00c:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 800c00e:	2300      	movs	r3, #0
 800c010:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	011b      	lsls	r3, r3, #4
 800c016:	4a23      	ldr	r2, [pc, #140]	; (800c0a4 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c018:	fb82 1203 	smull	r1, r2, r2, r3
 800c01c:	1192      	asrs	r2, r2, #6
 800c01e:	17db      	asrs	r3, r3, #31
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800c024:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	da03      	bge.n	800c034 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 800c02c:	897b      	ldrh	r3, [r7, #10]
 800c02e:	425b      	negs	r3, r3
 800c030:	b29b      	uxth	r3, r3
 800c032:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800c034:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	da03      	bge.n	800c044 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 800c03c:	893b      	ldrh	r3, [r7, #8]
 800c03e:	425b      	negs	r3, r3
 800c040:	b29b      	uxth	r3, r3
 800c042:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800c044:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800c048:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c04c:	4413      	add	r3, r2
 800c04e:	015b      	lsls	r3, r3, #5
 800c050:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	4a13      	ldr	r2, [pc, #76]	; (800c0a4 <VL53L1_calc_range_ignore_threshold+0xc0>)
 800c056:	fb82 1203 	smull	r1, r2, r2, r3
 800c05a:	1192      	asrs	r2, r2, #6
 800c05c:	17db      	asrs	r3, r3, #31
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 800c062:	697a      	ldr	r2, [r7, #20]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	4413      	add	r3, r2
 800c068:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 800c06a:	79fa      	ldrb	r2, [r7, #7]
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	fb02 f303 	mul.w	r3, r2, r3
 800c072:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	3310      	adds	r3, #16
 800c078:	2b00      	cmp	r3, #0
 800c07a:	da00      	bge.n	800c07e <VL53L1_calc_range_ignore_threshold+0x9a>
 800c07c:	331f      	adds	r3, #31
 800c07e:	115b      	asrs	r3, r3, #5
 800c080:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c088:	db03      	blt.n	800c092 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 800c08a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c08e:	83fb      	strh	r3, [r7, #30]
 800c090:	e001      	b.n	800c096 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 800c096:	8bfb      	ldrh	r3, [r7, #30]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3724      	adds	r7, #36	; 0x24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	10624dd3 	.word	0x10624dd3

0800c0a8 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	031a      	lsls	r2, r3, #12
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	085b      	lsrs	r3, r3, #1
 800c0be:	441a      	add	r2, r3
	timeout_mclks   =
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0c6:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 800c0e8:	6839      	ldr	r1, [r7, #0]
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7ff ffdc 	bl	800c0a8 <VL53L1_calc_timeout_mclks>
 800c0f0:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f000 f860 	bl	800c1b8 <VL53L1_encode_timeout>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 800c0fc:	897b      	ldrh	r3, [r7, #10]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800c106:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c10a:	b087      	sub	sp, #28
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 800c112:	2100      	movs	r1, #0
 800c114:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 800c116:	f04f 0000 	mov.w	r0, #0
 800c11a:	f04f 0100 	mov.w	r1, #0
 800c11e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 800c122:	6879      	ldr	r1, [r7, #4]
 800c124:	2000      	movs	r0, #0
 800c126:	4688      	mov	r8, r1
 800c128:	4681      	mov	r9, r0
 800c12a:	6839      	ldr	r1, [r7, #0]
 800c12c:	2000      	movs	r0, #0
 800c12e:	460c      	mov	r4, r1
 800c130:	4605      	mov	r5, r0
 800c132:	fb04 f009 	mul.w	r0, r4, r9
 800c136:	fb08 f105 	mul.w	r1, r8, r5
 800c13a:	4401      	add	r1, r0
 800c13c:	fba8 2304 	umull	r2, r3, r8, r4
 800c140:	4419      	add	r1, r3
 800c142:	460b      	mov	r3, r1
 800c144:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800c148:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 800c14c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c150:	f512 6a00 	adds.w	sl, r2, #2048	; 0x800
 800c154:	f143 0b00 	adc.w	fp, r3, #0
 800c158:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 800c15c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c160:	f04f 0200 	mov.w	r2, #0
 800c164:	f04f 0300 	mov.w	r3, #0
 800c168:	0b02      	lsrs	r2, r0, #12
 800c16a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c16e:	0b0b      	lsrs	r3, r1, #12
 800c170:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c178:	697b      	ldr	r3, [r7, #20]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	371c      	adds	r7, #28
 800c17e:	46bd      	mov	sp, r7
 800c180:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c184:	4770      	bx	lr

0800c186 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b084      	sub	sp, #16
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	4603      	mov	r3, r0
 800c18e:	6039      	str	r1, [r7, #0]
 800c190:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 800c192:	2300      	movs	r3, #0
 800c194:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 800c196:	2300      	movs	r3, #0
 800c198:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 800c19a:	88fb      	ldrh	r3, [r7, #6]
 800c19c:	4618      	mov	r0, r3
 800c19e:	f000 f837 	bl	800c210 <VL53L1_decode_timeout>
 800c1a2:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 800c1a4:	6839      	ldr	r1, [r7, #0]
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f7ff ffad 	bl	800c106 <VL53L1_calc_timeout_us>
 800c1ac:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 800c1ae:	68bb      	ldr	r3, [r7, #8]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b087      	sub	sp, #28
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d017      	beq.n	800c202 <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c1d8:	e005      	b.n	800c1e6 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	085b      	lsrs	r3, r3, #1
 800c1de:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c1e0:	89fb      	ldrh	r3, [r7, #14]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d1f4      	bne.n	800c1da <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c1f0:	89fb      	ldrh	r3, [r7, #14]
 800c1f2:	021b      	lsls	r3, r3, #8
 800c1f4:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	b29b      	uxth	r3, r3
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c1fe:	4413      	add	r3, r2
 800c200:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c202:	8afb      	ldrh	r3, [r7, #22]
}
 800c204:	4618      	mov	r0, r3
 800c206:	371c      	adds	r7, #28
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c21e:	88fb      	ldrh	r3, [r7, #6]
 800c220:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c222:	88fa      	ldrh	r2, [r7, #6]
 800c224:	0a12      	lsrs	r2, r2, #8
 800c226:	b292      	uxth	r2, r2
 800c228:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c22a:	3301      	adds	r3, #1
 800c22c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c22e:	68fb      	ldr	r3, [r7, #12]
}
 800c230:	4618      	mov	r0, r3
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23a:	4770      	bx	lr

0800c23c <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b088      	sub	sp, #32
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
 800c248:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c24a:	2300      	movs	r3, #0
 800c24c:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800c252:	2300      	movs	r3, #0
 800c254:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 800c25a:	887b      	ldrh	r3, [r7, #2]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d102      	bne.n	800c266 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800c260:	23f1      	movs	r3, #241	; 0xf1
 800c262:	77fb      	strb	r3, [r7, #31]
 800c264:	e05d      	b.n	800c322 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c268:	799a      	ldrb	r2, [r3, #6]
 800c26a:	887b      	ldrh	r3, [r7, #2]
 800c26c:	4611      	mov	r1, r2
 800c26e:	4618      	mov	r0, r3
 800c270:	f7ff fe89 	bl	800bf86 <VL53L1_calc_macro_period_us>
 800c274:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 800c276:	6979      	ldr	r1, [r7, #20]
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	f7ff ff15 	bl	800c0a8 <VL53L1_calc_timeout_mclks>
 800c27e:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	2bff      	cmp	r3, #255	; 0xff
 800c284:	d901      	bls.n	800c28a <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 800c286:	23ff      	movs	r3, #255	; 0xff
 800c288:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c292:	6979      	ldr	r1, [r7, #20]
 800c294:	68b8      	ldr	r0, [r7, #8]
 800c296:	f7ff ff1e 	bl	800c0d6 <VL53L1_calc_encoded_timeout>
 800c29a:	4603      	mov	r3, r0
 800c29c:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c29e:	8a7b      	ldrh	r3, [r7, #18]
 800c2a0:	0a1b      	lsrs	r3, r3, #8
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c2aa:	8a7b      	ldrh	r3, [r7, #18]
 800c2ac:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 800c2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b0:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 800c2b2:	6979      	ldr	r1, [r7, #20]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f7ff ff0e 	bl	800c0d6 <VL53L1_calc_encoded_timeout>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c2be:	8a7b      	ldrh	r3, [r7, #18]
 800c2c0:	0a1b      	lsrs	r3, r3, #8
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 800c2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c2ca:	8a7b      	ldrh	r3, [r7, #18]
 800c2cc:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 800c2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d0:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800c2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d4:	7a5a      	ldrb	r2, [r3, #9]
 800c2d6:	887b      	ldrh	r3, [r7, #2]
 800c2d8:	4611      	mov	r1, r2
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7ff fe53 	bl	800bf86 <VL53L1_calc_macro_period_us>
 800c2e0:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 800c2e2:	6979      	ldr	r1, [r7, #20]
 800c2e4:	68b8      	ldr	r0, [r7, #8]
 800c2e6:	f7ff fef6 	bl	800c0d6 <VL53L1_calc_encoded_timeout>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c2ee:	8a7b      	ldrh	r3, [r7, #18]
 800c2f0:	0a1b      	lsrs	r3, r3, #8
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 800c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f8:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c2fa:	8a7b      	ldrh	r3, [r7, #18]
 800c2fc:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 800c2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c300:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800c302:	6979      	ldr	r1, [r7, #20]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f7ff fee6 	bl	800c0d6 <VL53L1_calc_encoded_timeout>
 800c30a:	4603      	mov	r3, r0
 800c30c:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 800c30e:	8a7b      	ldrh	r3, [r7, #18]
 800c310:	0a1b      	lsrs	r3, r3, #8
 800c312:	b29b      	uxth	r3, r3
 800c314:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 800c31a:	8a7b      	ldrh	r3, [r7, #18]
 800c31c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 800c31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c320:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800c322:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800c326:	4618      	mov	r0, r3
 800c328:	3720      	adds	r7, #32
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 800c32e:	b480      	push	{r7}
 800c330:	b083      	sub	sp, #12
 800c332:	af00      	add	r7, sp, #0
 800c334:	4603      	mov	r3, r0
 800c336:	603a      	str	r2, [r7, #0]
 800c338:	71fb      	strb	r3, [r7, #7]
 800c33a:	460b      	mov	r3, r1
 800c33c:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 800c33e:	79fb      	ldrb	r3, [r7, #7]
 800c340:	2b07      	cmp	r3, #7
 800c342:	d90a      	bls.n	800c35a <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800c344:	79bb      	ldrb	r3, [r7, #6]
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	b2da      	uxtb	r2, r3
 800c34a:	79fb      	ldrb	r3, [r7, #7]
 800c34c:	1ad3      	subs	r3, r2, r3
 800c34e:	b2db      	uxtb	r3, r3
 800c350:	3b71      	subs	r3, #113	; 0x71
 800c352:	b2da      	uxtb	r2, r3
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 800c358:	e00a      	b.n	800c370 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 800c35a:	79bb      	ldrb	r3, [r7, #6]
 800c35c:	f1c3 030f 	rsb	r3, r3, #15
 800c360:	b2db      	uxtb	r3, r3
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	b2da      	uxtb	r2, r3
 800c366:	79fb      	ldrb	r3, [r7, #7]
 800c368:	4413      	add	r3, r2
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	701a      	strb	r2, [r3, #0]
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	4603      	mov	r3, r0
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
 800c388:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 800c38a:	7bfb      	ldrb	r3, [r7, #15]
 800c38c:	091b      	lsrs	r3, r3, #4
 800c38e:	b2da      	uxtb	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 800c394:	7bfb      	ldrb	r3, [r7, #15]
 800c396:	f003 030f 	and.w	r3, r3, #15
 800c39a:	b2da      	uxtb	r2, r3
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	701a      	strb	r2, [r3, #0]

}
 800c3a0:	bf00      	nop
 800c3a2:	3714      	adds	r7, #20
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b083      	sub	sp, #12
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	603a      	str	r2, [r7, #0]
 800c3b6:	71fb      	strb	r3, [r7, #7]
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 800c3bc:	79bb      	ldrb	r3, [r7, #6]
 800c3be:	011b      	lsls	r3, r3, #4
 800c3c0:	b2da      	uxtb	r2, r3
 800c3c2:	79fb      	ldrb	r3, [r7, #7]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	701a      	strb	r2, [r3, #0]

}
 800c3cc:	bf00      	nop
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	2203      	movs	r2, #3
 800c3ec:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2200      	movs	r2, #0
 800c404:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 800c408:	68bb      	ldr	r3, [r7, #8]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2200      	movs	r2, #0
 800c414:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2200      	movs	r2, #0
 800c424:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800c430:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3714      	adds	r7, #20
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 800c440:	b480      	push	{r7}
 800c442:	b087      	sub	sp, #28
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c44c:	2300      	movs	r3, #0
 800c44e:	75fb      	strb	r3, [r7, #23]
	SUPPRESS_UNUSED_WARNING(pgeneral);

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	2201      	movs	r2, #1
 800c454:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	229b      	movs	r2, #155	; 0x9b
 800c460:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	LOG_FUNCTION_END(status);

	return status;
 800c462:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c466:	4618      	mov	r0, r3
 800c468:	371c      	adds	r7, #28
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr

0800c472 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 800c472:	b480      	push	{r7}
 800c474:	b085      	sub	sp, #20
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800c47e:	2300      	movs	r3, #0
 800c480:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 800c4a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4a4:	b2da      	uxtb	r2, r3
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800c4b2:	f003 0303 	and.w	r3, r3, #3
 800c4b6:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800c4c2:	4413      	add	r3, r2
 800c4c4:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800c4ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	3714      	adds	r7, #20
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr

0800c4fc <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	b085      	sub	sp, #20
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 800c50a:	88fb      	ldrh	r3, [r7, #6]
 800c50c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c510:	fb92 f3f3 	sdiv	r3, r2, r3
 800c514:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 800c516:	68fb      	ldr	r3, [r7, #12]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800c532:	79fb      	ldrb	r3, [r7, #7]
 800c534:	3301      	adds	r3, #1
 800c536:	b2db      	uxtb	r3, r3
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3714      	adds	r7, #20
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr

0800c54a <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 800c54a:	b480      	push	{r7}
 800c54c:	b085      	sub	sp, #20
 800c54e:	af00      	add	r7, sp, #0
 800c550:	4603      	mov	r3, r0
 800c552:	60b9      	str	r1, [r7, #8]
 800c554:	607a      	str	r2, [r7, #4]
 800c556:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 800c558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	da10      	bge.n	800c582 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 800c560:	7bfb      	ldrb	r3, [r7, #15]
 800c562:	43db      	mvns	r3, r3
 800c564:	b2db      	uxtb	r3, r3
 800c566:	f003 0307 	and.w	r3, r3, #7
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	3308      	adds	r3, #8
 800c56e:	b2da      	uxtb	r2, r3
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 800c574:	7bfb      	ldrb	r3, [r7, #15]
 800c576:	3b80      	subs	r3, #128	; 0x80
 800c578:	10db      	asrs	r3, r3, #3
 800c57a:	b2da      	uxtb	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 800c580:	e00c      	b.n	800c59c <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 800c582:	7bfb      	ldrb	r3, [r7, #15]
 800c584:	f003 0307 	and.w	r3, r3, #7
 800c588:	b2da      	uxtb	r2, r3
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 800c58e:	7bfb      	ldrb	r3, [r7, #15]
 800c590:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800c594:	10db      	asrs	r3, r3, #3
 800c596:	b2da      	uxtb	r2, r3
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	701a      	strb	r2, [r3, #0]
}
 800c59c:	bf00      	nop
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b086      	sub	sp, #24
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	607a      	str	r2, [r7, #4]
 800c5b4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800c5ba:	897b      	ldrh	r3, [r7, #10]
 800c5bc:	2b0a      	cmp	r3, #10
 800c5be:	d802      	bhi.n	800c5c6 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c5c0:	f06f 0309 	mvn.w	r3, #9
 800c5c4:	e047      	b.n	800c656 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5ce:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 800c5dc:	f002 020f 	and.w	r2, r2, #15
 800c5e0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800c5e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 800c5ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c5f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800c5f2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 800c5fc:	f002 0203 	and.w	r2, r2, #3
 800c600:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800c602:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 800c60c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c610:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800c612:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	88d8      	ldrh	r0, [r3, #6]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	3305      	adds	r3, #5
 800c61c:	461a      	mov	r2, r3
 800c61e:	2102      	movs	r1, #2
 800c620:	f7ff fb75 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800c62c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 800c632:	68fa      	ldr	r2, [r7, #12]
 800c634:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800c636:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 800c640:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800c644:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800c646:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 800c650:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800c652:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3718      	adds	r7, #24
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b086      	sub	sp, #24
 800c662:	af00      	add	r7, sp, #0
 800c664:	4603      	mov	r3, r0
 800c666:	60b9      	str	r1, [r7, #8]
 800c668:	607a      	str	r2, [r7, #4]
 800c66a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c66c:	2300      	movs	r3, #0
 800c66e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800c670:	89fb      	ldrh	r3, [r7, #14]
 800c672:	2b0a      	cmp	r3, #10
 800c674:	d802      	bhi.n	800c67c <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c676:	f06f 0309 	mvn.w	r3, #9
 800c67a:	e046      	b.n	800c70a <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c684:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	3301      	adds	r3, #1
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	f003 030f 	and.w	r3, r3, #15
 800c694:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	3302      	adds	r3, #2
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6a4:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	3303      	adds	r3, #3
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	f003 0303 	and.w	r3, r3, #3
 800c6b4:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6c4:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	3305      	adds	r3, #5
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	2002      	movs	r0, #2
 800c6d2:	f7ff fb47 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	79da      	ldrb	r2, [r3, #7]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	7a1a      	ldrb	r2, [r3, #8]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	3309      	adds	r3, #9
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c6f8:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	7a9a      	ldrb	r2, [r3, #10]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 800c706:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3718      	adds	r7, #24
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 800c712:	b580      	push	{r7, lr}
 800c714:	b086      	sub	sp, #24
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c71c:	2300      	movs	r3, #0
 800c71e:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c720:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d108      	bne.n	800c73a <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800c728:	f107 020c 	add.w	r2, r7, #12
 800c72c:	230b      	movs	r3, #11
 800c72e:	2101      	movs	r1, #1
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f001 f8f3 	bl	800d91c <VL53L1_ReadMulti>
 800c736:	4603      	mov	r3, r0
 800c738:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800c73a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d108      	bne.n	800c754 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 800c742:	f107 030c 	add.w	r3, r7, #12
 800c746:	683a      	ldr	r2, [r7, #0]
 800c748:	4619      	mov	r1, r3
 800c74a:	200b      	movs	r0, #11
 800c74c:	f7ff ff87 	bl	800c65e <VL53L1_i2c_decode_static_nvm_managed>
 800c750:	4603      	mov	r3, r0
 800c752:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800c754:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3718      	adds	r7, #24
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	60f8      	str	r0, [r7, #12]
 800c768:	460b      	mov	r3, r1
 800c76a:	607a      	str	r2, [r7, #4]
 800c76c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c76e:	2300      	movs	r3, #0
 800c770:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800c772:	897b      	ldrh	r3, [r7, #10]
 800c774:	2b16      	cmp	r3, #22
 800c776:	d802      	bhi.n	800c77e <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c778:	f06f 0309 	mvn.w	r3, #9
 800c77c:	e076      	b.n	800c86c <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800c78e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800c798:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 800c79e:	68fa      	ldr	r2, [r7, #12]
 800c7a0:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800c7a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800c7ac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 800c7b6:	f002 020f 	and.w	r2, r2, #15
 800c7ba:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800c7bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 800c7c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 800c7d0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800c7d4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800c7d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 800c7e0:	f002 0203 	and.w	r2, r2, #3
 800c7e4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800c7e6:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	8958      	ldrh	r0, [r3, #10]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	3309      	adds	r3, #9
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	2102      	movs	r1, #2
 800c7f4:	f7ff fa8b 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	330b      	adds	r3, #11
 800c802:	461a      	mov	r2, r3
 800c804:	2102      	movs	r1, #2
 800c806:	f7ff facd 	bl	800bda4 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	330d      	adds	r3, #13
 800c814:	461a      	mov	r2, r3
 800c816:	2102      	movs	r1, #2
 800c818:	f7ff fac4 	bl	800bda4 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	8a18      	ldrh	r0, [r3, #16]
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	330f      	adds	r3, #15
 800c824:	461a      	mov	r2, r3
 800c826:	2102      	movs	r1, #2
 800c828:	f7ff fa71 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 800c832:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c836:	b218      	sxth	r0, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	3311      	adds	r3, #17
 800c83c:	461a      	mov	r2, r3
 800c83e:	2102      	movs	r1, #2
 800c840:	f7ff fab0 	bl	800bda4 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	3313      	adds	r3, #19
 800c84e:	461a      	mov	r2, r3
 800c850:	2102      	movs	r1, #2
 800c852:	f7ff faa7 	bl	800bda4 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	3315      	adds	r3, #21
 800c860:	461a      	mov	r2, r3
 800c862:	2102      	movs	r1, #2
 800c864:	f7ff fa9e 	bl	800bda4 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 800c868:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3718      	adds	r7, #24
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	4603      	mov	r3, r0
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
 800c880:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c882:	2300      	movs	r3, #0
 800c884:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 800c886:	89fb      	ldrh	r3, [r7, #14]
 800c888:	2b16      	cmp	r3, #22
 800c88a:	d802      	bhi.n	800c892 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c88c:	f06f 0309 	mvn.w	r3, #9
 800c890:	e079      	b.n	800c986 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	785a      	ldrb	r2, [r3, #1]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	789a      	ldrb	r2, [r3, #2]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	78da      	ldrb	r2, [r3, #3]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	791a      	ldrb	r2, [r3, #4]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	3305      	adds	r3, #5
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	f003 030f 	and.w	r3, r3, #15
 800c8c4:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	799a      	ldrb	r2, [r3, #6]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	3307      	adds	r3, #7
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8dc:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	3308      	adds	r3, #8
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	f003 0303 	and.w	r3, r3, #3
 800c8ec:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	3309      	adds	r3, #9
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	2002      	movs	r0, #2
 800c8fa:	f7ff fa33 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800c8fe:	4603      	mov	r3, r0
 800c900:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	330b      	adds	r3, #11
 800c90a:	4619      	mov	r1, r3
 800c90c:	2002      	movs	r0, #2
 800c90e:	f7ff fa75 	bl	800bdfc <VL53L1_i2c_decode_int16_t>
 800c912:	4603      	mov	r3, r0
 800c914:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	330d      	adds	r3, #13
 800c91e:	4619      	mov	r1, r3
 800c920:	2002      	movs	r0, #2
 800c922:	f7ff fa6b 	bl	800bdfc <VL53L1_i2c_decode_int16_t>
 800c926:	4603      	mov	r3, r0
 800c928:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	330f      	adds	r3, #15
 800c932:	4619      	mov	r1, r3
 800c934:	2002      	movs	r0, #2
 800c936:	f7ff fa15 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800c93a:	4603      	mov	r3, r0
 800c93c:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	3311      	adds	r3, #17
 800c946:	4619      	mov	r1, r3
 800c948:	2002      	movs	r0, #2
 800c94a:	f7ff fa57 	bl	800bdfc <VL53L1_i2c_decode_int16_t>
 800c94e:	4603      	mov	r3, r0
 800c950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c954:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	3313      	adds	r3, #19
 800c95e:	4619      	mov	r1, r3
 800c960:	2002      	movs	r0, #2
 800c962:	f7ff fa4b 	bl	800bdfc <VL53L1_i2c_decode_int16_t>
 800c966:	4603      	mov	r3, r0
 800c968:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	3315      	adds	r3, #21
 800c972:	4619      	mov	r1, r3
 800c974:	2002      	movs	r0, #2
 800c976:	f7ff fa41 	bl	800bdfc <VL53L1_i2c_decode_int16_t>
 800c97a:	4603      	mov	r3, r0
 800c97c:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 800c982:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3718      	adds	r7, #24
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}

0800c98e <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b088      	sub	sp, #32
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
 800c996:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c998:	2300      	movs	r3, #0
 800c99a:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800c99c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d108      	bne.n	800c9b6 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 800c9a4:	f107 0208 	add.w	r2, r7, #8
 800c9a8:	2317      	movs	r3, #23
 800c9aa:	210d      	movs	r1, #13
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 ffb5 	bl	800d91c <VL53L1_ReadMulti>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800c9b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d108      	bne.n	800c9d0 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 800c9be:	f107 0308 	add.w	r3, r7, #8
 800c9c2:	683a      	ldr	r2, [r7, #0]
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	2017      	movs	r0, #23
 800c9c8:	f7ff ff54 	bl	800c874 <VL53L1_i2c_decode_customer_nvm_managed>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800c9d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3720      	adds	r7, #32
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b086      	sub	sp, #24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	607a      	str	r2, [r7, #4]
 800c9e8:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800c9ee:	897b      	ldrh	r3, [r7, #10]
 800c9f0:	2b1f      	cmp	r3, #31
 800c9f2:	d802      	bhi.n	800c9fa <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800c9f4:	f06f 0309 	mvn.w	r3, #9
 800c9f8:	e0cf      	b.n	800cb9a <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	881b      	ldrh	r3, [r3, #0]
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	2102      	movs	r1, #2
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff f983 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 800ca10:	f002 0201 	and.w	r2, r2, #1
 800ca14:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ca16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 800ca20:	f002 020f 	and.w	r2, r2, #15
 800ca24:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800ca26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 800ca30:	f002 020f 	and.w	r2, r2, #15
 800ca34:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800ca36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 800ca40:	f002 021f 	and.w	r2, r2, #31
 800ca44:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ca46:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 800ca50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ca54:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ca56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 800ca60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ca64:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800ca66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 800ca70:	f002 0201 	and.w	r2, r2, #1
 800ca74:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 800ca76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 800ca80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 800ca8a:	f002 0201 	and.w	r2, r2, #1
 800ca8e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ca90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 800ca9a:	f002 0203 	and.w	r2, r2, #3
 800ca9e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800caa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 800caaa:	f002 021f 	and.w	r2, r2, #31
 800caae:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800cab0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 800caba:	f002 0203 	and.w	r2, r2, #3
 800cabe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800cac0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 800caca:	f002 0203 	and.w	r2, r2, #3
 800cace:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800cad0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 800cada:	f002 0207 	and.w	r2, r2, #7
 800cade:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800cae0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 800caea:	f002 021f 	and.w	r2, r2, #31
 800caee:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800caf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 800cafa:	f002 0201 	and.w	r2, r2, #1
 800cafe:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800cb00:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 800cb06:	68fa      	ldr	r2, [r7, #12]
 800cb08:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800cb0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800cb14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800cb1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800cb28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 800cb32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800cb3c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	8b18      	ldrh	r0, [r3, #24]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	3318      	adds	r3, #24
 800cb46:	461a      	mov	r2, r3
 800cb48:	2102      	movs	r1, #2
 800cb4a:	f7ff f8e0 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 800cb52:	68fa      	ldr	r2, [r7, #12]
 800cb54:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 800cb56:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 800cb60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 800cb6a:	f002 020f 	and.w	r2, r2, #15
 800cb6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 800cb70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 800cb76:	68fa      	ldr	r2, [r7, #12]
 800cb78:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 800cb7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 800cb84:	f002 020f 	and.w	r2, r2, #15
 800cb88:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 800cb8a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 800cb94:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800cb96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3718      	adds	r7, #24
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}

0800cba2 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b086      	sub	sp, #24
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	60f8      	str	r0, [r7, #12]
 800cbaa:	460b      	mov	r3, r1
 800cbac:	607a      	str	r2, [r7, #4]
 800cbae:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 800cbb4:	897b      	ldrh	r3, [r7, #10]
 800cbb6:	2b15      	cmp	r3, #21
 800cbb8:	d802      	bhi.n	800cbc0 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cbba:	f06f 0309 	mvn.w	r3, #9
 800cbbe:	e070      	b.n	800cca2 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800cbcc:	68fa      	ldr	r2, [r7, #12]
 800cbce:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800cbd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 800cbd6:	68fa      	ldr	r2, [r7, #12]
 800cbd8:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 800cbda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800cbe4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cbe8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800cbea:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800cbf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cbf4:	b298      	uxth	r0, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	3304      	adds	r3, #4
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	2102      	movs	r1, #2
 800cbfe:	f7ff f886 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 800cc0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc0e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800cc10:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 800cc1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800cc24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 800cc2e:	f002 0201 	and.w	r2, r2, #1
 800cc32:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800cc34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 800cc3e:	f002 0207 	and.w	r2, r2, #7
 800cc42:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800cc44:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	8998      	ldrh	r0, [r3, #12]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	330c      	adds	r3, #12
 800cc4e:	461a      	mov	r2, r3
 800cc50:	2102      	movs	r1, #2
 800cc52:	f7ff f85c 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	89d8      	ldrh	r0, [r3, #14]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	330e      	adds	r3, #14
 800cc5e:	461a      	mov	r2, r3
 800cc60:	2102      	movs	r1, #2
 800cc62:	f7ff f854 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	8a18      	ldrh	r0, [r3, #16]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	3310      	adds	r3, #16
 800cc6e:	461a      	mov	r2, r3
 800cc70:	2102      	movs	r1, #2
 800cc72:	f7ff f84c 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 800cc7a:	68fa      	ldr	r2, [r7, #12]
 800cc7c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 800cc7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 800cc88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800cc92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 800cc98:	68fa      	ldr	r2, [r7, #12]
 800cc9a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 800cc9c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800cc9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3718      	adds	r7, #24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b086      	sub	sp, #24
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	60f8      	str	r0, [r7, #12]
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	607a      	str	r2, [r7, #4]
 800ccb6:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800ccbc:	897b      	ldrh	r3, [r7, #10]
 800ccbe:	2b16      	cmp	r3, #22
 800ccc0:	d802      	bhi.n	800ccc8 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ccc2:	f06f 0309 	mvn.w	r3, #9
 800ccc6:	e06e      	b.n	800cda6 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	781b      	ldrb	r3, [r3, #0]
 800cccc:	f003 030f 	and.w	r3, r3, #15
 800ccd0:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800ccde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 800cce8:	f002 020f 	and.w	r2, r2, #15
 800ccec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800ccee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 800ccf8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800cd02:	f002 020f 	and.w	r2, r2, #15
 800cd06:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 800cd08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 800cd12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 800cd1c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800cd20:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800cd22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 800cd2c:	f002 020f 	and.w	r2, r2, #15
 800cd30:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 800cd32:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800cd3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 800cd46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800cd4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800cd4c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	8958      	ldrh	r0, [r3, #10]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	330a      	adds	r3, #10
 800cd56:	461a      	mov	r2, r3
 800cd58:	2102      	movs	r1, #2
 800cd5a:	f7fe ffd8 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	8998      	ldrh	r0, [r3, #12]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	330c      	adds	r3, #12
 800cd66:	461a      	mov	r2, r3
 800cd68:	2102      	movs	r1, #2
 800cd6a:	f7fe ffd0 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 800cd76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 800cd7c:	68fa      	ldr	r2, [r7, #12]
 800cd7e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 800cd80:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6918      	ldr	r0, [r3, #16]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	3312      	adds	r3, #18
 800cd8a:	461a      	mov	r2, r3
 800cd8c:	2104      	movs	r1, #4
 800cd8e:	f7ff f85e 	bl	800be4e <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 800cd9a:	f002 0201 	and.w	r2, r2, #1
 800cd9e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 800cda0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800cda2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3718      	adds	r7, #24
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b086      	sub	sp, #24
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	60f8      	str	r0, [r7, #12]
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	607a      	str	r2, [r7, #4]
 800cdba:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800cdc0:	897b      	ldrh	r3, [r7, #10]
 800cdc2:	2b11      	cmp	r3, #17
 800cdc4:	d802      	bhi.n	800cdcc <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cdc6:	f06f 0309 	mvn.w	r3, #9
 800cdca:	e071      	b.n	800ceb0 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	f003 0303 	and.w	r3, r3, #3
 800cdd4:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	8858      	ldrh	r0, [r3, #2]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	3301      	adds	r3, #1
 800cde2:	461a      	mov	r2, r3
 800cde4:	2102      	movs	r1, #2
 800cde6:	f7fe ff92 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	8898      	ldrh	r0, [r3, #4]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	3303      	adds	r3, #3
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	2102      	movs	r1, #2
 800cdf6:	f7fe ff8a 	bl	800bd0e <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800ce02:	f002 0201 	and.w	r2, r2, #1
 800ce06:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 800ce08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800ce12:	f002 0207 	and.w	r2, r2, #7
 800ce16:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800ce18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800ce1e:	68fa      	ldr	r2, [r7, #12]
 800ce20:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 800ce22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800ce2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 800ce36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ce3a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800ce3c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 800ce46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ce4a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800ce4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 800ce56:	f002 0203 	and.w	r2, r2, #3
 800ce5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 800ce5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 800ce66:	f002 0203 	and.w	r2, r2, #3
 800ce6a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 800ce6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 800ce76:	f002 020f 	and.w	r2, r2, #15
 800ce7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800ce7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 800ce82:	68fa      	ldr	r2, [r7, #12]
 800ce84:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 800ce86:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 800ce8c:	68fa      	ldr	r2, [r7, #12]
 800ce8e:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 800ce90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 800ce96:	68fa      	ldr	r2, [r7, #12]
 800ce98:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 800ce9a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 800cea4:	f002 0203 	and.w	r2, r2, #3
 800cea8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800ceaa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800ceac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3718      	adds	r7, #24
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b087      	sub	sp, #28
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	460b      	mov	r3, r1
 800cec2:	607a      	str	r2, [r7, #4]
 800cec4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cec6:	2300      	movs	r3, #0
 800cec8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 800ceca:	897b      	ldrh	r3, [r7, #10]
 800cecc:	2b04      	cmp	r3, #4
 800cece:	d802      	bhi.n	800ced6 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800ced0:	f06f 0309 	mvn.w	r3, #9
 800ced4:	e025      	b.n	800cf22 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	f003 0301 	and.w	r3, r3, #1
 800cede:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 800ceec:	f002 0201 	and.w	r2, r2, #1
 800cef0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 800cef2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 800cefc:	f002 0201 	and.w	r2, r2, #1
 800cf00:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800cf02:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 800cf0c:	f002 0203 	and.w	r2, r2, #3
 800cf10:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 800cf12:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	3304      	adds	r3, #4
		pdata->system__mode_start;
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800cf1c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800cf1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	371c      	adds	r7, #28
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr

0800cf2e <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b086      	sub	sp, #24
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	4603      	mov	r3, r0
 800cf36:	60b9      	str	r1, [r7, #8]
 800cf38:	607a      	str	r2, [r7, #4]
 800cf3a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 800cf40:	89fb      	ldrh	r3, [r7, #14]
 800cf42:	2b2b      	cmp	r3, #43	; 0x2b
 800cf44:	d802      	bhi.n	800cf4c <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800cf46:	f06f 0309 	mvn.w	r3, #9
 800cf4a:	e0e2      	b.n	800d112 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf54:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	785a      	ldrb	r2, [r3, #1]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	3302      	adds	r3, #2
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	f003 030f 	and.w	r3, r3, #15
 800cf6c:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	78da      	ldrb	r2, [r3, #3]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	4619      	mov	r1, r3
 800cf80:	2002      	movs	r0, #2
 800cf82:	f7fe feef 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800cf86:	4603      	mov	r3, r0
 800cf88:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	3306      	adds	r3, #6
 800cf92:	4619      	mov	r1, r3
 800cf94:	2002      	movs	r0, #2
 800cf96:	f7fe fee5 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	3308      	adds	r3, #8
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	2002      	movs	r0, #2
 800cfaa:	f7fe fedb 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	330a      	adds	r3, #10
 800cfba:	4619      	mov	r1, r3
 800cfbc:	2002      	movs	r0, #2
 800cfbe:	f7fe fed1 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	330c      	adds	r3, #12
 800cfce:	4619      	mov	r1, r3
 800cfd0:	2002      	movs	r0, #2
 800cfd2:	f7fe fec7 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	330e      	adds	r3, #14
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	2002      	movs	r0, #2
 800cfe6:	f7fe febd 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800cfea:	4603      	mov	r3, r0
 800cfec:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	3310      	adds	r3, #16
 800cff6:	4619      	mov	r1, r3
 800cff8:	2002      	movs	r0, #2
 800cffa:	f7fe feb3 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800cffe:	4603      	mov	r3, r0
 800d000:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	3312      	adds	r3, #18
 800d00a:	4619      	mov	r1, r3
 800d00c:	2002      	movs	r0, #2
 800d00e:	f7fe fea9 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d012:	4603      	mov	r3, r0
 800d014:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	3314      	adds	r3, #20
 800d01e:	4619      	mov	r1, r3
 800d020:	2002      	movs	r0, #2
 800d022:	f7fe fe9f 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d026:	4603      	mov	r3, r0
 800d028:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	3316      	adds	r3, #22
 800d032:	4619      	mov	r1, r3
 800d034:	2002      	movs	r0, #2
 800d036:	f7fe fe95 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d03a:	4603      	mov	r3, r0
 800d03c:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	3318      	adds	r3, #24
 800d046:	4619      	mov	r1, r3
 800d048:	2002      	movs	r0, #2
 800d04a:	f7fe fe8b 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d04e:	4603      	mov	r3, r0
 800d050:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	331a      	adds	r3, #26
 800d05a:	4619      	mov	r1, r3
 800d05c:	2002      	movs	r0, #2
 800d05e:	f7fe fe81 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d062:	4603      	mov	r3, r0
 800d064:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	331c      	adds	r3, #28
 800d06e:	4619      	mov	r1, r3
 800d070:	2002      	movs	r0, #2
 800d072:	f7fe fe77 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d076:	4603      	mov	r3, r0
 800d078:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	331e      	adds	r3, #30
 800d082:	4619      	mov	r1, r3
 800d084:	2002      	movs	r0, #2
 800d086:	f7fe fe6d 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d08a:	4603      	mov	r3, r0
 800d08c:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	3320      	adds	r3, #32
 800d096:	4619      	mov	r1, r3
 800d098:	2002      	movs	r0, #2
 800d09a:	f7fe fe63 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	3322      	adds	r3, #34	; 0x22
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	2002      	movs	r0, #2
 800d0ae:	f7fe fe59 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	3324      	adds	r3, #36	; 0x24
 800d0be:	4619      	mov	r1, r3
 800d0c0:	2002      	movs	r0, #2
 800d0c2:	f7fe fe4f 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	3326      	adds	r3, #38	; 0x26
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	2002      	movs	r0, #2
 800d0d6:	f7fe fe45 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	3328      	adds	r3, #40	; 0x28
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	2002      	movs	r0, #2
 800d0ea:	f7fe fe3b 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 800d10e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d112:	4618      	mov	r0, r3
 800d114:	3718      	adds	r7, #24
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b086      	sub	sp, #24
 800d11e:	af00      	add	r7, sp, #0
 800d120:	4603      	mov	r3, r0
 800d122:	60b9      	str	r1, [r7, #8]
 800d124:	607a      	str	r2, [r7, #4]
 800d126:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d128:	2300      	movs	r3, #0
 800d12a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 800d12c:	89fb      	ldrh	r3, [r7, #14]
 800d12e:	2b20      	cmp	r3, #32
 800d130:	d802      	bhi.n	800d138 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d132:	f06f 0309 	mvn.w	r3, #9
 800d136:	e04d      	b.n	800d1d4 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 800d138:	68b9      	ldr	r1, [r7, #8]
 800d13a:	2004      	movs	r0, #4
 800d13c:	f7fe feb1 	bl	800bea2 <VL53L1_i2c_decode_uint32_t>
 800d140:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	3304      	adds	r3, #4
 800d14a:	4619      	mov	r1, r3
 800d14c:	2004      	movs	r0, #4
 800d14e:	f7fe fea8 	bl	800bea2 <VL53L1_i2c_decode_uint32_t>
 800d152:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	3308      	adds	r3, #8
 800d15c:	4619      	mov	r1, r3
 800d15e:	2004      	movs	r0, #4
 800d160:	f7fe febc 	bl	800bedc <VL53L1_i2c_decode_int32_t>
 800d164:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	330c      	adds	r3, #12
 800d16e:	4619      	mov	r1, r3
 800d170:	2004      	movs	r0, #4
 800d172:	f7fe fe96 	bl	800bea2 <VL53L1_i2c_decode_uint32_t>
 800d176:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	3310      	adds	r3, #16
 800d180:	4619      	mov	r1, r3
 800d182:	2004      	movs	r0, #4
 800d184:	f7fe fe8d 	bl	800bea2 <VL53L1_i2c_decode_uint32_t>
 800d188:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	3314      	adds	r3, #20
 800d192:	4619      	mov	r1, r3
 800d194:	2004      	movs	r0, #4
 800d196:	f7fe fe84 	bl	800bea2 <VL53L1_i2c_decode_uint32_t>
 800d19a:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	3318      	adds	r3, #24
 800d1a4:	4619      	mov	r1, r3
 800d1a6:	2004      	movs	r0, #4
 800d1a8:	f7fe fe98 	bl	800bedc <VL53L1_i2c_decode_int32_t>
 800d1ac:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	331c      	adds	r3, #28
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	2004      	movs	r0, #4
 800d1ba:	f7fe fe72 	bl	800bea2 <VL53L1_i2c_decode_uint32_t>
 800d1be:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	f893 2020 	ldrb.w	r2, [r3, #32]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800d1d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3718      	adds	r7, #24
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b086      	sub	sp, #24
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
 800d1e8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800d1ee:	89fb      	ldrh	r3, [r7, #14]
 800d1f0:	2b37      	cmp	r3, #55	; 0x37
 800d1f2:	d802      	bhi.n	800d1fa <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d1f4:	f06f 0309 	mvn.w	r3, #9
 800d1f8:	e15e      	b.n	800d4b8 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 800d1fa:	68b9      	ldr	r1, [r7, #8]
 800d1fc:	2002      	movs	r0, #2
 800d1fe:	f7fe fdb1 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d202:	4603      	mov	r3, r0
 800d204:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	3302      	adds	r3, #2
 800d20e:	781b      	ldrb	r3, [r3, #0]
 800d210:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d214:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	3303      	adds	r3, #3
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d224:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	3304      	adds	r3, #4
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	f003 0303 	and.w	r3, r3, #3
 800d234:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	3305      	adds	r3, #5
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	f003 0301 	and.w	r3, r3, #1
 800d244:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	3306      	adds	r3, #6
 800d24e:	781b      	ldrb	r3, [r3, #0]
 800d250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d254:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	3307      	adds	r3, #7
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d264:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	3308      	adds	r3, #8
 800d26e:	4619      	mov	r1, r3
 800d270:	2002      	movs	r0, #2
 800d272:	f7fe fd77 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d276:	4603      	mov	r3, r0
 800d278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d27c:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	330a      	adds	r3, #10
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	f003 0303 	and.w	r3, r3, #3
 800d28c:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	330b      	adds	r3, #11
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	f003 0303 	and.w	r3, r3, #3
 800d29c:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	330c      	adds	r3, #12
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	f003 030f 	and.w	r3, r3, #15
 800d2ac:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	330d      	adds	r3, #13
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	f003 0307 	and.w	r3, r3, #7
 800d2bc:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	330e      	adds	r3, #14
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	f003 0301 	and.w	r3, r3, #1
 800d2cc:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	330f      	adds	r3, #15
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	f003 0303 	and.w	r3, r3, #3
 800d2dc:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800d2e2:	68bb      	ldr	r3, [r7, #8]
 800d2e4:	7c1a      	ldrb	r2, [r3, #16]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	7c5a      	ldrb	r2, [r3, #17]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	3312      	adds	r3, #18
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	2002      	movs	r0, #2
 800d2fa:	f7fe fd33 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d2fe:	4603      	mov	r3, r0
 800d300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d304:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	3316      	adds	r3, #22
 800d30e:	4619      	mov	r1, r3
 800d310:	2002      	movs	r0, #2
 800d312:	f7fe fd27 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d316:	4603      	mov	r3, r0
 800d318:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	3318      	adds	r3, #24
 800d322:	4619      	mov	r1, r3
 800d324:	2002      	movs	r0, #2
 800d326:	f7fe fd1d 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d32a:	4603      	mov	r3, r0
 800d32c:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 800d332:	68bb      	ldr	r3, [r7, #8]
 800d334:	331a      	adds	r3, #26
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	f003 0301 	and.w	r3, r3, #1
 800d33c:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	331b      	adds	r3, #27
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	f003 0307 	and.w	r3, r3, #7
 800d34c:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	7f1a      	ldrb	r2, [r3, #28]
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	7f5a      	ldrb	r2, [r3, #29]
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	331e      	adds	r3, #30
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d36c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	331f      	adds	r3, #31
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d37c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	3320      	adds	r3, #32
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	f003 0303 	and.w	r3, r3, #3
 800d38c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	3321      	adds	r3, #33	; 0x21
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	f003 030f 	and.w	r3, r3, #15
 800d39c:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	3325      	adds	r3, #37	; 0x25
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	f003 0301 	and.w	r3, r3, #1
 800d3d0:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	3326      	adds	r3, #38	; 0x26
 800d3dc:	781b      	ldrb	r3, [r3, #0]
 800d3de:	f003 0303 	and.w	r3, r3, #3
 800d3e2:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	3327      	adds	r3, #39	; 0x27
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	f003 031f 	and.w	r3, r3, #31
 800d3f4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 800d3fc:	68bb      	ldr	r3, [r7, #8]
 800d3fe:	3328      	adds	r3, #40	; 0x28
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	f003 031f 	and.w	r3, r3, #31
 800d406:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	3329      	adds	r3, #41	; 0x29
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	f003 031f 	and.w	r3, r3, #31
 800d418:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	332a      	adds	r3, #42	; 0x2a
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	f003 0301 	and.w	r3, r3, #1
 800d42a:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	332b      	adds	r3, #43	; 0x2b
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	f003 0301 	and.w	r3, r3, #1
 800d43c:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	332c      	adds	r3, #44	; 0x2c
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	f003 0303 	and.w	r3, r3, #3
 800d44e:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	332d      	adds	r3, #45	; 0x2d
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d460:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	332e      	adds	r3, #46	; 0x2e
 800d46c:	4619      	mov	r1, r3
 800d46e:	2004      	movs	r0, #4
 800d470:	f7fe fd17 	bl	800bea2 <VL53L1_i2c_decode_uint32_t>
 800d474:	4603      	mov	r3, r0
 800d476:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	3332      	adds	r3, #50	; 0x32
 800d482:	4619      	mov	r1, r3
 800d484:	2004      	movs	r0, #4
 800d486:	f7fe fd0c 	bl	800bea2 <VL53L1_i2c_decode_uint32_t>
 800d48a:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	3336      	adds	r3, #54	; 0x36
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	f003 0301 	and.w	r3, r3, #1
 800d49a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	3337      	adds	r3, #55	; 0x37
 800d4a6:	781b      	ldrb	r3, [r3, #0]
 800d4a8:	f003 0301 	and.w	r3, r3, #1
 800d4ac:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 800d4b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3718      	adds	r7, #24
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b086      	sub	sp, #24
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 800d4d2:	89fb      	ldrh	r3, [r7, #14]
 800d4d4:	2b30      	cmp	r3, #48	; 0x30
 800d4d6:	d802      	bhi.n	800d4de <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800d4d8:	f06f 0309 	mvn.w	r3, #9
 800d4dc:	e112      	b.n	800d704 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	785a      	ldrb	r2, [r3, #1]
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	789a      	ldrb	r2, [r3, #2]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	3303      	adds	r3, #3
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	2002      	movs	r0, #2
 800d4fe:	f7fe fc31 	bl	800bd64 <VL53L1_i2c_decode_uint16_t>
 800d502:	4603      	mov	r3, r0
 800d504:	461a      	mov	r2, r3
	pdata->identification__module_id =
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	3305      	adds	r3, #5
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d514:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	3306      	adds	r3, #6
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	f003 0307 	and.w	r3, r3, #7
 800d524:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	3307      	adds	r3, #7
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	f003 0307 	and.w	r3, r3, #7
 800d534:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	3308      	adds	r3, #8
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d544:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	3309      	adds	r3, #9
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d554:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	330a      	adds	r3, #10
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	f003 0301 	and.w	r3, r3, #1
 800d564:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	330b      	adds	r3, #11
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d574:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	330c      	adds	r3, #12
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	f003 0301 	and.w	r3, r3, #1
 800d584:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	330d      	adds	r3, #13
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d594:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	330e      	adds	r3, #14
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5a4:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	7bda      	ldrb	r2, [r3, #15]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 800d5b2:	68bb      	ldr	r3, [r7, #8]
 800d5b4:	7c1a      	ldrb	r2, [r3, #16]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	7c5a      	ldrb	r2, [r3, #17]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	7c9a      	ldrb	r2, [r3, #18]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	7cda      	ldrb	r2, [r3, #19]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	7d1a      	ldrb	r2, [r3, #20]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	7d5a      	ldrb	r2, [r3, #21]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	7d9a      	ldrb	r2, [r3, #22]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	7dda      	ldrb	r2, [r3, #23]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	7e1a      	ldrb	r2, [r3, #24]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	7e5a      	ldrb	r2, [r3, #25]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	7e9a      	ldrb	r2, [r3, #26]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	7eda      	ldrb	r2, [r3, #27]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	7f1a      	ldrb	r2, [r3, #28]
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	7f5a      	ldrb	r2, [r3, #29]
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	7f9a      	ldrb	r2, [r3, #30]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	7fda      	ldrb	r2, [r3, #31]
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f893 2020 	ldrb.w	r2, [r3, #32]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 800d700:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3718      	adds	r7, #24
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b090      	sub	sp, #64	; 0x40
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d716:	2300      	movs	r3, #0
 800d718:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800d71c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10a      	bne.n	800d73a <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 800d724:	f107 020c 	add.w	r2, r7, #12
 800d728:	2331      	movs	r3, #49	; 0x31
 800d72a:	f240 110f 	movw	r1, #271	; 0x10f
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f8f4 	bl	800d91c <VL53L1_ReadMulti>
 800d734:	4603      	mov	r3, r0
 800d736:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 800d73a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d109      	bne.n	800d756 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 800d742:	f107 030c 	add.w	r3, r7, #12
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	4619      	mov	r1, r3
 800d74a:	2031      	movs	r0, #49	; 0x31
 800d74c:	f7ff feb8 	bl	800d4c0 <VL53L1_i2c_decode_nvm_copy_data>
 800d750:	4603      	mov	r3, r0
 800d752:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 800d756:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3740      	adds	r7, #64	; 0x40
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b086      	sub	sp, #24
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
 800d76a:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800d76c:	2300      	movs	r3, #0
 800d76e:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 800d774:	2300      	movs	r3, #0
 800d776:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 800d778:	2300      	movs	r3, #0
 800d77a:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 800d77c:	2300      	movs	r3, #0
 800d77e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
	gpio__mux_active_high_hv =
 800d786:	f003 0310 	and.w	r3, r3, #16
 800d78a:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d102      	bne.n	800d798 <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 800d792:	2301      	movs	r3, #1
 800d794:	75fb      	strb	r3, [r7, #23]
 800d796:	e001      	b.n	800d79c <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 800d798:	2300      	movs	r3, #0
 800d79a:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 800d79c:	f107 030e 	add.w	r3, r7, #14
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	2131      	movs	r1, #49	; 0x31
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f000 f919 	bl	800d9dc <VL53L1_RdByte>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 800d7ae:	7bbb      	ldrb	r3, [r7, #14]
 800d7b0:	f003 0201 	and.w	r2, r3, #1
 800d7b4:	7dfb      	ldrb	r3, [r7, #23]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d103      	bne.n	800d7c2 <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	2201      	movs	r2, #1
 800d7be:	701a      	strb	r2, [r3, #0]
 800d7c0:	e002      	b.n	800d7c8 <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 800d7c8:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3718      	adds	r7, #24
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b086      	sub	sp, #24
 800d7d8:	af02      	add	r7, sp, #8
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 800d7e2:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f98c 	bl	800db04 <VL53L1_WaitUs>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 800d7f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10b      	bne.n	800d810 <VL53L1_poll_for_boot_completion+0x3c>
		status =
			VL53L1_WaitValueMaskEx(
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	9301      	str	r3, [sp, #4]
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	2301      	movs	r3, #1
 800d802:	22e5      	movs	r2, #229	; 0xe5
 800d804:	6839      	ldr	r1, [r7, #0]
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 f992 	bl	800db30 <VL53L1_WaitValueMaskEx>
 800d80c:	4603      	mov	r3, r0
 800d80e:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 800d810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d103      	bne.n	800d820 <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 800d818:	2103      	movs	r1, #3
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7fe f85b 	bl	800b8d6 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 800d820:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d824:	4618      	mov	r0, r3
 800d826:	3710      	adds	r7, #16
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <_I2CWrite>:
#   define VL53L1_PutI2cBus(...) (void)0
#endif

uint8_t _I2CBuffer[256];

int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b088      	sub	sp, #32
 800d830:	af02      	add	r7, sp, #8
 800d832:	60f8      	str	r0, [r7, #12]
 800d834:	60b9      	str	r1, [r7, #8]
 800d836:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	330a      	adds	r3, #10
 800d83c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800d84a:	b299      	uxth	r1, r3
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	b29a      	uxth	r2, r3
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	9300      	str	r3, [sp, #0]
 800d854:	4613      	mov	r3, r2
 800d856:	68ba      	ldr	r2, [r7, #8]
 800d858:	f7f6 fcaa 	bl	80041b0 <HAL_I2C_Master_Transmit>
 800d85c:	4603      	mov	r3, r0
 800d85e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d860:	693b      	ldr	r3, [r7, #16]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3718      	adds	r7, #24
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}

0800d86a <_I2CRead>:

int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b088      	sub	sp, #32
 800d86e:	af02      	add	r7, sp, #8
 800d870:	60f8      	str	r0, [r7, #12]
 800d872:	60b9      	str	r1, [r7, #8]
 800d874:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	330a      	adds	r3, #10
 800d87a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 800d888:	f043 0301 	orr.w	r3, r3, #1
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	b299      	uxth	r1, r3
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	b29a      	uxth	r2, r3
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	4613      	mov	r3, r2
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	f7f6 fd86 	bl	80043ac <HAL_I2C_Master_Receive>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800d8a4:	693b      	ldr	r3, [r7, #16]
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3718      	adds	r7, #24
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
	...

0800d8b0 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b086      	sub	sp, #24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	607a      	str	r2, [r7, #4]
 800d8ba:	603b      	str	r3, [r7, #0]
 800d8bc:	460b      	mov	r3, r1
 800d8be:	817b      	strh	r3, [r7, #10]
    int status_int;
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	2bff      	cmp	r3, #255	; 0xff
 800d8c8:	d902      	bls.n	800d8d0 <VL53L1_WriteMulti+0x20>
        return VL53L1_ERROR_INVALID_PARAMS;
 800d8ca:	f06f 0303 	mvn.w	r3, #3
 800d8ce:	e01d      	b.n	800d90c <VL53L1_WriteMulti+0x5c>
    }
    _I2CBuffer[0] = index>>8;
 800d8d0:	897b      	ldrh	r3, [r7, #10]
 800d8d2:	0a1b      	lsrs	r3, r3, #8
 800d8d4:	b29b      	uxth	r3, r3
 800d8d6:	b2da      	uxtb	r2, r3
 800d8d8:	4b0e      	ldr	r3, [pc, #56]	; (800d914 <VL53L1_WriteMulti+0x64>)
 800d8da:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800d8dc:	897b      	ldrh	r3, [r7, #10]
 800d8de:	b2da      	uxtb	r2, r3
 800d8e0:	4b0c      	ldr	r3, [pc, #48]	; (800d914 <VL53L1_WriteMulti+0x64>)
 800d8e2:	705a      	strb	r2, [r3, #1]
    memcpy(&_I2CBuffer[2], pdata, count);
 800d8e4:	683a      	ldr	r2, [r7, #0]
 800d8e6:	6879      	ldr	r1, [r7, #4]
 800d8e8:	480b      	ldr	r0, [pc, #44]	; (800d918 <VL53L1_WriteMulti+0x68>)
 800d8ea:	f000 f9ef 	bl	800dccc <memcpy>
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	3302      	adds	r3, #2
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	4907      	ldr	r1, [pc, #28]	; (800d914 <VL53L1_WriteMulti+0x64>)
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f7ff ff98 	bl	800d82c <_I2CWrite>
 800d8fc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d001      	beq.n	800d908 <VL53L1_WriteMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d904:	23f3      	movs	r3, #243	; 0xf3
 800d906:	75fb      	strb	r3, [r7, #23]
    }
    VL53L1_PutI2cBus();
    return Status;
 800d908:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	3718      	adds	r7, #24
 800d910:	46bd      	mov	sp, r7
 800d912:	bd80      	pop	{r7, pc}
 800d914:	20000bb4 	.word	0x20000bb4
 800d918:	20000bb6 	.word	0x20000bb6

0800d91c <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b086      	sub	sp, #24
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	607a      	str	r2, [r7, #4]
 800d926:	603b      	str	r3, [r7, #0]
 800d928:	460b      	mov	r3, r1
 800d92a:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d92c:	2300      	movs	r3, #0
 800d92e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800d930:	897b      	ldrh	r3, [r7, #10]
 800d932:	0a1b      	lsrs	r3, r3, #8
 800d934:	b29b      	uxth	r3, r3
 800d936:	b2da      	uxtb	r2, r3
 800d938:	4b12      	ldr	r3, [pc, #72]	; (800d984 <VL53L1_ReadMulti+0x68>)
 800d93a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800d93c:	897b      	ldrh	r3, [r7, #10]
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	4b10      	ldr	r3, [pc, #64]	; (800d984 <VL53L1_ReadMulti+0x68>)
 800d942:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800d944:	2202      	movs	r2, #2
 800d946:	490f      	ldr	r1, [pc, #60]	; (800d984 <VL53L1_ReadMulti+0x68>)
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f7ff ff6f 	bl	800d82c <_I2CWrite>
 800d94e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d002      	beq.n	800d95c <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d956:	23f3      	movs	r3, #243	; 0xf3
 800d958:	75fb      	strb	r3, [r7, #23]
        goto done;
 800d95a:	e00c      	b.n	800d976 <VL53L1_ReadMulti+0x5a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800d95c:	683a      	ldr	r2, [r7, #0]
 800d95e:	6879      	ldr	r1, [r7, #4]
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	f7ff ff82 	bl	800d86a <_I2CRead>
 800d966:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800d968:	693b      	ldr	r3, [r7, #16]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d002      	beq.n	800d974 <VL53L1_ReadMulti+0x58>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d96e:	23f3      	movs	r3, #243	; 0xf3
 800d970:	75fb      	strb	r3, [r7, #23]
 800d972:	e000      	b.n	800d976 <VL53L1_ReadMulti+0x5a>
    }
done:
 800d974:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800d976:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3718      	adds	r7, #24
 800d97e:	46bd      	mov	sp, r7
 800d980:	bd80      	pop	{r7, pc}
 800d982:	bf00      	nop
 800d984:	20000bb4 	.word	0x20000bb4

0800d988 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 800d988:	b580      	push	{r7, lr}
 800d98a:	b084      	sub	sp, #16
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
 800d990:	460b      	mov	r3, r1
 800d992:	807b      	strh	r3, [r7, #2]
 800d994:	4613      	mov	r3, r2
 800d996:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d998:	2300      	movs	r3, #0
 800d99a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800d99c:	887b      	ldrh	r3, [r7, #2]
 800d99e:	0a1b      	lsrs	r3, r3, #8
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	4b0c      	ldr	r3, [pc, #48]	; (800d9d8 <VL53L1_WrByte+0x50>)
 800d9a6:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 800d9a8:	887b      	ldrh	r3, [r7, #2]
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	4b0a      	ldr	r3, [pc, #40]	; (800d9d8 <VL53L1_WrByte+0x50>)
 800d9ae:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 800d9b0:	4a09      	ldr	r2, [pc, #36]	; (800d9d8 <VL53L1_WrByte+0x50>)
 800d9b2:	787b      	ldrb	r3, [r7, #1]
 800d9b4:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800d9b6:	2203      	movs	r2, #3
 800d9b8:	4907      	ldr	r1, [pc, #28]	; (800d9d8 <VL53L1_WrByte+0x50>)
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f7ff ff36 	bl	800d82c <_I2CWrite>
 800d9c0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d9c8:	23f3      	movs	r3, #243	; 0xf3
 800d9ca:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 800d9cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3710      	adds	r7, #16
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	20000bb4 	.word	0x20000bb4

0800d9dc <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b086      	sub	sp, #24
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	60f8      	str	r0, [r7, #12]
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	607a      	str	r2, [r7, #4]
 800d9e8:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 800d9ee:	897b      	ldrh	r3, [r7, #10]
 800d9f0:	0a1b      	lsrs	r3, r3, #8
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	b2da      	uxtb	r2, r3
 800d9f6:	4b12      	ldr	r3, [pc, #72]	; (800da40 <VL53L1_RdByte+0x64>)
 800d9f8:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800d9fa:	897b      	ldrh	r3, [r7, #10]
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	4b10      	ldr	r3, [pc, #64]	; (800da40 <VL53L1_RdByte+0x64>)
 800da00:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800da02:	2202      	movs	r2, #2
 800da04:	490e      	ldr	r1, [pc, #56]	; (800da40 <VL53L1_RdByte+0x64>)
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	f7ff ff10 	bl	800d82c <_I2CWrite>
 800da0c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d002      	beq.n	800da1a <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800da14:	23f3      	movs	r3, #243	; 0xf3
 800da16:	75fb      	strb	r3, [r7, #23]
        goto done;
 800da18:	e00c      	b.n	800da34 <VL53L1_RdByte+0x58>
    }
    status_int = _I2CRead(Dev, data, 1);
 800da1a:	2201      	movs	r2, #1
 800da1c:	6879      	ldr	r1, [r7, #4]
 800da1e:	68f8      	ldr	r0, [r7, #12]
 800da20:	f7ff ff23 	bl	800d86a <_I2CRead>
 800da24:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <VL53L1_RdByte+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800da2c:	23f3      	movs	r3, #243	; 0xf3
 800da2e:	75fb      	strb	r3, [r7, #23]
 800da30:	e000      	b.n	800da34 <VL53L1_RdByte+0x58>
    }
done:
 800da32:	bf00      	nop
    VL53L1_PutI2cBus();
    return Status;
 800da34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3718      	adds	r7, #24
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	20000bb4 	.word	0x20000bb4

0800da44 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	460b      	mov	r3, r1
 800da4e:	607a      	str	r2, [r7, #4]
 800da50:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 800da52:	2300      	movs	r3, #0
 800da54:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 800da56:	897b      	ldrh	r3, [r7, #10]
 800da58:	0a1b      	lsrs	r3, r3, #8
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	b2da      	uxtb	r2, r3
 800da5e:	4b18      	ldr	r3, [pc, #96]	; (800dac0 <VL53L1_RdWord+0x7c>)
 800da60:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 800da62:	897b      	ldrh	r3, [r7, #10]
 800da64:	b2da      	uxtb	r2, r3
 800da66:	4b16      	ldr	r3, [pc, #88]	; (800dac0 <VL53L1_RdWord+0x7c>)
 800da68:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800da6a:	2202      	movs	r2, #2
 800da6c:	4914      	ldr	r1, [pc, #80]	; (800dac0 <VL53L1_RdWord+0x7c>)
 800da6e:	68f8      	ldr	r0, [r7, #12]
 800da70:	f7ff fedc 	bl	800d82c <_I2CWrite>
 800da74:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800da7c:	23f3      	movs	r3, #243	; 0xf3
 800da7e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800da80:	e017      	b.n	800dab2 <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800da82:	2202      	movs	r2, #2
 800da84:	490e      	ldr	r1, [pc, #56]	; (800dac0 <VL53L1_RdWord+0x7c>)
 800da86:	68f8      	ldr	r0, [r7, #12]
 800da88:	f7ff feef 	bl	800d86a <_I2CRead>
 800da8c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d002      	beq.n	800da9a <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 800da94:	23f3      	movs	r3, #243	; 0xf3
 800da96:	75fb      	strb	r3, [r7, #23]
        goto done;
 800da98:	e00b      	b.n	800dab2 <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800da9a:	4b09      	ldr	r3, [pc, #36]	; (800dac0 <VL53L1_RdWord+0x7c>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	021b      	lsls	r3, r3, #8
 800daa2:	b29a      	uxth	r2, r3
 800daa4:	4b06      	ldr	r3, [pc, #24]	; (800dac0 <VL53L1_RdWord+0x7c>)
 800daa6:	785b      	ldrb	r3, [r3, #1]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	4413      	add	r3, r2
 800daac:	b29a      	uxth	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 800dab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3718      	adds	r7, #24
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	20000bb4 	.word	0x20000bb4

0800dac4 <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b085      	sub	sp, #20
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 800dacc:	2300      	movs	r3, #0
 800dace:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 800dad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3714      	adds	r7, #20
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr

0800dae6 <VL53L1_WaitMs>:
	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}


VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b082      	sub	sp, #8
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
 800daee:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	4618      	mov	r0, r3
 800daf4:	f7f5 fcc2 	bl	800347c <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800daf8:	2300      	movs	r3, #0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
	...

0800db04 <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800db04:	b580      	push	{r7, lr}
 800db06:	b082      	sub	sp, #8
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
 800db0c:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	4a06      	ldr	r2, [pc, #24]	; (800db2c <VL53L1_WaitUs+0x28>)
 800db12:	fb82 1203 	smull	r1, r2, r2, r3
 800db16:	1192      	asrs	r2, r2, #6
 800db18:	17db      	asrs	r3, r3, #31
 800db1a:	1ad3      	subs	r3, r2, r3
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7f5 fcad 	bl	800347c <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	10624dd3 	.word	0x10624dd3

0800db30 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 800db30:	b590      	push	{r4, r7, lr}
 800db32:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800db36:	af00      	add	r7, sp, #0
 800db38:	f507 740a 	add.w	r4, r7, #552	; 0x228
 800db3c:	f5a4 7407 	sub.w	r4, r4, #540	; 0x21c
 800db40:	6020      	str	r0, [r4, #0]
 800db42:	f507 700a 	add.w	r0, r7, #552	; 0x228
 800db46:	f5a0 7008 	sub.w	r0, r0, #544	; 0x220
 800db4a:	6001      	str	r1, [r0, #0]
 800db4c:	4619      	mov	r1, r3
 800db4e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800db52:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800db56:	801a      	strh	r2, [r3, #0]
 800db58:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800db5c:	f2a3 2323 	subw	r3, r3, #547	; 0x223
 800db60:	460a      	mov	r2, r1
 800db62:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800db64:	2300      	movs	r3, #0
 800db66:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 800db70:	2300      	movs	r3, #0
 800db72:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800db76:	2300      	movs	r3, #0
 800db78:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 800db7c:	2300      	movs	r3, #0
 800db7e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800db88:	f107 0310 	add.w	r3, r7, #16
 800db8c:	f240 12ff 	movw	r2, #511	; 0x1ff
 800db90:	493b      	ldr	r1, [pc, #236]	; (800dc80 <VL53L1_WaitValueMaskEx+0x150>)
 800db92:	4618      	mov	r0, r3
 800db94:	f000 fd3a 	bl	800e60c <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 800db98:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7ff ff91 	bl	800dac4 <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 800dba2:	e049      	b.n	800dc38 <VL53L1_WaitValueMaskEx+0x108>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 800dba4:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d110      	bne.n	800dbce <VL53L1_WaitValueMaskEx+0x9e>
			status = VL53L1_RdByte(
 800dbac:	f207 2213 	addw	r2, r7, #531	; 0x213
 800dbb0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800dbb4:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 800dbb8:	8819      	ldrh	r1, [r3, #0]
 800dbba:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800dbbe:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800dbc2:	6818      	ldr	r0, [r3, #0]
 800dbc4:	f7ff ff0a 	bl	800d9dc <VL53L1_RdByte>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 800dbce:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 800dbd2:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 800dbd6:	4013      	ands	r3, r2
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	f507 720a 	add.w	r2, r7, #552	; 0x228
 800dbde:	f2a2 2223 	subw	r2, r2, #547	; 0x223
 800dbe2:	7812      	ldrb	r2, [r2, #0]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d102      	bne.n	800dbee <VL53L1_WaitValueMaskEx+0xbe>
			found = 1;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 800dbee:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d114      	bne.n	800dc20 <VL53L1_WaitValueMaskEx+0xf0>
 800dbf6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d110      	bne.n	800dc20 <VL53L1_WaitValueMaskEx+0xf0>
			found == 0 &&
 800dbfe:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d00c      	beq.n	800dc20 <VL53L1_WaitValueMaskEx+0xf0>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800dc06:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800dc0a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800dc0e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800dc12:	4611      	mov	r1, r2
 800dc14:	6818      	ldr	r0, [r3, #0]
 800dc16:	f7ff ff66 	bl	800dae6 <VL53L1_WaitMs>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 800dc20:	f507 7305 	add.w	r3, r7, #532	; 0x214
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7ff ff4d 	bl	800dac4 <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800dc2a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800dc2e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800dc32:	1ad3      	subs	r3, r2, r3
 800dc34:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 800dc38:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10c      	bne.n	800dc5a <VL53L1_WaitValueMaskEx+0x12a>
 800dc40:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800dc44:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800dc48:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d203      	bcs.n	800dc5a <VL53L1_WaitValueMaskEx+0x12a>
		   (polling_time_ms < timeout_ms) &&
 800dc52:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d0a4      	beq.n	800dba4 <VL53L1_WaitValueMaskEx+0x74>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 800dc5a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d106      	bne.n	800dc70 <VL53L1_WaitValueMaskEx+0x140>
 800dc62:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d102      	bne.n	800dc70 <VL53L1_WaitValueMaskEx+0x140>
		status = VL53L1_ERROR_TIME_OUT;
 800dc6a:	23f9      	movs	r3, #249	; 0xf9
 800dc6c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800dc70:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 800dc74:	4618      	mov	r0, r3
 800dc76:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd90      	pop	{r4, r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	0801208c 	.word	0x0801208c

0800dc84 <__libc_init_array>:
 800dc84:	b570      	push	{r4, r5, r6, lr}
 800dc86:	4d0d      	ldr	r5, [pc, #52]	; (800dcbc <__libc_init_array+0x38>)
 800dc88:	4c0d      	ldr	r4, [pc, #52]	; (800dcc0 <__libc_init_array+0x3c>)
 800dc8a:	1b64      	subs	r4, r4, r5
 800dc8c:	10a4      	asrs	r4, r4, #2
 800dc8e:	2600      	movs	r6, #0
 800dc90:	42a6      	cmp	r6, r4
 800dc92:	d109      	bne.n	800dca8 <__libc_init_array+0x24>
 800dc94:	4d0b      	ldr	r5, [pc, #44]	; (800dcc4 <__libc_init_array+0x40>)
 800dc96:	4c0c      	ldr	r4, [pc, #48]	; (800dcc8 <__libc_init_array+0x44>)
 800dc98:	f004 f9b4 	bl	8012004 <_init>
 800dc9c:	1b64      	subs	r4, r4, r5
 800dc9e:	10a4      	asrs	r4, r4, #2
 800dca0:	2600      	movs	r6, #0
 800dca2:	42a6      	cmp	r6, r4
 800dca4:	d105      	bne.n	800dcb2 <__libc_init_array+0x2e>
 800dca6:	bd70      	pop	{r4, r5, r6, pc}
 800dca8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcac:	4798      	blx	r3
 800dcae:	3601      	adds	r6, #1
 800dcb0:	e7ee      	b.n	800dc90 <__libc_init_array+0xc>
 800dcb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcb6:	4798      	blx	r3
 800dcb8:	3601      	adds	r6, #1
 800dcba:	e7f2      	b.n	800dca2 <__libc_init_array+0x1e>
 800dcbc:	080126a8 	.word	0x080126a8
 800dcc0:	080126a8 	.word	0x080126a8
 800dcc4:	080126a8 	.word	0x080126a8
 800dcc8:	080126ac 	.word	0x080126ac

0800dccc <memcpy>:
 800dccc:	440a      	add	r2, r1
 800dcce:	4291      	cmp	r1, r2
 800dcd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcd4:	d100      	bne.n	800dcd8 <memcpy+0xc>
 800dcd6:	4770      	bx	lr
 800dcd8:	b510      	push	{r4, lr}
 800dcda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dce2:	4291      	cmp	r1, r2
 800dce4:	d1f9      	bne.n	800dcda <memcpy+0xe>
 800dce6:	bd10      	pop	{r4, pc}

0800dce8 <memset>:
 800dce8:	4402      	add	r2, r0
 800dcea:	4603      	mov	r3, r0
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d100      	bne.n	800dcf2 <memset+0xa>
 800dcf0:	4770      	bx	lr
 800dcf2:	f803 1b01 	strb.w	r1, [r3], #1
 800dcf6:	e7f9      	b.n	800dcec <memset+0x4>

0800dcf8 <__cvt>:
 800dcf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcfc:	ec55 4b10 	vmov	r4, r5, d0
 800dd00:	2d00      	cmp	r5, #0
 800dd02:	460e      	mov	r6, r1
 800dd04:	4619      	mov	r1, r3
 800dd06:	462b      	mov	r3, r5
 800dd08:	bfbb      	ittet	lt
 800dd0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800dd0e:	461d      	movlt	r5, r3
 800dd10:	2300      	movge	r3, #0
 800dd12:	232d      	movlt	r3, #45	; 0x2d
 800dd14:	700b      	strb	r3, [r1, #0]
 800dd16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800dd1c:	4691      	mov	r9, r2
 800dd1e:	f023 0820 	bic.w	r8, r3, #32
 800dd22:	bfbc      	itt	lt
 800dd24:	4622      	movlt	r2, r4
 800dd26:	4614      	movlt	r4, r2
 800dd28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd2c:	d005      	beq.n	800dd3a <__cvt+0x42>
 800dd2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dd32:	d100      	bne.n	800dd36 <__cvt+0x3e>
 800dd34:	3601      	adds	r6, #1
 800dd36:	2102      	movs	r1, #2
 800dd38:	e000      	b.n	800dd3c <__cvt+0x44>
 800dd3a:	2103      	movs	r1, #3
 800dd3c:	ab03      	add	r3, sp, #12
 800dd3e:	9301      	str	r3, [sp, #4]
 800dd40:	ab02      	add	r3, sp, #8
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	ec45 4b10 	vmov	d0, r4, r5
 800dd48:	4653      	mov	r3, sl
 800dd4a:	4632      	mov	r2, r6
 800dd4c:	f000 fcfc 	bl	800e748 <_dtoa_r>
 800dd50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dd54:	4607      	mov	r7, r0
 800dd56:	d102      	bne.n	800dd5e <__cvt+0x66>
 800dd58:	f019 0f01 	tst.w	r9, #1
 800dd5c:	d022      	beq.n	800dda4 <__cvt+0xac>
 800dd5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dd62:	eb07 0906 	add.w	r9, r7, r6
 800dd66:	d110      	bne.n	800dd8a <__cvt+0x92>
 800dd68:	783b      	ldrb	r3, [r7, #0]
 800dd6a:	2b30      	cmp	r3, #48	; 0x30
 800dd6c:	d10a      	bne.n	800dd84 <__cvt+0x8c>
 800dd6e:	2200      	movs	r2, #0
 800dd70:	2300      	movs	r3, #0
 800dd72:	4620      	mov	r0, r4
 800dd74:	4629      	mov	r1, r5
 800dd76:	f7f2 fec7 	bl	8000b08 <__aeabi_dcmpeq>
 800dd7a:	b918      	cbnz	r0, 800dd84 <__cvt+0x8c>
 800dd7c:	f1c6 0601 	rsb	r6, r6, #1
 800dd80:	f8ca 6000 	str.w	r6, [sl]
 800dd84:	f8da 3000 	ldr.w	r3, [sl]
 800dd88:	4499      	add	r9, r3
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	4620      	mov	r0, r4
 800dd90:	4629      	mov	r1, r5
 800dd92:	f7f2 feb9 	bl	8000b08 <__aeabi_dcmpeq>
 800dd96:	b108      	cbz	r0, 800dd9c <__cvt+0xa4>
 800dd98:	f8cd 900c 	str.w	r9, [sp, #12]
 800dd9c:	2230      	movs	r2, #48	; 0x30
 800dd9e:	9b03      	ldr	r3, [sp, #12]
 800dda0:	454b      	cmp	r3, r9
 800dda2:	d307      	bcc.n	800ddb4 <__cvt+0xbc>
 800dda4:	9b03      	ldr	r3, [sp, #12]
 800dda6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dda8:	1bdb      	subs	r3, r3, r7
 800ddaa:	4638      	mov	r0, r7
 800ddac:	6013      	str	r3, [r2, #0]
 800ddae:	b004      	add	sp, #16
 800ddb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddb4:	1c59      	adds	r1, r3, #1
 800ddb6:	9103      	str	r1, [sp, #12]
 800ddb8:	701a      	strb	r2, [r3, #0]
 800ddba:	e7f0      	b.n	800dd9e <__cvt+0xa6>

0800ddbc <__exponent>:
 800ddbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	bfb8      	it	lt
 800ddc4:	4249      	neglt	r1, r1
 800ddc6:	f803 2b02 	strb.w	r2, [r3], #2
 800ddca:	bfb4      	ite	lt
 800ddcc:	222d      	movlt	r2, #45	; 0x2d
 800ddce:	222b      	movge	r2, #43	; 0x2b
 800ddd0:	2909      	cmp	r1, #9
 800ddd2:	7042      	strb	r2, [r0, #1]
 800ddd4:	dd2a      	ble.n	800de2c <__exponent+0x70>
 800ddd6:	f10d 0407 	add.w	r4, sp, #7
 800ddda:	46a4      	mov	ip, r4
 800dddc:	270a      	movs	r7, #10
 800ddde:	46a6      	mov	lr, r4
 800dde0:	460a      	mov	r2, r1
 800dde2:	fb91 f6f7 	sdiv	r6, r1, r7
 800dde6:	fb07 1516 	mls	r5, r7, r6, r1
 800ddea:	3530      	adds	r5, #48	; 0x30
 800ddec:	2a63      	cmp	r2, #99	; 0x63
 800ddee:	f104 34ff 	add.w	r4, r4, #4294967295
 800ddf2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ddf6:	4631      	mov	r1, r6
 800ddf8:	dcf1      	bgt.n	800ddde <__exponent+0x22>
 800ddfa:	3130      	adds	r1, #48	; 0x30
 800ddfc:	f1ae 0502 	sub.w	r5, lr, #2
 800de00:	f804 1c01 	strb.w	r1, [r4, #-1]
 800de04:	1c44      	adds	r4, r0, #1
 800de06:	4629      	mov	r1, r5
 800de08:	4561      	cmp	r1, ip
 800de0a:	d30a      	bcc.n	800de22 <__exponent+0x66>
 800de0c:	f10d 0209 	add.w	r2, sp, #9
 800de10:	eba2 020e 	sub.w	r2, r2, lr
 800de14:	4565      	cmp	r5, ip
 800de16:	bf88      	it	hi
 800de18:	2200      	movhi	r2, #0
 800de1a:	4413      	add	r3, r2
 800de1c:	1a18      	subs	r0, r3, r0
 800de1e:	b003      	add	sp, #12
 800de20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de22:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de26:	f804 2f01 	strb.w	r2, [r4, #1]!
 800de2a:	e7ed      	b.n	800de08 <__exponent+0x4c>
 800de2c:	2330      	movs	r3, #48	; 0x30
 800de2e:	3130      	adds	r1, #48	; 0x30
 800de30:	7083      	strb	r3, [r0, #2]
 800de32:	70c1      	strb	r1, [r0, #3]
 800de34:	1d03      	adds	r3, r0, #4
 800de36:	e7f1      	b.n	800de1c <__exponent+0x60>

0800de38 <_printf_float>:
 800de38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de3c:	ed2d 8b02 	vpush	{d8}
 800de40:	b08d      	sub	sp, #52	; 0x34
 800de42:	460c      	mov	r4, r1
 800de44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800de48:	4616      	mov	r6, r2
 800de4a:	461f      	mov	r7, r3
 800de4c:	4605      	mov	r5, r0
 800de4e:	f001 fa69 	bl	800f324 <_localeconv_r>
 800de52:	f8d0 a000 	ldr.w	sl, [r0]
 800de56:	4650      	mov	r0, sl
 800de58:	f7f2 f9da 	bl	8000210 <strlen>
 800de5c:	2300      	movs	r3, #0
 800de5e:	930a      	str	r3, [sp, #40]	; 0x28
 800de60:	6823      	ldr	r3, [r4, #0]
 800de62:	9305      	str	r3, [sp, #20]
 800de64:	f8d8 3000 	ldr.w	r3, [r8]
 800de68:	f894 b018 	ldrb.w	fp, [r4, #24]
 800de6c:	3307      	adds	r3, #7
 800de6e:	f023 0307 	bic.w	r3, r3, #7
 800de72:	f103 0208 	add.w	r2, r3, #8
 800de76:	f8c8 2000 	str.w	r2, [r8]
 800de7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800de82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800de86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800de8a:	9307      	str	r3, [sp, #28]
 800de8c:	f8cd 8018 	str.w	r8, [sp, #24]
 800de90:	ee08 0a10 	vmov	s16, r0
 800de94:	4b9f      	ldr	r3, [pc, #636]	; (800e114 <_printf_float+0x2dc>)
 800de96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de9a:	f04f 32ff 	mov.w	r2, #4294967295
 800de9e:	f7f2 fe65 	bl	8000b6c <__aeabi_dcmpun>
 800dea2:	bb88      	cbnz	r0, 800df08 <_printf_float+0xd0>
 800dea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dea8:	4b9a      	ldr	r3, [pc, #616]	; (800e114 <_printf_float+0x2dc>)
 800deaa:	f04f 32ff 	mov.w	r2, #4294967295
 800deae:	f7f2 fe3f 	bl	8000b30 <__aeabi_dcmple>
 800deb2:	bb48      	cbnz	r0, 800df08 <_printf_float+0xd0>
 800deb4:	2200      	movs	r2, #0
 800deb6:	2300      	movs	r3, #0
 800deb8:	4640      	mov	r0, r8
 800deba:	4649      	mov	r1, r9
 800debc:	f7f2 fe2e 	bl	8000b1c <__aeabi_dcmplt>
 800dec0:	b110      	cbz	r0, 800dec8 <_printf_float+0x90>
 800dec2:	232d      	movs	r3, #45	; 0x2d
 800dec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dec8:	4b93      	ldr	r3, [pc, #588]	; (800e118 <_printf_float+0x2e0>)
 800deca:	4894      	ldr	r0, [pc, #592]	; (800e11c <_printf_float+0x2e4>)
 800decc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ded0:	bf94      	ite	ls
 800ded2:	4698      	movls	r8, r3
 800ded4:	4680      	movhi	r8, r0
 800ded6:	2303      	movs	r3, #3
 800ded8:	6123      	str	r3, [r4, #16]
 800deda:	9b05      	ldr	r3, [sp, #20]
 800dedc:	f023 0204 	bic.w	r2, r3, #4
 800dee0:	6022      	str	r2, [r4, #0]
 800dee2:	f04f 0900 	mov.w	r9, #0
 800dee6:	9700      	str	r7, [sp, #0]
 800dee8:	4633      	mov	r3, r6
 800deea:	aa0b      	add	r2, sp, #44	; 0x2c
 800deec:	4621      	mov	r1, r4
 800deee:	4628      	mov	r0, r5
 800def0:	f000 f9d8 	bl	800e2a4 <_printf_common>
 800def4:	3001      	adds	r0, #1
 800def6:	f040 8090 	bne.w	800e01a <_printf_float+0x1e2>
 800defa:	f04f 30ff 	mov.w	r0, #4294967295
 800defe:	b00d      	add	sp, #52	; 0x34
 800df00:	ecbd 8b02 	vpop	{d8}
 800df04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df08:	4642      	mov	r2, r8
 800df0a:	464b      	mov	r3, r9
 800df0c:	4640      	mov	r0, r8
 800df0e:	4649      	mov	r1, r9
 800df10:	f7f2 fe2c 	bl	8000b6c <__aeabi_dcmpun>
 800df14:	b140      	cbz	r0, 800df28 <_printf_float+0xf0>
 800df16:	464b      	mov	r3, r9
 800df18:	2b00      	cmp	r3, #0
 800df1a:	bfbc      	itt	lt
 800df1c:	232d      	movlt	r3, #45	; 0x2d
 800df1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800df22:	487f      	ldr	r0, [pc, #508]	; (800e120 <_printf_float+0x2e8>)
 800df24:	4b7f      	ldr	r3, [pc, #508]	; (800e124 <_printf_float+0x2ec>)
 800df26:	e7d1      	b.n	800decc <_printf_float+0x94>
 800df28:	6863      	ldr	r3, [r4, #4]
 800df2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800df2e:	9206      	str	r2, [sp, #24]
 800df30:	1c5a      	adds	r2, r3, #1
 800df32:	d13f      	bne.n	800dfb4 <_printf_float+0x17c>
 800df34:	2306      	movs	r3, #6
 800df36:	6063      	str	r3, [r4, #4]
 800df38:	9b05      	ldr	r3, [sp, #20]
 800df3a:	6861      	ldr	r1, [r4, #4]
 800df3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800df40:	2300      	movs	r3, #0
 800df42:	9303      	str	r3, [sp, #12]
 800df44:	ab0a      	add	r3, sp, #40	; 0x28
 800df46:	e9cd b301 	strd	fp, r3, [sp, #4]
 800df4a:	ab09      	add	r3, sp, #36	; 0x24
 800df4c:	ec49 8b10 	vmov	d0, r8, r9
 800df50:	9300      	str	r3, [sp, #0]
 800df52:	6022      	str	r2, [r4, #0]
 800df54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800df58:	4628      	mov	r0, r5
 800df5a:	f7ff fecd 	bl	800dcf8 <__cvt>
 800df5e:	9b06      	ldr	r3, [sp, #24]
 800df60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df62:	2b47      	cmp	r3, #71	; 0x47
 800df64:	4680      	mov	r8, r0
 800df66:	d108      	bne.n	800df7a <_printf_float+0x142>
 800df68:	1cc8      	adds	r0, r1, #3
 800df6a:	db02      	blt.n	800df72 <_printf_float+0x13a>
 800df6c:	6863      	ldr	r3, [r4, #4]
 800df6e:	4299      	cmp	r1, r3
 800df70:	dd41      	ble.n	800dff6 <_printf_float+0x1be>
 800df72:	f1ab 0b02 	sub.w	fp, fp, #2
 800df76:	fa5f fb8b 	uxtb.w	fp, fp
 800df7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800df7e:	d820      	bhi.n	800dfc2 <_printf_float+0x18a>
 800df80:	3901      	subs	r1, #1
 800df82:	465a      	mov	r2, fp
 800df84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800df88:	9109      	str	r1, [sp, #36]	; 0x24
 800df8a:	f7ff ff17 	bl	800ddbc <__exponent>
 800df8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df90:	1813      	adds	r3, r2, r0
 800df92:	2a01      	cmp	r2, #1
 800df94:	4681      	mov	r9, r0
 800df96:	6123      	str	r3, [r4, #16]
 800df98:	dc02      	bgt.n	800dfa0 <_printf_float+0x168>
 800df9a:	6822      	ldr	r2, [r4, #0]
 800df9c:	07d2      	lsls	r2, r2, #31
 800df9e:	d501      	bpl.n	800dfa4 <_printf_float+0x16c>
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	6123      	str	r3, [r4, #16]
 800dfa4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d09c      	beq.n	800dee6 <_printf_float+0xae>
 800dfac:	232d      	movs	r3, #45	; 0x2d
 800dfae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dfb2:	e798      	b.n	800dee6 <_printf_float+0xae>
 800dfb4:	9a06      	ldr	r2, [sp, #24]
 800dfb6:	2a47      	cmp	r2, #71	; 0x47
 800dfb8:	d1be      	bne.n	800df38 <_printf_float+0x100>
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1bc      	bne.n	800df38 <_printf_float+0x100>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e7b9      	b.n	800df36 <_printf_float+0xfe>
 800dfc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dfc6:	d118      	bne.n	800dffa <_printf_float+0x1c2>
 800dfc8:	2900      	cmp	r1, #0
 800dfca:	6863      	ldr	r3, [r4, #4]
 800dfcc:	dd0b      	ble.n	800dfe6 <_printf_float+0x1ae>
 800dfce:	6121      	str	r1, [r4, #16]
 800dfd0:	b913      	cbnz	r3, 800dfd8 <_printf_float+0x1a0>
 800dfd2:	6822      	ldr	r2, [r4, #0]
 800dfd4:	07d0      	lsls	r0, r2, #31
 800dfd6:	d502      	bpl.n	800dfde <_printf_float+0x1a6>
 800dfd8:	3301      	adds	r3, #1
 800dfda:	440b      	add	r3, r1
 800dfdc:	6123      	str	r3, [r4, #16]
 800dfde:	65a1      	str	r1, [r4, #88]	; 0x58
 800dfe0:	f04f 0900 	mov.w	r9, #0
 800dfe4:	e7de      	b.n	800dfa4 <_printf_float+0x16c>
 800dfe6:	b913      	cbnz	r3, 800dfee <_printf_float+0x1b6>
 800dfe8:	6822      	ldr	r2, [r4, #0]
 800dfea:	07d2      	lsls	r2, r2, #31
 800dfec:	d501      	bpl.n	800dff2 <_printf_float+0x1ba>
 800dfee:	3302      	adds	r3, #2
 800dff0:	e7f4      	b.n	800dfdc <_printf_float+0x1a4>
 800dff2:	2301      	movs	r3, #1
 800dff4:	e7f2      	b.n	800dfdc <_printf_float+0x1a4>
 800dff6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dffc:	4299      	cmp	r1, r3
 800dffe:	db05      	blt.n	800e00c <_printf_float+0x1d4>
 800e000:	6823      	ldr	r3, [r4, #0]
 800e002:	6121      	str	r1, [r4, #16]
 800e004:	07d8      	lsls	r0, r3, #31
 800e006:	d5ea      	bpl.n	800dfde <_printf_float+0x1a6>
 800e008:	1c4b      	adds	r3, r1, #1
 800e00a:	e7e7      	b.n	800dfdc <_printf_float+0x1a4>
 800e00c:	2900      	cmp	r1, #0
 800e00e:	bfd4      	ite	le
 800e010:	f1c1 0202 	rsble	r2, r1, #2
 800e014:	2201      	movgt	r2, #1
 800e016:	4413      	add	r3, r2
 800e018:	e7e0      	b.n	800dfdc <_printf_float+0x1a4>
 800e01a:	6823      	ldr	r3, [r4, #0]
 800e01c:	055a      	lsls	r2, r3, #21
 800e01e:	d407      	bmi.n	800e030 <_printf_float+0x1f8>
 800e020:	6923      	ldr	r3, [r4, #16]
 800e022:	4642      	mov	r2, r8
 800e024:	4631      	mov	r1, r6
 800e026:	4628      	mov	r0, r5
 800e028:	47b8      	blx	r7
 800e02a:	3001      	adds	r0, #1
 800e02c:	d12c      	bne.n	800e088 <_printf_float+0x250>
 800e02e:	e764      	b.n	800defa <_printf_float+0xc2>
 800e030:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e034:	f240 80e0 	bls.w	800e1f8 <_printf_float+0x3c0>
 800e038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e03c:	2200      	movs	r2, #0
 800e03e:	2300      	movs	r3, #0
 800e040:	f7f2 fd62 	bl	8000b08 <__aeabi_dcmpeq>
 800e044:	2800      	cmp	r0, #0
 800e046:	d034      	beq.n	800e0b2 <_printf_float+0x27a>
 800e048:	4a37      	ldr	r2, [pc, #220]	; (800e128 <_printf_float+0x2f0>)
 800e04a:	2301      	movs	r3, #1
 800e04c:	4631      	mov	r1, r6
 800e04e:	4628      	mov	r0, r5
 800e050:	47b8      	blx	r7
 800e052:	3001      	adds	r0, #1
 800e054:	f43f af51 	beq.w	800defa <_printf_float+0xc2>
 800e058:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e05c:	429a      	cmp	r2, r3
 800e05e:	db02      	blt.n	800e066 <_printf_float+0x22e>
 800e060:	6823      	ldr	r3, [r4, #0]
 800e062:	07d8      	lsls	r0, r3, #31
 800e064:	d510      	bpl.n	800e088 <_printf_float+0x250>
 800e066:	ee18 3a10 	vmov	r3, s16
 800e06a:	4652      	mov	r2, sl
 800e06c:	4631      	mov	r1, r6
 800e06e:	4628      	mov	r0, r5
 800e070:	47b8      	blx	r7
 800e072:	3001      	adds	r0, #1
 800e074:	f43f af41 	beq.w	800defa <_printf_float+0xc2>
 800e078:	f04f 0800 	mov.w	r8, #0
 800e07c:	f104 091a 	add.w	r9, r4, #26
 800e080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e082:	3b01      	subs	r3, #1
 800e084:	4543      	cmp	r3, r8
 800e086:	dc09      	bgt.n	800e09c <_printf_float+0x264>
 800e088:	6823      	ldr	r3, [r4, #0]
 800e08a:	079b      	lsls	r3, r3, #30
 800e08c:	f100 8105 	bmi.w	800e29a <_printf_float+0x462>
 800e090:	68e0      	ldr	r0, [r4, #12]
 800e092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e094:	4298      	cmp	r0, r3
 800e096:	bfb8      	it	lt
 800e098:	4618      	movlt	r0, r3
 800e09a:	e730      	b.n	800defe <_printf_float+0xc6>
 800e09c:	2301      	movs	r3, #1
 800e09e:	464a      	mov	r2, r9
 800e0a0:	4631      	mov	r1, r6
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	47b8      	blx	r7
 800e0a6:	3001      	adds	r0, #1
 800e0a8:	f43f af27 	beq.w	800defa <_printf_float+0xc2>
 800e0ac:	f108 0801 	add.w	r8, r8, #1
 800e0b0:	e7e6      	b.n	800e080 <_printf_float+0x248>
 800e0b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	dc39      	bgt.n	800e12c <_printf_float+0x2f4>
 800e0b8:	4a1b      	ldr	r2, [pc, #108]	; (800e128 <_printf_float+0x2f0>)
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	4631      	mov	r1, r6
 800e0be:	4628      	mov	r0, r5
 800e0c0:	47b8      	blx	r7
 800e0c2:	3001      	adds	r0, #1
 800e0c4:	f43f af19 	beq.w	800defa <_printf_float+0xc2>
 800e0c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	d102      	bne.n	800e0d6 <_printf_float+0x29e>
 800e0d0:	6823      	ldr	r3, [r4, #0]
 800e0d2:	07d9      	lsls	r1, r3, #31
 800e0d4:	d5d8      	bpl.n	800e088 <_printf_float+0x250>
 800e0d6:	ee18 3a10 	vmov	r3, s16
 800e0da:	4652      	mov	r2, sl
 800e0dc:	4631      	mov	r1, r6
 800e0de:	4628      	mov	r0, r5
 800e0e0:	47b8      	blx	r7
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	f43f af09 	beq.w	800defa <_printf_float+0xc2>
 800e0e8:	f04f 0900 	mov.w	r9, #0
 800e0ec:	f104 0a1a 	add.w	sl, r4, #26
 800e0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0f2:	425b      	negs	r3, r3
 800e0f4:	454b      	cmp	r3, r9
 800e0f6:	dc01      	bgt.n	800e0fc <_printf_float+0x2c4>
 800e0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0fa:	e792      	b.n	800e022 <_printf_float+0x1ea>
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	4652      	mov	r2, sl
 800e100:	4631      	mov	r1, r6
 800e102:	4628      	mov	r0, r5
 800e104:	47b8      	blx	r7
 800e106:	3001      	adds	r0, #1
 800e108:	f43f aef7 	beq.w	800defa <_printf_float+0xc2>
 800e10c:	f109 0901 	add.w	r9, r9, #1
 800e110:	e7ee      	b.n	800e0f0 <_printf_float+0x2b8>
 800e112:	bf00      	nop
 800e114:	7fefffff 	.word	0x7fefffff
 800e118:	080120ac 	.word	0x080120ac
 800e11c:	080120b0 	.word	0x080120b0
 800e120:	080120b8 	.word	0x080120b8
 800e124:	080120b4 	.word	0x080120b4
 800e128:	080120bc 	.word	0x080120bc
 800e12c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e12e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e130:	429a      	cmp	r2, r3
 800e132:	bfa8      	it	ge
 800e134:	461a      	movge	r2, r3
 800e136:	2a00      	cmp	r2, #0
 800e138:	4691      	mov	r9, r2
 800e13a:	dc37      	bgt.n	800e1ac <_printf_float+0x374>
 800e13c:	f04f 0b00 	mov.w	fp, #0
 800e140:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e144:	f104 021a 	add.w	r2, r4, #26
 800e148:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e14a:	9305      	str	r3, [sp, #20]
 800e14c:	eba3 0309 	sub.w	r3, r3, r9
 800e150:	455b      	cmp	r3, fp
 800e152:	dc33      	bgt.n	800e1bc <_printf_float+0x384>
 800e154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e158:	429a      	cmp	r2, r3
 800e15a:	db3b      	blt.n	800e1d4 <_printf_float+0x39c>
 800e15c:	6823      	ldr	r3, [r4, #0]
 800e15e:	07da      	lsls	r2, r3, #31
 800e160:	d438      	bmi.n	800e1d4 <_printf_float+0x39c>
 800e162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e164:	9a05      	ldr	r2, [sp, #20]
 800e166:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e168:	1a9a      	subs	r2, r3, r2
 800e16a:	eba3 0901 	sub.w	r9, r3, r1
 800e16e:	4591      	cmp	r9, r2
 800e170:	bfa8      	it	ge
 800e172:	4691      	movge	r9, r2
 800e174:	f1b9 0f00 	cmp.w	r9, #0
 800e178:	dc35      	bgt.n	800e1e6 <_printf_float+0x3ae>
 800e17a:	f04f 0800 	mov.w	r8, #0
 800e17e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e182:	f104 0a1a 	add.w	sl, r4, #26
 800e186:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e18a:	1a9b      	subs	r3, r3, r2
 800e18c:	eba3 0309 	sub.w	r3, r3, r9
 800e190:	4543      	cmp	r3, r8
 800e192:	f77f af79 	ble.w	800e088 <_printf_float+0x250>
 800e196:	2301      	movs	r3, #1
 800e198:	4652      	mov	r2, sl
 800e19a:	4631      	mov	r1, r6
 800e19c:	4628      	mov	r0, r5
 800e19e:	47b8      	blx	r7
 800e1a0:	3001      	adds	r0, #1
 800e1a2:	f43f aeaa 	beq.w	800defa <_printf_float+0xc2>
 800e1a6:	f108 0801 	add.w	r8, r8, #1
 800e1aa:	e7ec      	b.n	800e186 <_printf_float+0x34e>
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	4631      	mov	r1, r6
 800e1b0:	4642      	mov	r2, r8
 800e1b2:	4628      	mov	r0, r5
 800e1b4:	47b8      	blx	r7
 800e1b6:	3001      	adds	r0, #1
 800e1b8:	d1c0      	bne.n	800e13c <_printf_float+0x304>
 800e1ba:	e69e      	b.n	800defa <_printf_float+0xc2>
 800e1bc:	2301      	movs	r3, #1
 800e1be:	4631      	mov	r1, r6
 800e1c0:	4628      	mov	r0, r5
 800e1c2:	9205      	str	r2, [sp, #20]
 800e1c4:	47b8      	blx	r7
 800e1c6:	3001      	adds	r0, #1
 800e1c8:	f43f ae97 	beq.w	800defa <_printf_float+0xc2>
 800e1cc:	9a05      	ldr	r2, [sp, #20]
 800e1ce:	f10b 0b01 	add.w	fp, fp, #1
 800e1d2:	e7b9      	b.n	800e148 <_printf_float+0x310>
 800e1d4:	ee18 3a10 	vmov	r3, s16
 800e1d8:	4652      	mov	r2, sl
 800e1da:	4631      	mov	r1, r6
 800e1dc:	4628      	mov	r0, r5
 800e1de:	47b8      	blx	r7
 800e1e0:	3001      	adds	r0, #1
 800e1e2:	d1be      	bne.n	800e162 <_printf_float+0x32a>
 800e1e4:	e689      	b.n	800defa <_printf_float+0xc2>
 800e1e6:	9a05      	ldr	r2, [sp, #20]
 800e1e8:	464b      	mov	r3, r9
 800e1ea:	4442      	add	r2, r8
 800e1ec:	4631      	mov	r1, r6
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	47b8      	blx	r7
 800e1f2:	3001      	adds	r0, #1
 800e1f4:	d1c1      	bne.n	800e17a <_printf_float+0x342>
 800e1f6:	e680      	b.n	800defa <_printf_float+0xc2>
 800e1f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1fa:	2a01      	cmp	r2, #1
 800e1fc:	dc01      	bgt.n	800e202 <_printf_float+0x3ca>
 800e1fe:	07db      	lsls	r3, r3, #31
 800e200:	d538      	bpl.n	800e274 <_printf_float+0x43c>
 800e202:	2301      	movs	r3, #1
 800e204:	4642      	mov	r2, r8
 800e206:	4631      	mov	r1, r6
 800e208:	4628      	mov	r0, r5
 800e20a:	47b8      	blx	r7
 800e20c:	3001      	adds	r0, #1
 800e20e:	f43f ae74 	beq.w	800defa <_printf_float+0xc2>
 800e212:	ee18 3a10 	vmov	r3, s16
 800e216:	4652      	mov	r2, sl
 800e218:	4631      	mov	r1, r6
 800e21a:	4628      	mov	r0, r5
 800e21c:	47b8      	blx	r7
 800e21e:	3001      	adds	r0, #1
 800e220:	f43f ae6b 	beq.w	800defa <_printf_float+0xc2>
 800e224:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e228:	2200      	movs	r2, #0
 800e22a:	2300      	movs	r3, #0
 800e22c:	f7f2 fc6c 	bl	8000b08 <__aeabi_dcmpeq>
 800e230:	b9d8      	cbnz	r0, 800e26a <_printf_float+0x432>
 800e232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e234:	f108 0201 	add.w	r2, r8, #1
 800e238:	3b01      	subs	r3, #1
 800e23a:	4631      	mov	r1, r6
 800e23c:	4628      	mov	r0, r5
 800e23e:	47b8      	blx	r7
 800e240:	3001      	adds	r0, #1
 800e242:	d10e      	bne.n	800e262 <_printf_float+0x42a>
 800e244:	e659      	b.n	800defa <_printf_float+0xc2>
 800e246:	2301      	movs	r3, #1
 800e248:	4652      	mov	r2, sl
 800e24a:	4631      	mov	r1, r6
 800e24c:	4628      	mov	r0, r5
 800e24e:	47b8      	blx	r7
 800e250:	3001      	adds	r0, #1
 800e252:	f43f ae52 	beq.w	800defa <_printf_float+0xc2>
 800e256:	f108 0801 	add.w	r8, r8, #1
 800e25a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e25c:	3b01      	subs	r3, #1
 800e25e:	4543      	cmp	r3, r8
 800e260:	dcf1      	bgt.n	800e246 <_printf_float+0x40e>
 800e262:	464b      	mov	r3, r9
 800e264:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e268:	e6dc      	b.n	800e024 <_printf_float+0x1ec>
 800e26a:	f04f 0800 	mov.w	r8, #0
 800e26e:	f104 0a1a 	add.w	sl, r4, #26
 800e272:	e7f2      	b.n	800e25a <_printf_float+0x422>
 800e274:	2301      	movs	r3, #1
 800e276:	4642      	mov	r2, r8
 800e278:	e7df      	b.n	800e23a <_printf_float+0x402>
 800e27a:	2301      	movs	r3, #1
 800e27c:	464a      	mov	r2, r9
 800e27e:	4631      	mov	r1, r6
 800e280:	4628      	mov	r0, r5
 800e282:	47b8      	blx	r7
 800e284:	3001      	adds	r0, #1
 800e286:	f43f ae38 	beq.w	800defa <_printf_float+0xc2>
 800e28a:	f108 0801 	add.w	r8, r8, #1
 800e28e:	68e3      	ldr	r3, [r4, #12]
 800e290:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e292:	1a5b      	subs	r3, r3, r1
 800e294:	4543      	cmp	r3, r8
 800e296:	dcf0      	bgt.n	800e27a <_printf_float+0x442>
 800e298:	e6fa      	b.n	800e090 <_printf_float+0x258>
 800e29a:	f04f 0800 	mov.w	r8, #0
 800e29e:	f104 0919 	add.w	r9, r4, #25
 800e2a2:	e7f4      	b.n	800e28e <_printf_float+0x456>

0800e2a4 <_printf_common>:
 800e2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2a8:	4616      	mov	r6, r2
 800e2aa:	4699      	mov	r9, r3
 800e2ac:	688a      	ldr	r2, [r1, #8]
 800e2ae:	690b      	ldr	r3, [r1, #16]
 800e2b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	bfb8      	it	lt
 800e2b8:	4613      	movlt	r3, r2
 800e2ba:	6033      	str	r3, [r6, #0]
 800e2bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e2c0:	4607      	mov	r7, r0
 800e2c2:	460c      	mov	r4, r1
 800e2c4:	b10a      	cbz	r2, 800e2ca <_printf_common+0x26>
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	6033      	str	r3, [r6, #0]
 800e2ca:	6823      	ldr	r3, [r4, #0]
 800e2cc:	0699      	lsls	r1, r3, #26
 800e2ce:	bf42      	ittt	mi
 800e2d0:	6833      	ldrmi	r3, [r6, #0]
 800e2d2:	3302      	addmi	r3, #2
 800e2d4:	6033      	strmi	r3, [r6, #0]
 800e2d6:	6825      	ldr	r5, [r4, #0]
 800e2d8:	f015 0506 	ands.w	r5, r5, #6
 800e2dc:	d106      	bne.n	800e2ec <_printf_common+0x48>
 800e2de:	f104 0a19 	add.w	sl, r4, #25
 800e2e2:	68e3      	ldr	r3, [r4, #12]
 800e2e4:	6832      	ldr	r2, [r6, #0]
 800e2e6:	1a9b      	subs	r3, r3, r2
 800e2e8:	42ab      	cmp	r3, r5
 800e2ea:	dc26      	bgt.n	800e33a <_printf_common+0x96>
 800e2ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e2f0:	1e13      	subs	r3, r2, #0
 800e2f2:	6822      	ldr	r2, [r4, #0]
 800e2f4:	bf18      	it	ne
 800e2f6:	2301      	movne	r3, #1
 800e2f8:	0692      	lsls	r2, r2, #26
 800e2fa:	d42b      	bmi.n	800e354 <_printf_common+0xb0>
 800e2fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e300:	4649      	mov	r1, r9
 800e302:	4638      	mov	r0, r7
 800e304:	47c0      	blx	r8
 800e306:	3001      	adds	r0, #1
 800e308:	d01e      	beq.n	800e348 <_printf_common+0xa4>
 800e30a:	6823      	ldr	r3, [r4, #0]
 800e30c:	68e5      	ldr	r5, [r4, #12]
 800e30e:	6832      	ldr	r2, [r6, #0]
 800e310:	f003 0306 	and.w	r3, r3, #6
 800e314:	2b04      	cmp	r3, #4
 800e316:	bf08      	it	eq
 800e318:	1aad      	subeq	r5, r5, r2
 800e31a:	68a3      	ldr	r3, [r4, #8]
 800e31c:	6922      	ldr	r2, [r4, #16]
 800e31e:	bf0c      	ite	eq
 800e320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e324:	2500      	movne	r5, #0
 800e326:	4293      	cmp	r3, r2
 800e328:	bfc4      	itt	gt
 800e32a:	1a9b      	subgt	r3, r3, r2
 800e32c:	18ed      	addgt	r5, r5, r3
 800e32e:	2600      	movs	r6, #0
 800e330:	341a      	adds	r4, #26
 800e332:	42b5      	cmp	r5, r6
 800e334:	d11a      	bne.n	800e36c <_printf_common+0xc8>
 800e336:	2000      	movs	r0, #0
 800e338:	e008      	b.n	800e34c <_printf_common+0xa8>
 800e33a:	2301      	movs	r3, #1
 800e33c:	4652      	mov	r2, sl
 800e33e:	4649      	mov	r1, r9
 800e340:	4638      	mov	r0, r7
 800e342:	47c0      	blx	r8
 800e344:	3001      	adds	r0, #1
 800e346:	d103      	bne.n	800e350 <_printf_common+0xac>
 800e348:	f04f 30ff 	mov.w	r0, #4294967295
 800e34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e350:	3501      	adds	r5, #1
 800e352:	e7c6      	b.n	800e2e2 <_printf_common+0x3e>
 800e354:	18e1      	adds	r1, r4, r3
 800e356:	1c5a      	adds	r2, r3, #1
 800e358:	2030      	movs	r0, #48	; 0x30
 800e35a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e35e:	4422      	add	r2, r4
 800e360:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e364:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e368:	3302      	adds	r3, #2
 800e36a:	e7c7      	b.n	800e2fc <_printf_common+0x58>
 800e36c:	2301      	movs	r3, #1
 800e36e:	4622      	mov	r2, r4
 800e370:	4649      	mov	r1, r9
 800e372:	4638      	mov	r0, r7
 800e374:	47c0      	blx	r8
 800e376:	3001      	adds	r0, #1
 800e378:	d0e6      	beq.n	800e348 <_printf_common+0xa4>
 800e37a:	3601      	adds	r6, #1
 800e37c:	e7d9      	b.n	800e332 <_printf_common+0x8e>
	...

0800e380 <_printf_i>:
 800e380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e384:	7e0f      	ldrb	r7, [r1, #24]
 800e386:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e388:	2f78      	cmp	r7, #120	; 0x78
 800e38a:	4691      	mov	r9, r2
 800e38c:	4680      	mov	r8, r0
 800e38e:	460c      	mov	r4, r1
 800e390:	469a      	mov	sl, r3
 800e392:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e396:	d807      	bhi.n	800e3a8 <_printf_i+0x28>
 800e398:	2f62      	cmp	r7, #98	; 0x62
 800e39a:	d80a      	bhi.n	800e3b2 <_printf_i+0x32>
 800e39c:	2f00      	cmp	r7, #0
 800e39e:	f000 80d8 	beq.w	800e552 <_printf_i+0x1d2>
 800e3a2:	2f58      	cmp	r7, #88	; 0x58
 800e3a4:	f000 80a3 	beq.w	800e4ee <_printf_i+0x16e>
 800e3a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3b0:	e03a      	b.n	800e428 <_printf_i+0xa8>
 800e3b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3b6:	2b15      	cmp	r3, #21
 800e3b8:	d8f6      	bhi.n	800e3a8 <_printf_i+0x28>
 800e3ba:	a101      	add	r1, pc, #4	; (adr r1, 800e3c0 <_printf_i+0x40>)
 800e3bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3c0:	0800e419 	.word	0x0800e419
 800e3c4:	0800e42d 	.word	0x0800e42d
 800e3c8:	0800e3a9 	.word	0x0800e3a9
 800e3cc:	0800e3a9 	.word	0x0800e3a9
 800e3d0:	0800e3a9 	.word	0x0800e3a9
 800e3d4:	0800e3a9 	.word	0x0800e3a9
 800e3d8:	0800e42d 	.word	0x0800e42d
 800e3dc:	0800e3a9 	.word	0x0800e3a9
 800e3e0:	0800e3a9 	.word	0x0800e3a9
 800e3e4:	0800e3a9 	.word	0x0800e3a9
 800e3e8:	0800e3a9 	.word	0x0800e3a9
 800e3ec:	0800e539 	.word	0x0800e539
 800e3f0:	0800e45d 	.word	0x0800e45d
 800e3f4:	0800e51b 	.word	0x0800e51b
 800e3f8:	0800e3a9 	.word	0x0800e3a9
 800e3fc:	0800e3a9 	.word	0x0800e3a9
 800e400:	0800e55b 	.word	0x0800e55b
 800e404:	0800e3a9 	.word	0x0800e3a9
 800e408:	0800e45d 	.word	0x0800e45d
 800e40c:	0800e3a9 	.word	0x0800e3a9
 800e410:	0800e3a9 	.word	0x0800e3a9
 800e414:	0800e523 	.word	0x0800e523
 800e418:	682b      	ldr	r3, [r5, #0]
 800e41a:	1d1a      	adds	r2, r3, #4
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	602a      	str	r2, [r5, #0]
 800e420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e428:	2301      	movs	r3, #1
 800e42a:	e0a3      	b.n	800e574 <_printf_i+0x1f4>
 800e42c:	6820      	ldr	r0, [r4, #0]
 800e42e:	6829      	ldr	r1, [r5, #0]
 800e430:	0606      	lsls	r6, r0, #24
 800e432:	f101 0304 	add.w	r3, r1, #4
 800e436:	d50a      	bpl.n	800e44e <_printf_i+0xce>
 800e438:	680e      	ldr	r6, [r1, #0]
 800e43a:	602b      	str	r3, [r5, #0]
 800e43c:	2e00      	cmp	r6, #0
 800e43e:	da03      	bge.n	800e448 <_printf_i+0xc8>
 800e440:	232d      	movs	r3, #45	; 0x2d
 800e442:	4276      	negs	r6, r6
 800e444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e448:	485e      	ldr	r0, [pc, #376]	; (800e5c4 <_printf_i+0x244>)
 800e44a:	230a      	movs	r3, #10
 800e44c:	e019      	b.n	800e482 <_printf_i+0x102>
 800e44e:	680e      	ldr	r6, [r1, #0]
 800e450:	602b      	str	r3, [r5, #0]
 800e452:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e456:	bf18      	it	ne
 800e458:	b236      	sxthne	r6, r6
 800e45a:	e7ef      	b.n	800e43c <_printf_i+0xbc>
 800e45c:	682b      	ldr	r3, [r5, #0]
 800e45e:	6820      	ldr	r0, [r4, #0]
 800e460:	1d19      	adds	r1, r3, #4
 800e462:	6029      	str	r1, [r5, #0]
 800e464:	0601      	lsls	r1, r0, #24
 800e466:	d501      	bpl.n	800e46c <_printf_i+0xec>
 800e468:	681e      	ldr	r6, [r3, #0]
 800e46a:	e002      	b.n	800e472 <_printf_i+0xf2>
 800e46c:	0646      	lsls	r6, r0, #25
 800e46e:	d5fb      	bpl.n	800e468 <_printf_i+0xe8>
 800e470:	881e      	ldrh	r6, [r3, #0]
 800e472:	4854      	ldr	r0, [pc, #336]	; (800e5c4 <_printf_i+0x244>)
 800e474:	2f6f      	cmp	r7, #111	; 0x6f
 800e476:	bf0c      	ite	eq
 800e478:	2308      	moveq	r3, #8
 800e47a:	230a      	movne	r3, #10
 800e47c:	2100      	movs	r1, #0
 800e47e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e482:	6865      	ldr	r5, [r4, #4]
 800e484:	60a5      	str	r5, [r4, #8]
 800e486:	2d00      	cmp	r5, #0
 800e488:	bfa2      	ittt	ge
 800e48a:	6821      	ldrge	r1, [r4, #0]
 800e48c:	f021 0104 	bicge.w	r1, r1, #4
 800e490:	6021      	strge	r1, [r4, #0]
 800e492:	b90e      	cbnz	r6, 800e498 <_printf_i+0x118>
 800e494:	2d00      	cmp	r5, #0
 800e496:	d04d      	beq.n	800e534 <_printf_i+0x1b4>
 800e498:	4615      	mov	r5, r2
 800e49a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e49e:	fb03 6711 	mls	r7, r3, r1, r6
 800e4a2:	5dc7      	ldrb	r7, [r0, r7]
 800e4a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4a8:	4637      	mov	r7, r6
 800e4aa:	42bb      	cmp	r3, r7
 800e4ac:	460e      	mov	r6, r1
 800e4ae:	d9f4      	bls.n	800e49a <_printf_i+0x11a>
 800e4b0:	2b08      	cmp	r3, #8
 800e4b2:	d10b      	bne.n	800e4cc <_printf_i+0x14c>
 800e4b4:	6823      	ldr	r3, [r4, #0]
 800e4b6:	07de      	lsls	r6, r3, #31
 800e4b8:	d508      	bpl.n	800e4cc <_printf_i+0x14c>
 800e4ba:	6923      	ldr	r3, [r4, #16]
 800e4bc:	6861      	ldr	r1, [r4, #4]
 800e4be:	4299      	cmp	r1, r3
 800e4c0:	bfde      	ittt	le
 800e4c2:	2330      	movle	r3, #48	; 0x30
 800e4c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e4c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e4cc:	1b52      	subs	r2, r2, r5
 800e4ce:	6122      	str	r2, [r4, #16]
 800e4d0:	f8cd a000 	str.w	sl, [sp]
 800e4d4:	464b      	mov	r3, r9
 800e4d6:	aa03      	add	r2, sp, #12
 800e4d8:	4621      	mov	r1, r4
 800e4da:	4640      	mov	r0, r8
 800e4dc:	f7ff fee2 	bl	800e2a4 <_printf_common>
 800e4e0:	3001      	adds	r0, #1
 800e4e2:	d14c      	bne.n	800e57e <_printf_i+0x1fe>
 800e4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e8:	b004      	add	sp, #16
 800e4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ee:	4835      	ldr	r0, [pc, #212]	; (800e5c4 <_printf_i+0x244>)
 800e4f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e4f4:	6829      	ldr	r1, [r5, #0]
 800e4f6:	6823      	ldr	r3, [r4, #0]
 800e4f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e4fc:	6029      	str	r1, [r5, #0]
 800e4fe:	061d      	lsls	r5, r3, #24
 800e500:	d514      	bpl.n	800e52c <_printf_i+0x1ac>
 800e502:	07df      	lsls	r7, r3, #31
 800e504:	bf44      	itt	mi
 800e506:	f043 0320 	orrmi.w	r3, r3, #32
 800e50a:	6023      	strmi	r3, [r4, #0]
 800e50c:	b91e      	cbnz	r6, 800e516 <_printf_i+0x196>
 800e50e:	6823      	ldr	r3, [r4, #0]
 800e510:	f023 0320 	bic.w	r3, r3, #32
 800e514:	6023      	str	r3, [r4, #0]
 800e516:	2310      	movs	r3, #16
 800e518:	e7b0      	b.n	800e47c <_printf_i+0xfc>
 800e51a:	6823      	ldr	r3, [r4, #0]
 800e51c:	f043 0320 	orr.w	r3, r3, #32
 800e520:	6023      	str	r3, [r4, #0]
 800e522:	2378      	movs	r3, #120	; 0x78
 800e524:	4828      	ldr	r0, [pc, #160]	; (800e5c8 <_printf_i+0x248>)
 800e526:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e52a:	e7e3      	b.n	800e4f4 <_printf_i+0x174>
 800e52c:	0659      	lsls	r1, r3, #25
 800e52e:	bf48      	it	mi
 800e530:	b2b6      	uxthmi	r6, r6
 800e532:	e7e6      	b.n	800e502 <_printf_i+0x182>
 800e534:	4615      	mov	r5, r2
 800e536:	e7bb      	b.n	800e4b0 <_printf_i+0x130>
 800e538:	682b      	ldr	r3, [r5, #0]
 800e53a:	6826      	ldr	r6, [r4, #0]
 800e53c:	6961      	ldr	r1, [r4, #20]
 800e53e:	1d18      	adds	r0, r3, #4
 800e540:	6028      	str	r0, [r5, #0]
 800e542:	0635      	lsls	r5, r6, #24
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	d501      	bpl.n	800e54c <_printf_i+0x1cc>
 800e548:	6019      	str	r1, [r3, #0]
 800e54a:	e002      	b.n	800e552 <_printf_i+0x1d2>
 800e54c:	0670      	lsls	r0, r6, #25
 800e54e:	d5fb      	bpl.n	800e548 <_printf_i+0x1c8>
 800e550:	8019      	strh	r1, [r3, #0]
 800e552:	2300      	movs	r3, #0
 800e554:	6123      	str	r3, [r4, #16]
 800e556:	4615      	mov	r5, r2
 800e558:	e7ba      	b.n	800e4d0 <_printf_i+0x150>
 800e55a:	682b      	ldr	r3, [r5, #0]
 800e55c:	1d1a      	adds	r2, r3, #4
 800e55e:	602a      	str	r2, [r5, #0]
 800e560:	681d      	ldr	r5, [r3, #0]
 800e562:	6862      	ldr	r2, [r4, #4]
 800e564:	2100      	movs	r1, #0
 800e566:	4628      	mov	r0, r5
 800e568:	f7f1 fe5a 	bl	8000220 <memchr>
 800e56c:	b108      	cbz	r0, 800e572 <_printf_i+0x1f2>
 800e56e:	1b40      	subs	r0, r0, r5
 800e570:	6060      	str	r0, [r4, #4]
 800e572:	6863      	ldr	r3, [r4, #4]
 800e574:	6123      	str	r3, [r4, #16]
 800e576:	2300      	movs	r3, #0
 800e578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e57c:	e7a8      	b.n	800e4d0 <_printf_i+0x150>
 800e57e:	6923      	ldr	r3, [r4, #16]
 800e580:	462a      	mov	r2, r5
 800e582:	4649      	mov	r1, r9
 800e584:	4640      	mov	r0, r8
 800e586:	47d0      	blx	sl
 800e588:	3001      	adds	r0, #1
 800e58a:	d0ab      	beq.n	800e4e4 <_printf_i+0x164>
 800e58c:	6823      	ldr	r3, [r4, #0]
 800e58e:	079b      	lsls	r3, r3, #30
 800e590:	d413      	bmi.n	800e5ba <_printf_i+0x23a>
 800e592:	68e0      	ldr	r0, [r4, #12]
 800e594:	9b03      	ldr	r3, [sp, #12]
 800e596:	4298      	cmp	r0, r3
 800e598:	bfb8      	it	lt
 800e59a:	4618      	movlt	r0, r3
 800e59c:	e7a4      	b.n	800e4e8 <_printf_i+0x168>
 800e59e:	2301      	movs	r3, #1
 800e5a0:	4632      	mov	r2, r6
 800e5a2:	4649      	mov	r1, r9
 800e5a4:	4640      	mov	r0, r8
 800e5a6:	47d0      	blx	sl
 800e5a8:	3001      	adds	r0, #1
 800e5aa:	d09b      	beq.n	800e4e4 <_printf_i+0x164>
 800e5ac:	3501      	adds	r5, #1
 800e5ae:	68e3      	ldr	r3, [r4, #12]
 800e5b0:	9903      	ldr	r1, [sp, #12]
 800e5b2:	1a5b      	subs	r3, r3, r1
 800e5b4:	42ab      	cmp	r3, r5
 800e5b6:	dcf2      	bgt.n	800e59e <_printf_i+0x21e>
 800e5b8:	e7eb      	b.n	800e592 <_printf_i+0x212>
 800e5ba:	2500      	movs	r5, #0
 800e5bc:	f104 0619 	add.w	r6, r4, #25
 800e5c0:	e7f5      	b.n	800e5ae <_printf_i+0x22e>
 800e5c2:	bf00      	nop
 800e5c4:	080120be 	.word	0x080120be
 800e5c8:	080120cf 	.word	0x080120cf

0800e5cc <siprintf>:
 800e5cc:	b40e      	push	{r1, r2, r3}
 800e5ce:	b500      	push	{lr}
 800e5d0:	b09c      	sub	sp, #112	; 0x70
 800e5d2:	ab1d      	add	r3, sp, #116	; 0x74
 800e5d4:	9002      	str	r0, [sp, #8]
 800e5d6:	9006      	str	r0, [sp, #24]
 800e5d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e5dc:	4809      	ldr	r0, [pc, #36]	; (800e604 <siprintf+0x38>)
 800e5de:	9107      	str	r1, [sp, #28]
 800e5e0:	9104      	str	r1, [sp, #16]
 800e5e2:	4909      	ldr	r1, [pc, #36]	; (800e608 <siprintf+0x3c>)
 800e5e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5e8:	9105      	str	r1, [sp, #20]
 800e5ea:	6800      	ldr	r0, [r0, #0]
 800e5ec:	9301      	str	r3, [sp, #4]
 800e5ee:	a902      	add	r1, sp, #8
 800e5f0:	f001 fb7a 	bl	800fce8 <_svfiprintf_r>
 800e5f4:	9b02      	ldr	r3, [sp, #8]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	701a      	strb	r2, [r3, #0]
 800e5fa:	b01c      	add	sp, #112	; 0x70
 800e5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e600:	b003      	add	sp, #12
 800e602:	4770      	bx	lr
 800e604:	20000040 	.word	0x20000040
 800e608:	ffff0208 	.word	0xffff0208

0800e60c <strncpy>:
 800e60c:	b510      	push	{r4, lr}
 800e60e:	3901      	subs	r1, #1
 800e610:	4603      	mov	r3, r0
 800e612:	b132      	cbz	r2, 800e622 <strncpy+0x16>
 800e614:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e618:	f803 4b01 	strb.w	r4, [r3], #1
 800e61c:	3a01      	subs	r2, #1
 800e61e:	2c00      	cmp	r4, #0
 800e620:	d1f7      	bne.n	800e612 <strncpy+0x6>
 800e622:	441a      	add	r2, r3
 800e624:	2100      	movs	r1, #0
 800e626:	4293      	cmp	r3, r2
 800e628:	d100      	bne.n	800e62c <strncpy+0x20>
 800e62a:	bd10      	pop	{r4, pc}
 800e62c:	f803 1b01 	strb.w	r1, [r3], #1
 800e630:	e7f9      	b.n	800e626 <strncpy+0x1a>

0800e632 <quorem>:
 800e632:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e636:	6903      	ldr	r3, [r0, #16]
 800e638:	690c      	ldr	r4, [r1, #16]
 800e63a:	42a3      	cmp	r3, r4
 800e63c:	4607      	mov	r7, r0
 800e63e:	f2c0 8081 	blt.w	800e744 <quorem+0x112>
 800e642:	3c01      	subs	r4, #1
 800e644:	f101 0814 	add.w	r8, r1, #20
 800e648:	f100 0514 	add.w	r5, r0, #20
 800e64c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e650:	9301      	str	r3, [sp, #4]
 800e652:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e656:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e65a:	3301      	adds	r3, #1
 800e65c:	429a      	cmp	r2, r3
 800e65e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e662:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e666:	fbb2 f6f3 	udiv	r6, r2, r3
 800e66a:	d331      	bcc.n	800e6d0 <quorem+0x9e>
 800e66c:	f04f 0e00 	mov.w	lr, #0
 800e670:	4640      	mov	r0, r8
 800e672:	46ac      	mov	ip, r5
 800e674:	46f2      	mov	sl, lr
 800e676:	f850 2b04 	ldr.w	r2, [r0], #4
 800e67a:	b293      	uxth	r3, r2
 800e67c:	fb06 e303 	mla	r3, r6, r3, lr
 800e680:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e684:	b29b      	uxth	r3, r3
 800e686:	ebaa 0303 	sub.w	r3, sl, r3
 800e68a:	f8dc a000 	ldr.w	sl, [ip]
 800e68e:	0c12      	lsrs	r2, r2, #16
 800e690:	fa13 f38a 	uxtah	r3, r3, sl
 800e694:	fb06 e202 	mla	r2, r6, r2, lr
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	9b00      	ldr	r3, [sp, #0]
 800e69c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e6a0:	b292      	uxth	r2, r2
 800e6a2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e6a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6aa:	f8bd 3000 	ldrh.w	r3, [sp]
 800e6ae:	4581      	cmp	r9, r0
 800e6b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6b4:	f84c 3b04 	str.w	r3, [ip], #4
 800e6b8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e6bc:	d2db      	bcs.n	800e676 <quorem+0x44>
 800e6be:	f855 300b 	ldr.w	r3, [r5, fp]
 800e6c2:	b92b      	cbnz	r3, 800e6d0 <quorem+0x9e>
 800e6c4:	9b01      	ldr	r3, [sp, #4]
 800e6c6:	3b04      	subs	r3, #4
 800e6c8:	429d      	cmp	r5, r3
 800e6ca:	461a      	mov	r2, r3
 800e6cc:	d32e      	bcc.n	800e72c <quorem+0xfa>
 800e6ce:	613c      	str	r4, [r7, #16]
 800e6d0:	4638      	mov	r0, r7
 800e6d2:	f001 f8b5 	bl	800f840 <__mcmp>
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	db24      	blt.n	800e724 <quorem+0xf2>
 800e6da:	3601      	adds	r6, #1
 800e6dc:	4628      	mov	r0, r5
 800e6de:	f04f 0c00 	mov.w	ip, #0
 800e6e2:	f858 2b04 	ldr.w	r2, [r8], #4
 800e6e6:	f8d0 e000 	ldr.w	lr, [r0]
 800e6ea:	b293      	uxth	r3, r2
 800e6ec:	ebac 0303 	sub.w	r3, ip, r3
 800e6f0:	0c12      	lsrs	r2, r2, #16
 800e6f2:	fa13 f38e 	uxtah	r3, r3, lr
 800e6f6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e6fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e704:	45c1      	cmp	r9, r8
 800e706:	f840 3b04 	str.w	r3, [r0], #4
 800e70a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e70e:	d2e8      	bcs.n	800e6e2 <quorem+0xb0>
 800e710:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e714:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e718:	b922      	cbnz	r2, 800e724 <quorem+0xf2>
 800e71a:	3b04      	subs	r3, #4
 800e71c:	429d      	cmp	r5, r3
 800e71e:	461a      	mov	r2, r3
 800e720:	d30a      	bcc.n	800e738 <quorem+0x106>
 800e722:	613c      	str	r4, [r7, #16]
 800e724:	4630      	mov	r0, r6
 800e726:	b003      	add	sp, #12
 800e728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72c:	6812      	ldr	r2, [r2, #0]
 800e72e:	3b04      	subs	r3, #4
 800e730:	2a00      	cmp	r2, #0
 800e732:	d1cc      	bne.n	800e6ce <quorem+0x9c>
 800e734:	3c01      	subs	r4, #1
 800e736:	e7c7      	b.n	800e6c8 <quorem+0x96>
 800e738:	6812      	ldr	r2, [r2, #0]
 800e73a:	3b04      	subs	r3, #4
 800e73c:	2a00      	cmp	r2, #0
 800e73e:	d1f0      	bne.n	800e722 <quorem+0xf0>
 800e740:	3c01      	subs	r4, #1
 800e742:	e7eb      	b.n	800e71c <quorem+0xea>
 800e744:	2000      	movs	r0, #0
 800e746:	e7ee      	b.n	800e726 <quorem+0xf4>

0800e748 <_dtoa_r>:
 800e748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e74c:	ed2d 8b04 	vpush	{d8-d9}
 800e750:	ec57 6b10 	vmov	r6, r7, d0
 800e754:	b093      	sub	sp, #76	; 0x4c
 800e756:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e758:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e75c:	9106      	str	r1, [sp, #24]
 800e75e:	ee10 aa10 	vmov	sl, s0
 800e762:	4604      	mov	r4, r0
 800e764:	9209      	str	r2, [sp, #36]	; 0x24
 800e766:	930c      	str	r3, [sp, #48]	; 0x30
 800e768:	46bb      	mov	fp, r7
 800e76a:	b975      	cbnz	r5, 800e78a <_dtoa_r+0x42>
 800e76c:	2010      	movs	r0, #16
 800e76e:	f000 fddd 	bl	800f32c <malloc>
 800e772:	4602      	mov	r2, r0
 800e774:	6260      	str	r0, [r4, #36]	; 0x24
 800e776:	b920      	cbnz	r0, 800e782 <_dtoa_r+0x3a>
 800e778:	4ba7      	ldr	r3, [pc, #668]	; (800ea18 <_dtoa_r+0x2d0>)
 800e77a:	21ea      	movs	r1, #234	; 0xea
 800e77c:	48a7      	ldr	r0, [pc, #668]	; (800ea1c <_dtoa_r+0x2d4>)
 800e77e:	f001 fbc3 	bl	800ff08 <__assert_func>
 800e782:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e786:	6005      	str	r5, [r0, #0]
 800e788:	60c5      	str	r5, [r0, #12]
 800e78a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e78c:	6819      	ldr	r1, [r3, #0]
 800e78e:	b151      	cbz	r1, 800e7a6 <_dtoa_r+0x5e>
 800e790:	685a      	ldr	r2, [r3, #4]
 800e792:	604a      	str	r2, [r1, #4]
 800e794:	2301      	movs	r3, #1
 800e796:	4093      	lsls	r3, r2
 800e798:	608b      	str	r3, [r1, #8]
 800e79a:	4620      	mov	r0, r4
 800e79c:	f000 fe0e 	bl	800f3bc <_Bfree>
 800e7a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	601a      	str	r2, [r3, #0]
 800e7a6:	1e3b      	subs	r3, r7, #0
 800e7a8:	bfaa      	itet	ge
 800e7aa:	2300      	movge	r3, #0
 800e7ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e7b0:	f8c8 3000 	strge.w	r3, [r8]
 800e7b4:	4b9a      	ldr	r3, [pc, #616]	; (800ea20 <_dtoa_r+0x2d8>)
 800e7b6:	bfbc      	itt	lt
 800e7b8:	2201      	movlt	r2, #1
 800e7ba:	f8c8 2000 	strlt.w	r2, [r8]
 800e7be:	ea33 030b 	bics.w	r3, r3, fp
 800e7c2:	d11b      	bne.n	800e7fc <_dtoa_r+0xb4>
 800e7c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e7c6:	f242 730f 	movw	r3, #9999	; 0x270f
 800e7ca:	6013      	str	r3, [r2, #0]
 800e7cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7d0:	4333      	orrs	r3, r6
 800e7d2:	f000 8592 	beq.w	800f2fa <_dtoa_r+0xbb2>
 800e7d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e7d8:	b963      	cbnz	r3, 800e7f4 <_dtoa_r+0xac>
 800e7da:	4b92      	ldr	r3, [pc, #584]	; (800ea24 <_dtoa_r+0x2dc>)
 800e7dc:	e022      	b.n	800e824 <_dtoa_r+0xdc>
 800e7de:	4b92      	ldr	r3, [pc, #584]	; (800ea28 <_dtoa_r+0x2e0>)
 800e7e0:	9301      	str	r3, [sp, #4]
 800e7e2:	3308      	adds	r3, #8
 800e7e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e7e6:	6013      	str	r3, [r2, #0]
 800e7e8:	9801      	ldr	r0, [sp, #4]
 800e7ea:	b013      	add	sp, #76	; 0x4c
 800e7ec:	ecbd 8b04 	vpop	{d8-d9}
 800e7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7f4:	4b8b      	ldr	r3, [pc, #556]	; (800ea24 <_dtoa_r+0x2dc>)
 800e7f6:	9301      	str	r3, [sp, #4]
 800e7f8:	3303      	adds	r3, #3
 800e7fa:	e7f3      	b.n	800e7e4 <_dtoa_r+0x9c>
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	2300      	movs	r3, #0
 800e800:	4650      	mov	r0, sl
 800e802:	4659      	mov	r1, fp
 800e804:	f7f2 f980 	bl	8000b08 <__aeabi_dcmpeq>
 800e808:	ec4b ab19 	vmov	d9, sl, fp
 800e80c:	4680      	mov	r8, r0
 800e80e:	b158      	cbz	r0, 800e828 <_dtoa_r+0xe0>
 800e810:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e812:	2301      	movs	r3, #1
 800e814:	6013      	str	r3, [r2, #0]
 800e816:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f000 856b 	beq.w	800f2f4 <_dtoa_r+0xbac>
 800e81e:	4883      	ldr	r0, [pc, #524]	; (800ea2c <_dtoa_r+0x2e4>)
 800e820:	6018      	str	r0, [r3, #0]
 800e822:	1e43      	subs	r3, r0, #1
 800e824:	9301      	str	r3, [sp, #4]
 800e826:	e7df      	b.n	800e7e8 <_dtoa_r+0xa0>
 800e828:	ec4b ab10 	vmov	d0, sl, fp
 800e82c:	aa10      	add	r2, sp, #64	; 0x40
 800e82e:	a911      	add	r1, sp, #68	; 0x44
 800e830:	4620      	mov	r0, r4
 800e832:	f001 f8ab 	bl	800f98c <__d2b>
 800e836:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e83a:	ee08 0a10 	vmov	s16, r0
 800e83e:	2d00      	cmp	r5, #0
 800e840:	f000 8084 	beq.w	800e94c <_dtoa_r+0x204>
 800e844:	ee19 3a90 	vmov	r3, s19
 800e848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e84c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e850:	4656      	mov	r6, sl
 800e852:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e856:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e85a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e85e:	4b74      	ldr	r3, [pc, #464]	; (800ea30 <_dtoa_r+0x2e8>)
 800e860:	2200      	movs	r2, #0
 800e862:	4630      	mov	r0, r6
 800e864:	4639      	mov	r1, r7
 800e866:	f7f1 fd2f 	bl	80002c8 <__aeabi_dsub>
 800e86a:	a365      	add	r3, pc, #404	; (adr r3, 800ea00 <_dtoa_r+0x2b8>)
 800e86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e870:	f7f1 fee2 	bl	8000638 <__aeabi_dmul>
 800e874:	a364      	add	r3, pc, #400	; (adr r3, 800ea08 <_dtoa_r+0x2c0>)
 800e876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87a:	f7f1 fd27 	bl	80002cc <__adddf3>
 800e87e:	4606      	mov	r6, r0
 800e880:	4628      	mov	r0, r5
 800e882:	460f      	mov	r7, r1
 800e884:	f7f1 fe6e 	bl	8000564 <__aeabi_i2d>
 800e888:	a361      	add	r3, pc, #388	; (adr r3, 800ea10 <_dtoa_r+0x2c8>)
 800e88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88e:	f7f1 fed3 	bl	8000638 <__aeabi_dmul>
 800e892:	4602      	mov	r2, r0
 800e894:	460b      	mov	r3, r1
 800e896:	4630      	mov	r0, r6
 800e898:	4639      	mov	r1, r7
 800e89a:	f7f1 fd17 	bl	80002cc <__adddf3>
 800e89e:	4606      	mov	r6, r0
 800e8a0:	460f      	mov	r7, r1
 800e8a2:	f7f2 f979 	bl	8000b98 <__aeabi_d2iz>
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	9000      	str	r0, [sp, #0]
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	4639      	mov	r1, r7
 800e8b0:	f7f2 f934 	bl	8000b1c <__aeabi_dcmplt>
 800e8b4:	b150      	cbz	r0, 800e8cc <_dtoa_r+0x184>
 800e8b6:	9800      	ldr	r0, [sp, #0]
 800e8b8:	f7f1 fe54 	bl	8000564 <__aeabi_i2d>
 800e8bc:	4632      	mov	r2, r6
 800e8be:	463b      	mov	r3, r7
 800e8c0:	f7f2 f922 	bl	8000b08 <__aeabi_dcmpeq>
 800e8c4:	b910      	cbnz	r0, 800e8cc <_dtoa_r+0x184>
 800e8c6:	9b00      	ldr	r3, [sp, #0]
 800e8c8:	3b01      	subs	r3, #1
 800e8ca:	9300      	str	r3, [sp, #0]
 800e8cc:	9b00      	ldr	r3, [sp, #0]
 800e8ce:	2b16      	cmp	r3, #22
 800e8d0:	d85a      	bhi.n	800e988 <_dtoa_r+0x240>
 800e8d2:	9a00      	ldr	r2, [sp, #0]
 800e8d4:	4b57      	ldr	r3, [pc, #348]	; (800ea34 <_dtoa_r+0x2ec>)
 800e8d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8de:	ec51 0b19 	vmov	r0, r1, d9
 800e8e2:	f7f2 f91b 	bl	8000b1c <__aeabi_dcmplt>
 800e8e6:	2800      	cmp	r0, #0
 800e8e8:	d050      	beq.n	800e98c <_dtoa_r+0x244>
 800e8ea:	9b00      	ldr	r3, [sp, #0]
 800e8ec:	3b01      	subs	r3, #1
 800e8ee:	9300      	str	r3, [sp, #0]
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e8f6:	1b5d      	subs	r5, r3, r5
 800e8f8:	1e6b      	subs	r3, r5, #1
 800e8fa:	9305      	str	r3, [sp, #20]
 800e8fc:	bf45      	ittet	mi
 800e8fe:	f1c5 0301 	rsbmi	r3, r5, #1
 800e902:	9304      	strmi	r3, [sp, #16]
 800e904:	2300      	movpl	r3, #0
 800e906:	2300      	movmi	r3, #0
 800e908:	bf4c      	ite	mi
 800e90a:	9305      	strmi	r3, [sp, #20]
 800e90c:	9304      	strpl	r3, [sp, #16]
 800e90e:	9b00      	ldr	r3, [sp, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	db3d      	blt.n	800e990 <_dtoa_r+0x248>
 800e914:	9b05      	ldr	r3, [sp, #20]
 800e916:	9a00      	ldr	r2, [sp, #0]
 800e918:	920a      	str	r2, [sp, #40]	; 0x28
 800e91a:	4413      	add	r3, r2
 800e91c:	9305      	str	r3, [sp, #20]
 800e91e:	2300      	movs	r3, #0
 800e920:	9307      	str	r3, [sp, #28]
 800e922:	9b06      	ldr	r3, [sp, #24]
 800e924:	2b09      	cmp	r3, #9
 800e926:	f200 8089 	bhi.w	800ea3c <_dtoa_r+0x2f4>
 800e92a:	2b05      	cmp	r3, #5
 800e92c:	bfc4      	itt	gt
 800e92e:	3b04      	subgt	r3, #4
 800e930:	9306      	strgt	r3, [sp, #24]
 800e932:	9b06      	ldr	r3, [sp, #24]
 800e934:	f1a3 0302 	sub.w	r3, r3, #2
 800e938:	bfcc      	ite	gt
 800e93a:	2500      	movgt	r5, #0
 800e93c:	2501      	movle	r5, #1
 800e93e:	2b03      	cmp	r3, #3
 800e940:	f200 8087 	bhi.w	800ea52 <_dtoa_r+0x30a>
 800e944:	e8df f003 	tbb	[pc, r3]
 800e948:	59383a2d 	.word	0x59383a2d
 800e94c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e950:	441d      	add	r5, r3
 800e952:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e956:	2b20      	cmp	r3, #32
 800e958:	bfc1      	itttt	gt
 800e95a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e95e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e962:	fa0b f303 	lslgt.w	r3, fp, r3
 800e966:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e96a:	bfda      	itte	le
 800e96c:	f1c3 0320 	rsble	r3, r3, #32
 800e970:	fa06 f003 	lslle.w	r0, r6, r3
 800e974:	4318      	orrgt	r0, r3
 800e976:	f7f1 fde5 	bl	8000544 <__aeabi_ui2d>
 800e97a:	2301      	movs	r3, #1
 800e97c:	4606      	mov	r6, r0
 800e97e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e982:	3d01      	subs	r5, #1
 800e984:	930e      	str	r3, [sp, #56]	; 0x38
 800e986:	e76a      	b.n	800e85e <_dtoa_r+0x116>
 800e988:	2301      	movs	r3, #1
 800e98a:	e7b2      	b.n	800e8f2 <_dtoa_r+0x1aa>
 800e98c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e98e:	e7b1      	b.n	800e8f4 <_dtoa_r+0x1ac>
 800e990:	9b04      	ldr	r3, [sp, #16]
 800e992:	9a00      	ldr	r2, [sp, #0]
 800e994:	1a9b      	subs	r3, r3, r2
 800e996:	9304      	str	r3, [sp, #16]
 800e998:	4253      	negs	r3, r2
 800e99a:	9307      	str	r3, [sp, #28]
 800e99c:	2300      	movs	r3, #0
 800e99e:	930a      	str	r3, [sp, #40]	; 0x28
 800e9a0:	e7bf      	b.n	800e922 <_dtoa_r+0x1da>
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	9308      	str	r3, [sp, #32]
 800e9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	dc55      	bgt.n	800ea58 <_dtoa_r+0x310>
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	9209      	str	r2, [sp, #36]	; 0x24
 800e9b6:	e00c      	b.n	800e9d2 <_dtoa_r+0x28a>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	e7f3      	b.n	800e9a4 <_dtoa_r+0x25c>
 800e9bc:	2300      	movs	r3, #0
 800e9be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9c0:	9308      	str	r3, [sp, #32]
 800e9c2:	9b00      	ldr	r3, [sp, #0]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	9302      	str	r3, [sp, #8]
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	2b01      	cmp	r3, #1
 800e9cc:	9303      	str	r3, [sp, #12]
 800e9ce:	bfb8      	it	lt
 800e9d0:	2301      	movlt	r3, #1
 800e9d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	6042      	str	r2, [r0, #4]
 800e9d8:	2204      	movs	r2, #4
 800e9da:	f102 0614 	add.w	r6, r2, #20
 800e9de:	429e      	cmp	r6, r3
 800e9e0:	6841      	ldr	r1, [r0, #4]
 800e9e2:	d93d      	bls.n	800ea60 <_dtoa_r+0x318>
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	f000 fca9 	bl	800f33c <_Balloc>
 800e9ea:	9001      	str	r0, [sp, #4]
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d13b      	bne.n	800ea68 <_dtoa_r+0x320>
 800e9f0:	4b11      	ldr	r3, [pc, #68]	; (800ea38 <_dtoa_r+0x2f0>)
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e9f8:	e6c0      	b.n	800e77c <_dtoa_r+0x34>
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	e7df      	b.n	800e9be <_dtoa_r+0x276>
 800e9fe:	bf00      	nop
 800ea00:	636f4361 	.word	0x636f4361
 800ea04:	3fd287a7 	.word	0x3fd287a7
 800ea08:	8b60c8b3 	.word	0x8b60c8b3
 800ea0c:	3fc68a28 	.word	0x3fc68a28
 800ea10:	509f79fb 	.word	0x509f79fb
 800ea14:	3fd34413 	.word	0x3fd34413
 800ea18:	080120ed 	.word	0x080120ed
 800ea1c:	08012104 	.word	0x08012104
 800ea20:	7ff00000 	.word	0x7ff00000
 800ea24:	080120e9 	.word	0x080120e9
 800ea28:	080120e0 	.word	0x080120e0
 800ea2c:	080120bd 	.word	0x080120bd
 800ea30:	3ff80000 	.word	0x3ff80000
 800ea34:	080121f8 	.word	0x080121f8
 800ea38:	0801215f 	.word	0x0801215f
 800ea3c:	2501      	movs	r5, #1
 800ea3e:	2300      	movs	r3, #0
 800ea40:	9306      	str	r3, [sp, #24]
 800ea42:	9508      	str	r5, [sp, #32]
 800ea44:	f04f 33ff 	mov.w	r3, #4294967295
 800ea48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	2312      	movs	r3, #18
 800ea50:	e7b0      	b.n	800e9b4 <_dtoa_r+0x26c>
 800ea52:	2301      	movs	r3, #1
 800ea54:	9308      	str	r3, [sp, #32]
 800ea56:	e7f5      	b.n	800ea44 <_dtoa_r+0x2fc>
 800ea58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ea5e:	e7b8      	b.n	800e9d2 <_dtoa_r+0x28a>
 800ea60:	3101      	adds	r1, #1
 800ea62:	6041      	str	r1, [r0, #4]
 800ea64:	0052      	lsls	r2, r2, #1
 800ea66:	e7b8      	b.n	800e9da <_dtoa_r+0x292>
 800ea68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea6a:	9a01      	ldr	r2, [sp, #4]
 800ea6c:	601a      	str	r2, [r3, #0]
 800ea6e:	9b03      	ldr	r3, [sp, #12]
 800ea70:	2b0e      	cmp	r3, #14
 800ea72:	f200 809d 	bhi.w	800ebb0 <_dtoa_r+0x468>
 800ea76:	2d00      	cmp	r5, #0
 800ea78:	f000 809a 	beq.w	800ebb0 <_dtoa_r+0x468>
 800ea7c:	9b00      	ldr	r3, [sp, #0]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	dd32      	ble.n	800eae8 <_dtoa_r+0x3a0>
 800ea82:	4ab7      	ldr	r2, [pc, #732]	; (800ed60 <_dtoa_r+0x618>)
 800ea84:	f003 030f 	and.w	r3, r3, #15
 800ea88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea90:	9b00      	ldr	r3, [sp, #0]
 800ea92:	05d8      	lsls	r0, r3, #23
 800ea94:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ea98:	d516      	bpl.n	800eac8 <_dtoa_r+0x380>
 800ea9a:	4bb2      	ldr	r3, [pc, #712]	; (800ed64 <_dtoa_r+0x61c>)
 800ea9c:	ec51 0b19 	vmov	r0, r1, d9
 800eaa0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eaa4:	f7f1 fef2 	bl	800088c <__aeabi_ddiv>
 800eaa8:	f007 070f 	and.w	r7, r7, #15
 800eaac:	4682      	mov	sl, r0
 800eaae:	468b      	mov	fp, r1
 800eab0:	2503      	movs	r5, #3
 800eab2:	4eac      	ldr	r6, [pc, #688]	; (800ed64 <_dtoa_r+0x61c>)
 800eab4:	b957      	cbnz	r7, 800eacc <_dtoa_r+0x384>
 800eab6:	4642      	mov	r2, r8
 800eab8:	464b      	mov	r3, r9
 800eaba:	4650      	mov	r0, sl
 800eabc:	4659      	mov	r1, fp
 800eabe:	f7f1 fee5 	bl	800088c <__aeabi_ddiv>
 800eac2:	4682      	mov	sl, r0
 800eac4:	468b      	mov	fp, r1
 800eac6:	e028      	b.n	800eb1a <_dtoa_r+0x3d2>
 800eac8:	2502      	movs	r5, #2
 800eaca:	e7f2      	b.n	800eab2 <_dtoa_r+0x36a>
 800eacc:	07f9      	lsls	r1, r7, #31
 800eace:	d508      	bpl.n	800eae2 <_dtoa_r+0x39a>
 800ead0:	4640      	mov	r0, r8
 800ead2:	4649      	mov	r1, r9
 800ead4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ead8:	f7f1 fdae 	bl	8000638 <__aeabi_dmul>
 800eadc:	3501      	adds	r5, #1
 800eade:	4680      	mov	r8, r0
 800eae0:	4689      	mov	r9, r1
 800eae2:	107f      	asrs	r7, r7, #1
 800eae4:	3608      	adds	r6, #8
 800eae6:	e7e5      	b.n	800eab4 <_dtoa_r+0x36c>
 800eae8:	f000 809b 	beq.w	800ec22 <_dtoa_r+0x4da>
 800eaec:	9b00      	ldr	r3, [sp, #0]
 800eaee:	4f9d      	ldr	r7, [pc, #628]	; (800ed64 <_dtoa_r+0x61c>)
 800eaf0:	425e      	negs	r6, r3
 800eaf2:	4b9b      	ldr	r3, [pc, #620]	; (800ed60 <_dtoa_r+0x618>)
 800eaf4:	f006 020f 	and.w	r2, r6, #15
 800eaf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb00:	ec51 0b19 	vmov	r0, r1, d9
 800eb04:	f7f1 fd98 	bl	8000638 <__aeabi_dmul>
 800eb08:	1136      	asrs	r6, r6, #4
 800eb0a:	4682      	mov	sl, r0
 800eb0c:	468b      	mov	fp, r1
 800eb0e:	2300      	movs	r3, #0
 800eb10:	2502      	movs	r5, #2
 800eb12:	2e00      	cmp	r6, #0
 800eb14:	d17a      	bne.n	800ec0c <_dtoa_r+0x4c4>
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d1d3      	bne.n	800eac2 <_dtoa_r+0x37a>
 800eb1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f000 8082 	beq.w	800ec26 <_dtoa_r+0x4de>
 800eb22:	4b91      	ldr	r3, [pc, #580]	; (800ed68 <_dtoa_r+0x620>)
 800eb24:	2200      	movs	r2, #0
 800eb26:	4650      	mov	r0, sl
 800eb28:	4659      	mov	r1, fp
 800eb2a:	f7f1 fff7 	bl	8000b1c <__aeabi_dcmplt>
 800eb2e:	2800      	cmp	r0, #0
 800eb30:	d079      	beq.n	800ec26 <_dtoa_r+0x4de>
 800eb32:	9b03      	ldr	r3, [sp, #12]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d076      	beq.n	800ec26 <_dtoa_r+0x4de>
 800eb38:	9b02      	ldr	r3, [sp, #8]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	dd36      	ble.n	800ebac <_dtoa_r+0x464>
 800eb3e:	9b00      	ldr	r3, [sp, #0]
 800eb40:	4650      	mov	r0, sl
 800eb42:	4659      	mov	r1, fp
 800eb44:	1e5f      	subs	r7, r3, #1
 800eb46:	2200      	movs	r2, #0
 800eb48:	4b88      	ldr	r3, [pc, #544]	; (800ed6c <_dtoa_r+0x624>)
 800eb4a:	f7f1 fd75 	bl	8000638 <__aeabi_dmul>
 800eb4e:	9e02      	ldr	r6, [sp, #8]
 800eb50:	4682      	mov	sl, r0
 800eb52:	468b      	mov	fp, r1
 800eb54:	3501      	adds	r5, #1
 800eb56:	4628      	mov	r0, r5
 800eb58:	f7f1 fd04 	bl	8000564 <__aeabi_i2d>
 800eb5c:	4652      	mov	r2, sl
 800eb5e:	465b      	mov	r3, fp
 800eb60:	f7f1 fd6a 	bl	8000638 <__aeabi_dmul>
 800eb64:	4b82      	ldr	r3, [pc, #520]	; (800ed70 <_dtoa_r+0x628>)
 800eb66:	2200      	movs	r2, #0
 800eb68:	f7f1 fbb0 	bl	80002cc <__adddf3>
 800eb6c:	46d0      	mov	r8, sl
 800eb6e:	46d9      	mov	r9, fp
 800eb70:	4682      	mov	sl, r0
 800eb72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800eb76:	2e00      	cmp	r6, #0
 800eb78:	d158      	bne.n	800ec2c <_dtoa_r+0x4e4>
 800eb7a:	4b7e      	ldr	r3, [pc, #504]	; (800ed74 <_dtoa_r+0x62c>)
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	4640      	mov	r0, r8
 800eb80:	4649      	mov	r1, r9
 800eb82:	f7f1 fba1 	bl	80002c8 <__aeabi_dsub>
 800eb86:	4652      	mov	r2, sl
 800eb88:	465b      	mov	r3, fp
 800eb8a:	4680      	mov	r8, r0
 800eb8c:	4689      	mov	r9, r1
 800eb8e:	f7f1 ffe3 	bl	8000b58 <__aeabi_dcmpgt>
 800eb92:	2800      	cmp	r0, #0
 800eb94:	f040 8295 	bne.w	800f0c2 <_dtoa_r+0x97a>
 800eb98:	4652      	mov	r2, sl
 800eb9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800eb9e:	4640      	mov	r0, r8
 800eba0:	4649      	mov	r1, r9
 800eba2:	f7f1 ffbb 	bl	8000b1c <__aeabi_dcmplt>
 800eba6:	2800      	cmp	r0, #0
 800eba8:	f040 8289 	bne.w	800f0be <_dtoa_r+0x976>
 800ebac:	ec5b ab19 	vmov	sl, fp, d9
 800ebb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	f2c0 8148 	blt.w	800ee48 <_dtoa_r+0x700>
 800ebb8:	9a00      	ldr	r2, [sp, #0]
 800ebba:	2a0e      	cmp	r2, #14
 800ebbc:	f300 8144 	bgt.w	800ee48 <_dtoa_r+0x700>
 800ebc0:	4b67      	ldr	r3, [pc, #412]	; (800ed60 <_dtoa_r+0x618>)
 800ebc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ebca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	f280 80d5 	bge.w	800ed7c <_dtoa_r+0x634>
 800ebd2:	9b03      	ldr	r3, [sp, #12]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	f300 80d1 	bgt.w	800ed7c <_dtoa_r+0x634>
 800ebda:	f040 826f 	bne.w	800f0bc <_dtoa_r+0x974>
 800ebde:	4b65      	ldr	r3, [pc, #404]	; (800ed74 <_dtoa_r+0x62c>)
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	4640      	mov	r0, r8
 800ebe4:	4649      	mov	r1, r9
 800ebe6:	f7f1 fd27 	bl	8000638 <__aeabi_dmul>
 800ebea:	4652      	mov	r2, sl
 800ebec:	465b      	mov	r3, fp
 800ebee:	f7f1 ffa9 	bl	8000b44 <__aeabi_dcmpge>
 800ebf2:	9e03      	ldr	r6, [sp, #12]
 800ebf4:	4637      	mov	r7, r6
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	f040 8245 	bne.w	800f086 <_dtoa_r+0x93e>
 800ebfc:	9d01      	ldr	r5, [sp, #4]
 800ebfe:	2331      	movs	r3, #49	; 0x31
 800ec00:	f805 3b01 	strb.w	r3, [r5], #1
 800ec04:	9b00      	ldr	r3, [sp, #0]
 800ec06:	3301      	adds	r3, #1
 800ec08:	9300      	str	r3, [sp, #0]
 800ec0a:	e240      	b.n	800f08e <_dtoa_r+0x946>
 800ec0c:	07f2      	lsls	r2, r6, #31
 800ec0e:	d505      	bpl.n	800ec1c <_dtoa_r+0x4d4>
 800ec10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec14:	f7f1 fd10 	bl	8000638 <__aeabi_dmul>
 800ec18:	3501      	adds	r5, #1
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	1076      	asrs	r6, r6, #1
 800ec1e:	3708      	adds	r7, #8
 800ec20:	e777      	b.n	800eb12 <_dtoa_r+0x3ca>
 800ec22:	2502      	movs	r5, #2
 800ec24:	e779      	b.n	800eb1a <_dtoa_r+0x3d2>
 800ec26:	9f00      	ldr	r7, [sp, #0]
 800ec28:	9e03      	ldr	r6, [sp, #12]
 800ec2a:	e794      	b.n	800eb56 <_dtoa_r+0x40e>
 800ec2c:	9901      	ldr	r1, [sp, #4]
 800ec2e:	4b4c      	ldr	r3, [pc, #304]	; (800ed60 <_dtoa_r+0x618>)
 800ec30:	4431      	add	r1, r6
 800ec32:	910d      	str	r1, [sp, #52]	; 0x34
 800ec34:	9908      	ldr	r1, [sp, #32]
 800ec36:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ec3a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec3e:	2900      	cmp	r1, #0
 800ec40:	d043      	beq.n	800ecca <_dtoa_r+0x582>
 800ec42:	494d      	ldr	r1, [pc, #308]	; (800ed78 <_dtoa_r+0x630>)
 800ec44:	2000      	movs	r0, #0
 800ec46:	f7f1 fe21 	bl	800088c <__aeabi_ddiv>
 800ec4a:	4652      	mov	r2, sl
 800ec4c:	465b      	mov	r3, fp
 800ec4e:	f7f1 fb3b 	bl	80002c8 <__aeabi_dsub>
 800ec52:	9d01      	ldr	r5, [sp, #4]
 800ec54:	4682      	mov	sl, r0
 800ec56:	468b      	mov	fp, r1
 800ec58:	4649      	mov	r1, r9
 800ec5a:	4640      	mov	r0, r8
 800ec5c:	f7f1 ff9c 	bl	8000b98 <__aeabi_d2iz>
 800ec60:	4606      	mov	r6, r0
 800ec62:	f7f1 fc7f 	bl	8000564 <__aeabi_i2d>
 800ec66:	4602      	mov	r2, r0
 800ec68:	460b      	mov	r3, r1
 800ec6a:	4640      	mov	r0, r8
 800ec6c:	4649      	mov	r1, r9
 800ec6e:	f7f1 fb2b 	bl	80002c8 <__aeabi_dsub>
 800ec72:	3630      	adds	r6, #48	; 0x30
 800ec74:	f805 6b01 	strb.w	r6, [r5], #1
 800ec78:	4652      	mov	r2, sl
 800ec7a:	465b      	mov	r3, fp
 800ec7c:	4680      	mov	r8, r0
 800ec7e:	4689      	mov	r9, r1
 800ec80:	f7f1 ff4c 	bl	8000b1c <__aeabi_dcmplt>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d163      	bne.n	800ed50 <_dtoa_r+0x608>
 800ec88:	4642      	mov	r2, r8
 800ec8a:	464b      	mov	r3, r9
 800ec8c:	4936      	ldr	r1, [pc, #216]	; (800ed68 <_dtoa_r+0x620>)
 800ec8e:	2000      	movs	r0, #0
 800ec90:	f7f1 fb1a 	bl	80002c8 <__aeabi_dsub>
 800ec94:	4652      	mov	r2, sl
 800ec96:	465b      	mov	r3, fp
 800ec98:	f7f1 ff40 	bl	8000b1c <__aeabi_dcmplt>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	f040 80b5 	bne.w	800ee0c <_dtoa_r+0x6c4>
 800eca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eca4:	429d      	cmp	r5, r3
 800eca6:	d081      	beq.n	800ebac <_dtoa_r+0x464>
 800eca8:	4b30      	ldr	r3, [pc, #192]	; (800ed6c <_dtoa_r+0x624>)
 800ecaa:	2200      	movs	r2, #0
 800ecac:	4650      	mov	r0, sl
 800ecae:	4659      	mov	r1, fp
 800ecb0:	f7f1 fcc2 	bl	8000638 <__aeabi_dmul>
 800ecb4:	4b2d      	ldr	r3, [pc, #180]	; (800ed6c <_dtoa_r+0x624>)
 800ecb6:	4682      	mov	sl, r0
 800ecb8:	468b      	mov	fp, r1
 800ecba:	4640      	mov	r0, r8
 800ecbc:	4649      	mov	r1, r9
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	f7f1 fcba 	bl	8000638 <__aeabi_dmul>
 800ecc4:	4680      	mov	r8, r0
 800ecc6:	4689      	mov	r9, r1
 800ecc8:	e7c6      	b.n	800ec58 <_dtoa_r+0x510>
 800ecca:	4650      	mov	r0, sl
 800eccc:	4659      	mov	r1, fp
 800ecce:	f7f1 fcb3 	bl	8000638 <__aeabi_dmul>
 800ecd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecd4:	9d01      	ldr	r5, [sp, #4]
 800ecd6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ecd8:	4682      	mov	sl, r0
 800ecda:	468b      	mov	fp, r1
 800ecdc:	4649      	mov	r1, r9
 800ecde:	4640      	mov	r0, r8
 800ece0:	f7f1 ff5a 	bl	8000b98 <__aeabi_d2iz>
 800ece4:	4606      	mov	r6, r0
 800ece6:	f7f1 fc3d 	bl	8000564 <__aeabi_i2d>
 800ecea:	3630      	adds	r6, #48	; 0x30
 800ecec:	4602      	mov	r2, r0
 800ecee:	460b      	mov	r3, r1
 800ecf0:	4640      	mov	r0, r8
 800ecf2:	4649      	mov	r1, r9
 800ecf4:	f7f1 fae8 	bl	80002c8 <__aeabi_dsub>
 800ecf8:	f805 6b01 	strb.w	r6, [r5], #1
 800ecfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ecfe:	429d      	cmp	r5, r3
 800ed00:	4680      	mov	r8, r0
 800ed02:	4689      	mov	r9, r1
 800ed04:	f04f 0200 	mov.w	r2, #0
 800ed08:	d124      	bne.n	800ed54 <_dtoa_r+0x60c>
 800ed0a:	4b1b      	ldr	r3, [pc, #108]	; (800ed78 <_dtoa_r+0x630>)
 800ed0c:	4650      	mov	r0, sl
 800ed0e:	4659      	mov	r1, fp
 800ed10:	f7f1 fadc 	bl	80002cc <__adddf3>
 800ed14:	4602      	mov	r2, r0
 800ed16:	460b      	mov	r3, r1
 800ed18:	4640      	mov	r0, r8
 800ed1a:	4649      	mov	r1, r9
 800ed1c:	f7f1 ff1c 	bl	8000b58 <__aeabi_dcmpgt>
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d173      	bne.n	800ee0c <_dtoa_r+0x6c4>
 800ed24:	4652      	mov	r2, sl
 800ed26:	465b      	mov	r3, fp
 800ed28:	4913      	ldr	r1, [pc, #76]	; (800ed78 <_dtoa_r+0x630>)
 800ed2a:	2000      	movs	r0, #0
 800ed2c:	f7f1 facc 	bl	80002c8 <__aeabi_dsub>
 800ed30:	4602      	mov	r2, r0
 800ed32:	460b      	mov	r3, r1
 800ed34:	4640      	mov	r0, r8
 800ed36:	4649      	mov	r1, r9
 800ed38:	f7f1 fef0 	bl	8000b1c <__aeabi_dcmplt>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	f43f af35 	beq.w	800ebac <_dtoa_r+0x464>
 800ed42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ed44:	1e6b      	subs	r3, r5, #1
 800ed46:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed48:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed4c:	2b30      	cmp	r3, #48	; 0x30
 800ed4e:	d0f8      	beq.n	800ed42 <_dtoa_r+0x5fa>
 800ed50:	9700      	str	r7, [sp, #0]
 800ed52:	e049      	b.n	800ede8 <_dtoa_r+0x6a0>
 800ed54:	4b05      	ldr	r3, [pc, #20]	; (800ed6c <_dtoa_r+0x624>)
 800ed56:	f7f1 fc6f 	bl	8000638 <__aeabi_dmul>
 800ed5a:	4680      	mov	r8, r0
 800ed5c:	4689      	mov	r9, r1
 800ed5e:	e7bd      	b.n	800ecdc <_dtoa_r+0x594>
 800ed60:	080121f8 	.word	0x080121f8
 800ed64:	080121d0 	.word	0x080121d0
 800ed68:	3ff00000 	.word	0x3ff00000
 800ed6c:	40240000 	.word	0x40240000
 800ed70:	401c0000 	.word	0x401c0000
 800ed74:	40140000 	.word	0x40140000
 800ed78:	3fe00000 	.word	0x3fe00000
 800ed7c:	9d01      	ldr	r5, [sp, #4]
 800ed7e:	4656      	mov	r6, sl
 800ed80:	465f      	mov	r7, fp
 800ed82:	4642      	mov	r2, r8
 800ed84:	464b      	mov	r3, r9
 800ed86:	4630      	mov	r0, r6
 800ed88:	4639      	mov	r1, r7
 800ed8a:	f7f1 fd7f 	bl	800088c <__aeabi_ddiv>
 800ed8e:	f7f1 ff03 	bl	8000b98 <__aeabi_d2iz>
 800ed92:	4682      	mov	sl, r0
 800ed94:	f7f1 fbe6 	bl	8000564 <__aeabi_i2d>
 800ed98:	4642      	mov	r2, r8
 800ed9a:	464b      	mov	r3, r9
 800ed9c:	f7f1 fc4c 	bl	8000638 <__aeabi_dmul>
 800eda0:	4602      	mov	r2, r0
 800eda2:	460b      	mov	r3, r1
 800eda4:	4630      	mov	r0, r6
 800eda6:	4639      	mov	r1, r7
 800eda8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800edac:	f7f1 fa8c 	bl	80002c8 <__aeabi_dsub>
 800edb0:	f805 6b01 	strb.w	r6, [r5], #1
 800edb4:	9e01      	ldr	r6, [sp, #4]
 800edb6:	9f03      	ldr	r7, [sp, #12]
 800edb8:	1bae      	subs	r6, r5, r6
 800edba:	42b7      	cmp	r7, r6
 800edbc:	4602      	mov	r2, r0
 800edbe:	460b      	mov	r3, r1
 800edc0:	d135      	bne.n	800ee2e <_dtoa_r+0x6e6>
 800edc2:	f7f1 fa83 	bl	80002cc <__adddf3>
 800edc6:	4642      	mov	r2, r8
 800edc8:	464b      	mov	r3, r9
 800edca:	4606      	mov	r6, r0
 800edcc:	460f      	mov	r7, r1
 800edce:	f7f1 fec3 	bl	8000b58 <__aeabi_dcmpgt>
 800edd2:	b9d0      	cbnz	r0, 800ee0a <_dtoa_r+0x6c2>
 800edd4:	4642      	mov	r2, r8
 800edd6:	464b      	mov	r3, r9
 800edd8:	4630      	mov	r0, r6
 800edda:	4639      	mov	r1, r7
 800eddc:	f7f1 fe94 	bl	8000b08 <__aeabi_dcmpeq>
 800ede0:	b110      	cbz	r0, 800ede8 <_dtoa_r+0x6a0>
 800ede2:	f01a 0f01 	tst.w	sl, #1
 800ede6:	d110      	bne.n	800ee0a <_dtoa_r+0x6c2>
 800ede8:	4620      	mov	r0, r4
 800edea:	ee18 1a10 	vmov	r1, s16
 800edee:	f000 fae5 	bl	800f3bc <_Bfree>
 800edf2:	2300      	movs	r3, #0
 800edf4:	9800      	ldr	r0, [sp, #0]
 800edf6:	702b      	strb	r3, [r5, #0]
 800edf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edfa:	3001      	adds	r0, #1
 800edfc:	6018      	str	r0, [r3, #0]
 800edfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f43f acf1 	beq.w	800e7e8 <_dtoa_r+0xa0>
 800ee06:	601d      	str	r5, [r3, #0]
 800ee08:	e4ee      	b.n	800e7e8 <_dtoa_r+0xa0>
 800ee0a:	9f00      	ldr	r7, [sp, #0]
 800ee0c:	462b      	mov	r3, r5
 800ee0e:	461d      	mov	r5, r3
 800ee10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee14:	2a39      	cmp	r2, #57	; 0x39
 800ee16:	d106      	bne.n	800ee26 <_dtoa_r+0x6de>
 800ee18:	9a01      	ldr	r2, [sp, #4]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d1f7      	bne.n	800ee0e <_dtoa_r+0x6c6>
 800ee1e:	9901      	ldr	r1, [sp, #4]
 800ee20:	2230      	movs	r2, #48	; 0x30
 800ee22:	3701      	adds	r7, #1
 800ee24:	700a      	strb	r2, [r1, #0]
 800ee26:	781a      	ldrb	r2, [r3, #0]
 800ee28:	3201      	adds	r2, #1
 800ee2a:	701a      	strb	r2, [r3, #0]
 800ee2c:	e790      	b.n	800ed50 <_dtoa_r+0x608>
 800ee2e:	4ba6      	ldr	r3, [pc, #664]	; (800f0c8 <_dtoa_r+0x980>)
 800ee30:	2200      	movs	r2, #0
 800ee32:	f7f1 fc01 	bl	8000638 <__aeabi_dmul>
 800ee36:	2200      	movs	r2, #0
 800ee38:	2300      	movs	r3, #0
 800ee3a:	4606      	mov	r6, r0
 800ee3c:	460f      	mov	r7, r1
 800ee3e:	f7f1 fe63 	bl	8000b08 <__aeabi_dcmpeq>
 800ee42:	2800      	cmp	r0, #0
 800ee44:	d09d      	beq.n	800ed82 <_dtoa_r+0x63a>
 800ee46:	e7cf      	b.n	800ede8 <_dtoa_r+0x6a0>
 800ee48:	9a08      	ldr	r2, [sp, #32]
 800ee4a:	2a00      	cmp	r2, #0
 800ee4c:	f000 80d7 	beq.w	800effe <_dtoa_r+0x8b6>
 800ee50:	9a06      	ldr	r2, [sp, #24]
 800ee52:	2a01      	cmp	r2, #1
 800ee54:	f300 80ba 	bgt.w	800efcc <_dtoa_r+0x884>
 800ee58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee5a:	2a00      	cmp	r2, #0
 800ee5c:	f000 80b2 	beq.w	800efc4 <_dtoa_r+0x87c>
 800ee60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ee64:	9e07      	ldr	r6, [sp, #28]
 800ee66:	9d04      	ldr	r5, [sp, #16]
 800ee68:	9a04      	ldr	r2, [sp, #16]
 800ee6a:	441a      	add	r2, r3
 800ee6c:	9204      	str	r2, [sp, #16]
 800ee6e:	9a05      	ldr	r2, [sp, #20]
 800ee70:	2101      	movs	r1, #1
 800ee72:	441a      	add	r2, r3
 800ee74:	4620      	mov	r0, r4
 800ee76:	9205      	str	r2, [sp, #20]
 800ee78:	f000 fb58 	bl	800f52c <__i2b>
 800ee7c:	4607      	mov	r7, r0
 800ee7e:	2d00      	cmp	r5, #0
 800ee80:	dd0c      	ble.n	800ee9c <_dtoa_r+0x754>
 800ee82:	9b05      	ldr	r3, [sp, #20]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	dd09      	ble.n	800ee9c <_dtoa_r+0x754>
 800ee88:	42ab      	cmp	r3, r5
 800ee8a:	9a04      	ldr	r2, [sp, #16]
 800ee8c:	bfa8      	it	ge
 800ee8e:	462b      	movge	r3, r5
 800ee90:	1ad2      	subs	r2, r2, r3
 800ee92:	9204      	str	r2, [sp, #16]
 800ee94:	9a05      	ldr	r2, [sp, #20]
 800ee96:	1aed      	subs	r5, r5, r3
 800ee98:	1ad3      	subs	r3, r2, r3
 800ee9a:	9305      	str	r3, [sp, #20]
 800ee9c:	9b07      	ldr	r3, [sp, #28]
 800ee9e:	b31b      	cbz	r3, 800eee8 <_dtoa_r+0x7a0>
 800eea0:	9b08      	ldr	r3, [sp, #32]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	f000 80af 	beq.w	800f006 <_dtoa_r+0x8be>
 800eea8:	2e00      	cmp	r6, #0
 800eeaa:	dd13      	ble.n	800eed4 <_dtoa_r+0x78c>
 800eeac:	4639      	mov	r1, r7
 800eeae:	4632      	mov	r2, r6
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	f000 fbfb 	bl	800f6ac <__pow5mult>
 800eeb6:	ee18 2a10 	vmov	r2, s16
 800eeba:	4601      	mov	r1, r0
 800eebc:	4607      	mov	r7, r0
 800eebe:	4620      	mov	r0, r4
 800eec0:	f000 fb4a 	bl	800f558 <__multiply>
 800eec4:	ee18 1a10 	vmov	r1, s16
 800eec8:	4680      	mov	r8, r0
 800eeca:	4620      	mov	r0, r4
 800eecc:	f000 fa76 	bl	800f3bc <_Bfree>
 800eed0:	ee08 8a10 	vmov	s16, r8
 800eed4:	9b07      	ldr	r3, [sp, #28]
 800eed6:	1b9a      	subs	r2, r3, r6
 800eed8:	d006      	beq.n	800eee8 <_dtoa_r+0x7a0>
 800eeda:	ee18 1a10 	vmov	r1, s16
 800eede:	4620      	mov	r0, r4
 800eee0:	f000 fbe4 	bl	800f6ac <__pow5mult>
 800eee4:	ee08 0a10 	vmov	s16, r0
 800eee8:	2101      	movs	r1, #1
 800eeea:	4620      	mov	r0, r4
 800eeec:	f000 fb1e 	bl	800f52c <__i2b>
 800eef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	4606      	mov	r6, r0
 800eef6:	f340 8088 	ble.w	800f00a <_dtoa_r+0x8c2>
 800eefa:	461a      	mov	r2, r3
 800eefc:	4601      	mov	r1, r0
 800eefe:	4620      	mov	r0, r4
 800ef00:	f000 fbd4 	bl	800f6ac <__pow5mult>
 800ef04:	9b06      	ldr	r3, [sp, #24]
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	4606      	mov	r6, r0
 800ef0a:	f340 8081 	ble.w	800f010 <_dtoa_r+0x8c8>
 800ef0e:	f04f 0800 	mov.w	r8, #0
 800ef12:	6933      	ldr	r3, [r6, #16]
 800ef14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ef18:	6918      	ldr	r0, [r3, #16]
 800ef1a:	f000 fab7 	bl	800f48c <__hi0bits>
 800ef1e:	f1c0 0020 	rsb	r0, r0, #32
 800ef22:	9b05      	ldr	r3, [sp, #20]
 800ef24:	4418      	add	r0, r3
 800ef26:	f010 001f 	ands.w	r0, r0, #31
 800ef2a:	f000 8092 	beq.w	800f052 <_dtoa_r+0x90a>
 800ef2e:	f1c0 0320 	rsb	r3, r0, #32
 800ef32:	2b04      	cmp	r3, #4
 800ef34:	f340 808a 	ble.w	800f04c <_dtoa_r+0x904>
 800ef38:	f1c0 001c 	rsb	r0, r0, #28
 800ef3c:	9b04      	ldr	r3, [sp, #16]
 800ef3e:	4403      	add	r3, r0
 800ef40:	9304      	str	r3, [sp, #16]
 800ef42:	9b05      	ldr	r3, [sp, #20]
 800ef44:	4403      	add	r3, r0
 800ef46:	4405      	add	r5, r0
 800ef48:	9305      	str	r3, [sp, #20]
 800ef4a:	9b04      	ldr	r3, [sp, #16]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	dd07      	ble.n	800ef60 <_dtoa_r+0x818>
 800ef50:	ee18 1a10 	vmov	r1, s16
 800ef54:	461a      	mov	r2, r3
 800ef56:	4620      	mov	r0, r4
 800ef58:	f000 fc02 	bl	800f760 <__lshift>
 800ef5c:	ee08 0a10 	vmov	s16, r0
 800ef60:	9b05      	ldr	r3, [sp, #20]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	dd05      	ble.n	800ef72 <_dtoa_r+0x82a>
 800ef66:	4631      	mov	r1, r6
 800ef68:	461a      	mov	r2, r3
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f000 fbf8 	bl	800f760 <__lshift>
 800ef70:	4606      	mov	r6, r0
 800ef72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d06e      	beq.n	800f056 <_dtoa_r+0x90e>
 800ef78:	ee18 0a10 	vmov	r0, s16
 800ef7c:	4631      	mov	r1, r6
 800ef7e:	f000 fc5f 	bl	800f840 <__mcmp>
 800ef82:	2800      	cmp	r0, #0
 800ef84:	da67      	bge.n	800f056 <_dtoa_r+0x90e>
 800ef86:	9b00      	ldr	r3, [sp, #0]
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	ee18 1a10 	vmov	r1, s16
 800ef8e:	9300      	str	r3, [sp, #0]
 800ef90:	220a      	movs	r2, #10
 800ef92:	2300      	movs	r3, #0
 800ef94:	4620      	mov	r0, r4
 800ef96:	f000 fa33 	bl	800f400 <__multadd>
 800ef9a:	9b08      	ldr	r3, [sp, #32]
 800ef9c:	ee08 0a10 	vmov	s16, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f000 81b1 	beq.w	800f308 <_dtoa_r+0xbc0>
 800efa6:	2300      	movs	r3, #0
 800efa8:	4639      	mov	r1, r7
 800efaa:	220a      	movs	r2, #10
 800efac:	4620      	mov	r0, r4
 800efae:	f000 fa27 	bl	800f400 <__multadd>
 800efb2:	9b02      	ldr	r3, [sp, #8]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	4607      	mov	r7, r0
 800efb8:	f300 808e 	bgt.w	800f0d8 <_dtoa_r+0x990>
 800efbc:	9b06      	ldr	r3, [sp, #24]
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	dc51      	bgt.n	800f066 <_dtoa_r+0x91e>
 800efc2:	e089      	b.n	800f0d8 <_dtoa_r+0x990>
 800efc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800efc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800efca:	e74b      	b.n	800ee64 <_dtoa_r+0x71c>
 800efcc:	9b03      	ldr	r3, [sp, #12]
 800efce:	1e5e      	subs	r6, r3, #1
 800efd0:	9b07      	ldr	r3, [sp, #28]
 800efd2:	42b3      	cmp	r3, r6
 800efd4:	bfbf      	itttt	lt
 800efd6:	9b07      	ldrlt	r3, [sp, #28]
 800efd8:	9607      	strlt	r6, [sp, #28]
 800efda:	1af2      	sublt	r2, r6, r3
 800efdc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800efde:	bfb6      	itet	lt
 800efe0:	189b      	addlt	r3, r3, r2
 800efe2:	1b9e      	subge	r6, r3, r6
 800efe4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800efe6:	9b03      	ldr	r3, [sp, #12]
 800efe8:	bfb8      	it	lt
 800efea:	2600      	movlt	r6, #0
 800efec:	2b00      	cmp	r3, #0
 800efee:	bfb7      	itett	lt
 800eff0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800eff4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800eff8:	1a9d      	sublt	r5, r3, r2
 800effa:	2300      	movlt	r3, #0
 800effc:	e734      	b.n	800ee68 <_dtoa_r+0x720>
 800effe:	9e07      	ldr	r6, [sp, #28]
 800f000:	9d04      	ldr	r5, [sp, #16]
 800f002:	9f08      	ldr	r7, [sp, #32]
 800f004:	e73b      	b.n	800ee7e <_dtoa_r+0x736>
 800f006:	9a07      	ldr	r2, [sp, #28]
 800f008:	e767      	b.n	800eeda <_dtoa_r+0x792>
 800f00a:	9b06      	ldr	r3, [sp, #24]
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	dc18      	bgt.n	800f042 <_dtoa_r+0x8fa>
 800f010:	f1ba 0f00 	cmp.w	sl, #0
 800f014:	d115      	bne.n	800f042 <_dtoa_r+0x8fa>
 800f016:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f01a:	b993      	cbnz	r3, 800f042 <_dtoa_r+0x8fa>
 800f01c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f020:	0d1b      	lsrs	r3, r3, #20
 800f022:	051b      	lsls	r3, r3, #20
 800f024:	b183      	cbz	r3, 800f048 <_dtoa_r+0x900>
 800f026:	9b04      	ldr	r3, [sp, #16]
 800f028:	3301      	adds	r3, #1
 800f02a:	9304      	str	r3, [sp, #16]
 800f02c:	9b05      	ldr	r3, [sp, #20]
 800f02e:	3301      	adds	r3, #1
 800f030:	9305      	str	r3, [sp, #20]
 800f032:	f04f 0801 	mov.w	r8, #1
 800f036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f47f af6a 	bne.w	800ef12 <_dtoa_r+0x7ca>
 800f03e:	2001      	movs	r0, #1
 800f040:	e76f      	b.n	800ef22 <_dtoa_r+0x7da>
 800f042:	f04f 0800 	mov.w	r8, #0
 800f046:	e7f6      	b.n	800f036 <_dtoa_r+0x8ee>
 800f048:	4698      	mov	r8, r3
 800f04a:	e7f4      	b.n	800f036 <_dtoa_r+0x8ee>
 800f04c:	f43f af7d 	beq.w	800ef4a <_dtoa_r+0x802>
 800f050:	4618      	mov	r0, r3
 800f052:	301c      	adds	r0, #28
 800f054:	e772      	b.n	800ef3c <_dtoa_r+0x7f4>
 800f056:	9b03      	ldr	r3, [sp, #12]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	dc37      	bgt.n	800f0cc <_dtoa_r+0x984>
 800f05c:	9b06      	ldr	r3, [sp, #24]
 800f05e:	2b02      	cmp	r3, #2
 800f060:	dd34      	ble.n	800f0cc <_dtoa_r+0x984>
 800f062:	9b03      	ldr	r3, [sp, #12]
 800f064:	9302      	str	r3, [sp, #8]
 800f066:	9b02      	ldr	r3, [sp, #8]
 800f068:	b96b      	cbnz	r3, 800f086 <_dtoa_r+0x93e>
 800f06a:	4631      	mov	r1, r6
 800f06c:	2205      	movs	r2, #5
 800f06e:	4620      	mov	r0, r4
 800f070:	f000 f9c6 	bl	800f400 <__multadd>
 800f074:	4601      	mov	r1, r0
 800f076:	4606      	mov	r6, r0
 800f078:	ee18 0a10 	vmov	r0, s16
 800f07c:	f000 fbe0 	bl	800f840 <__mcmp>
 800f080:	2800      	cmp	r0, #0
 800f082:	f73f adbb 	bgt.w	800ebfc <_dtoa_r+0x4b4>
 800f086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f088:	9d01      	ldr	r5, [sp, #4]
 800f08a:	43db      	mvns	r3, r3
 800f08c:	9300      	str	r3, [sp, #0]
 800f08e:	f04f 0800 	mov.w	r8, #0
 800f092:	4631      	mov	r1, r6
 800f094:	4620      	mov	r0, r4
 800f096:	f000 f991 	bl	800f3bc <_Bfree>
 800f09a:	2f00      	cmp	r7, #0
 800f09c:	f43f aea4 	beq.w	800ede8 <_dtoa_r+0x6a0>
 800f0a0:	f1b8 0f00 	cmp.w	r8, #0
 800f0a4:	d005      	beq.n	800f0b2 <_dtoa_r+0x96a>
 800f0a6:	45b8      	cmp	r8, r7
 800f0a8:	d003      	beq.n	800f0b2 <_dtoa_r+0x96a>
 800f0aa:	4641      	mov	r1, r8
 800f0ac:	4620      	mov	r0, r4
 800f0ae:	f000 f985 	bl	800f3bc <_Bfree>
 800f0b2:	4639      	mov	r1, r7
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f000 f981 	bl	800f3bc <_Bfree>
 800f0ba:	e695      	b.n	800ede8 <_dtoa_r+0x6a0>
 800f0bc:	2600      	movs	r6, #0
 800f0be:	4637      	mov	r7, r6
 800f0c0:	e7e1      	b.n	800f086 <_dtoa_r+0x93e>
 800f0c2:	9700      	str	r7, [sp, #0]
 800f0c4:	4637      	mov	r7, r6
 800f0c6:	e599      	b.n	800ebfc <_dtoa_r+0x4b4>
 800f0c8:	40240000 	.word	0x40240000
 800f0cc:	9b08      	ldr	r3, [sp, #32]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	f000 80ca 	beq.w	800f268 <_dtoa_r+0xb20>
 800f0d4:	9b03      	ldr	r3, [sp, #12]
 800f0d6:	9302      	str	r3, [sp, #8]
 800f0d8:	2d00      	cmp	r5, #0
 800f0da:	dd05      	ble.n	800f0e8 <_dtoa_r+0x9a0>
 800f0dc:	4639      	mov	r1, r7
 800f0de:	462a      	mov	r2, r5
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	f000 fb3d 	bl	800f760 <__lshift>
 800f0e6:	4607      	mov	r7, r0
 800f0e8:	f1b8 0f00 	cmp.w	r8, #0
 800f0ec:	d05b      	beq.n	800f1a6 <_dtoa_r+0xa5e>
 800f0ee:	6879      	ldr	r1, [r7, #4]
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f000 f923 	bl	800f33c <_Balloc>
 800f0f6:	4605      	mov	r5, r0
 800f0f8:	b928      	cbnz	r0, 800f106 <_dtoa_r+0x9be>
 800f0fa:	4b87      	ldr	r3, [pc, #540]	; (800f318 <_dtoa_r+0xbd0>)
 800f0fc:	4602      	mov	r2, r0
 800f0fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f102:	f7ff bb3b 	b.w	800e77c <_dtoa_r+0x34>
 800f106:	693a      	ldr	r2, [r7, #16]
 800f108:	3202      	adds	r2, #2
 800f10a:	0092      	lsls	r2, r2, #2
 800f10c:	f107 010c 	add.w	r1, r7, #12
 800f110:	300c      	adds	r0, #12
 800f112:	f7fe fddb 	bl	800dccc <memcpy>
 800f116:	2201      	movs	r2, #1
 800f118:	4629      	mov	r1, r5
 800f11a:	4620      	mov	r0, r4
 800f11c:	f000 fb20 	bl	800f760 <__lshift>
 800f120:	9b01      	ldr	r3, [sp, #4]
 800f122:	f103 0901 	add.w	r9, r3, #1
 800f126:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f12a:	4413      	add	r3, r2
 800f12c:	9305      	str	r3, [sp, #20]
 800f12e:	f00a 0301 	and.w	r3, sl, #1
 800f132:	46b8      	mov	r8, r7
 800f134:	9304      	str	r3, [sp, #16]
 800f136:	4607      	mov	r7, r0
 800f138:	4631      	mov	r1, r6
 800f13a:	ee18 0a10 	vmov	r0, s16
 800f13e:	f7ff fa78 	bl	800e632 <quorem>
 800f142:	4641      	mov	r1, r8
 800f144:	9002      	str	r0, [sp, #8]
 800f146:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f14a:	ee18 0a10 	vmov	r0, s16
 800f14e:	f000 fb77 	bl	800f840 <__mcmp>
 800f152:	463a      	mov	r2, r7
 800f154:	9003      	str	r0, [sp, #12]
 800f156:	4631      	mov	r1, r6
 800f158:	4620      	mov	r0, r4
 800f15a:	f000 fb8d 	bl	800f878 <__mdiff>
 800f15e:	68c2      	ldr	r2, [r0, #12]
 800f160:	f109 3bff 	add.w	fp, r9, #4294967295
 800f164:	4605      	mov	r5, r0
 800f166:	bb02      	cbnz	r2, 800f1aa <_dtoa_r+0xa62>
 800f168:	4601      	mov	r1, r0
 800f16a:	ee18 0a10 	vmov	r0, s16
 800f16e:	f000 fb67 	bl	800f840 <__mcmp>
 800f172:	4602      	mov	r2, r0
 800f174:	4629      	mov	r1, r5
 800f176:	4620      	mov	r0, r4
 800f178:	9207      	str	r2, [sp, #28]
 800f17a:	f000 f91f 	bl	800f3bc <_Bfree>
 800f17e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f182:	ea43 0102 	orr.w	r1, r3, r2
 800f186:	9b04      	ldr	r3, [sp, #16]
 800f188:	430b      	orrs	r3, r1
 800f18a:	464d      	mov	r5, r9
 800f18c:	d10f      	bne.n	800f1ae <_dtoa_r+0xa66>
 800f18e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f192:	d02a      	beq.n	800f1ea <_dtoa_r+0xaa2>
 800f194:	9b03      	ldr	r3, [sp, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	dd02      	ble.n	800f1a0 <_dtoa_r+0xa58>
 800f19a:	9b02      	ldr	r3, [sp, #8]
 800f19c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f1a0:	f88b a000 	strb.w	sl, [fp]
 800f1a4:	e775      	b.n	800f092 <_dtoa_r+0x94a>
 800f1a6:	4638      	mov	r0, r7
 800f1a8:	e7ba      	b.n	800f120 <_dtoa_r+0x9d8>
 800f1aa:	2201      	movs	r2, #1
 800f1ac:	e7e2      	b.n	800f174 <_dtoa_r+0xa2c>
 800f1ae:	9b03      	ldr	r3, [sp, #12]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	db04      	blt.n	800f1be <_dtoa_r+0xa76>
 800f1b4:	9906      	ldr	r1, [sp, #24]
 800f1b6:	430b      	orrs	r3, r1
 800f1b8:	9904      	ldr	r1, [sp, #16]
 800f1ba:	430b      	orrs	r3, r1
 800f1bc:	d122      	bne.n	800f204 <_dtoa_r+0xabc>
 800f1be:	2a00      	cmp	r2, #0
 800f1c0:	ddee      	ble.n	800f1a0 <_dtoa_r+0xa58>
 800f1c2:	ee18 1a10 	vmov	r1, s16
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	f000 fac9 	bl	800f760 <__lshift>
 800f1ce:	4631      	mov	r1, r6
 800f1d0:	ee08 0a10 	vmov	s16, r0
 800f1d4:	f000 fb34 	bl	800f840 <__mcmp>
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	dc03      	bgt.n	800f1e4 <_dtoa_r+0xa9c>
 800f1dc:	d1e0      	bne.n	800f1a0 <_dtoa_r+0xa58>
 800f1de:	f01a 0f01 	tst.w	sl, #1
 800f1e2:	d0dd      	beq.n	800f1a0 <_dtoa_r+0xa58>
 800f1e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f1e8:	d1d7      	bne.n	800f19a <_dtoa_r+0xa52>
 800f1ea:	2339      	movs	r3, #57	; 0x39
 800f1ec:	f88b 3000 	strb.w	r3, [fp]
 800f1f0:	462b      	mov	r3, r5
 800f1f2:	461d      	mov	r5, r3
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f1fa:	2a39      	cmp	r2, #57	; 0x39
 800f1fc:	d071      	beq.n	800f2e2 <_dtoa_r+0xb9a>
 800f1fe:	3201      	adds	r2, #1
 800f200:	701a      	strb	r2, [r3, #0]
 800f202:	e746      	b.n	800f092 <_dtoa_r+0x94a>
 800f204:	2a00      	cmp	r2, #0
 800f206:	dd07      	ble.n	800f218 <_dtoa_r+0xad0>
 800f208:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f20c:	d0ed      	beq.n	800f1ea <_dtoa_r+0xaa2>
 800f20e:	f10a 0301 	add.w	r3, sl, #1
 800f212:	f88b 3000 	strb.w	r3, [fp]
 800f216:	e73c      	b.n	800f092 <_dtoa_r+0x94a>
 800f218:	9b05      	ldr	r3, [sp, #20]
 800f21a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f21e:	4599      	cmp	r9, r3
 800f220:	d047      	beq.n	800f2b2 <_dtoa_r+0xb6a>
 800f222:	ee18 1a10 	vmov	r1, s16
 800f226:	2300      	movs	r3, #0
 800f228:	220a      	movs	r2, #10
 800f22a:	4620      	mov	r0, r4
 800f22c:	f000 f8e8 	bl	800f400 <__multadd>
 800f230:	45b8      	cmp	r8, r7
 800f232:	ee08 0a10 	vmov	s16, r0
 800f236:	f04f 0300 	mov.w	r3, #0
 800f23a:	f04f 020a 	mov.w	r2, #10
 800f23e:	4641      	mov	r1, r8
 800f240:	4620      	mov	r0, r4
 800f242:	d106      	bne.n	800f252 <_dtoa_r+0xb0a>
 800f244:	f000 f8dc 	bl	800f400 <__multadd>
 800f248:	4680      	mov	r8, r0
 800f24a:	4607      	mov	r7, r0
 800f24c:	f109 0901 	add.w	r9, r9, #1
 800f250:	e772      	b.n	800f138 <_dtoa_r+0x9f0>
 800f252:	f000 f8d5 	bl	800f400 <__multadd>
 800f256:	4639      	mov	r1, r7
 800f258:	4680      	mov	r8, r0
 800f25a:	2300      	movs	r3, #0
 800f25c:	220a      	movs	r2, #10
 800f25e:	4620      	mov	r0, r4
 800f260:	f000 f8ce 	bl	800f400 <__multadd>
 800f264:	4607      	mov	r7, r0
 800f266:	e7f1      	b.n	800f24c <_dtoa_r+0xb04>
 800f268:	9b03      	ldr	r3, [sp, #12]
 800f26a:	9302      	str	r3, [sp, #8]
 800f26c:	9d01      	ldr	r5, [sp, #4]
 800f26e:	ee18 0a10 	vmov	r0, s16
 800f272:	4631      	mov	r1, r6
 800f274:	f7ff f9dd 	bl	800e632 <quorem>
 800f278:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f27c:	9b01      	ldr	r3, [sp, #4]
 800f27e:	f805 ab01 	strb.w	sl, [r5], #1
 800f282:	1aea      	subs	r2, r5, r3
 800f284:	9b02      	ldr	r3, [sp, #8]
 800f286:	4293      	cmp	r3, r2
 800f288:	dd09      	ble.n	800f29e <_dtoa_r+0xb56>
 800f28a:	ee18 1a10 	vmov	r1, s16
 800f28e:	2300      	movs	r3, #0
 800f290:	220a      	movs	r2, #10
 800f292:	4620      	mov	r0, r4
 800f294:	f000 f8b4 	bl	800f400 <__multadd>
 800f298:	ee08 0a10 	vmov	s16, r0
 800f29c:	e7e7      	b.n	800f26e <_dtoa_r+0xb26>
 800f29e:	9b02      	ldr	r3, [sp, #8]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	bfc8      	it	gt
 800f2a4:	461d      	movgt	r5, r3
 800f2a6:	9b01      	ldr	r3, [sp, #4]
 800f2a8:	bfd8      	it	le
 800f2aa:	2501      	movle	r5, #1
 800f2ac:	441d      	add	r5, r3
 800f2ae:	f04f 0800 	mov.w	r8, #0
 800f2b2:	ee18 1a10 	vmov	r1, s16
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f000 fa51 	bl	800f760 <__lshift>
 800f2be:	4631      	mov	r1, r6
 800f2c0:	ee08 0a10 	vmov	s16, r0
 800f2c4:	f000 fabc 	bl	800f840 <__mcmp>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	dc91      	bgt.n	800f1f0 <_dtoa_r+0xaa8>
 800f2cc:	d102      	bne.n	800f2d4 <_dtoa_r+0xb8c>
 800f2ce:	f01a 0f01 	tst.w	sl, #1
 800f2d2:	d18d      	bne.n	800f1f0 <_dtoa_r+0xaa8>
 800f2d4:	462b      	mov	r3, r5
 800f2d6:	461d      	mov	r5, r3
 800f2d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f2dc:	2a30      	cmp	r2, #48	; 0x30
 800f2de:	d0fa      	beq.n	800f2d6 <_dtoa_r+0xb8e>
 800f2e0:	e6d7      	b.n	800f092 <_dtoa_r+0x94a>
 800f2e2:	9a01      	ldr	r2, [sp, #4]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d184      	bne.n	800f1f2 <_dtoa_r+0xaaa>
 800f2e8:	9b00      	ldr	r3, [sp, #0]
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	9300      	str	r3, [sp, #0]
 800f2ee:	2331      	movs	r3, #49	; 0x31
 800f2f0:	7013      	strb	r3, [r2, #0]
 800f2f2:	e6ce      	b.n	800f092 <_dtoa_r+0x94a>
 800f2f4:	4b09      	ldr	r3, [pc, #36]	; (800f31c <_dtoa_r+0xbd4>)
 800f2f6:	f7ff ba95 	b.w	800e824 <_dtoa_r+0xdc>
 800f2fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	f47f aa6e 	bne.w	800e7de <_dtoa_r+0x96>
 800f302:	4b07      	ldr	r3, [pc, #28]	; (800f320 <_dtoa_r+0xbd8>)
 800f304:	f7ff ba8e 	b.w	800e824 <_dtoa_r+0xdc>
 800f308:	9b02      	ldr	r3, [sp, #8]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	dcae      	bgt.n	800f26c <_dtoa_r+0xb24>
 800f30e:	9b06      	ldr	r3, [sp, #24]
 800f310:	2b02      	cmp	r3, #2
 800f312:	f73f aea8 	bgt.w	800f066 <_dtoa_r+0x91e>
 800f316:	e7a9      	b.n	800f26c <_dtoa_r+0xb24>
 800f318:	0801215f 	.word	0x0801215f
 800f31c:	080120bc 	.word	0x080120bc
 800f320:	080120e0 	.word	0x080120e0

0800f324 <_localeconv_r>:
 800f324:	4800      	ldr	r0, [pc, #0]	; (800f328 <_localeconv_r+0x4>)
 800f326:	4770      	bx	lr
 800f328:	20000194 	.word	0x20000194

0800f32c <malloc>:
 800f32c:	4b02      	ldr	r3, [pc, #8]	; (800f338 <malloc+0xc>)
 800f32e:	4601      	mov	r1, r0
 800f330:	6818      	ldr	r0, [r3, #0]
 800f332:	f000 bc09 	b.w	800fb48 <_malloc_r>
 800f336:	bf00      	nop
 800f338:	20000040 	.word	0x20000040

0800f33c <_Balloc>:
 800f33c:	b570      	push	{r4, r5, r6, lr}
 800f33e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f340:	4604      	mov	r4, r0
 800f342:	460d      	mov	r5, r1
 800f344:	b976      	cbnz	r6, 800f364 <_Balloc+0x28>
 800f346:	2010      	movs	r0, #16
 800f348:	f7ff fff0 	bl	800f32c <malloc>
 800f34c:	4602      	mov	r2, r0
 800f34e:	6260      	str	r0, [r4, #36]	; 0x24
 800f350:	b920      	cbnz	r0, 800f35c <_Balloc+0x20>
 800f352:	4b18      	ldr	r3, [pc, #96]	; (800f3b4 <_Balloc+0x78>)
 800f354:	4818      	ldr	r0, [pc, #96]	; (800f3b8 <_Balloc+0x7c>)
 800f356:	2166      	movs	r1, #102	; 0x66
 800f358:	f000 fdd6 	bl	800ff08 <__assert_func>
 800f35c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f360:	6006      	str	r6, [r0, #0]
 800f362:	60c6      	str	r6, [r0, #12]
 800f364:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f366:	68f3      	ldr	r3, [r6, #12]
 800f368:	b183      	cbz	r3, 800f38c <_Balloc+0x50>
 800f36a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f372:	b9b8      	cbnz	r0, 800f3a4 <_Balloc+0x68>
 800f374:	2101      	movs	r1, #1
 800f376:	fa01 f605 	lsl.w	r6, r1, r5
 800f37a:	1d72      	adds	r2, r6, #5
 800f37c:	0092      	lsls	r2, r2, #2
 800f37e:	4620      	mov	r0, r4
 800f380:	f000 fb60 	bl	800fa44 <_calloc_r>
 800f384:	b160      	cbz	r0, 800f3a0 <_Balloc+0x64>
 800f386:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f38a:	e00e      	b.n	800f3aa <_Balloc+0x6e>
 800f38c:	2221      	movs	r2, #33	; 0x21
 800f38e:	2104      	movs	r1, #4
 800f390:	4620      	mov	r0, r4
 800f392:	f000 fb57 	bl	800fa44 <_calloc_r>
 800f396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f398:	60f0      	str	r0, [r6, #12]
 800f39a:	68db      	ldr	r3, [r3, #12]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d1e4      	bne.n	800f36a <_Balloc+0x2e>
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	bd70      	pop	{r4, r5, r6, pc}
 800f3a4:	6802      	ldr	r2, [r0, #0]
 800f3a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f3b0:	e7f7      	b.n	800f3a2 <_Balloc+0x66>
 800f3b2:	bf00      	nop
 800f3b4:	080120ed 	.word	0x080120ed
 800f3b8:	08012170 	.word	0x08012170

0800f3bc <_Bfree>:
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	460c      	mov	r4, r1
 800f3c4:	b976      	cbnz	r6, 800f3e4 <_Bfree+0x28>
 800f3c6:	2010      	movs	r0, #16
 800f3c8:	f7ff ffb0 	bl	800f32c <malloc>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	6268      	str	r0, [r5, #36]	; 0x24
 800f3d0:	b920      	cbnz	r0, 800f3dc <_Bfree+0x20>
 800f3d2:	4b09      	ldr	r3, [pc, #36]	; (800f3f8 <_Bfree+0x3c>)
 800f3d4:	4809      	ldr	r0, [pc, #36]	; (800f3fc <_Bfree+0x40>)
 800f3d6:	218a      	movs	r1, #138	; 0x8a
 800f3d8:	f000 fd96 	bl	800ff08 <__assert_func>
 800f3dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3e0:	6006      	str	r6, [r0, #0]
 800f3e2:	60c6      	str	r6, [r0, #12]
 800f3e4:	b13c      	cbz	r4, 800f3f6 <_Bfree+0x3a>
 800f3e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f3e8:	6862      	ldr	r2, [r4, #4]
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f3f0:	6021      	str	r1, [r4, #0]
 800f3f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f3f6:	bd70      	pop	{r4, r5, r6, pc}
 800f3f8:	080120ed 	.word	0x080120ed
 800f3fc:	08012170 	.word	0x08012170

0800f400 <__multadd>:
 800f400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f404:	690d      	ldr	r5, [r1, #16]
 800f406:	4607      	mov	r7, r0
 800f408:	460c      	mov	r4, r1
 800f40a:	461e      	mov	r6, r3
 800f40c:	f101 0c14 	add.w	ip, r1, #20
 800f410:	2000      	movs	r0, #0
 800f412:	f8dc 3000 	ldr.w	r3, [ip]
 800f416:	b299      	uxth	r1, r3
 800f418:	fb02 6101 	mla	r1, r2, r1, r6
 800f41c:	0c1e      	lsrs	r6, r3, #16
 800f41e:	0c0b      	lsrs	r3, r1, #16
 800f420:	fb02 3306 	mla	r3, r2, r6, r3
 800f424:	b289      	uxth	r1, r1
 800f426:	3001      	adds	r0, #1
 800f428:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f42c:	4285      	cmp	r5, r0
 800f42e:	f84c 1b04 	str.w	r1, [ip], #4
 800f432:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f436:	dcec      	bgt.n	800f412 <__multadd+0x12>
 800f438:	b30e      	cbz	r6, 800f47e <__multadd+0x7e>
 800f43a:	68a3      	ldr	r3, [r4, #8]
 800f43c:	42ab      	cmp	r3, r5
 800f43e:	dc19      	bgt.n	800f474 <__multadd+0x74>
 800f440:	6861      	ldr	r1, [r4, #4]
 800f442:	4638      	mov	r0, r7
 800f444:	3101      	adds	r1, #1
 800f446:	f7ff ff79 	bl	800f33c <_Balloc>
 800f44a:	4680      	mov	r8, r0
 800f44c:	b928      	cbnz	r0, 800f45a <__multadd+0x5a>
 800f44e:	4602      	mov	r2, r0
 800f450:	4b0c      	ldr	r3, [pc, #48]	; (800f484 <__multadd+0x84>)
 800f452:	480d      	ldr	r0, [pc, #52]	; (800f488 <__multadd+0x88>)
 800f454:	21b5      	movs	r1, #181	; 0xb5
 800f456:	f000 fd57 	bl	800ff08 <__assert_func>
 800f45a:	6922      	ldr	r2, [r4, #16]
 800f45c:	3202      	adds	r2, #2
 800f45e:	f104 010c 	add.w	r1, r4, #12
 800f462:	0092      	lsls	r2, r2, #2
 800f464:	300c      	adds	r0, #12
 800f466:	f7fe fc31 	bl	800dccc <memcpy>
 800f46a:	4621      	mov	r1, r4
 800f46c:	4638      	mov	r0, r7
 800f46e:	f7ff ffa5 	bl	800f3bc <_Bfree>
 800f472:	4644      	mov	r4, r8
 800f474:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f478:	3501      	adds	r5, #1
 800f47a:	615e      	str	r6, [r3, #20]
 800f47c:	6125      	str	r5, [r4, #16]
 800f47e:	4620      	mov	r0, r4
 800f480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f484:	0801215f 	.word	0x0801215f
 800f488:	08012170 	.word	0x08012170

0800f48c <__hi0bits>:
 800f48c:	0c03      	lsrs	r3, r0, #16
 800f48e:	041b      	lsls	r3, r3, #16
 800f490:	b9d3      	cbnz	r3, 800f4c8 <__hi0bits+0x3c>
 800f492:	0400      	lsls	r0, r0, #16
 800f494:	2310      	movs	r3, #16
 800f496:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f49a:	bf04      	itt	eq
 800f49c:	0200      	lsleq	r0, r0, #8
 800f49e:	3308      	addeq	r3, #8
 800f4a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f4a4:	bf04      	itt	eq
 800f4a6:	0100      	lsleq	r0, r0, #4
 800f4a8:	3304      	addeq	r3, #4
 800f4aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f4ae:	bf04      	itt	eq
 800f4b0:	0080      	lsleq	r0, r0, #2
 800f4b2:	3302      	addeq	r3, #2
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	db05      	blt.n	800f4c4 <__hi0bits+0x38>
 800f4b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f4bc:	f103 0301 	add.w	r3, r3, #1
 800f4c0:	bf08      	it	eq
 800f4c2:	2320      	moveq	r3, #32
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	4770      	bx	lr
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	e7e4      	b.n	800f496 <__hi0bits+0xa>

0800f4cc <__lo0bits>:
 800f4cc:	6803      	ldr	r3, [r0, #0]
 800f4ce:	f013 0207 	ands.w	r2, r3, #7
 800f4d2:	4601      	mov	r1, r0
 800f4d4:	d00b      	beq.n	800f4ee <__lo0bits+0x22>
 800f4d6:	07da      	lsls	r2, r3, #31
 800f4d8:	d423      	bmi.n	800f522 <__lo0bits+0x56>
 800f4da:	0798      	lsls	r0, r3, #30
 800f4dc:	bf49      	itett	mi
 800f4de:	085b      	lsrmi	r3, r3, #1
 800f4e0:	089b      	lsrpl	r3, r3, #2
 800f4e2:	2001      	movmi	r0, #1
 800f4e4:	600b      	strmi	r3, [r1, #0]
 800f4e6:	bf5c      	itt	pl
 800f4e8:	600b      	strpl	r3, [r1, #0]
 800f4ea:	2002      	movpl	r0, #2
 800f4ec:	4770      	bx	lr
 800f4ee:	b298      	uxth	r0, r3
 800f4f0:	b9a8      	cbnz	r0, 800f51e <__lo0bits+0x52>
 800f4f2:	0c1b      	lsrs	r3, r3, #16
 800f4f4:	2010      	movs	r0, #16
 800f4f6:	b2da      	uxtb	r2, r3
 800f4f8:	b90a      	cbnz	r2, 800f4fe <__lo0bits+0x32>
 800f4fa:	3008      	adds	r0, #8
 800f4fc:	0a1b      	lsrs	r3, r3, #8
 800f4fe:	071a      	lsls	r2, r3, #28
 800f500:	bf04      	itt	eq
 800f502:	091b      	lsreq	r3, r3, #4
 800f504:	3004      	addeq	r0, #4
 800f506:	079a      	lsls	r2, r3, #30
 800f508:	bf04      	itt	eq
 800f50a:	089b      	lsreq	r3, r3, #2
 800f50c:	3002      	addeq	r0, #2
 800f50e:	07da      	lsls	r2, r3, #31
 800f510:	d403      	bmi.n	800f51a <__lo0bits+0x4e>
 800f512:	085b      	lsrs	r3, r3, #1
 800f514:	f100 0001 	add.w	r0, r0, #1
 800f518:	d005      	beq.n	800f526 <__lo0bits+0x5a>
 800f51a:	600b      	str	r3, [r1, #0]
 800f51c:	4770      	bx	lr
 800f51e:	4610      	mov	r0, r2
 800f520:	e7e9      	b.n	800f4f6 <__lo0bits+0x2a>
 800f522:	2000      	movs	r0, #0
 800f524:	4770      	bx	lr
 800f526:	2020      	movs	r0, #32
 800f528:	4770      	bx	lr
	...

0800f52c <__i2b>:
 800f52c:	b510      	push	{r4, lr}
 800f52e:	460c      	mov	r4, r1
 800f530:	2101      	movs	r1, #1
 800f532:	f7ff ff03 	bl	800f33c <_Balloc>
 800f536:	4602      	mov	r2, r0
 800f538:	b928      	cbnz	r0, 800f546 <__i2b+0x1a>
 800f53a:	4b05      	ldr	r3, [pc, #20]	; (800f550 <__i2b+0x24>)
 800f53c:	4805      	ldr	r0, [pc, #20]	; (800f554 <__i2b+0x28>)
 800f53e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f542:	f000 fce1 	bl	800ff08 <__assert_func>
 800f546:	2301      	movs	r3, #1
 800f548:	6144      	str	r4, [r0, #20]
 800f54a:	6103      	str	r3, [r0, #16]
 800f54c:	bd10      	pop	{r4, pc}
 800f54e:	bf00      	nop
 800f550:	0801215f 	.word	0x0801215f
 800f554:	08012170 	.word	0x08012170

0800f558 <__multiply>:
 800f558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f55c:	4691      	mov	r9, r2
 800f55e:	690a      	ldr	r2, [r1, #16]
 800f560:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f564:	429a      	cmp	r2, r3
 800f566:	bfb8      	it	lt
 800f568:	460b      	movlt	r3, r1
 800f56a:	460c      	mov	r4, r1
 800f56c:	bfbc      	itt	lt
 800f56e:	464c      	movlt	r4, r9
 800f570:	4699      	movlt	r9, r3
 800f572:	6927      	ldr	r7, [r4, #16]
 800f574:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f578:	68a3      	ldr	r3, [r4, #8]
 800f57a:	6861      	ldr	r1, [r4, #4]
 800f57c:	eb07 060a 	add.w	r6, r7, sl
 800f580:	42b3      	cmp	r3, r6
 800f582:	b085      	sub	sp, #20
 800f584:	bfb8      	it	lt
 800f586:	3101      	addlt	r1, #1
 800f588:	f7ff fed8 	bl	800f33c <_Balloc>
 800f58c:	b930      	cbnz	r0, 800f59c <__multiply+0x44>
 800f58e:	4602      	mov	r2, r0
 800f590:	4b44      	ldr	r3, [pc, #272]	; (800f6a4 <__multiply+0x14c>)
 800f592:	4845      	ldr	r0, [pc, #276]	; (800f6a8 <__multiply+0x150>)
 800f594:	f240 115d 	movw	r1, #349	; 0x15d
 800f598:	f000 fcb6 	bl	800ff08 <__assert_func>
 800f59c:	f100 0514 	add.w	r5, r0, #20
 800f5a0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f5a4:	462b      	mov	r3, r5
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	4543      	cmp	r3, r8
 800f5aa:	d321      	bcc.n	800f5f0 <__multiply+0x98>
 800f5ac:	f104 0314 	add.w	r3, r4, #20
 800f5b0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f5b4:	f109 0314 	add.w	r3, r9, #20
 800f5b8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f5bc:	9202      	str	r2, [sp, #8]
 800f5be:	1b3a      	subs	r2, r7, r4
 800f5c0:	3a15      	subs	r2, #21
 800f5c2:	f022 0203 	bic.w	r2, r2, #3
 800f5c6:	3204      	adds	r2, #4
 800f5c8:	f104 0115 	add.w	r1, r4, #21
 800f5cc:	428f      	cmp	r7, r1
 800f5ce:	bf38      	it	cc
 800f5d0:	2204      	movcc	r2, #4
 800f5d2:	9201      	str	r2, [sp, #4]
 800f5d4:	9a02      	ldr	r2, [sp, #8]
 800f5d6:	9303      	str	r3, [sp, #12]
 800f5d8:	429a      	cmp	r2, r3
 800f5da:	d80c      	bhi.n	800f5f6 <__multiply+0x9e>
 800f5dc:	2e00      	cmp	r6, #0
 800f5de:	dd03      	ble.n	800f5e8 <__multiply+0x90>
 800f5e0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d05a      	beq.n	800f69e <__multiply+0x146>
 800f5e8:	6106      	str	r6, [r0, #16]
 800f5ea:	b005      	add	sp, #20
 800f5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f0:	f843 2b04 	str.w	r2, [r3], #4
 800f5f4:	e7d8      	b.n	800f5a8 <__multiply+0x50>
 800f5f6:	f8b3 a000 	ldrh.w	sl, [r3]
 800f5fa:	f1ba 0f00 	cmp.w	sl, #0
 800f5fe:	d024      	beq.n	800f64a <__multiply+0xf2>
 800f600:	f104 0e14 	add.w	lr, r4, #20
 800f604:	46a9      	mov	r9, r5
 800f606:	f04f 0c00 	mov.w	ip, #0
 800f60a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f60e:	f8d9 1000 	ldr.w	r1, [r9]
 800f612:	fa1f fb82 	uxth.w	fp, r2
 800f616:	b289      	uxth	r1, r1
 800f618:	fb0a 110b 	mla	r1, sl, fp, r1
 800f61c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f620:	f8d9 2000 	ldr.w	r2, [r9]
 800f624:	4461      	add	r1, ip
 800f626:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f62a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f62e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f632:	b289      	uxth	r1, r1
 800f634:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f638:	4577      	cmp	r7, lr
 800f63a:	f849 1b04 	str.w	r1, [r9], #4
 800f63e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f642:	d8e2      	bhi.n	800f60a <__multiply+0xb2>
 800f644:	9a01      	ldr	r2, [sp, #4]
 800f646:	f845 c002 	str.w	ip, [r5, r2]
 800f64a:	9a03      	ldr	r2, [sp, #12]
 800f64c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f650:	3304      	adds	r3, #4
 800f652:	f1b9 0f00 	cmp.w	r9, #0
 800f656:	d020      	beq.n	800f69a <__multiply+0x142>
 800f658:	6829      	ldr	r1, [r5, #0]
 800f65a:	f104 0c14 	add.w	ip, r4, #20
 800f65e:	46ae      	mov	lr, r5
 800f660:	f04f 0a00 	mov.w	sl, #0
 800f664:	f8bc b000 	ldrh.w	fp, [ip]
 800f668:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f66c:	fb09 220b 	mla	r2, r9, fp, r2
 800f670:	4492      	add	sl, r2
 800f672:	b289      	uxth	r1, r1
 800f674:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f678:	f84e 1b04 	str.w	r1, [lr], #4
 800f67c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f680:	f8be 1000 	ldrh.w	r1, [lr]
 800f684:	0c12      	lsrs	r2, r2, #16
 800f686:	fb09 1102 	mla	r1, r9, r2, r1
 800f68a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f68e:	4567      	cmp	r7, ip
 800f690:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f694:	d8e6      	bhi.n	800f664 <__multiply+0x10c>
 800f696:	9a01      	ldr	r2, [sp, #4]
 800f698:	50a9      	str	r1, [r5, r2]
 800f69a:	3504      	adds	r5, #4
 800f69c:	e79a      	b.n	800f5d4 <__multiply+0x7c>
 800f69e:	3e01      	subs	r6, #1
 800f6a0:	e79c      	b.n	800f5dc <__multiply+0x84>
 800f6a2:	bf00      	nop
 800f6a4:	0801215f 	.word	0x0801215f
 800f6a8:	08012170 	.word	0x08012170

0800f6ac <__pow5mult>:
 800f6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6b0:	4615      	mov	r5, r2
 800f6b2:	f012 0203 	ands.w	r2, r2, #3
 800f6b6:	4606      	mov	r6, r0
 800f6b8:	460f      	mov	r7, r1
 800f6ba:	d007      	beq.n	800f6cc <__pow5mult+0x20>
 800f6bc:	4c25      	ldr	r4, [pc, #148]	; (800f754 <__pow5mult+0xa8>)
 800f6be:	3a01      	subs	r2, #1
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f6c6:	f7ff fe9b 	bl	800f400 <__multadd>
 800f6ca:	4607      	mov	r7, r0
 800f6cc:	10ad      	asrs	r5, r5, #2
 800f6ce:	d03d      	beq.n	800f74c <__pow5mult+0xa0>
 800f6d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f6d2:	b97c      	cbnz	r4, 800f6f4 <__pow5mult+0x48>
 800f6d4:	2010      	movs	r0, #16
 800f6d6:	f7ff fe29 	bl	800f32c <malloc>
 800f6da:	4602      	mov	r2, r0
 800f6dc:	6270      	str	r0, [r6, #36]	; 0x24
 800f6de:	b928      	cbnz	r0, 800f6ec <__pow5mult+0x40>
 800f6e0:	4b1d      	ldr	r3, [pc, #116]	; (800f758 <__pow5mult+0xac>)
 800f6e2:	481e      	ldr	r0, [pc, #120]	; (800f75c <__pow5mult+0xb0>)
 800f6e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f6e8:	f000 fc0e 	bl	800ff08 <__assert_func>
 800f6ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6f0:	6004      	str	r4, [r0, #0]
 800f6f2:	60c4      	str	r4, [r0, #12]
 800f6f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f6f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f6fc:	b94c      	cbnz	r4, 800f712 <__pow5mult+0x66>
 800f6fe:	f240 2171 	movw	r1, #625	; 0x271
 800f702:	4630      	mov	r0, r6
 800f704:	f7ff ff12 	bl	800f52c <__i2b>
 800f708:	2300      	movs	r3, #0
 800f70a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f70e:	4604      	mov	r4, r0
 800f710:	6003      	str	r3, [r0, #0]
 800f712:	f04f 0900 	mov.w	r9, #0
 800f716:	07eb      	lsls	r3, r5, #31
 800f718:	d50a      	bpl.n	800f730 <__pow5mult+0x84>
 800f71a:	4639      	mov	r1, r7
 800f71c:	4622      	mov	r2, r4
 800f71e:	4630      	mov	r0, r6
 800f720:	f7ff ff1a 	bl	800f558 <__multiply>
 800f724:	4639      	mov	r1, r7
 800f726:	4680      	mov	r8, r0
 800f728:	4630      	mov	r0, r6
 800f72a:	f7ff fe47 	bl	800f3bc <_Bfree>
 800f72e:	4647      	mov	r7, r8
 800f730:	106d      	asrs	r5, r5, #1
 800f732:	d00b      	beq.n	800f74c <__pow5mult+0xa0>
 800f734:	6820      	ldr	r0, [r4, #0]
 800f736:	b938      	cbnz	r0, 800f748 <__pow5mult+0x9c>
 800f738:	4622      	mov	r2, r4
 800f73a:	4621      	mov	r1, r4
 800f73c:	4630      	mov	r0, r6
 800f73e:	f7ff ff0b 	bl	800f558 <__multiply>
 800f742:	6020      	str	r0, [r4, #0]
 800f744:	f8c0 9000 	str.w	r9, [r0]
 800f748:	4604      	mov	r4, r0
 800f74a:	e7e4      	b.n	800f716 <__pow5mult+0x6a>
 800f74c:	4638      	mov	r0, r7
 800f74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f752:	bf00      	nop
 800f754:	080122c0 	.word	0x080122c0
 800f758:	080120ed 	.word	0x080120ed
 800f75c:	08012170 	.word	0x08012170

0800f760 <__lshift>:
 800f760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f764:	460c      	mov	r4, r1
 800f766:	6849      	ldr	r1, [r1, #4]
 800f768:	6923      	ldr	r3, [r4, #16]
 800f76a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f76e:	68a3      	ldr	r3, [r4, #8]
 800f770:	4607      	mov	r7, r0
 800f772:	4691      	mov	r9, r2
 800f774:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f778:	f108 0601 	add.w	r6, r8, #1
 800f77c:	42b3      	cmp	r3, r6
 800f77e:	db0b      	blt.n	800f798 <__lshift+0x38>
 800f780:	4638      	mov	r0, r7
 800f782:	f7ff fddb 	bl	800f33c <_Balloc>
 800f786:	4605      	mov	r5, r0
 800f788:	b948      	cbnz	r0, 800f79e <__lshift+0x3e>
 800f78a:	4602      	mov	r2, r0
 800f78c:	4b2a      	ldr	r3, [pc, #168]	; (800f838 <__lshift+0xd8>)
 800f78e:	482b      	ldr	r0, [pc, #172]	; (800f83c <__lshift+0xdc>)
 800f790:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f794:	f000 fbb8 	bl	800ff08 <__assert_func>
 800f798:	3101      	adds	r1, #1
 800f79a:	005b      	lsls	r3, r3, #1
 800f79c:	e7ee      	b.n	800f77c <__lshift+0x1c>
 800f79e:	2300      	movs	r3, #0
 800f7a0:	f100 0114 	add.w	r1, r0, #20
 800f7a4:	f100 0210 	add.w	r2, r0, #16
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	4553      	cmp	r3, sl
 800f7ac:	db37      	blt.n	800f81e <__lshift+0xbe>
 800f7ae:	6920      	ldr	r0, [r4, #16]
 800f7b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f7b4:	f104 0314 	add.w	r3, r4, #20
 800f7b8:	f019 091f 	ands.w	r9, r9, #31
 800f7bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f7c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f7c4:	d02f      	beq.n	800f826 <__lshift+0xc6>
 800f7c6:	f1c9 0e20 	rsb	lr, r9, #32
 800f7ca:	468a      	mov	sl, r1
 800f7cc:	f04f 0c00 	mov.w	ip, #0
 800f7d0:	681a      	ldr	r2, [r3, #0]
 800f7d2:	fa02 f209 	lsl.w	r2, r2, r9
 800f7d6:	ea42 020c 	orr.w	r2, r2, ip
 800f7da:	f84a 2b04 	str.w	r2, [sl], #4
 800f7de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7e2:	4298      	cmp	r0, r3
 800f7e4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f7e8:	d8f2      	bhi.n	800f7d0 <__lshift+0x70>
 800f7ea:	1b03      	subs	r3, r0, r4
 800f7ec:	3b15      	subs	r3, #21
 800f7ee:	f023 0303 	bic.w	r3, r3, #3
 800f7f2:	3304      	adds	r3, #4
 800f7f4:	f104 0215 	add.w	r2, r4, #21
 800f7f8:	4290      	cmp	r0, r2
 800f7fa:	bf38      	it	cc
 800f7fc:	2304      	movcc	r3, #4
 800f7fe:	f841 c003 	str.w	ip, [r1, r3]
 800f802:	f1bc 0f00 	cmp.w	ip, #0
 800f806:	d001      	beq.n	800f80c <__lshift+0xac>
 800f808:	f108 0602 	add.w	r6, r8, #2
 800f80c:	3e01      	subs	r6, #1
 800f80e:	4638      	mov	r0, r7
 800f810:	612e      	str	r6, [r5, #16]
 800f812:	4621      	mov	r1, r4
 800f814:	f7ff fdd2 	bl	800f3bc <_Bfree>
 800f818:	4628      	mov	r0, r5
 800f81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f81e:	f842 0f04 	str.w	r0, [r2, #4]!
 800f822:	3301      	adds	r3, #1
 800f824:	e7c1      	b.n	800f7aa <__lshift+0x4a>
 800f826:	3904      	subs	r1, #4
 800f828:	f853 2b04 	ldr.w	r2, [r3], #4
 800f82c:	f841 2f04 	str.w	r2, [r1, #4]!
 800f830:	4298      	cmp	r0, r3
 800f832:	d8f9      	bhi.n	800f828 <__lshift+0xc8>
 800f834:	e7ea      	b.n	800f80c <__lshift+0xac>
 800f836:	bf00      	nop
 800f838:	0801215f 	.word	0x0801215f
 800f83c:	08012170 	.word	0x08012170

0800f840 <__mcmp>:
 800f840:	b530      	push	{r4, r5, lr}
 800f842:	6902      	ldr	r2, [r0, #16]
 800f844:	690c      	ldr	r4, [r1, #16]
 800f846:	1b12      	subs	r2, r2, r4
 800f848:	d10e      	bne.n	800f868 <__mcmp+0x28>
 800f84a:	f100 0314 	add.w	r3, r0, #20
 800f84e:	3114      	adds	r1, #20
 800f850:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f854:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f858:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f85c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f860:	42a5      	cmp	r5, r4
 800f862:	d003      	beq.n	800f86c <__mcmp+0x2c>
 800f864:	d305      	bcc.n	800f872 <__mcmp+0x32>
 800f866:	2201      	movs	r2, #1
 800f868:	4610      	mov	r0, r2
 800f86a:	bd30      	pop	{r4, r5, pc}
 800f86c:	4283      	cmp	r3, r0
 800f86e:	d3f3      	bcc.n	800f858 <__mcmp+0x18>
 800f870:	e7fa      	b.n	800f868 <__mcmp+0x28>
 800f872:	f04f 32ff 	mov.w	r2, #4294967295
 800f876:	e7f7      	b.n	800f868 <__mcmp+0x28>

0800f878 <__mdiff>:
 800f878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87c:	460c      	mov	r4, r1
 800f87e:	4606      	mov	r6, r0
 800f880:	4611      	mov	r1, r2
 800f882:	4620      	mov	r0, r4
 800f884:	4690      	mov	r8, r2
 800f886:	f7ff ffdb 	bl	800f840 <__mcmp>
 800f88a:	1e05      	subs	r5, r0, #0
 800f88c:	d110      	bne.n	800f8b0 <__mdiff+0x38>
 800f88e:	4629      	mov	r1, r5
 800f890:	4630      	mov	r0, r6
 800f892:	f7ff fd53 	bl	800f33c <_Balloc>
 800f896:	b930      	cbnz	r0, 800f8a6 <__mdiff+0x2e>
 800f898:	4b3a      	ldr	r3, [pc, #232]	; (800f984 <__mdiff+0x10c>)
 800f89a:	4602      	mov	r2, r0
 800f89c:	f240 2132 	movw	r1, #562	; 0x232
 800f8a0:	4839      	ldr	r0, [pc, #228]	; (800f988 <__mdiff+0x110>)
 800f8a2:	f000 fb31 	bl	800ff08 <__assert_func>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f8ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b0:	bfa4      	itt	ge
 800f8b2:	4643      	movge	r3, r8
 800f8b4:	46a0      	movge	r8, r4
 800f8b6:	4630      	mov	r0, r6
 800f8b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f8bc:	bfa6      	itte	ge
 800f8be:	461c      	movge	r4, r3
 800f8c0:	2500      	movge	r5, #0
 800f8c2:	2501      	movlt	r5, #1
 800f8c4:	f7ff fd3a 	bl	800f33c <_Balloc>
 800f8c8:	b920      	cbnz	r0, 800f8d4 <__mdiff+0x5c>
 800f8ca:	4b2e      	ldr	r3, [pc, #184]	; (800f984 <__mdiff+0x10c>)
 800f8cc:	4602      	mov	r2, r0
 800f8ce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f8d2:	e7e5      	b.n	800f8a0 <__mdiff+0x28>
 800f8d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f8d8:	6926      	ldr	r6, [r4, #16]
 800f8da:	60c5      	str	r5, [r0, #12]
 800f8dc:	f104 0914 	add.w	r9, r4, #20
 800f8e0:	f108 0514 	add.w	r5, r8, #20
 800f8e4:	f100 0e14 	add.w	lr, r0, #20
 800f8e8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f8ec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f8f0:	f108 0210 	add.w	r2, r8, #16
 800f8f4:	46f2      	mov	sl, lr
 800f8f6:	2100      	movs	r1, #0
 800f8f8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f8fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f900:	fa1f f883 	uxth.w	r8, r3
 800f904:	fa11 f18b 	uxtah	r1, r1, fp
 800f908:	0c1b      	lsrs	r3, r3, #16
 800f90a:	eba1 0808 	sub.w	r8, r1, r8
 800f90e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f912:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f916:	fa1f f888 	uxth.w	r8, r8
 800f91a:	1419      	asrs	r1, r3, #16
 800f91c:	454e      	cmp	r6, r9
 800f91e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f922:	f84a 3b04 	str.w	r3, [sl], #4
 800f926:	d8e7      	bhi.n	800f8f8 <__mdiff+0x80>
 800f928:	1b33      	subs	r3, r6, r4
 800f92a:	3b15      	subs	r3, #21
 800f92c:	f023 0303 	bic.w	r3, r3, #3
 800f930:	3304      	adds	r3, #4
 800f932:	3415      	adds	r4, #21
 800f934:	42a6      	cmp	r6, r4
 800f936:	bf38      	it	cc
 800f938:	2304      	movcc	r3, #4
 800f93a:	441d      	add	r5, r3
 800f93c:	4473      	add	r3, lr
 800f93e:	469e      	mov	lr, r3
 800f940:	462e      	mov	r6, r5
 800f942:	4566      	cmp	r6, ip
 800f944:	d30e      	bcc.n	800f964 <__mdiff+0xec>
 800f946:	f10c 0203 	add.w	r2, ip, #3
 800f94a:	1b52      	subs	r2, r2, r5
 800f94c:	f022 0203 	bic.w	r2, r2, #3
 800f950:	3d03      	subs	r5, #3
 800f952:	45ac      	cmp	ip, r5
 800f954:	bf38      	it	cc
 800f956:	2200      	movcc	r2, #0
 800f958:	441a      	add	r2, r3
 800f95a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f95e:	b17b      	cbz	r3, 800f980 <__mdiff+0x108>
 800f960:	6107      	str	r7, [r0, #16]
 800f962:	e7a3      	b.n	800f8ac <__mdiff+0x34>
 800f964:	f856 8b04 	ldr.w	r8, [r6], #4
 800f968:	fa11 f288 	uxtah	r2, r1, r8
 800f96c:	1414      	asrs	r4, r2, #16
 800f96e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f972:	b292      	uxth	r2, r2
 800f974:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f978:	f84e 2b04 	str.w	r2, [lr], #4
 800f97c:	1421      	asrs	r1, r4, #16
 800f97e:	e7e0      	b.n	800f942 <__mdiff+0xca>
 800f980:	3f01      	subs	r7, #1
 800f982:	e7ea      	b.n	800f95a <__mdiff+0xe2>
 800f984:	0801215f 	.word	0x0801215f
 800f988:	08012170 	.word	0x08012170

0800f98c <__d2b>:
 800f98c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f990:	4689      	mov	r9, r1
 800f992:	2101      	movs	r1, #1
 800f994:	ec57 6b10 	vmov	r6, r7, d0
 800f998:	4690      	mov	r8, r2
 800f99a:	f7ff fccf 	bl	800f33c <_Balloc>
 800f99e:	4604      	mov	r4, r0
 800f9a0:	b930      	cbnz	r0, 800f9b0 <__d2b+0x24>
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	4b25      	ldr	r3, [pc, #148]	; (800fa3c <__d2b+0xb0>)
 800f9a6:	4826      	ldr	r0, [pc, #152]	; (800fa40 <__d2b+0xb4>)
 800f9a8:	f240 310a 	movw	r1, #778	; 0x30a
 800f9ac:	f000 faac 	bl	800ff08 <__assert_func>
 800f9b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f9b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f9b8:	bb35      	cbnz	r5, 800fa08 <__d2b+0x7c>
 800f9ba:	2e00      	cmp	r6, #0
 800f9bc:	9301      	str	r3, [sp, #4]
 800f9be:	d028      	beq.n	800fa12 <__d2b+0x86>
 800f9c0:	4668      	mov	r0, sp
 800f9c2:	9600      	str	r6, [sp, #0]
 800f9c4:	f7ff fd82 	bl	800f4cc <__lo0bits>
 800f9c8:	9900      	ldr	r1, [sp, #0]
 800f9ca:	b300      	cbz	r0, 800fa0e <__d2b+0x82>
 800f9cc:	9a01      	ldr	r2, [sp, #4]
 800f9ce:	f1c0 0320 	rsb	r3, r0, #32
 800f9d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f9d6:	430b      	orrs	r3, r1
 800f9d8:	40c2      	lsrs	r2, r0
 800f9da:	6163      	str	r3, [r4, #20]
 800f9dc:	9201      	str	r2, [sp, #4]
 800f9de:	9b01      	ldr	r3, [sp, #4]
 800f9e0:	61a3      	str	r3, [r4, #24]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	bf14      	ite	ne
 800f9e6:	2202      	movne	r2, #2
 800f9e8:	2201      	moveq	r2, #1
 800f9ea:	6122      	str	r2, [r4, #16]
 800f9ec:	b1d5      	cbz	r5, 800fa24 <__d2b+0x98>
 800f9ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f9f2:	4405      	add	r5, r0
 800f9f4:	f8c9 5000 	str.w	r5, [r9]
 800f9f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f9fc:	f8c8 0000 	str.w	r0, [r8]
 800fa00:	4620      	mov	r0, r4
 800fa02:	b003      	add	sp, #12
 800fa04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa0c:	e7d5      	b.n	800f9ba <__d2b+0x2e>
 800fa0e:	6161      	str	r1, [r4, #20]
 800fa10:	e7e5      	b.n	800f9de <__d2b+0x52>
 800fa12:	a801      	add	r0, sp, #4
 800fa14:	f7ff fd5a 	bl	800f4cc <__lo0bits>
 800fa18:	9b01      	ldr	r3, [sp, #4]
 800fa1a:	6163      	str	r3, [r4, #20]
 800fa1c:	2201      	movs	r2, #1
 800fa1e:	6122      	str	r2, [r4, #16]
 800fa20:	3020      	adds	r0, #32
 800fa22:	e7e3      	b.n	800f9ec <__d2b+0x60>
 800fa24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fa28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fa2c:	f8c9 0000 	str.w	r0, [r9]
 800fa30:	6918      	ldr	r0, [r3, #16]
 800fa32:	f7ff fd2b 	bl	800f48c <__hi0bits>
 800fa36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fa3a:	e7df      	b.n	800f9fc <__d2b+0x70>
 800fa3c:	0801215f 	.word	0x0801215f
 800fa40:	08012170 	.word	0x08012170

0800fa44 <_calloc_r>:
 800fa44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa46:	fba1 2402 	umull	r2, r4, r1, r2
 800fa4a:	b94c      	cbnz	r4, 800fa60 <_calloc_r+0x1c>
 800fa4c:	4611      	mov	r1, r2
 800fa4e:	9201      	str	r2, [sp, #4]
 800fa50:	f000 f87a 	bl	800fb48 <_malloc_r>
 800fa54:	9a01      	ldr	r2, [sp, #4]
 800fa56:	4605      	mov	r5, r0
 800fa58:	b930      	cbnz	r0, 800fa68 <_calloc_r+0x24>
 800fa5a:	4628      	mov	r0, r5
 800fa5c:	b003      	add	sp, #12
 800fa5e:	bd30      	pop	{r4, r5, pc}
 800fa60:	220c      	movs	r2, #12
 800fa62:	6002      	str	r2, [r0, #0]
 800fa64:	2500      	movs	r5, #0
 800fa66:	e7f8      	b.n	800fa5a <_calloc_r+0x16>
 800fa68:	4621      	mov	r1, r4
 800fa6a:	f7fe f93d 	bl	800dce8 <memset>
 800fa6e:	e7f4      	b.n	800fa5a <_calloc_r+0x16>

0800fa70 <_free_r>:
 800fa70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa72:	2900      	cmp	r1, #0
 800fa74:	d044      	beq.n	800fb00 <_free_r+0x90>
 800fa76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa7a:	9001      	str	r0, [sp, #4]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f1a1 0404 	sub.w	r4, r1, #4
 800fa82:	bfb8      	it	lt
 800fa84:	18e4      	addlt	r4, r4, r3
 800fa86:	f000 fa9b 	bl	800ffc0 <__malloc_lock>
 800fa8a:	4a1e      	ldr	r2, [pc, #120]	; (800fb04 <_free_r+0x94>)
 800fa8c:	9801      	ldr	r0, [sp, #4]
 800fa8e:	6813      	ldr	r3, [r2, #0]
 800fa90:	b933      	cbnz	r3, 800faa0 <_free_r+0x30>
 800fa92:	6063      	str	r3, [r4, #4]
 800fa94:	6014      	str	r4, [r2, #0]
 800fa96:	b003      	add	sp, #12
 800fa98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa9c:	f000 ba96 	b.w	800ffcc <__malloc_unlock>
 800faa0:	42a3      	cmp	r3, r4
 800faa2:	d908      	bls.n	800fab6 <_free_r+0x46>
 800faa4:	6825      	ldr	r5, [r4, #0]
 800faa6:	1961      	adds	r1, r4, r5
 800faa8:	428b      	cmp	r3, r1
 800faaa:	bf01      	itttt	eq
 800faac:	6819      	ldreq	r1, [r3, #0]
 800faae:	685b      	ldreq	r3, [r3, #4]
 800fab0:	1949      	addeq	r1, r1, r5
 800fab2:	6021      	streq	r1, [r4, #0]
 800fab4:	e7ed      	b.n	800fa92 <_free_r+0x22>
 800fab6:	461a      	mov	r2, r3
 800fab8:	685b      	ldr	r3, [r3, #4]
 800faba:	b10b      	cbz	r3, 800fac0 <_free_r+0x50>
 800fabc:	42a3      	cmp	r3, r4
 800fabe:	d9fa      	bls.n	800fab6 <_free_r+0x46>
 800fac0:	6811      	ldr	r1, [r2, #0]
 800fac2:	1855      	adds	r5, r2, r1
 800fac4:	42a5      	cmp	r5, r4
 800fac6:	d10b      	bne.n	800fae0 <_free_r+0x70>
 800fac8:	6824      	ldr	r4, [r4, #0]
 800faca:	4421      	add	r1, r4
 800facc:	1854      	adds	r4, r2, r1
 800face:	42a3      	cmp	r3, r4
 800fad0:	6011      	str	r1, [r2, #0]
 800fad2:	d1e0      	bne.n	800fa96 <_free_r+0x26>
 800fad4:	681c      	ldr	r4, [r3, #0]
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	6053      	str	r3, [r2, #4]
 800fada:	4421      	add	r1, r4
 800fadc:	6011      	str	r1, [r2, #0]
 800fade:	e7da      	b.n	800fa96 <_free_r+0x26>
 800fae0:	d902      	bls.n	800fae8 <_free_r+0x78>
 800fae2:	230c      	movs	r3, #12
 800fae4:	6003      	str	r3, [r0, #0]
 800fae6:	e7d6      	b.n	800fa96 <_free_r+0x26>
 800fae8:	6825      	ldr	r5, [r4, #0]
 800faea:	1961      	adds	r1, r4, r5
 800faec:	428b      	cmp	r3, r1
 800faee:	bf04      	itt	eq
 800faf0:	6819      	ldreq	r1, [r3, #0]
 800faf2:	685b      	ldreq	r3, [r3, #4]
 800faf4:	6063      	str	r3, [r4, #4]
 800faf6:	bf04      	itt	eq
 800faf8:	1949      	addeq	r1, r1, r5
 800fafa:	6021      	streq	r1, [r4, #0]
 800fafc:	6054      	str	r4, [r2, #4]
 800fafe:	e7ca      	b.n	800fa96 <_free_r+0x26>
 800fb00:	b003      	add	sp, #12
 800fb02:	bd30      	pop	{r4, r5, pc}
 800fb04:	20000cb4 	.word	0x20000cb4

0800fb08 <sbrk_aligned>:
 800fb08:	b570      	push	{r4, r5, r6, lr}
 800fb0a:	4e0e      	ldr	r6, [pc, #56]	; (800fb44 <sbrk_aligned+0x3c>)
 800fb0c:	460c      	mov	r4, r1
 800fb0e:	6831      	ldr	r1, [r6, #0]
 800fb10:	4605      	mov	r5, r0
 800fb12:	b911      	cbnz	r1, 800fb1a <sbrk_aligned+0x12>
 800fb14:	f000 f9e8 	bl	800fee8 <_sbrk_r>
 800fb18:	6030      	str	r0, [r6, #0]
 800fb1a:	4621      	mov	r1, r4
 800fb1c:	4628      	mov	r0, r5
 800fb1e:	f000 f9e3 	bl	800fee8 <_sbrk_r>
 800fb22:	1c43      	adds	r3, r0, #1
 800fb24:	d00a      	beq.n	800fb3c <sbrk_aligned+0x34>
 800fb26:	1cc4      	adds	r4, r0, #3
 800fb28:	f024 0403 	bic.w	r4, r4, #3
 800fb2c:	42a0      	cmp	r0, r4
 800fb2e:	d007      	beq.n	800fb40 <sbrk_aligned+0x38>
 800fb30:	1a21      	subs	r1, r4, r0
 800fb32:	4628      	mov	r0, r5
 800fb34:	f000 f9d8 	bl	800fee8 <_sbrk_r>
 800fb38:	3001      	adds	r0, #1
 800fb3a:	d101      	bne.n	800fb40 <sbrk_aligned+0x38>
 800fb3c:	f04f 34ff 	mov.w	r4, #4294967295
 800fb40:	4620      	mov	r0, r4
 800fb42:	bd70      	pop	{r4, r5, r6, pc}
 800fb44:	20000cb8 	.word	0x20000cb8

0800fb48 <_malloc_r>:
 800fb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb4c:	1ccd      	adds	r5, r1, #3
 800fb4e:	f025 0503 	bic.w	r5, r5, #3
 800fb52:	3508      	adds	r5, #8
 800fb54:	2d0c      	cmp	r5, #12
 800fb56:	bf38      	it	cc
 800fb58:	250c      	movcc	r5, #12
 800fb5a:	2d00      	cmp	r5, #0
 800fb5c:	4607      	mov	r7, r0
 800fb5e:	db01      	blt.n	800fb64 <_malloc_r+0x1c>
 800fb60:	42a9      	cmp	r1, r5
 800fb62:	d905      	bls.n	800fb70 <_malloc_r+0x28>
 800fb64:	230c      	movs	r3, #12
 800fb66:	603b      	str	r3, [r7, #0]
 800fb68:	2600      	movs	r6, #0
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb70:	4e2e      	ldr	r6, [pc, #184]	; (800fc2c <_malloc_r+0xe4>)
 800fb72:	f000 fa25 	bl	800ffc0 <__malloc_lock>
 800fb76:	6833      	ldr	r3, [r6, #0]
 800fb78:	461c      	mov	r4, r3
 800fb7a:	bb34      	cbnz	r4, 800fbca <_malloc_r+0x82>
 800fb7c:	4629      	mov	r1, r5
 800fb7e:	4638      	mov	r0, r7
 800fb80:	f7ff ffc2 	bl	800fb08 <sbrk_aligned>
 800fb84:	1c43      	adds	r3, r0, #1
 800fb86:	4604      	mov	r4, r0
 800fb88:	d14d      	bne.n	800fc26 <_malloc_r+0xde>
 800fb8a:	6834      	ldr	r4, [r6, #0]
 800fb8c:	4626      	mov	r6, r4
 800fb8e:	2e00      	cmp	r6, #0
 800fb90:	d140      	bne.n	800fc14 <_malloc_r+0xcc>
 800fb92:	6823      	ldr	r3, [r4, #0]
 800fb94:	4631      	mov	r1, r6
 800fb96:	4638      	mov	r0, r7
 800fb98:	eb04 0803 	add.w	r8, r4, r3
 800fb9c:	f000 f9a4 	bl	800fee8 <_sbrk_r>
 800fba0:	4580      	cmp	r8, r0
 800fba2:	d13a      	bne.n	800fc1a <_malloc_r+0xd2>
 800fba4:	6821      	ldr	r1, [r4, #0]
 800fba6:	3503      	adds	r5, #3
 800fba8:	1a6d      	subs	r5, r5, r1
 800fbaa:	f025 0503 	bic.w	r5, r5, #3
 800fbae:	3508      	adds	r5, #8
 800fbb0:	2d0c      	cmp	r5, #12
 800fbb2:	bf38      	it	cc
 800fbb4:	250c      	movcc	r5, #12
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	4638      	mov	r0, r7
 800fbba:	f7ff ffa5 	bl	800fb08 <sbrk_aligned>
 800fbbe:	3001      	adds	r0, #1
 800fbc0:	d02b      	beq.n	800fc1a <_malloc_r+0xd2>
 800fbc2:	6823      	ldr	r3, [r4, #0]
 800fbc4:	442b      	add	r3, r5
 800fbc6:	6023      	str	r3, [r4, #0]
 800fbc8:	e00e      	b.n	800fbe8 <_malloc_r+0xa0>
 800fbca:	6822      	ldr	r2, [r4, #0]
 800fbcc:	1b52      	subs	r2, r2, r5
 800fbce:	d41e      	bmi.n	800fc0e <_malloc_r+0xc6>
 800fbd0:	2a0b      	cmp	r2, #11
 800fbd2:	d916      	bls.n	800fc02 <_malloc_r+0xba>
 800fbd4:	1961      	adds	r1, r4, r5
 800fbd6:	42a3      	cmp	r3, r4
 800fbd8:	6025      	str	r5, [r4, #0]
 800fbda:	bf18      	it	ne
 800fbdc:	6059      	strne	r1, [r3, #4]
 800fbde:	6863      	ldr	r3, [r4, #4]
 800fbe0:	bf08      	it	eq
 800fbe2:	6031      	streq	r1, [r6, #0]
 800fbe4:	5162      	str	r2, [r4, r5]
 800fbe6:	604b      	str	r3, [r1, #4]
 800fbe8:	4638      	mov	r0, r7
 800fbea:	f104 060b 	add.w	r6, r4, #11
 800fbee:	f000 f9ed 	bl	800ffcc <__malloc_unlock>
 800fbf2:	f026 0607 	bic.w	r6, r6, #7
 800fbf6:	1d23      	adds	r3, r4, #4
 800fbf8:	1af2      	subs	r2, r6, r3
 800fbfa:	d0b6      	beq.n	800fb6a <_malloc_r+0x22>
 800fbfc:	1b9b      	subs	r3, r3, r6
 800fbfe:	50a3      	str	r3, [r4, r2]
 800fc00:	e7b3      	b.n	800fb6a <_malloc_r+0x22>
 800fc02:	6862      	ldr	r2, [r4, #4]
 800fc04:	42a3      	cmp	r3, r4
 800fc06:	bf0c      	ite	eq
 800fc08:	6032      	streq	r2, [r6, #0]
 800fc0a:	605a      	strne	r2, [r3, #4]
 800fc0c:	e7ec      	b.n	800fbe8 <_malloc_r+0xa0>
 800fc0e:	4623      	mov	r3, r4
 800fc10:	6864      	ldr	r4, [r4, #4]
 800fc12:	e7b2      	b.n	800fb7a <_malloc_r+0x32>
 800fc14:	4634      	mov	r4, r6
 800fc16:	6876      	ldr	r6, [r6, #4]
 800fc18:	e7b9      	b.n	800fb8e <_malloc_r+0x46>
 800fc1a:	230c      	movs	r3, #12
 800fc1c:	603b      	str	r3, [r7, #0]
 800fc1e:	4638      	mov	r0, r7
 800fc20:	f000 f9d4 	bl	800ffcc <__malloc_unlock>
 800fc24:	e7a1      	b.n	800fb6a <_malloc_r+0x22>
 800fc26:	6025      	str	r5, [r4, #0]
 800fc28:	e7de      	b.n	800fbe8 <_malloc_r+0xa0>
 800fc2a:	bf00      	nop
 800fc2c:	20000cb4 	.word	0x20000cb4

0800fc30 <__ssputs_r>:
 800fc30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc34:	688e      	ldr	r6, [r1, #8]
 800fc36:	429e      	cmp	r6, r3
 800fc38:	4682      	mov	sl, r0
 800fc3a:	460c      	mov	r4, r1
 800fc3c:	4690      	mov	r8, r2
 800fc3e:	461f      	mov	r7, r3
 800fc40:	d838      	bhi.n	800fcb4 <__ssputs_r+0x84>
 800fc42:	898a      	ldrh	r2, [r1, #12]
 800fc44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fc48:	d032      	beq.n	800fcb0 <__ssputs_r+0x80>
 800fc4a:	6825      	ldr	r5, [r4, #0]
 800fc4c:	6909      	ldr	r1, [r1, #16]
 800fc4e:	eba5 0901 	sub.w	r9, r5, r1
 800fc52:	6965      	ldr	r5, [r4, #20]
 800fc54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	444b      	add	r3, r9
 800fc60:	106d      	asrs	r5, r5, #1
 800fc62:	429d      	cmp	r5, r3
 800fc64:	bf38      	it	cc
 800fc66:	461d      	movcc	r5, r3
 800fc68:	0553      	lsls	r3, r2, #21
 800fc6a:	d531      	bpl.n	800fcd0 <__ssputs_r+0xa0>
 800fc6c:	4629      	mov	r1, r5
 800fc6e:	f7ff ff6b 	bl	800fb48 <_malloc_r>
 800fc72:	4606      	mov	r6, r0
 800fc74:	b950      	cbnz	r0, 800fc8c <__ssputs_r+0x5c>
 800fc76:	230c      	movs	r3, #12
 800fc78:	f8ca 3000 	str.w	r3, [sl]
 800fc7c:	89a3      	ldrh	r3, [r4, #12]
 800fc7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc82:	81a3      	strh	r3, [r4, #12]
 800fc84:	f04f 30ff 	mov.w	r0, #4294967295
 800fc88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc8c:	6921      	ldr	r1, [r4, #16]
 800fc8e:	464a      	mov	r2, r9
 800fc90:	f7fe f81c 	bl	800dccc <memcpy>
 800fc94:	89a3      	ldrh	r3, [r4, #12]
 800fc96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fc9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc9e:	81a3      	strh	r3, [r4, #12]
 800fca0:	6126      	str	r6, [r4, #16]
 800fca2:	6165      	str	r5, [r4, #20]
 800fca4:	444e      	add	r6, r9
 800fca6:	eba5 0509 	sub.w	r5, r5, r9
 800fcaa:	6026      	str	r6, [r4, #0]
 800fcac:	60a5      	str	r5, [r4, #8]
 800fcae:	463e      	mov	r6, r7
 800fcb0:	42be      	cmp	r6, r7
 800fcb2:	d900      	bls.n	800fcb6 <__ssputs_r+0x86>
 800fcb4:	463e      	mov	r6, r7
 800fcb6:	6820      	ldr	r0, [r4, #0]
 800fcb8:	4632      	mov	r2, r6
 800fcba:	4641      	mov	r1, r8
 800fcbc:	f000 f966 	bl	800ff8c <memmove>
 800fcc0:	68a3      	ldr	r3, [r4, #8]
 800fcc2:	1b9b      	subs	r3, r3, r6
 800fcc4:	60a3      	str	r3, [r4, #8]
 800fcc6:	6823      	ldr	r3, [r4, #0]
 800fcc8:	4433      	add	r3, r6
 800fcca:	6023      	str	r3, [r4, #0]
 800fccc:	2000      	movs	r0, #0
 800fcce:	e7db      	b.n	800fc88 <__ssputs_r+0x58>
 800fcd0:	462a      	mov	r2, r5
 800fcd2:	f000 f981 	bl	800ffd8 <_realloc_r>
 800fcd6:	4606      	mov	r6, r0
 800fcd8:	2800      	cmp	r0, #0
 800fcda:	d1e1      	bne.n	800fca0 <__ssputs_r+0x70>
 800fcdc:	6921      	ldr	r1, [r4, #16]
 800fcde:	4650      	mov	r0, sl
 800fce0:	f7ff fec6 	bl	800fa70 <_free_r>
 800fce4:	e7c7      	b.n	800fc76 <__ssputs_r+0x46>
	...

0800fce8 <_svfiprintf_r>:
 800fce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcec:	4698      	mov	r8, r3
 800fcee:	898b      	ldrh	r3, [r1, #12]
 800fcf0:	061b      	lsls	r3, r3, #24
 800fcf2:	b09d      	sub	sp, #116	; 0x74
 800fcf4:	4607      	mov	r7, r0
 800fcf6:	460d      	mov	r5, r1
 800fcf8:	4614      	mov	r4, r2
 800fcfa:	d50e      	bpl.n	800fd1a <_svfiprintf_r+0x32>
 800fcfc:	690b      	ldr	r3, [r1, #16]
 800fcfe:	b963      	cbnz	r3, 800fd1a <_svfiprintf_r+0x32>
 800fd00:	2140      	movs	r1, #64	; 0x40
 800fd02:	f7ff ff21 	bl	800fb48 <_malloc_r>
 800fd06:	6028      	str	r0, [r5, #0]
 800fd08:	6128      	str	r0, [r5, #16]
 800fd0a:	b920      	cbnz	r0, 800fd16 <_svfiprintf_r+0x2e>
 800fd0c:	230c      	movs	r3, #12
 800fd0e:	603b      	str	r3, [r7, #0]
 800fd10:	f04f 30ff 	mov.w	r0, #4294967295
 800fd14:	e0d1      	b.n	800feba <_svfiprintf_r+0x1d2>
 800fd16:	2340      	movs	r3, #64	; 0x40
 800fd18:	616b      	str	r3, [r5, #20]
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	9309      	str	r3, [sp, #36]	; 0x24
 800fd1e:	2320      	movs	r3, #32
 800fd20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd24:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd28:	2330      	movs	r3, #48	; 0x30
 800fd2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fed4 <_svfiprintf_r+0x1ec>
 800fd2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd32:	f04f 0901 	mov.w	r9, #1
 800fd36:	4623      	mov	r3, r4
 800fd38:	469a      	mov	sl, r3
 800fd3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd3e:	b10a      	cbz	r2, 800fd44 <_svfiprintf_r+0x5c>
 800fd40:	2a25      	cmp	r2, #37	; 0x25
 800fd42:	d1f9      	bne.n	800fd38 <_svfiprintf_r+0x50>
 800fd44:	ebba 0b04 	subs.w	fp, sl, r4
 800fd48:	d00b      	beq.n	800fd62 <_svfiprintf_r+0x7a>
 800fd4a:	465b      	mov	r3, fp
 800fd4c:	4622      	mov	r2, r4
 800fd4e:	4629      	mov	r1, r5
 800fd50:	4638      	mov	r0, r7
 800fd52:	f7ff ff6d 	bl	800fc30 <__ssputs_r>
 800fd56:	3001      	adds	r0, #1
 800fd58:	f000 80aa 	beq.w	800feb0 <_svfiprintf_r+0x1c8>
 800fd5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd5e:	445a      	add	r2, fp
 800fd60:	9209      	str	r2, [sp, #36]	; 0x24
 800fd62:	f89a 3000 	ldrb.w	r3, [sl]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	f000 80a2 	beq.w	800feb0 <_svfiprintf_r+0x1c8>
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd76:	f10a 0a01 	add.w	sl, sl, #1
 800fd7a:	9304      	str	r3, [sp, #16]
 800fd7c:	9307      	str	r3, [sp, #28]
 800fd7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd82:	931a      	str	r3, [sp, #104]	; 0x68
 800fd84:	4654      	mov	r4, sl
 800fd86:	2205      	movs	r2, #5
 800fd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd8c:	4851      	ldr	r0, [pc, #324]	; (800fed4 <_svfiprintf_r+0x1ec>)
 800fd8e:	f7f0 fa47 	bl	8000220 <memchr>
 800fd92:	9a04      	ldr	r2, [sp, #16]
 800fd94:	b9d8      	cbnz	r0, 800fdce <_svfiprintf_r+0xe6>
 800fd96:	06d0      	lsls	r0, r2, #27
 800fd98:	bf44      	itt	mi
 800fd9a:	2320      	movmi	r3, #32
 800fd9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fda0:	0711      	lsls	r1, r2, #28
 800fda2:	bf44      	itt	mi
 800fda4:	232b      	movmi	r3, #43	; 0x2b
 800fda6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fdaa:	f89a 3000 	ldrb.w	r3, [sl]
 800fdae:	2b2a      	cmp	r3, #42	; 0x2a
 800fdb0:	d015      	beq.n	800fdde <_svfiprintf_r+0xf6>
 800fdb2:	9a07      	ldr	r2, [sp, #28]
 800fdb4:	4654      	mov	r4, sl
 800fdb6:	2000      	movs	r0, #0
 800fdb8:	f04f 0c0a 	mov.w	ip, #10
 800fdbc:	4621      	mov	r1, r4
 800fdbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdc2:	3b30      	subs	r3, #48	; 0x30
 800fdc4:	2b09      	cmp	r3, #9
 800fdc6:	d94e      	bls.n	800fe66 <_svfiprintf_r+0x17e>
 800fdc8:	b1b0      	cbz	r0, 800fdf8 <_svfiprintf_r+0x110>
 800fdca:	9207      	str	r2, [sp, #28]
 800fdcc:	e014      	b.n	800fdf8 <_svfiprintf_r+0x110>
 800fdce:	eba0 0308 	sub.w	r3, r0, r8
 800fdd2:	fa09 f303 	lsl.w	r3, r9, r3
 800fdd6:	4313      	orrs	r3, r2
 800fdd8:	9304      	str	r3, [sp, #16]
 800fdda:	46a2      	mov	sl, r4
 800fddc:	e7d2      	b.n	800fd84 <_svfiprintf_r+0x9c>
 800fdde:	9b03      	ldr	r3, [sp, #12]
 800fde0:	1d19      	adds	r1, r3, #4
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	9103      	str	r1, [sp, #12]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	bfbb      	ittet	lt
 800fdea:	425b      	neglt	r3, r3
 800fdec:	f042 0202 	orrlt.w	r2, r2, #2
 800fdf0:	9307      	strge	r3, [sp, #28]
 800fdf2:	9307      	strlt	r3, [sp, #28]
 800fdf4:	bfb8      	it	lt
 800fdf6:	9204      	strlt	r2, [sp, #16]
 800fdf8:	7823      	ldrb	r3, [r4, #0]
 800fdfa:	2b2e      	cmp	r3, #46	; 0x2e
 800fdfc:	d10c      	bne.n	800fe18 <_svfiprintf_r+0x130>
 800fdfe:	7863      	ldrb	r3, [r4, #1]
 800fe00:	2b2a      	cmp	r3, #42	; 0x2a
 800fe02:	d135      	bne.n	800fe70 <_svfiprintf_r+0x188>
 800fe04:	9b03      	ldr	r3, [sp, #12]
 800fe06:	1d1a      	adds	r2, r3, #4
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	9203      	str	r2, [sp, #12]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	bfb8      	it	lt
 800fe10:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe14:	3402      	adds	r4, #2
 800fe16:	9305      	str	r3, [sp, #20]
 800fe18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fee4 <_svfiprintf_r+0x1fc>
 800fe1c:	7821      	ldrb	r1, [r4, #0]
 800fe1e:	2203      	movs	r2, #3
 800fe20:	4650      	mov	r0, sl
 800fe22:	f7f0 f9fd 	bl	8000220 <memchr>
 800fe26:	b140      	cbz	r0, 800fe3a <_svfiprintf_r+0x152>
 800fe28:	2340      	movs	r3, #64	; 0x40
 800fe2a:	eba0 000a 	sub.w	r0, r0, sl
 800fe2e:	fa03 f000 	lsl.w	r0, r3, r0
 800fe32:	9b04      	ldr	r3, [sp, #16]
 800fe34:	4303      	orrs	r3, r0
 800fe36:	3401      	adds	r4, #1
 800fe38:	9304      	str	r3, [sp, #16]
 800fe3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe3e:	4826      	ldr	r0, [pc, #152]	; (800fed8 <_svfiprintf_r+0x1f0>)
 800fe40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe44:	2206      	movs	r2, #6
 800fe46:	f7f0 f9eb 	bl	8000220 <memchr>
 800fe4a:	2800      	cmp	r0, #0
 800fe4c:	d038      	beq.n	800fec0 <_svfiprintf_r+0x1d8>
 800fe4e:	4b23      	ldr	r3, [pc, #140]	; (800fedc <_svfiprintf_r+0x1f4>)
 800fe50:	bb1b      	cbnz	r3, 800fe9a <_svfiprintf_r+0x1b2>
 800fe52:	9b03      	ldr	r3, [sp, #12]
 800fe54:	3307      	adds	r3, #7
 800fe56:	f023 0307 	bic.w	r3, r3, #7
 800fe5a:	3308      	adds	r3, #8
 800fe5c:	9303      	str	r3, [sp, #12]
 800fe5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe60:	4433      	add	r3, r6
 800fe62:	9309      	str	r3, [sp, #36]	; 0x24
 800fe64:	e767      	b.n	800fd36 <_svfiprintf_r+0x4e>
 800fe66:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe6a:	460c      	mov	r4, r1
 800fe6c:	2001      	movs	r0, #1
 800fe6e:	e7a5      	b.n	800fdbc <_svfiprintf_r+0xd4>
 800fe70:	2300      	movs	r3, #0
 800fe72:	3401      	adds	r4, #1
 800fe74:	9305      	str	r3, [sp, #20]
 800fe76:	4619      	mov	r1, r3
 800fe78:	f04f 0c0a 	mov.w	ip, #10
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe82:	3a30      	subs	r2, #48	; 0x30
 800fe84:	2a09      	cmp	r2, #9
 800fe86:	d903      	bls.n	800fe90 <_svfiprintf_r+0x1a8>
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d0c5      	beq.n	800fe18 <_svfiprintf_r+0x130>
 800fe8c:	9105      	str	r1, [sp, #20]
 800fe8e:	e7c3      	b.n	800fe18 <_svfiprintf_r+0x130>
 800fe90:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe94:	4604      	mov	r4, r0
 800fe96:	2301      	movs	r3, #1
 800fe98:	e7f0      	b.n	800fe7c <_svfiprintf_r+0x194>
 800fe9a:	ab03      	add	r3, sp, #12
 800fe9c:	9300      	str	r3, [sp, #0]
 800fe9e:	462a      	mov	r2, r5
 800fea0:	4b0f      	ldr	r3, [pc, #60]	; (800fee0 <_svfiprintf_r+0x1f8>)
 800fea2:	a904      	add	r1, sp, #16
 800fea4:	4638      	mov	r0, r7
 800fea6:	f7fd ffc7 	bl	800de38 <_printf_float>
 800feaa:	1c42      	adds	r2, r0, #1
 800feac:	4606      	mov	r6, r0
 800feae:	d1d6      	bne.n	800fe5e <_svfiprintf_r+0x176>
 800feb0:	89ab      	ldrh	r3, [r5, #12]
 800feb2:	065b      	lsls	r3, r3, #25
 800feb4:	f53f af2c 	bmi.w	800fd10 <_svfiprintf_r+0x28>
 800feb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800feba:	b01d      	add	sp, #116	; 0x74
 800febc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec0:	ab03      	add	r3, sp, #12
 800fec2:	9300      	str	r3, [sp, #0]
 800fec4:	462a      	mov	r2, r5
 800fec6:	4b06      	ldr	r3, [pc, #24]	; (800fee0 <_svfiprintf_r+0x1f8>)
 800fec8:	a904      	add	r1, sp, #16
 800feca:	4638      	mov	r0, r7
 800fecc:	f7fe fa58 	bl	800e380 <_printf_i>
 800fed0:	e7eb      	b.n	800feaa <_svfiprintf_r+0x1c2>
 800fed2:	bf00      	nop
 800fed4:	080122cc 	.word	0x080122cc
 800fed8:	080122d6 	.word	0x080122d6
 800fedc:	0800de39 	.word	0x0800de39
 800fee0:	0800fc31 	.word	0x0800fc31
 800fee4:	080122d2 	.word	0x080122d2

0800fee8 <_sbrk_r>:
 800fee8:	b538      	push	{r3, r4, r5, lr}
 800feea:	4d06      	ldr	r5, [pc, #24]	; (800ff04 <_sbrk_r+0x1c>)
 800feec:	2300      	movs	r3, #0
 800feee:	4604      	mov	r4, r0
 800fef0:	4608      	mov	r0, r1
 800fef2:	602b      	str	r3, [r5, #0]
 800fef4:	f002 f86e 	bl	8011fd4 <_sbrk>
 800fef8:	1c43      	adds	r3, r0, #1
 800fefa:	d102      	bne.n	800ff02 <_sbrk_r+0x1a>
 800fefc:	682b      	ldr	r3, [r5, #0]
 800fefe:	b103      	cbz	r3, 800ff02 <_sbrk_r+0x1a>
 800ff00:	6023      	str	r3, [r4, #0]
 800ff02:	bd38      	pop	{r3, r4, r5, pc}
 800ff04:	20000cbc 	.word	0x20000cbc

0800ff08 <__assert_func>:
 800ff08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff0a:	4614      	mov	r4, r2
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	4b09      	ldr	r3, [pc, #36]	; (800ff34 <__assert_func+0x2c>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	4605      	mov	r5, r0
 800ff14:	68d8      	ldr	r0, [r3, #12]
 800ff16:	b14c      	cbz	r4, 800ff2c <__assert_func+0x24>
 800ff18:	4b07      	ldr	r3, [pc, #28]	; (800ff38 <__assert_func+0x30>)
 800ff1a:	9100      	str	r1, [sp, #0]
 800ff1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff20:	4906      	ldr	r1, [pc, #24]	; (800ff3c <__assert_func+0x34>)
 800ff22:	462b      	mov	r3, r5
 800ff24:	f000 f80e 	bl	800ff44 <fiprintf>
 800ff28:	f000 faac 	bl	8010484 <abort>
 800ff2c:	4b04      	ldr	r3, [pc, #16]	; (800ff40 <__assert_func+0x38>)
 800ff2e:	461c      	mov	r4, r3
 800ff30:	e7f3      	b.n	800ff1a <__assert_func+0x12>
 800ff32:	bf00      	nop
 800ff34:	20000040 	.word	0x20000040
 800ff38:	080122dd 	.word	0x080122dd
 800ff3c:	080122ea 	.word	0x080122ea
 800ff40:	08012318 	.word	0x08012318

0800ff44 <fiprintf>:
 800ff44:	b40e      	push	{r1, r2, r3}
 800ff46:	b503      	push	{r0, r1, lr}
 800ff48:	4601      	mov	r1, r0
 800ff4a:	ab03      	add	r3, sp, #12
 800ff4c:	4805      	ldr	r0, [pc, #20]	; (800ff64 <fiprintf+0x20>)
 800ff4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff52:	6800      	ldr	r0, [r0, #0]
 800ff54:	9301      	str	r3, [sp, #4]
 800ff56:	f000 f897 	bl	8010088 <_vfiprintf_r>
 800ff5a:	b002      	add	sp, #8
 800ff5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff60:	b003      	add	sp, #12
 800ff62:	4770      	bx	lr
 800ff64:	20000040 	.word	0x20000040

0800ff68 <__ascii_mbtowc>:
 800ff68:	b082      	sub	sp, #8
 800ff6a:	b901      	cbnz	r1, 800ff6e <__ascii_mbtowc+0x6>
 800ff6c:	a901      	add	r1, sp, #4
 800ff6e:	b142      	cbz	r2, 800ff82 <__ascii_mbtowc+0x1a>
 800ff70:	b14b      	cbz	r3, 800ff86 <__ascii_mbtowc+0x1e>
 800ff72:	7813      	ldrb	r3, [r2, #0]
 800ff74:	600b      	str	r3, [r1, #0]
 800ff76:	7812      	ldrb	r2, [r2, #0]
 800ff78:	1e10      	subs	r0, r2, #0
 800ff7a:	bf18      	it	ne
 800ff7c:	2001      	movne	r0, #1
 800ff7e:	b002      	add	sp, #8
 800ff80:	4770      	bx	lr
 800ff82:	4610      	mov	r0, r2
 800ff84:	e7fb      	b.n	800ff7e <__ascii_mbtowc+0x16>
 800ff86:	f06f 0001 	mvn.w	r0, #1
 800ff8a:	e7f8      	b.n	800ff7e <__ascii_mbtowc+0x16>

0800ff8c <memmove>:
 800ff8c:	4288      	cmp	r0, r1
 800ff8e:	b510      	push	{r4, lr}
 800ff90:	eb01 0402 	add.w	r4, r1, r2
 800ff94:	d902      	bls.n	800ff9c <memmove+0x10>
 800ff96:	4284      	cmp	r4, r0
 800ff98:	4623      	mov	r3, r4
 800ff9a:	d807      	bhi.n	800ffac <memmove+0x20>
 800ff9c:	1e43      	subs	r3, r0, #1
 800ff9e:	42a1      	cmp	r1, r4
 800ffa0:	d008      	beq.n	800ffb4 <memmove+0x28>
 800ffa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ffa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ffaa:	e7f8      	b.n	800ff9e <memmove+0x12>
 800ffac:	4402      	add	r2, r0
 800ffae:	4601      	mov	r1, r0
 800ffb0:	428a      	cmp	r2, r1
 800ffb2:	d100      	bne.n	800ffb6 <memmove+0x2a>
 800ffb4:	bd10      	pop	{r4, pc}
 800ffb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ffba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ffbe:	e7f7      	b.n	800ffb0 <memmove+0x24>

0800ffc0 <__malloc_lock>:
 800ffc0:	4801      	ldr	r0, [pc, #4]	; (800ffc8 <__malloc_lock+0x8>)
 800ffc2:	f000 bc1f 	b.w	8010804 <__retarget_lock_acquire_recursive>
 800ffc6:	bf00      	nop
 800ffc8:	20000cc0 	.word	0x20000cc0

0800ffcc <__malloc_unlock>:
 800ffcc:	4801      	ldr	r0, [pc, #4]	; (800ffd4 <__malloc_unlock+0x8>)
 800ffce:	f000 bc1a 	b.w	8010806 <__retarget_lock_release_recursive>
 800ffd2:	bf00      	nop
 800ffd4:	20000cc0 	.word	0x20000cc0

0800ffd8 <_realloc_r>:
 800ffd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffdc:	4680      	mov	r8, r0
 800ffde:	4614      	mov	r4, r2
 800ffe0:	460e      	mov	r6, r1
 800ffe2:	b921      	cbnz	r1, 800ffee <_realloc_r+0x16>
 800ffe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffe8:	4611      	mov	r1, r2
 800ffea:	f7ff bdad 	b.w	800fb48 <_malloc_r>
 800ffee:	b92a      	cbnz	r2, 800fffc <_realloc_r+0x24>
 800fff0:	f7ff fd3e 	bl	800fa70 <_free_r>
 800fff4:	4625      	mov	r5, r4
 800fff6:	4628      	mov	r0, r5
 800fff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fffc:	f000 fc6a 	bl	80108d4 <_malloc_usable_size_r>
 8010000:	4284      	cmp	r4, r0
 8010002:	4607      	mov	r7, r0
 8010004:	d802      	bhi.n	801000c <_realloc_r+0x34>
 8010006:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801000a:	d812      	bhi.n	8010032 <_realloc_r+0x5a>
 801000c:	4621      	mov	r1, r4
 801000e:	4640      	mov	r0, r8
 8010010:	f7ff fd9a 	bl	800fb48 <_malloc_r>
 8010014:	4605      	mov	r5, r0
 8010016:	2800      	cmp	r0, #0
 8010018:	d0ed      	beq.n	800fff6 <_realloc_r+0x1e>
 801001a:	42bc      	cmp	r4, r7
 801001c:	4622      	mov	r2, r4
 801001e:	4631      	mov	r1, r6
 8010020:	bf28      	it	cs
 8010022:	463a      	movcs	r2, r7
 8010024:	f7fd fe52 	bl	800dccc <memcpy>
 8010028:	4631      	mov	r1, r6
 801002a:	4640      	mov	r0, r8
 801002c:	f7ff fd20 	bl	800fa70 <_free_r>
 8010030:	e7e1      	b.n	800fff6 <_realloc_r+0x1e>
 8010032:	4635      	mov	r5, r6
 8010034:	e7df      	b.n	800fff6 <_realloc_r+0x1e>

08010036 <__sfputc_r>:
 8010036:	6893      	ldr	r3, [r2, #8]
 8010038:	3b01      	subs	r3, #1
 801003a:	2b00      	cmp	r3, #0
 801003c:	b410      	push	{r4}
 801003e:	6093      	str	r3, [r2, #8]
 8010040:	da08      	bge.n	8010054 <__sfputc_r+0x1e>
 8010042:	6994      	ldr	r4, [r2, #24]
 8010044:	42a3      	cmp	r3, r4
 8010046:	db01      	blt.n	801004c <__sfputc_r+0x16>
 8010048:	290a      	cmp	r1, #10
 801004a:	d103      	bne.n	8010054 <__sfputc_r+0x1e>
 801004c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010050:	f000 b94a 	b.w	80102e8 <__swbuf_r>
 8010054:	6813      	ldr	r3, [r2, #0]
 8010056:	1c58      	adds	r0, r3, #1
 8010058:	6010      	str	r0, [r2, #0]
 801005a:	7019      	strb	r1, [r3, #0]
 801005c:	4608      	mov	r0, r1
 801005e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010062:	4770      	bx	lr

08010064 <__sfputs_r>:
 8010064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010066:	4606      	mov	r6, r0
 8010068:	460f      	mov	r7, r1
 801006a:	4614      	mov	r4, r2
 801006c:	18d5      	adds	r5, r2, r3
 801006e:	42ac      	cmp	r4, r5
 8010070:	d101      	bne.n	8010076 <__sfputs_r+0x12>
 8010072:	2000      	movs	r0, #0
 8010074:	e007      	b.n	8010086 <__sfputs_r+0x22>
 8010076:	f814 1b01 	ldrb.w	r1, [r4], #1
 801007a:	463a      	mov	r2, r7
 801007c:	4630      	mov	r0, r6
 801007e:	f7ff ffda 	bl	8010036 <__sfputc_r>
 8010082:	1c43      	adds	r3, r0, #1
 8010084:	d1f3      	bne.n	801006e <__sfputs_r+0xa>
 8010086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010088 <_vfiprintf_r>:
 8010088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801008c:	460d      	mov	r5, r1
 801008e:	b09d      	sub	sp, #116	; 0x74
 8010090:	4614      	mov	r4, r2
 8010092:	4698      	mov	r8, r3
 8010094:	4606      	mov	r6, r0
 8010096:	b118      	cbz	r0, 80100a0 <_vfiprintf_r+0x18>
 8010098:	6983      	ldr	r3, [r0, #24]
 801009a:	b90b      	cbnz	r3, 80100a0 <_vfiprintf_r+0x18>
 801009c:	f000 fb14 	bl	80106c8 <__sinit>
 80100a0:	4b89      	ldr	r3, [pc, #548]	; (80102c8 <_vfiprintf_r+0x240>)
 80100a2:	429d      	cmp	r5, r3
 80100a4:	d11b      	bne.n	80100de <_vfiprintf_r+0x56>
 80100a6:	6875      	ldr	r5, [r6, #4]
 80100a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100aa:	07d9      	lsls	r1, r3, #31
 80100ac:	d405      	bmi.n	80100ba <_vfiprintf_r+0x32>
 80100ae:	89ab      	ldrh	r3, [r5, #12]
 80100b0:	059a      	lsls	r2, r3, #22
 80100b2:	d402      	bmi.n	80100ba <_vfiprintf_r+0x32>
 80100b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100b6:	f000 fba5 	bl	8010804 <__retarget_lock_acquire_recursive>
 80100ba:	89ab      	ldrh	r3, [r5, #12]
 80100bc:	071b      	lsls	r3, r3, #28
 80100be:	d501      	bpl.n	80100c4 <_vfiprintf_r+0x3c>
 80100c0:	692b      	ldr	r3, [r5, #16]
 80100c2:	b9eb      	cbnz	r3, 8010100 <_vfiprintf_r+0x78>
 80100c4:	4629      	mov	r1, r5
 80100c6:	4630      	mov	r0, r6
 80100c8:	f000 f96e 	bl	80103a8 <__swsetup_r>
 80100cc:	b1c0      	cbz	r0, 8010100 <_vfiprintf_r+0x78>
 80100ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100d0:	07dc      	lsls	r4, r3, #31
 80100d2:	d50e      	bpl.n	80100f2 <_vfiprintf_r+0x6a>
 80100d4:	f04f 30ff 	mov.w	r0, #4294967295
 80100d8:	b01d      	add	sp, #116	; 0x74
 80100da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100de:	4b7b      	ldr	r3, [pc, #492]	; (80102cc <_vfiprintf_r+0x244>)
 80100e0:	429d      	cmp	r5, r3
 80100e2:	d101      	bne.n	80100e8 <_vfiprintf_r+0x60>
 80100e4:	68b5      	ldr	r5, [r6, #8]
 80100e6:	e7df      	b.n	80100a8 <_vfiprintf_r+0x20>
 80100e8:	4b79      	ldr	r3, [pc, #484]	; (80102d0 <_vfiprintf_r+0x248>)
 80100ea:	429d      	cmp	r5, r3
 80100ec:	bf08      	it	eq
 80100ee:	68f5      	ldreq	r5, [r6, #12]
 80100f0:	e7da      	b.n	80100a8 <_vfiprintf_r+0x20>
 80100f2:	89ab      	ldrh	r3, [r5, #12]
 80100f4:	0598      	lsls	r0, r3, #22
 80100f6:	d4ed      	bmi.n	80100d4 <_vfiprintf_r+0x4c>
 80100f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100fa:	f000 fb84 	bl	8010806 <__retarget_lock_release_recursive>
 80100fe:	e7e9      	b.n	80100d4 <_vfiprintf_r+0x4c>
 8010100:	2300      	movs	r3, #0
 8010102:	9309      	str	r3, [sp, #36]	; 0x24
 8010104:	2320      	movs	r3, #32
 8010106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801010a:	f8cd 800c 	str.w	r8, [sp, #12]
 801010e:	2330      	movs	r3, #48	; 0x30
 8010110:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80102d4 <_vfiprintf_r+0x24c>
 8010114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010118:	f04f 0901 	mov.w	r9, #1
 801011c:	4623      	mov	r3, r4
 801011e:	469a      	mov	sl, r3
 8010120:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010124:	b10a      	cbz	r2, 801012a <_vfiprintf_r+0xa2>
 8010126:	2a25      	cmp	r2, #37	; 0x25
 8010128:	d1f9      	bne.n	801011e <_vfiprintf_r+0x96>
 801012a:	ebba 0b04 	subs.w	fp, sl, r4
 801012e:	d00b      	beq.n	8010148 <_vfiprintf_r+0xc0>
 8010130:	465b      	mov	r3, fp
 8010132:	4622      	mov	r2, r4
 8010134:	4629      	mov	r1, r5
 8010136:	4630      	mov	r0, r6
 8010138:	f7ff ff94 	bl	8010064 <__sfputs_r>
 801013c:	3001      	adds	r0, #1
 801013e:	f000 80aa 	beq.w	8010296 <_vfiprintf_r+0x20e>
 8010142:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010144:	445a      	add	r2, fp
 8010146:	9209      	str	r2, [sp, #36]	; 0x24
 8010148:	f89a 3000 	ldrb.w	r3, [sl]
 801014c:	2b00      	cmp	r3, #0
 801014e:	f000 80a2 	beq.w	8010296 <_vfiprintf_r+0x20e>
 8010152:	2300      	movs	r3, #0
 8010154:	f04f 32ff 	mov.w	r2, #4294967295
 8010158:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801015c:	f10a 0a01 	add.w	sl, sl, #1
 8010160:	9304      	str	r3, [sp, #16]
 8010162:	9307      	str	r3, [sp, #28]
 8010164:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010168:	931a      	str	r3, [sp, #104]	; 0x68
 801016a:	4654      	mov	r4, sl
 801016c:	2205      	movs	r2, #5
 801016e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010172:	4858      	ldr	r0, [pc, #352]	; (80102d4 <_vfiprintf_r+0x24c>)
 8010174:	f7f0 f854 	bl	8000220 <memchr>
 8010178:	9a04      	ldr	r2, [sp, #16]
 801017a:	b9d8      	cbnz	r0, 80101b4 <_vfiprintf_r+0x12c>
 801017c:	06d1      	lsls	r1, r2, #27
 801017e:	bf44      	itt	mi
 8010180:	2320      	movmi	r3, #32
 8010182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010186:	0713      	lsls	r3, r2, #28
 8010188:	bf44      	itt	mi
 801018a:	232b      	movmi	r3, #43	; 0x2b
 801018c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010190:	f89a 3000 	ldrb.w	r3, [sl]
 8010194:	2b2a      	cmp	r3, #42	; 0x2a
 8010196:	d015      	beq.n	80101c4 <_vfiprintf_r+0x13c>
 8010198:	9a07      	ldr	r2, [sp, #28]
 801019a:	4654      	mov	r4, sl
 801019c:	2000      	movs	r0, #0
 801019e:	f04f 0c0a 	mov.w	ip, #10
 80101a2:	4621      	mov	r1, r4
 80101a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101a8:	3b30      	subs	r3, #48	; 0x30
 80101aa:	2b09      	cmp	r3, #9
 80101ac:	d94e      	bls.n	801024c <_vfiprintf_r+0x1c4>
 80101ae:	b1b0      	cbz	r0, 80101de <_vfiprintf_r+0x156>
 80101b0:	9207      	str	r2, [sp, #28]
 80101b2:	e014      	b.n	80101de <_vfiprintf_r+0x156>
 80101b4:	eba0 0308 	sub.w	r3, r0, r8
 80101b8:	fa09 f303 	lsl.w	r3, r9, r3
 80101bc:	4313      	orrs	r3, r2
 80101be:	9304      	str	r3, [sp, #16]
 80101c0:	46a2      	mov	sl, r4
 80101c2:	e7d2      	b.n	801016a <_vfiprintf_r+0xe2>
 80101c4:	9b03      	ldr	r3, [sp, #12]
 80101c6:	1d19      	adds	r1, r3, #4
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	9103      	str	r1, [sp, #12]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	bfbb      	ittet	lt
 80101d0:	425b      	neglt	r3, r3
 80101d2:	f042 0202 	orrlt.w	r2, r2, #2
 80101d6:	9307      	strge	r3, [sp, #28]
 80101d8:	9307      	strlt	r3, [sp, #28]
 80101da:	bfb8      	it	lt
 80101dc:	9204      	strlt	r2, [sp, #16]
 80101de:	7823      	ldrb	r3, [r4, #0]
 80101e0:	2b2e      	cmp	r3, #46	; 0x2e
 80101e2:	d10c      	bne.n	80101fe <_vfiprintf_r+0x176>
 80101e4:	7863      	ldrb	r3, [r4, #1]
 80101e6:	2b2a      	cmp	r3, #42	; 0x2a
 80101e8:	d135      	bne.n	8010256 <_vfiprintf_r+0x1ce>
 80101ea:	9b03      	ldr	r3, [sp, #12]
 80101ec:	1d1a      	adds	r2, r3, #4
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	9203      	str	r2, [sp, #12]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	bfb8      	it	lt
 80101f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80101fa:	3402      	adds	r4, #2
 80101fc:	9305      	str	r3, [sp, #20]
 80101fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80102e4 <_vfiprintf_r+0x25c>
 8010202:	7821      	ldrb	r1, [r4, #0]
 8010204:	2203      	movs	r2, #3
 8010206:	4650      	mov	r0, sl
 8010208:	f7f0 f80a 	bl	8000220 <memchr>
 801020c:	b140      	cbz	r0, 8010220 <_vfiprintf_r+0x198>
 801020e:	2340      	movs	r3, #64	; 0x40
 8010210:	eba0 000a 	sub.w	r0, r0, sl
 8010214:	fa03 f000 	lsl.w	r0, r3, r0
 8010218:	9b04      	ldr	r3, [sp, #16]
 801021a:	4303      	orrs	r3, r0
 801021c:	3401      	adds	r4, #1
 801021e:	9304      	str	r3, [sp, #16]
 8010220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010224:	482c      	ldr	r0, [pc, #176]	; (80102d8 <_vfiprintf_r+0x250>)
 8010226:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801022a:	2206      	movs	r2, #6
 801022c:	f7ef fff8 	bl	8000220 <memchr>
 8010230:	2800      	cmp	r0, #0
 8010232:	d03f      	beq.n	80102b4 <_vfiprintf_r+0x22c>
 8010234:	4b29      	ldr	r3, [pc, #164]	; (80102dc <_vfiprintf_r+0x254>)
 8010236:	bb1b      	cbnz	r3, 8010280 <_vfiprintf_r+0x1f8>
 8010238:	9b03      	ldr	r3, [sp, #12]
 801023a:	3307      	adds	r3, #7
 801023c:	f023 0307 	bic.w	r3, r3, #7
 8010240:	3308      	adds	r3, #8
 8010242:	9303      	str	r3, [sp, #12]
 8010244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010246:	443b      	add	r3, r7
 8010248:	9309      	str	r3, [sp, #36]	; 0x24
 801024a:	e767      	b.n	801011c <_vfiprintf_r+0x94>
 801024c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010250:	460c      	mov	r4, r1
 8010252:	2001      	movs	r0, #1
 8010254:	e7a5      	b.n	80101a2 <_vfiprintf_r+0x11a>
 8010256:	2300      	movs	r3, #0
 8010258:	3401      	adds	r4, #1
 801025a:	9305      	str	r3, [sp, #20]
 801025c:	4619      	mov	r1, r3
 801025e:	f04f 0c0a 	mov.w	ip, #10
 8010262:	4620      	mov	r0, r4
 8010264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010268:	3a30      	subs	r2, #48	; 0x30
 801026a:	2a09      	cmp	r2, #9
 801026c:	d903      	bls.n	8010276 <_vfiprintf_r+0x1ee>
 801026e:	2b00      	cmp	r3, #0
 8010270:	d0c5      	beq.n	80101fe <_vfiprintf_r+0x176>
 8010272:	9105      	str	r1, [sp, #20]
 8010274:	e7c3      	b.n	80101fe <_vfiprintf_r+0x176>
 8010276:	fb0c 2101 	mla	r1, ip, r1, r2
 801027a:	4604      	mov	r4, r0
 801027c:	2301      	movs	r3, #1
 801027e:	e7f0      	b.n	8010262 <_vfiprintf_r+0x1da>
 8010280:	ab03      	add	r3, sp, #12
 8010282:	9300      	str	r3, [sp, #0]
 8010284:	462a      	mov	r2, r5
 8010286:	4b16      	ldr	r3, [pc, #88]	; (80102e0 <_vfiprintf_r+0x258>)
 8010288:	a904      	add	r1, sp, #16
 801028a:	4630      	mov	r0, r6
 801028c:	f7fd fdd4 	bl	800de38 <_printf_float>
 8010290:	4607      	mov	r7, r0
 8010292:	1c78      	adds	r0, r7, #1
 8010294:	d1d6      	bne.n	8010244 <_vfiprintf_r+0x1bc>
 8010296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010298:	07d9      	lsls	r1, r3, #31
 801029a:	d405      	bmi.n	80102a8 <_vfiprintf_r+0x220>
 801029c:	89ab      	ldrh	r3, [r5, #12]
 801029e:	059a      	lsls	r2, r3, #22
 80102a0:	d402      	bmi.n	80102a8 <_vfiprintf_r+0x220>
 80102a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102a4:	f000 faaf 	bl	8010806 <__retarget_lock_release_recursive>
 80102a8:	89ab      	ldrh	r3, [r5, #12]
 80102aa:	065b      	lsls	r3, r3, #25
 80102ac:	f53f af12 	bmi.w	80100d4 <_vfiprintf_r+0x4c>
 80102b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102b2:	e711      	b.n	80100d8 <_vfiprintf_r+0x50>
 80102b4:	ab03      	add	r3, sp, #12
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	462a      	mov	r2, r5
 80102ba:	4b09      	ldr	r3, [pc, #36]	; (80102e0 <_vfiprintf_r+0x258>)
 80102bc:	a904      	add	r1, sp, #16
 80102be:	4630      	mov	r0, r6
 80102c0:	f7fe f85e 	bl	800e380 <_printf_i>
 80102c4:	e7e4      	b.n	8010290 <_vfiprintf_r+0x208>
 80102c6:	bf00      	nop
 80102c8:	08012444 	.word	0x08012444
 80102cc:	08012464 	.word	0x08012464
 80102d0:	08012424 	.word	0x08012424
 80102d4:	080122cc 	.word	0x080122cc
 80102d8:	080122d6 	.word	0x080122d6
 80102dc:	0800de39 	.word	0x0800de39
 80102e0:	08010065 	.word	0x08010065
 80102e4:	080122d2 	.word	0x080122d2

080102e8 <__swbuf_r>:
 80102e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ea:	460e      	mov	r6, r1
 80102ec:	4614      	mov	r4, r2
 80102ee:	4605      	mov	r5, r0
 80102f0:	b118      	cbz	r0, 80102fa <__swbuf_r+0x12>
 80102f2:	6983      	ldr	r3, [r0, #24]
 80102f4:	b90b      	cbnz	r3, 80102fa <__swbuf_r+0x12>
 80102f6:	f000 f9e7 	bl	80106c8 <__sinit>
 80102fa:	4b21      	ldr	r3, [pc, #132]	; (8010380 <__swbuf_r+0x98>)
 80102fc:	429c      	cmp	r4, r3
 80102fe:	d12b      	bne.n	8010358 <__swbuf_r+0x70>
 8010300:	686c      	ldr	r4, [r5, #4]
 8010302:	69a3      	ldr	r3, [r4, #24]
 8010304:	60a3      	str	r3, [r4, #8]
 8010306:	89a3      	ldrh	r3, [r4, #12]
 8010308:	071a      	lsls	r2, r3, #28
 801030a:	d52f      	bpl.n	801036c <__swbuf_r+0x84>
 801030c:	6923      	ldr	r3, [r4, #16]
 801030e:	b36b      	cbz	r3, 801036c <__swbuf_r+0x84>
 8010310:	6923      	ldr	r3, [r4, #16]
 8010312:	6820      	ldr	r0, [r4, #0]
 8010314:	1ac0      	subs	r0, r0, r3
 8010316:	6963      	ldr	r3, [r4, #20]
 8010318:	b2f6      	uxtb	r6, r6
 801031a:	4283      	cmp	r3, r0
 801031c:	4637      	mov	r7, r6
 801031e:	dc04      	bgt.n	801032a <__swbuf_r+0x42>
 8010320:	4621      	mov	r1, r4
 8010322:	4628      	mov	r0, r5
 8010324:	f000 f93c 	bl	80105a0 <_fflush_r>
 8010328:	bb30      	cbnz	r0, 8010378 <__swbuf_r+0x90>
 801032a:	68a3      	ldr	r3, [r4, #8]
 801032c:	3b01      	subs	r3, #1
 801032e:	60a3      	str	r3, [r4, #8]
 8010330:	6823      	ldr	r3, [r4, #0]
 8010332:	1c5a      	adds	r2, r3, #1
 8010334:	6022      	str	r2, [r4, #0]
 8010336:	701e      	strb	r6, [r3, #0]
 8010338:	6963      	ldr	r3, [r4, #20]
 801033a:	3001      	adds	r0, #1
 801033c:	4283      	cmp	r3, r0
 801033e:	d004      	beq.n	801034a <__swbuf_r+0x62>
 8010340:	89a3      	ldrh	r3, [r4, #12]
 8010342:	07db      	lsls	r3, r3, #31
 8010344:	d506      	bpl.n	8010354 <__swbuf_r+0x6c>
 8010346:	2e0a      	cmp	r6, #10
 8010348:	d104      	bne.n	8010354 <__swbuf_r+0x6c>
 801034a:	4621      	mov	r1, r4
 801034c:	4628      	mov	r0, r5
 801034e:	f000 f927 	bl	80105a0 <_fflush_r>
 8010352:	b988      	cbnz	r0, 8010378 <__swbuf_r+0x90>
 8010354:	4638      	mov	r0, r7
 8010356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010358:	4b0a      	ldr	r3, [pc, #40]	; (8010384 <__swbuf_r+0x9c>)
 801035a:	429c      	cmp	r4, r3
 801035c:	d101      	bne.n	8010362 <__swbuf_r+0x7a>
 801035e:	68ac      	ldr	r4, [r5, #8]
 8010360:	e7cf      	b.n	8010302 <__swbuf_r+0x1a>
 8010362:	4b09      	ldr	r3, [pc, #36]	; (8010388 <__swbuf_r+0xa0>)
 8010364:	429c      	cmp	r4, r3
 8010366:	bf08      	it	eq
 8010368:	68ec      	ldreq	r4, [r5, #12]
 801036a:	e7ca      	b.n	8010302 <__swbuf_r+0x1a>
 801036c:	4621      	mov	r1, r4
 801036e:	4628      	mov	r0, r5
 8010370:	f000 f81a 	bl	80103a8 <__swsetup_r>
 8010374:	2800      	cmp	r0, #0
 8010376:	d0cb      	beq.n	8010310 <__swbuf_r+0x28>
 8010378:	f04f 37ff 	mov.w	r7, #4294967295
 801037c:	e7ea      	b.n	8010354 <__swbuf_r+0x6c>
 801037e:	bf00      	nop
 8010380:	08012444 	.word	0x08012444
 8010384:	08012464 	.word	0x08012464
 8010388:	08012424 	.word	0x08012424

0801038c <__ascii_wctomb>:
 801038c:	b149      	cbz	r1, 80103a2 <__ascii_wctomb+0x16>
 801038e:	2aff      	cmp	r2, #255	; 0xff
 8010390:	bf85      	ittet	hi
 8010392:	238a      	movhi	r3, #138	; 0x8a
 8010394:	6003      	strhi	r3, [r0, #0]
 8010396:	700a      	strbls	r2, [r1, #0]
 8010398:	f04f 30ff 	movhi.w	r0, #4294967295
 801039c:	bf98      	it	ls
 801039e:	2001      	movls	r0, #1
 80103a0:	4770      	bx	lr
 80103a2:	4608      	mov	r0, r1
 80103a4:	4770      	bx	lr
	...

080103a8 <__swsetup_r>:
 80103a8:	4b32      	ldr	r3, [pc, #200]	; (8010474 <__swsetup_r+0xcc>)
 80103aa:	b570      	push	{r4, r5, r6, lr}
 80103ac:	681d      	ldr	r5, [r3, #0]
 80103ae:	4606      	mov	r6, r0
 80103b0:	460c      	mov	r4, r1
 80103b2:	b125      	cbz	r5, 80103be <__swsetup_r+0x16>
 80103b4:	69ab      	ldr	r3, [r5, #24]
 80103b6:	b913      	cbnz	r3, 80103be <__swsetup_r+0x16>
 80103b8:	4628      	mov	r0, r5
 80103ba:	f000 f985 	bl	80106c8 <__sinit>
 80103be:	4b2e      	ldr	r3, [pc, #184]	; (8010478 <__swsetup_r+0xd0>)
 80103c0:	429c      	cmp	r4, r3
 80103c2:	d10f      	bne.n	80103e4 <__swsetup_r+0x3c>
 80103c4:	686c      	ldr	r4, [r5, #4]
 80103c6:	89a3      	ldrh	r3, [r4, #12]
 80103c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80103cc:	0719      	lsls	r1, r3, #28
 80103ce:	d42c      	bmi.n	801042a <__swsetup_r+0x82>
 80103d0:	06dd      	lsls	r5, r3, #27
 80103d2:	d411      	bmi.n	80103f8 <__swsetup_r+0x50>
 80103d4:	2309      	movs	r3, #9
 80103d6:	6033      	str	r3, [r6, #0]
 80103d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80103dc:	81a3      	strh	r3, [r4, #12]
 80103de:	f04f 30ff 	mov.w	r0, #4294967295
 80103e2:	e03e      	b.n	8010462 <__swsetup_r+0xba>
 80103e4:	4b25      	ldr	r3, [pc, #148]	; (801047c <__swsetup_r+0xd4>)
 80103e6:	429c      	cmp	r4, r3
 80103e8:	d101      	bne.n	80103ee <__swsetup_r+0x46>
 80103ea:	68ac      	ldr	r4, [r5, #8]
 80103ec:	e7eb      	b.n	80103c6 <__swsetup_r+0x1e>
 80103ee:	4b24      	ldr	r3, [pc, #144]	; (8010480 <__swsetup_r+0xd8>)
 80103f0:	429c      	cmp	r4, r3
 80103f2:	bf08      	it	eq
 80103f4:	68ec      	ldreq	r4, [r5, #12]
 80103f6:	e7e6      	b.n	80103c6 <__swsetup_r+0x1e>
 80103f8:	0758      	lsls	r0, r3, #29
 80103fa:	d512      	bpl.n	8010422 <__swsetup_r+0x7a>
 80103fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103fe:	b141      	cbz	r1, 8010412 <__swsetup_r+0x6a>
 8010400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010404:	4299      	cmp	r1, r3
 8010406:	d002      	beq.n	801040e <__swsetup_r+0x66>
 8010408:	4630      	mov	r0, r6
 801040a:	f7ff fb31 	bl	800fa70 <_free_r>
 801040e:	2300      	movs	r3, #0
 8010410:	6363      	str	r3, [r4, #52]	; 0x34
 8010412:	89a3      	ldrh	r3, [r4, #12]
 8010414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010418:	81a3      	strh	r3, [r4, #12]
 801041a:	2300      	movs	r3, #0
 801041c:	6063      	str	r3, [r4, #4]
 801041e:	6923      	ldr	r3, [r4, #16]
 8010420:	6023      	str	r3, [r4, #0]
 8010422:	89a3      	ldrh	r3, [r4, #12]
 8010424:	f043 0308 	orr.w	r3, r3, #8
 8010428:	81a3      	strh	r3, [r4, #12]
 801042a:	6923      	ldr	r3, [r4, #16]
 801042c:	b94b      	cbnz	r3, 8010442 <__swsetup_r+0x9a>
 801042e:	89a3      	ldrh	r3, [r4, #12]
 8010430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010438:	d003      	beq.n	8010442 <__swsetup_r+0x9a>
 801043a:	4621      	mov	r1, r4
 801043c:	4630      	mov	r0, r6
 801043e:	f000 fa09 	bl	8010854 <__smakebuf_r>
 8010442:	89a0      	ldrh	r0, [r4, #12]
 8010444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010448:	f010 0301 	ands.w	r3, r0, #1
 801044c:	d00a      	beq.n	8010464 <__swsetup_r+0xbc>
 801044e:	2300      	movs	r3, #0
 8010450:	60a3      	str	r3, [r4, #8]
 8010452:	6963      	ldr	r3, [r4, #20]
 8010454:	425b      	negs	r3, r3
 8010456:	61a3      	str	r3, [r4, #24]
 8010458:	6923      	ldr	r3, [r4, #16]
 801045a:	b943      	cbnz	r3, 801046e <__swsetup_r+0xc6>
 801045c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010460:	d1ba      	bne.n	80103d8 <__swsetup_r+0x30>
 8010462:	bd70      	pop	{r4, r5, r6, pc}
 8010464:	0781      	lsls	r1, r0, #30
 8010466:	bf58      	it	pl
 8010468:	6963      	ldrpl	r3, [r4, #20]
 801046a:	60a3      	str	r3, [r4, #8]
 801046c:	e7f4      	b.n	8010458 <__swsetup_r+0xb0>
 801046e:	2000      	movs	r0, #0
 8010470:	e7f7      	b.n	8010462 <__swsetup_r+0xba>
 8010472:	bf00      	nop
 8010474:	20000040 	.word	0x20000040
 8010478:	08012444 	.word	0x08012444
 801047c:	08012464 	.word	0x08012464
 8010480:	08012424 	.word	0x08012424

08010484 <abort>:
 8010484:	b508      	push	{r3, lr}
 8010486:	2006      	movs	r0, #6
 8010488:	f000 fa54 	bl	8010934 <raise>
 801048c:	2001      	movs	r0, #1
 801048e:	f001 fdb7 	bl	8012000 <_exit>
	...

08010494 <__sflush_r>:
 8010494:	898a      	ldrh	r2, [r1, #12]
 8010496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801049a:	4605      	mov	r5, r0
 801049c:	0710      	lsls	r0, r2, #28
 801049e:	460c      	mov	r4, r1
 80104a0:	d458      	bmi.n	8010554 <__sflush_r+0xc0>
 80104a2:	684b      	ldr	r3, [r1, #4]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	dc05      	bgt.n	80104b4 <__sflush_r+0x20>
 80104a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	dc02      	bgt.n	80104b4 <__sflush_r+0x20>
 80104ae:	2000      	movs	r0, #0
 80104b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104b6:	2e00      	cmp	r6, #0
 80104b8:	d0f9      	beq.n	80104ae <__sflush_r+0x1a>
 80104ba:	2300      	movs	r3, #0
 80104bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80104c0:	682f      	ldr	r7, [r5, #0]
 80104c2:	602b      	str	r3, [r5, #0]
 80104c4:	d032      	beq.n	801052c <__sflush_r+0x98>
 80104c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80104c8:	89a3      	ldrh	r3, [r4, #12]
 80104ca:	075a      	lsls	r2, r3, #29
 80104cc:	d505      	bpl.n	80104da <__sflush_r+0x46>
 80104ce:	6863      	ldr	r3, [r4, #4]
 80104d0:	1ac0      	subs	r0, r0, r3
 80104d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80104d4:	b10b      	cbz	r3, 80104da <__sflush_r+0x46>
 80104d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104d8:	1ac0      	subs	r0, r0, r3
 80104da:	2300      	movs	r3, #0
 80104dc:	4602      	mov	r2, r0
 80104de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80104e0:	6a21      	ldr	r1, [r4, #32]
 80104e2:	4628      	mov	r0, r5
 80104e4:	47b0      	blx	r6
 80104e6:	1c43      	adds	r3, r0, #1
 80104e8:	89a3      	ldrh	r3, [r4, #12]
 80104ea:	d106      	bne.n	80104fa <__sflush_r+0x66>
 80104ec:	6829      	ldr	r1, [r5, #0]
 80104ee:	291d      	cmp	r1, #29
 80104f0:	d82c      	bhi.n	801054c <__sflush_r+0xb8>
 80104f2:	4a2a      	ldr	r2, [pc, #168]	; (801059c <__sflush_r+0x108>)
 80104f4:	40ca      	lsrs	r2, r1
 80104f6:	07d6      	lsls	r6, r2, #31
 80104f8:	d528      	bpl.n	801054c <__sflush_r+0xb8>
 80104fa:	2200      	movs	r2, #0
 80104fc:	6062      	str	r2, [r4, #4]
 80104fe:	04d9      	lsls	r1, r3, #19
 8010500:	6922      	ldr	r2, [r4, #16]
 8010502:	6022      	str	r2, [r4, #0]
 8010504:	d504      	bpl.n	8010510 <__sflush_r+0x7c>
 8010506:	1c42      	adds	r2, r0, #1
 8010508:	d101      	bne.n	801050e <__sflush_r+0x7a>
 801050a:	682b      	ldr	r3, [r5, #0]
 801050c:	b903      	cbnz	r3, 8010510 <__sflush_r+0x7c>
 801050e:	6560      	str	r0, [r4, #84]	; 0x54
 8010510:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010512:	602f      	str	r7, [r5, #0]
 8010514:	2900      	cmp	r1, #0
 8010516:	d0ca      	beq.n	80104ae <__sflush_r+0x1a>
 8010518:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801051c:	4299      	cmp	r1, r3
 801051e:	d002      	beq.n	8010526 <__sflush_r+0x92>
 8010520:	4628      	mov	r0, r5
 8010522:	f7ff faa5 	bl	800fa70 <_free_r>
 8010526:	2000      	movs	r0, #0
 8010528:	6360      	str	r0, [r4, #52]	; 0x34
 801052a:	e7c1      	b.n	80104b0 <__sflush_r+0x1c>
 801052c:	6a21      	ldr	r1, [r4, #32]
 801052e:	2301      	movs	r3, #1
 8010530:	4628      	mov	r0, r5
 8010532:	47b0      	blx	r6
 8010534:	1c41      	adds	r1, r0, #1
 8010536:	d1c7      	bne.n	80104c8 <__sflush_r+0x34>
 8010538:	682b      	ldr	r3, [r5, #0]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d0c4      	beq.n	80104c8 <__sflush_r+0x34>
 801053e:	2b1d      	cmp	r3, #29
 8010540:	d001      	beq.n	8010546 <__sflush_r+0xb2>
 8010542:	2b16      	cmp	r3, #22
 8010544:	d101      	bne.n	801054a <__sflush_r+0xb6>
 8010546:	602f      	str	r7, [r5, #0]
 8010548:	e7b1      	b.n	80104ae <__sflush_r+0x1a>
 801054a:	89a3      	ldrh	r3, [r4, #12]
 801054c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010550:	81a3      	strh	r3, [r4, #12]
 8010552:	e7ad      	b.n	80104b0 <__sflush_r+0x1c>
 8010554:	690f      	ldr	r7, [r1, #16]
 8010556:	2f00      	cmp	r7, #0
 8010558:	d0a9      	beq.n	80104ae <__sflush_r+0x1a>
 801055a:	0793      	lsls	r3, r2, #30
 801055c:	680e      	ldr	r6, [r1, #0]
 801055e:	bf08      	it	eq
 8010560:	694b      	ldreq	r3, [r1, #20]
 8010562:	600f      	str	r7, [r1, #0]
 8010564:	bf18      	it	ne
 8010566:	2300      	movne	r3, #0
 8010568:	eba6 0807 	sub.w	r8, r6, r7
 801056c:	608b      	str	r3, [r1, #8]
 801056e:	f1b8 0f00 	cmp.w	r8, #0
 8010572:	dd9c      	ble.n	80104ae <__sflush_r+0x1a>
 8010574:	6a21      	ldr	r1, [r4, #32]
 8010576:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010578:	4643      	mov	r3, r8
 801057a:	463a      	mov	r2, r7
 801057c:	4628      	mov	r0, r5
 801057e:	47b0      	blx	r6
 8010580:	2800      	cmp	r0, #0
 8010582:	dc06      	bgt.n	8010592 <__sflush_r+0xfe>
 8010584:	89a3      	ldrh	r3, [r4, #12]
 8010586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801058a:	81a3      	strh	r3, [r4, #12]
 801058c:	f04f 30ff 	mov.w	r0, #4294967295
 8010590:	e78e      	b.n	80104b0 <__sflush_r+0x1c>
 8010592:	4407      	add	r7, r0
 8010594:	eba8 0800 	sub.w	r8, r8, r0
 8010598:	e7e9      	b.n	801056e <__sflush_r+0xda>
 801059a:	bf00      	nop
 801059c:	20400001 	.word	0x20400001

080105a0 <_fflush_r>:
 80105a0:	b538      	push	{r3, r4, r5, lr}
 80105a2:	690b      	ldr	r3, [r1, #16]
 80105a4:	4605      	mov	r5, r0
 80105a6:	460c      	mov	r4, r1
 80105a8:	b913      	cbnz	r3, 80105b0 <_fflush_r+0x10>
 80105aa:	2500      	movs	r5, #0
 80105ac:	4628      	mov	r0, r5
 80105ae:	bd38      	pop	{r3, r4, r5, pc}
 80105b0:	b118      	cbz	r0, 80105ba <_fflush_r+0x1a>
 80105b2:	6983      	ldr	r3, [r0, #24]
 80105b4:	b90b      	cbnz	r3, 80105ba <_fflush_r+0x1a>
 80105b6:	f000 f887 	bl	80106c8 <__sinit>
 80105ba:	4b14      	ldr	r3, [pc, #80]	; (801060c <_fflush_r+0x6c>)
 80105bc:	429c      	cmp	r4, r3
 80105be:	d11b      	bne.n	80105f8 <_fflush_r+0x58>
 80105c0:	686c      	ldr	r4, [r5, #4]
 80105c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d0ef      	beq.n	80105aa <_fflush_r+0xa>
 80105ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80105cc:	07d0      	lsls	r0, r2, #31
 80105ce:	d404      	bmi.n	80105da <_fflush_r+0x3a>
 80105d0:	0599      	lsls	r1, r3, #22
 80105d2:	d402      	bmi.n	80105da <_fflush_r+0x3a>
 80105d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105d6:	f000 f915 	bl	8010804 <__retarget_lock_acquire_recursive>
 80105da:	4628      	mov	r0, r5
 80105dc:	4621      	mov	r1, r4
 80105de:	f7ff ff59 	bl	8010494 <__sflush_r>
 80105e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105e4:	07da      	lsls	r2, r3, #31
 80105e6:	4605      	mov	r5, r0
 80105e8:	d4e0      	bmi.n	80105ac <_fflush_r+0xc>
 80105ea:	89a3      	ldrh	r3, [r4, #12]
 80105ec:	059b      	lsls	r3, r3, #22
 80105ee:	d4dd      	bmi.n	80105ac <_fflush_r+0xc>
 80105f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105f2:	f000 f908 	bl	8010806 <__retarget_lock_release_recursive>
 80105f6:	e7d9      	b.n	80105ac <_fflush_r+0xc>
 80105f8:	4b05      	ldr	r3, [pc, #20]	; (8010610 <_fflush_r+0x70>)
 80105fa:	429c      	cmp	r4, r3
 80105fc:	d101      	bne.n	8010602 <_fflush_r+0x62>
 80105fe:	68ac      	ldr	r4, [r5, #8]
 8010600:	e7df      	b.n	80105c2 <_fflush_r+0x22>
 8010602:	4b04      	ldr	r3, [pc, #16]	; (8010614 <_fflush_r+0x74>)
 8010604:	429c      	cmp	r4, r3
 8010606:	bf08      	it	eq
 8010608:	68ec      	ldreq	r4, [r5, #12]
 801060a:	e7da      	b.n	80105c2 <_fflush_r+0x22>
 801060c:	08012444 	.word	0x08012444
 8010610:	08012464 	.word	0x08012464
 8010614:	08012424 	.word	0x08012424

08010618 <std>:
 8010618:	2300      	movs	r3, #0
 801061a:	b510      	push	{r4, lr}
 801061c:	4604      	mov	r4, r0
 801061e:	e9c0 3300 	strd	r3, r3, [r0]
 8010622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010626:	6083      	str	r3, [r0, #8]
 8010628:	8181      	strh	r1, [r0, #12]
 801062a:	6643      	str	r3, [r0, #100]	; 0x64
 801062c:	81c2      	strh	r2, [r0, #14]
 801062e:	6183      	str	r3, [r0, #24]
 8010630:	4619      	mov	r1, r3
 8010632:	2208      	movs	r2, #8
 8010634:	305c      	adds	r0, #92	; 0x5c
 8010636:	f7fd fb57 	bl	800dce8 <memset>
 801063a:	4b05      	ldr	r3, [pc, #20]	; (8010650 <std+0x38>)
 801063c:	6263      	str	r3, [r4, #36]	; 0x24
 801063e:	4b05      	ldr	r3, [pc, #20]	; (8010654 <std+0x3c>)
 8010640:	62a3      	str	r3, [r4, #40]	; 0x28
 8010642:	4b05      	ldr	r3, [pc, #20]	; (8010658 <std+0x40>)
 8010644:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010646:	4b05      	ldr	r3, [pc, #20]	; (801065c <std+0x44>)
 8010648:	6224      	str	r4, [r4, #32]
 801064a:	6323      	str	r3, [r4, #48]	; 0x30
 801064c:	bd10      	pop	{r4, pc}
 801064e:	bf00      	nop
 8010650:	0801096d 	.word	0x0801096d
 8010654:	0801098f 	.word	0x0801098f
 8010658:	080109c7 	.word	0x080109c7
 801065c:	080109eb 	.word	0x080109eb

08010660 <_cleanup_r>:
 8010660:	4901      	ldr	r1, [pc, #4]	; (8010668 <_cleanup_r+0x8>)
 8010662:	f000 b8af 	b.w	80107c4 <_fwalk_reent>
 8010666:	bf00      	nop
 8010668:	080105a1 	.word	0x080105a1

0801066c <__sfmoreglue>:
 801066c:	b570      	push	{r4, r5, r6, lr}
 801066e:	2268      	movs	r2, #104	; 0x68
 8010670:	1e4d      	subs	r5, r1, #1
 8010672:	4355      	muls	r5, r2
 8010674:	460e      	mov	r6, r1
 8010676:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801067a:	f7ff fa65 	bl	800fb48 <_malloc_r>
 801067e:	4604      	mov	r4, r0
 8010680:	b140      	cbz	r0, 8010694 <__sfmoreglue+0x28>
 8010682:	2100      	movs	r1, #0
 8010684:	e9c0 1600 	strd	r1, r6, [r0]
 8010688:	300c      	adds	r0, #12
 801068a:	60a0      	str	r0, [r4, #8]
 801068c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010690:	f7fd fb2a 	bl	800dce8 <memset>
 8010694:	4620      	mov	r0, r4
 8010696:	bd70      	pop	{r4, r5, r6, pc}

08010698 <__sfp_lock_acquire>:
 8010698:	4801      	ldr	r0, [pc, #4]	; (80106a0 <__sfp_lock_acquire+0x8>)
 801069a:	f000 b8b3 	b.w	8010804 <__retarget_lock_acquire_recursive>
 801069e:	bf00      	nop
 80106a0:	20000cc1 	.word	0x20000cc1

080106a4 <__sfp_lock_release>:
 80106a4:	4801      	ldr	r0, [pc, #4]	; (80106ac <__sfp_lock_release+0x8>)
 80106a6:	f000 b8ae 	b.w	8010806 <__retarget_lock_release_recursive>
 80106aa:	bf00      	nop
 80106ac:	20000cc1 	.word	0x20000cc1

080106b0 <__sinit_lock_acquire>:
 80106b0:	4801      	ldr	r0, [pc, #4]	; (80106b8 <__sinit_lock_acquire+0x8>)
 80106b2:	f000 b8a7 	b.w	8010804 <__retarget_lock_acquire_recursive>
 80106b6:	bf00      	nop
 80106b8:	20000cc2 	.word	0x20000cc2

080106bc <__sinit_lock_release>:
 80106bc:	4801      	ldr	r0, [pc, #4]	; (80106c4 <__sinit_lock_release+0x8>)
 80106be:	f000 b8a2 	b.w	8010806 <__retarget_lock_release_recursive>
 80106c2:	bf00      	nop
 80106c4:	20000cc2 	.word	0x20000cc2

080106c8 <__sinit>:
 80106c8:	b510      	push	{r4, lr}
 80106ca:	4604      	mov	r4, r0
 80106cc:	f7ff fff0 	bl	80106b0 <__sinit_lock_acquire>
 80106d0:	69a3      	ldr	r3, [r4, #24]
 80106d2:	b11b      	cbz	r3, 80106dc <__sinit+0x14>
 80106d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80106d8:	f7ff bff0 	b.w	80106bc <__sinit_lock_release>
 80106dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80106e0:	6523      	str	r3, [r4, #80]	; 0x50
 80106e2:	4b13      	ldr	r3, [pc, #76]	; (8010730 <__sinit+0x68>)
 80106e4:	4a13      	ldr	r2, [pc, #76]	; (8010734 <__sinit+0x6c>)
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80106ea:	42a3      	cmp	r3, r4
 80106ec:	bf04      	itt	eq
 80106ee:	2301      	moveq	r3, #1
 80106f0:	61a3      	streq	r3, [r4, #24]
 80106f2:	4620      	mov	r0, r4
 80106f4:	f000 f820 	bl	8010738 <__sfp>
 80106f8:	6060      	str	r0, [r4, #4]
 80106fa:	4620      	mov	r0, r4
 80106fc:	f000 f81c 	bl	8010738 <__sfp>
 8010700:	60a0      	str	r0, [r4, #8]
 8010702:	4620      	mov	r0, r4
 8010704:	f000 f818 	bl	8010738 <__sfp>
 8010708:	2200      	movs	r2, #0
 801070a:	60e0      	str	r0, [r4, #12]
 801070c:	2104      	movs	r1, #4
 801070e:	6860      	ldr	r0, [r4, #4]
 8010710:	f7ff ff82 	bl	8010618 <std>
 8010714:	68a0      	ldr	r0, [r4, #8]
 8010716:	2201      	movs	r2, #1
 8010718:	2109      	movs	r1, #9
 801071a:	f7ff ff7d 	bl	8010618 <std>
 801071e:	68e0      	ldr	r0, [r4, #12]
 8010720:	2202      	movs	r2, #2
 8010722:	2112      	movs	r1, #18
 8010724:	f7ff ff78 	bl	8010618 <std>
 8010728:	2301      	movs	r3, #1
 801072a:	61a3      	str	r3, [r4, #24]
 801072c:	e7d2      	b.n	80106d4 <__sinit+0xc>
 801072e:	bf00      	nop
 8010730:	080120a8 	.word	0x080120a8
 8010734:	08010661 	.word	0x08010661

08010738 <__sfp>:
 8010738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801073a:	4607      	mov	r7, r0
 801073c:	f7ff ffac 	bl	8010698 <__sfp_lock_acquire>
 8010740:	4b1e      	ldr	r3, [pc, #120]	; (80107bc <__sfp+0x84>)
 8010742:	681e      	ldr	r6, [r3, #0]
 8010744:	69b3      	ldr	r3, [r6, #24]
 8010746:	b913      	cbnz	r3, 801074e <__sfp+0x16>
 8010748:	4630      	mov	r0, r6
 801074a:	f7ff ffbd 	bl	80106c8 <__sinit>
 801074e:	3648      	adds	r6, #72	; 0x48
 8010750:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010754:	3b01      	subs	r3, #1
 8010756:	d503      	bpl.n	8010760 <__sfp+0x28>
 8010758:	6833      	ldr	r3, [r6, #0]
 801075a:	b30b      	cbz	r3, 80107a0 <__sfp+0x68>
 801075c:	6836      	ldr	r6, [r6, #0]
 801075e:	e7f7      	b.n	8010750 <__sfp+0x18>
 8010760:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010764:	b9d5      	cbnz	r5, 801079c <__sfp+0x64>
 8010766:	4b16      	ldr	r3, [pc, #88]	; (80107c0 <__sfp+0x88>)
 8010768:	60e3      	str	r3, [r4, #12]
 801076a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801076e:	6665      	str	r5, [r4, #100]	; 0x64
 8010770:	f000 f847 	bl	8010802 <__retarget_lock_init_recursive>
 8010774:	f7ff ff96 	bl	80106a4 <__sfp_lock_release>
 8010778:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801077c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010780:	6025      	str	r5, [r4, #0]
 8010782:	61a5      	str	r5, [r4, #24]
 8010784:	2208      	movs	r2, #8
 8010786:	4629      	mov	r1, r5
 8010788:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801078c:	f7fd faac 	bl	800dce8 <memset>
 8010790:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010794:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010798:	4620      	mov	r0, r4
 801079a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801079c:	3468      	adds	r4, #104	; 0x68
 801079e:	e7d9      	b.n	8010754 <__sfp+0x1c>
 80107a0:	2104      	movs	r1, #4
 80107a2:	4638      	mov	r0, r7
 80107a4:	f7ff ff62 	bl	801066c <__sfmoreglue>
 80107a8:	4604      	mov	r4, r0
 80107aa:	6030      	str	r0, [r6, #0]
 80107ac:	2800      	cmp	r0, #0
 80107ae:	d1d5      	bne.n	801075c <__sfp+0x24>
 80107b0:	f7ff ff78 	bl	80106a4 <__sfp_lock_release>
 80107b4:	230c      	movs	r3, #12
 80107b6:	603b      	str	r3, [r7, #0]
 80107b8:	e7ee      	b.n	8010798 <__sfp+0x60>
 80107ba:	bf00      	nop
 80107bc:	080120a8 	.word	0x080120a8
 80107c0:	ffff0001 	.word	0xffff0001

080107c4 <_fwalk_reent>:
 80107c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107c8:	4606      	mov	r6, r0
 80107ca:	4688      	mov	r8, r1
 80107cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80107d0:	2700      	movs	r7, #0
 80107d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80107d6:	f1b9 0901 	subs.w	r9, r9, #1
 80107da:	d505      	bpl.n	80107e8 <_fwalk_reent+0x24>
 80107dc:	6824      	ldr	r4, [r4, #0]
 80107de:	2c00      	cmp	r4, #0
 80107e0:	d1f7      	bne.n	80107d2 <_fwalk_reent+0xe>
 80107e2:	4638      	mov	r0, r7
 80107e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107e8:	89ab      	ldrh	r3, [r5, #12]
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d907      	bls.n	80107fe <_fwalk_reent+0x3a>
 80107ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80107f2:	3301      	adds	r3, #1
 80107f4:	d003      	beq.n	80107fe <_fwalk_reent+0x3a>
 80107f6:	4629      	mov	r1, r5
 80107f8:	4630      	mov	r0, r6
 80107fa:	47c0      	blx	r8
 80107fc:	4307      	orrs	r7, r0
 80107fe:	3568      	adds	r5, #104	; 0x68
 8010800:	e7e9      	b.n	80107d6 <_fwalk_reent+0x12>

08010802 <__retarget_lock_init_recursive>:
 8010802:	4770      	bx	lr

08010804 <__retarget_lock_acquire_recursive>:
 8010804:	4770      	bx	lr

08010806 <__retarget_lock_release_recursive>:
 8010806:	4770      	bx	lr

08010808 <__swhatbuf_r>:
 8010808:	b570      	push	{r4, r5, r6, lr}
 801080a:	460e      	mov	r6, r1
 801080c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010810:	2900      	cmp	r1, #0
 8010812:	b096      	sub	sp, #88	; 0x58
 8010814:	4614      	mov	r4, r2
 8010816:	461d      	mov	r5, r3
 8010818:	da08      	bge.n	801082c <__swhatbuf_r+0x24>
 801081a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801081e:	2200      	movs	r2, #0
 8010820:	602a      	str	r2, [r5, #0]
 8010822:	061a      	lsls	r2, r3, #24
 8010824:	d410      	bmi.n	8010848 <__swhatbuf_r+0x40>
 8010826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801082a:	e00e      	b.n	801084a <__swhatbuf_r+0x42>
 801082c:	466a      	mov	r2, sp
 801082e:	f000 f903 	bl	8010a38 <_fstat_r>
 8010832:	2800      	cmp	r0, #0
 8010834:	dbf1      	blt.n	801081a <__swhatbuf_r+0x12>
 8010836:	9a01      	ldr	r2, [sp, #4]
 8010838:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801083c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010840:	425a      	negs	r2, r3
 8010842:	415a      	adcs	r2, r3
 8010844:	602a      	str	r2, [r5, #0]
 8010846:	e7ee      	b.n	8010826 <__swhatbuf_r+0x1e>
 8010848:	2340      	movs	r3, #64	; 0x40
 801084a:	2000      	movs	r0, #0
 801084c:	6023      	str	r3, [r4, #0]
 801084e:	b016      	add	sp, #88	; 0x58
 8010850:	bd70      	pop	{r4, r5, r6, pc}
	...

08010854 <__smakebuf_r>:
 8010854:	898b      	ldrh	r3, [r1, #12]
 8010856:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010858:	079d      	lsls	r5, r3, #30
 801085a:	4606      	mov	r6, r0
 801085c:	460c      	mov	r4, r1
 801085e:	d507      	bpl.n	8010870 <__smakebuf_r+0x1c>
 8010860:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010864:	6023      	str	r3, [r4, #0]
 8010866:	6123      	str	r3, [r4, #16]
 8010868:	2301      	movs	r3, #1
 801086a:	6163      	str	r3, [r4, #20]
 801086c:	b002      	add	sp, #8
 801086e:	bd70      	pop	{r4, r5, r6, pc}
 8010870:	ab01      	add	r3, sp, #4
 8010872:	466a      	mov	r2, sp
 8010874:	f7ff ffc8 	bl	8010808 <__swhatbuf_r>
 8010878:	9900      	ldr	r1, [sp, #0]
 801087a:	4605      	mov	r5, r0
 801087c:	4630      	mov	r0, r6
 801087e:	f7ff f963 	bl	800fb48 <_malloc_r>
 8010882:	b948      	cbnz	r0, 8010898 <__smakebuf_r+0x44>
 8010884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010888:	059a      	lsls	r2, r3, #22
 801088a:	d4ef      	bmi.n	801086c <__smakebuf_r+0x18>
 801088c:	f023 0303 	bic.w	r3, r3, #3
 8010890:	f043 0302 	orr.w	r3, r3, #2
 8010894:	81a3      	strh	r3, [r4, #12]
 8010896:	e7e3      	b.n	8010860 <__smakebuf_r+0xc>
 8010898:	4b0d      	ldr	r3, [pc, #52]	; (80108d0 <__smakebuf_r+0x7c>)
 801089a:	62b3      	str	r3, [r6, #40]	; 0x28
 801089c:	89a3      	ldrh	r3, [r4, #12]
 801089e:	6020      	str	r0, [r4, #0]
 80108a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80108a4:	81a3      	strh	r3, [r4, #12]
 80108a6:	9b00      	ldr	r3, [sp, #0]
 80108a8:	6163      	str	r3, [r4, #20]
 80108aa:	9b01      	ldr	r3, [sp, #4]
 80108ac:	6120      	str	r0, [r4, #16]
 80108ae:	b15b      	cbz	r3, 80108c8 <__smakebuf_r+0x74>
 80108b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80108b4:	4630      	mov	r0, r6
 80108b6:	f000 f8d1 	bl	8010a5c <_isatty_r>
 80108ba:	b128      	cbz	r0, 80108c8 <__smakebuf_r+0x74>
 80108bc:	89a3      	ldrh	r3, [r4, #12]
 80108be:	f023 0303 	bic.w	r3, r3, #3
 80108c2:	f043 0301 	orr.w	r3, r3, #1
 80108c6:	81a3      	strh	r3, [r4, #12]
 80108c8:	89a0      	ldrh	r0, [r4, #12]
 80108ca:	4305      	orrs	r5, r0
 80108cc:	81a5      	strh	r5, [r4, #12]
 80108ce:	e7cd      	b.n	801086c <__smakebuf_r+0x18>
 80108d0:	08010661 	.word	0x08010661

080108d4 <_malloc_usable_size_r>:
 80108d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108d8:	1f18      	subs	r0, r3, #4
 80108da:	2b00      	cmp	r3, #0
 80108dc:	bfbc      	itt	lt
 80108de:	580b      	ldrlt	r3, [r1, r0]
 80108e0:	18c0      	addlt	r0, r0, r3
 80108e2:	4770      	bx	lr

080108e4 <_raise_r>:
 80108e4:	291f      	cmp	r1, #31
 80108e6:	b538      	push	{r3, r4, r5, lr}
 80108e8:	4604      	mov	r4, r0
 80108ea:	460d      	mov	r5, r1
 80108ec:	d904      	bls.n	80108f8 <_raise_r+0x14>
 80108ee:	2316      	movs	r3, #22
 80108f0:	6003      	str	r3, [r0, #0]
 80108f2:	f04f 30ff 	mov.w	r0, #4294967295
 80108f6:	bd38      	pop	{r3, r4, r5, pc}
 80108f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80108fa:	b112      	cbz	r2, 8010902 <_raise_r+0x1e>
 80108fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010900:	b94b      	cbnz	r3, 8010916 <_raise_r+0x32>
 8010902:	4620      	mov	r0, r4
 8010904:	f000 f830 	bl	8010968 <_getpid_r>
 8010908:	462a      	mov	r2, r5
 801090a:	4601      	mov	r1, r0
 801090c:	4620      	mov	r0, r4
 801090e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010912:	f000 b817 	b.w	8010944 <_kill_r>
 8010916:	2b01      	cmp	r3, #1
 8010918:	d00a      	beq.n	8010930 <_raise_r+0x4c>
 801091a:	1c59      	adds	r1, r3, #1
 801091c:	d103      	bne.n	8010926 <_raise_r+0x42>
 801091e:	2316      	movs	r3, #22
 8010920:	6003      	str	r3, [r0, #0]
 8010922:	2001      	movs	r0, #1
 8010924:	e7e7      	b.n	80108f6 <_raise_r+0x12>
 8010926:	2400      	movs	r4, #0
 8010928:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801092c:	4628      	mov	r0, r5
 801092e:	4798      	blx	r3
 8010930:	2000      	movs	r0, #0
 8010932:	e7e0      	b.n	80108f6 <_raise_r+0x12>

08010934 <raise>:
 8010934:	4b02      	ldr	r3, [pc, #8]	; (8010940 <raise+0xc>)
 8010936:	4601      	mov	r1, r0
 8010938:	6818      	ldr	r0, [r3, #0]
 801093a:	f7ff bfd3 	b.w	80108e4 <_raise_r>
 801093e:	bf00      	nop
 8010940:	20000040 	.word	0x20000040

08010944 <_kill_r>:
 8010944:	b538      	push	{r3, r4, r5, lr}
 8010946:	4d07      	ldr	r5, [pc, #28]	; (8010964 <_kill_r+0x20>)
 8010948:	2300      	movs	r3, #0
 801094a:	4604      	mov	r4, r0
 801094c:	4608      	mov	r0, r1
 801094e:	4611      	mov	r1, r2
 8010950:	602b      	str	r3, [r5, #0]
 8010952:	f001 fb27 	bl	8011fa4 <_kill>
 8010956:	1c43      	adds	r3, r0, #1
 8010958:	d102      	bne.n	8010960 <_kill_r+0x1c>
 801095a:	682b      	ldr	r3, [r5, #0]
 801095c:	b103      	cbz	r3, 8010960 <_kill_r+0x1c>
 801095e:	6023      	str	r3, [r4, #0]
 8010960:	bd38      	pop	{r3, r4, r5, pc}
 8010962:	bf00      	nop
 8010964:	20000cbc 	.word	0x20000cbc

08010968 <_getpid_r>:
 8010968:	f001 bb0c 	b.w	8011f84 <_getpid>

0801096c <__sread>:
 801096c:	b510      	push	{r4, lr}
 801096e:	460c      	mov	r4, r1
 8010970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010974:	f000 f894 	bl	8010aa0 <_read_r>
 8010978:	2800      	cmp	r0, #0
 801097a:	bfab      	itete	ge
 801097c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801097e:	89a3      	ldrhlt	r3, [r4, #12]
 8010980:	181b      	addge	r3, r3, r0
 8010982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010986:	bfac      	ite	ge
 8010988:	6563      	strge	r3, [r4, #84]	; 0x54
 801098a:	81a3      	strhlt	r3, [r4, #12]
 801098c:	bd10      	pop	{r4, pc}

0801098e <__swrite>:
 801098e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010992:	461f      	mov	r7, r3
 8010994:	898b      	ldrh	r3, [r1, #12]
 8010996:	05db      	lsls	r3, r3, #23
 8010998:	4605      	mov	r5, r0
 801099a:	460c      	mov	r4, r1
 801099c:	4616      	mov	r6, r2
 801099e:	d505      	bpl.n	80109ac <__swrite+0x1e>
 80109a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109a4:	2302      	movs	r3, #2
 80109a6:	2200      	movs	r2, #0
 80109a8:	f000 f868 	bl	8010a7c <_lseek_r>
 80109ac:	89a3      	ldrh	r3, [r4, #12]
 80109ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80109b6:	81a3      	strh	r3, [r4, #12]
 80109b8:	4632      	mov	r2, r6
 80109ba:	463b      	mov	r3, r7
 80109bc:	4628      	mov	r0, r5
 80109be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109c2:	f000 b817 	b.w	80109f4 <_write_r>

080109c6 <__sseek>:
 80109c6:	b510      	push	{r4, lr}
 80109c8:	460c      	mov	r4, r1
 80109ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109ce:	f000 f855 	bl	8010a7c <_lseek_r>
 80109d2:	1c43      	adds	r3, r0, #1
 80109d4:	89a3      	ldrh	r3, [r4, #12]
 80109d6:	bf15      	itete	ne
 80109d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80109da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80109de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80109e2:	81a3      	strheq	r3, [r4, #12]
 80109e4:	bf18      	it	ne
 80109e6:	81a3      	strhne	r3, [r4, #12]
 80109e8:	bd10      	pop	{r4, pc}

080109ea <__sclose>:
 80109ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109ee:	f000 b813 	b.w	8010a18 <_close_r>
	...

080109f4 <_write_r>:
 80109f4:	b538      	push	{r3, r4, r5, lr}
 80109f6:	4d07      	ldr	r5, [pc, #28]	; (8010a14 <_write_r+0x20>)
 80109f8:	4604      	mov	r4, r0
 80109fa:	4608      	mov	r0, r1
 80109fc:	4611      	mov	r1, r2
 80109fe:	2200      	movs	r2, #0
 8010a00:	602a      	str	r2, [r5, #0]
 8010a02:	461a      	mov	r2, r3
 8010a04:	f001 faf4 	bl	8011ff0 <_write>
 8010a08:	1c43      	adds	r3, r0, #1
 8010a0a:	d102      	bne.n	8010a12 <_write_r+0x1e>
 8010a0c:	682b      	ldr	r3, [r5, #0]
 8010a0e:	b103      	cbz	r3, 8010a12 <_write_r+0x1e>
 8010a10:	6023      	str	r3, [r4, #0]
 8010a12:	bd38      	pop	{r3, r4, r5, pc}
 8010a14:	20000cbc 	.word	0x20000cbc

08010a18 <_close_r>:
 8010a18:	b538      	push	{r3, r4, r5, lr}
 8010a1a:	4d06      	ldr	r5, [pc, #24]	; (8010a34 <_close_r+0x1c>)
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	4604      	mov	r4, r0
 8010a20:	4608      	mov	r0, r1
 8010a22:	602b      	str	r3, [r5, #0]
 8010a24:	f001 fa9e 	bl	8011f64 <_close>
 8010a28:	1c43      	adds	r3, r0, #1
 8010a2a:	d102      	bne.n	8010a32 <_close_r+0x1a>
 8010a2c:	682b      	ldr	r3, [r5, #0]
 8010a2e:	b103      	cbz	r3, 8010a32 <_close_r+0x1a>
 8010a30:	6023      	str	r3, [r4, #0]
 8010a32:	bd38      	pop	{r3, r4, r5, pc}
 8010a34:	20000cbc 	.word	0x20000cbc

08010a38 <_fstat_r>:
 8010a38:	b538      	push	{r3, r4, r5, lr}
 8010a3a:	4d07      	ldr	r5, [pc, #28]	; (8010a58 <_fstat_r+0x20>)
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	4604      	mov	r4, r0
 8010a40:	4608      	mov	r0, r1
 8010a42:	4611      	mov	r1, r2
 8010a44:	602b      	str	r3, [r5, #0]
 8010a46:	f001 fa95 	bl	8011f74 <_fstat>
 8010a4a:	1c43      	adds	r3, r0, #1
 8010a4c:	d102      	bne.n	8010a54 <_fstat_r+0x1c>
 8010a4e:	682b      	ldr	r3, [r5, #0]
 8010a50:	b103      	cbz	r3, 8010a54 <_fstat_r+0x1c>
 8010a52:	6023      	str	r3, [r4, #0]
 8010a54:	bd38      	pop	{r3, r4, r5, pc}
 8010a56:	bf00      	nop
 8010a58:	20000cbc 	.word	0x20000cbc

08010a5c <_isatty_r>:
 8010a5c:	b538      	push	{r3, r4, r5, lr}
 8010a5e:	4d06      	ldr	r5, [pc, #24]	; (8010a78 <_isatty_r+0x1c>)
 8010a60:	2300      	movs	r3, #0
 8010a62:	4604      	mov	r4, r0
 8010a64:	4608      	mov	r0, r1
 8010a66:	602b      	str	r3, [r5, #0]
 8010a68:	f001 fa94 	bl	8011f94 <_isatty>
 8010a6c:	1c43      	adds	r3, r0, #1
 8010a6e:	d102      	bne.n	8010a76 <_isatty_r+0x1a>
 8010a70:	682b      	ldr	r3, [r5, #0]
 8010a72:	b103      	cbz	r3, 8010a76 <_isatty_r+0x1a>
 8010a74:	6023      	str	r3, [r4, #0]
 8010a76:	bd38      	pop	{r3, r4, r5, pc}
 8010a78:	20000cbc 	.word	0x20000cbc

08010a7c <_lseek_r>:
 8010a7c:	b538      	push	{r3, r4, r5, lr}
 8010a7e:	4d07      	ldr	r5, [pc, #28]	; (8010a9c <_lseek_r+0x20>)
 8010a80:	4604      	mov	r4, r0
 8010a82:	4608      	mov	r0, r1
 8010a84:	4611      	mov	r1, r2
 8010a86:	2200      	movs	r2, #0
 8010a88:	602a      	str	r2, [r5, #0]
 8010a8a:	461a      	mov	r2, r3
 8010a8c:	f001 fa92 	bl	8011fb4 <_lseek>
 8010a90:	1c43      	adds	r3, r0, #1
 8010a92:	d102      	bne.n	8010a9a <_lseek_r+0x1e>
 8010a94:	682b      	ldr	r3, [r5, #0]
 8010a96:	b103      	cbz	r3, 8010a9a <_lseek_r+0x1e>
 8010a98:	6023      	str	r3, [r4, #0]
 8010a9a:	bd38      	pop	{r3, r4, r5, pc}
 8010a9c:	20000cbc 	.word	0x20000cbc

08010aa0 <_read_r>:
 8010aa0:	b538      	push	{r3, r4, r5, lr}
 8010aa2:	4d07      	ldr	r5, [pc, #28]	; (8010ac0 <_read_r+0x20>)
 8010aa4:	4604      	mov	r4, r0
 8010aa6:	4608      	mov	r0, r1
 8010aa8:	4611      	mov	r1, r2
 8010aaa:	2200      	movs	r2, #0
 8010aac:	602a      	str	r2, [r5, #0]
 8010aae:	461a      	mov	r2, r3
 8010ab0:	f001 fa88 	bl	8011fc4 <_read>
 8010ab4:	1c43      	adds	r3, r0, #1
 8010ab6:	d102      	bne.n	8010abe <_read_r+0x1e>
 8010ab8:	682b      	ldr	r3, [r5, #0]
 8010aba:	b103      	cbz	r3, 8010abe <_read_r+0x1e>
 8010abc:	6023      	str	r3, [r4, #0]
 8010abe:	bd38      	pop	{r3, r4, r5, pc}
 8010ac0:	20000cbc 	.word	0x20000cbc
 8010ac4:	00000000 	.word	0x00000000

08010ac8 <atan>:
 8010ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010acc:	ec55 4b10 	vmov	r4, r5, d0
 8010ad0:	4bc3      	ldr	r3, [pc, #780]	; (8010de0 <atan+0x318>)
 8010ad2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010ad6:	429e      	cmp	r6, r3
 8010ad8:	46ab      	mov	fp, r5
 8010ada:	dd18      	ble.n	8010b0e <atan+0x46>
 8010adc:	4bc1      	ldr	r3, [pc, #772]	; (8010de4 <atan+0x31c>)
 8010ade:	429e      	cmp	r6, r3
 8010ae0:	dc01      	bgt.n	8010ae6 <atan+0x1e>
 8010ae2:	d109      	bne.n	8010af8 <atan+0x30>
 8010ae4:	b144      	cbz	r4, 8010af8 <atan+0x30>
 8010ae6:	4622      	mov	r2, r4
 8010ae8:	462b      	mov	r3, r5
 8010aea:	4620      	mov	r0, r4
 8010aec:	4629      	mov	r1, r5
 8010aee:	f7ef fbed 	bl	80002cc <__adddf3>
 8010af2:	4604      	mov	r4, r0
 8010af4:	460d      	mov	r5, r1
 8010af6:	e006      	b.n	8010b06 <atan+0x3e>
 8010af8:	f1bb 0f00 	cmp.w	fp, #0
 8010afc:	f300 8131 	bgt.w	8010d62 <atan+0x29a>
 8010b00:	a59b      	add	r5, pc, #620	; (adr r5, 8010d70 <atan+0x2a8>)
 8010b02:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010b06:	ec45 4b10 	vmov	d0, r4, r5
 8010b0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b0e:	4bb6      	ldr	r3, [pc, #728]	; (8010de8 <atan+0x320>)
 8010b10:	429e      	cmp	r6, r3
 8010b12:	dc14      	bgt.n	8010b3e <atan+0x76>
 8010b14:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010b18:	429e      	cmp	r6, r3
 8010b1a:	dc0d      	bgt.n	8010b38 <atan+0x70>
 8010b1c:	a396      	add	r3, pc, #600	; (adr r3, 8010d78 <atan+0x2b0>)
 8010b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b22:	ee10 0a10 	vmov	r0, s0
 8010b26:	4629      	mov	r1, r5
 8010b28:	f7ef fbd0 	bl	80002cc <__adddf3>
 8010b2c:	4baf      	ldr	r3, [pc, #700]	; (8010dec <atan+0x324>)
 8010b2e:	2200      	movs	r2, #0
 8010b30:	f7f0 f812 	bl	8000b58 <__aeabi_dcmpgt>
 8010b34:	2800      	cmp	r0, #0
 8010b36:	d1e6      	bne.n	8010b06 <atan+0x3e>
 8010b38:	f04f 3aff 	mov.w	sl, #4294967295
 8010b3c:	e02b      	b.n	8010b96 <atan+0xce>
 8010b3e:	f000 f963 	bl	8010e08 <fabs>
 8010b42:	4bab      	ldr	r3, [pc, #684]	; (8010df0 <atan+0x328>)
 8010b44:	429e      	cmp	r6, r3
 8010b46:	ec55 4b10 	vmov	r4, r5, d0
 8010b4a:	f300 80bf 	bgt.w	8010ccc <atan+0x204>
 8010b4e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010b52:	429e      	cmp	r6, r3
 8010b54:	f300 80a0 	bgt.w	8010c98 <atan+0x1d0>
 8010b58:	ee10 2a10 	vmov	r2, s0
 8010b5c:	ee10 0a10 	vmov	r0, s0
 8010b60:	462b      	mov	r3, r5
 8010b62:	4629      	mov	r1, r5
 8010b64:	f7ef fbb2 	bl	80002cc <__adddf3>
 8010b68:	4ba0      	ldr	r3, [pc, #640]	; (8010dec <atan+0x324>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	f7ef fbac 	bl	80002c8 <__aeabi_dsub>
 8010b70:	2200      	movs	r2, #0
 8010b72:	4606      	mov	r6, r0
 8010b74:	460f      	mov	r7, r1
 8010b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	4629      	mov	r1, r5
 8010b7e:	f7ef fba5 	bl	80002cc <__adddf3>
 8010b82:	4602      	mov	r2, r0
 8010b84:	460b      	mov	r3, r1
 8010b86:	4630      	mov	r0, r6
 8010b88:	4639      	mov	r1, r7
 8010b8a:	f7ef fe7f 	bl	800088c <__aeabi_ddiv>
 8010b8e:	f04f 0a00 	mov.w	sl, #0
 8010b92:	4604      	mov	r4, r0
 8010b94:	460d      	mov	r5, r1
 8010b96:	4622      	mov	r2, r4
 8010b98:	462b      	mov	r3, r5
 8010b9a:	4620      	mov	r0, r4
 8010b9c:	4629      	mov	r1, r5
 8010b9e:	f7ef fd4b 	bl	8000638 <__aeabi_dmul>
 8010ba2:	4602      	mov	r2, r0
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	4680      	mov	r8, r0
 8010ba8:	4689      	mov	r9, r1
 8010baa:	f7ef fd45 	bl	8000638 <__aeabi_dmul>
 8010bae:	a374      	add	r3, pc, #464	; (adr r3, 8010d80 <atan+0x2b8>)
 8010bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bb4:	4606      	mov	r6, r0
 8010bb6:	460f      	mov	r7, r1
 8010bb8:	f7ef fd3e 	bl	8000638 <__aeabi_dmul>
 8010bbc:	a372      	add	r3, pc, #456	; (adr r3, 8010d88 <atan+0x2c0>)
 8010bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc2:	f7ef fb83 	bl	80002cc <__adddf3>
 8010bc6:	4632      	mov	r2, r6
 8010bc8:	463b      	mov	r3, r7
 8010bca:	f7ef fd35 	bl	8000638 <__aeabi_dmul>
 8010bce:	a370      	add	r3, pc, #448	; (adr r3, 8010d90 <atan+0x2c8>)
 8010bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bd4:	f7ef fb7a 	bl	80002cc <__adddf3>
 8010bd8:	4632      	mov	r2, r6
 8010bda:	463b      	mov	r3, r7
 8010bdc:	f7ef fd2c 	bl	8000638 <__aeabi_dmul>
 8010be0:	a36d      	add	r3, pc, #436	; (adr r3, 8010d98 <atan+0x2d0>)
 8010be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be6:	f7ef fb71 	bl	80002cc <__adddf3>
 8010bea:	4632      	mov	r2, r6
 8010bec:	463b      	mov	r3, r7
 8010bee:	f7ef fd23 	bl	8000638 <__aeabi_dmul>
 8010bf2:	a36b      	add	r3, pc, #428	; (adr r3, 8010da0 <atan+0x2d8>)
 8010bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf8:	f7ef fb68 	bl	80002cc <__adddf3>
 8010bfc:	4632      	mov	r2, r6
 8010bfe:	463b      	mov	r3, r7
 8010c00:	f7ef fd1a 	bl	8000638 <__aeabi_dmul>
 8010c04:	a368      	add	r3, pc, #416	; (adr r3, 8010da8 <atan+0x2e0>)
 8010c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0a:	f7ef fb5f 	bl	80002cc <__adddf3>
 8010c0e:	4642      	mov	r2, r8
 8010c10:	464b      	mov	r3, r9
 8010c12:	f7ef fd11 	bl	8000638 <__aeabi_dmul>
 8010c16:	a366      	add	r3, pc, #408	; (adr r3, 8010db0 <atan+0x2e8>)
 8010c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c1c:	4680      	mov	r8, r0
 8010c1e:	4689      	mov	r9, r1
 8010c20:	4630      	mov	r0, r6
 8010c22:	4639      	mov	r1, r7
 8010c24:	f7ef fd08 	bl	8000638 <__aeabi_dmul>
 8010c28:	a363      	add	r3, pc, #396	; (adr r3, 8010db8 <atan+0x2f0>)
 8010c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2e:	f7ef fb4b 	bl	80002c8 <__aeabi_dsub>
 8010c32:	4632      	mov	r2, r6
 8010c34:	463b      	mov	r3, r7
 8010c36:	f7ef fcff 	bl	8000638 <__aeabi_dmul>
 8010c3a:	a361      	add	r3, pc, #388	; (adr r3, 8010dc0 <atan+0x2f8>)
 8010c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c40:	f7ef fb42 	bl	80002c8 <__aeabi_dsub>
 8010c44:	4632      	mov	r2, r6
 8010c46:	463b      	mov	r3, r7
 8010c48:	f7ef fcf6 	bl	8000638 <__aeabi_dmul>
 8010c4c:	a35e      	add	r3, pc, #376	; (adr r3, 8010dc8 <atan+0x300>)
 8010c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c52:	f7ef fb39 	bl	80002c8 <__aeabi_dsub>
 8010c56:	4632      	mov	r2, r6
 8010c58:	463b      	mov	r3, r7
 8010c5a:	f7ef fced 	bl	8000638 <__aeabi_dmul>
 8010c5e:	a35c      	add	r3, pc, #368	; (adr r3, 8010dd0 <atan+0x308>)
 8010c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c64:	f7ef fb30 	bl	80002c8 <__aeabi_dsub>
 8010c68:	4632      	mov	r2, r6
 8010c6a:	463b      	mov	r3, r7
 8010c6c:	f7ef fce4 	bl	8000638 <__aeabi_dmul>
 8010c70:	4602      	mov	r2, r0
 8010c72:	460b      	mov	r3, r1
 8010c74:	4640      	mov	r0, r8
 8010c76:	4649      	mov	r1, r9
 8010c78:	f7ef fb28 	bl	80002cc <__adddf3>
 8010c7c:	4622      	mov	r2, r4
 8010c7e:	462b      	mov	r3, r5
 8010c80:	f7ef fcda 	bl	8000638 <__aeabi_dmul>
 8010c84:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010c88:	4602      	mov	r2, r0
 8010c8a:	460b      	mov	r3, r1
 8010c8c:	d14b      	bne.n	8010d26 <atan+0x25e>
 8010c8e:	4620      	mov	r0, r4
 8010c90:	4629      	mov	r1, r5
 8010c92:	f7ef fb19 	bl	80002c8 <__aeabi_dsub>
 8010c96:	e72c      	b.n	8010af2 <atan+0x2a>
 8010c98:	ee10 0a10 	vmov	r0, s0
 8010c9c:	4b53      	ldr	r3, [pc, #332]	; (8010dec <atan+0x324>)
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	4629      	mov	r1, r5
 8010ca2:	f7ef fb11 	bl	80002c8 <__aeabi_dsub>
 8010ca6:	4b51      	ldr	r3, [pc, #324]	; (8010dec <atan+0x324>)
 8010ca8:	4606      	mov	r6, r0
 8010caa:	460f      	mov	r7, r1
 8010cac:	2200      	movs	r2, #0
 8010cae:	4620      	mov	r0, r4
 8010cb0:	4629      	mov	r1, r5
 8010cb2:	f7ef fb0b 	bl	80002cc <__adddf3>
 8010cb6:	4602      	mov	r2, r0
 8010cb8:	460b      	mov	r3, r1
 8010cba:	4630      	mov	r0, r6
 8010cbc:	4639      	mov	r1, r7
 8010cbe:	f7ef fde5 	bl	800088c <__aeabi_ddiv>
 8010cc2:	f04f 0a01 	mov.w	sl, #1
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	460d      	mov	r5, r1
 8010cca:	e764      	b.n	8010b96 <atan+0xce>
 8010ccc:	4b49      	ldr	r3, [pc, #292]	; (8010df4 <atan+0x32c>)
 8010cce:	429e      	cmp	r6, r3
 8010cd0:	da1d      	bge.n	8010d0e <atan+0x246>
 8010cd2:	ee10 0a10 	vmov	r0, s0
 8010cd6:	4b48      	ldr	r3, [pc, #288]	; (8010df8 <atan+0x330>)
 8010cd8:	2200      	movs	r2, #0
 8010cda:	4629      	mov	r1, r5
 8010cdc:	f7ef faf4 	bl	80002c8 <__aeabi_dsub>
 8010ce0:	4b45      	ldr	r3, [pc, #276]	; (8010df8 <atan+0x330>)
 8010ce2:	4606      	mov	r6, r0
 8010ce4:	460f      	mov	r7, r1
 8010ce6:	2200      	movs	r2, #0
 8010ce8:	4620      	mov	r0, r4
 8010cea:	4629      	mov	r1, r5
 8010cec:	f7ef fca4 	bl	8000638 <__aeabi_dmul>
 8010cf0:	4b3e      	ldr	r3, [pc, #248]	; (8010dec <atan+0x324>)
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f7ef faea 	bl	80002cc <__adddf3>
 8010cf8:	4602      	mov	r2, r0
 8010cfa:	460b      	mov	r3, r1
 8010cfc:	4630      	mov	r0, r6
 8010cfe:	4639      	mov	r1, r7
 8010d00:	f7ef fdc4 	bl	800088c <__aeabi_ddiv>
 8010d04:	f04f 0a02 	mov.w	sl, #2
 8010d08:	4604      	mov	r4, r0
 8010d0a:	460d      	mov	r5, r1
 8010d0c:	e743      	b.n	8010b96 <atan+0xce>
 8010d0e:	462b      	mov	r3, r5
 8010d10:	ee10 2a10 	vmov	r2, s0
 8010d14:	4939      	ldr	r1, [pc, #228]	; (8010dfc <atan+0x334>)
 8010d16:	2000      	movs	r0, #0
 8010d18:	f7ef fdb8 	bl	800088c <__aeabi_ddiv>
 8010d1c:	f04f 0a03 	mov.w	sl, #3
 8010d20:	4604      	mov	r4, r0
 8010d22:	460d      	mov	r5, r1
 8010d24:	e737      	b.n	8010b96 <atan+0xce>
 8010d26:	4b36      	ldr	r3, [pc, #216]	; (8010e00 <atan+0x338>)
 8010d28:	4e36      	ldr	r6, [pc, #216]	; (8010e04 <atan+0x33c>)
 8010d2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010d2e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8010d32:	e9da 2300 	ldrd	r2, r3, [sl]
 8010d36:	f7ef fac7 	bl	80002c8 <__aeabi_dsub>
 8010d3a:	4622      	mov	r2, r4
 8010d3c:	462b      	mov	r3, r5
 8010d3e:	f7ef fac3 	bl	80002c8 <__aeabi_dsub>
 8010d42:	4602      	mov	r2, r0
 8010d44:	460b      	mov	r3, r1
 8010d46:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010d4a:	f7ef fabd 	bl	80002c8 <__aeabi_dsub>
 8010d4e:	f1bb 0f00 	cmp.w	fp, #0
 8010d52:	4604      	mov	r4, r0
 8010d54:	460d      	mov	r5, r1
 8010d56:	f6bf aed6 	bge.w	8010b06 <atan+0x3e>
 8010d5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d5e:	461d      	mov	r5, r3
 8010d60:	e6d1      	b.n	8010b06 <atan+0x3e>
 8010d62:	a51d      	add	r5, pc, #116	; (adr r5, 8010dd8 <atan+0x310>)
 8010d64:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010d68:	e6cd      	b.n	8010b06 <atan+0x3e>
 8010d6a:	bf00      	nop
 8010d6c:	f3af 8000 	nop.w
 8010d70:	54442d18 	.word	0x54442d18
 8010d74:	bff921fb 	.word	0xbff921fb
 8010d78:	8800759c 	.word	0x8800759c
 8010d7c:	7e37e43c 	.word	0x7e37e43c
 8010d80:	e322da11 	.word	0xe322da11
 8010d84:	3f90ad3a 	.word	0x3f90ad3a
 8010d88:	24760deb 	.word	0x24760deb
 8010d8c:	3fa97b4b 	.word	0x3fa97b4b
 8010d90:	a0d03d51 	.word	0xa0d03d51
 8010d94:	3fb10d66 	.word	0x3fb10d66
 8010d98:	c54c206e 	.word	0xc54c206e
 8010d9c:	3fb745cd 	.word	0x3fb745cd
 8010da0:	920083ff 	.word	0x920083ff
 8010da4:	3fc24924 	.word	0x3fc24924
 8010da8:	5555550d 	.word	0x5555550d
 8010dac:	3fd55555 	.word	0x3fd55555
 8010db0:	2c6a6c2f 	.word	0x2c6a6c2f
 8010db4:	bfa2b444 	.word	0xbfa2b444
 8010db8:	52defd9a 	.word	0x52defd9a
 8010dbc:	3fadde2d 	.word	0x3fadde2d
 8010dc0:	af749a6d 	.word	0xaf749a6d
 8010dc4:	3fb3b0f2 	.word	0x3fb3b0f2
 8010dc8:	fe231671 	.word	0xfe231671
 8010dcc:	3fbc71c6 	.word	0x3fbc71c6
 8010dd0:	9998ebc4 	.word	0x9998ebc4
 8010dd4:	3fc99999 	.word	0x3fc99999
 8010dd8:	54442d18 	.word	0x54442d18
 8010ddc:	3ff921fb 	.word	0x3ff921fb
 8010de0:	440fffff 	.word	0x440fffff
 8010de4:	7ff00000 	.word	0x7ff00000
 8010de8:	3fdbffff 	.word	0x3fdbffff
 8010dec:	3ff00000 	.word	0x3ff00000
 8010df0:	3ff2ffff 	.word	0x3ff2ffff
 8010df4:	40038000 	.word	0x40038000
 8010df8:	3ff80000 	.word	0x3ff80000
 8010dfc:	bff00000 	.word	0xbff00000
 8010e00:	080124a8 	.word	0x080124a8
 8010e04:	08012488 	.word	0x08012488

08010e08 <fabs>:
 8010e08:	ec51 0b10 	vmov	r0, r1, d0
 8010e0c:	ee10 2a10 	vmov	r2, s0
 8010e10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010e14:	ec43 2b10 	vmov	d0, r2, r3
 8010e18:	4770      	bx	lr
 8010e1a:	0000      	movs	r0, r0
 8010e1c:	0000      	movs	r0, r0
	...

08010e20 <tan>:
 8010e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e22:	ec53 2b10 	vmov	r2, r3, d0
 8010e26:	4816      	ldr	r0, [pc, #88]	; (8010e80 <tan+0x60>)
 8010e28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010e2c:	4281      	cmp	r1, r0
 8010e2e:	dc07      	bgt.n	8010e40 <tan+0x20>
 8010e30:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8010e78 <tan+0x58>
 8010e34:	2001      	movs	r0, #1
 8010e36:	b005      	add	sp, #20
 8010e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8010e3c:	f000 bd80 	b.w	8011940 <__kernel_tan>
 8010e40:	4810      	ldr	r0, [pc, #64]	; (8010e84 <tan+0x64>)
 8010e42:	4281      	cmp	r1, r0
 8010e44:	dd09      	ble.n	8010e5a <tan+0x3a>
 8010e46:	ee10 0a10 	vmov	r0, s0
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	f7ef fa3c 	bl	80002c8 <__aeabi_dsub>
 8010e50:	ec41 0b10 	vmov	d0, r0, r1
 8010e54:	b005      	add	sp, #20
 8010e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e5a:	4668      	mov	r0, sp
 8010e5c:	f000 f814 	bl	8010e88 <__ieee754_rem_pio2>
 8010e60:	0040      	lsls	r0, r0, #1
 8010e62:	f000 0002 	and.w	r0, r0, #2
 8010e66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e6a:	ed9d 0b00 	vldr	d0, [sp]
 8010e6e:	f1c0 0001 	rsb	r0, r0, #1
 8010e72:	f000 fd65 	bl	8011940 <__kernel_tan>
 8010e76:	e7ed      	b.n	8010e54 <tan+0x34>
	...
 8010e80:	3fe921fb 	.word	0x3fe921fb
 8010e84:	7fefffff 	.word	0x7fefffff

08010e88 <__ieee754_rem_pio2>:
 8010e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	ed2d 8b02 	vpush	{d8}
 8010e90:	ec55 4b10 	vmov	r4, r5, d0
 8010e94:	4bca      	ldr	r3, [pc, #808]	; (80111c0 <__ieee754_rem_pio2+0x338>)
 8010e96:	b08b      	sub	sp, #44	; 0x2c
 8010e98:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8010e9c:	4598      	cmp	r8, r3
 8010e9e:	4682      	mov	sl, r0
 8010ea0:	9502      	str	r5, [sp, #8]
 8010ea2:	dc08      	bgt.n	8010eb6 <__ieee754_rem_pio2+0x2e>
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	ed80 0b00 	vstr	d0, [r0]
 8010eac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010eb0:	f04f 0b00 	mov.w	fp, #0
 8010eb4:	e028      	b.n	8010f08 <__ieee754_rem_pio2+0x80>
 8010eb6:	4bc3      	ldr	r3, [pc, #780]	; (80111c4 <__ieee754_rem_pio2+0x33c>)
 8010eb8:	4598      	cmp	r8, r3
 8010eba:	dc78      	bgt.n	8010fae <__ieee754_rem_pio2+0x126>
 8010ebc:	9b02      	ldr	r3, [sp, #8]
 8010ebe:	4ec2      	ldr	r6, [pc, #776]	; (80111c8 <__ieee754_rem_pio2+0x340>)
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	ee10 0a10 	vmov	r0, s0
 8010ec6:	a3b0      	add	r3, pc, #704	; (adr r3, 8011188 <__ieee754_rem_pio2+0x300>)
 8010ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ecc:	4629      	mov	r1, r5
 8010ece:	dd39      	ble.n	8010f44 <__ieee754_rem_pio2+0xbc>
 8010ed0:	f7ef f9fa 	bl	80002c8 <__aeabi_dsub>
 8010ed4:	45b0      	cmp	r8, r6
 8010ed6:	4604      	mov	r4, r0
 8010ed8:	460d      	mov	r5, r1
 8010eda:	d01b      	beq.n	8010f14 <__ieee754_rem_pio2+0x8c>
 8010edc:	a3ac      	add	r3, pc, #688	; (adr r3, 8011190 <__ieee754_rem_pio2+0x308>)
 8010ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee2:	f7ef f9f1 	bl	80002c8 <__aeabi_dsub>
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	460b      	mov	r3, r1
 8010eea:	e9ca 2300 	strd	r2, r3, [sl]
 8010eee:	4620      	mov	r0, r4
 8010ef0:	4629      	mov	r1, r5
 8010ef2:	f7ef f9e9 	bl	80002c8 <__aeabi_dsub>
 8010ef6:	a3a6      	add	r3, pc, #664	; (adr r3, 8011190 <__ieee754_rem_pio2+0x308>)
 8010ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efc:	f7ef f9e4 	bl	80002c8 <__aeabi_dsub>
 8010f00:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010f04:	f04f 0b01 	mov.w	fp, #1
 8010f08:	4658      	mov	r0, fp
 8010f0a:	b00b      	add	sp, #44	; 0x2c
 8010f0c:	ecbd 8b02 	vpop	{d8}
 8010f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f14:	a3a0      	add	r3, pc, #640	; (adr r3, 8011198 <__ieee754_rem_pio2+0x310>)
 8010f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f1a:	f7ef f9d5 	bl	80002c8 <__aeabi_dsub>
 8010f1e:	a3a0      	add	r3, pc, #640	; (adr r3, 80111a0 <__ieee754_rem_pio2+0x318>)
 8010f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f24:	4604      	mov	r4, r0
 8010f26:	460d      	mov	r5, r1
 8010f28:	f7ef f9ce 	bl	80002c8 <__aeabi_dsub>
 8010f2c:	4602      	mov	r2, r0
 8010f2e:	460b      	mov	r3, r1
 8010f30:	e9ca 2300 	strd	r2, r3, [sl]
 8010f34:	4620      	mov	r0, r4
 8010f36:	4629      	mov	r1, r5
 8010f38:	f7ef f9c6 	bl	80002c8 <__aeabi_dsub>
 8010f3c:	a398      	add	r3, pc, #608	; (adr r3, 80111a0 <__ieee754_rem_pio2+0x318>)
 8010f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f42:	e7db      	b.n	8010efc <__ieee754_rem_pio2+0x74>
 8010f44:	f7ef f9c2 	bl	80002cc <__adddf3>
 8010f48:	45b0      	cmp	r8, r6
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	460d      	mov	r5, r1
 8010f4e:	d016      	beq.n	8010f7e <__ieee754_rem_pio2+0xf6>
 8010f50:	a38f      	add	r3, pc, #572	; (adr r3, 8011190 <__ieee754_rem_pio2+0x308>)
 8010f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f56:	f7ef f9b9 	bl	80002cc <__adddf3>
 8010f5a:	4602      	mov	r2, r0
 8010f5c:	460b      	mov	r3, r1
 8010f5e:	e9ca 2300 	strd	r2, r3, [sl]
 8010f62:	4620      	mov	r0, r4
 8010f64:	4629      	mov	r1, r5
 8010f66:	f7ef f9af 	bl	80002c8 <__aeabi_dsub>
 8010f6a:	a389      	add	r3, pc, #548	; (adr r3, 8011190 <__ieee754_rem_pio2+0x308>)
 8010f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f70:	f7ef f9ac 	bl	80002cc <__adddf3>
 8010f74:	f04f 3bff 	mov.w	fp, #4294967295
 8010f78:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010f7c:	e7c4      	b.n	8010f08 <__ieee754_rem_pio2+0x80>
 8010f7e:	a386      	add	r3, pc, #536	; (adr r3, 8011198 <__ieee754_rem_pio2+0x310>)
 8010f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f84:	f7ef f9a2 	bl	80002cc <__adddf3>
 8010f88:	a385      	add	r3, pc, #532	; (adr r3, 80111a0 <__ieee754_rem_pio2+0x318>)
 8010f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8e:	4604      	mov	r4, r0
 8010f90:	460d      	mov	r5, r1
 8010f92:	f7ef f99b 	bl	80002cc <__adddf3>
 8010f96:	4602      	mov	r2, r0
 8010f98:	460b      	mov	r3, r1
 8010f9a:	e9ca 2300 	strd	r2, r3, [sl]
 8010f9e:	4620      	mov	r0, r4
 8010fa0:	4629      	mov	r1, r5
 8010fa2:	f7ef f991 	bl	80002c8 <__aeabi_dsub>
 8010fa6:	a37e      	add	r3, pc, #504	; (adr r3, 80111a0 <__ieee754_rem_pio2+0x318>)
 8010fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fac:	e7e0      	b.n	8010f70 <__ieee754_rem_pio2+0xe8>
 8010fae:	4b87      	ldr	r3, [pc, #540]	; (80111cc <__ieee754_rem_pio2+0x344>)
 8010fb0:	4598      	cmp	r8, r3
 8010fb2:	f300 80d9 	bgt.w	8011168 <__ieee754_rem_pio2+0x2e0>
 8010fb6:	f7ff ff27 	bl	8010e08 <fabs>
 8010fba:	ec55 4b10 	vmov	r4, r5, d0
 8010fbe:	ee10 0a10 	vmov	r0, s0
 8010fc2:	a379      	add	r3, pc, #484	; (adr r3, 80111a8 <__ieee754_rem_pio2+0x320>)
 8010fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc8:	4629      	mov	r1, r5
 8010fca:	f7ef fb35 	bl	8000638 <__aeabi_dmul>
 8010fce:	4b80      	ldr	r3, [pc, #512]	; (80111d0 <__ieee754_rem_pio2+0x348>)
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f7ef f97b 	bl	80002cc <__adddf3>
 8010fd6:	f7ef fddf 	bl	8000b98 <__aeabi_d2iz>
 8010fda:	4683      	mov	fp, r0
 8010fdc:	f7ef fac2 	bl	8000564 <__aeabi_i2d>
 8010fe0:	4602      	mov	r2, r0
 8010fe2:	460b      	mov	r3, r1
 8010fe4:	ec43 2b18 	vmov	d8, r2, r3
 8010fe8:	a367      	add	r3, pc, #412	; (adr r3, 8011188 <__ieee754_rem_pio2+0x300>)
 8010fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fee:	f7ef fb23 	bl	8000638 <__aeabi_dmul>
 8010ff2:	4602      	mov	r2, r0
 8010ff4:	460b      	mov	r3, r1
 8010ff6:	4620      	mov	r0, r4
 8010ff8:	4629      	mov	r1, r5
 8010ffa:	f7ef f965 	bl	80002c8 <__aeabi_dsub>
 8010ffe:	a364      	add	r3, pc, #400	; (adr r3, 8011190 <__ieee754_rem_pio2+0x308>)
 8011000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011004:	4606      	mov	r6, r0
 8011006:	460f      	mov	r7, r1
 8011008:	ec51 0b18 	vmov	r0, r1, d8
 801100c:	f7ef fb14 	bl	8000638 <__aeabi_dmul>
 8011010:	f1bb 0f1f 	cmp.w	fp, #31
 8011014:	4604      	mov	r4, r0
 8011016:	460d      	mov	r5, r1
 8011018:	dc0d      	bgt.n	8011036 <__ieee754_rem_pio2+0x1ae>
 801101a:	4b6e      	ldr	r3, [pc, #440]	; (80111d4 <__ieee754_rem_pio2+0x34c>)
 801101c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011024:	4543      	cmp	r3, r8
 8011026:	d006      	beq.n	8011036 <__ieee754_rem_pio2+0x1ae>
 8011028:	4622      	mov	r2, r4
 801102a:	462b      	mov	r3, r5
 801102c:	4630      	mov	r0, r6
 801102e:	4639      	mov	r1, r7
 8011030:	f7ef f94a 	bl	80002c8 <__aeabi_dsub>
 8011034:	e00f      	b.n	8011056 <__ieee754_rem_pio2+0x1ce>
 8011036:	462b      	mov	r3, r5
 8011038:	4622      	mov	r2, r4
 801103a:	4630      	mov	r0, r6
 801103c:	4639      	mov	r1, r7
 801103e:	f7ef f943 	bl	80002c8 <__aeabi_dsub>
 8011042:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011046:	9303      	str	r3, [sp, #12]
 8011048:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801104c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011050:	f1b8 0f10 	cmp.w	r8, #16
 8011054:	dc02      	bgt.n	801105c <__ieee754_rem_pio2+0x1d4>
 8011056:	e9ca 0100 	strd	r0, r1, [sl]
 801105a:	e039      	b.n	80110d0 <__ieee754_rem_pio2+0x248>
 801105c:	a34e      	add	r3, pc, #312	; (adr r3, 8011198 <__ieee754_rem_pio2+0x310>)
 801105e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011062:	ec51 0b18 	vmov	r0, r1, d8
 8011066:	f7ef fae7 	bl	8000638 <__aeabi_dmul>
 801106a:	4604      	mov	r4, r0
 801106c:	460d      	mov	r5, r1
 801106e:	4602      	mov	r2, r0
 8011070:	460b      	mov	r3, r1
 8011072:	4630      	mov	r0, r6
 8011074:	4639      	mov	r1, r7
 8011076:	f7ef f927 	bl	80002c8 <__aeabi_dsub>
 801107a:	4602      	mov	r2, r0
 801107c:	460b      	mov	r3, r1
 801107e:	4680      	mov	r8, r0
 8011080:	4689      	mov	r9, r1
 8011082:	4630      	mov	r0, r6
 8011084:	4639      	mov	r1, r7
 8011086:	f7ef f91f 	bl	80002c8 <__aeabi_dsub>
 801108a:	4622      	mov	r2, r4
 801108c:	462b      	mov	r3, r5
 801108e:	f7ef f91b 	bl	80002c8 <__aeabi_dsub>
 8011092:	a343      	add	r3, pc, #268	; (adr r3, 80111a0 <__ieee754_rem_pio2+0x318>)
 8011094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011098:	4604      	mov	r4, r0
 801109a:	460d      	mov	r5, r1
 801109c:	ec51 0b18 	vmov	r0, r1, d8
 80110a0:	f7ef faca 	bl	8000638 <__aeabi_dmul>
 80110a4:	4622      	mov	r2, r4
 80110a6:	462b      	mov	r3, r5
 80110a8:	f7ef f90e 	bl	80002c8 <__aeabi_dsub>
 80110ac:	4602      	mov	r2, r0
 80110ae:	460b      	mov	r3, r1
 80110b0:	4604      	mov	r4, r0
 80110b2:	460d      	mov	r5, r1
 80110b4:	4640      	mov	r0, r8
 80110b6:	4649      	mov	r1, r9
 80110b8:	f7ef f906 	bl	80002c8 <__aeabi_dsub>
 80110bc:	9a03      	ldr	r2, [sp, #12]
 80110be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80110c2:	1ad3      	subs	r3, r2, r3
 80110c4:	2b31      	cmp	r3, #49	; 0x31
 80110c6:	dc24      	bgt.n	8011112 <__ieee754_rem_pio2+0x28a>
 80110c8:	e9ca 0100 	strd	r0, r1, [sl]
 80110cc:	4646      	mov	r6, r8
 80110ce:	464f      	mov	r7, r9
 80110d0:	e9da 8900 	ldrd	r8, r9, [sl]
 80110d4:	4630      	mov	r0, r6
 80110d6:	4642      	mov	r2, r8
 80110d8:	464b      	mov	r3, r9
 80110da:	4639      	mov	r1, r7
 80110dc:	f7ef f8f4 	bl	80002c8 <__aeabi_dsub>
 80110e0:	462b      	mov	r3, r5
 80110e2:	4622      	mov	r2, r4
 80110e4:	f7ef f8f0 	bl	80002c8 <__aeabi_dsub>
 80110e8:	9b02      	ldr	r3, [sp, #8]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80110f0:	f6bf af0a 	bge.w	8010f08 <__ieee754_rem_pio2+0x80>
 80110f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80110f8:	f8ca 3004 	str.w	r3, [sl, #4]
 80110fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011100:	f8ca 8000 	str.w	r8, [sl]
 8011104:	f8ca 0008 	str.w	r0, [sl, #8]
 8011108:	f8ca 300c 	str.w	r3, [sl, #12]
 801110c:	f1cb 0b00 	rsb	fp, fp, #0
 8011110:	e6fa      	b.n	8010f08 <__ieee754_rem_pio2+0x80>
 8011112:	a327      	add	r3, pc, #156	; (adr r3, 80111b0 <__ieee754_rem_pio2+0x328>)
 8011114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011118:	ec51 0b18 	vmov	r0, r1, d8
 801111c:	f7ef fa8c 	bl	8000638 <__aeabi_dmul>
 8011120:	4604      	mov	r4, r0
 8011122:	460d      	mov	r5, r1
 8011124:	4602      	mov	r2, r0
 8011126:	460b      	mov	r3, r1
 8011128:	4640      	mov	r0, r8
 801112a:	4649      	mov	r1, r9
 801112c:	f7ef f8cc 	bl	80002c8 <__aeabi_dsub>
 8011130:	4602      	mov	r2, r0
 8011132:	460b      	mov	r3, r1
 8011134:	4606      	mov	r6, r0
 8011136:	460f      	mov	r7, r1
 8011138:	4640      	mov	r0, r8
 801113a:	4649      	mov	r1, r9
 801113c:	f7ef f8c4 	bl	80002c8 <__aeabi_dsub>
 8011140:	4622      	mov	r2, r4
 8011142:	462b      	mov	r3, r5
 8011144:	f7ef f8c0 	bl	80002c8 <__aeabi_dsub>
 8011148:	a31b      	add	r3, pc, #108	; (adr r3, 80111b8 <__ieee754_rem_pio2+0x330>)
 801114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114e:	4604      	mov	r4, r0
 8011150:	460d      	mov	r5, r1
 8011152:	ec51 0b18 	vmov	r0, r1, d8
 8011156:	f7ef fa6f 	bl	8000638 <__aeabi_dmul>
 801115a:	4622      	mov	r2, r4
 801115c:	462b      	mov	r3, r5
 801115e:	f7ef f8b3 	bl	80002c8 <__aeabi_dsub>
 8011162:	4604      	mov	r4, r0
 8011164:	460d      	mov	r5, r1
 8011166:	e75f      	b.n	8011028 <__ieee754_rem_pio2+0x1a0>
 8011168:	4b1b      	ldr	r3, [pc, #108]	; (80111d8 <__ieee754_rem_pio2+0x350>)
 801116a:	4598      	cmp	r8, r3
 801116c:	dd36      	ble.n	80111dc <__ieee754_rem_pio2+0x354>
 801116e:	ee10 2a10 	vmov	r2, s0
 8011172:	462b      	mov	r3, r5
 8011174:	4620      	mov	r0, r4
 8011176:	4629      	mov	r1, r5
 8011178:	f7ef f8a6 	bl	80002c8 <__aeabi_dsub>
 801117c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011180:	e9ca 0100 	strd	r0, r1, [sl]
 8011184:	e694      	b.n	8010eb0 <__ieee754_rem_pio2+0x28>
 8011186:	bf00      	nop
 8011188:	54400000 	.word	0x54400000
 801118c:	3ff921fb 	.word	0x3ff921fb
 8011190:	1a626331 	.word	0x1a626331
 8011194:	3dd0b461 	.word	0x3dd0b461
 8011198:	1a600000 	.word	0x1a600000
 801119c:	3dd0b461 	.word	0x3dd0b461
 80111a0:	2e037073 	.word	0x2e037073
 80111a4:	3ba3198a 	.word	0x3ba3198a
 80111a8:	6dc9c883 	.word	0x6dc9c883
 80111ac:	3fe45f30 	.word	0x3fe45f30
 80111b0:	2e000000 	.word	0x2e000000
 80111b4:	3ba3198a 	.word	0x3ba3198a
 80111b8:	252049c1 	.word	0x252049c1
 80111bc:	397b839a 	.word	0x397b839a
 80111c0:	3fe921fb 	.word	0x3fe921fb
 80111c4:	4002d97b 	.word	0x4002d97b
 80111c8:	3ff921fb 	.word	0x3ff921fb
 80111cc:	413921fb 	.word	0x413921fb
 80111d0:	3fe00000 	.word	0x3fe00000
 80111d4:	080124c8 	.word	0x080124c8
 80111d8:	7fefffff 	.word	0x7fefffff
 80111dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 80111e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80111e4:	ee10 0a10 	vmov	r0, s0
 80111e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80111ec:	ee10 6a10 	vmov	r6, s0
 80111f0:	460f      	mov	r7, r1
 80111f2:	f7ef fcd1 	bl	8000b98 <__aeabi_d2iz>
 80111f6:	f7ef f9b5 	bl	8000564 <__aeabi_i2d>
 80111fa:	4602      	mov	r2, r0
 80111fc:	460b      	mov	r3, r1
 80111fe:	4630      	mov	r0, r6
 8011200:	4639      	mov	r1, r7
 8011202:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011206:	f7ef f85f 	bl	80002c8 <__aeabi_dsub>
 801120a:	4b23      	ldr	r3, [pc, #140]	; (8011298 <__ieee754_rem_pio2+0x410>)
 801120c:	2200      	movs	r2, #0
 801120e:	f7ef fa13 	bl	8000638 <__aeabi_dmul>
 8011212:	460f      	mov	r7, r1
 8011214:	4606      	mov	r6, r0
 8011216:	f7ef fcbf 	bl	8000b98 <__aeabi_d2iz>
 801121a:	f7ef f9a3 	bl	8000564 <__aeabi_i2d>
 801121e:	4602      	mov	r2, r0
 8011220:	460b      	mov	r3, r1
 8011222:	4630      	mov	r0, r6
 8011224:	4639      	mov	r1, r7
 8011226:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801122a:	f7ef f84d 	bl	80002c8 <__aeabi_dsub>
 801122e:	4b1a      	ldr	r3, [pc, #104]	; (8011298 <__ieee754_rem_pio2+0x410>)
 8011230:	2200      	movs	r2, #0
 8011232:	f7ef fa01 	bl	8000638 <__aeabi_dmul>
 8011236:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801123a:	ad04      	add	r5, sp, #16
 801123c:	f04f 0803 	mov.w	r8, #3
 8011240:	46a9      	mov	r9, r5
 8011242:	2600      	movs	r6, #0
 8011244:	2700      	movs	r7, #0
 8011246:	4632      	mov	r2, r6
 8011248:	463b      	mov	r3, r7
 801124a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801124e:	46c3      	mov	fp, r8
 8011250:	3d08      	subs	r5, #8
 8011252:	f108 38ff 	add.w	r8, r8, #4294967295
 8011256:	f7ef fc57 	bl	8000b08 <__aeabi_dcmpeq>
 801125a:	2800      	cmp	r0, #0
 801125c:	d1f3      	bne.n	8011246 <__ieee754_rem_pio2+0x3be>
 801125e:	4b0f      	ldr	r3, [pc, #60]	; (801129c <__ieee754_rem_pio2+0x414>)
 8011260:	9301      	str	r3, [sp, #4]
 8011262:	2302      	movs	r3, #2
 8011264:	9300      	str	r3, [sp, #0]
 8011266:	4622      	mov	r2, r4
 8011268:	465b      	mov	r3, fp
 801126a:	4651      	mov	r1, sl
 801126c:	4648      	mov	r0, r9
 801126e:	f000 f817 	bl	80112a0 <__kernel_rem_pio2>
 8011272:	9b02      	ldr	r3, [sp, #8]
 8011274:	2b00      	cmp	r3, #0
 8011276:	4683      	mov	fp, r0
 8011278:	f6bf ae46 	bge.w	8010f08 <__ieee754_rem_pio2+0x80>
 801127c:	e9da 2100 	ldrd	r2, r1, [sl]
 8011280:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011284:	e9ca 2300 	strd	r2, r3, [sl]
 8011288:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801128c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011290:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011294:	e73a      	b.n	801110c <__ieee754_rem_pio2+0x284>
 8011296:	bf00      	nop
 8011298:	41700000 	.word	0x41700000
 801129c:	08012548 	.word	0x08012548

080112a0 <__kernel_rem_pio2>:
 80112a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a4:	ed2d 8b02 	vpush	{d8}
 80112a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80112ac:	f112 0f14 	cmn.w	r2, #20
 80112b0:	9308      	str	r3, [sp, #32]
 80112b2:	9101      	str	r1, [sp, #4]
 80112b4:	4bc4      	ldr	r3, [pc, #784]	; (80115c8 <__kernel_rem_pio2+0x328>)
 80112b6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80112b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80112ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80112be:	9302      	str	r3, [sp, #8]
 80112c0:	9b08      	ldr	r3, [sp, #32]
 80112c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80112c6:	bfa8      	it	ge
 80112c8:	1ed4      	subge	r4, r2, #3
 80112ca:	9306      	str	r3, [sp, #24]
 80112cc:	bfb2      	itee	lt
 80112ce:	2400      	movlt	r4, #0
 80112d0:	2318      	movge	r3, #24
 80112d2:	fb94 f4f3 	sdivge	r4, r4, r3
 80112d6:	f06f 0317 	mvn.w	r3, #23
 80112da:	fb04 3303 	mla	r3, r4, r3, r3
 80112de:	eb03 0a02 	add.w	sl, r3, r2
 80112e2:	9b02      	ldr	r3, [sp, #8]
 80112e4:	9a06      	ldr	r2, [sp, #24]
 80112e6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80115b8 <__kernel_rem_pio2+0x318>
 80112ea:	eb03 0802 	add.w	r8, r3, r2
 80112ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80112f0:	1aa7      	subs	r7, r4, r2
 80112f2:	ae22      	add	r6, sp, #136	; 0x88
 80112f4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80112f8:	2500      	movs	r5, #0
 80112fa:	4545      	cmp	r5, r8
 80112fc:	dd13      	ble.n	8011326 <__kernel_rem_pio2+0x86>
 80112fe:	9b08      	ldr	r3, [sp, #32]
 8011300:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80115b8 <__kernel_rem_pio2+0x318>
 8011304:	aa22      	add	r2, sp, #136	; 0x88
 8011306:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801130a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801130e:	f04f 0800 	mov.w	r8, #0
 8011312:	9b02      	ldr	r3, [sp, #8]
 8011314:	4598      	cmp	r8, r3
 8011316:	dc2f      	bgt.n	8011378 <__kernel_rem_pio2+0xd8>
 8011318:	ed8d 8b04 	vstr	d8, [sp, #16]
 801131c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8011320:	462f      	mov	r7, r5
 8011322:	2600      	movs	r6, #0
 8011324:	e01b      	b.n	801135e <__kernel_rem_pio2+0xbe>
 8011326:	42ef      	cmn	r7, r5
 8011328:	d407      	bmi.n	801133a <__kernel_rem_pio2+0x9a>
 801132a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801132e:	f7ef f919 	bl	8000564 <__aeabi_i2d>
 8011332:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011336:	3501      	adds	r5, #1
 8011338:	e7df      	b.n	80112fa <__kernel_rem_pio2+0x5a>
 801133a:	ec51 0b18 	vmov	r0, r1, d8
 801133e:	e7f8      	b.n	8011332 <__kernel_rem_pio2+0x92>
 8011340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011344:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011348:	f7ef f976 	bl	8000638 <__aeabi_dmul>
 801134c:	4602      	mov	r2, r0
 801134e:	460b      	mov	r3, r1
 8011350:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011354:	f7ee ffba 	bl	80002cc <__adddf3>
 8011358:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801135c:	3601      	adds	r6, #1
 801135e:	9b06      	ldr	r3, [sp, #24]
 8011360:	429e      	cmp	r6, r3
 8011362:	f1a7 0708 	sub.w	r7, r7, #8
 8011366:	ddeb      	ble.n	8011340 <__kernel_rem_pio2+0xa0>
 8011368:	ed9d 7b04 	vldr	d7, [sp, #16]
 801136c:	f108 0801 	add.w	r8, r8, #1
 8011370:	ecab 7b02 	vstmia	fp!, {d7}
 8011374:	3508      	adds	r5, #8
 8011376:	e7cc      	b.n	8011312 <__kernel_rem_pio2+0x72>
 8011378:	9b02      	ldr	r3, [sp, #8]
 801137a:	aa0e      	add	r2, sp, #56	; 0x38
 801137c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011380:	930d      	str	r3, [sp, #52]	; 0x34
 8011382:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011384:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011388:	9c02      	ldr	r4, [sp, #8]
 801138a:	930c      	str	r3, [sp, #48]	; 0x30
 801138c:	00e3      	lsls	r3, r4, #3
 801138e:	930a      	str	r3, [sp, #40]	; 0x28
 8011390:	ab9a      	add	r3, sp, #616	; 0x268
 8011392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011396:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801139a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801139e:	ab72      	add	r3, sp, #456	; 0x1c8
 80113a0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80113a4:	46c3      	mov	fp, r8
 80113a6:	46a1      	mov	r9, r4
 80113a8:	f1b9 0f00 	cmp.w	r9, #0
 80113ac:	f1a5 0508 	sub.w	r5, r5, #8
 80113b0:	dc77      	bgt.n	80114a2 <__kernel_rem_pio2+0x202>
 80113b2:	ec47 6b10 	vmov	d0, r6, r7
 80113b6:	4650      	mov	r0, sl
 80113b8:	f000 fd4e 	bl	8011e58 <scalbn>
 80113bc:	ec57 6b10 	vmov	r6, r7, d0
 80113c0:	2200      	movs	r2, #0
 80113c2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80113c6:	ee10 0a10 	vmov	r0, s0
 80113ca:	4639      	mov	r1, r7
 80113cc:	f7ef f934 	bl	8000638 <__aeabi_dmul>
 80113d0:	ec41 0b10 	vmov	d0, r0, r1
 80113d4:	f000 fcc0 	bl	8011d58 <floor>
 80113d8:	4b7c      	ldr	r3, [pc, #496]	; (80115cc <__kernel_rem_pio2+0x32c>)
 80113da:	ec51 0b10 	vmov	r0, r1, d0
 80113de:	2200      	movs	r2, #0
 80113e0:	f7ef f92a 	bl	8000638 <__aeabi_dmul>
 80113e4:	4602      	mov	r2, r0
 80113e6:	460b      	mov	r3, r1
 80113e8:	4630      	mov	r0, r6
 80113ea:	4639      	mov	r1, r7
 80113ec:	f7ee ff6c 	bl	80002c8 <__aeabi_dsub>
 80113f0:	460f      	mov	r7, r1
 80113f2:	4606      	mov	r6, r0
 80113f4:	f7ef fbd0 	bl	8000b98 <__aeabi_d2iz>
 80113f8:	9004      	str	r0, [sp, #16]
 80113fa:	f7ef f8b3 	bl	8000564 <__aeabi_i2d>
 80113fe:	4602      	mov	r2, r0
 8011400:	460b      	mov	r3, r1
 8011402:	4630      	mov	r0, r6
 8011404:	4639      	mov	r1, r7
 8011406:	f7ee ff5f 	bl	80002c8 <__aeabi_dsub>
 801140a:	f1ba 0f00 	cmp.w	sl, #0
 801140e:	4606      	mov	r6, r0
 8011410:	460f      	mov	r7, r1
 8011412:	dd6d      	ble.n	80114f0 <__kernel_rem_pio2+0x250>
 8011414:	1e62      	subs	r2, r4, #1
 8011416:	ab0e      	add	r3, sp, #56	; 0x38
 8011418:	9d04      	ldr	r5, [sp, #16]
 801141a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801141e:	f1ca 0118 	rsb	r1, sl, #24
 8011422:	fa40 f301 	asr.w	r3, r0, r1
 8011426:	441d      	add	r5, r3
 8011428:	408b      	lsls	r3, r1
 801142a:	1ac0      	subs	r0, r0, r3
 801142c:	ab0e      	add	r3, sp, #56	; 0x38
 801142e:	9504      	str	r5, [sp, #16]
 8011430:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011434:	f1ca 0317 	rsb	r3, sl, #23
 8011438:	fa40 fb03 	asr.w	fp, r0, r3
 801143c:	f1bb 0f00 	cmp.w	fp, #0
 8011440:	dd65      	ble.n	801150e <__kernel_rem_pio2+0x26e>
 8011442:	9b04      	ldr	r3, [sp, #16]
 8011444:	2200      	movs	r2, #0
 8011446:	3301      	adds	r3, #1
 8011448:	9304      	str	r3, [sp, #16]
 801144a:	4615      	mov	r5, r2
 801144c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011450:	4294      	cmp	r4, r2
 8011452:	f300 809c 	bgt.w	801158e <__kernel_rem_pio2+0x2ee>
 8011456:	f1ba 0f00 	cmp.w	sl, #0
 801145a:	dd07      	ble.n	801146c <__kernel_rem_pio2+0x1cc>
 801145c:	f1ba 0f01 	cmp.w	sl, #1
 8011460:	f000 80c0 	beq.w	80115e4 <__kernel_rem_pio2+0x344>
 8011464:	f1ba 0f02 	cmp.w	sl, #2
 8011468:	f000 80c6 	beq.w	80115f8 <__kernel_rem_pio2+0x358>
 801146c:	f1bb 0f02 	cmp.w	fp, #2
 8011470:	d14d      	bne.n	801150e <__kernel_rem_pio2+0x26e>
 8011472:	4632      	mov	r2, r6
 8011474:	463b      	mov	r3, r7
 8011476:	4956      	ldr	r1, [pc, #344]	; (80115d0 <__kernel_rem_pio2+0x330>)
 8011478:	2000      	movs	r0, #0
 801147a:	f7ee ff25 	bl	80002c8 <__aeabi_dsub>
 801147e:	4606      	mov	r6, r0
 8011480:	460f      	mov	r7, r1
 8011482:	2d00      	cmp	r5, #0
 8011484:	d043      	beq.n	801150e <__kernel_rem_pio2+0x26e>
 8011486:	4650      	mov	r0, sl
 8011488:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80115c0 <__kernel_rem_pio2+0x320>
 801148c:	f000 fce4 	bl	8011e58 <scalbn>
 8011490:	4630      	mov	r0, r6
 8011492:	4639      	mov	r1, r7
 8011494:	ec53 2b10 	vmov	r2, r3, d0
 8011498:	f7ee ff16 	bl	80002c8 <__aeabi_dsub>
 801149c:	4606      	mov	r6, r0
 801149e:	460f      	mov	r7, r1
 80114a0:	e035      	b.n	801150e <__kernel_rem_pio2+0x26e>
 80114a2:	4b4c      	ldr	r3, [pc, #304]	; (80115d4 <__kernel_rem_pio2+0x334>)
 80114a4:	2200      	movs	r2, #0
 80114a6:	4630      	mov	r0, r6
 80114a8:	4639      	mov	r1, r7
 80114aa:	f7ef f8c5 	bl	8000638 <__aeabi_dmul>
 80114ae:	f7ef fb73 	bl	8000b98 <__aeabi_d2iz>
 80114b2:	f7ef f857 	bl	8000564 <__aeabi_i2d>
 80114b6:	4602      	mov	r2, r0
 80114b8:	460b      	mov	r3, r1
 80114ba:	ec43 2b18 	vmov	d8, r2, r3
 80114be:	4b46      	ldr	r3, [pc, #280]	; (80115d8 <__kernel_rem_pio2+0x338>)
 80114c0:	2200      	movs	r2, #0
 80114c2:	f7ef f8b9 	bl	8000638 <__aeabi_dmul>
 80114c6:	4602      	mov	r2, r0
 80114c8:	460b      	mov	r3, r1
 80114ca:	4630      	mov	r0, r6
 80114cc:	4639      	mov	r1, r7
 80114ce:	f7ee fefb 	bl	80002c8 <__aeabi_dsub>
 80114d2:	f7ef fb61 	bl	8000b98 <__aeabi_d2iz>
 80114d6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80114da:	f84b 0b04 	str.w	r0, [fp], #4
 80114de:	ec51 0b18 	vmov	r0, r1, d8
 80114e2:	f7ee fef3 	bl	80002cc <__adddf3>
 80114e6:	f109 39ff 	add.w	r9, r9, #4294967295
 80114ea:	4606      	mov	r6, r0
 80114ec:	460f      	mov	r7, r1
 80114ee:	e75b      	b.n	80113a8 <__kernel_rem_pio2+0x108>
 80114f0:	d106      	bne.n	8011500 <__kernel_rem_pio2+0x260>
 80114f2:	1e63      	subs	r3, r4, #1
 80114f4:	aa0e      	add	r2, sp, #56	; 0x38
 80114f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80114fa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80114fe:	e79d      	b.n	801143c <__kernel_rem_pio2+0x19c>
 8011500:	4b36      	ldr	r3, [pc, #216]	; (80115dc <__kernel_rem_pio2+0x33c>)
 8011502:	2200      	movs	r2, #0
 8011504:	f7ef fb1e 	bl	8000b44 <__aeabi_dcmpge>
 8011508:	2800      	cmp	r0, #0
 801150a:	d13d      	bne.n	8011588 <__kernel_rem_pio2+0x2e8>
 801150c:	4683      	mov	fp, r0
 801150e:	2200      	movs	r2, #0
 8011510:	2300      	movs	r3, #0
 8011512:	4630      	mov	r0, r6
 8011514:	4639      	mov	r1, r7
 8011516:	f7ef faf7 	bl	8000b08 <__aeabi_dcmpeq>
 801151a:	2800      	cmp	r0, #0
 801151c:	f000 80c0 	beq.w	80116a0 <__kernel_rem_pio2+0x400>
 8011520:	1e65      	subs	r5, r4, #1
 8011522:	462b      	mov	r3, r5
 8011524:	2200      	movs	r2, #0
 8011526:	9902      	ldr	r1, [sp, #8]
 8011528:	428b      	cmp	r3, r1
 801152a:	da6c      	bge.n	8011606 <__kernel_rem_pio2+0x366>
 801152c:	2a00      	cmp	r2, #0
 801152e:	f000 8089 	beq.w	8011644 <__kernel_rem_pio2+0x3a4>
 8011532:	ab0e      	add	r3, sp, #56	; 0x38
 8011534:	f1aa 0a18 	sub.w	sl, sl, #24
 8011538:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801153c:	2b00      	cmp	r3, #0
 801153e:	f000 80ad 	beq.w	801169c <__kernel_rem_pio2+0x3fc>
 8011542:	4650      	mov	r0, sl
 8011544:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80115c0 <__kernel_rem_pio2+0x320>
 8011548:	f000 fc86 	bl	8011e58 <scalbn>
 801154c:	ab9a      	add	r3, sp, #616	; 0x268
 801154e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011552:	ec57 6b10 	vmov	r6, r7, d0
 8011556:	00ec      	lsls	r4, r5, #3
 8011558:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801155c:	46aa      	mov	sl, r5
 801155e:	f1ba 0f00 	cmp.w	sl, #0
 8011562:	f280 80d6 	bge.w	8011712 <__kernel_rem_pio2+0x472>
 8011566:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80115b8 <__kernel_rem_pio2+0x318>
 801156a:	462e      	mov	r6, r5
 801156c:	2e00      	cmp	r6, #0
 801156e:	f2c0 8104 	blt.w	801177a <__kernel_rem_pio2+0x4da>
 8011572:	ab72      	add	r3, sp, #456	; 0x1c8
 8011574:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011578:	f8df a064 	ldr.w	sl, [pc, #100]	; 80115e0 <__kernel_rem_pio2+0x340>
 801157c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011580:	f04f 0800 	mov.w	r8, #0
 8011584:	1baf      	subs	r7, r5, r6
 8011586:	e0ea      	b.n	801175e <__kernel_rem_pio2+0x4be>
 8011588:	f04f 0b02 	mov.w	fp, #2
 801158c:	e759      	b.n	8011442 <__kernel_rem_pio2+0x1a2>
 801158e:	f8d8 3000 	ldr.w	r3, [r8]
 8011592:	b955      	cbnz	r5, 80115aa <__kernel_rem_pio2+0x30a>
 8011594:	b123      	cbz	r3, 80115a0 <__kernel_rem_pio2+0x300>
 8011596:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801159a:	f8c8 3000 	str.w	r3, [r8]
 801159e:	2301      	movs	r3, #1
 80115a0:	3201      	adds	r2, #1
 80115a2:	f108 0804 	add.w	r8, r8, #4
 80115a6:	461d      	mov	r5, r3
 80115a8:	e752      	b.n	8011450 <__kernel_rem_pio2+0x1b0>
 80115aa:	1acb      	subs	r3, r1, r3
 80115ac:	f8c8 3000 	str.w	r3, [r8]
 80115b0:	462b      	mov	r3, r5
 80115b2:	e7f5      	b.n	80115a0 <__kernel_rem_pio2+0x300>
 80115b4:	f3af 8000 	nop.w
	...
 80115c4:	3ff00000 	.word	0x3ff00000
 80115c8:	08012690 	.word	0x08012690
 80115cc:	40200000 	.word	0x40200000
 80115d0:	3ff00000 	.word	0x3ff00000
 80115d4:	3e700000 	.word	0x3e700000
 80115d8:	41700000 	.word	0x41700000
 80115dc:	3fe00000 	.word	0x3fe00000
 80115e0:	08012650 	.word	0x08012650
 80115e4:	1e62      	subs	r2, r4, #1
 80115e6:	ab0e      	add	r3, sp, #56	; 0x38
 80115e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80115f0:	a90e      	add	r1, sp, #56	; 0x38
 80115f2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80115f6:	e739      	b.n	801146c <__kernel_rem_pio2+0x1cc>
 80115f8:	1e62      	subs	r2, r4, #1
 80115fa:	ab0e      	add	r3, sp, #56	; 0x38
 80115fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011600:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011604:	e7f4      	b.n	80115f0 <__kernel_rem_pio2+0x350>
 8011606:	a90e      	add	r1, sp, #56	; 0x38
 8011608:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801160c:	3b01      	subs	r3, #1
 801160e:	430a      	orrs	r2, r1
 8011610:	e789      	b.n	8011526 <__kernel_rem_pio2+0x286>
 8011612:	3301      	adds	r3, #1
 8011614:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011618:	2900      	cmp	r1, #0
 801161a:	d0fa      	beq.n	8011612 <__kernel_rem_pio2+0x372>
 801161c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801161e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011622:	446a      	add	r2, sp
 8011624:	3a98      	subs	r2, #152	; 0x98
 8011626:	920a      	str	r2, [sp, #40]	; 0x28
 8011628:	9a08      	ldr	r2, [sp, #32]
 801162a:	18e3      	adds	r3, r4, r3
 801162c:	18a5      	adds	r5, r4, r2
 801162e:	aa22      	add	r2, sp, #136	; 0x88
 8011630:	f104 0801 	add.w	r8, r4, #1
 8011634:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011638:	9304      	str	r3, [sp, #16]
 801163a:	9b04      	ldr	r3, [sp, #16]
 801163c:	4543      	cmp	r3, r8
 801163e:	da04      	bge.n	801164a <__kernel_rem_pio2+0x3aa>
 8011640:	461c      	mov	r4, r3
 8011642:	e6a3      	b.n	801138c <__kernel_rem_pio2+0xec>
 8011644:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011646:	2301      	movs	r3, #1
 8011648:	e7e4      	b.n	8011614 <__kernel_rem_pio2+0x374>
 801164a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801164c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011650:	f7ee ff88 	bl	8000564 <__aeabi_i2d>
 8011654:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011658:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801165a:	46ab      	mov	fp, r5
 801165c:	461c      	mov	r4, r3
 801165e:	f04f 0900 	mov.w	r9, #0
 8011662:	2600      	movs	r6, #0
 8011664:	2700      	movs	r7, #0
 8011666:	9b06      	ldr	r3, [sp, #24]
 8011668:	4599      	cmp	r9, r3
 801166a:	dd06      	ble.n	801167a <__kernel_rem_pio2+0x3da>
 801166c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801166e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011672:	f108 0801 	add.w	r8, r8, #1
 8011676:	930a      	str	r3, [sp, #40]	; 0x28
 8011678:	e7df      	b.n	801163a <__kernel_rem_pio2+0x39a>
 801167a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801167e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011682:	f7ee ffd9 	bl	8000638 <__aeabi_dmul>
 8011686:	4602      	mov	r2, r0
 8011688:	460b      	mov	r3, r1
 801168a:	4630      	mov	r0, r6
 801168c:	4639      	mov	r1, r7
 801168e:	f7ee fe1d 	bl	80002cc <__adddf3>
 8011692:	f109 0901 	add.w	r9, r9, #1
 8011696:	4606      	mov	r6, r0
 8011698:	460f      	mov	r7, r1
 801169a:	e7e4      	b.n	8011666 <__kernel_rem_pio2+0x3c6>
 801169c:	3d01      	subs	r5, #1
 801169e:	e748      	b.n	8011532 <__kernel_rem_pio2+0x292>
 80116a0:	ec47 6b10 	vmov	d0, r6, r7
 80116a4:	f1ca 0000 	rsb	r0, sl, #0
 80116a8:	f000 fbd6 	bl	8011e58 <scalbn>
 80116ac:	ec57 6b10 	vmov	r6, r7, d0
 80116b0:	4ba0      	ldr	r3, [pc, #640]	; (8011934 <__kernel_rem_pio2+0x694>)
 80116b2:	ee10 0a10 	vmov	r0, s0
 80116b6:	2200      	movs	r2, #0
 80116b8:	4639      	mov	r1, r7
 80116ba:	f7ef fa43 	bl	8000b44 <__aeabi_dcmpge>
 80116be:	b1f8      	cbz	r0, 8011700 <__kernel_rem_pio2+0x460>
 80116c0:	4b9d      	ldr	r3, [pc, #628]	; (8011938 <__kernel_rem_pio2+0x698>)
 80116c2:	2200      	movs	r2, #0
 80116c4:	4630      	mov	r0, r6
 80116c6:	4639      	mov	r1, r7
 80116c8:	f7ee ffb6 	bl	8000638 <__aeabi_dmul>
 80116cc:	f7ef fa64 	bl	8000b98 <__aeabi_d2iz>
 80116d0:	4680      	mov	r8, r0
 80116d2:	f7ee ff47 	bl	8000564 <__aeabi_i2d>
 80116d6:	4b97      	ldr	r3, [pc, #604]	; (8011934 <__kernel_rem_pio2+0x694>)
 80116d8:	2200      	movs	r2, #0
 80116da:	f7ee ffad 	bl	8000638 <__aeabi_dmul>
 80116de:	460b      	mov	r3, r1
 80116e0:	4602      	mov	r2, r0
 80116e2:	4639      	mov	r1, r7
 80116e4:	4630      	mov	r0, r6
 80116e6:	f7ee fdef 	bl	80002c8 <__aeabi_dsub>
 80116ea:	f7ef fa55 	bl	8000b98 <__aeabi_d2iz>
 80116ee:	1c65      	adds	r5, r4, #1
 80116f0:	ab0e      	add	r3, sp, #56	; 0x38
 80116f2:	f10a 0a18 	add.w	sl, sl, #24
 80116f6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80116fa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80116fe:	e720      	b.n	8011542 <__kernel_rem_pio2+0x2a2>
 8011700:	4630      	mov	r0, r6
 8011702:	4639      	mov	r1, r7
 8011704:	f7ef fa48 	bl	8000b98 <__aeabi_d2iz>
 8011708:	ab0e      	add	r3, sp, #56	; 0x38
 801170a:	4625      	mov	r5, r4
 801170c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011710:	e717      	b.n	8011542 <__kernel_rem_pio2+0x2a2>
 8011712:	ab0e      	add	r3, sp, #56	; 0x38
 8011714:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011718:	f7ee ff24 	bl	8000564 <__aeabi_i2d>
 801171c:	4632      	mov	r2, r6
 801171e:	463b      	mov	r3, r7
 8011720:	f7ee ff8a 	bl	8000638 <__aeabi_dmul>
 8011724:	4b84      	ldr	r3, [pc, #528]	; (8011938 <__kernel_rem_pio2+0x698>)
 8011726:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801172a:	2200      	movs	r2, #0
 801172c:	4630      	mov	r0, r6
 801172e:	4639      	mov	r1, r7
 8011730:	f7ee ff82 	bl	8000638 <__aeabi_dmul>
 8011734:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011738:	4606      	mov	r6, r0
 801173a:	460f      	mov	r7, r1
 801173c:	e70f      	b.n	801155e <__kernel_rem_pio2+0x2be>
 801173e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011742:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011746:	f7ee ff77 	bl	8000638 <__aeabi_dmul>
 801174a:	4602      	mov	r2, r0
 801174c:	460b      	mov	r3, r1
 801174e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011752:	f7ee fdbb 	bl	80002cc <__adddf3>
 8011756:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801175a:	f108 0801 	add.w	r8, r8, #1
 801175e:	9b02      	ldr	r3, [sp, #8]
 8011760:	4598      	cmp	r8, r3
 8011762:	dc01      	bgt.n	8011768 <__kernel_rem_pio2+0x4c8>
 8011764:	45b8      	cmp	r8, r7
 8011766:	ddea      	ble.n	801173e <__kernel_rem_pio2+0x49e>
 8011768:	ed9d 7b06 	vldr	d7, [sp, #24]
 801176c:	ab4a      	add	r3, sp, #296	; 0x128
 801176e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011772:	ed87 7b00 	vstr	d7, [r7]
 8011776:	3e01      	subs	r6, #1
 8011778:	e6f8      	b.n	801156c <__kernel_rem_pio2+0x2cc>
 801177a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801177c:	2b02      	cmp	r3, #2
 801177e:	dc0b      	bgt.n	8011798 <__kernel_rem_pio2+0x4f8>
 8011780:	2b00      	cmp	r3, #0
 8011782:	dc35      	bgt.n	80117f0 <__kernel_rem_pio2+0x550>
 8011784:	d059      	beq.n	801183a <__kernel_rem_pio2+0x59a>
 8011786:	9b04      	ldr	r3, [sp, #16]
 8011788:	f003 0007 	and.w	r0, r3, #7
 801178c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011790:	ecbd 8b02 	vpop	{d8}
 8011794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011798:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801179a:	2b03      	cmp	r3, #3
 801179c:	d1f3      	bne.n	8011786 <__kernel_rem_pio2+0x4e6>
 801179e:	ab4a      	add	r3, sp, #296	; 0x128
 80117a0:	4423      	add	r3, r4
 80117a2:	9306      	str	r3, [sp, #24]
 80117a4:	461c      	mov	r4, r3
 80117a6:	469a      	mov	sl, r3
 80117a8:	9502      	str	r5, [sp, #8]
 80117aa:	9b02      	ldr	r3, [sp, #8]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	f1aa 0a08 	sub.w	sl, sl, #8
 80117b2:	dc6b      	bgt.n	801188c <__kernel_rem_pio2+0x5ec>
 80117b4:	46aa      	mov	sl, r5
 80117b6:	f1ba 0f01 	cmp.w	sl, #1
 80117ba:	f1a4 0408 	sub.w	r4, r4, #8
 80117be:	f300 8085 	bgt.w	80118cc <__kernel_rem_pio2+0x62c>
 80117c2:	9c06      	ldr	r4, [sp, #24]
 80117c4:	2000      	movs	r0, #0
 80117c6:	3408      	adds	r4, #8
 80117c8:	2100      	movs	r1, #0
 80117ca:	2d01      	cmp	r5, #1
 80117cc:	f300 809d 	bgt.w	801190a <__kernel_rem_pio2+0x66a>
 80117d0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80117d4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80117d8:	f1bb 0f00 	cmp.w	fp, #0
 80117dc:	f040 809b 	bne.w	8011916 <__kernel_rem_pio2+0x676>
 80117e0:	9b01      	ldr	r3, [sp, #4]
 80117e2:	e9c3 5600 	strd	r5, r6, [r3]
 80117e6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80117ea:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80117ee:	e7ca      	b.n	8011786 <__kernel_rem_pio2+0x4e6>
 80117f0:	3408      	adds	r4, #8
 80117f2:	ab4a      	add	r3, sp, #296	; 0x128
 80117f4:	441c      	add	r4, r3
 80117f6:	462e      	mov	r6, r5
 80117f8:	2000      	movs	r0, #0
 80117fa:	2100      	movs	r1, #0
 80117fc:	2e00      	cmp	r6, #0
 80117fe:	da36      	bge.n	801186e <__kernel_rem_pio2+0x5ce>
 8011800:	f1bb 0f00 	cmp.w	fp, #0
 8011804:	d039      	beq.n	801187a <__kernel_rem_pio2+0x5da>
 8011806:	4602      	mov	r2, r0
 8011808:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801180c:	9c01      	ldr	r4, [sp, #4]
 801180e:	e9c4 2300 	strd	r2, r3, [r4]
 8011812:	4602      	mov	r2, r0
 8011814:	460b      	mov	r3, r1
 8011816:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801181a:	f7ee fd55 	bl	80002c8 <__aeabi_dsub>
 801181e:	ae4c      	add	r6, sp, #304	; 0x130
 8011820:	2401      	movs	r4, #1
 8011822:	42a5      	cmp	r5, r4
 8011824:	da2c      	bge.n	8011880 <__kernel_rem_pio2+0x5e0>
 8011826:	f1bb 0f00 	cmp.w	fp, #0
 801182a:	d002      	beq.n	8011832 <__kernel_rem_pio2+0x592>
 801182c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011830:	4619      	mov	r1, r3
 8011832:	9b01      	ldr	r3, [sp, #4]
 8011834:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011838:	e7a5      	b.n	8011786 <__kernel_rem_pio2+0x4e6>
 801183a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801183e:	eb0d 0403 	add.w	r4, sp, r3
 8011842:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011846:	2000      	movs	r0, #0
 8011848:	2100      	movs	r1, #0
 801184a:	2d00      	cmp	r5, #0
 801184c:	da09      	bge.n	8011862 <__kernel_rem_pio2+0x5c2>
 801184e:	f1bb 0f00 	cmp.w	fp, #0
 8011852:	d002      	beq.n	801185a <__kernel_rem_pio2+0x5ba>
 8011854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011858:	4619      	mov	r1, r3
 801185a:	9b01      	ldr	r3, [sp, #4]
 801185c:	e9c3 0100 	strd	r0, r1, [r3]
 8011860:	e791      	b.n	8011786 <__kernel_rem_pio2+0x4e6>
 8011862:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011866:	f7ee fd31 	bl	80002cc <__adddf3>
 801186a:	3d01      	subs	r5, #1
 801186c:	e7ed      	b.n	801184a <__kernel_rem_pio2+0x5aa>
 801186e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011872:	f7ee fd2b 	bl	80002cc <__adddf3>
 8011876:	3e01      	subs	r6, #1
 8011878:	e7c0      	b.n	80117fc <__kernel_rem_pio2+0x55c>
 801187a:	4602      	mov	r2, r0
 801187c:	460b      	mov	r3, r1
 801187e:	e7c5      	b.n	801180c <__kernel_rem_pio2+0x56c>
 8011880:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011884:	f7ee fd22 	bl	80002cc <__adddf3>
 8011888:	3401      	adds	r4, #1
 801188a:	e7ca      	b.n	8011822 <__kernel_rem_pio2+0x582>
 801188c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011890:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011894:	9b02      	ldr	r3, [sp, #8]
 8011896:	3b01      	subs	r3, #1
 8011898:	9302      	str	r3, [sp, #8]
 801189a:	4632      	mov	r2, r6
 801189c:	463b      	mov	r3, r7
 801189e:	4640      	mov	r0, r8
 80118a0:	4649      	mov	r1, r9
 80118a2:	f7ee fd13 	bl	80002cc <__adddf3>
 80118a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80118aa:	4602      	mov	r2, r0
 80118ac:	460b      	mov	r3, r1
 80118ae:	4640      	mov	r0, r8
 80118b0:	4649      	mov	r1, r9
 80118b2:	f7ee fd09 	bl	80002c8 <__aeabi_dsub>
 80118b6:	4632      	mov	r2, r6
 80118b8:	463b      	mov	r3, r7
 80118ba:	f7ee fd07 	bl	80002cc <__adddf3>
 80118be:	ed9d 7b08 	vldr	d7, [sp, #32]
 80118c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80118c6:	ed8a 7b00 	vstr	d7, [sl]
 80118ca:	e76e      	b.n	80117aa <__kernel_rem_pio2+0x50a>
 80118cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80118d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80118d4:	4640      	mov	r0, r8
 80118d6:	4632      	mov	r2, r6
 80118d8:	463b      	mov	r3, r7
 80118da:	4649      	mov	r1, r9
 80118dc:	f7ee fcf6 	bl	80002cc <__adddf3>
 80118e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80118e4:	4602      	mov	r2, r0
 80118e6:	460b      	mov	r3, r1
 80118e8:	4640      	mov	r0, r8
 80118ea:	4649      	mov	r1, r9
 80118ec:	f7ee fcec 	bl	80002c8 <__aeabi_dsub>
 80118f0:	4632      	mov	r2, r6
 80118f2:	463b      	mov	r3, r7
 80118f4:	f7ee fcea 	bl	80002cc <__adddf3>
 80118f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80118fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011900:	ed84 7b00 	vstr	d7, [r4]
 8011904:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011908:	e755      	b.n	80117b6 <__kernel_rem_pio2+0x516>
 801190a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801190e:	f7ee fcdd 	bl	80002cc <__adddf3>
 8011912:	3d01      	subs	r5, #1
 8011914:	e759      	b.n	80117ca <__kernel_rem_pio2+0x52a>
 8011916:	9b01      	ldr	r3, [sp, #4]
 8011918:	9a01      	ldr	r2, [sp, #4]
 801191a:	601d      	str	r5, [r3, #0]
 801191c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011920:	605c      	str	r4, [r3, #4]
 8011922:	609f      	str	r7, [r3, #8]
 8011924:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011928:	60d3      	str	r3, [r2, #12]
 801192a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801192e:	6110      	str	r0, [r2, #16]
 8011930:	6153      	str	r3, [r2, #20]
 8011932:	e728      	b.n	8011786 <__kernel_rem_pio2+0x4e6>
 8011934:	41700000 	.word	0x41700000
 8011938:	3e700000 	.word	0x3e700000
 801193c:	00000000 	.word	0x00000000

08011940 <__kernel_tan>:
 8011940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011944:	ed2d 8b06 	vpush	{d8-d10}
 8011948:	ec5b ab10 	vmov	sl, fp, d0
 801194c:	4be0      	ldr	r3, [pc, #896]	; (8011cd0 <__kernel_tan+0x390>)
 801194e:	b083      	sub	sp, #12
 8011950:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8011954:	429f      	cmp	r7, r3
 8011956:	ec59 8b11 	vmov	r8, r9, d1
 801195a:	4606      	mov	r6, r0
 801195c:	f8cd b000 	str.w	fp, [sp]
 8011960:	dc61      	bgt.n	8011a26 <__kernel_tan+0xe6>
 8011962:	ee10 0a10 	vmov	r0, s0
 8011966:	4659      	mov	r1, fp
 8011968:	f7ef f916 	bl	8000b98 <__aeabi_d2iz>
 801196c:	4605      	mov	r5, r0
 801196e:	2800      	cmp	r0, #0
 8011970:	f040 8083 	bne.w	8011a7a <__kernel_tan+0x13a>
 8011974:	1c73      	adds	r3, r6, #1
 8011976:	4652      	mov	r2, sl
 8011978:	4313      	orrs	r3, r2
 801197a:	433b      	orrs	r3, r7
 801197c:	d112      	bne.n	80119a4 <__kernel_tan+0x64>
 801197e:	ec4b ab10 	vmov	d0, sl, fp
 8011982:	f7ff fa41 	bl	8010e08 <fabs>
 8011986:	49d3      	ldr	r1, [pc, #844]	; (8011cd4 <__kernel_tan+0x394>)
 8011988:	ec53 2b10 	vmov	r2, r3, d0
 801198c:	2000      	movs	r0, #0
 801198e:	f7ee ff7d 	bl	800088c <__aeabi_ddiv>
 8011992:	4682      	mov	sl, r0
 8011994:	468b      	mov	fp, r1
 8011996:	ec4b ab10 	vmov	d0, sl, fp
 801199a:	b003      	add	sp, #12
 801199c:	ecbd 8b06 	vpop	{d8-d10}
 80119a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119a4:	2e01      	cmp	r6, #1
 80119a6:	d0f6      	beq.n	8011996 <__kernel_tan+0x56>
 80119a8:	4642      	mov	r2, r8
 80119aa:	464b      	mov	r3, r9
 80119ac:	4650      	mov	r0, sl
 80119ae:	4659      	mov	r1, fp
 80119b0:	f7ee fc8c 	bl	80002cc <__adddf3>
 80119b4:	4602      	mov	r2, r0
 80119b6:	460b      	mov	r3, r1
 80119b8:	460f      	mov	r7, r1
 80119ba:	2000      	movs	r0, #0
 80119bc:	49c6      	ldr	r1, [pc, #792]	; (8011cd8 <__kernel_tan+0x398>)
 80119be:	f7ee ff65 	bl	800088c <__aeabi_ddiv>
 80119c2:	e9cd 0100 	strd	r0, r1, [sp]
 80119c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80119ca:	462e      	mov	r6, r5
 80119cc:	4652      	mov	r2, sl
 80119ce:	462c      	mov	r4, r5
 80119d0:	4630      	mov	r0, r6
 80119d2:	461d      	mov	r5, r3
 80119d4:	4639      	mov	r1, r7
 80119d6:	465b      	mov	r3, fp
 80119d8:	f7ee fc76 	bl	80002c8 <__aeabi_dsub>
 80119dc:	4602      	mov	r2, r0
 80119de:	460b      	mov	r3, r1
 80119e0:	4640      	mov	r0, r8
 80119e2:	4649      	mov	r1, r9
 80119e4:	f7ee fc70 	bl	80002c8 <__aeabi_dsub>
 80119e8:	4632      	mov	r2, r6
 80119ea:	462b      	mov	r3, r5
 80119ec:	f7ee fe24 	bl	8000638 <__aeabi_dmul>
 80119f0:	4632      	mov	r2, r6
 80119f2:	4680      	mov	r8, r0
 80119f4:	4689      	mov	r9, r1
 80119f6:	462b      	mov	r3, r5
 80119f8:	4630      	mov	r0, r6
 80119fa:	4639      	mov	r1, r7
 80119fc:	f7ee fe1c 	bl	8000638 <__aeabi_dmul>
 8011a00:	4bb4      	ldr	r3, [pc, #720]	; (8011cd4 <__kernel_tan+0x394>)
 8011a02:	2200      	movs	r2, #0
 8011a04:	f7ee fc62 	bl	80002cc <__adddf3>
 8011a08:	4602      	mov	r2, r0
 8011a0a:	460b      	mov	r3, r1
 8011a0c:	4640      	mov	r0, r8
 8011a0e:	4649      	mov	r1, r9
 8011a10:	f7ee fc5c 	bl	80002cc <__adddf3>
 8011a14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011a18:	f7ee fe0e 	bl	8000638 <__aeabi_dmul>
 8011a1c:	4622      	mov	r2, r4
 8011a1e:	462b      	mov	r3, r5
 8011a20:	f7ee fc54 	bl	80002cc <__adddf3>
 8011a24:	e7b5      	b.n	8011992 <__kernel_tan+0x52>
 8011a26:	4bad      	ldr	r3, [pc, #692]	; (8011cdc <__kernel_tan+0x39c>)
 8011a28:	429f      	cmp	r7, r3
 8011a2a:	dd26      	ble.n	8011a7a <__kernel_tan+0x13a>
 8011a2c:	9b00      	ldr	r3, [sp, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	da09      	bge.n	8011a46 <__kernel_tan+0x106>
 8011a32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011a36:	469b      	mov	fp, r3
 8011a38:	ee10 aa10 	vmov	sl, s0
 8011a3c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011a40:	ee11 8a10 	vmov	r8, s2
 8011a44:	4699      	mov	r9, r3
 8011a46:	4652      	mov	r2, sl
 8011a48:	465b      	mov	r3, fp
 8011a4a:	a183      	add	r1, pc, #524	; (adr r1, 8011c58 <__kernel_tan+0x318>)
 8011a4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a50:	f7ee fc3a 	bl	80002c8 <__aeabi_dsub>
 8011a54:	4642      	mov	r2, r8
 8011a56:	464b      	mov	r3, r9
 8011a58:	4604      	mov	r4, r0
 8011a5a:	460d      	mov	r5, r1
 8011a5c:	a180      	add	r1, pc, #512	; (adr r1, 8011c60 <__kernel_tan+0x320>)
 8011a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a62:	f7ee fc31 	bl	80002c8 <__aeabi_dsub>
 8011a66:	4622      	mov	r2, r4
 8011a68:	462b      	mov	r3, r5
 8011a6a:	f7ee fc2f 	bl	80002cc <__adddf3>
 8011a6e:	f04f 0800 	mov.w	r8, #0
 8011a72:	4682      	mov	sl, r0
 8011a74:	468b      	mov	fp, r1
 8011a76:	f04f 0900 	mov.w	r9, #0
 8011a7a:	4652      	mov	r2, sl
 8011a7c:	465b      	mov	r3, fp
 8011a7e:	4650      	mov	r0, sl
 8011a80:	4659      	mov	r1, fp
 8011a82:	f7ee fdd9 	bl	8000638 <__aeabi_dmul>
 8011a86:	4602      	mov	r2, r0
 8011a88:	460b      	mov	r3, r1
 8011a8a:	ec43 2b18 	vmov	d8, r2, r3
 8011a8e:	f7ee fdd3 	bl	8000638 <__aeabi_dmul>
 8011a92:	ec53 2b18 	vmov	r2, r3, d8
 8011a96:	4604      	mov	r4, r0
 8011a98:	460d      	mov	r5, r1
 8011a9a:	4650      	mov	r0, sl
 8011a9c:	4659      	mov	r1, fp
 8011a9e:	f7ee fdcb 	bl	8000638 <__aeabi_dmul>
 8011aa2:	a371      	add	r3, pc, #452	; (adr r3, 8011c68 <__kernel_tan+0x328>)
 8011aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa8:	ec41 0b19 	vmov	d9, r0, r1
 8011aac:	4620      	mov	r0, r4
 8011aae:	4629      	mov	r1, r5
 8011ab0:	f7ee fdc2 	bl	8000638 <__aeabi_dmul>
 8011ab4:	a36e      	add	r3, pc, #440	; (adr r3, 8011c70 <__kernel_tan+0x330>)
 8011ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aba:	f7ee fc07 	bl	80002cc <__adddf3>
 8011abe:	4622      	mov	r2, r4
 8011ac0:	462b      	mov	r3, r5
 8011ac2:	f7ee fdb9 	bl	8000638 <__aeabi_dmul>
 8011ac6:	a36c      	add	r3, pc, #432	; (adr r3, 8011c78 <__kernel_tan+0x338>)
 8011ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011acc:	f7ee fbfe 	bl	80002cc <__adddf3>
 8011ad0:	4622      	mov	r2, r4
 8011ad2:	462b      	mov	r3, r5
 8011ad4:	f7ee fdb0 	bl	8000638 <__aeabi_dmul>
 8011ad8:	a369      	add	r3, pc, #420	; (adr r3, 8011c80 <__kernel_tan+0x340>)
 8011ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ade:	f7ee fbf5 	bl	80002cc <__adddf3>
 8011ae2:	4622      	mov	r2, r4
 8011ae4:	462b      	mov	r3, r5
 8011ae6:	f7ee fda7 	bl	8000638 <__aeabi_dmul>
 8011aea:	a367      	add	r3, pc, #412	; (adr r3, 8011c88 <__kernel_tan+0x348>)
 8011aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af0:	f7ee fbec 	bl	80002cc <__adddf3>
 8011af4:	4622      	mov	r2, r4
 8011af6:	462b      	mov	r3, r5
 8011af8:	f7ee fd9e 	bl	8000638 <__aeabi_dmul>
 8011afc:	a364      	add	r3, pc, #400	; (adr r3, 8011c90 <__kernel_tan+0x350>)
 8011afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b02:	f7ee fbe3 	bl	80002cc <__adddf3>
 8011b06:	ec53 2b18 	vmov	r2, r3, d8
 8011b0a:	f7ee fd95 	bl	8000638 <__aeabi_dmul>
 8011b0e:	a362      	add	r3, pc, #392	; (adr r3, 8011c98 <__kernel_tan+0x358>)
 8011b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b14:	ec41 0b1a 	vmov	d10, r0, r1
 8011b18:	4620      	mov	r0, r4
 8011b1a:	4629      	mov	r1, r5
 8011b1c:	f7ee fd8c 	bl	8000638 <__aeabi_dmul>
 8011b20:	a35f      	add	r3, pc, #380	; (adr r3, 8011ca0 <__kernel_tan+0x360>)
 8011b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b26:	f7ee fbd1 	bl	80002cc <__adddf3>
 8011b2a:	4622      	mov	r2, r4
 8011b2c:	462b      	mov	r3, r5
 8011b2e:	f7ee fd83 	bl	8000638 <__aeabi_dmul>
 8011b32:	a35d      	add	r3, pc, #372	; (adr r3, 8011ca8 <__kernel_tan+0x368>)
 8011b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b38:	f7ee fbc8 	bl	80002cc <__adddf3>
 8011b3c:	4622      	mov	r2, r4
 8011b3e:	462b      	mov	r3, r5
 8011b40:	f7ee fd7a 	bl	8000638 <__aeabi_dmul>
 8011b44:	a35a      	add	r3, pc, #360	; (adr r3, 8011cb0 <__kernel_tan+0x370>)
 8011b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b4a:	f7ee fbbf 	bl	80002cc <__adddf3>
 8011b4e:	4622      	mov	r2, r4
 8011b50:	462b      	mov	r3, r5
 8011b52:	f7ee fd71 	bl	8000638 <__aeabi_dmul>
 8011b56:	a358      	add	r3, pc, #352	; (adr r3, 8011cb8 <__kernel_tan+0x378>)
 8011b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b5c:	f7ee fbb6 	bl	80002cc <__adddf3>
 8011b60:	4622      	mov	r2, r4
 8011b62:	462b      	mov	r3, r5
 8011b64:	f7ee fd68 	bl	8000638 <__aeabi_dmul>
 8011b68:	a355      	add	r3, pc, #340	; (adr r3, 8011cc0 <__kernel_tan+0x380>)
 8011b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6e:	f7ee fbad 	bl	80002cc <__adddf3>
 8011b72:	4602      	mov	r2, r0
 8011b74:	460b      	mov	r3, r1
 8011b76:	ec51 0b1a 	vmov	r0, r1, d10
 8011b7a:	f7ee fba7 	bl	80002cc <__adddf3>
 8011b7e:	ec53 2b19 	vmov	r2, r3, d9
 8011b82:	f7ee fd59 	bl	8000638 <__aeabi_dmul>
 8011b86:	4642      	mov	r2, r8
 8011b88:	464b      	mov	r3, r9
 8011b8a:	f7ee fb9f 	bl	80002cc <__adddf3>
 8011b8e:	ec53 2b18 	vmov	r2, r3, d8
 8011b92:	f7ee fd51 	bl	8000638 <__aeabi_dmul>
 8011b96:	4642      	mov	r2, r8
 8011b98:	464b      	mov	r3, r9
 8011b9a:	f7ee fb97 	bl	80002cc <__adddf3>
 8011b9e:	a34a      	add	r3, pc, #296	; (adr r3, 8011cc8 <__kernel_tan+0x388>)
 8011ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	460d      	mov	r5, r1
 8011ba8:	ec51 0b19 	vmov	r0, r1, d9
 8011bac:	f7ee fd44 	bl	8000638 <__aeabi_dmul>
 8011bb0:	4622      	mov	r2, r4
 8011bb2:	462b      	mov	r3, r5
 8011bb4:	f7ee fb8a 	bl	80002cc <__adddf3>
 8011bb8:	460b      	mov	r3, r1
 8011bba:	ec41 0b18 	vmov	d8, r0, r1
 8011bbe:	4602      	mov	r2, r0
 8011bc0:	4659      	mov	r1, fp
 8011bc2:	4650      	mov	r0, sl
 8011bc4:	f7ee fb82 	bl	80002cc <__adddf3>
 8011bc8:	4b44      	ldr	r3, [pc, #272]	; (8011cdc <__kernel_tan+0x39c>)
 8011bca:	429f      	cmp	r7, r3
 8011bcc:	4604      	mov	r4, r0
 8011bce:	460d      	mov	r5, r1
 8011bd0:	f340 8086 	ble.w	8011ce0 <__kernel_tan+0x3a0>
 8011bd4:	4630      	mov	r0, r6
 8011bd6:	f7ee fcc5 	bl	8000564 <__aeabi_i2d>
 8011bda:	4622      	mov	r2, r4
 8011bdc:	4680      	mov	r8, r0
 8011bde:	4689      	mov	r9, r1
 8011be0:	462b      	mov	r3, r5
 8011be2:	4620      	mov	r0, r4
 8011be4:	4629      	mov	r1, r5
 8011be6:	f7ee fd27 	bl	8000638 <__aeabi_dmul>
 8011bea:	4642      	mov	r2, r8
 8011bec:	4606      	mov	r6, r0
 8011bee:	460f      	mov	r7, r1
 8011bf0:	464b      	mov	r3, r9
 8011bf2:	4620      	mov	r0, r4
 8011bf4:	4629      	mov	r1, r5
 8011bf6:	f7ee fb69 	bl	80002cc <__adddf3>
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	460b      	mov	r3, r1
 8011bfe:	4630      	mov	r0, r6
 8011c00:	4639      	mov	r1, r7
 8011c02:	f7ee fe43 	bl	800088c <__aeabi_ddiv>
 8011c06:	ec53 2b18 	vmov	r2, r3, d8
 8011c0a:	f7ee fb5d 	bl	80002c8 <__aeabi_dsub>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	460b      	mov	r3, r1
 8011c12:	4650      	mov	r0, sl
 8011c14:	4659      	mov	r1, fp
 8011c16:	f7ee fb57 	bl	80002c8 <__aeabi_dsub>
 8011c1a:	4602      	mov	r2, r0
 8011c1c:	460b      	mov	r3, r1
 8011c1e:	f7ee fb55 	bl	80002cc <__adddf3>
 8011c22:	4602      	mov	r2, r0
 8011c24:	460b      	mov	r3, r1
 8011c26:	4640      	mov	r0, r8
 8011c28:	4649      	mov	r1, r9
 8011c2a:	f7ee fb4d 	bl	80002c8 <__aeabi_dsub>
 8011c2e:	9b00      	ldr	r3, [sp, #0]
 8011c30:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8011c34:	f00a 0a02 	and.w	sl, sl, #2
 8011c38:	4604      	mov	r4, r0
 8011c3a:	f1ca 0001 	rsb	r0, sl, #1
 8011c3e:	460d      	mov	r5, r1
 8011c40:	f7ee fc90 	bl	8000564 <__aeabi_i2d>
 8011c44:	4602      	mov	r2, r0
 8011c46:	460b      	mov	r3, r1
 8011c48:	4620      	mov	r0, r4
 8011c4a:	4629      	mov	r1, r5
 8011c4c:	f7ee fcf4 	bl	8000638 <__aeabi_dmul>
 8011c50:	e69f      	b.n	8011992 <__kernel_tan+0x52>
 8011c52:	bf00      	nop
 8011c54:	f3af 8000 	nop.w
 8011c58:	54442d18 	.word	0x54442d18
 8011c5c:	3fe921fb 	.word	0x3fe921fb
 8011c60:	33145c07 	.word	0x33145c07
 8011c64:	3c81a626 	.word	0x3c81a626
 8011c68:	74bf7ad4 	.word	0x74bf7ad4
 8011c6c:	3efb2a70 	.word	0x3efb2a70
 8011c70:	32f0a7e9 	.word	0x32f0a7e9
 8011c74:	3f12b80f 	.word	0x3f12b80f
 8011c78:	1a8d1068 	.word	0x1a8d1068
 8011c7c:	3f3026f7 	.word	0x3f3026f7
 8011c80:	fee08315 	.word	0xfee08315
 8011c84:	3f57dbc8 	.word	0x3f57dbc8
 8011c88:	e96e8493 	.word	0xe96e8493
 8011c8c:	3f8226e3 	.word	0x3f8226e3
 8011c90:	1bb341fe 	.word	0x1bb341fe
 8011c94:	3faba1ba 	.word	0x3faba1ba
 8011c98:	db605373 	.word	0xdb605373
 8011c9c:	bef375cb 	.word	0xbef375cb
 8011ca0:	a03792a6 	.word	0xa03792a6
 8011ca4:	3f147e88 	.word	0x3f147e88
 8011ca8:	f2f26501 	.word	0xf2f26501
 8011cac:	3f4344d8 	.word	0x3f4344d8
 8011cb0:	c9560328 	.word	0xc9560328
 8011cb4:	3f6d6d22 	.word	0x3f6d6d22
 8011cb8:	8406d637 	.word	0x8406d637
 8011cbc:	3f9664f4 	.word	0x3f9664f4
 8011cc0:	1110fe7a 	.word	0x1110fe7a
 8011cc4:	3fc11111 	.word	0x3fc11111
 8011cc8:	55555563 	.word	0x55555563
 8011ccc:	3fd55555 	.word	0x3fd55555
 8011cd0:	3e2fffff 	.word	0x3e2fffff
 8011cd4:	3ff00000 	.word	0x3ff00000
 8011cd8:	bff00000 	.word	0xbff00000
 8011cdc:	3fe59427 	.word	0x3fe59427
 8011ce0:	2e01      	cmp	r6, #1
 8011ce2:	d02f      	beq.n	8011d44 <__kernel_tan+0x404>
 8011ce4:	460f      	mov	r7, r1
 8011ce6:	4602      	mov	r2, r0
 8011ce8:	460b      	mov	r3, r1
 8011cea:	4689      	mov	r9, r1
 8011cec:	2000      	movs	r0, #0
 8011cee:	4917      	ldr	r1, [pc, #92]	; (8011d4c <__kernel_tan+0x40c>)
 8011cf0:	f7ee fdcc 	bl	800088c <__aeabi_ddiv>
 8011cf4:	2600      	movs	r6, #0
 8011cf6:	e9cd 0100 	strd	r0, r1, [sp]
 8011cfa:	4652      	mov	r2, sl
 8011cfc:	465b      	mov	r3, fp
 8011cfe:	4630      	mov	r0, r6
 8011d00:	4639      	mov	r1, r7
 8011d02:	f7ee fae1 	bl	80002c8 <__aeabi_dsub>
 8011d06:	e9dd 4500 	ldrd	r4, r5, [sp]
 8011d0a:	4602      	mov	r2, r0
 8011d0c:	460b      	mov	r3, r1
 8011d0e:	ec51 0b18 	vmov	r0, r1, d8
 8011d12:	f7ee fad9 	bl	80002c8 <__aeabi_dsub>
 8011d16:	4632      	mov	r2, r6
 8011d18:	462b      	mov	r3, r5
 8011d1a:	f7ee fc8d 	bl	8000638 <__aeabi_dmul>
 8011d1e:	46b0      	mov	r8, r6
 8011d20:	460f      	mov	r7, r1
 8011d22:	4642      	mov	r2, r8
 8011d24:	462b      	mov	r3, r5
 8011d26:	4634      	mov	r4, r6
 8011d28:	4649      	mov	r1, r9
 8011d2a:	4606      	mov	r6, r0
 8011d2c:	4640      	mov	r0, r8
 8011d2e:	f7ee fc83 	bl	8000638 <__aeabi_dmul>
 8011d32:	4b07      	ldr	r3, [pc, #28]	; (8011d50 <__kernel_tan+0x410>)
 8011d34:	2200      	movs	r2, #0
 8011d36:	f7ee fac9 	bl	80002cc <__adddf3>
 8011d3a:	4602      	mov	r2, r0
 8011d3c:	460b      	mov	r3, r1
 8011d3e:	4630      	mov	r0, r6
 8011d40:	4639      	mov	r1, r7
 8011d42:	e665      	b.n	8011a10 <__kernel_tan+0xd0>
 8011d44:	4682      	mov	sl, r0
 8011d46:	468b      	mov	fp, r1
 8011d48:	e625      	b.n	8011996 <__kernel_tan+0x56>
 8011d4a:	bf00      	nop
 8011d4c:	bff00000 	.word	0xbff00000
 8011d50:	3ff00000 	.word	0x3ff00000
 8011d54:	00000000 	.word	0x00000000

08011d58 <floor>:
 8011d58:	ec51 0b10 	vmov	r0, r1, d0
 8011d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011d64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011d68:	2e13      	cmp	r6, #19
 8011d6a:	ee10 5a10 	vmov	r5, s0
 8011d6e:	ee10 8a10 	vmov	r8, s0
 8011d72:	460c      	mov	r4, r1
 8011d74:	dc32      	bgt.n	8011ddc <floor+0x84>
 8011d76:	2e00      	cmp	r6, #0
 8011d78:	da14      	bge.n	8011da4 <floor+0x4c>
 8011d7a:	a333      	add	r3, pc, #204	; (adr r3, 8011e48 <floor+0xf0>)
 8011d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d80:	f7ee faa4 	bl	80002cc <__adddf3>
 8011d84:	2200      	movs	r2, #0
 8011d86:	2300      	movs	r3, #0
 8011d88:	f7ee fee6 	bl	8000b58 <__aeabi_dcmpgt>
 8011d8c:	b138      	cbz	r0, 8011d9e <floor+0x46>
 8011d8e:	2c00      	cmp	r4, #0
 8011d90:	da57      	bge.n	8011e42 <floor+0xea>
 8011d92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011d96:	431d      	orrs	r5, r3
 8011d98:	d001      	beq.n	8011d9e <floor+0x46>
 8011d9a:	4c2d      	ldr	r4, [pc, #180]	; (8011e50 <floor+0xf8>)
 8011d9c:	2500      	movs	r5, #0
 8011d9e:	4621      	mov	r1, r4
 8011da0:	4628      	mov	r0, r5
 8011da2:	e025      	b.n	8011df0 <floor+0x98>
 8011da4:	4f2b      	ldr	r7, [pc, #172]	; (8011e54 <floor+0xfc>)
 8011da6:	4137      	asrs	r7, r6
 8011da8:	ea01 0307 	and.w	r3, r1, r7
 8011dac:	4303      	orrs	r3, r0
 8011dae:	d01f      	beq.n	8011df0 <floor+0x98>
 8011db0:	a325      	add	r3, pc, #148	; (adr r3, 8011e48 <floor+0xf0>)
 8011db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db6:	f7ee fa89 	bl	80002cc <__adddf3>
 8011dba:	2200      	movs	r2, #0
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	f7ee fecb 	bl	8000b58 <__aeabi_dcmpgt>
 8011dc2:	2800      	cmp	r0, #0
 8011dc4:	d0eb      	beq.n	8011d9e <floor+0x46>
 8011dc6:	2c00      	cmp	r4, #0
 8011dc8:	bfbe      	ittt	lt
 8011dca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011dce:	fa43 f606 	asrlt.w	r6, r3, r6
 8011dd2:	19a4      	addlt	r4, r4, r6
 8011dd4:	ea24 0407 	bic.w	r4, r4, r7
 8011dd8:	2500      	movs	r5, #0
 8011dda:	e7e0      	b.n	8011d9e <floor+0x46>
 8011ddc:	2e33      	cmp	r6, #51	; 0x33
 8011dde:	dd0b      	ble.n	8011df8 <floor+0xa0>
 8011de0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011de4:	d104      	bne.n	8011df0 <floor+0x98>
 8011de6:	ee10 2a10 	vmov	r2, s0
 8011dea:	460b      	mov	r3, r1
 8011dec:	f7ee fa6e 	bl	80002cc <__adddf3>
 8011df0:	ec41 0b10 	vmov	d0, r0, r1
 8011df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011df8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8011e00:	fa23 f707 	lsr.w	r7, r3, r7
 8011e04:	4207      	tst	r7, r0
 8011e06:	d0f3      	beq.n	8011df0 <floor+0x98>
 8011e08:	a30f      	add	r3, pc, #60	; (adr r3, 8011e48 <floor+0xf0>)
 8011e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e0e:	f7ee fa5d 	bl	80002cc <__adddf3>
 8011e12:	2200      	movs	r2, #0
 8011e14:	2300      	movs	r3, #0
 8011e16:	f7ee fe9f 	bl	8000b58 <__aeabi_dcmpgt>
 8011e1a:	2800      	cmp	r0, #0
 8011e1c:	d0bf      	beq.n	8011d9e <floor+0x46>
 8011e1e:	2c00      	cmp	r4, #0
 8011e20:	da02      	bge.n	8011e28 <floor+0xd0>
 8011e22:	2e14      	cmp	r6, #20
 8011e24:	d103      	bne.n	8011e2e <floor+0xd6>
 8011e26:	3401      	adds	r4, #1
 8011e28:	ea25 0507 	bic.w	r5, r5, r7
 8011e2c:	e7b7      	b.n	8011d9e <floor+0x46>
 8011e2e:	2301      	movs	r3, #1
 8011e30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011e34:	fa03 f606 	lsl.w	r6, r3, r6
 8011e38:	4435      	add	r5, r6
 8011e3a:	4545      	cmp	r5, r8
 8011e3c:	bf38      	it	cc
 8011e3e:	18e4      	addcc	r4, r4, r3
 8011e40:	e7f2      	b.n	8011e28 <floor+0xd0>
 8011e42:	2500      	movs	r5, #0
 8011e44:	462c      	mov	r4, r5
 8011e46:	e7aa      	b.n	8011d9e <floor+0x46>
 8011e48:	8800759c 	.word	0x8800759c
 8011e4c:	7e37e43c 	.word	0x7e37e43c
 8011e50:	bff00000 	.word	0xbff00000
 8011e54:	000fffff 	.word	0x000fffff

08011e58 <scalbn>:
 8011e58:	b570      	push	{r4, r5, r6, lr}
 8011e5a:	ec55 4b10 	vmov	r4, r5, d0
 8011e5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011e62:	4606      	mov	r6, r0
 8011e64:	462b      	mov	r3, r5
 8011e66:	b99a      	cbnz	r2, 8011e90 <scalbn+0x38>
 8011e68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011e6c:	4323      	orrs	r3, r4
 8011e6e:	d036      	beq.n	8011ede <scalbn+0x86>
 8011e70:	4b39      	ldr	r3, [pc, #228]	; (8011f58 <scalbn+0x100>)
 8011e72:	4629      	mov	r1, r5
 8011e74:	ee10 0a10 	vmov	r0, s0
 8011e78:	2200      	movs	r2, #0
 8011e7a:	f7ee fbdd 	bl	8000638 <__aeabi_dmul>
 8011e7e:	4b37      	ldr	r3, [pc, #220]	; (8011f5c <scalbn+0x104>)
 8011e80:	429e      	cmp	r6, r3
 8011e82:	4604      	mov	r4, r0
 8011e84:	460d      	mov	r5, r1
 8011e86:	da10      	bge.n	8011eaa <scalbn+0x52>
 8011e88:	a32b      	add	r3, pc, #172	; (adr r3, 8011f38 <scalbn+0xe0>)
 8011e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8e:	e03a      	b.n	8011f06 <scalbn+0xae>
 8011e90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011e94:	428a      	cmp	r2, r1
 8011e96:	d10c      	bne.n	8011eb2 <scalbn+0x5a>
 8011e98:	ee10 2a10 	vmov	r2, s0
 8011e9c:	4620      	mov	r0, r4
 8011e9e:	4629      	mov	r1, r5
 8011ea0:	f7ee fa14 	bl	80002cc <__adddf3>
 8011ea4:	4604      	mov	r4, r0
 8011ea6:	460d      	mov	r5, r1
 8011ea8:	e019      	b.n	8011ede <scalbn+0x86>
 8011eaa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011eae:	460b      	mov	r3, r1
 8011eb0:	3a36      	subs	r2, #54	; 0x36
 8011eb2:	4432      	add	r2, r6
 8011eb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011eb8:	428a      	cmp	r2, r1
 8011eba:	dd08      	ble.n	8011ece <scalbn+0x76>
 8011ebc:	2d00      	cmp	r5, #0
 8011ebe:	a120      	add	r1, pc, #128	; (adr r1, 8011f40 <scalbn+0xe8>)
 8011ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ec4:	da1c      	bge.n	8011f00 <scalbn+0xa8>
 8011ec6:	a120      	add	r1, pc, #128	; (adr r1, 8011f48 <scalbn+0xf0>)
 8011ec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ecc:	e018      	b.n	8011f00 <scalbn+0xa8>
 8011ece:	2a00      	cmp	r2, #0
 8011ed0:	dd08      	ble.n	8011ee4 <scalbn+0x8c>
 8011ed2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011ed6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011eda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011ede:	ec45 4b10 	vmov	d0, r4, r5
 8011ee2:	bd70      	pop	{r4, r5, r6, pc}
 8011ee4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011ee8:	da19      	bge.n	8011f1e <scalbn+0xc6>
 8011eea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011eee:	429e      	cmp	r6, r3
 8011ef0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8011ef4:	dd0a      	ble.n	8011f0c <scalbn+0xb4>
 8011ef6:	a112      	add	r1, pc, #72	; (adr r1, 8011f40 <scalbn+0xe8>)
 8011ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d1e2      	bne.n	8011ec6 <scalbn+0x6e>
 8011f00:	a30f      	add	r3, pc, #60	; (adr r3, 8011f40 <scalbn+0xe8>)
 8011f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f06:	f7ee fb97 	bl	8000638 <__aeabi_dmul>
 8011f0a:	e7cb      	b.n	8011ea4 <scalbn+0x4c>
 8011f0c:	a10a      	add	r1, pc, #40	; (adr r1, 8011f38 <scalbn+0xe0>)
 8011f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d0b8      	beq.n	8011e88 <scalbn+0x30>
 8011f16:	a10e      	add	r1, pc, #56	; (adr r1, 8011f50 <scalbn+0xf8>)
 8011f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f1c:	e7b4      	b.n	8011e88 <scalbn+0x30>
 8011f1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011f22:	3236      	adds	r2, #54	; 0x36
 8011f24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011f28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011f2c:	4620      	mov	r0, r4
 8011f2e:	4b0c      	ldr	r3, [pc, #48]	; (8011f60 <scalbn+0x108>)
 8011f30:	2200      	movs	r2, #0
 8011f32:	e7e8      	b.n	8011f06 <scalbn+0xae>
 8011f34:	f3af 8000 	nop.w
 8011f38:	c2f8f359 	.word	0xc2f8f359
 8011f3c:	01a56e1f 	.word	0x01a56e1f
 8011f40:	8800759c 	.word	0x8800759c
 8011f44:	7e37e43c 	.word	0x7e37e43c
 8011f48:	8800759c 	.word	0x8800759c
 8011f4c:	fe37e43c 	.word	0xfe37e43c
 8011f50:	c2f8f359 	.word	0xc2f8f359
 8011f54:	81a56e1f 	.word	0x81a56e1f
 8011f58:	43500000 	.word	0x43500000
 8011f5c:	ffff3cb0 	.word	0xffff3cb0
 8011f60:	3c900000 	.word	0x3c900000

08011f64 <_close>:
 8011f64:	4b02      	ldr	r3, [pc, #8]	; (8011f70 <_close+0xc>)
 8011f66:	2258      	movs	r2, #88	; 0x58
 8011f68:	601a      	str	r2, [r3, #0]
 8011f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f6e:	4770      	bx	lr
 8011f70:	20000cbc 	.word	0x20000cbc

08011f74 <_fstat>:
 8011f74:	4b02      	ldr	r3, [pc, #8]	; (8011f80 <_fstat+0xc>)
 8011f76:	2258      	movs	r2, #88	; 0x58
 8011f78:	601a      	str	r2, [r3, #0]
 8011f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f7e:	4770      	bx	lr
 8011f80:	20000cbc 	.word	0x20000cbc

08011f84 <_getpid>:
 8011f84:	4b02      	ldr	r3, [pc, #8]	; (8011f90 <_getpid+0xc>)
 8011f86:	2258      	movs	r2, #88	; 0x58
 8011f88:	601a      	str	r2, [r3, #0]
 8011f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f8e:	4770      	bx	lr
 8011f90:	20000cbc 	.word	0x20000cbc

08011f94 <_isatty>:
 8011f94:	4b02      	ldr	r3, [pc, #8]	; (8011fa0 <_isatty+0xc>)
 8011f96:	2258      	movs	r2, #88	; 0x58
 8011f98:	601a      	str	r2, [r3, #0]
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	4770      	bx	lr
 8011f9e:	bf00      	nop
 8011fa0:	20000cbc 	.word	0x20000cbc

08011fa4 <_kill>:
 8011fa4:	4b02      	ldr	r3, [pc, #8]	; (8011fb0 <_kill+0xc>)
 8011fa6:	2258      	movs	r2, #88	; 0x58
 8011fa8:	601a      	str	r2, [r3, #0]
 8011faa:	f04f 30ff 	mov.w	r0, #4294967295
 8011fae:	4770      	bx	lr
 8011fb0:	20000cbc 	.word	0x20000cbc

08011fb4 <_lseek>:
 8011fb4:	4b02      	ldr	r3, [pc, #8]	; (8011fc0 <_lseek+0xc>)
 8011fb6:	2258      	movs	r2, #88	; 0x58
 8011fb8:	601a      	str	r2, [r3, #0]
 8011fba:	f04f 30ff 	mov.w	r0, #4294967295
 8011fbe:	4770      	bx	lr
 8011fc0:	20000cbc 	.word	0x20000cbc

08011fc4 <_read>:
 8011fc4:	4b02      	ldr	r3, [pc, #8]	; (8011fd0 <_read+0xc>)
 8011fc6:	2258      	movs	r2, #88	; 0x58
 8011fc8:	601a      	str	r2, [r3, #0]
 8011fca:	f04f 30ff 	mov.w	r0, #4294967295
 8011fce:	4770      	bx	lr
 8011fd0:	20000cbc 	.word	0x20000cbc

08011fd4 <_sbrk>:
 8011fd4:	4a04      	ldr	r2, [pc, #16]	; (8011fe8 <_sbrk+0x14>)
 8011fd6:	6811      	ldr	r1, [r2, #0]
 8011fd8:	4603      	mov	r3, r0
 8011fda:	b909      	cbnz	r1, 8011fe0 <_sbrk+0xc>
 8011fdc:	4903      	ldr	r1, [pc, #12]	; (8011fec <_sbrk+0x18>)
 8011fde:	6011      	str	r1, [r2, #0]
 8011fe0:	6810      	ldr	r0, [r2, #0]
 8011fe2:	4403      	add	r3, r0
 8011fe4:	6013      	str	r3, [r2, #0]
 8011fe6:	4770      	bx	lr
 8011fe8:	20000cc4 	.word	0x20000cc4
 8011fec:	20000cc8 	.word	0x20000cc8

08011ff0 <_write>:
 8011ff0:	4b02      	ldr	r3, [pc, #8]	; (8011ffc <_write+0xc>)
 8011ff2:	2258      	movs	r2, #88	; 0x58
 8011ff4:	601a      	str	r2, [r3, #0]
 8011ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8011ffa:	4770      	bx	lr
 8011ffc:	20000cbc 	.word	0x20000cbc

08012000 <_exit>:
 8012000:	e7fe      	b.n	8012000 <_exit>
	...

08012004 <_init>:
 8012004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012006:	bf00      	nop
 8012008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801200a:	bc08      	pop	{r3}
 801200c:	469e      	mov	lr, r3
 801200e:	4770      	bx	lr

08012010 <_fini>:
 8012010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012012:	bf00      	nop
 8012014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012016:	bc08      	pop	{r3}
 8012018:	469e      	mov	lr, r3
 801201a:	4770      	bx	lr
