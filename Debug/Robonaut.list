
Robonaut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800b390  0800b390  0001b390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9b8  0800b9b8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b9b8  0800b9b8  0001b9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9c0  0800b9c0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9c0  0800b9c0  0001b9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b9c4  0800b9c4  0001b9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b9c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  200001e4  0800bbac  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  0800bbac  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016623  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a5  00000000  00000000  00036837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  000391e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003a520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000063e5  00000000  00000000  0003b770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183a4  00000000  00000000  00041b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f81c6  00000000  00000000  00059ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001520bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065bc  00000000  00000000  00152110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001586cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00158798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b374 	.word	0x0800b374

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800b374 	.word	0x0800b374

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <LS_LED_Light>:
#include <stdbool.h>
#include <math.h>

// Az utolsó beadott érték mindig 33-nál nagyobb legyen!
void LS_LED_Light(SPI_HandleTypeDef *hspi, uint8_t *leds_to_light)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_on[4] = {0};
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
	uint8_t fb_leds_on_temp[4] = {0};
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
	for (int i=0; leds_to_light[i]<33; i++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fa2:	e082      	b.n	80010aa <LS_LED_Light+0x11e>
	{
		switch(leds_to_light[i]/8) {
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d877      	bhi.n	80010a4 <LS_LED_Light+0x118>
 8000fb4:	a201      	add	r2, pc, #4	; (adr r2, 8000fbc <LS_LED_Light+0x30>)
 8000fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fba:	bf00      	nop
 8000fbc:	08000fcd 	.word	0x08000fcd
 8000fc0:	08001003 	.word	0x08001003
 8000fc4:	08001039 	.word	0x08001039
 8000fc8:	0800106f 	.word	0x0800106f
		case 0:
			fb_leds_on_temp[3] = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
 8000fd4:	e006      	b.n	8000fe4 <LS_LED_Light+0x58>
				fb_leds_on_temp[3] <<= 1;
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000fde:	6a3b      	ldr	r3, [r7, #32]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	623b      	str	r3, [r7, #32]
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	6a3a      	ldr	r2, [r7, #32]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	dbef      	blt.n	8000fd6 <LS_LED_Light+0x4a>
			}
			fb_leds_on[3] |= fb_leds_on_temp[3];
 8000ff6:	7cfa      	ldrb	r2, [r7, #19]
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	74fb      	strb	r3, [r7, #19]
			break;
 8001000:	e050      	b.n	80010a4 <LS_LED_Light+0x118>
		case 1:
			fb_leds_on_temp[2] = 1;
 8001002:	2301      	movs	r3, #1
 8001004:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
 800100a:	e006      	b.n	800101a <LS_LED_Light+0x8e>
				fb_leds_on_temp[2] <<= 1;
 800100c:	7bbb      	ldrb	r3, [r7, #14]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	3301      	adds	r3, #1
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	4413      	add	r3, r2
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	429a      	cmp	r2, r3
 800102a:	dbef      	blt.n	800100c <LS_LED_Light+0x80>
			}
			fb_leds_on[2] |= fb_leds_on_temp[2];
 800102c:	7cba      	ldrb	r2, [r7, #18]
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	4313      	orrs	r3, r2
 8001032:	b2db      	uxtb	r3, r3
 8001034:	74bb      	strb	r3, [r7, #18]
			break;
 8001036:	e035      	b.n	80010a4 <LS_LED_Light+0x118>
		case 2:
			fb_leds_on_temp[1] = 1;
 8001038:	2301      	movs	r3, #1
 800103a:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	e006      	b.n	8001050 <LS_LED_Light+0xc4>
				fb_leds_on_temp[1] <<= 1;
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	3301      	adds	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	4413      	add	r3, r2
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	429a      	cmp	r2, r3
 8001060:	dbef      	blt.n	8001042 <LS_LED_Light+0xb6>
			}
			fb_leds_on[1] |= fb_leds_on_temp[1];
 8001062:	7c7a      	ldrb	r2, [r7, #17]
 8001064:	7b7b      	ldrb	r3, [r7, #13]
 8001066:	4313      	orrs	r3, r2
 8001068:	b2db      	uxtb	r3, r3
 800106a:	747b      	strb	r3, [r7, #17]
			break;
 800106c:	e01a      	b.n	80010a4 <LS_LED_Light+0x118>
		case 3:
			fb_leds_on_temp[0] = 1;
 800106e:	2301      	movs	r3, #1
 8001070:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
 8001076:	e006      	b.n	8001086 <LS_LED_Light+0xfa>
				fb_leds_on_temp[0] <<= 1;
 8001078:	7b3b      	ldrb	r3, [r7, #12]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	b2db      	uxtb	r3, r3
 800107e:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	dbef      	blt.n	8001078 <LS_LED_Light+0xec>
			}
			fb_leds_on[0] |= fb_leds_on_temp[0];
 8001098:	7c3a      	ldrb	r2, [r7, #16]
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	743b      	strb	r3, [r7, #16]
			break;
 80010a2:	bf00      	nop
	for (int i=0; leds_to_light[i]<33; i++)
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	3301      	adds	r3, #1
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b20      	cmp	r3, #32
 80010b4:	f67f af76 	bls.w	8000fa4 <LS_LED_Light+0x18>
		}
	}
	LS_LED_Send(hspi, fb_leds_on);
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f804 	bl	80010cc <LS_LED_Send>
}
 80010c4:	bf00      	nop
 80010c6:	3728      	adds	r7, #40	; 0x28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <LS_LED_Send>:

void LS_LED_Send(SPI_HandleTypeDef *hspi, uint8_t *leds_on)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 80010d6:	2364      	movs	r3, #100	; 0x64
 80010d8:	2204      	movs	r2, #4
 80010da:	6839      	ldr	r1, [r7, #0]
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f003 fd98 	bl	8004c12 <HAL_SPI_Transmit>

	// Latch enable
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <LS_LED_Send+0x4c>)
 80010ea:	f002 fd5b 	bl	8003ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <LS_LED_Send+0x4c>)
 80010f6:	f002 fd55 	bl	8003ba4 <HAL_GPIO_WritePin>

	//Output enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80010fa:	2201      	movs	r2, #1
 80010fc:	2104      	movs	r1, #4
 80010fe:	4807      	ldr	r0, [pc, #28]	; (800111c <LS_LED_Send+0x50>)
 8001100:	f002 fd50 	bl	8003ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2104      	movs	r1, #4
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <LS_LED_Send+0x50>)
 800110a:	f002 fd4b 	bl	8003ba4 <HAL_GPIO_WritePin>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40020800 	.word	0x40020800
 800111c:	40020c00 	.word	0x40020c00

08001120 <LS_INF_Send>:

void LS_INF_Send(SPI_HandleTypeDef *hspi, uint8_t *infs_on)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, infs_on, 4, 100);
 800112a:	2364      	movs	r3, #100	; 0x64
 800112c:	2204      	movs	r2, #4
 800112e:	6839      	ldr	r1, [r7, #0]
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f003 fd6e 	bl	8004c12 <HAL_SPI_Transmit>

	// Inf Latch enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <LS_INF_Send+0x50>)
 800113e:	f002 fd31 	bl	8003ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001148:	4809      	ldr	r0, [pc, #36]	; (8001170 <LS_INF_Send+0x50>)
 800114a:	f002 fd2b 	bl	8003ba4 <HAL_GPIO_WritePin>

	// Inf Output enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001154:	4806      	ldr	r0, [pc, #24]	; (8001170 <LS_INF_Send+0x50>)
 8001156:	f002 fd25 	bl	8003ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <LS_INF_Send+0x50>)
 8001162:	f002 fd1f 	bl	8003ba4 <HAL_GPIO_WritePin>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40020000 	.word	0x40020000

08001174 <LS_ADC_ChipSelect>:
			  HAL_Delay(100);
		  }
}

void LS_ADC_ChipSelect(int CS)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	switch(CS) {
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	2b03      	cmp	r3, #3
 8001182:	d827      	bhi.n	80011d4 <LS_ADC_ChipSelect+0x60>
 8001184:	a201      	add	r2, pc, #4	; (adr r2, 800118c <LS_ADC_ChipSelect+0x18>)
 8001186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118a:	bf00      	nop
 800118c:	0800119d 	.word	0x0800119d
 8001190:	080011ab 	.word	0x080011ab
 8001194:	080011b9 	.word	0x080011b9
 8001198:	080011c7 	.word	0x080011c7
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a2:	481b      	ldr	r0, [pc, #108]	; (8001210 <LS_ADC_ChipSelect+0x9c>)
 80011a4:	f002 fcfe 	bl	8003ba4 <HAL_GPIO_WritePin>
		break;
 80011a8:	e02d      	b.n	8001206 <LS_ADC_ChipSelect+0x92>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011b0:	4818      	ldr	r0, [pc, #96]	; (8001214 <LS_ADC_ChipSelect+0xa0>)
 80011b2:	f002 fcf7 	bl	8003ba4 <HAL_GPIO_WritePin>
		break;
 80011b6:	e026      	b.n	8001206 <LS_ADC_ChipSelect+0x92>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011be:	4815      	ldr	r0, [pc, #84]	; (8001214 <LS_ADC_ChipSelect+0xa0>)
 80011c0:	f002 fcf0 	bl	8003ba4 <HAL_GPIO_WritePin>
		break;
 80011c4:	e01f      	b.n	8001206 <LS_ADC_ChipSelect+0x92>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011cc:	4811      	ldr	r0, [pc, #68]	; (8001214 <LS_ADC_ChipSelect+0xa0>)
 80011ce:	f002 fce9 	bl	8003ba4 <HAL_GPIO_WritePin>
		break;
 80011d2:	e018      	b.n	8001206 <LS_ADC_ChipSelect+0x92>
	default:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <LS_ADC_ChipSelect+0x9c>)
 80011dc:	f002 fce2 	bl	8003ba4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e6:	480b      	ldr	r0, [pc, #44]	; (8001214 <LS_ADC_ChipSelect+0xa0>)
 80011e8:	f002 fcdc 	bl	8003ba4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011f2:	4808      	ldr	r0, [pc, #32]	; (8001214 <LS_ADC_ChipSelect+0xa0>)
 80011f4:	f002 fcd6 	bl	8003ba4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <LS_ADC_ChipSelect+0xa0>)
 8001200:	f002 fcd0 	bl	8003ba4 <HAL_GPIO_WritePin>
	}
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40020800 	.word	0x40020800
 8001214:	40020400 	.word	0x40020400

08001218 <LS_Holavonal_favago>:
	sum -= 32*250;
	line = (double)weighted_sum/sum;
	return line;
}

float LS_Holavonal_favago(uint16_t *ADC_values, int* summ, int* MA_sum){
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
    int m = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
    int sum = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
    float alpha = 0.1;
 800122c:	4b2e      	ldr	r3, [pc, #184]	; (80012e8 <LS_Holavonal_favago+0xd0>)
 800122e:	613b      	str	r3, [r7, #16]
    *summ = 0;
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
    for(int i=0; i<32; i++){
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	e01c      	b.n	8001276 <LS_Holavonal_favago+0x5e>
        if (ADC_values[i] > 2500){
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	4413      	add	r3, r2
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800124a:	4293      	cmp	r3, r2
 800124c:	d910      	bls.n	8001270 <LS_Holavonal_favago+0x58>
        	*summ += ADC_values[i];
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	0052      	lsls	r2, r2, #1
 8001256:	68f9      	ldr	r1, [r7, #12]
 8001258:	440a      	add	r2, r1
 800125a:	8812      	ldrh	r2, [r2, #0]
 800125c:	441a      	add	r2, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	601a      	str	r2, [r3, #0]
            sum += i;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	4413      	add	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
            m++;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3301      	adds	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<32; i++){
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3301      	adds	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2b1f      	cmp	r3, #31
 800127a:	dddf      	ble.n	800123c <LS_Holavonal_favago+0x24>
        }
    }
    *MA_sum = alpha * *summ + (1-alpha) * *MA_sum;
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001288:	edd7 7a04 	vldr	s15, [r7, #16]
 800128c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001294:	edd7 7a04 	vldr	s15, [r7, #16]
 8001298:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	ee07 3a90 	vmov	s15, r3
 80012a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b4:	ee17 2a90 	vmov	r2, s15
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	601a      	str	r2, [r3, #0]
    if(m == 0)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <LS_Holavonal_favago+0xb0>
        return 0;
 80012c2:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80012ec <LS_Holavonal_favago+0xd4>
 80012c6:	e007      	b.n	80012d8 <LS_Holavonal_favago+0xc0>
    return sum/m;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	3724      	adds	r7, #36	; 0x24
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	3dcccccd 	.word	0x3dcccccd
 80012ec:	00000000 	.word	0x00000000

080012f0 <LineSensor_FrontAndBack>:
	}
}

void LineSensor_FrontAndBack(UART_HandleTypeDef *huart, SPI_HandleTypeDef *hspi_led, SPI_HandleTypeDef *hspi_sense_front,
		SPI_HandleTypeDef *hspi_sense_rear, uint16_t *ADC_values_front, uint16_t *ADC_values_rear)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b090      	sub	sp, #64	; 0x40
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	603b      	str	r3, [r7, #0]
	uint8_t leds_on[4];// = {1, 1, 1, 1};

	uint8_t ADC_inputs[] = {0, 8, 16, 24, 32, 40, 48, 56};
 80012fe:	4a92      	ldr	r2, [pc, #584]	; (8001548 <LineSensor_FrontAndBack+0x258>)
 8001300:	f107 0318 	add.w	r3, r7, #24
 8001304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001308:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ADC_received_msg[2];

	//LS_INF_Send(&hspi3, leds_off);

	// Turn on first set of LEDs
	leds_on[0] = 1;leds_on[1] = 1;leds_on[2] = 1;leds_on[3] = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	f887 3020 	strb.w	r3, [r7, #32]
 8001312:	2301      	movs	r3, #1
 8001314:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001318:	2301      	movs	r3, #1
 800131a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800131e:	2301      	movs	r3, #1
 8001320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	LS_INF_Send(hspi_led, leds_on);
 8001324:	f107 0320 	add.w	r3, r7, #32
 8001328:	4619      	mov	r1, r3
 800132a:	68b8      	ldr	r0, [r7, #8]
 800132c:	f7ff fef8 	bl	8001120 <LS_INF_Send>
	HAL_Delay(1);
 8001330:	2001      	movs	r0, #1
 8001332:	f001 fefb 	bl	800312c <HAL_Delay>
	// Retrieve data from first set of ADCs - Front
	for (int i=1; i<5; i++)
 8001336:	2301      	movs	r3, #1
 8001338:	637b      	str	r3, [r7, #52]	; 0x34
 800133a:	e02a      	b.n	8001392 <LineSensor_FrontAndBack+0xa2>
	{
	  LS_ADC_ChipSelect(i);
 800133c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800133e:	f7ff ff19 	bl	8001174 <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 8001342:	f107 0214 	add.w	r2, r7, #20
 8001346:	f107 0118 	add.w	r1, r7, #24
 800134a:	2364      	movs	r3, #100	; 0x64
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2302      	movs	r3, #2
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f003 fd9a 	bl	8004e8a <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 8001356:	f107 0214 	add.w	r2, r7, #20
 800135a:	f107 0118 	add.w	r1, r7, #24
 800135e:	2364      	movs	r3, #100	; 0x64
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2302      	movs	r3, #2
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f003 fd90 	bl	8004e8a <HAL_SPI_TransmitReceive>
	  ADC_values_front[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 800136a:	7d7b      	ldrb	r3, [r7, #21]
 800136c:	b21a      	sxth	r2, r3
 800136e:	7d3b      	ldrb	r3, [r7, #20]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b219      	sxth	r1, r3
 8001378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137a:	3b01      	subs	r3, #1
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001380:	4413      	add	r3, r2
 8001382:	b28a      	uxth	r2, r1
 8001384:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff fef4 	bl	8001174 <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 800138c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800138e:	3301      	adds	r3, #1
 8001390:	637b      	str	r3, [r7, #52]	; 0x34
 8001392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001394:	2b04      	cmp	r3, #4
 8001396:	ddd1      	ble.n	800133c <LineSensor_FrontAndBack+0x4c>
	}
	// Ez működjön, aztán lehet optimalizálni, hogy egy loopon belül kérjük be az adatokat mindettőtől
	// Retrieve data from first set of ADCs - Rear
	for (int i=1; i<5; i++)
 8001398:	2301      	movs	r3, #1
 800139a:	633b      	str	r3, [r7, #48]	; 0x30
 800139c:	e02a      	b.n	80013f4 <LineSensor_FrontAndBack+0x104>
	{
	  LS_ADC_ChipSelect(i);
 800139e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013a0:	f7ff fee8 	bl	8001174 <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013a4:	f107 0214 	add.w	r2, r7, #20
 80013a8:	f107 0118 	add.w	r1, r7, #24
 80013ac:	2364      	movs	r3, #100	; 0x64
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2302      	movs	r3, #2
 80013b2:	6838      	ldr	r0, [r7, #0]
 80013b4:	f003 fd69 	bl	8004e8a <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013b8:	f107 0214 	add.w	r2, r7, #20
 80013bc:	f107 0118 	add.w	r1, r7, #24
 80013c0:	2364      	movs	r3, #100	; 0x64
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	2302      	movs	r3, #2
 80013c6:	6838      	ldr	r0, [r7, #0]
 80013c8:	f003 fd5f 	bl	8004e8a <HAL_SPI_TransmitReceive>
	  ADC_values_rear[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80013cc:	7d7b      	ldrb	r3, [r7, #21]
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	7d3b      	ldrb	r3, [r7, #20]
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	4313      	orrs	r3, r2
 80013d8:	b219      	sxth	r1, r3
 80013da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013dc:	3b01      	subs	r3, #1
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013e2:	4413      	add	r3, r2
 80013e4:	b28a      	uxth	r2, r1
 80013e6:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f7ff fec3 	bl	8001174 <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 80013ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f0:	3301      	adds	r3, #1
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
 80013f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	ddd1      	ble.n	800139e <LineSensor_FrontAndBack+0xae>
	}

	// Shift the LEDs by one
	for (int k=0; k<7; k++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013fe:	e099      	b.n	8001534 <LineSensor_FrontAndBack+0x244>
	{
	  leds_on[0] <<= 1;
 8001400:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f887 3020 	strb.w	r3, [r7, #32]
	  leds_on[1] <<= 1;
 800140c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  leds_on[2] <<= 1;
 8001418:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  leds_on[3] <<= 1;
 8001424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  LS_INF_Send(hspi_led, leds_on);
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4619      	mov	r1, r3
 8001436:	68b8      	ldr	r0, [r7, #8]
 8001438:	f7ff fe72 	bl	8001120 <LS_INF_Send>
	  HAL_Delay(1);
 800143c:	2001      	movs	r0, #1
 800143e:	f001 fe75 	bl	800312c <HAL_Delay>

	  //Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 8001442:	2301      	movs	r3, #1
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
 8001446:	e034      	b.n	80014b2 <LineSensor_FrontAndBack+0x1c2>
	  {
		  LS_ADC_ChipSelect(i);
 8001448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800144a:	f7ff fe93 	bl	8001174 <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 800144e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001450:	3301      	adds	r3, #1
 8001452:	f107 0218 	add.w	r2, r7, #24
 8001456:	18d1      	adds	r1, r2, r3
 8001458:	f107 0214 	add.w	r2, r7, #20
 800145c:	2364      	movs	r3, #100	; 0x64
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2302      	movs	r3, #2
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f003 fd11 	bl	8004e8a <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 8001468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146a:	3301      	adds	r3, #1
 800146c:	f107 0218 	add.w	r2, r7, #24
 8001470:	18d1      	adds	r1, r2, r3
 8001472:	f107 0214 	add.w	r2, r7, #20
 8001476:	2364      	movs	r3, #100	; 0x64
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2302      	movs	r3, #2
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f003 fd04 	bl	8004e8a <HAL_SPI_TransmitReceive>
		  ADC_values_front[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001482:	7d7b      	ldrb	r3, [r7, #21]
 8001484:	b21a      	sxth	r2, r3
 8001486:	7d3b      	ldrb	r3, [r7, #20]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b219      	sxth	r1, r3
 8001490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001492:	3b01      	subs	r3, #1
 8001494:	00da      	lsls	r2, r3, #3
 8001496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001498:	4413      	add	r3, r2
 800149a:	3301      	adds	r3, #1
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014a0:	4413      	add	r3, r2
 80014a2:	b28a      	uxth	r2, r1
 80014a4:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f7ff fe64 	bl	8001174 <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	3301      	adds	r3, #1
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80014b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	ddc7      	ble.n	8001448 <LineSensor_FrontAndBack+0x158>
	  }

	  // Szintén lehet optimalizálni
	  // Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 80014b8:	2301      	movs	r3, #1
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
 80014bc:	e034      	b.n	8001528 <LineSensor_FrontAndBack+0x238>
	  {
		  LS_ADC_ChipSelect(i);
 80014be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014c0:	f7ff fe58 	bl	8001174 <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 80014c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c6:	3301      	adds	r3, #1
 80014c8:	f107 0218 	add.w	r2, r7, #24
 80014cc:	18d1      	adds	r1, r2, r3
 80014ce:	f107 0214 	add.w	r2, r7, #20
 80014d2:	2364      	movs	r3, #100	; 0x64
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2302      	movs	r3, #2
 80014d8:	6838      	ldr	r0, [r7, #0]
 80014da:	f003 fcd6 	bl	8004e8a <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 80014de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e0:	3301      	adds	r3, #1
 80014e2:	f107 0218 	add.w	r2, r7, #24
 80014e6:	18d1      	adds	r1, r2, r3
 80014e8:	f107 0214 	add.w	r2, r7, #20
 80014ec:	2364      	movs	r3, #100	; 0x64
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2302      	movs	r3, #2
 80014f2:	6838      	ldr	r0, [r7, #0]
 80014f4:	f003 fcc9 	bl	8004e8a <HAL_SPI_TransmitReceive>
		  ADC_values_rear[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80014f8:	7d7b      	ldrb	r3, [r7, #21]
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	7d3b      	ldrb	r3, [r7, #20]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b219      	sxth	r1, r3
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	3b01      	subs	r3, #1
 800150a:	00da      	lsls	r2, r3, #3
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	4413      	add	r3, r2
 8001510:	3301      	adds	r3, #1
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001516:	4413      	add	r3, r2
 8001518:	b28a      	uxth	r2, r1
 800151a:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff fe29 	bl	8001174 <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	3301      	adds	r3, #1
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	2b04      	cmp	r3, #4
 800152c:	ddc7      	ble.n	80014be <LineSensor_FrontAndBack+0x1ce>
	for (int k=0; k<7; k++)
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	3301      	adds	r3, #1
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	2b06      	cmp	r3, #6
 8001538:	f77f af62 	ble.w	8001400 <LineSensor_FrontAndBack+0x110>
//			line_pos[0] = ADC_values_rear[i];
//	}

//	unsigned char BT_send_msg_buff[200];
//	LS_BT_SendData(huart, BT_send_msg_buff, ADC_values_rear);
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3738      	adds	r7, #56	; 0x38
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	0800b398 	.word	0x0800b398

0800154c <LS_feedback_all>:

void LS_feedback_all(SPI_HandleTypeDef *hspi_led, uint16_t *ADC_values)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
 8001556:	4a1c      	ldr	r2, [pc, #112]	; (80015c8 <LS_feedback_all+0x7c>)
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001560:	6018      	str	r0, [r3, #0]
 8001562:	3304      	adds	r3, #4
 8001564:	7019      	strb	r1, [r3, #0]
	uint8_t leds_off[4] = {0};
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
	int j = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 800156e:	2300      	movs	r3, #0
 8001570:	61bb      	str	r3, [r7, #24]
 8001572:	e016      	b.n	80015a2 <LS_feedback_all+0x56>
			if (ADC_values[i]>2500){
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	4413      	add	r3, r2
 800157c:	881b      	ldrh	r3, [r3, #0]
 800157e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001582:	4293      	cmp	r3, r2
 8001584:	d90a      	bls.n	800159c <LS_feedback_all+0x50>
				fb_leds_to_light[j] = i;
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	b2d9      	uxtb	r1, r3
 800158a:	f107 0210 	add.w	r2, r7, #16
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	4413      	add	r3, r2
 8001592:	460a      	mov	r2, r1
 8001594:	701a      	strb	r2, [r3, #0]
				j++;
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	3301      	adds	r3, #1
 80015a0:	61bb      	str	r3, [r7, #24]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b1f      	cmp	r3, #31
 80015a6:	dde5      	ble.n	8001574 <LS_feedback_all+0x28>
			}
		}

	LS_LED_Send(hspi_led, leds_off);
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fd8c 	bl	80010cc <LS_LED_Send>
	LS_LED_Light(hspi_led, fb_leds_to_light);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff fce6 	bl	8000f8c <LS_LED_Light>
}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	0800b3a0 	.word	0x0800b3a0
 80015cc:	00000000 	.word	0x00000000

080015d0 <LS_delta_angle>:
	}
	LS_LED_Send(hspi_led, leds_off);
	LS_LED_Light(hspi_led, fb_leds_to_light);
}

float LS_delta_angle(float p1, float p2){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80015da:	edc7 0a00 	vstr	s1, [r7]
    float delta = atan((p2-(31-p1))*6.5/460);
 80015de:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80015e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ea:	ed97 7a00 	vldr	s14, [r7]
 80015ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015f2:	ee17 0a90 	vmov	r0, s15
 80015f6:	f7fe ffc7 	bl	8000588 <__aeabi_f2d>
 80015fa:	f04f 0200 	mov.w	r2, #0
 80015fe:	4b16      	ldr	r3, [pc, #88]	; (8001658 <LS_delta_angle+0x88>)
 8001600:	f7ff f81a 	bl	8000638 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	a310      	add	r3, pc, #64	; (adr r3, 8001650 <LS_delta_angle+0x80>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7ff f93b 	bl	800088c <__aeabi_ddiv>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	ec43 2b17 	vmov	d7, r2, r3
 800161e:	eeb0 0a47 	vmov.f32	s0, s14
 8001622:	eef0 0a67 	vmov.f32	s1, s15
 8001626:	f008 fc07 	bl	8009e38 <atan>
 800162a:	ec53 2b10 	vmov	r2, r3, d0
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fad9 	bl	8000be8 <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	60fb      	str	r3, [r7, #12]
    return delta;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	ee07 3a90 	vmov	s15, r3
}
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	f3af 8000 	nop.w
 8001650:	00000000 	.word	0x00000000
 8001654:	407cc000 	.word	0x407cc000
 8001658:	401a0000 	.word	0x401a0000
 800165c:	00000000 	.word	0x00000000

08001660 <LS_p>:



float LS_p(float f1){
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	ed87 0a01 	vstr	s0, [r7, #4]
    float p = (15.5-f1)*0.0065;//m-ben adja vissza a p-t
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe ff8c 	bl	8000588 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	f04f 0000 	mov.w	r0, #0
 8001678:	490f      	ldr	r1, [pc, #60]	; (80016b8 <LS_p+0x58>)
 800167a:	f7fe fe25 	bl	80002c8 <__aeabi_dsub>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	a30a      	add	r3, pc, #40	; (adr r3, 80016b0 <LS_p+0x50>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ffd4 	bl	8000638 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7ff faa6 	bl	8000be8 <__aeabi_d2f>
 800169c:	4603      	mov	r3, r0
 800169e:	60fb      	str	r3, [r7, #12]
    return p;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	ee07 3a90 	vmov	s15, r3
}
 80016a6:	eeb0 0a67 	vmov.f32	s0, s15
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	76c8b439 	.word	0x76c8b439
 80016b4:	3f7a9fbe 	.word	0x3f7a9fbe
 80016b8:	402f0000 	.word	0x402f0000

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0a8      	sub	sp, #160	; 0xa0
 80016c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c2:	f001 fcc1 	bl	8003048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c6:	f000 f8dd 	bl	8001884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ca:	f000 fda7 	bl	800221c <MX_GPIO_Init>
  MX_I2C1_Init();
 80016ce:	f000 f99d 	bl	8001a0c <MX_I2C1_Init>
  MX_I2C3_Init();
 80016d2:	f000 f9f7 	bl	8001ac4 <MX_I2C3_Init>
  MX_SPI1_Init();
 80016d6:	f000 fa23 	bl	8001b20 <MX_SPI1_Init>
  MX_SPI2_Init();
 80016da:	f000 fa57 	bl	8001b8c <MX_SPI2_Init>
  MX_SPI3_Init();
 80016de:	f000 fa8b 	bl	8001bf8 <MX_SPI3_Init>
  MX_ADC1_Init();
 80016e2:	f000 f941 	bl	8001968 <MX_ADC1_Init>
  MX_TIM2_Init();
 80016e6:	f000 fabf 	bl	8001c68 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016ea:	f000 fb3d 	bl	8001d68 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016ee:	f000 fbb5 	bl	8001e5c <MX_TIM4_Init>
  MX_TIM13_Init();
 80016f2:	f000 fcf1 	bl	80020d8 <MX_TIM13_Init>
  MX_TIM5_Init();
 80016f6:	f000 fc43 	bl	8001f80 <MX_TIM5_Init>
  MX_I2C2_Init();
 80016fa:	f000 f9b5 	bl	8001a68 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80016fe:	f000 fd39 	bl	8002174 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001702:	f000 fd61 	bl	80021c8 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8001706:	f000 fcb1 	bl	800206c <MX_TIM7_Init>
//  HAL_Delay(2); // 2ms reset time
//  HAL_GPIO_WritePin(XSHUT1_GPIO_Port, XSHUT1_Pin, GPIO_PIN_RESET);
//  HAL_Delay(2); // 2ms reset time
//
  // set ToF1
  HAL_GPIO_WritePin(ToF_XSDN_36_GPIO_Port, ToF_XSDN_36_Pin, GPIO_PIN_SET);
 800170a:	2201      	movs	r2, #1
 800170c:	2101      	movs	r1, #1
 800170e:	484d      	ldr	r0, [pc, #308]	; (8001844 <main+0x188>)
 8001710:	f002 fa48 	bl	8003ba4 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8001714:	2002      	movs	r0, #2
 8001716:	f001 fd09 	bl	800312c <HAL_Delay>

  //unsigned char ADC_value_string[10];
  //uint8_t leds_on[4];// = {1, 1, 1, 1};
  //uint8_t fb_leds_on[4] = {0};
  //uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
  uint16_t ADC_values_front[32] = {0};
 800171a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800171e:	2240      	movs	r2, #64	; 0x40
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f005 fe76 	bl	8007414 <memset>
  uint16_t ADC_values_rear[32] = {0};
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	2240      	movs	r2, #64	; 0x40
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f005 fe6f 	bl	8007414 <memset>
  int pwm_val;
//  enum circuit_section circuit_Section;
//  circuit_Section = Fast_section;
  //LS_INF_Send(&hspi3, leds_off);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Dead man switch PWM input
 8001736:	2100      	movs	r1, #0
 8001738:	4843      	ldr	r0, [pc, #268]	; (8001848 <main+0x18c>)
 800173a:	f004 f921 	bl	8005980 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);    // Dead man switch PWM input
 800173e:	2104      	movs	r1, #4
 8001740:	4841      	ldr	r0, [pc, #260]	; (8001848 <main+0x18c>)
 8001742:	f004 f841 	bl	80057c8 <HAL_TIM_IC_Start>

  // kb. 3 másodpercenkétn előidéz egy interruptot
//  HAL_TIM_Base_Start_IT(&htim7);

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001746:	2100      	movs	r1, #0
 8001748:	4840      	ldr	r0, [pc, #256]	; (800184c <main+0x190>)
 800174a:	f003 ff25 	bl	8005598 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800174e:	2104      	movs	r1, #4
 8001750:	483f      	ldr	r0, [pc, #252]	; (8001850 <main+0x194>)
 8001752:	f003 ff21 	bl	8005598 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001756:	2100      	movs	r1, #0
 8001758:	483e      	ldr	r0, [pc, #248]	; (8001854 <main+0x198>)
 800175a:	f003 ff1d 	bl	8005598 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <main+0x19c>)
 800176c:	4a3b      	ldr	r2, [pc, #236]	; (800185c <main+0x1a0>)
 800176e:	493c      	ldr	r1, [pc, #240]	; (8001860 <main+0x1a4>)
 8001770:	483c      	ldr	r0, [pc, #240]	; (8001864 <main+0x1a8>)
 8001772:	f7ff fdbd 	bl	80012f0 <LineSensor_FrontAndBack>
	  line_pos[0] = LS_Holavonal_favago(ADC_values_front, &summ, &MA_sum_front);
 8001776:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800177a:	4a3b      	ldr	r2, [pc, #236]	; (8001868 <main+0x1ac>)
 800177c:	493b      	ldr	r1, [pc, #236]	; (800186c <main+0x1b0>)
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fd4a 	bl	8001218 <LS_Holavonal_favago>
 8001784:	eef0 7a40 	vmov.f32	s15, s0
 8001788:	edc7 7a00 	vstr	s15, [r7]
	  line_pos[1] = LS_Holavonal_favago(ADC_values_rear, &summ2, &MA_sum_rear);
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4a37      	ldr	r2, [pc, #220]	; (8001870 <main+0x1b4>)
 8001792:	4938      	ldr	r1, [pc, #224]	; (8001874 <main+0x1b8>)
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fd3f 	bl	8001218 <LS_Holavonal_favago>
 800179a:	eef0 7a40 	vmov.f32	s15, s0
 800179e:	edc7 7a01 	vstr	s15, [r7, #4]
	  LS_feedback_all(&hspi3, ADC_values_front);
 80017a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017a6:	4619      	mov	r1, r3
 80017a8:	482d      	ldr	r0, [pc, #180]	; (8001860 <main+0x1a4>)
 80017aa:	f7ff fecf 	bl	800154c <LS_feedback_all>
//	  //LS_feedback_led(&hspi3, line_pos, feedback_rear);

	  delta = LS_delta_angle(line_pos[0], line_pos[1]);
 80017ae:	edd7 7a00 	vldr	s15, [r7]
 80017b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80017b6:	eef0 0a47 	vmov.f32	s1, s14
 80017ba:	eeb0 0a67 	vmov.f32	s0, s15
 80017be:	f7ff ff07 	bl	80015d0 <LS_delta_angle>
 80017c2:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	  p = LS_p(line_pos[0]);
 80017c6:	edd7 7a00 	vldr	s15, [r7]
 80017ca:	eeb0 0a67 	vmov.f32	s0, s15
 80017ce:	f7ff ff47 	bl	8001660 <LS_p>
 80017d2:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
	  str_angle = SteeringAngle(p, delta);
 80017d6:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 80017da:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 80017de:	f000 fef3 	bl	80025c8 <SteeringAngle>
 80017e2:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c

	  pwm_val = MotorDrive(&htim4, duty_motor);
 80017e6:	4b24      	ldr	r3, [pc, #144]	; (8001878 <main+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4619      	mov	r1, r3
 80017ec:	4819      	ldr	r0, [pc, #100]	; (8001854 <main+0x198>)
 80017ee:	f000 fe6c 	bl	80024ca <MotorDrive>
 80017f2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	  ServoPosition(&htim5, str_angle);
 80017f6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80017fa:	f7fe fec5 	bl	8000588 <__aeabi_f2d>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	ec43 2b10 	vmov	d0, r2, r3
 8001806:	4811      	ldr	r0, [pc, #68]	; (800184c <main+0x190>)
 8001808:	f000 fe7a 	bl	8002500 <ServoPosition>
	  if(duty_MA>9.5){
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <main+0x1c0>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 8001816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181e:	dd06      	ble.n	800182e <main+0x172>
		  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001826:	4816      	ldr	r0, [pc, #88]	; (8001880 <main+0x1c4>)
 8001828:	f002 f9bc 	bl	8003ba4 <HAL_GPIO_WritePin>
 800182c:	e005      	b.n	800183a <main+0x17e>
		  }
	  else
		  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001834:	4812      	ldr	r0, [pc, #72]	; (8001880 <main+0x1c4>)
 8001836:	f002 f9b5 	bl	8003ba4 <HAL_GPIO_WritePin>
	  //sprintf((char*)BT_send_msg_buff, "Duty MA: %f\n\r", duty_MA);
	  //BT_TransmitMsg(&huart2, BT_send_msg_buff);
	  HAL_Delay(1);
 800183a:	2001      	movs	r0, #1
 800183c:	f001 fc76 	bl	800312c <HAL_Delay>
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 8001840:	e78d      	b.n	800175e <main+0xa2>
 8001842:	bf00      	nop
 8001844:	40020400 	.word	0x40020400
 8001848:	2000044c 	.word	0x2000044c
 800184c:	20000524 	.word	0x20000524
 8001850:	20000494 	.word	0x20000494
 8001854:	200004dc 	.word	0x200004dc
 8001858:	2000039c 	.word	0x2000039c
 800185c:	20000344 	.word	0x20000344
 8001860:	200003f4 	.word	0x200003f4
 8001864:	200005fc 	.word	0x200005fc
 8001868:	20000684 	.word	0x20000684
 800186c:	2000068c 	.word	0x2000068c
 8001870:	20000688 	.word	0x20000688
 8001874:	20000690 	.word	0x20000690
 8001878:	20000004 	.word	0x20000004
 800187c:	200006a4 	.word	0x200006a4
 8001880:	40020000 	.word	0x40020000

08001884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b094      	sub	sp, #80	; 0x50
 8001888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	2234      	movs	r2, #52	; 0x34
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f005 fdbe 	bl	8007414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <SystemClock_Config+0xdc>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	4a2b      	ldr	r2, [pc, #172]	; (8001960 <SystemClock_Config+0xdc>)
 80018b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b6:	6413      	str	r3, [r2, #64]	; 0x40
 80018b8:	4b29      	ldr	r3, [pc, #164]	; (8001960 <SystemClock_Config+0xdc>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018c4:	2300      	movs	r3, #0
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	4b26      	ldr	r3, [pc, #152]	; (8001964 <SystemClock_Config+0xe0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a25      	ldr	r2, [pc, #148]	; (8001964 <SystemClock_Config+0xe0>)
 80018ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b23      	ldr	r3, [pc, #140]	; (8001964 <SystemClock_Config+0xe0>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018e0:	2301      	movs	r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ea:	2302      	movs	r3, #2
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018f4:	2304      	movs	r3, #4
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018f8:	23b4      	movs	r3, #180	; 0xb4
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018fc:	2302      	movs	r3, #2
 80018fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001900:	2302      	movs	r3, #2
 8001902:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001904:	2302      	movs	r3, #2
 8001906:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4618      	mov	r0, r3
 800190e:	f002 fe59 	bl	80045c4 <HAL_RCC_OscConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001918:	f000 fdd2 	bl	80024c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800191c:	f002 fab8 	bl	8003e90 <HAL_PWREx_EnableOverDrive>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001926:	f000 fdcb 	bl	80024c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192a:	230f      	movs	r3, #15
 800192c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192e:	2302      	movs	r3, #2
 8001930:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001936:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800193a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001942:	f107 0308 	add.w	r3, r7, #8
 8001946:	2105      	movs	r1, #5
 8001948:	4618      	mov	r0, r3
 800194a:	f002 faf1 	bl	8003f30 <HAL_RCC_ClockConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001954:	f000 fdb4 	bl	80024c0 <Error_Handler>
  }
}
 8001958:	bf00      	nop
 800195a:	3750      	adds	r7, #80	; 0x50
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	40007000 	.word	0x40007000

08001968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800196e:	463b      	mov	r3, r7
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <MX_ADC1_Init+0x98>)
 800197c:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <MX_ADC1_Init+0x9c>)
 800197e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <MX_ADC1_Init+0x98>)
 8001982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001986:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <MX_ADC1_Init+0x98>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <MX_ADC1_Init+0x98>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_ADC1_Init+0x98>)
 8001996:	2200      	movs	r2, #0
 8001998:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800199a:	4b19      	ldr	r3, [pc, #100]	; (8001a00 <MX_ADC1_Init+0x98>)
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019a2:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <MX_ADC1_Init+0x98>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019a8:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <MX_ADC1_Init+0x98>)
 80019aa:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <MX_ADC1_Init+0xa0>)
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ae:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <MX_ADC1_Init+0x98>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <MX_ADC1_Init+0x98>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019ba:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <MX_ADC1_Init+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <MX_ADC1_Init+0x98>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <MX_ADC1_Init+0x98>)
 80019ca:	f001 fbd3 	bl	8003174 <HAL_ADC_Init>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80019d4:	f000 fd74 	bl	80024c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019d8:	2301      	movs	r3, #1
 80019da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019dc:	2301      	movs	r3, #1
 80019de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e4:	463b      	mov	r3, r7
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_ADC1_Init+0x98>)
 80019ea:	f001 fc07 	bl	80031fc <HAL_ADC_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80019f4:	f000 fd64 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000200 	.word	0x20000200
 8001a04:	40012000 	.word	0x40012000
 8001a08:	0f000001 	.word	0x0f000001

08001a0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a12:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <MX_I2C1_Init+0x54>)
 8001a14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a18:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <MX_I2C1_Init+0x58>)
 8001a1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a48:	4804      	ldr	r0, [pc, #16]	; (8001a5c <MX_I2C1_Init+0x50>)
 8001a4a:	f002 f8dd 	bl	8003c08 <HAL_I2C_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a54:	f000 fd34 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000248 	.word	0x20000248
 8001a60:	40005400 	.word	0x40005400
 8001a64:	000186a0 	.word	0x000186a0

08001a68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <MX_I2C2_Init+0x50>)
 8001a6e:	4a13      	ldr	r2, [pc, #76]	; (8001abc <MX_I2C2_Init+0x54>)
 8001a70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_I2C2_Init+0x50>)
 8001a74:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <MX_I2C2_Init+0x58>)
 8001a76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_I2C2_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_I2C2_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_I2C2_Init+0x50>)
 8001a86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <MX_I2C2_Init+0x50>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_I2C2_Init+0x50>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <MX_I2C2_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_I2C2_Init+0x50>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <MX_I2C2_Init+0x50>)
 8001aa6:	f002 f8af 	bl	8003c08 <HAL_I2C_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ab0:	f000 fd06 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000029c 	.word	0x2000029c
 8001abc:	40005800 	.word	0x40005800
 8001ac0:	000186a0 	.word	0x000186a0

08001ac4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <MX_I2C3_Init+0x50>)
 8001aca:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <MX_I2C3_Init+0x54>)
 8001acc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <MX_I2C3_Init+0x50>)
 8001ad0:	4a12      	ldr	r2, [pc, #72]	; (8001b1c <MX_I2C3_Init+0x58>)
 8001ad2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <MX_I2C3_Init+0x50>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <MX_I2C3_Init+0x50>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <MX_I2C3_Init+0x50>)
 8001ae2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ae6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <MX_I2C3_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <MX_I2C3_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <MX_I2C3_Init+0x50>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <MX_I2C3_Init+0x50>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	; (8001b14 <MX_I2C3_Init+0x50>)
 8001b02:	f002 f881 	bl	8003c08 <HAL_I2C_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b0c:	f000 fcd8 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200002f0 	.word	0x200002f0
 8001b18:	40005c00 	.word	0x40005c00
 8001b1c:	000186a0 	.word	0x000186a0

08001b20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b26:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <MX_SPI1_Init+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001b52:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b54:	2228      	movs	r2, #40	; 0x28
 8001b56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b58:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b6c:	220a      	movs	r2, #10
 8001b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_SPI1_Init+0x64>)
 8001b72:	f002 ffc5 	bl	8004b00 <HAL_SPI_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001b7c:	f000 fca0 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000344 	.word	0x20000344
 8001b88:	40013000 	.word	0x40013000

08001b8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001b92:	4a18      	ldr	r2, [pc, #96]	; (8001bf4 <MX_SPI2_Init+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001b98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001bd8:	220a      	movs	r2, #10
 8001bda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bdc:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <MX_SPI2_Init+0x64>)
 8001bde:	f002 ff8f 	bl	8004b00 <HAL_SPI_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001be8:	f000 fc6a 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	2000039c 	.word	0x2000039c
 8001bf4:	40003800 	.word	0x40003800

08001bf8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001bfc:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001bfe:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <MX_SPI3_Init+0x6c>)
 8001c00:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001c04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c08:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001c0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c10:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001c26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c2a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001c2e:	2210      	movs	r2, #16
 8001c30:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001c46:	220a      	movs	r2, #10
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_SPI3_Init+0x68>)
 8001c4c:	f002 ff58 	bl	8004b00 <HAL_SPI_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001c56:	f000 fc33 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200003f4 	.word	0x200003f4
 8001c64:	40003c00 	.word	0x40003c00

08001c68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	; 0x30
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c7e:	f107 030c 	add.w	r3, r7, #12
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c94:	4b33      	ldr	r3, [pc, #204]	; (8001d64 <MX_TIM2_Init+0xfc>)
 8001c96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8001c9c:	4b31      	ldr	r3, [pc, #196]	; (8001d64 <MX_TIM2_Init+0xfc>)
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <MX_TIM2_Init+0xfc>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ca8:	4b2e      	ldr	r3, [pc, #184]	; (8001d64 <MX_TIM2_Init+0xfc>)
 8001caa:	f04f 32ff 	mov.w	r2, #4294967295
 8001cae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <MX_TIM2_Init+0xfc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb6:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <MX_TIM2_Init+0xfc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001cbc:	4829      	ldr	r0, [pc, #164]	; (8001d64 <MX_TIM2_Init+0xfc>)
 8001cbe:	f003 fd33 	bl	8005728 <HAL_TIM_IC_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001cc8:	f000 fbfa 	bl	80024c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001cd0:	2350      	movs	r3, #80	; 0x50
 8001cd2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481f      	ldr	r0, [pc, #124]	; (8001d64 <MX_TIM2_Init+0xfc>)
 8001ce8:	f004 fa9f 	bl	800622a <HAL_TIM_SlaveConfigSynchro>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cf2:	f000 fbe5 	bl	80024c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d06:	f107 030c 	add.w	r3, r7, #12
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4815      	ldr	r0, [pc, #84]	; (8001d64 <MX_TIM2_Init+0xfc>)
 8001d10:	f004 f866 	bl	8005de0 <HAL_TIM_IC_ConfigChannel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001d1a:	f000 fbd1 	bl	80024c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001d22:	2302      	movs	r3, #2
 8001d24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480d      	ldr	r0, [pc, #52]	; (8001d64 <MX_TIM2_Init+0xfc>)
 8001d30:	f004 f856 	bl	8005de0 <HAL_TIM_IC_ConfigChannel>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001d3a:	f000 fbc1 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4806      	ldr	r0, [pc, #24]	; (8001d64 <MX_TIM2_Init+0xfc>)
 8001d4c:	f004 ffde 	bl	8006d0c <HAL_TIMEx_MasterConfigSynchronization>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001d56:	f000 fbb3 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	3730      	adds	r7, #48	; 0x30
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000044c 	.word	0x2000044c

08001d68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08e      	sub	sp, #56	; 0x38
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7c:	f107 0320 	add.w	r3, r7, #32
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
 8001d94:	615a      	str	r2, [r3, #20]
 8001d96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001d9a:	4a2f      	ldr	r2, [pc, #188]	; (8001e58 <MX_TIM3_Init+0xf0>)
 8001d9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d9e:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001da6:	2220      	movs	r2, #32
 8001da8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8001daa:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001dac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001db0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db2:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db8:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dbe:	4825      	ldr	r0, [pc, #148]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001dc0:	f003 fad0 	bl	8005364 <HAL_TIM_Base_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dca:	f000 fb79 	bl	80024c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd8:	4619      	mov	r1, r3
 8001dda:	481e      	ldr	r0, [pc, #120]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001ddc:	f004 f95e 	bl	800609c <HAL_TIM_ConfigClockSource>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001de6:	f000 fb6b 	bl	80024c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dea:	481a      	ldr	r0, [pc, #104]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001dec:	f003 fb7a 	bl	80054e4 <HAL_TIM_PWM_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001df6:	f000 fb63 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001dfe:	2380      	movs	r3, #128	; 0x80
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	4619      	mov	r1, r3
 8001e08:	4812      	ldr	r0, [pc, #72]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001e0a:	f004 ff7f 	bl	8006d0c <HAL_TIMEx_MasterConfigSynchronization>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e14:	f000 fb54 	bl	80024c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e18:	2360      	movs	r3, #96	; 0x60
 8001e1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001e1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001e22:	2302      	movs	r3, #2
 8001e24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4808      	ldr	r0, [pc, #32]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001e32:	f004 f871 	bl	8005f18 <HAL_TIM_PWM_ConfigChannel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001e3c:	f000 fb40 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001e40:	4804      	ldr	r0, [pc, #16]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001e42:	f003 fadf 	bl	8005404 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e46:	4803      	ldr	r0, [pc, #12]	; (8001e54 <MX_TIM3_Init+0xec>)
 8001e48:	f000 ff46 	bl	8002cd8 <HAL_TIM_MspPostInit>

}
 8001e4c:	bf00      	nop
 8001e4e:	3738      	adds	r7, #56	; 0x38
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000494 	.word	0x20000494
 8001e58:	40000400 	.word	0x40000400

08001e5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b092      	sub	sp, #72	; 0x48
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8a:	463b      	mov	r3, r7
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
 8001e98:	615a      	str	r2, [r3, #20]
 8001e9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e9c:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001e9e:	4a37      	ldr	r2, [pc, #220]	; (8001f7c <MX_TIM4_Init+0x120>)
 8001ea0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ea2:	4b35      	ldr	r3, [pc, #212]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001ea8:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001eaa:	2240      	movs	r2, #64	; 0x40
 8001eac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001eb0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001eb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ebc:	4b2e      	ldr	r3, [pc, #184]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ec2:	482d      	ldr	r0, [pc, #180]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001ec4:	f003 fa4e 	bl	8005364 <HAL_TIM_Base_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001ece:	f000 faf7 	bl	80024c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ed8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001edc:	4619      	mov	r1, r3
 8001ede:	4826      	ldr	r0, [pc, #152]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001ee0:	f004 f8dc 	bl	800609c <HAL_TIM_ConfigClockSource>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001eea:	f000 fae9 	bl	80024c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001eee:	4822      	ldr	r0, [pc, #136]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001ef0:	f003 faf8 	bl	80054e4 <HAL_TIM_PWM_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001efa:	f000 fae1 	bl	80024c0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001efe:	2306      	movs	r3, #6
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001f02:	2320      	movs	r3, #32
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	481a      	ldr	r0, [pc, #104]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001f0e:	f004 f98c 	bl	800622a <HAL_TIM_SlaveConfigSynchro>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001f18:	f000 fad2 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4813      	ldr	r0, [pc, #76]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001f2c:	f004 feee 	bl	8006d0c <HAL_TIMEx_MasterConfigSynchronization>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001f36:	f000 fac3 	bl	80024c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f3a:	2360      	movs	r3, #96	; 0x60
 8001f3c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001f3e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001f42:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4619      	mov	r1, r3
 8001f52:	4809      	ldr	r0, [pc, #36]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001f54:	f003 ffe0 	bl	8005f18 <HAL_TIM_PWM_ConfigChannel>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8001f5e:	f000 faaf 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001f64:	f003 fa4e 	bl	8005404 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f68:	4803      	ldr	r0, [pc, #12]	; (8001f78 <MX_TIM4_Init+0x11c>)
 8001f6a:	f000 feb5 	bl	8002cd8 <HAL_TIM_MspPostInit>

}
 8001f6e:	bf00      	nop
 8001f70:	3748      	adds	r7, #72	; 0x48
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	200004dc 	.word	0x200004dc
 8001f7c:	40000800 	.word	0x40000800

08001f80 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
 8001fac:	615a      	str	r2, [r3, #20]
 8001fae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <MX_TIM5_Init+0xe4>)
 8001fb2:	4a2d      	ldr	r2, [pc, #180]	; (8002068 <MX_TIM5_Init+0xe8>)
 8001fb4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 30-1;
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	; (8002064 <MX_TIM5_Init+0xe4>)
 8001fb8:	221d      	movs	r2, #29
 8001fba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbc:	4b29      	ldr	r3, [pc, #164]	; (8002064 <MX_TIM5_Init+0xe4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000-1;
 8001fc2:	4b28      	ldr	r3, [pc, #160]	; (8002064 <MX_TIM5_Init+0xe4>)
 8001fc4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001fc8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <MX_TIM5_Init+0xe4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <MX_TIM5_Init+0xe4>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001fd6:	4823      	ldr	r0, [pc, #140]	; (8002064 <MX_TIM5_Init+0xe4>)
 8001fd8:	f003 f9c4 	bl	8005364 <HAL_TIM_Base_Init>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001fe2:	f000 fa6d 	bl	80024c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001fec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	481c      	ldr	r0, [pc, #112]	; (8002064 <MX_TIM5_Init+0xe4>)
 8001ff4:	f004 f852 	bl	800609c <HAL_TIM_ConfigClockSource>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001ffe:	f000 fa5f 	bl	80024c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002002:	4818      	ldr	r0, [pc, #96]	; (8002064 <MX_TIM5_Init+0xe4>)
 8002004:	f003 fa6e 	bl	80054e4 <HAL_TIM_PWM_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 800200e:	f000 fa57 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800201a:	f107 0320 	add.w	r3, r7, #32
 800201e:	4619      	mov	r1, r3
 8002020:	4810      	ldr	r0, [pc, #64]	; (8002064 <MX_TIM5_Init+0xe4>)
 8002022:	f004 fe73 	bl	8006d0c <HAL_TIMEx_MasterConfigSynchronization>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 800202c:	f000 fa48 	bl	80024c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002030:	2360      	movs	r3, #96	; 0x60
 8002032:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	2200      	movs	r2, #0
 8002044:	4619      	mov	r1, r3
 8002046:	4807      	ldr	r0, [pc, #28]	; (8002064 <MX_TIM5_Init+0xe4>)
 8002048:	f003 ff66 	bl	8005f18 <HAL_TIM_PWM_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002052:	f000 fa35 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002056:	4803      	ldr	r0, [pc, #12]	; (8002064 <MX_TIM5_Init+0xe4>)
 8002058:	f000 fe3e 	bl	8002cd8 <HAL_TIM_MspPostInit>

}
 800205c:	bf00      	nop
 800205e:	3738      	adds	r7, #56	; 0x38
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000524 	.word	0x20000524
 8002068:	40000c00 	.word	0x40000c00

0800206c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002072:	463b      	mov	r3, r7
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <MX_TIM7_Init+0x64>)
 800207c:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <MX_TIM7_Init+0x68>)
 800207e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <MX_TIM7_Init+0x64>)
 8002082:	f242 720f 	movw	r2, #9999	; 0x270f
 8002086:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <MX_TIM7_Init+0x64>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 30000-1;
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <MX_TIM7_Init+0x64>)
 8002090:	f247 522f 	movw	r2, #29999	; 0x752f
 8002094:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <MX_TIM7_Init+0x64>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800209c:	480c      	ldr	r0, [pc, #48]	; (80020d0 <MX_TIM7_Init+0x64>)
 800209e:	f003 f961 	bl	8005364 <HAL_TIM_Base_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80020a8:	f000 fa0a 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80020b4:	463b      	mov	r3, r7
 80020b6:	4619      	mov	r1, r3
 80020b8:	4805      	ldr	r0, [pc, #20]	; (80020d0 <MX_TIM7_Init+0x64>)
 80020ba:	f004 fe27 	bl	8006d0c <HAL_TIMEx_MasterConfigSynchronization>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80020c4:	f000 f9fc 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	2000056c 	.word	0x2000056c
 80020d4:	40001400 	.word	0x40001400

080020d8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
 80020ec:	615a      	str	r2, [r3, #20]
 80020ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80020f0:	4b1e      	ldr	r3, [pc, #120]	; (800216c <MX_TIM13_Init+0x94>)
 80020f2:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <MX_TIM13_Init+0x98>)
 80020f4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <MX_TIM13_Init+0x94>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <MX_TIM13_Init+0x94>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002102:	4b1a      	ldr	r3, [pc, #104]	; (800216c <MX_TIM13_Init+0x94>)
 8002104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002108:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <MX_TIM13_Init+0x94>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <MX_TIM13_Init+0x94>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002116:	4815      	ldr	r0, [pc, #84]	; (800216c <MX_TIM13_Init+0x94>)
 8002118:	f003 f924 	bl	8005364 <HAL_TIM_Base_Init>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002122:	f000 f9cd 	bl	80024c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002126:	4811      	ldr	r0, [pc, #68]	; (800216c <MX_TIM13_Init+0x94>)
 8002128:	f003 f9dc 	bl	80054e4 <HAL_TIM_PWM_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002132:	f000 f9c5 	bl	80024c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002136:	2360      	movs	r3, #96	; 0x60
 8002138:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	2200      	movs	r2, #0
 800214a:	4619      	mov	r1, r3
 800214c:	4807      	ldr	r0, [pc, #28]	; (800216c <MX_TIM13_Init+0x94>)
 800214e:	f003 fee3 	bl	8005f18 <HAL_TIM_PWM_ConfigChannel>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8002158:	f000 f9b2 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <MX_TIM13_Init+0x94>)
 800215e:	f000 fdbb 	bl	8002cd8 <HAL_TIM_MspPostInit>

}
 8002162:	bf00      	nop
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200005b4 	.word	0x200005b4
 8002170:	40001c00 	.word	0x40001c00

08002174 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_USART2_UART_Init+0x4c>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <MX_USART2_UART_Init+0x50>)
 800217c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <MX_USART2_UART_Init+0x4c>)
 8002180:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002184:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_USART2_UART_Init+0x4c>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_USART2_UART_Init+0x4c>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <MX_USART2_UART_Init+0x4c>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_USART2_UART_Init+0x4c>)
 800219a:	220c      	movs	r2, #12
 800219c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <MX_USART2_UART_Init+0x4c>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_USART2_UART_Init+0x4c>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_USART2_UART_Init+0x4c>)
 80021ac:	f004 fe3e 	bl	8006e2c <HAL_UART_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021b6:	f000 f983 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200005fc 	.word	0x200005fc
 80021c4:	40004400 	.word	0x40004400

080021c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <MX_USART6_UART_Init+0x4c>)
 80021ce:	4a12      	ldr	r2, [pc, #72]	; (8002218 <MX_USART6_UART_Init+0x50>)
 80021d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <MX_USART6_UART_Init+0x4c>)
 80021d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80021d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <MX_USART6_UART_Init+0x4c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <MX_USART6_UART_Init+0x4c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <MX_USART6_UART_Init+0x4c>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <MX_USART6_UART_Init+0x4c>)
 80021ee:	220c      	movs	r2, #12
 80021f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <MX_USART6_UART_Init+0x4c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <MX_USART6_UART_Init+0x4c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <MX_USART6_UART_Init+0x4c>)
 8002200:	f004 fe14 	bl	8006e2c <HAL_UART_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800220a:	f000 f959 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000640 	.word	0x20000640
 8002218:	40011400 	.word	0x40011400

0800221c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08a      	sub	sp, #40	; 0x28
 8002220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]
 800222c:	609a      	str	r2, [r3, #8]
 800222e:	60da      	str	r2, [r3, #12]
 8002230:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	4b64      	ldr	r3, [pc, #400]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a63      	ldr	r2, [pc, #396]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a5c      	ldr	r2, [pc, #368]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 8002258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b5a      	ldr	r3, [pc, #360]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a55      	ldr	r2, [pc, #340]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	4b4f      	ldr	r3, [pc, #316]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a4e      	ldr	r2, [pc, #312]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b4c      	ldr	r3, [pc, #304]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	603b      	str	r3, [r7, #0]
 80022a6:	4b48      	ldr	r3, [pc, #288]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	4a47      	ldr	r2, [pc, #284]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 80022ac:	f043 0308 	orr.w	r3, r3, #8
 80022b0:	6313      	str	r3, [r2, #48]	; 0x30
 80022b2:	4b45      	ldr	r3, [pc, #276]	; (80023c8 <MX_GPIO_Init+0x1ac>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 80022be:	2200      	movs	r2, #0
 80022c0:	f24d 0107 	movw	r1, #53255	; 0xd007
 80022c4:	4841      	ldr	r0, [pc, #260]	; (80023cc <MX_GPIO_Init+0x1b0>)
 80022c6:	f001 fc6d 	bl	8003ba4 <HAL_GPIO_WritePin>
                          |AD_CS3_Pin|AD_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_CS1_Pin|LED_LE_Pin, GPIO_PIN_RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80022d0:	483f      	ldr	r0, [pc, #252]	; (80023d0 <MX_GPIO_Init+0x1b4>)
 80022d2:	f001 fc67 	bl	8003ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 80022dc:	483d      	ldr	r0, [pc, #244]	; (80023d4 <MX_GPIO_Init+0x1b8>)
 80022de:	f001 fc61 	bl	8003ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2104      	movs	r1, #4
 80022e6:	483c      	ldr	r0, [pc, #240]	; (80023d8 <MX_GPIO_Init+0x1bc>)
 80022e8:	f001 fc5c 	bl	8003ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80022f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	4833      	ldr	r0, [pc, #204]	; (80023d0 <MX_GPIO_Init+0x1b4>)
 8002304:	f001 faba 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : Dead_man_SW_Pin DRV_PWR_FB_Pin */
  GPIO_InitStruct.Pin = Dead_man_SW_Pin|DRV_PWR_FB_Pin;
 8002308:	2311      	movs	r3, #17
 800230a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230c:	2300      	movs	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	482d      	ldr	r0, [pc, #180]	; (80023d0 <MX_GPIO_Init+0x1b4>)
 800231c:	f001 faae 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_XSDN_36_Pin ToF_XSDN_25_Pin ToF_XSDN_14_Pin AD_CS4_Pin
                           AD_CS3_Pin AD_CS2_Pin */
  GPIO_InitStruct.Pin = ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 8002320:	f24d 0307 	movw	r3, #53255	; 0xd007
 8002324:	617b      	str	r3, [r7, #20]
                          |AD_CS3_Pin|AD_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4824      	ldr	r0, [pc, #144]	; (80023cc <MX_GPIO_Init+0x1b0>)
 800233a:	f001 fa9f 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_CS1_Pin LED_LE_Pin */
  GPIO_InitStruct.Pin = AD_CS1_Pin|LED_LE_Pin;
 800233e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002344:	2301      	movs	r3, #1
 8002346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	481e      	ldr	r0, [pc, #120]	; (80023d0 <MX_GPIO_Init+0x1b4>)
 8002358:	f001 fa90 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pins : INF_LE_Pin INF_OE_Pin DRV_EN_Pin */
  GPIO_InitStruct.Pin = INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin;
 800235c:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8002360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002362:	2301      	movs	r3, #1
 8002364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4817      	ldr	r0, [pc, #92]	; (80023d4 <MX_GPIO_Init+0x1b8>)
 8002376:	f001 fa81 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_FB_Pin */
  GPIO_InitStruct.Pin = DRV_EN_FB_Pin;
 800237a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800237e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_EN_FB_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4811      	ldr	r0, [pc, #68]	; (80023d4 <MX_GPIO_Init+0x1b8>)
 8002390:	f001 fa74 	bl	800387c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_OE_Pin;
 8002394:	2304      	movs	r3, #4
 8002396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002398:	2301      	movs	r3, #1
 800239a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OE_GPIO_Port, &GPIO_InitStruct);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	480b      	ldr	r0, [pc, #44]	; (80023d8 <MX_GPIO_Init+0x1bc>)
 80023ac:	f001 fa66 	bl	800387c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2100      	movs	r1, #0
 80023b4:	2028      	movs	r0, #40	; 0x28
 80023b6:	f001 fa2a 	bl	800380e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023ba:	2028      	movs	r0, #40	; 0x28
 80023bc:	f001 fa43 	bl	8003846 <HAL_NVIC_EnableIRQ>

}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40020800 	.word	0x40020800
 80023d4:	40020000 	.word	0x40020000
 80023d8:	40020c00 	.word	0x40020c00

080023dc <HAL_GPIO_EXTI_Callback>:
//{
//	  BTMessageFlag = true;
//	  BT_ReceiveMsg(&huart2, BT_received_msg);
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
	buttonMessageFlag = true;
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	20000694 	.word	0x20000694

080023fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
//		else{
//			LS_LED_Send(&hspi3, leds_all_on);
//			lightIsOn = true;
//		}
//	}
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002420:	d13d      	bne.n	800249e <HAL_TIM_IC_CaptureCallback+0x8e>
		cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 2;
 8002422:	2100      	movs	r1, #0
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f003 ff43 	bl	80062b0 <HAL_TIM_ReadCapturedValue>
 800242a:	4603      	mov	r3, r0
 800242c:	3302      	adds	r3, #2
 800242e:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002430:	6013      	str	r3, [r2, #0]
		cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + 2;
 8002432:	2104      	movs	r1, #4
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f003 ff3b 	bl	80062b0 <HAL_TIM_ReadCapturedValue>
 800243a:	4603      	mov	r3, r0
 800243c:	3302      	adds	r3, #2
 800243e:	4a1b      	ldr	r2, [pc, #108]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002440:	6013      	str	r3, [r2, #0]

		duty = (float) 100 * cnt_high / cnt_full;
 8002442:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80024b0 <HAL_TIM_IC_CaptureCallback+0xa0>
 8002452:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002468:	edc3 7a00 	vstr	s15, [r3]
		duty_MA = duty_alpha * duty + (1-duty_alpha) * duty_MA;
 800246c:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800246e:	ed93 7a00 	vldr	s14, [r3]
 8002472:	4b10      	ldr	r3, [pc, #64]	; (80024b4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	ee27 7a27 	vmul.f32	s14, s14, s15
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800247e:	edd3 7a00 	vldr	s15, [r3]
 8002482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002486:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_TIM_IC_CaptureCallback+0xac>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002494:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <HAL_TIM_IC_CaptureCallback+0xac>)
 800249a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000698 	.word	0x20000698
 80024ac:	2000069c 	.word	0x2000069c
 80024b0:	42c80000 	.word	0x42c80000
 80024b4:	200006a0 	.word	0x200006a0
 80024b8:	20000000 	.word	0x20000000
 80024bc:	200006a4 	.word	0x200006a4

080024c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c4:	b672      	cpsid	i
}
 80024c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <Error_Handler+0x8>

080024ca <MotorDrive>:
#include "main.h"

int MotorDrive(TIM_HandleTypeDef* const pwmHandle, int duty)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b085      	sub	sp, #20
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
	int pwm_val = 1000+(duty*20);
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80024e2:	60fb      	str	r3, [r7, #12]
	pwmHandle -> Instance -> CCR1 = pwm_val;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	635a      	str	r2, [r3, #52]	; 0x34
	return pwm_val;
 80024ec:	68fb      	ldr	r3, [r7, #12]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	0000      	movs	r0, r0
 80024fc:	0000      	movs	r0, r0
	...

08002500 <ServoPosition>:
#include "main.h"
#include <math.h>

void ServoPosition(TIM_HandleTypeDef* const pwmHandle, double    angle){
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	ed87 0b00 	vstr	d0, [r7]
    if(angle < 36){angle = 36;}
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <ServoPosition+0xb0>)
 8002512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002516:	f7fe fb01 	bl	8000b1c <__aeabi_dcmplt>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <ServoPosition+0x2a>
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <ServoPosition+0xb0>)
 8002526:	e9c7 2300 	strd	r2, r3, [r7]
    if(angle>144){angle = 144;}
 800252a:	f04f 0200 	mov.w	r2, #0
 800252e:	4b21      	ldr	r3, [pc, #132]	; (80025b4 <ServoPosition+0xb4>)
 8002530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002534:	f7fe fb10 	bl	8000b58 <__aeabi_dcmpgt>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <ServoPosition+0x48>
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	4b1c      	ldr	r3, [pc, #112]	; (80025b4 <ServoPosition+0xb4>)
 8002544:	e9c7 2300 	strd	r2, r3, [r7]
    //angle2CCR = ((angle/180+1)/20*60000);
    pwmHandle->Instance->CCR1 = (int)((angle/180+1)/20*60000);//angle2CCR;
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <ServoPosition+0xb8>)
 800254e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002552:	f7fe f99b 	bl	800088c <__aeabi_ddiv>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <ServoPosition+0xbc>)
 8002564:	f7fd feb2 	bl	80002cc <__adddf3>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <ServoPosition+0xc0>)
 8002576:	f7fe f989 	bl	800088c <__aeabi_ddiv>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4610      	mov	r0, r2
 8002580:	4619      	mov	r1, r3
 8002582:	a309      	add	r3, pc, #36	; (adr r3, 80025a8 <ServoPosition+0xa8>)
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	f7fe f856 	bl	8000638 <__aeabi_dmul>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	f7fe fb00 	bl	8000b98 <__aeabi_d2iz>
 8002598:	4602      	mov	r2, r0
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	00000000 	.word	0x00000000
 80025ac:	40ed4c00 	.word	0x40ed4c00
 80025b0:	40420000 	.word	0x40420000
 80025b4:	40620000 	.word	0x40620000
 80025b8:	40668000 	.word	0x40668000
 80025bc:	3ff00000 	.word	0x3ff00000
 80025c0:	40340000 	.word	0x40340000
 80025c4:	00000000 	.word	0x00000000

080025c8 <SteeringAngle>:


float SteeringAngle(float p, float delta){
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80025d2:	edc7 0a00 	vstr	s1, [r7]
	float kp=-1.159;
 80025d6:	4b30      	ldr	r3, [pc, #192]	; (8002698 <SteeringAngle+0xd0>)
 80025d8:	617b      	str	r3, [r7, #20]
	float kd=-0.7812;
 80025da:	4b30      	ldr	r3, [pc, #192]	; (800269c <SteeringAngle+0xd4>)
 80025dc:	613b      	str	r3, [r7, #16]
	float phi = atan(0.7826*tan(-kp*p-kd*delta));
 80025de:	edd7 7a05 	vldr	s15, [r7, #20]
 80025e2:	eeb1 7a67 	vneg.f32	s14, s15
 80025e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ee:	edd7 6a04 	vldr	s13, [r7, #16]
 80025f2:	edd7 7a00 	vldr	s15, [r7]
 80025f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fe:	ee17 0a90 	vmov	r0, s15
 8002602:	f7fd ffc1 	bl	8000588 <__aeabi_f2d>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	ec43 2b10 	vmov	d0, r2, r3
 800260e:	f007 fdbf 	bl	800a190 <tan>
 8002612:	ec51 0b10 	vmov	r0, r1, d0
 8002616:	a31c      	add	r3, pc, #112	; (adr r3, 8002688 <SteeringAngle+0xc0>)
 8002618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261c:	f7fe f80c 	bl	8000638 <__aeabi_dmul>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	ec43 2b17 	vmov	d7, r2, r3
 8002628:	eeb0 0a47 	vmov.f32	s0, s14
 800262c:	eef0 0a67 	vmov.f32	s1, s15
 8002630:	f007 fc02 	bl	8009e38 <atan>
 8002634:	ec53 2b10 	vmov	r2, r3, d0
 8002638:	4610      	mov	r0, r2
 800263a:	4619      	mov	r1, r3
 800263c:	f7fe fad4 	bl	8000be8 <__aeabi_d2f>
 8002640:	4603      	mov	r3, r0
 8002642:	60fb      	str	r3, [r7, #12]
	float servoangle=90+phi*269.04;
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f7fd ff9f 	bl	8000588 <__aeabi_f2d>
 800264a:	a311      	add	r3, pc, #68	; (adr r3, 8002690 <SteeringAngle+0xc8>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fd fff2 	bl	8000638 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <SteeringAngle+0xd8>)
 8002662:	f7fd fe33 	bl	80002cc <__adddf3>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4610      	mov	r0, r2
 800266c:	4619      	mov	r1, r3
 800266e:	f7fe fabb 	bl	8000be8 <__aeabi_d2f>
 8002672:	4603      	mov	r3, r0
 8002674:	60bb      	str	r3, [r7, #8]
	return servoangle;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	ee07 3a90 	vmov	s15, r3
}
 800267c:	eeb0 0a67 	vmov.f32	s0, s15
 8002680:	3718      	adds	r7, #24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	27bb2fec 	.word	0x27bb2fec
 800268c:	3fe90b0f 	.word	0x3fe90b0f
 8002690:	d70a3d71 	.word	0xd70a3d71
 8002694:	4070d0a3 	.word	0x4070d0a3
 8002698:	bf945a1d 	.word	0xbf945a1d
 800269c:	bf47fcb9 	.word	0xbf47fcb9
 80026a0:	40568000 	.word	0x40568000

080026a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	607b      	str	r3, [r7, #4]
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_MspInit+0x4c>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	4a0f      	ldr	r2, [pc, #60]	; (80026f0 <HAL_MspInit+0x4c>)
 80026b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_MspInit+0x4c>)
 80026bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026c2:	607b      	str	r3, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_MspInit+0x4c>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <HAL_MspInit+0x4c>)
 80026d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d4:	6413      	str	r3, [r2, #64]	; 0x40
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_MspInit+0x4c>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80026e2:	2007      	movs	r0, #7
 80026e4:	f001 f888 	bl	80037f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800

080026f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08a      	sub	sp, #40	; 0x28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a17      	ldr	r2, [pc, #92]	; (8002770 <HAL_ADC_MspInit+0x7c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d127      	bne.n	8002766 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	613b      	str	r3, [r7, #16]
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <HAL_ADC_MspInit+0x80>)
 800271c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271e:	4a15      	ldr	r2, [pc, #84]	; (8002774 <HAL_ADC_MspInit+0x80>)
 8002720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002724:	6453      	str	r3, [r2, #68]	; 0x44
 8002726:	4b13      	ldr	r3, [pc, #76]	; (8002774 <HAL_ADC_MspInit+0x80>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_ADC_MspInit+0x80>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <HAL_ADC_MspInit+0x80>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_ADC_MspInit+0x80>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IMotor_Pin|UBatt_Pin;
 800274e:	2312      	movs	r3, #18
 8002750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002752:	2303      	movs	r3, #3
 8002754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4619      	mov	r1, r3
 8002760:	4805      	ldr	r0, [pc, #20]	; (8002778 <HAL_ADC_MspInit+0x84>)
 8002762:	f001 f88b 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002766:	bf00      	nop
 8002768:	3728      	adds	r7, #40	; 0x28
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40012000 	.word	0x40012000
 8002774:	40023800 	.word	0x40023800
 8002778:	40020000 	.word	0x40020000

0800277c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08e      	sub	sp, #56	; 0x38
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a5c      	ldr	r2, [pc, #368]	; (800290c <HAL_I2C_MspInit+0x190>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d12d      	bne.n	80027fa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <HAL_I2C_MspInit+0x194>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a5a      	ldr	r2, [pc, #360]	; (8002910 <HAL_I2C_MspInit+0x194>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b58      	ldr	r3, [pc, #352]	; (8002910 <HAL_I2C_MspInit+0x194>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	623b      	str	r3, [r7, #32]
 80027b8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80027ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c0:	2312      	movs	r3, #18
 80027c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027cc:	2304      	movs	r3, #4
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d4:	4619      	mov	r1, r3
 80027d6:	484f      	ldr	r0, [pc, #316]	; (8002914 <HAL_I2C_MspInit+0x198>)
 80027d8:	f001 f850 	bl	800387c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
 80027e0:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <HAL_I2C_MspInit+0x194>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	4a4a      	ldr	r2, [pc, #296]	; (8002910 <HAL_I2C_MspInit+0x194>)
 80027e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027ea:	6413      	str	r3, [r2, #64]	; 0x40
 80027ec:	4b48      	ldr	r3, [pc, #288]	; (8002910 <HAL_I2C_MspInit+0x194>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80027f8:	e083      	b.n	8002902 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a46      	ldr	r2, [pc, #280]	; (8002918 <HAL_I2C_MspInit+0x19c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d12d      	bne.n	8002860 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	4b41      	ldr	r3, [pc, #260]	; (8002910 <HAL_I2C_MspInit+0x194>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	4a40      	ldr	r2, [pc, #256]	; (8002910 <HAL_I2C_MspInit+0x194>)
 800280e:	f043 0302 	orr.w	r3, r3, #2
 8002812:	6313      	str	r3, [r2, #48]	; 0x30
 8002814:	4b3e      	ldr	r3, [pc, #248]	; (8002910 <HAL_I2C_MspInit+0x194>)
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8002820:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002826:	2312      	movs	r3, #18
 8002828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282e:	2303      	movs	r3, #3
 8002830:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002832:	2304      	movs	r3, #4
 8002834:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283a:	4619      	mov	r1, r3
 800283c:	4835      	ldr	r0, [pc, #212]	; (8002914 <HAL_I2C_MspInit+0x198>)
 800283e:	f001 f81d 	bl	800387c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	4b32      	ldr	r3, [pc, #200]	; (8002910 <HAL_I2C_MspInit+0x194>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a31      	ldr	r2, [pc, #196]	; (8002910 <HAL_I2C_MspInit+0x194>)
 800284c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <HAL_I2C_MspInit+0x194>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697b      	ldr	r3, [r7, #20]
}
 800285e:	e050      	b.n	8002902 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a2d      	ldr	r2, [pc, #180]	; (800291c <HAL_I2C_MspInit+0x1a0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d14b      	bne.n	8002902 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	4b28      	ldr	r3, [pc, #160]	; (8002910 <HAL_I2C_MspInit+0x194>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a27      	ldr	r2, [pc, #156]	; (8002910 <HAL_I2C_MspInit+0x194>)
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b25      	ldr	r3, [pc, #148]	; (8002910 <HAL_I2C_MspInit+0x194>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b21      	ldr	r3, [pc, #132]	; (8002910 <HAL_I2C_MspInit+0x194>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a20      	ldr	r2, [pc, #128]	; (8002910 <HAL_I2C_MspInit+0x194>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_I2C_MspInit+0x194>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a8:	2312      	movs	r3, #18
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028b4:	2304      	movs	r3, #4
 80028b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028bc:	4619      	mov	r1, r3
 80028be:	4818      	ldr	r0, [pc, #96]	; (8002920 <HAL_I2C_MspInit+0x1a4>)
 80028c0:	f000 ffdc 	bl	800387c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ca:	2312      	movs	r3, #18
 80028cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d2:	2303      	movs	r3, #3
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028d6:	2304      	movs	r3, #4
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028de:	4619      	mov	r1, r3
 80028e0:	4810      	ldr	r0, [pc, #64]	; (8002924 <HAL_I2C_MspInit+0x1a8>)
 80028e2:	f000 ffcb 	bl	800387c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_I2C_MspInit+0x194>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a08      	ldr	r2, [pc, #32]	; (8002910 <HAL_I2C_MspInit+0x194>)
 80028f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_I2C_MspInit+0x194>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
}
 8002902:	bf00      	nop
 8002904:	3738      	adds	r7, #56	; 0x38
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40005400 	.word	0x40005400
 8002910:	40023800 	.word	0x40023800
 8002914:	40020400 	.word	0x40020400
 8002918:	40005800 	.word	0x40005800
 800291c:	40005c00 	.word	0x40005c00
 8002920:	40020800 	.word	0x40020800
 8002924:	40020000 	.word	0x40020000

08002928 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b090      	sub	sp, #64	; 0x40
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a72      	ldr	r2, [pc, #456]	; (8002b10 <HAL_SPI_MspInit+0x1e8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d14a      	bne.n	80029e0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
 800294e:	4b71      	ldr	r3, [pc, #452]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	4a70      	ldr	r2, [pc, #448]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002958:	6453      	str	r3, [r2, #68]	; 0x44
 800295a:	4b6e      	ldr	r3, [pc, #440]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	4b6a      	ldr	r3, [pc, #424]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a69      	ldr	r2, [pc, #420]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b67      	ldr	r3, [pc, #412]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	623b      	str	r3, [r7, #32]
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	4a62      	ldr	r2, [pc, #392]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	; 0x30
 8002992:	4b60      	ldr	r3, [pc, #384]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	623b      	str	r3, [r7, #32]
 800299c:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800299e:	23a0      	movs	r3, #160	; 0xa0
 80029a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ae:	2305      	movs	r3, #5
 80029b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029b6:	4619      	mov	r1, r3
 80029b8:	4857      	ldr	r0, [pc, #348]	; (8002b18 <HAL_SPI_MspInit+0x1f0>)
 80029ba:	f000 ff5f 	bl	800387c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029be:	2310      	movs	r3, #16
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ce:	2305      	movs	r3, #5
 80029d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029d6:	4619      	mov	r1, r3
 80029d8:	4850      	ldr	r0, [pc, #320]	; (8002b1c <HAL_SPI_MspInit+0x1f4>)
 80029da:	f000 ff4f 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80029de:	e092      	b.n	8002b06 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a4e      	ldr	r2, [pc, #312]	; (8002b20 <HAL_SPI_MspInit+0x1f8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d15b      	bne.n	8002aa2 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
 80029ee:	4b49      	ldr	r3, [pc, #292]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	4a48      	ldr	r2, [pc, #288]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 80029f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f8:	6413      	str	r3, [r2, #64]	; 0x40
 80029fa:	4b46      	ldr	r3, [pc, #280]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
 8002a0a:	4b42      	ldr	r3, [pc, #264]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a41      	ldr	r2, [pc, #260]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b3f      	ldr	r3, [pc, #252]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	4b3b      	ldr	r3, [pc, #236]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	4a3a      	ldr	r2, [pc, #232]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002a2c:	f043 0302 	orr.w	r3, r3, #2
 8002a30:	6313      	str	r3, [r2, #48]	; 0x30
 8002a32:	4b38      	ldr	r3, [pc, #224]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a42:	2302      	movs	r3, #2
 8002a44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002a4e:	2307      	movs	r3, #7
 8002a50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a56:	4619      	mov	r1, r3
 8002a58:	4832      	ldr	r0, [pc, #200]	; (8002b24 <HAL_SPI_MspInit+0x1fc>)
 8002a5a:	f000 ff0f 	bl	800387c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a5e:	2304      	movs	r3, #4
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a62:	2302      	movs	r3, #2
 8002a64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a6e:	2305      	movs	r3, #5
 8002a70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a76:	4619      	mov	r1, r3
 8002a78:	482a      	ldr	r0, [pc, #168]	; (8002b24 <HAL_SPI_MspInit+0x1fc>)
 8002a7a:	f000 feff 	bl	800387c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a90:	2305      	movs	r3, #5
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4820      	ldr	r0, [pc, #128]	; (8002b1c <HAL_SPI_MspInit+0x1f4>)
 8002a9c:	f000 feee 	bl	800387c <HAL_GPIO_Init>
}
 8002aa0:	e031      	b.n	8002b06 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a20      	ldr	r2, [pc, #128]	; (8002b28 <HAL_SPI_MspInit+0x200>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d12c      	bne.n	8002b06 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002aac:	2300      	movs	r3, #0
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aba:	6413      	str	r3, [r2, #64]	; 0x40
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	4a10      	ldr	r2, [pc, #64]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002ad2:	f043 0304 	orr.w	r3, r3, #4
 8002ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad8:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <HAL_SPI_MspInit+0x1ec>)
 8002ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002ae4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af2:	2303      	movs	r3, #3
 8002af4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002af6:	2306      	movs	r3, #6
 8002af8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002afe:	4619      	mov	r1, r3
 8002b00:	4808      	ldr	r0, [pc, #32]	; (8002b24 <HAL_SPI_MspInit+0x1fc>)
 8002b02:	f000 febb 	bl	800387c <HAL_GPIO_Init>
}
 8002b06:	bf00      	nop
 8002b08:	3740      	adds	r7, #64	; 0x40
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40013000 	.word	0x40013000
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40003800 	.word	0x40003800
 8002b24:	40020800 	.word	0x40020800
 8002b28:	40003c00 	.word	0x40003c00

08002b2c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	60da      	str	r2, [r3, #12]
 8002b42:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b4c:	d134      	bne.n	8002bb8 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <HAL_TIM_IC_MspInit+0x94>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	4a1a      	ldr	r2, [pc, #104]	; (8002bc0 <HAL_TIM_IC_MspInit+0x94>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5e:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_TIM_IC_MspInit+0x94>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_TIM_IC_MspInit+0x94>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <HAL_TIM_IC_MspInit+0x94>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_TIM_IC_MspInit+0x94>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2300      	movs	r3, #0
 8002b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9c:	f107 0314 	add.w	r3, r7, #20
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4808      	ldr	r0, [pc, #32]	; (8002bc4 <HAL_TIM_IC_MspInit+0x98>)
 8002ba4:	f000 fe6a 	bl	800387c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2100      	movs	r1, #0
 8002bac:	201c      	movs	r0, #28
 8002bae:	f000 fe2e 	bl	800380e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bb2:	201c      	movs	r0, #28
 8002bb4:	f000 fe47 	bl	8003846 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bb8:	bf00      	nop
 8002bba:	3728      	adds	r7, #40	; 0x28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020000 	.word	0x40020000

08002bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3a      	ldr	r2, [pc, #232]	; (8002cc0 <HAL_TIM_Base_MspInit+0xf8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	4b39      	ldr	r3, [pc, #228]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a38      	ldr	r2, [pc, #224]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bea:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002bf6:	e05e      	b.n	8002cb6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a32      	ldr	r2, [pc, #200]	; (8002cc8 <HAL_TIM_Base_MspInit+0x100>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	4b2f      	ldr	r3, [pc, #188]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a2e      	ldr	r2, [pc, #184]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002c0c:	f043 0304 	orr.w	r3, r3, #4
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b2c      	ldr	r3, [pc, #176]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
}
 8002c1e:	e04a      	b.n	8002cb6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <HAL_TIM_Base_MspInit+0x104>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d116      	bne.n	8002c58 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3a:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	2032      	movs	r0, #50	; 0x32
 8002c4c:	f000 fddf 	bl	800380e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c50:	2032      	movs	r0, #50	; 0x32
 8002c52:	f000 fdf8 	bl	8003846 <HAL_NVIC_EnableIRQ>
}
 8002c56:	e02e      	b.n	8002cb6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_TIM_Base_MspInit+0x108>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d116      	bne.n	8002c90 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002c6c:	f043 0320 	orr.w	r3, r3, #32
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
 8002c72:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	613b      	str	r3, [r7, #16]
 8002c7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	2037      	movs	r0, #55	; 0x37
 8002c84:	f000 fdc3 	bl	800380e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002c88:	2037      	movs	r0, #55	; 0x37
 8002c8a:	f000 fddc 	bl	8003846 <HAL_NVIC_EnableIRQ>
}
 8002c8e:	e012      	b.n	8002cb6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM13)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <HAL_TIM_Base_MspInit+0x10c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d10d      	bne.n	8002cb6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	4a08      	ldr	r2, [pc, #32]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
}
 8002cb6:	bf00      	nop
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40000800 	.word	0x40000800
 8002ccc:	40000c00 	.word	0x40000c00
 8002cd0:	40001400 	.word	0x40001400
 8002cd4:	40001c00 	.word	0x40001c00

08002cd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08c      	sub	sp, #48	; 0x30
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 031c 	add.w	r3, r7, #28
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a48      	ldr	r2, [pc, #288]	; (8002e18 <HAL_TIM_MspPostInit+0x140>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d11e      	bne.n	8002d38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a46      	ldr	r2, [pc, #280]	; (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b44      	ldr	r3, [pc, #272]	; (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_PMW1_Pin;
 8002d16:	2320      	movs	r3, #32
 8002d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d26:	2302      	movs	r3, #2
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PMW1_GPIO_Port, &GPIO_InitStruct);
 8002d2a:	f107 031c 	add.w	r3, r7, #28
 8002d2e:	4619      	mov	r1, r3
 8002d30:	483b      	ldr	r0, [pc, #236]	; (8002e20 <HAL_TIM_MspPostInit+0x148>)
 8002d32:	f000 fda3 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002d36:	e06a      	b.n	8002e0e <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a39      	ldr	r2, [pc, #228]	; (8002e24 <HAL_TIM_MspPostInit+0x14c>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d11e      	bne.n	8002d80 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	4b35      	ldr	r3, [pc, #212]	; (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a34      	ldr	r2, [pc, #208]	; (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DRV_PWM2_Pin;
 8002d5e:	2340      	movs	r3, #64	; 0x40
 8002d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d62:	2302      	movs	r3, #2
 8002d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002d72:	f107 031c 	add.w	r3, r7, #28
 8002d76:	4619      	mov	r1, r3
 8002d78:	4829      	ldr	r0, [pc, #164]	; (8002e20 <HAL_TIM_MspPostInit+0x148>)
 8002d7a:	f000 fd7f 	bl	800387c <HAL_GPIO_Init>
}
 8002d7e:	e046      	b.n	8002e0e <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <HAL_TIM_MspPostInit+0x150>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d11e      	bne.n	8002dc8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a22      	ldr	r2, [pc, #136]	; (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b20      	ldr	r3, [pc, #128]	; (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM2_Pin;
 8002da6:	2301      	movs	r3, #1
 8002da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002daa:	2302      	movs	r3, #2
 8002dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dae:	2300      	movs	r3, #0
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db2:	2300      	movs	r3, #0
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002db6:	2302      	movs	r3, #2
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002dba:	f107 031c 	add.w	r3, r7, #28
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	481a      	ldr	r0, [pc, #104]	; (8002e2c <HAL_TIM_MspPostInit+0x154>)
 8002dc2:	f000 fd5b 	bl	800387c <HAL_GPIO_Init>
}
 8002dc6:	e022      	b.n	8002e0e <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM13)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <HAL_TIM_MspPostInit+0x158>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d11d      	bne.n	8002e0e <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a10      	ldr	r2, [pc, #64]	; (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <HAL_TIM_MspPostInit+0x144>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM_Pin;
 8002dee:	2340      	movs	r3, #64	; 0x40
 8002df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	2302      	movs	r3, #2
 8002df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002dfe:	2309      	movs	r3, #9
 8002e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_GPIO_Port, &GPIO_InitStruct);
 8002e02:	f107 031c 	add.w	r3, r7, #28
 8002e06:	4619      	mov	r1, r3
 8002e08:	4808      	ldr	r0, [pc, #32]	; (8002e2c <HAL_TIM_MspPostInit+0x154>)
 8002e0a:	f000 fd37 	bl	800387c <HAL_GPIO_Init>
}
 8002e0e:	bf00      	nop
 8002e10:	3730      	adds	r7, #48	; 0x30
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40020400 	.word	0x40020400
 8002e24:	40000800 	.word	0x40000800
 8002e28:	40000c00 	.word	0x40000c00
 8002e2c:	40020000 	.word	0x40020000
 8002e30:	40001c00 	.word	0x40001c00

08002e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08c      	sub	sp, #48	; 0x30
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3c:	f107 031c 	add.w	r3, r7, #28
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a32      	ldr	r2, [pc, #200]	; (8002f1c <HAL_UART_MspInit+0xe8>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d12c      	bne.n	8002eb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_UART_MspInit+0xec>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	4a30      	ldr	r2, [pc, #192]	; (8002f20 <HAL_UART_MspInit+0xec>)
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e64:	6413      	str	r3, [r2, #64]	; 0x40
 8002e66:	4b2e      	ldr	r3, [pc, #184]	; (8002f20 <HAL_UART_MspInit+0xec>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	4b2a      	ldr	r3, [pc, #168]	; (8002f20 <HAL_UART_MspInit+0xec>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a29      	ldr	r2, [pc, #164]	; (8002f20 <HAL_UART_MspInit+0xec>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_UART_MspInit+0xec>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e8e:	230c      	movs	r3, #12
 8002e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e92:	2302      	movs	r3, #2
 8002e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e9e:	2307      	movs	r3, #7
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea2:	f107 031c 	add.w	r3, r7, #28
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	481e      	ldr	r0, [pc, #120]	; (8002f24 <HAL_UART_MspInit+0xf0>)
 8002eaa:	f000 fce7 	bl	800387c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002eae:	e030      	b.n	8002f12 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1c      	ldr	r2, [pc, #112]	; (8002f28 <HAL_UART_MspInit+0xf4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d12b      	bne.n	8002f12 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_UART_MspInit+0xec>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_UART_MspInit+0xec>)
 8002ec4:	f043 0320 	orr.w	r3, r3, #32
 8002ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_UART_MspInit+0xec>)
 8002ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b11      	ldr	r3, [pc, #68]	; (8002f20 <HAL_UART_MspInit+0xec>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a10      	ldr	r2, [pc, #64]	; (8002f20 <HAL_UART_MspInit+0xec>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b0e      	ldr	r3, [pc, #56]	; (8002f20 <HAL_UART_MspInit+0xec>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|RADIO_RX_Pin;
 8002ef2:	23c0      	movs	r3, #192	; 0xc0
 8002ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efa:	2300      	movs	r3, #0
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2303      	movs	r3, #3
 8002f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002f02:	2308      	movs	r3, #8
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f06:	f107 031c 	add.w	r3, r7, #28
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	4807      	ldr	r0, [pc, #28]	; (8002f2c <HAL_UART_MspInit+0xf8>)
 8002f0e:	f000 fcb5 	bl	800387c <HAL_GPIO_Init>
}
 8002f12:	bf00      	nop
 8002f14:	3730      	adds	r7, #48	; 0x30
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40004400 	.word	0x40004400
 8002f20:	40023800 	.word	0x40023800
 8002f24:	40020000 	.word	0x40020000
 8002f28:	40011400 	.word	0x40011400
 8002f2c:	40020800 	.word	0x40020800

08002f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f34:	e7fe      	b.n	8002f34 <NMI_Handler+0x4>

08002f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f3a:	e7fe      	b.n	8002f3a <HardFault_Handler+0x4>

08002f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f40:	e7fe      	b.n	8002f40 <MemManage_Handler+0x4>

08002f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f42:	b480      	push	{r7}
 8002f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f46:	e7fe      	b.n	8002f46 <BusFault_Handler+0x4>

08002f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f4c:	e7fe      	b.n	8002f4c <UsageFault_Handler+0x4>

08002f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f7c:	f000 f8b6 	bl	80030ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <TIM2_IRQHandler+0x10>)
 8002f8a:	f002 fe21 	bl	8005bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	2000044c 	.word	0x2000044c

08002f98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002f9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fa0:	f000 fe1a 	bl	8003bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002fac:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <TIM5_IRQHandler+0x10>)
 8002fae:	f002 fe0f 	bl	8005bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000524 	.word	0x20000524

08002fbc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <TIM7_IRQHandler+0x10>)
 8002fc2:	f002 fe05 	bl	8005bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2000056c 	.word	0x2000056c

08002fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <SystemInit+0x20>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fda:	4a05      	ldr	r2, [pc, #20]	; (8002ff0 <SystemInit+0x20>)
 8002fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800302c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ff8:	480d      	ldr	r0, [pc, #52]	; (8003030 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ffa:	490e      	ldr	r1, [pc, #56]	; (8003034 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ffc:	4a0e      	ldr	r2, [pc, #56]	; (8003038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003000:	e002      	b.n	8003008 <LoopCopyDataInit>

08003002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003006:	3304      	adds	r3, #4

08003008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800300a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800300c:	d3f9      	bcc.n	8003002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800300e:	4a0b      	ldr	r2, [pc, #44]	; (800303c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003010:	4c0b      	ldr	r4, [pc, #44]	; (8003040 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003014:	e001      	b.n	800301a <LoopFillZerobss>

08003016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003018:	3204      	adds	r2, #4

0800301a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800301a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800301c:	d3fb      	bcc.n	8003016 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800301e:	f7ff ffd7 	bl	8002fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003022:	f004 f9c5 	bl	80073b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003026:	f7fe fb49 	bl	80016bc <main>
  bx  lr    
 800302a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800302c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003034:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003038:	0800b9c8 	.word	0x0800b9c8
  ldr r2, =_sbss
 800303c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003040:	200006c0 	.word	0x200006c0

08003044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003044:	e7fe      	b.n	8003044 <ADC_IRQHandler>
	...

08003048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800304c:	4b0e      	ldr	r3, [pc, #56]	; (8003088 <HAL_Init+0x40>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0d      	ldr	r2, [pc, #52]	; (8003088 <HAL_Init+0x40>)
 8003052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <HAL_Init+0x40>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <HAL_Init+0x40>)
 800305e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <HAL_Init+0x40>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a07      	ldr	r2, [pc, #28]	; (8003088 <HAL_Init+0x40>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800306e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003070:	2003      	movs	r0, #3
 8003072:	f000 fbc1 	bl	80037f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003076:	2000      	movs	r0, #0
 8003078:	f000 f808 	bl	800308c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800307c:	f7ff fb12 	bl	80026a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023c00 	.word	0x40023c00

0800308c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_InitTick+0x54>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_InitTick+0x58>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	4619      	mov	r1, r3
 800309e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fbd9 	bl	8003862 <HAL_SYSTICK_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e00e      	b.n	80030d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b0f      	cmp	r3, #15
 80030be:	d80a      	bhi.n	80030d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030c0:	2200      	movs	r2, #0
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	f04f 30ff 	mov.w	r0, #4294967295
 80030c8:	f000 fba1 	bl	800380e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030cc:	4a06      	ldr	r2, [pc, #24]	; (80030e8 <HAL_InitTick+0x5c>)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	e000      	b.n	80030d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	20000008 	.word	0x20000008
 80030e4:	20000010 	.word	0x20000010
 80030e8:	2000000c 	.word	0x2000000c

080030ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_IncTick+0x20>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <HAL_IncTick+0x24>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4413      	add	r3, r2
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_IncTick+0x24>)
 80030fe:	6013      	str	r3, [r2, #0]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	20000010 	.word	0x20000010
 8003110:	200006a8 	.word	0x200006a8

08003114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  return uwTick;
 8003118:	4b03      	ldr	r3, [pc, #12]	; (8003128 <HAL_GetTick+0x14>)
 800311a:	681b      	ldr	r3, [r3, #0]
}
 800311c:	4618      	mov	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	200006a8 	.word	0x200006a8

0800312c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003134:	f7ff ffee 	bl	8003114 <HAL_GetTick>
 8003138:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d005      	beq.n	8003152 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_Delay+0x44>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003152:	bf00      	nop
 8003154:	f7ff ffde 	bl	8003114 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	429a      	cmp	r2, r3
 8003162:	d8f7      	bhi.n	8003154 <HAL_Delay+0x28>
  {
  }
}
 8003164:	bf00      	nop
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000010 	.word	0x20000010

08003174 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800317c:	2300      	movs	r3, #0
 800317e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e033      	b.n	80031f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d109      	bne.n	80031a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7ff faae 	bl	80026f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d118      	bne.n	80031e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031ba:	f023 0302 	bic.w	r3, r3, #2
 80031be:	f043 0202 	orr.w	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f94a 	bl	8003460 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	f043 0201 	orr.w	r2, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	641a      	str	r2, [r3, #64]	; 0x40
 80031e2:	e001      	b.n	80031e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x1c>
 8003214:	2302      	movs	r3, #2
 8003216:	e113      	b.n	8003440 <HAL_ADC_ConfigChannel+0x244>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b09      	cmp	r3, #9
 8003226:	d925      	bls.n	8003274 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68d9      	ldr	r1, [r3, #12]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	461a      	mov	r2, r3
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	3b1e      	subs	r3, #30
 800323e:	2207      	movs	r2, #7
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43da      	mvns	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	400a      	ands	r2, r1
 800324c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68d9      	ldr	r1, [r3, #12]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	b29b      	uxth	r3, r3
 800325e:	4618      	mov	r0, r3
 8003260:	4603      	mov	r3, r0
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4403      	add	r3, r0
 8003266:	3b1e      	subs	r3, #30
 8003268:	409a      	lsls	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	60da      	str	r2, [r3, #12]
 8003272:	e022      	b.n	80032ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6919      	ldr	r1, [r3, #16]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	b29b      	uxth	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	4613      	mov	r3, r2
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	4413      	add	r3, r2
 8003288:	2207      	movs	r2, #7
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	43da      	mvns	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	400a      	ands	r2, r1
 8003296:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6919      	ldr	r1, [r3, #16]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	4618      	mov	r0, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4403      	add	r3, r0
 80032b0:	409a      	lsls	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d824      	bhi.n	800330c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	3b05      	subs	r3, #5
 80032d4:	221f      	movs	r2, #31
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43da      	mvns	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	400a      	ands	r2, r1
 80032e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	4618      	mov	r0, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	3b05      	subs	r3, #5
 80032fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	635a      	str	r2, [r3, #52]	; 0x34
 800330a:	e04c      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b0c      	cmp	r3, #12
 8003312:	d824      	bhi.n	800335e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4413      	add	r3, r2
 8003324:	3b23      	subs	r3, #35	; 0x23
 8003326:	221f      	movs	r2, #31
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43da      	mvns	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	400a      	ands	r2, r1
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	b29b      	uxth	r3, r3
 8003342:	4618      	mov	r0, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	3b23      	subs	r3, #35	; 0x23
 8003350:	fa00 f203 	lsl.w	r2, r0, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	631a      	str	r2, [r3, #48]	; 0x30
 800335c:	e023      	b.n	80033a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	3b41      	subs	r3, #65	; 0x41
 8003370:	221f      	movs	r2, #31
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43da      	mvns	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	400a      	ands	r2, r1
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	b29b      	uxth	r3, r3
 800338c:	4618      	mov	r0, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	3b41      	subs	r3, #65	; 0x41
 800339a:	fa00 f203 	lsl.w	r2, r0, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033a6:	4b29      	ldr	r3, [pc, #164]	; (800344c <HAL_ADC_ConfigChannel+0x250>)
 80033a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a28      	ldr	r2, [pc, #160]	; (8003450 <HAL_ADC_ConfigChannel+0x254>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10f      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x1d8>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b12      	cmp	r3, #18
 80033ba:	d10b      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <HAL_ADC_ConfigChannel+0x254>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d12b      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x23a>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1c      	ldr	r2, [pc, #112]	; (8003454 <HAL_ADC_ConfigChannel+0x258>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <HAL_ADC_ConfigChannel+0x1f4>
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b11      	cmp	r3, #17
 80033ee:	d122      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a11      	ldr	r2, [pc, #68]	; (8003454 <HAL_ADC_ConfigChannel+0x258>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d111      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_ADC_ConfigChannel+0x25c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a11      	ldr	r2, [pc, #68]	; (800345c <HAL_ADC_ConfigChannel+0x260>)
 8003418:	fba2 2303 	umull	r2, r3, r2, r3
 800341c:	0c9a      	lsrs	r2, r3, #18
 800341e:	4613      	mov	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003428:	e002      	b.n	8003430 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	3b01      	subs	r3, #1
 800342e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f9      	bne.n	800342a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	40012300 	.word	0x40012300
 8003450:	40012000 	.word	0x40012000
 8003454:	10000012 	.word	0x10000012
 8003458:	20000008 	.word	0x20000008
 800345c:	431bde83 	.word	0x431bde83

08003460 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003468:	4b79      	ldr	r3, [pc, #484]	; (8003650 <ADC_Init+0x1f0>)
 800346a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	021a      	lsls	r2, r3, #8
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6899      	ldr	r1, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	4a58      	ldr	r2, [pc, #352]	; (8003654 <ADC_Init+0x1f4>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d022      	beq.n	800353e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003506:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6899      	ldr	r1, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	609a      	str	r2, [r3, #8]
 800353c:	e00f      	b.n	800355e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800354c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800355c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0202 	bic.w	r2, r2, #2
 800356c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	7e1b      	ldrb	r3, [r3, #24]
 8003578:	005a      	lsls	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01b      	beq.n	80035c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800359a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	3b01      	subs	r3, #1
 80035b8:	035a      	lsls	r2, r3, #13
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	e007      	b.n	80035d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	051a      	lsls	r2, r3, #20
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003608:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003616:	025a      	lsls	r2, r3, #9
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800362e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	029a      	lsls	r2, r3, #10
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	40012300 	.word	0x40012300
 8003654:	0f000001 	.word	0x0f000001

08003658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003668:	4b0c      	ldr	r3, [pc, #48]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003674:	4013      	ands	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003680:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800368a:	4a04      	ldr	r2, [pc, #16]	; (800369c <__NVIC_SetPriorityGrouping+0x44>)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	60d3      	str	r3, [r2, #12]
}
 8003690:	bf00      	nop
 8003692:	3714      	adds	r7, #20
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a4:	4b04      	ldr	r3, [pc, #16]	; (80036b8 <__NVIC_GetPriorityGrouping+0x18>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	f003 0307 	and.w	r3, r3, #7
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000ed00 	.word	0xe000ed00

080036bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	db0b      	blt.n	80036e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	f003 021f 	and.w	r2, r3, #31
 80036d4:	4907      	ldr	r1, [pc, #28]	; (80036f4 <__NVIC_EnableIRQ+0x38>)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	2001      	movs	r0, #1
 80036de:	fa00 f202 	lsl.w	r2, r0, r2
 80036e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	e000e100 	.word	0xe000e100

080036f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	6039      	str	r1, [r7, #0]
 8003702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	2b00      	cmp	r3, #0
 800370a:	db0a      	blt.n	8003722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	490c      	ldr	r1, [pc, #48]	; (8003744 <__NVIC_SetPriority+0x4c>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	440b      	add	r3, r1
 800371c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003720:	e00a      	b.n	8003738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4908      	ldr	r1, [pc, #32]	; (8003748 <__NVIC_SetPriority+0x50>)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	3b04      	subs	r3, #4
 8003730:	0112      	lsls	r2, r2, #4
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	440b      	add	r3, r1
 8003736:	761a      	strb	r2, [r3, #24]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr
 8003744:	e000e100 	.word	0xe000e100
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f1c3 0307 	rsb	r3, r3, #7
 8003766:	2b04      	cmp	r3, #4
 8003768:	bf28      	it	cs
 800376a:	2304      	movcs	r3, #4
 800376c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3304      	adds	r3, #4
 8003772:	2b06      	cmp	r3, #6
 8003774:	d902      	bls.n	800377c <NVIC_EncodePriority+0x30>
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3b03      	subs	r3, #3
 800377a:	e000      	b.n	800377e <NVIC_EncodePriority+0x32>
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003780:	f04f 32ff 	mov.w	r2, #4294967295
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43da      	mvns	r2, r3
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	401a      	ands	r2, r3
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003794:	f04f 31ff 	mov.w	r1, #4294967295
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	43d9      	mvns	r1, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a4:	4313      	orrs	r3, r2
         );
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3724      	adds	r7, #36	; 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3b01      	subs	r3, #1
 80037c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037c4:	d301      	bcc.n	80037ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c6:	2301      	movs	r3, #1
 80037c8:	e00f      	b.n	80037ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ca:	4a0a      	ldr	r2, [pc, #40]	; (80037f4 <SysTick_Config+0x40>)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037d2:	210f      	movs	r1, #15
 80037d4:	f04f 30ff 	mov.w	r0, #4294967295
 80037d8:	f7ff ff8e 	bl	80036f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037dc:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <SysTick_Config+0x40>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037e2:	4b04      	ldr	r3, [pc, #16]	; (80037f4 <SysTick_Config+0x40>)
 80037e4:	2207      	movs	r2, #7
 80037e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	e000e010 	.word	0xe000e010

080037f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff ff29 	bl	8003658 <__NVIC_SetPriorityGrouping>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	4603      	mov	r3, r0
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003820:	f7ff ff3e 	bl	80036a0 <__NVIC_GetPriorityGrouping>
 8003824:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	6978      	ldr	r0, [r7, #20]
 800382c:	f7ff ff8e 	bl	800374c <NVIC_EncodePriority>
 8003830:	4602      	mov	r2, r0
 8003832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff ff5d 	bl	80036f8 <__NVIC_SetPriority>
}
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff ff31 	bl	80036bc <__NVIC_EnableIRQ>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b082      	sub	sp, #8
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ffa2 	bl	80037b4 <SysTick_Config>
 8003870:	4603      	mov	r3, r0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	; 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	e165      	b.n	8003b64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003898:	2201      	movs	r2, #1
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4013      	ands	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	f040 8154 	bne.w	8003b5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d005      	beq.n	80038ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d130      	bne.n	8003930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	2203      	movs	r2, #3
 80038da:	fa02 f303 	lsl.w	r3, r2, r3
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003904:	2201      	movs	r2, #1
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 0201 	and.w	r2, r3, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b03      	cmp	r3, #3
 800393a:	d017      	beq.n	800396c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	2203      	movs	r2, #3
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d123      	bne.n	80039c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	08da      	lsrs	r2, r3, #3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3208      	adds	r2, #8
 8003980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	220f      	movs	r2, #15
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	08da      	lsrs	r2, r3, #3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3208      	adds	r2, #8
 80039ba:	69b9      	ldr	r1, [r7, #24]
 80039bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0203 	and.w	r2, r3, #3
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80ae 	beq.w	8003b5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	4b5d      	ldr	r3, [pc, #372]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	4a5c      	ldr	r2, [pc, #368]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a10:	6453      	str	r3, [r2, #68]	; 0x44
 8003a12:	4b5a      	ldr	r3, [pc, #360]	; (8003b7c <HAL_GPIO_Init+0x300>)
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a1e:	4a58      	ldr	r2, [pc, #352]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	3302      	adds	r3, #2
 8003a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	220f      	movs	r2, #15
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a4f      	ldr	r2, [pc, #316]	; (8003b84 <HAL_GPIO_Init+0x308>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d025      	beq.n	8003a96 <HAL_GPIO_Init+0x21a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a4e      	ldr	r2, [pc, #312]	; (8003b88 <HAL_GPIO_Init+0x30c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01f      	beq.n	8003a92 <HAL_GPIO_Init+0x216>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a4d      	ldr	r2, [pc, #308]	; (8003b8c <HAL_GPIO_Init+0x310>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d019      	beq.n	8003a8e <HAL_GPIO_Init+0x212>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a4c      	ldr	r2, [pc, #304]	; (8003b90 <HAL_GPIO_Init+0x314>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_GPIO_Init+0x20e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a4b      	ldr	r2, [pc, #300]	; (8003b94 <HAL_GPIO_Init+0x318>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00d      	beq.n	8003a86 <HAL_GPIO_Init+0x20a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a4a      	ldr	r2, [pc, #296]	; (8003b98 <HAL_GPIO_Init+0x31c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <HAL_GPIO_Init+0x206>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a49      	ldr	r2, [pc, #292]	; (8003b9c <HAL_GPIO_Init+0x320>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d101      	bne.n	8003a7e <HAL_GPIO_Init+0x202>
 8003a7a:	2306      	movs	r3, #6
 8003a7c:	e00c      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a7e:	2307      	movs	r3, #7
 8003a80:	e00a      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a82:	2305      	movs	r3, #5
 8003a84:	e008      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a86:	2304      	movs	r3, #4
 8003a88:	e006      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e004      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e002      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_GPIO_Init+0x21c>
 8003a96:	2300      	movs	r3, #0
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	f002 0203 	and.w	r2, r2, #3
 8003a9e:	0092      	lsls	r2, r2, #2
 8003aa0:	4093      	lsls	r3, r2
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa8:	4935      	ldr	r1, [pc, #212]	; (8003b80 <HAL_GPIO_Init+0x304>)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	; (8003ba0 <HAL_GPIO_Init+0x324>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ada:	4a31      	ldr	r2, [pc, #196]	; (8003ba0 <HAL_GPIO_Init+0x324>)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ae0:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <HAL_GPIO_Init+0x324>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4013      	ands	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b04:	4a26      	ldr	r2, [pc, #152]	; (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b0a:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	43db      	mvns	r3, r3
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	4013      	ands	r3, r2
 8003b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b2e:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b34:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	4013      	ands	r3, r2
 8003b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b58:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <HAL_GPIO_Init+0x324>)
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	3301      	adds	r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	2b0f      	cmp	r3, #15
 8003b68:	f67f ae96 	bls.w	8003898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	3724      	adds	r7, #36	; 0x24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40013800 	.word	0x40013800
 8003b84:	40020000 	.word	0x40020000
 8003b88:	40020400 	.word	0x40020400
 8003b8c:	40020800 	.word	0x40020800
 8003b90:	40020c00 	.word	0x40020c00
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40021400 	.word	0x40021400
 8003b9c:	40021800 	.word	0x40021800
 8003ba0:	40013c00 	.word	0x40013c00

08003ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	807b      	strh	r3, [r7, #2]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bb4:	787b      	ldrb	r3, [r7, #1]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bba:	887a      	ldrh	r2, [r7, #2]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bc0:	e003      	b.n	8003bca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bc2:	887b      	ldrh	r3, [r7, #2]
 8003bc4:	041a      	lsls	r2, r3, #16
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	619a      	str	r2, [r3, #24]
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
	...

08003bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003be4:	695a      	ldr	r2, [r3, #20]
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bee:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bf4:	88fb      	ldrh	r3, [r7, #6]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fbf0 	bl	80023dc <HAL_GPIO_EXTI_Callback>
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40013c00 	.word	0x40013c00

08003c08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e12b      	b.n	8003e72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f7fe fda4 	bl	800277c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2224      	movs	r2, #36	; 0x24
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 0201 	bic.w	r2, r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f000 fa52 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 8003c70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	4a81      	ldr	r2, [pc, #516]	; (8003e7c <HAL_I2C_Init+0x274>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d807      	bhi.n	8003c8c <HAL_I2C_Init+0x84>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4a80      	ldr	r2, [pc, #512]	; (8003e80 <HAL_I2C_Init+0x278>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	bf94      	ite	ls
 8003c84:	2301      	movls	r3, #1
 8003c86:	2300      	movhi	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e006      	b.n	8003c9a <HAL_I2C_Init+0x92>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4a7d      	ldr	r2, [pc, #500]	; (8003e84 <HAL_I2C_Init+0x27c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	bf94      	ite	ls
 8003c94:	2301      	movls	r3, #1
 8003c96:	2300      	movhi	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e0e7      	b.n	8003e72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	4a78      	ldr	r2, [pc, #480]	; (8003e88 <HAL_I2C_Init+0x280>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	0c9b      	lsrs	r3, r3, #18
 8003cac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a6a      	ldr	r2, [pc, #424]	; (8003e7c <HAL_I2C_Init+0x274>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d802      	bhi.n	8003cdc <HAL_I2C_Init+0xd4>
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	e009      	b.n	8003cf0 <HAL_I2C_Init+0xe8>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	4a69      	ldr	r2, [pc, #420]	; (8003e8c <HAL_I2C_Init+0x284>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	099b      	lsrs	r3, r3, #6
 8003cee:	3301      	adds	r3, #1
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	6812      	ldr	r2, [r2, #0]
 8003cf4:	430b      	orrs	r3, r1
 8003cf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69db      	ldr	r3, [r3, #28]
 8003cfe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	495c      	ldr	r1, [pc, #368]	; (8003e7c <HAL_I2C_Init+0x274>)
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	d819      	bhi.n	8003d44 <HAL_I2C_Init+0x13c>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1e59      	subs	r1, r3, #1
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d1e:	1c59      	adds	r1, r3, #1
 8003d20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d24:	400b      	ands	r3, r1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_I2C_Init+0x138>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1e59      	subs	r1, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d38:	3301      	adds	r3, #1
 8003d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3e:	e051      	b.n	8003de4 <HAL_I2C_Init+0x1dc>
 8003d40:	2304      	movs	r3, #4
 8003d42:	e04f      	b.n	8003de4 <HAL_I2C_Init+0x1dc>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d111      	bne.n	8003d70 <HAL_I2C_Init+0x168>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	1e58      	subs	r0, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	440b      	add	r3, r1
 8003d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e012      	b.n	8003d96 <HAL_I2C_Init+0x18e>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1e58      	subs	r0, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6859      	ldr	r1, [r3, #4]
 8003d78:	460b      	mov	r3, r1
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	0099      	lsls	r1, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d86:	3301      	adds	r3, #1
 8003d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Init+0x196>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e022      	b.n	8003de4 <HAL_I2C_Init+0x1dc>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10e      	bne.n	8003dc4 <HAL_I2C_Init+0x1bc>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1e58      	subs	r0, r3, #1
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	460b      	mov	r3, r1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	440b      	add	r3, r1
 8003db4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db8:	3301      	adds	r3, #1
 8003dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc2:	e00f      	b.n	8003de4 <HAL_I2C_Init+0x1dc>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1e58      	subs	r0, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6859      	ldr	r1, [r3, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	0099      	lsls	r1, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dda:	3301      	adds	r3, #1
 8003ddc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003de0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	6809      	ldr	r1, [r1, #0]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6911      	ldr	r1, [r2, #16]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68d2      	ldr	r2, [r2, #12]
 8003e1e:	4311      	orrs	r1, r2
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	430b      	orrs	r3, r1
 8003e26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0201 	orr.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	000186a0 	.word	0x000186a0
 8003e80:	001e847f 	.word	0x001e847f
 8003e84:	003d08ff 	.word	0x003d08ff
 8003e88:	431bde83 	.word	0x431bde83
 8003e8c:	10624dd3 	.word	0x10624dd3

08003e90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	4a1f      	ldr	r2, [pc, #124]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x90>)
 8003ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eaa:	4b1d      	ldr	r3, [pc, #116]	; (8003f20 <HAL_PWREx_EnableOverDrive+0x90>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003eb6:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <HAL_PWREx_EnableOverDrive+0x94>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ebc:	f7ff f92a 	bl	8003114 <HAL_GetTick>
 8003ec0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ec2:	e009      	b.n	8003ed8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ec4:	f7ff f926 	bl	8003114 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ed2:	d901      	bls.n	8003ed8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e01f      	b.n	8003f18 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ed8:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee4:	d1ee      	bne.n	8003ec4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003eec:	f7ff f912 	bl	8003114 <HAL_GetTick>
 8003ef0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ef2:	e009      	b.n	8003f08 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ef4:	f7ff f90e 	bl	8003114 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f02:	d901      	bls.n	8003f08 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e007      	b.n	8003f18 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f08:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f14:	d1ee      	bne.n	8003ef4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40023800 	.word	0x40023800
 8003f24:	420e0040 	.word	0x420e0040
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	420e0044 	.word	0x420e0044

08003f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e0cc      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f44:	4b68      	ldr	r3, [pc, #416]	; (80040e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d90c      	bls.n	8003f6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b65      	ldr	r3, [pc, #404]	; (80040e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5a:	4b63      	ldr	r3, [pc, #396]	; (80040e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 030f 	and.w	r3, r3, #15
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0b8      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0302 	and.w	r3, r3, #2
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d020      	beq.n	8003fba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f84:	4b59      	ldr	r3, [pc, #356]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	4a58      	ldr	r2, [pc, #352]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0308 	and.w	r3, r3, #8
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f9c:	4b53      	ldr	r3, [pc, #332]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	4a52      	ldr	r2, [pc, #328]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa8:	4b50      	ldr	r3, [pc, #320]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	494d      	ldr	r1, [pc, #308]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d044      	beq.n	8004050 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d107      	bne.n	8003fde <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b47      	ldr	r3, [pc, #284]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d119      	bne.n	800400e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e07f      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d003      	beq.n	8003fee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fee:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d109      	bne.n	800400e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e06f      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ffe:	4b3b      	ldr	r3, [pc, #236]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e067      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800400e:	4b37      	ldr	r3, [pc, #220]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f023 0203 	bic.w	r2, r3, #3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4934      	ldr	r1, [pc, #208]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 800401c:	4313      	orrs	r3, r2
 800401e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004020:	f7ff f878 	bl	8003114 <HAL_GetTick>
 8004024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004026:	e00a      	b.n	800403e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004028:	f7ff f874 	bl	8003114 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	f241 3288 	movw	r2, #5000	; 0x1388
 8004036:	4293      	cmp	r3, r2
 8004038:	d901      	bls.n	800403e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e04f      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	4b2b      	ldr	r3, [pc, #172]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 020c 	and.w	r2, r3, #12
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	429a      	cmp	r2, r3
 800404e:	d1eb      	bne.n	8004028 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004050:	4b25      	ldr	r3, [pc, #148]	; (80040e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d20c      	bcs.n	8004078 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405e:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004066:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <HAL_RCC_ClockConfig+0x1b8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d001      	beq.n	8004078 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e032      	b.n	80040de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0304 	and.w	r3, r3, #4
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4916      	ldr	r1, [pc, #88]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040a2:	4b12      	ldr	r3, [pc, #72]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	490e      	ldr	r1, [pc, #56]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040b6:	f000 f855 	bl	8004164 <HAL_RCC_GetSysClockFreq>
 80040ba:	4602      	mov	r2, r0
 80040bc:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	091b      	lsrs	r3, r3, #4
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	490a      	ldr	r1, [pc, #40]	; (80040f0 <HAL_RCC_ClockConfig+0x1c0>)
 80040c8:	5ccb      	ldrb	r3, [r1, r3]
 80040ca:	fa22 f303 	lsr.w	r3, r2, r3
 80040ce:	4a09      	ldr	r2, [pc, #36]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 80040d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe ffd8 	bl	800308c <HAL_InitTick>

  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40023c00 	.word	0x40023c00
 80040ec:	40023800 	.word	0x40023800
 80040f0:	0800b3a8 	.word	0x0800b3a8
 80040f4:	20000008 	.word	0x20000008
 80040f8:	2000000c 	.word	0x2000000c

080040fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <HAL_RCC_GetHCLKFreq+0x14>)
 8004102:	681b      	ldr	r3, [r3, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000008 	.word	0x20000008

08004114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004118:	f7ff fff0 	bl	80040fc <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	0a9b      	lsrs	r3, r3, #10
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4903      	ldr	r1, [pc, #12]	; (8004138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40023800 	.word	0x40023800
 8004138:	0800b3b8 	.word	0x0800b3b8

0800413c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004140:	f7ff ffdc 	bl	80040fc <HAL_RCC_GetHCLKFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	0b5b      	lsrs	r3, r3, #13
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	4903      	ldr	r1, [pc, #12]	; (8004160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004158:	4618      	mov	r0, r3
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40023800 	.word	0x40023800
 8004160:	0800b3b8 	.word	0x0800b3b8

08004164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004168:	b0ae      	sub	sp, #184	; 0xb8
 800416a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800418a:	4bcb      	ldr	r3, [pc, #812]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b0c      	cmp	r3, #12
 8004194:	f200 8206 	bhi.w	80045a4 <HAL_RCC_GetSysClockFreq+0x440>
 8004198:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080045a5 	.word	0x080045a5
 80041a8:	080045a5 	.word	0x080045a5
 80041ac:	080045a5 	.word	0x080045a5
 80041b0:	080041dd 	.word	0x080041dd
 80041b4:	080045a5 	.word	0x080045a5
 80041b8:	080045a5 	.word	0x080045a5
 80041bc:	080045a5 	.word	0x080045a5
 80041c0:	080041e5 	.word	0x080041e5
 80041c4:	080045a5 	.word	0x080045a5
 80041c8:	080045a5 	.word	0x080045a5
 80041cc:	080045a5 	.word	0x080045a5
 80041d0:	080043d5 	.word	0x080043d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041d4:	4bb9      	ldr	r3, [pc, #740]	; (80044bc <HAL_RCC_GetSysClockFreq+0x358>)
 80041d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80041da:	e1e7      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041dc:	4bb8      	ldr	r3, [pc, #736]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80041de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80041e2:	e1e3      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041e4:	4bb4      	ldr	r3, [pc, #720]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041f0:	4bb1      	ldr	r3, [pc, #708]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d071      	beq.n	80042e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fc:	4bae      	ldr	r3, [pc, #696]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	099b      	lsrs	r3, r3, #6
 8004202:	2200      	movs	r2, #0
 8004204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004208:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800420c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004214:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004218:	2300      	movs	r3, #0
 800421a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800421e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004222:	4622      	mov	r2, r4
 8004224:	462b      	mov	r3, r5
 8004226:	f04f 0000 	mov.w	r0, #0
 800422a:	f04f 0100 	mov.w	r1, #0
 800422e:	0159      	lsls	r1, r3, #5
 8004230:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004234:	0150      	lsls	r0, r2, #5
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4621      	mov	r1, r4
 800423c:	1a51      	subs	r1, r2, r1
 800423e:	6439      	str	r1, [r7, #64]	; 0x40
 8004240:	4629      	mov	r1, r5
 8004242:	eb63 0301 	sbc.w	r3, r3, r1
 8004246:	647b      	str	r3, [r7, #68]	; 0x44
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004254:	4649      	mov	r1, r9
 8004256:	018b      	lsls	r3, r1, #6
 8004258:	4641      	mov	r1, r8
 800425a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800425e:	4641      	mov	r1, r8
 8004260:	018a      	lsls	r2, r1, #6
 8004262:	4641      	mov	r1, r8
 8004264:	1a51      	subs	r1, r2, r1
 8004266:	63b9      	str	r1, [r7, #56]	; 0x38
 8004268:	4649      	mov	r1, r9
 800426a:	eb63 0301 	sbc.w	r3, r3, r1
 800426e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 0300 	mov.w	r3, #0
 8004278:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800427c:	4649      	mov	r1, r9
 800427e:	00cb      	lsls	r3, r1, #3
 8004280:	4641      	mov	r1, r8
 8004282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004286:	4641      	mov	r1, r8
 8004288:	00ca      	lsls	r2, r1, #3
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	4603      	mov	r3, r0
 8004290:	4622      	mov	r2, r4
 8004292:	189b      	adds	r3, r3, r2
 8004294:	633b      	str	r3, [r7, #48]	; 0x30
 8004296:	462b      	mov	r3, r5
 8004298:	460a      	mov	r2, r1
 800429a:	eb42 0303 	adc.w	r3, r2, r3
 800429e:	637b      	str	r3, [r7, #52]	; 0x34
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042ac:	4629      	mov	r1, r5
 80042ae:	024b      	lsls	r3, r1, #9
 80042b0:	4621      	mov	r1, r4
 80042b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042b6:	4621      	mov	r1, r4
 80042b8:	024a      	lsls	r2, r1, #9
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80042d0:	f7fc fcda 	bl	8000c88 <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4613      	mov	r3, r2
 80042da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042de:	e067      	b.n	80043b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e0:	4b75      	ldr	r3, [pc, #468]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	099b      	lsrs	r3, r3, #6
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042ec:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80042f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80042fa:	2300      	movs	r3, #0
 80042fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80042fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004302:	4622      	mov	r2, r4
 8004304:	462b      	mov	r3, r5
 8004306:	f04f 0000 	mov.w	r0, #0
 800430a:	f04f 0100 	mov.w	r1, #0
 800430e:	0159      	lsls	r1, r3, #5
 8004310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004314:	0150      	lsls	r0, r2, #5
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4621      	mov	r1, r4
 800431c:	1a51      	subs	r1, r2, r1
 800431e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004320:	4629      	mov	r1, r5
 8004322:	eb63 0301 	sbc.w	r3, r3, r1
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004328:	f04f 0200 	mov.w	r2, #0
 800432c:	f04f 0300 	mov.w	r3, #0
 8004330:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004334:	4649      	mov	r1, r9
 8004336:	018b      	lsls	r3, r1, #6
 8004338:	4641      	mov	r1, r8
 800433a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800433e:	4641      	mov	r1, r8
 8004340:	018a      	lsls	r2, r1, #6
 8004342:	4641      	mov	r1, r8
 8004344:	ebb2 0a01 	subs.w	sl, r2, r1
 8004348:	4649      	mov	r1, r9
 800434a:	eb63 0b01 	sbc.w	fp, r3, r1
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800435a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800435e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004362:	4692      	mov	sl, r2
 8004364:	469b      	mov	fp, r3
 8004366:	4623      	mov	r3, r4
 8004368:	eb1a 0303 	adds.w	r3, sl, r3
 800436c:	623b      	str	r3, [r7, #32]
 800436e:	462b      	mov	r3, r5
 8004370:	eb4b 0303 	adc.w	r3, fp, r3
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004382:	4629      	mov	r1, r5
 8004384:	028b      	lsls	r3, r1, #10
 8004386:	4621      	mov	r1, r4
 8004388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800438c:	4621      	mov	r1, r4
 800438e:	028a      	lsls	r2, r1, #10
 8004390:	4610      	mov	r0, r2
 8004392:	4619      	mov	r1, r3
 8004394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004398:	2200      	movs	r2, #0
 800439a:	673b      	str	r3, [r7, #112]	; 0x70
 800439c:	677a      	str	r2, [r7, #116]	; 0x74
 800439e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80043a2:	f7fc fc71 	bl	8000c88 <__aeabi_uldivmod>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4613      	mov	r3, r2
 80043ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043b0:	4b41      	ldr	r3, [pc, #260]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	3301      	adds	r3, #1
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80043c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80043ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80043d2:	e0eb      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d4:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043e0:	4b35      	ldr	r3, [pc, #212]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d06b      	beq.n	80044c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ec:	4b32      	ldr	r3, [pc, #200]	; (80044b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	099b      	lsrs	r3, r3, #6
 80043f2:	2200      	movs	r2, #0
 80043f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80043f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043fe:	663b      	str	r3, [r7, #96]	; 0x60
 8004400:	2300      	movs	r3, #0
 8004402:	667b      	str	r3, [r7, #100]	; 0x64
 8004404:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004408:	4622      	mov	r2, r4
 800440a:	462b      	mov	r3, r5
 800440c:	f04f 0000 	mov.w	r0, #0
 8004410:	f04f 0100 	mov.w	r1, #0
 8004414:	0159      	lsls	r1, r3, #5
 8004416:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800441a:	0150      	lsls	r0, r2, #5
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4621      	mov	r1, r4
 8004422:	1a51      	subs	r1, r2, r1
 8004424:	61b9      	str	r1, [r7, #24]
 8004426:	4629      	mov	r1, r5
 8004428:	eb63 0301 	sbc.w	r3, r3, r1
 800442c:	61fb      	str	r3, [r7, #28]
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800443a:	4659      	mov	r1, fp
 800443c:	018b      	lsls	r3, r1, #6
 800443e:	4651      	mov	r1, sl
 8004440:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004444:	4651      	mov	r1, sl
 8004446:	018a      	lsls	r2, r1, #6
 8004448:	4651      	mov	r1, sl
 800444a:	ebb2 0801 	subs.w	r8, r2, r1
 800444e:	4659      	mov	r1, fp
 8004450:	eb63 0901 	sbc.w	r9, r3, r1
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004460:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004464:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004468:	4690      	mov	r8, r2
 800446a:	4699      	mov	r9, r3
 800446c:	4623      	mov	r3, r4
 800446e:	eb18 0303 	adds.w	r3, r8, r3
 8004472:	613b      	str	r3, [r7, #16]
 8004474:	462b      	mov	r3, r5
 8004476:	eb49 0303 	adc.w	r3, r9, r3
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004488:	4629      	mov	r1, r5
 800448a:	024b      	lsls	r3, r1, #9
 800448c:	4621      	mov	r1, r4
 800448e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004492:	4621      	mov	r1, r4
 8004494:	024a      	lsls	r2, r1, #9
 8004496:	4610      	mov	r0, r2
 8004498:	4619      	mov	r1, r3
 800449a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800449e:	2200      	movs	r2, #0
 80044a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80044a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80044a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044a8:	f7fc fbee 	bl	8000c88 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044b6:	e065      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x420>
 80044b8:	40023800 	.word	0x40023800
 80044bc:	00f42400 	.word	0x00f42400
 80044c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c4:	4b3d      	ldr	r3, [pc, #244]	; (80045bc <HAL_RCC_GetSysClockFreq+0x458>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	099b      	lsrs	r3, r3, #6
 80044ca:	2200      	movs	r2, #0
 80044cc:	4618      	mov	r0, r3
 80044ce:	4611      	mov	r1, r2
 80044d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044d4:	653b      	str	r3, [r7, #80]	; 0x50
 80044d6:	2300      	movs	r3, #0
 80044d8:	657b      	str	r3, [r7, #84]	; 0x54
 80044da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80044de:	4642      	mov	r2, r8
 80044e0:	464b      	mov	r3, r9
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f04f 0100 	mov.w	r1, #0
 80044ea:	0159      	lsls	r1, r3, #5
 80044ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f0:	0150      	lsls	r0, r2, #5
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4641      	mov	r1, r8
 80044f8:	1a51      	subs	r1, r2, r1
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	4649      	mov	r1, r9
 80044fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004510:	4659      	mov	r1, fp
 8004512:	018b      	lsls	r3, r1, #6
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800451a:	4651      	mov	r1, sl
 800451c:	018a      	lsls	r2, r1, #6
 800451e:	4651      	mov	r1, sl
 8004520:	1a54      	subs	r4, r2, r1
 8004522:	4659      	mov	r1, fp
 8004524:	eb63 0501 	sbc.w	r5, r3, r1
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	00eb      	lsls	r3, r5, #3
 8004532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004536:	00e2      	lsls	r2, r4, #3
 8004538:	4614      	mov	r4, r2
 800453a:	461d      	mov	r5, r3
 800453c:	4643      	mov	r3, r8
 800453e:	18e3      	adds	r3, r4, r3
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	464b      	mov	r3, r9
 8004544:	eb45 0303 	adc.w	r3, r5, r3
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004556:	4629      	mov	r1, r5
 8004558:	028b      	lsls	r3, r1, #10
 800455a:	4621      	mov	r1, r4
 800455c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004560:	4621      	mov	r1, r4
 8004562:	028a      	lsls	r2, r1, #10
 8004564:	4610      	mov	r0, r2
 8004566:	4619      	mov	r1, r3
 8004568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800456c:	2200      	movs	r2, #0
 800456e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004570:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004572:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004576:	f7fc fb87 	bl	8000c88 <__aeabi_uldivmod>
 800457a:	4602      	mov	r2, r0
 800457c:	460b      	mov	r3, r1
 800457e:	4613      	mov	r3, r2
 8004580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004584:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <HAL_RCC_GetSysClockFreq+0x458>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	0f1b      	lsrs	r3, r3, #28
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004592:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004596:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800459a:	fbb2 f3f3 	udiv	r3, r2, r3
 800459e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045a2:	e003      	b.n	80045ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80045a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80045aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	37b8      	adds	r7, #184	; 0xb8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800
 80045c0:	00f42400 	.word	0x00f42400

080045c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e28d      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 8083 	beq.w	80046ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80045e4:	4b94      	ldr	r3, [pc, #592]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 030c 	and.w	r3, r3, #12
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	d019      	beq.n	8004624 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045f0:	4b91      	ldr	r3, [pc, #580]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	d106      	bne.n	800460a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80045fc:	4b8e      	ldr	r3, [pc, #568]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004608:	d00c      	beq.n	8004624 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800460a:	4b8b      	ldr	r3, [pc, #556]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004612:	2b0c      	cmp	r3, #12
 8004614:	d112      	bne.n	800463c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004616:	4b88      	ldr	r3, [pc, #544]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004622:	d10b      	bne.n	800463c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004624:	4b84      	ldr	r3, [pc, #528]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d05b      	beq.n	80046e8 <HAL_RCC_OscConfig+0x124>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d157      	bne.n	80046e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e25a      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004644:	d106      	bne.n	8004654 <HAL_RCC_OscConfig+0x90>
 8004646:	4b7c      	ldr	r3, [pc, #496]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a7b      	ldr	r2, [pc, #492]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 800464c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e01d      	b.n	8004690 <HAL_RCC_OscConfig+0xcc>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800465c:	d10c      	bne.n	8004678 <HAL_RCC_OscConfig+0xb4>
 800465e:	4b76      	ldr	r3, [pc, #472]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a75      	ldr	r2, [pc, #468]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 8004664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004668:	6013      	str	r3, [r2, #0]
 800466a:	4b73      	ldr	r3, [pc, #460]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a72      	ldr	r2, [pc, #456]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 8004670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	e00b      	b.n	8004690 <HAL_RCC_OscConfig+0xcc>
 8004678:	4b6f      	ldr	r3, [pc, #444]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a6e      	ldr	r2, [pc, #440]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 800467e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	4b6c      	ldr	r3, [pc, #432]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a6b      	ldr	r2, [pc, #428]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 800468a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800468e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d013      	beq.n	80046c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fe fd3c 	bl	8003114 <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046a0:	f7fe fd38 	bl	8003114 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b64      	cmp	r3, #100	; 0x64
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e21f      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046b2:	4b61      	ldr	r3, [pc, #388]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0xdc>
 80046be:	e014      	b.n	80046ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fe fd28 	bl	8003114 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046c8:	f7fe fd24 	bl	8003114 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b64      	cmp	r3, #100	; 0x64
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e20b      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046da:	4b57      	ldr	r3, [pc, #348]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x104>
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d06f      	beq.n	80047d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80046f6:	4b50      	ldr	r3, [pc, #320]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 030c 	and.w	r3, r3, #12
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d017      	beq.n	8004732 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004702:	4b4d      	ldr	r3, [pc, #308]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800470a:	2b08      	cmp	r3, #8
 800470c:	d105      	bne.n	800471a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800470e:	4b4a      	ldr	r3, [pc, #296]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00b      	beq.n	8004732 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471a:	4b47      	ldr	r3, [pc, #284]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004722:	2b0c      	cmp	r3, #12
 8004724:	d11c      	bne.n	8004760 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004726:	4b44      	ldr	r3, [pc, #272]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d116      	bne.n	8004760 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004732:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <HAL_RCC_OscConfig+0x186>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d001      	beq.n	800474a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e1d3      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800474a:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	4937      	ldr	r1, [pc, #220]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 800475a:	4313      	orrs	r3, r2
 800475c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475e:	e03a      	b.n	80047d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004768:	4b34      	ldr	r3, [pc, #208]	; (800483c <HAL_RCC_OscConfig+0x278>)
 800476a:	2201      	movs	r2, #1
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fe fcd1 	bl	8003114 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004776:	f7fe fccd 	bl	8003114 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e1b4      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004788:	4b2b      	ldr	r3, [pc, #172]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004794:	4b28      	ldr	r3, [pc, #160]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4925      	ldr	r1, [pc, #148]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	600b      	str	r3, [r1, #0]
 80047a8:	e015      	b.n	80047d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047aa:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCC_OscConfig+0x278>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b0:	f7fe fcb0 	bl	8003114 <HAL_GetTick>
 80047b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b8:	f7fe fcac 	bl	8003114 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e193      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1f0      	bne.n	80047b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d036      	beq.n	8004850 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d016      	beq.n	8004818 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ea:	4b15      	ldr	r3, [pc, #84]	; (8004840 <HAL_RCC_OscConfig+0x27c>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f0:	f7fe fc90 	bl	8003114 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f8:	f7fe fc8c 	bl	8003114 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e173      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCC_OscConfig+0x274>)
 800480c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCC_OscConfig+0x234>
 8004816:	e01b      	b.n	8004850 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004818:	4b09      	ldr	r3, [pc, #36]	; (8004840 <HAL_RCC_OscConfig+0x27c>)
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481e:	f7fe fc79 	bl	8003114 <HAL_GetTick>
 8004822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004824:	e00e      	b.n	8004844 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004826:	f7fe fc75 	bl	8003114 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	2b02      	cmp	r3, #2
 8004832:	d907      	bls.n	8004844 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e15c      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
 8004838:	40023800 	.word	0x40023800
 800483c:	42470000 	.word	0x42470000
 8004840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004844:	4b8a      	ldr	r3, [pc, #552]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1ea      	bne.n	8004826 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8097 	beq.w	800498c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004862:	4b83      	ldr	r3, [pc, #524]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10f      	bne.n	800488e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800486e:	2300      	movs	r3, #0
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	4b7f      	ldr	r3, [pc, #508]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	4a7e      	ldr	r2, [pc, #504]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487c:	6413      	str	r3, [r2, #64]	; 0x40
 800487e:	4b7c      	ldr	r3, [pc, #496]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800488a:	2301      	movs	r3, #1
 800488c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488e:	4b79      	ldr	r3, [pc, #484]	; (8004a74 <HAL_RCC_OscConfig+0x4b0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004896:	2b00      	cmp	r3, #0
 8004898:	d118      	bne.n	80048cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800489a:	4b76      	ldr	r3, [pc, #472]	; (8004a74 <HAL_RCC_OscConfig+0x4b0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a75      	ldr	r2, [pc, #468]	; (8004a74 <HAL_RCC_OscConfig+0x4b0>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048a6:	f7fe fc35 	bl	8003114 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ae:	f7fe fc31 	bl	8003114 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e118      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048c0:	4b6c      	ldr	r3, [pc, #432]	; (8004a74 <HAL_RCC_OscConfig+0x4b0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f0      	beq.n	80048ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d106      	bne.n	80048e2 <HAL_RCC_OscConfig+0x31e>
 80048d4:	4b66      	ldr	r3, [pc, #408]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d8:	4a65      	ldr	r2, [pc, #404]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6713      	str	r3, [r2, #112]	; 0x70
 80048e0:	e01c      	b.n	800491c <HAL_RCC_OscConfig+0x358>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	2b05      	cmp	r3, #5
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0x340>
 80048ea:	4b61      	ldr	r3, [pc, #388]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	4a60      	ldr	r2, [pc, #384]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 80048f0:	f043 0304 	orr.w	r3, r3, #4
 80048f4:	6713      	str	r3, [r2, #112]	; 0x70
 80048f6:	4b5e      	ldr	r3, [pc, #376]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 80048f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048fa:	4a5d      	ldr	r2, [pc, #372]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	6713      	str	r3, [r2, #112]	; 0x70
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0x358>
 8004904:	4b5a      	ldr	r3, [pc, #360]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004908:	4a59      	ldr	r2, [pc, #356]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	6713      	str	r3, [r2, #112]	; 0x70
 8004910:	4b57      	ldr	r3, [pc, #348]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	4a56      	ldr	r2, [pc, #344]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004916:	f023 0304 	bic.w	r3, r3, #4
 800491a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d015      	beq.n	8004950 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fe fbf6 	bl	8003114 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800492a:	e00a      	b.n	8004942 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492c:	f7fe fbf2 	bl	8003114 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	; 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e0d7      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004942:	4b4b      	ldr	r3, [pc, #300]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0ee      	beq.n	800492c <HAL_RCC_OscConfig+0x368>
 800494e:	e014      	b.n	800497a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fe fbe0 	bl	8003114 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004956:	e00a      	b.n	800496e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004958:	f7fe fbdc 	bl	8003114 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	f241 3288 	movw	r2, #5000	; 0x1388
 8004966:	4293      	cmp	r3, r2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e0c1      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496e:	4b40      	ldr	r3, [pc, #256]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1ee      	bne.n	8004958 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800497a:	7dfb      	ldrb	r3, [r7, #23]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d105      	bne.n	800498c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004980:	4b3b      	ldr	r3, [pc, #236]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	4a3a      	ldr	r2, [pc, #232]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 80ad 	beq.w	8004af0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004996:	4b36      	ldr	r3, [pc, #216]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d060      	beq.n	8004a64 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d145      	bne.n	8004a36 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049aa:	4b33      	ldr	r3, [pc, #204]	; (8004a78 <HAL_RCC_OscConfig+0x4b4>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b0:	f7fe fbb0 	bl	8003114 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fe fbac 	bl	8003114 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e093      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ca:	4b29      	ldr	r3, [pc, #164]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69da      	ldr	r2, [r3, #28]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	019b      	lsls	r3, r3, #6
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	3b01      	subs	r3, #1
 80049f0:	041b      	lsls	r3, r3, #16
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	061b      	lsls	r3, r3, #24
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	071b      	lsls	r3, r3, #28
 8004a02:	491b      	ldr	r1, [pc, #108]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a08:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <HAL_RCC_OscConfig+0x4b4>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fe fb81 	bl	8003114 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a16:	f7fe fb7d 	bl	8003114 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e064      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a28:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x452>
 8004a34:	e05c      	b.n	8004af0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a36:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <HAL_RCC_OscConfig+0x4b4>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fe fb6a 	bl	8003114 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fe fb66 	bl	8003114 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e04d      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a56:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <HAL_RCC_OscConfig+0x4ac>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x480>
 8004a62:	e045      	b.n	8004af0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d107      	bne.n	8004a7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e040      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
 8004a70:	40023800 	.word	0x40023800
 8004a74:	40007000 	.word	0x40007000
 8004a78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a7c:	4b1f      	ldr	r3, [pc, #124]	; (8004afc <HAL_RCC_OscConfig+0x538>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d030      	beq.n	8004aec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d129      	bne.n	8004aec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d122      	bne.n	8004aec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004aac:	4013      	ands	r3, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ab2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d119      	bne.n	8004aec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	085b      	lsrs	r3, r3, #1
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d10f      	bne.n	8004aec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d107      	bne.n	8004aec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800

08004b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e07b      	b.n	8004c0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d108      	bne.n	8004b2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b22:	d009      	beq.n	8004b38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	61da      	str	r2, [r3, #28]
 8004b2a:	e005      	b.n	8004b38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fd fee8 	bl	8002928 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	431a      	orrs	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbc:	ea42 0103 	orr.w	r1, r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	f003 0104 	and.w	r1, r3, #4
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	f003 0210 	and.w	r2, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b088      	sub	sp, #32
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d101      	bne.n	8004c34 <HAL_SPI_Transmit+0x22>
 8004c30:	2302      	movs	r3, #2
 8004c32:	e126      	b.n	8004e82 <HAL_SPI_Transmit+0x270>
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c3c:	f7fe fa6a 	bl	8003114 <HAL_GetTick>
 8004c40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d002      	beq.n	8004c58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c52:	2302      	movs	r3, #2
 8004c54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c56:	e10b      	b.n	8004e70 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_SPI_Transmit+0x52>
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d102      	bne.n	8004c6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c68:	e102      	b.n	8004e70 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	88fa      	ldrh	r2, [r7, #6]
 8004c82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	88fa      	ldrh	r2, [r7, #6]
 8004c88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb0:	d10f      	bne.n	8004cd2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d007      	beq.n	8004cf0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cf8:	d14b      	bne.n	8004d92 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_SPI_Transmit+0xf6>
 8004d02:	8afb      	ldrh	r3, [r7, #22]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d13e      	bne.n	8004d86 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	881a      	ldrh	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d18:	1c9a      	adds	r2, r3, #2
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b01      	subs	r3, #1
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d2c:	e02b      	b.n	8004d86 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d112      	bne.n	8004d62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	881a      	ldrh	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	1c9a      	adds	r2, r3, #2
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d60:	e011      	b.n	8004d86 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d62:	f7fe f9d7 	bl	8003114 <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d803      	bhi.n	8004d7a <HAL_SPI_Transmit+0x168>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d102      	bne.n	8004d80 <HAL_SPI_Transmit+0x16e>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d102      	bne.n	8004d86 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d84:	e074      	b.n	8004e70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ce      	bne.n	8004d2e <HAL_SPI_Transmit+0x11c>
 8004d90:	e04c      	b.n	8004e2c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_SPI_Transmit+0x18e>
 8004d9a:	8afb      	ldrh	r3, [r7, #22]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d140      	bne.n	8004e22 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	7812      	ldrb	r2, [r2, #0]
 8004dac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004dc6:	e02c      	b.n	8004e22 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d113      	bne.n	8004dfe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	330c      	adds	r3, #12
 8004de0:	7812      	ldrb	r2, [r2, #0]
 8004de2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dfc:	e011      	b.n	8004e22 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dfe:	f7fe f989 	bl	8003114 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d803      	bhi.n	8004e16 <HAL_SPI_Transmit+0x204>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d102      	bne.n	8004e1c <HAL_SPI_Transmit+0x20a>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d102      	bne.n	8004e22 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e20:	e026      	b.n	8004e70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1cd      	bne.n	8004dc8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fa55 	bl	80052e0 <SPI_EndRxTxTransaction>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e000      	b.n	8004e70 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e80:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3720      	adds	r7, #32
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b08c      	sub	sp, #48	; 0x30
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	60f8      	str	r0, [r7, #12]
 8004e92:	60b9      	str	r1, [r7, #8]
 8004e94:	607a      	str	r2, [r7, #4]
 8004e96:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_SPI_TransmitReceive+0x26>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e18a      	b.n	80051c6 <HAL_SPI_TransmitReceive+0x33c>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eb8:	f7fe f92c 	bl	8003114 <HAL_GetTick>
 8004ebc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ece:	887b      	ldrh	r3, [r7, #2]
 8004ed0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d00f      	beq.n	8004efa <HAL_SPI_TransmitReceive+0x70>
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ee0:	d107      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d103      	bne.n	8004ef2 <HAL_SPI_TransmitReceive+0x68>
 8004eea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d003      	beq.n	8004efa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ef8:	e15b      	b.n	80051b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <HAL_SPI_TransmitReceive+0x82>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d002      	beq.n	8004f0c <HAL_SPI_TransmitReceive+0x82>
 8004f06:	887b      	ldrh	r3, [r7, #2]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004f12:	e14e      	b.n	80051b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d003      	beq.n	8004f28 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2205      	movs	r2, #5
 8004f24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	887a      	ldrh	r2, [r7, #2]
 8004f38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	887a      	ldrh	r2, [r7, #2]
 8004f3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	887a      	ldrh	r2, [r7, #2]
 8004f4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	887a      	ldrh	r2, [r7, #2]
 8004f50:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f68:	2b40      	cmp	r3, #64	; 0x40
 8004f6a:	d007      	beq.n	8004f7c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f84:	d178      	bne.n	8005078 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_SPI_TransmitReceive+0x10a>
 8004f8e:	8b7b      	ldrh	r3, [r7, #26]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d166      	bne.n	8005062 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f98:	881a      	ldrh	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	1c9a      	adds	r2, r3, #2
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fb8:	e053      	b.n	8005062 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d11b      	bne.n	8005000 <HAL_SPI_TransmitReceive+0x176>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d016      	beq.n	8005000 <HAL_SPI_TransmitReceive+0x176>
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d113      	bne.n	8005000 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	881a      	ldrh	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	1c9a      	adds	r2, r3, #2
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b01      	cmp	r3, #1
 800500c:	d119      	bne.n	8005042 <HAL_SPI_TransmitReceive+0x1b8>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005012:	b29b      	uxth	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d014      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	b292      	uxth	r2, r2
 8005024:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	1c9a      	adds	r2, r3, #2
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800503e:	2301      	movs	r3, #1
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005042:	f7fe f867 	bl	8003114 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800504e:	429a      	cmp	r2, r3
 8005050:	d807      	bhi.n	8005062 <HAL_SPI_TransmitReceive+0x1d8>
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005058:	d003      	beq.n	8005062 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005060:	e0a7      	b.n	80051b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1a6      	bne.n	8004fba <HAL_SPI_TransmitReceive+0x130>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1a1      	bne.n	8004fba <HAL_SPI_TransmitReceive+0x130>
 8005076:	e07c      	b.n	8005172 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <HAL_SPI_TransmitReceive+0x1fc>
 8005080:	8b7b      	ldrh	r3, [r7, #26]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d16b      	bne.n	800515e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	330c      	adds	r3, #12
 8005090:	7812      	ldrb	r2, [r2, #0]
 8005092:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ac:	e057      	b.n	800515e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d11c      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x26c>
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d017      	beq.n	80050f6 <HAL_SPI_TransmitReceive+0x26c>
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d114      	bne.n	80050f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	7812      	ldrb	r2, [r2, #0]
 80050d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d119      	bne.n	8005138 <HAL_SPI_TransmitReceive+0x2ae>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005108:	b29b      	uxth	r3, r3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d014      	beq.n	8005138 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005134:	2301      	movs	r3, #1
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005138:	f7fd ffec 	bl	8003114 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005144:	429a      	cmp	r2, r3
 8005146:	d803      	bhi.n	8005150 <HAL_SPI_TransmitReceive+0x2c6>
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514e:	d102      	bne.n	8005156 <HAL_SPI_TransmitReceive+0x2cc>
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d103      	bne.n	800515e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800515c:	e029      	b.n	80051b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1a2      	bne.n	80050ae <HAL_SPI_TransmitReceive+0x224>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516c:	b29b      	uxth	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d19d      	bne.n	80050ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005174:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 f8b2 	bl	80052e0 <SPI_EndRxTxTransaction>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d006      	beq.n	8005190 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800518e:	e010      	b.n	80051b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10b      	bne.n	80051b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005198:	2300      	movs	r3, #0
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	617b      	str	r3, [r7, #20]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	e000      	b.n	80051b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80051b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80051c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3730      	adds	r7, #48	; 0x30
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	4613      	mov	r3, r2
 80051de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80051e0:	f7fd ff98 	bl	8003114 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	1a9b      	subs	r3, r3, r2
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	4413      	add	r3, r2
 80051ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80051f0:	f7fd ff90 	bl	8003114 <HAL_GetTick>
 80051f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80051f6:	4b39      	ldr	r3, [pc, #228]	; (80052dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	015b      	lsls	r3, r3, #5
 80051fc:	0d1b      	lsrs	r3, r3, #20
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	fb02 f303 	mul.w	r3, r2, r3
 8005204:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005206:	e054      	b.n	80052b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520e:	d050      	beq.n	80052b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005210:	f7fd ff80 	bl	8003114 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	69fa      	ldr	r2, [r7, #28]
 800521c:	429a      	cmp	r2, r3
 800521e:	d902      	bls.n	8005226 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d13d      	bne.n	80052a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005234:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800523e:	d111      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005248:	d004      	beq.n	8005254 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005252:	d107      	bne.n	8005264 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005262:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526c:	d10f      	bne.n	800528e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800527c:	601a      	str	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800528c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e017      	b.n	80052d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	68ba      	ldr	r2, [r7, #8]
 80052be:	429a      	cmp	r2, r3
 80052c0:	bf0c      	ite	eq
 80052c2:	2301      	moveq	r3, #1
 80052c4:	2300      	movne	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d19b      	bne.n	8005208 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3720      	adds	r7, #32
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000008 	.word	0x20000008

080052e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b088      	sub	sp, #32
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052ec:	4b1b      	ldr	r3, [pc, #108]	; (800535c <SPI_EndRxTxTransaction+0x7c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1b      	ldr	r2, [pc, #108]	; (8005360 <SPI_EndRxTxTransaction+0x80>)
 80052f2:	fba2 2303 	umull	r2, r3, r2, r3
 80052f6:	0d5b      	lsrs	r3, r3, #21
 80052f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052fc:	fb02 f303 	mul.w	r3, r2, r3
 8005300:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800530a:	d112      	bne.n	8005332 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2200      	movs	r2, #0
 8005314:	2180      	movs	r1, #128	; 0x80
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f7ff ff5a 	bl	80051d0 <SPI_WaitFlagStateUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d016      	beq.n	8005350 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	f043 0220 	orr.w	r2, r3, #32
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e00f      	b.n	8005352 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	3b01      	subs	r3, #1
 800533c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005348:	2b80      	cmp	r3, #128	; 0x80
 800534a:	d0f2      	beq.n	8005332 <SPI_EndRxTxTransaction+0x52>
 800534c:	e000      	b.n	8005350 <SPI_EndRxTxTransaction+0x70>
        break;
 800534e:	bf00      	nop
  }

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	20000008 	.word	0x20000008
 8005360:	165e9f81 	.word	0x165e9f81

08005364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e041      	b.n	80053fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fd fc1c 	bl	8002bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3304      	adds	r3, #4
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f000 ffe6 	bl	8006374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	d001      	beq.n	800541c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e04e      	b.n	80054ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a23      	ldr	r2, [pc, #140]	; (80054c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d022      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005446:	d01d      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1f      	ldr	r2, [pc, #124]	; (80054cc <HAL_TIM_Base_Start_IT+0xc8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d018      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a1e      	ldr	r2, [pc, #120]	; (80054d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d00e      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d009      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a19      	ldr	r2, [pc, #100]	; (80054dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_TIM_Base_Start_IT+0x80>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a18      	ldr	r2, [pc, #96]	; (80054e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d111      	bne.n	80054a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b06      	cmp	r3, #6
 8005494:	d010      	beq.n	80054b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a6:	e007      	b.n	80054b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800
 80054d4:	40000c00 	.word	0x40000c00
 80054d8:	40010400 	.word	0x40010400
 80054dc:	40014000 	.word	0x40014000
 80054e0:	40001800 	.word	0x40001800

080054e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e041      	b.n	800557a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f839 	bl	8005582 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f000 ff26 	bl	8006374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005582:	b480      	push	{r7}
 8005584:	b083      	sub	sp, #12
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800558a:	bf00      	nop
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d109      	bne.n	80055bc <HAL_TIM_PWM_Start+0x24>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e022      	b.n	8005602 <HAL_TIM_PWM_Start+0x6a>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d109      	bne.n	80055d6 <HAL_TIM_PWM_Start+0x3e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e015      	b.n	8005602 <HAL_TIM_PWM_Start+0x6a>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b08      	cmp	r3, #8
 80055da:	d109      	bne.n	80055f0 <HAL_TIM_PWM_Start+0x58>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e008      	b.n	8005602 <HAL_TIM_PWM_Start+0x6a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e07c      	b.n	8005704 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <HAL_TIM_PWM_Start+0x82>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005618:	e013      	b.n	8005642 <HAL_TIM_PWM_Start+0xaa>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d104      	bne.n	800562a <HAL_TIM_PWM_Start+0x92>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005628:	e00b      	b.n	8005642 <HAL_TIM_PWM_Start+0xaa>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d104      	bne.n	800563a <HAL_TIM_PWM_Start+0xa2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005638:	e003      	b.n	8005642 <HAL_TIM_PWM_Start+0xaa>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2202      	movs	r2, #2
 800563e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2201      	movs	r2, #1
 8005648:	6839      	ldr	r1, [r7, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f001 fb38 	bl	8006cc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a2d      	ldr	r2, [pc, #180]	; (800570c <HAL_TIM_PWM_Start+0x174>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d004      	beq.n	8005664 <HAL_TIM_PWM_Start+0xcc>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a2c      	ldr	r2, [pc, #176]	; (8005710 <HAL_TIM_PWM_Start+0x178>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d101      	bne.n	8005668 <HAL_TIM_PWM_Start+0xd0>
 8005664:	2301      	movs	r3, #1
 8005666:	e000      	b.n	800566a <HAL_TIM_PWM_Start+0xd2>
 8005668:	2300      	movs	r3, #0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d007      	beq.n	800567e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800567c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a22      	ldr	r2, [pc, #136]	; (800570c <HAL_TIM_PWM_Start+0x174>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d022      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005690:	d01d      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1f      	ldr	r2, [pc, #124]	; (8005714 <HAL_TIM_PWM_Start+0x17c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d018      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1d      	ldr	r2, [pc, #116]	; (8005718 <HAL_TIM_PWM_Start+0x180>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1c      	ldr	r2, [pc, #112]	; (800571c <HAL_TIM_PWM_Start+0x184>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00e      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a16      	ldr	r2, [pc, #88]	; (8005710 <HAL_TIM_PWM_Start+0x178>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a18      	ldr	r2, [pc, #96]	; (8005720 <HAL_TIM_PWM_Start+0x188>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_TIM_PWM_Start+0x136>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a16      	ldr	r2, [pc, #88]	; (8005724 <HAL_TIM_PWM_Start+0x18c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d111      	bne.n	80056f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b06      	cmp	r3, #6
 80056de:	d010      	beq.n	8005702 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f0:	e007      	b.n	8005702 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0201 	orr.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40010000 	.word	0x40010000
 8005710:	40010400 	.word	0x40010400
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800
 800571c:	40000c00 	.word	0x40000c00
 8005720:	40014000 	.word	0x40014000
 8005724:	40001800 	.word	0x40001800

08005728 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e041      	b.n	80057be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d106      	bne.n	8005754 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fd f9ec 	bl	8002b2c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	4619      	mov	r1, r3
 8005766:	4610      	mov	r0, r2
 8005768:	f000 fe04 	bl	8006374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_IC_Start+0x1a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	e013      	b.n	800580a <HAL_TIM_IC_Start+0x42>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d104      	bne.n	80057f2 <HAL_TIM_IC_Start+0x2a>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	e00b      	b.n	800580a <HAL_TIM_IC_Start+0x42>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_IC_Start+0x3a>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	e003      	b.n	800580a <HAL_TIM_IC_Start+0x42>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005808:	b2db      	uxtb	r3, r3
 800580a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d104      	bne.n	800581c <HAL_TIM_IC_Start+0x54>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005818:	b2db      	uxtb	r3, r3
 800581a:	e013      	b.n	8005844 <HAL_TIM_IC_Start+0x7c>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b04      	cmp	r3, #4
 8005820:	d104      	bne.n	800582c <HAL_TIM_IC_Start+0x64>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005828:	b2db      	uxtb	r3, r3
 800582a:	e00b      	b.n	8005844 <HAL_TIM_IC_Start+0x7c>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	2b08      	cmp	r3, #8
 8005830:	d104      	bne.n	800583c <HAL_TIM_IC_Start+0x74>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005838:	b2db      	uxtb	r3, r3
 800583a:	e003      	b.n	8005844 <HAL_TIM_IC_Start+0x7c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005842:	b2db      	uxtb	r3, r3
 8005844:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005846:	7bfb      	ldrb	r3, [r7, #15]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d102      	bne.n	8005852 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800584c:	7bbb      	ldrb	r3, [r7, #14]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d001      	beq.n	8005856 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e081      	b.n	800595a <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d104      	bne.n	8005866 <HAL_TIM_IC_Start+0x9e>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005864:	e013      	b.n	800588e <HAL_TIM_IC_Start+0xc6>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b04      	cmp	r3, #4
 800586a:	d104      	bne.n	8005876 <HAL_TIM_IC_Start+0xae>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005874:	e00b      	b.n	800588e <HAL_TIM_IC_Start+0xc6>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b08      	cmp	r3, #8
 800587a:	d104      	bne.n	8005886 <HAL_TIM_IC_Start+0xbe>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005884:	e003      	b.n	800588e <HAL_TIM_IC_Start+0xc6>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <HAL_TIM_IC_Start+0xd6>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800589c:	e013      	b.n	80058c6 <HAL_TIM_IC_Start+0xfe>
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d104      	bne.n	80058ae <HAL_TIM_IC_Start+0xe6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058ac:	e00b      	b.n	80058c6 <HAL_TIM_IC_Start+0xfe>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d104      	bne.n	80058be <HAL_TIM_IC_Start+0xf6>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2202      	movs	r2, #2
 80058b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058bc:	e003      	b.n	80058c6 <HAL_TIM_IC_Start+0xfe>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2201      	movs	r2, #1
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f001 f9f6 	bl	8006cc0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a22      	ldr	r2, [pc, #136]	; (8005964 <HAL_TIM_IC_Start+0x19c>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d022      	beq.n	8005924 <HAL_TIM_IC_Start+0x15c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e6:	d01d      	beq.n	8005924 <HAL_TIM_IC_Start+0x15c>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a1e      	ldr	r2, [pc, #120]	; (8005968 <HAL_TIM_IC_Start+0x1a0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d018      	beq.n	8005924 <HAL_TIM_IC_Start+0x15c>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a1d      	ldr	r2, [pc, #116]	; (800596c <HAL_TIM_IC_Start+0x1a4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d013      	beq.n	8005924 <HAL_TIM_IC_Start+0x15c>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1b      	ldr	r2, [pc, #108]	; (8005970 <HAL_TIM_IC_Start+0x1a8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d00e      	beq.n	8005924 <HAL_TIM_IC_Start+0x15c>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1a      	ldr	r2, [pc, #104]	; (8005974 <HAL_TIM_IC_Start+0x1ac>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d009      	beq.n	8005924 <HAL_TIM_IC_Start+0x15c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a18      	ldr	r2, [pc, #96]	; (8005978 <HAL_TIM_IC_Start+0x1b0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d004      	beq.n	8005924 <HAL_TIM_IC_Start+0x15c>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a17      	ldr	r2, [pc, #92]	; (800597c <HAL_TIM_IC_Start+0x1b4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d111      	bne.n	8005948 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b06      	cmp	r3, #6
 8005934:	d010      	beq.n	8005958 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0201 	orr.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005946:	e007      	b.n	8005958 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40010000 	.word	0x40010000
 8005968:	40000400 	.word	0x40000400
 800596c:	40000800 	.word	0x40000800
 8005970:	40000c00 	.word	0x40000c00
 8005974:	40010400 	.word	0x40010400
 8005978:	40014000 	.word	0x40014000
 800597c:	40001800 	.word	0x40001800

08005980 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d104      	bne.n	800599e <HAL_TIM_IC_Start_IT+0x1e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800599a:	b2db      	uxtb	r3, r3
 800599c:	e013      	b.n	80059c6 <HAL_TIM_IC_Start_IT+0x46>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d104      	bne.n	80059ae <HAL_TIM_IC_Start_IT+0x2e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	e00b      	b.n	80059c6 <HAL_TIM_IC_Start_IT+0x46>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d104      	bne.n	80059be <HAL_TIM_IC_Start_IT+0x3e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	e003      	b.n	80059c6 <HAL_TIM_IC_Start_IT+0x46>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d104      	bne.n	80059d8 <HAL_TIM_IC_Start_IT+0x58>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	e013      	b.n	8005a00 <HAL_TIM_IC_Start_IT+0x80>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2b04      	cmp	r3, #4
 80059dc:	d104      	bne.n	80059e8 <HAL_TIM_IC_Start_IT+0x68>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	e00b      	b.n	8005a00 <HAL_TIM_IC_Start_IT+0x80>
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d104      	bne.n	80059f8 <HAL_TIM_IC_Start_IT+0x78>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	e003      	b.n	8005a00 <HAL_TIM_IC_Start_IT+0x80>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d102      	bne.n	8005a0e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a08:	7b7b      	ldrb	r3, [r7, #13]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d001      	beq.n	8005a12 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e0cc      	b.n	8005bac <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_IC_Start_IT+0xa2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a20:	e013      	b.n	8005a4a <HAL_TIM_IC_Start_IT+0xca>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_IC_Start_IT+0xb2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a30:	e00b      	b.n	8005a4a <HAL_TIM_IC_Start_IT+0xca>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_IC_Start_IT+0xc2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a40:	e003      	b.n	8005a4a <HAL_TIM_IC_Start_IT+0xca>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2202      	movs	r2, #2
 8005a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIM_IC_Start_IT+0xda>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a58:	e013      	b.n	8005a82 <HAL_TIM_IC_Start_IT+0x102>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d104      	bne.n	8005a6a <HAL_TIM_IC_Start_IT+0xea>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a68:	e00b      	b.n	8005a82 <HAL_TIM_IC_Start_IT+0x102>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	d104      	bne.n	8005a7a <HAL_TIM_IC_Start_IT+0xfa>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a78:	e003      	b.n	8005a82 <HAL_TIM_IC_Start_IT+0x102>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b0c      	cmp	r3, #12
 8005a86:	d841      	bhi.n	8005b0c <HAL_TIM_IC_Start_IT+0x18c>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <HAL_TIM_IC_Start_IT+0x110>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005ac5 	.word	0x08005ac5
 8005a94:	08005b0d 	.word	0x08005b0d
 8005a98:	08005b0d 	.word	0x08005b0d
 8005a9c:	08005b0d 	.word	0x08005b0d
 8005aa0:	08005ad7 	.word	0x08005ad7
 8005aa4:	08005b0d 	.word	0x08005b0d
 8005aa8:	08005b0d 	.word	0x08005b0d
 8005aac:	08005b0d 	.word	0x08005b0d
 8005ab0:	08005ae9 	.word	0x08005ae9
 8005ab4:	08005b0d 	.word	0x08005b0d
 8005ab8:	08005b0d 	.word	0x08005b0d
 8005abc:	08005b0d 	.word	0x08005b0d
 8005ac0:	08005afb 	.word	0x08005afb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0202 	orr.w	r2, r2, #2
 8005ad2:	60da      	str	r2, [r3, #12]
      break;
 8005ad4:	e01d      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0204 	orr.w	r2, r2, #4
 8005ae4:	60da      	str	r2, [r3, #12]
      break;
 8005ae6:	e014      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68da      	ldr	r2, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0208 	orr.w	r2, r2, #8
 8005af6:	60da      	str	r2, [r3, #12]
      break;
 8005af8:	e00b      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0210 	orr.w	r2, r2, #16
 8005b08:	60da      	str	r2, [r3, #12]
      break;
 8005b0a:	e002      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005b10:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b12:	7bfb      	ldrb	r3, [r7, #15]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d148      	bne.n	8005baa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 f8cd 	bl	8006cc0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a22      	ldr	r2, [pc, #136]	; (8005bb4 <HAL_TIM_IC_Start_IT+0x234>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d022      	beq.n	8005b76 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b38:	d01d      	beq.n	8005b76 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	; (8005bb8 <HAL_TIM_IC_Start_IT+0x238>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d018      	beq.n	8005b76 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1c      	ldr	r2, [pc, #112]	; (8005bbc <HAL_TIM_IC_Start_IT+0x23c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1b      	ldr	r2, [pc, #108]	; (8005bc0 <HAL_TIM_IC_Start_IT+0x240>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a19      	ldr	r2, [pc, #100]	; (8005bc4 <HAL_TIM_IC_Start_IT+0x244>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a18      	ldr	r2, [pc, #96]	; (8005bc8 <HAL_TIM_IC_Start_IT+0x248>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_TIM_IC_Start_IT+0x1f6>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <HAL_TIM_IC_Start_IT+0x24c>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d111      	bne.n	8005b9a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2b06      	cmp	r3, #6
 8005b86:	d010      	beq.n	8005baa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b98:	e007      	b.n	8005baa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f042 0201 	orr.w	r2, r2, #1
 8005ba8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	40000400 	.word	0x40000400
 8005bbc:	40000800 	.word	0x40000800
 8005bc0:	40000c00 	.word	0x40000c00
 8005bc4:	40010400 	.word	0x40010400
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40001800 	.word	0x40001800

08005bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d122      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d11b      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0202 	mvn.w	r2, #2
 8005bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fc fbfc 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 8005c18:	e005      	b.n	8005c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fb8c 	bl	8006338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fb93 	bl	800634c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d122      	bne.n	8005c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d11b      	bne.n	8005c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0204 	mvn.w	r2, #4
 8005c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fc fbd2 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 8005c6c:	e005      	b.n	8005c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fb62 	bl	8006338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb69 	bl	800634c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d122      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d11b      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0208 	mvn.w	r2, #8
 8005ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2204      	movs	r2, #4
 8005caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fc fba8 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 8005cc0:	e005      	b.n	8005cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fb38 	bl	8006338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fb3f 	bl	800634c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b10      	cmp	r3, #16
 8005ce0:	d122      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	2b10      	cmp	r3, #16
 8005cee:	d11b      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0210 	mvn.w	r2, #16
 8005cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7fc fb7e 	bl	8002410 <HAL_TIM_IC_CaptureCallback>
 8005d14:	e005      	b.n	8005d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fb0e 	bl	8006338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fb15 	bl	800634c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d10e      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d107      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0201 	mvn.w	r2, #1
 8005d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fc fb54 	bl	80023fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5e:	2b80      	cmp	r3, #128	; 0x80
 8005d60:	d10e      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6c:	2b80      	cmp	r3, #128	; 0x80
 8005d6e:	d107      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 f84c 	bl	8006e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b40      	cmp	r3, #64	; 0x40
 8005d8c:	d10e      	bne.n	8005dac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d107      	bne.n	8005dac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fada 	bl	8006360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d10e      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d107      	bne.n	8005dd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f06f 0220 	mvn.w	r2, #32
 8005dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f001 f816 	bl	8006e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dd8:	bf00      	nop
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d101      	bne.n	8005dfe <HAL_TIM_IC_ConfigChannel+0x1e>
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	e088      	b.n	8005f10 <HAL_TIM_IC_ConfigChannel+0x130>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d11b      	bne.n	8005e44 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6818      	ldr	r0, [r3, #0]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	6819      	ldr	r1, [r3, #0]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f000 fd8c 	bl	8006938 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 020c 	bic.w	r2, r2, #12
 8005e2e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6999      	ldr	r1, [r3, #24]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	619a      	str	r2, [r3, #24]
 8005e42:	e060      	b.n	8005f06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d11c      	bne.n	8005e84 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	6819      	ldr	r1, [r3, #0]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f000 fe10 	bl	8006a7e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699a      	ldr	r2, [r3, #24]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e6c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6999      	ldr	r1, [r3, #24]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	021a      	lsls	r2, r3, #8
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	619a      	str	r2, [r3, #24]
 8005e82:	e040      	b.n	8005f06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b08      	cmp	r3, #8
 8005e88:	d11b      	bne.n	8005ec2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6818      	ldr	r0, [r3, #0]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	6819      	ldr	r1, [r3, #0]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f000 fe5d 	bl	8006b58 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	69da      	ldr	r2, [r3, #28]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 020c 	bic.w	r2, r2, #12
 8005eac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69d9      	ldr	r1, [r3, #28]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	61da      	str	r2, [r3, #28]
 8005ec0:	e021      	b.n	8005f06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b0c      	cmp	r3, #12
 8005ec6:	d11c      	bne.n	8005f02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6818      	ldr	r0, [r3, #0]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	6819      	ldr	r1, [r3, #0]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	685a      	ldr	r2, [r3, #4]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f000 fe7a 	bl	8006bd0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69da      	ldr	r2, [r3, #28]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005eea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69d9      	ldr	r1, [r3, #28]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	021a      	lsls	r2, r3, #8
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	61da      	str	r2, [r3, #28]
 8005f00:	e001      	b.n	8005f06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f24:	2300      	movs	r3, #0
 8005f26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d101      	bne.n	8005f36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f32:	2302      	movs	r3, #2
 8005f34:	e0ae      	b.n	8006094 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b0c      	cmp	r3, #12
 8005f42:	f200 809f 	bhi.w	8006084 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f46:	a201      	add	r2, pc, #4	; (adr r2, 8005f4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f81 	.word	0x08005f81
 8005f50:	08006085 	.word	0x08006085
 8005f54:	08006085 	.word	0x08006085
 8005f58:	08006085 	.word	0x08006085
 8005f5c:	08005fc1 	.word	0x08005fc1
 8005f60:	08006085 	.word	0x08006085
 8005f64:	08006085 	.word	0x08006085
 8005f68:	08006085 	.word	0x08006085
 8005f6c:	08006003 	.word	0x08006003
 8005f70:	08006085 	.word	0x08006085
 8005f74:	08006085 	.word	0x08006085
 8005f78:	08006085 	.word	0x08006085
 8005f7c:	08006043 	.word	0x08006043
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68b9      	ldr	r1, [r7, #8]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fa94 	bl	80064b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f042 0208 	orr.w	r2, r2, #8
 8005f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699a      	ldr	r2, [r3, #24]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0204 	bic.w	r2, r2, #4
 8005faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6999      	ldr	r1, [r3, #24]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	619a      	str	r2, [r3, #24]
      break;
 8005fbe:	e064      	b.n	800608a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fae4 	bl	8006594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699a      	ldr	r2, [r3, #24]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	699a      	ldr	r2, [r3, #24]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6999      	ldr	r1, [r3, #24]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	021a      	lsls	r2, r3, #8
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	430a      	orrs	r2, r1
 8005ffe:	619a      	str	r2, [r3, #24]
      break;
 8006000:	e043      	b.n	800608a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	4618      	mov	r0, r3
 800600a:	f000 fb39 	bl	8006680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f042 0208 	orr.w	r2, r2, #8
 800601c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0204 	bic.w	r2, r2, #4
 800602c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	69d9      	ldr	r1, [r3, #28]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	691a      	ldr	r2, [r3, #16]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	61da      	str	r2, [r3, #28]
      break;
 8006040:	e023      	b.n	800608a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68b9      	ldr	r1, [r7, #8]
 8006048:	4618      	mov	r0, r3
 800604a:	f000 fb8d 	bl	8006768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800605c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69da      	ldr	r2, [r3, #28]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800606c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69d9      	ldr	r1, [r3, #28]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	021a      	lsls	r2, r3, #8
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	61da      	str	r2, [r3, #28]
      break;
 8006082:	e002      	b.n	800608a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	75fb      	strb	r3, [r7, #23]
      break;
 8006088:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006092:	7dfb      	ldrb	r3, [r7, #23]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_TIM_ConfigClockSource+0x1c>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e0b4      	b.n	8006222 <HAL_TIM_ConfigClockSource+0x186>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f0:	d03e      	beq.n	8006170 <HAL_TIM_ConfigClockSource+0xd4>
 80060f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f6:	f200 8087 	bhi.w	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fe:	f000 8086 	beq.w	800620e <HAL_TIM_ConfigClockSource+0x172>
 8006102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006106:	d87f      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006108:	2b70      	cmp	r3, #112	; 0x70
 800610a:	d01a      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0xa6>
 800610c:	2b70      	cmp	r3, #112	; 0x70
 800610e:	d87b      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006110:	2b60      	cmp	r3, #96	; 0x60
 8006112:	d050      	beq.n	80061b6 <HAL_TIM_ConfigClockSource+0x11a>
 8006114:	2b60      	cmp	r3, #96	; 0x60
 8006116:	d877      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006118:	2b50      	cmp	r3, #80	; 0x50
 800611a:	d03c      	beq.n	8006196 <HAL_TIM_ConfigClockSource+0xfa>
 800611c:	2b50      	cmp	r3, #80	; 0x50
 800611e:	d873      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	d058      	beq.n	80061d6 <HAL_TIM_ConfigClockSource+0x13a>
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	d86f      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006128:	2b30      	cmp	r3, #48	; 0x30
 800612a:	d064      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x15a>
 800612c:	2b30      	cmp	r3, #48	; 0x30
 800612e:	d86b      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006130:	2b20      	cmp	r3, #32
 8006132:	d060      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006134:	2b20      	cmp	r3, #32
 8006136:	d867      	bhi.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
 8006138:	2b00      	cmp	r3, #0
 800613a:	d05c      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x15a>
 800613c:	2b10      	cmp	r3, #16
 800613e:	d05a      	beq.n	80061f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006140:	e062      	b.n	8006208 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6899      	ldr	r1, [r3, #8]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f000 fd95 	bl	8006c80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	609a      	str	r2, [r3, #8]
      break;
 800616e:	e04f      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6818      	ldr	r0, [r3, #0]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	6899      	ldr	r1, [r3, #8]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f000 fd7e 	bl	8006c80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006192:	609a      	str	r2, [r3, #8]
      break;
 8006194:	e03c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6859      	ldr	r1, [r3, #4]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	461a      	mov	r2, r3
 80061a4:	f000 fc3c 	bl	8006a20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2150      	movs	r1, #80	; 0x50
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 fd4b 	bl	8006c4a <TIM_ITRx_SetConfig>
      break;
 80061b4:	e02c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	6859      	ldr	r1, [r3, #4]
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f000 fc98 	bl	8006af8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2160      	movs	r1, #96	; 0x60
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 fd3b 	bl	8006c4a <TIM_ITRx_SetConfig>
      break;
 80061d4:	e01c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6859      	ldr	r1, [r3, #4]
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	461a      	mov	r2, r3
 80061e4:	f000 fc1c 	bl	8006a20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2140      	movs	r1, #64	; 0x40
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fd2b 	bl	8006c4a <TIM_ITRx_SetConfig>
      break;
 80061f4:	e00c      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4619      	mov	r1, r3
 8006200:	4610      	mov	r0, r2
 8006202:	f000 fd22 	bl	8006c4a <TIM_ITRx_SetConfig>
      break;
 8006206:	e003      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	73fb      	strb	r3, [r7, #15]
      break;
 800620c:	e000      	b.n	8006210 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800620e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006220:	7bfb      	ldrb	r3, [r7, #15]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b082      	sub	sp, #8
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_TIM_SlaveConfigSynchro+0x18>
 800623e:	2302      	movs	r3, #2
 8006240:	e031      	b.n	80062a6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2202      	movs	r2, #2
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fadd 	bl	8006814 <TIM_SlaveTimer_SetConfig>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d009      	beq.n	8006274 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e018      	b.n	80062a6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006282:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006292:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b0c      	cmp	r3, #12
 80062c2:	d831      	bhi.n	8006328 <HAL_TIM_ReadCapturedValue+0x78>
 80062c4:	a201      	add	r2, pc, #4	; (adr r2, 80062cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80062c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ca:	bf00      	nop
 80062cc:	08006301 	.word	0x08006301
 80062d0:	08006329 	.word	0x08006329
 80062d4:	08006329 	.word	0x08006329
 80062d8:	08006329 	.word	0x08006329
 80062dc:	0800630b 	.word	0x0800630b
 80062e0:	08006329 	.word	0x08006329
 80062e4:	08006329 	.word	0x08006329
 80062e8:	08006329 	.word	0x08006329
 80062ec:	08006315 	.word	0x08006315
 80062f0:	08006329 	.word	0x08006329
 80062f4:	08006329 	.word	0x08006329
 80062f8:	08006329 	.word	0x08006329
 80062fc:	0800631f 	.word	0x0800631f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006306:	60fb      	str	r3, [r7, #12]

      break;
 8006308:	e00f      	b.n	800632a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	60fb      	str	r3, [r7, #12]

      break;
 8006312:	e00a      	b.n	800632a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631a:	60fb      	str	r3, [r7, #12]

      break;
 800631c:	e005      	b.n	800632a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	60fb      	str	r3, [r7, #12]

      break;
 8006326:	e000      	b.n	800632a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006328:	bf00      	nop
  }

  return tmpreg;
 800632a:	68fb      	ldr	r3, [r7, #12]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a40      	ldr	r2, [pc, #256]	; (8006488 <TIM_Base_SetConfig+0x114>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d013      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006392:	d00f      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a3d      	ldr	r2, [pc, #244]	; (800648c <TIM_Base_SetConfig+0x118>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00b      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a3c      	ldr	r2, [pc, #240]	; (8006490 <TIM_Base_SetConfig+0x11c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d007      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a3b      	ldr	r2, [pc, #236]	; (8006494 <TIM_Base_SetConfig+0x120>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a3a      	ldr	r2, [pc, #232]	; (8006498 <TIM_Base_SetConfig+0x124>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d108      	bne.n	80063c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a2f      	ldr	r2, [pc, #188]	; (8006488 <TIM_Base_SetConfig+0x114>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d02b      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d4:	d027      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2c      	ldr	r2, [pc, #176]	; (800648c <TIM_Base_SetConfig+0x118>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d023      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a2b      	ldr	r2, [pc, #172]	; (8006490 <TIM_Base_SetConfig+0x11c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01f      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a2a      	ldr	r2, [pc, #168]	; (8006494 <TIM_Base_SetConfig+0x120>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01b      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a29      	ldr	r2, [pc, #164]	; (8006498 <TIM_Base_SetConfig+0x124>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d017      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a28      	ldr	r2, [pc, #160]	; (800649c <TIM_Base_SetConfig+0x128>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a27      	ldr	r2, [pc, #156]	; (80064a0 <TIM_Base_SetConfig+0x12c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00f      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a26      	ldr	r2, [pc, #152]	; (80064a4 <TIM_Base_SetConfig+0x130>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00b      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a25      	ldr	r2, [pc, #148]	; (80064a8 <TIM_Base_SetConfig+0x134>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d007      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a24      	ldr	r2, [pc, #144]	; (80064ac <TIM_Base_SetConfig+0x138>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d003      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a23      	ldr	r2, [pc, #140]	; (80064b0 <TIM_Base_SetConfig+0x13c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d108      	bne.n	8006438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800642c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a0a      	ldr	r2, [pc, #40]	; (8006488 <TIM_Base_SetConfig+0x114>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <TIM_Base_SetConfig+0xf8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a0c      	ldr	r2, [pc, #48]	; (8006498 <TIM_Base_SetConfig+0x124>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d103      	bne.n	8006474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	615a      	str	r2, [r3, #20]
}
 800647a:	bf00      	nop
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40010000 	.word	0x40010000
 800648c:	40000400 	.word	0x40000400
 8006490:	40000800 	.word	0x40000800
 8006494:	40000c00 	.word	0x40000c00
 8006498:	40010400 	.word	0x40010400
 800649c:	40014000 	.word	0x40014000
 80064a0:	40014400 	.word	0x40014400
 80064a4:	40014800 	.word	0x40014800
 80064a8:	40001800 	.word	0x40001800
 80064ac:	40001c00 	.word	0x40001c00
 80064b0:	40002000 	.word	0x40002000

080064b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f023 0201 	bic.w	r2, r3, #1
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0303 	bic.w	r3, r3, #3
 80064ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f023 0302 	bic.w	r3, r3, #2
 80064fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a20      	ldr	r2, [pc, #128]	; (800658c <TIM_OC1_SetConfig+0xd8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_OC1_SetConfig+0x64>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a1f      	ldr	r2, [pc, #124]	; (8006590 <TIM_OC1_SetConfig+0xdc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d10c      	bne.n	8006532 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f023 0308 	bic.w	r3, r3, #8
 800651e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f023 0304 	bic.w	r3, r3, #4
 8006530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a15      	ldr	r2, [pc, #84]	; (800658c <TIM_OC1_SetConfig+0xd8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d003      	beq.n	8006542 <TIM_OC1_SetConfig+0x8e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a14      	ldr	r2, [pc, #80]	; (8006590 <TIM_OC1_SetConfig+0xdc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d111      	bne.n	8006566 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	621a      	str	r2, [r3, #32]
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	40010000 	.word	0x40010000
 8006590:	40010400 	.word	0x40010400

08006594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f023 0210 	bic.w	r2, r3, #16
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0320 	bic.w	r3, r3, #32
 80065de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a22      	ldr	r2, [pc, #136]	; (8006678 <TIM_OC2_SetConfig+0xe4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_OC2_SetConfig+0x68>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a21      	ldr	r2, [pc, #132]	; (800667c <TIM_OC2_SetConfig+0xe8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d10d      	bne.n	8006618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a17      	ldr	r2, [pc, #92]	; (8006678 <TIM_OC2_SetConfig+0xe4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_OC2_SetConfig+0x94>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a16      	ldr	r2, [pc, #88]	; (800667c <TIM_OC2_SetConfig+0xe8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d113      	bne.n	8006650 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800662e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40010000 	.word	0x40010000
 800667c:	40010400 	.word	0x40010400

08006680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0303 	bic.w	r3, r3, #3
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a21      	ldr	r2, [pc, #132]	; (8006760 <TIM_OC3_SetConfig+0xe0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <TIM_OC3_SetConfig+0x66>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a20      	ldr	r2, [pc, #128]	; (8006764 <TIM_OC3_SetConfig+0xe4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d10d      	bne.n	8006702 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a16      	ldr	r2, [pc, #88]	; (8006760 <TIM_OC3_SetConfig+0xe0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d003      	beq.n	8006712 <TIM_OC3_SetConfig+0x92>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a15      	ldr	r2, [pc, #84]	; (8006764 <TIM_OC3_SetConfig+0xe4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d113      	bne.n	800673a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	621a      	str	r2, [r3, #32]
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	40010000 	.word	0x40010000
 8006764:	40010400 	.word	0x40010400

08006768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	031b      	lsls	r3, r3, #12
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a12      	ldr	r2, [pc, #72]	; (800680c <TIM_OC4_SetConfig+0xa4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_OC4_SetConfig+0x68>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a11      	ldr	r2, [pc, #68]	; (8006810 <TIM_OC4_SetConfig+0xa8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d109      	bne.n	80067e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	019b      	lsls	r3, r3, #6
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	621a      	str	r2, [r3, #32]
}
 80067fe:	bf00      	nop
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40010000 	.word	0x40010000
 8006810:	40010400 	.word	0x40010400

08006814 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006830:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	4313      	orrs	r3, r2
 800683a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	f023 0307 	bic.w	r3, r3, #7
 8006842:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	2b70      	cmp	r3, #112	; 0x70
 800685c:	d01a      	beq.n	8006894 <TIM_SlaveTimer_SetConfig+0x80>
 800685e:	2b70      	cmp	r3, #112	; 0x70
 8006860:	d860      	bhi.n	8006924 <TIM_SlaveTimer_SetConfig+0x110>
 8006862:	2b60      	cmp	r3, #96	; 0x60
 8006864:	d054      	beq.n	8006910 <TIM_SlaveTimer_SetConfig+0xfc>
 8006866:	2b60      	cmp	r3, #96	; 0x60
 8006868:	d85c      	bhi.n	8006924 <TIM_SlaveTimer_SetConfig+0x110>
 800686a:	2b50      	cmp	r3, #80	; 0x50
 800686c:	d046      	beq.n	80068fc <TIM_SlaveTimer_SetConfig+0xe8>
 800686e:	2b50      	cmp	r3, #80	; 0x50
 8006870:	d858      	bhi.n	8006924 <TIM_SlaveTimer_SetConfig+0x110>
 8006872:	2b40      	cmp	r3, #64	; 0x40
 8006874:	d019      	beq.n	80068aa <TIM_SlaveTimer_SetConfig+0x96>
 8006876:	2b40      	cmp	r3, #64	; 0x40
 8006878:	d854      	bhi.n	8006924 <TIM_SlaveTimer_SetConfig+0x110>
 800687a:	2b30      	cmp	r3, #48	; 0x30
 800687c:	d055      	beq.n	800692a <TIM_SlaveTimer_SetConfig+0x116>
 800687e:	2b30      	cmp	r3, #48	; 0x30
 8006880:	d850      	bhi.n	8006924 <TIM_SlaveTimer_SetConfig+0x110>
 8006882:	2b20      	cmp	r3, #32
 8006884:	d051      	beq.n	800692a <TIM_SlaveTimer_SetConfig+0x116>
 8006886:	2b20      	cmp	r3, #32
 8006888:	d84c      	bhi.n	8006924 <TIM_SlaveTimer_SetConfig+0x110>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d04d      	beq.n	800692a <TIM_SlaveTimer_SetConfig+0x116>
 800688e:	2b10      	cmp	r3, #16
 8006890:	d04b      	beq.n	800692a <TIM_SlaveTimer_SetConfig+0x116>
 8006892:	e047      	b.n	8006924 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6818      	ldr	r0, [r3, #0]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	68d9      	ldr	r1, [r3, #12]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f000 f9ec 	bl	8006c80 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80068a8:	e040      	b.n	800692c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	d101      	bne.n	80068b6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e03b      	b.n	800692e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6a1a      	ldr	r2, [r3, #32]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0201 	bic.w	r2, r2, #1
 80068cc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068dc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	621a      	str	r2, [r3, #32]
      break;
 80068fa:	e017      	b.n	800692c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	6899      	ldr	r1, [r3, #8]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	461a      	mov	r2, r3
 800690a:	f000 f889 	bl	8006a20 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800690e:	e00d      	b.n	800692c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	6899      	ldr	r1, [r3, #8]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	461a      	mov	r2, r3
 800691e:	f000 f8eb 	bl	8006af8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006922:	e003      	b.n	800692c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	75fb      	strb	r3, [r7, #23]
      break;
 8006928:	e000      	b.n	800692c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800692a:	bf00      	nop
  }

  return status;
 800692c:	7dfb      	ldrb	r3, [r7, #23]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4a28      	ldr	r2, [pc, #160]	; (8006a04 <TIM_TI1_SetConfig+0xcc>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01b      	beq.n	800699e <TIM_TI1_SetConfig+0x66>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696c:	d017      	beq.n	800699e <TIM_TI1_SetConfig+0x66>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	4a25      	ldr	r2, [pc, #148]	; (8006a08 <TIM_TI1_SetConfig+0xd0>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d013      	beq.n	800699e <TIM_TI1_SetConfig+0x66>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	4a24      	ldr	r2, [pc, #144]	; (8006a0c <TIM_TI1_SetConfig+0xd4>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00f      	beq.n	800699e <TIM_TI1_SetConfig+0x66>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4a23      	ldr	r2, [pc, #140]	; (8006a10 <TIM_TI1_SetConfig+0xd8>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00b      	beq.n	800699e <TIM_TI1_SetConfig+0x66>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a22      	ldr	r2, [pc, #136]	; (8006a14 <TIM_TI1_SetConfig+0xdc>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d007      	beq.n	800699e <TIM_TI1_SetConfig+0x66>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4a21      	ldr	r2, [pc, #132]	; (8006a18 <TIM_TI1_SetConfig+0xe0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d003      	beq.n	800699e <TIM_TI1_SetConfig+0x66>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4a20      	ldr	r2, [pc, #128]	; (8006a1c <TIM_TI1_SetConfig+0xe4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d101      	bne.n	80069a2 <TIM_TI1_SetConfig+0x6a>
 800699e:	2301      	movs	r3, #1
 80069a0:	e000      	b.n	80069a4 <TIM_TI1_SetConfig+0x6c>
 80069a2:	2300      	movs	r3, #0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d008      	beq.n	80069ba <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f023 0303 	bic.w	r3, r3, #3
 80069ae:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e003      	b.n	80069c2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	011b      	lsls	r3, r3, #4
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f023 030a 	bic.w	r3, r3, #10
 80069dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f003 030a 	and.w	r3, r3, #10
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	621a      	str	r2, [r3, #32]
}
 80069f6:	bf00      	nop
 80069f8:	371c      	adds	r7, #28
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40010000 	.word	0x40010000
 8006a08:	40000400 	.word	0x40000400
 8006a0c:	40000800 	.word	0x40000800
 8006a10:	40000c00 	.word	0x40000c00
 8006a14:	40010400 	.word	0x40010400
 8006a18:	40014000 	.word	0x40014000
 8006a1c:	40001800 	.word	0x40001800

08006a20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6a1b      	ldr	r3, [r3, #32]
 8006a36:	f023 0201 	bic.w	r2, r3, #1
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f023 030a 	bic.w	r3, r3, #10
 8006a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	621a      	str	r2, [r3, #32]
}
 8006a72:	bf00      	nop
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b087      	sub	sp, #28
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	60f8      	str	r0, [r7, #12]
 8006a86:	60b9      	str	r1, [r7, #8]
 8006a88:	607a      	str	r2, [r7, #4]
 8006a8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	f023 0210 	bic.w	r2, r3, #16
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	021b      	lsls	r3, r3, #8
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006abc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	031b      	lsls	r3, r3, #12
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ad0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ada:	693a      	ldr	r2, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	621a      	str	r2, [r3, #32]
}
 8006aec:	bf00      	nop
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	f023 0210 	bic.w	r2, r3, #16
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	031b      	lsls	r3, r3, #12
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	621a      	str	r2, [r3, #32]
}
 8006b4c:	bf00      	nop
 8006b4e:	371c      	adds	r7, #28
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f023 0303 	bic.w	r3, r3, #3
 8006b84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006ba8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	621a      	str	r2, [r3, #32]
}
 8006bc4:	bf00      	nop
 8006bc6:	371c      	adds	r7, #28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	607a      	str	r2, [r7, #4]
 8006bdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bfc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	021b      	lsls	r3, r3, #8
 8006c02:	697a      	ldr	r2, [r7, #20]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	031b      	lsls	r3, r3, #12
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006c22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	031b      	lsls	r3, r3, #12
 8006c28:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b085      	sub	sp, #20
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
 8006c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	f043 0307 	orr.w	r3, r3, #7
 8006c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	609a      	str	r2, [r3, #8]
}
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
 8006c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	021a      	lsls	r2, r3, #8
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	609a      	str	r2, [r3, #8]
}
 8006cb4:	bf00      	nop
 8006cb6:	371c      	adds	r7, #28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6a1a      	ldr	r2, [r3, #32]
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	43db      	mvns	r3, r3
 8006ce2:	401a      	ands	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6a1a      	ldr	r2, [r3, #32]
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f003 031f 	and.w	r3, r3, #31
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	621a      	str	r2, [r3, #32]
}
 8006cfe:	bf00      	nop
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
	...

08006d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d101      	bne.n	8006d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d20:	2302      	movs	r3, #2
 8006d22:	e05a      	b.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a21      	ldr	r2, [pc, #132]	; (8006de8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d022      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d70:	d01d      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d018      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a1b      	ldr	r2, [pc, #108]	; (8006df0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d013      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a1a      	ldr	r2, [pc, #104]	; (8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d00e      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d009      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a17      	ldr	r2, [pc, #92]	; (8006dfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d004      	beq.n	8006dae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a15      	ldr	r2, [pc, #84]	; (8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d10c      	bne.n	8006dc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40010000 	.word	0x40010000
 8006dec:	40000400 	.word	0x40000400
 8006df0:	40000800 	.word	0x40000800
 8006df4:	40000c00 	.word	0x40000c00
 8006df8:	40010400 	.word	0x40010400
 8006dfc:	40014000 	.word	0x40014000
 8006e00:	40001800 	.word	0x40001800

08006e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e03f      	b.n	8006ebe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fb ffee 	bl	8002e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2224      	movs	r2, #36	; 0x24
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f829 	bl	8006ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	691a      	ldr	r2, [r3, #16]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695a      	ldr	r2, [r3, #20]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	68da      	ldr	r2, [r3, #12]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2220      	movs	r2, #32
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ecc:	b0c0      	sub	sp, #256	; 0x100
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee4:	68d9      	ldr	r1, [r3, #12]
 8006ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	ea40 0301 	orr.w	r3, r0, r1
 8006ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f20:	f021 010c 	bic.w	r1, r1, #12
 8006f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f42:	6999      	ldr	r1, [r3, #24]
 8006f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	ea40 0301 	orr.w	r3, r0, r1
 8006f4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4b8f      	ldr	r3, [pc, #572]	; (8007194 <UART_SetConfig+0x2cc>)
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d005      	beq.n	8006f68 <UART_SetConfig+0xa0>
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b8d      	ldr	r3, [pc, #564]	; (8007198 <UART_SetConfig+0x2d0>)
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d104      	bne.n	8006f72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f68:	f7fd f8e8 	bl	800413c <HAL_RCC_GetPCLK2Freq>
 8006f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f70:	e003      	b.n	8006f7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f72:	f7fd f8cf 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 8006f76:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f84:	f040 810c 	bne.w	80071a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f92:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	1891      	adds	r1, r2, r2
 8006fa0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fa2:	415b      	adcs	r3, r3
 8006fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006faa:	4621      	mov	r1, r4
 8006fac:	eb12 0801 	adds.w	r8, r2, r1
 8006fb0:	4629      	mov	r1, r5
 8006fb2:	eb43 0901 	adc.w	r9, r3, r1
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	f04f 0300 	mov.w	r3, #0
 8006fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fca:	4690      	mov	r8, r2
 8006fcc:	4699      	mov	r9, r3
 8006fce:	4623      	mov	r3, r4
 8006fd0:	eb18 0303 	adds.w	r3, r8, r3
 8006fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fd8:	462b      	mov	r3, r5
 8006fda:	eb49 0303 	adc.w	r3, r9, r3
 8006fde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	18db      	adds	r3, r3, r3
 8006ffa:	653b      	str	r3, [r7, #80]	; 0x50
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	eb42 0303 	adc.w	r3, r2, r3
 8007002:	657b      	str	r3, [r7, #84]	; 0x54
 8007004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007008:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800700c:	f7f9 fe3c 	bl	8000c88 <__aeabi_uldivmod>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4b61      	ldr	r3, [pc, #388]	; (800719c <UART_SetConfig+0x2d4>)
 8007016:	fba3 2302 	umull	r2, r3, r3, r2
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	011c      	lsls	r4, r3, #4
 800701e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007022:	2200      	movs	r2, #0
 8007024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007028:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800702c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007030:	4642      	mov	r2, r8
 8007032:	464b      	mov	r3, r9
 8007034:	1891      	adds	r1, r2, r2
 8007036:	64b9      	str	r1, [r7, #72]	; 0x48
 8007038:	415b      	adcs	r3, r3
 800703a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800703c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007040:	4641      	mov	r1, r8
 8007042:	eb12 0a01 	adds.w	sl, r2, r1
 8007046:	4649      	mov	r1, r9
 8007048:	eb43 0b01 	adc.w	fp, r3, r1
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007058:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800705c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007060:	4692      	mov	sl, r2
 8007062:	469b      	mov	fp, r3
 8007064:	4643      	mov	r3, r8
 8007066:	eb1a 0303 	adds.w	r3, sl, r3
 800706a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800706e:	464b      	mov	r3, r9
 8007070:	eb4b 0303 	adc.w	r3, fp, r3
 8007074:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007084:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007088:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800708c:	460b      	mov	r3, r1
 800708e:	18db      	adds	r3, r3, r3
 8007090:	643b      	str	r3, [r7, #64]	; 0x40
 8007092:	4613      	mov	r3, r2
 8007094:	eb42 0303 	adc.w	r3, r2, r3
 8007098:	647b      	str	r3, [r7, #68]	; 0x44
 800709a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800709e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80070a2:	f7f9 fdf1 	bl	8000c88 <__aeabi_uldivmod>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4611      	mov	r1, r2
 80070ac:	4b3b      	ldr	r3, [pc, #236]	; (800719c <UART_SetConfig+0x2d4>)
 80070ae:	fba3 2301 	umull	r2, r3, r3, r1
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	2264      	movs	r2, #100	; 0x64
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	1acb      	subs	r3, r1, r3
 80070bc:	00db      	lsls	r3, r3, #3
 80070be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070c2:	4b36      	ldr	r3, [pc, #216]	; (800719c <UART_SetConfig+0x2d4>)
 80070c4:	fba3 2302 	umull	r2, r3, r3, r2
 80070c8:	095b      	lsrs	r3, r3, #5
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070d0:	441c      	add	r4, r3
 80070d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070e4:	4642      	mov	r2, r8
 80070e6:	464b      	mov	r3, r9
 80070e8:	1891      	adds	r1, r2, r2
 80070ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80070ec:	415b      	adcs	r3, r3
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070f4:	4641      	mov	r1, r8
 80070f6:	1851      	adds	r1, r2, r1
 80070f8:	6339      	str	r1, [r7, #48]	; 0x30
 80070fa:	4649      	mov	r1, r9
 80070fc:	414b      	adcs	r3, r1
 80070fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800710c:	4659      	mov	r1, fp
 800710e:	00cb      	lsls	r3, r1, #3
 8007110:	4651      	mov	r1, sl
 8007112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007116:	4651      	mov	r1, sl
 8007118:	00ca      	lsls	r2, r1, #3
 800711a:	4610      	mov	r0, r2
 800711c:	4619      	mov	r1, r3
 800711e:	4603      	mov	r3, r0
 8007120:	4642      	mov	r2, r8
 8007122:	189b      	adds	r3, r3, r2
 8007124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007128:	464b      	mov	r3, r9
 800712a:	460a      	mov	r2, r1
 800712c:	eb42 0303 	adc.w	r3, r2, r3
 8007130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007140:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007148:	460b      	mov	r3, r1
 800714a:	18db      	adds	r3, r3, r3
 800714c:	62bb      	str	r3, [r7, #40]	; 0x28
 800714e:	4613      	mov	r3, r2
 8007150:	eb42 0303 	adc.w	r3, r2, r3
 8007154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800715a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800715e:	f7f9 fd93 	bl	8000c88 <__aeabi_uldivmod>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4b0d      	ldr	r3, [pc, #52]	; (800719c <UART_SetConfig+0x2d4>)
 8007168:	fba3 1302 	umull	r1, r3, r3, r2
 800716c:	095b      	lsrs	r3, r3, #5
 800716e:	2164      	movs	r1, #100	; 0x64
 8007170:	fb01 f303 	mul.w	r3, r1, r3
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	3332      	adds	r3, #50	; 0x32
 800717a:	4a08      	ldr	r2, [pc, #32]	; (800719c <UART_SetConfig+0x2d4>)
 800717c:	fba2 2303 	umull	r2, r3, r2, r3
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	f003 0207 	and.w	r2, r3, #7
 8007186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4422      	add	r2, r4
 800718e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007190:	e105      	b.n	800739e <UART_SetConfig+0x4d6>
 8007192:	bf00      	nop
 8007194:	40011000 	.word	0x40011000
 8007198:	40011400 	.word	0x40011400
 800719c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80071b2:	4642      	mov	r2, r8
 80071b4:	464b      	mov	r3, r9
 80071b6:	1891      	adds	r1, r2, r2
 80071b8:	6239      	str	r1, [r7, #32]
 80071ba:	415b      	adcs	r3, r3
 80071bc:	627b      	str	r3, [r7, #36]	; 0x24
 80071be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071c2:	4641      	mov	r1, r8
 80071c4:	1854      	adds	r4, r2, r1
 80071c6:	4649      	mov	r1, r9
 80071c8:	eb43 0501 	adc.w	r5, r3, r1
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	00eb      	lsls	r3, r5, #3
 80071d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071da:	00e2      	lsls	r2, r4, #3
 80071dc:	4614      	mov	r4, r2
 80071de:	461d      	mov	r5, r3
 80071e0:	4643      	mov	r3, r8
 80071e2:	18e3      	adds	r3, r4, r3
 80071e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071e8:	464b      	mov	r3, r9
 80071ea:	eb45 0303 	adc.w	r3, r5, r3
 80071ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80071f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800720e:	4629      	mov	r1, r5
 8007210:	008b      	lsls	r3, r1, #2
 8007212:	4621      	mov	r1, r4
 8007214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007218:	4621      	mov	r1, r4
 800721a:	008a      	lsls	r2, r1, #2
 800721c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007220:	f7f9 fd32 	bl	8000c88 <__aeabi_uldivmod>
 8007224:	4602      	mov	r2, r0
 8007226:	460b      	mov	r3, r1
 8007228:	4b60      	ldr	r3, [pc, #384]	; (80073ac <UART_SetConfig+0x4e4>)
 800722a:	fba3 2302 	umull	r2, r3, r3, r2
 800722e:	095b      	lsrs	r3, r3, #5
 8007230:	011c      	lsls	r4, r3, #4
 8007232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007236:	2200      	movs	r2, #0
 8007238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800723c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007240:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007244:	4642      	mov	r2, r8
 8007246:	464b      	mov	r3, r9
 8007248:	1891      	adds	r1, r2, r2
 800724a:	61b9      	str	r1, [r7, #24]
 800724c:	415b      	adcs	r3, r3
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007254:	4641      	mov	r1, r8
 8007256:	1851      	adds	r1, r2, r1
 8007258:	6139      	str	r1, [r7, #16]
 800725a:	4649      	mov	r1, r9
 800725c:	414b      	adcs	r3, r1
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800726c:	4659      	mov	r1, fp
 800726e:	00cb      	lsls	r3, r1, #3
 8007270:	4651      	mov	r1, sl
 8007272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007276:	4651      	mov	r1, sl
 8007278:	00ca      	lsls	r2, r1, #3
 800727a:	4610      	mov	r0, r2
 800727c:	4619      	mov	r1, r3
 800727e:	4603      	mov	r3, r0
 8007280:	4642      	mov	r2, r8
 8007282:	189b      	adds	r3, r3, r2
 8007284:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007288:	464b      	mov	r3, r9
 800728a:	460a      	mov	r2, r1
 800728c:	eb42 0303 	adc.w	r3, r2, r3
 8007290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	67bb      	str	r3, [r7, #120]	; 0x78
 800729e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80072a0:	f04f 0200 	mov.w	r2, #0
 80072a4:	f04f 0300 	mov.w	r3, #0
 80072a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80072ac:	4649      	mov	r1, r9
 80072ae:	008b      	lsls	r3, r1, #2
 80072b0:	4641      	mov	r1, r8
 80072b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072b6:	4641      	mov	r1, r8
 80072b8:	008a      	lsls	r2, r1, #2
 80072ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80072be:	f7f9 fce3 	bl	8000c88 <__aeabi_uldivmod>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4b39      	ldr	r3, [pc, #228]	; (80073ac <UART_SetConfig+0x4e4>)
 80072c8:	fba3 1302 	umull	r1, r3, r3, r2
 80072cc:	095b      	lsrs	r3, r3, #5
 80072ce:	2164      	movs	r1, #100	; 0x64
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	011b      	lsls	r3, r3, #4
 80072d8:	3332      	adds	r3, #50	; 0x32
 80072da:	4a34      	ldr	r2, [pc, #208]	; (80073ac <UART_SetConfig+0x4e4>)
 80072dc:	fba2 2303 	umull	r2, r3, r2, r3
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072e6:	441c      	add	r4, r3
 80072e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ec:	2200      	movs	r2, #0
 80072ee:	673b      	str	r3, [r7, #112]	; 0x70
 80072f0:	677a      	str	r2, [r7, #116]	; 0x74
 80072f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072f6:	4642      	mov	r2, r8
 80072f8:	464b      	mov	r3, r9
 80072fa:	1891      	adds	r1, r2, r2
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	415b      	adcs	r3, r3
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007306:	4641      	mov	r1, r8
 8007308:	1851      	adds	r1, r2, r1
 800730a:	6039      	str	r1, [r7, #0]
 800730c:	4649      	mov	r1, r9
 800730e:	414b      	adcs	r3, r1
 8007310:	607b      	str	r3, [r7, #4]
 8007312:	f04f 0200 	mov.w	r2, #0
 8007316:	f04f 0300 	mov.w	r3, #0
 800731a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800731e:	4659      	mov	r1, fp
 8007320:	00cb      	lsls	r3, r1, #3
 8007322:	4651      	mov	r1, sl
 8007324:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007328:	4651      	mov	r1, sl
 800732a:	00ca      	lsls	r2, r1, #3
 800732c:	4610      	mov	r0, r2
 800732e:	4619      	mov	r1, r3
 8007330:	4603      	mov	r3, r0
 8007332:	4642      	mov	r2, r8
 8007334:	189b      	adds	r3, r3, r2
 8007336:	66bb      	str	r3, [r7, #104]	; 0x68
 8007338:	464b      	mov	r3, r9
 800733a:	460a      	mov	r2, r1
 800733c:	eb42 0303 	adc.w	r3, r2, r3
 8007340:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	663b      	str	r3, [r7, #96]	; 0x60
 800734c:	667a      	str	r2, [r7, #100]	; 0x64
 800734e:	f04f 0200 	mov.w	r2, #0
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800735a:	4649      	mov	r1, r9
 800735c:	008b      	lsls	r3, r1, #2
 800735e:	4641      	mov	r1, r8
 8007360:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007364:	4641      	mov	r1, r8
 8007366:	008a      	lsls	r2, r1, #2
 8007368:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800736c:	f7f9 fc8c 	bl	8000c88 <__aeabi_uldivmod>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4b0d      	ldr	r3, [pc, #52]	; (80073ac <UART_SetConfig+0x4e4>)
 8007376:	fba3 1302 	umull	r1, r3, r3, r2
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	2164      	movs	r1, #100	; 0x64
 800737e:	fb01 f303 	mul.w	r3, r1, r3
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	011b      	lsls	r3, r3, #4
 8007386:	3332      	adds	r3, #50	; 0x32
 8007388:	4a08      	ldr	r2, [pc, #32]	; (80073ac <UART_SetConfig+0x4e4>)
 800738a:	fba2 2303 	umull	r2, r3, r2, r3
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	f003 020f 	and.w	r2, r3, #15
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4422      	add	r2, r4
 800739c:	609a      	str	r2, [r3, #8]
}
 800739e:	bf00      	nop
 80073a0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80073a4:	46bd      	mov	sp, r7
 80073a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073aa:	bf00      	nop
 80073ac:	51eb851f 	.word	0x51eb851f

080073b0 <__libc_init_array>:
 80073b0:	b570      	push	{r4, r5, r6, lr}
 80073b2:	4d0d      	ldr	r5, [pc, #52]	; (80073e8 <__libc_init_array+0x38>)
 80073b4:	4c0d      	ldr	r4, [pc, #52]	; (80073ec <__libc_init_array+0x3c>)
 80073b6:	1b64      	subs	r4, r4, r5
 80073b8:	10a4      	asrs	r4, r4, #2
 80073ba:	2600      	movs	r6, #0
 80073bc:	42a6      	cmp	r6, r4
 80073be:	d109      	bne.n	80073d4 <__libc_init_array+0x24>
 80073c0:	4d0b      	ldr	r5, [pc, #44]	; (80073f0 <__libc_init_array+0x40>)
 80073c2:	4c0c      	ldr	r4, [pc, #48]	; (80073f4 <__libc_init_array+0x44>)
 80073c4:	f003 ffd6 	bl	800b374 <_init>
 80073c8:	1b64      	subs	r4, r4, r5
 80073ca:	10a4      	asrs	r4, r4, #2
 80073cc:	2600      	movs	r6, #0
 80073ce:	42a6      	cmp	r6, r4
 80073d0:	d105      	bne.n	80073de <__libc_init_array+0x2e>
 80073d2:	bd70      	pop	{r4, r5, r6, pc}
 80073d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d8:	4798      	blx	r3
 80073da:	3601      	adds	r6, #1
 80073dc:	e7ee      	b.n	80073bc <__libc_init_array+0xc>
 80073de:	f855 3b04 	ldr.w	r3, [r5], #4
 80073e2:	4798      	blx	r3
 80073e4:	3601      	adds	r6, #1
 80073e6:	e7f2      	b.n	80073ce <__libc_init_array+0x1e>
 80073e8:	0800b9c0 	.word	0x0800b9c0
 80073ec:	0800b9c0 	.word	0x0800b9c0
 80073f0:	0800b9c0 	.word	0x0800b9c0
 80073f4:	0800b9c4 	.word	0x0800b9c4

080073f8 <memcpy>:
 80073f8:	440a      	add	r2, r1
 80073fa:	4291      	cmp	r1, r2
 80073fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007400:	d100      	bne.n	8007404 <memcpy+0xc>
 8007402:	4770      	bx	lr
 8007404:	b510      	push	{r4, lr}
 8007406:	f811 4b01 	ldrb.w	r4, [r1], #1
 800740a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800740e:	4291      	cmp	r1, r2
 8007410:	d1f9      	bne.n	8007406 <memcpy+0xe>
 8007412:	bd10      	pop	{r4, pc}

08007414 <memset>:
 8007414:	4402      	add	r2, r0
 8007416:	4603      	mov	r3, r0
 8007418:	4293      	cmp	r3, r2
 800741a:	d100      	bne.n	800741e <memset+0xa>
 800741c:	4770      	bx	lr
 800741e:	f803 1b01 	strb.w	r1, [r3], #1
 8007422:	e7f9      	b.n	8007418 <memset+0x4>

08007424 <__cvt>:
 8007424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	ec55 4b10 	vmov	r4, r5, d0
 800742c:	2d00      	cmp	r5, #0
 800742e:	460e      	mov	r6, r1
 8007430:	4619      	mov	r1, r3
 8007432:	462b      	mov	r3, r5
 8007434:	bfbb      	ittet	lt
 8007436:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800743a:	461d      	movlt	r5, r3
 800743c:	2300      	movge	r3, #0
 800743e:	232d      	movlt	r3, #45	; 0x2d
 8007440:	700b      	strb	r3, [r1, #0]
 8007442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007444:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007448:	4691      	mov	r9, r2
 800744a:	f023 0820 	bic.w	r8, r3, #32
 800744e:	bfbc      	itt	lt
 8007450:	4622      	movlt	r2, r4
 8007452:	4614      	movlt	r4, r2
 8007454:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007458:	d005      	beq.n	8007466 <__cvt+0x42>
 800745a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800745e:	d100      	bne.n	8007462 <__cvt+0x3e>
 8007460:	3601      	adds	r6, #1
 8007462:	2102      	movs	r1, #2
 8007464:	e000      	b.n	8007468 <__cvt+0x44>
 8007466:	2103      	movs	r1, #3
 8007468:	ab03      	add	r3, sp, #12
 800746a:	9301      	str	r3, [sp, #4]
 800746c:	ab02      	add	r3, sp, #8
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	ec45 4b10 	vmov	d0, r4, r5
 8007474:	4653      	mov	r3, sl
 8007476:	4632      	mov	r2, r6
 8007478:	f000 fcca 	bl	8007e10 <_dtoa_r>
 800747c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007480:	4607      	mov	r7, r0
 8007482:	d102      	bne.n	800748a <__cvt+0x66>
 8007484:	f019 0f01 	tst.w	r9, #1
 8007488:	d022      	beq.n	80074d0 <__cvt+0xac>
 800748a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800748e:	eb07 0906 	add.w	r9, r7, r6
 8007492:	d110      	bne.n	80074b6 <__cvt+0x92>
 8007494:	783b      	ldrb	r3, [r7, #0]
 8007496:	2b30      	cmp	r3, #48	; 0x30
 8007498:	d10a      	bne.n	80074b0 <__cvt+0x8c>
 800749a:	2200      	movs	r2, #0
 800749c:	2300      	movs	r3, #0
 800749e:	4620      	mov	r0, r4
 80074a0:	4629      	mov	r1, r5
 80074a2:	f7f9 fb31 	bl	8000b08 <__aeabi_dcmpeq>
 80074a6:	b918      	cbnz	r0, 80074b0 <__cvt+0x8c>
 80074a8:	f1c6 0601 	rsb	r6, r6, #1
 80074ac:	f8ca 6000 	str.w	r6, [sl]
 80074b0:	f8da 3000 	ldr.w	r3, [sl]
 80074b4:	4499      	add	r9, r3
 80074b6:	2200      	movs	r2, #0
 80074b8:	2300      	movs	r3, #0
 80074ba:	4620      	mov	r0, r4
 80074bc:	4629      	mov	r1, r5
 80074be:	f7f9 fb23 	bl	8000b08 <__aeabi_dcmpeq>
 80074c2:	b108      	cbz	r0, 80074c8 <__cvt+0xa4>
 80074c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80074c8:	2230      	movs	r2, #48	; 0x30
 80074ca:	9b03      	ldr	r3, [sp, #12]
 80074cc:	454b      	cmp	r3, r9
 80074ce:	d307      	bcc.n	80074e0 <__cvt+0xbc>
 80074d0:	9b03      	ldr	r3, [sp, #12]
 80074d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074d4:	1bdb      	subs	r3, r3, r7
 80074d6:	4638      	mov	r0, r7
 80074d8:	6013      	str	r3, [r2, #0]
 80074da:	b004      	add	sp, #16
 80074dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e0:	1c59      	adds	r1, r3, #1
 80074e2:	9103      	str	r1, [sp, #12]
 80074e4:	701a      	strb	r2, [r3, #0]
 80074e6:	e7f0      	b.n	80074ca <__cvt+0xa6>

080074e8 <__exponent>:
 80074e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ea:	4603      	mov	r3, r0
 80074ec:	2900      	cmp	r1, #0
 80074ee:	bfb8      	it	lt
 80074f0:	4249      	neglt	r1, r1
 80074f2:	f803 2b02 	strb.w	r2, [r3], #2
 80074f6:	bfb4      	ite	lt
 80074f8:	222d      	movlt	r2, #45	; 0x2d
 80074fa:	222b      	movge	r2, #43	; 0x2b
 80074fc:	2909      	cmp	r1, #9
 80074fe:	7042      	strb	r2, [r0, #1]
 8007500:	dd2a      	ble.n	8007558 <__exponent+0x70>
 8007502:	f10d 0407 	add.w	r4, sp, #7
 8007506:	46a4      	mov	ip, r4
 8007508:	270a      	movs	r7, #10
 800750a:	46a6      	mov	lr, r4
 800750c:	460a      	mov	r2, r1
 800750e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007512:	fb07 1516 	mls	r5, r7, r6, r1
 8007516:	3530      	adds	r5, #48	; 0x30
 8007518:	2a63      	cmp	r2, #99	; 0x63
 800751a:	f104 34ff 	add.w	r4, r4, #4294967295
 800751e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007522:	4631      	mov	r1, r6
 8007524:	dcf1      	bgt.n	800750a <__exponent+0x22>
 8007526:	3130      	adds	r1, #48	; 0x30
 8007528:	f1ae 0502 	sub.w	r5, lr, #2
 800752c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007530:	1c44      	adds	r4, r0, #1
 8007532:	4629      	mov	r1, r5
 8007534:	4561      	cmp	r1, ip
 8007536:	d30a      	bcc.n	800754e <__exponent+0x66>
 8007538:	f10d 0209 	add.w	r2, sp, #9
 800753c:	eba2 020e 	sub.w	r2, r2, lr
 8007540:	4565      	cmp	r5, ip
 8007542:	bf88      	it	hi
 8007544:	2200      	movhi	r2, #0
 8007546:	4413      	add	r3, r2
 8007548:	1a18      	subs	r0, r3, r0
 800754a:	b003      	add	sp, #12
 800754c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800754e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007552:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007556:	e7ed      	b.n	8007534 <__exponent+0x4c>
 8007558:	2330      	movs	r3, #48	; 0x30
 800755a:	3130      	adds	r1, #48	; 0x30
 800755c:	7083      	strb	r3, [r0, #2]
 800755e:	70c1      	strb	r1, [r0, #3]
 8007560:	1d03      	adds	r3, r0, #4
 8007562:	e7f1      	b.n	8007548 <__exponent+0x60>

08007564 <_printf_float>:
 8007564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007568:	ed2d 8b02 	vpush	{d8}
 800756c:	b08d      	sub	sp, #52	; 0x34
 800756e:	460c      	mov	r4, r1
 8007570:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007574:	4616      	mov	r6, r2
 8007576:	461f      	mov	r7, r3
 8007578:	4605      	mov	r5, r0
 800757a:	f001 fa37 	bl	80089ec <_localeconv_r>
 800757e:	f8d0 a000 	ldr.w	sl, [r0]
 8007582:	4650      	mov	r0, sl
 8007584:	f7f8 fe44 	bl	8000210 <strlen>
 8007588:	2300      	movs	r3, #0
 800758a:	930a      	str	r3, [sp, #40]	; 0x28
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	9305      	str	r3, [sp, #20]
 8007590:	f8d8 3000 	ldr.w	r3, [r8]
 8007594:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007598:	3307      	adds	r3, #7
 800759a:	f023 0307 	bic.w	r3, r3, #7
 800759e:	f103 0208 	add.w	r2, r3, #8
 80075a2:	f8c8 2000 	str.w	r2, [r8]
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80075ae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80075b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075b6:	9307      	str	r3, [sp, #28]
 80075b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80075bc:	ee08 0a10 	vmov	s16, r0
 80075c0:	4b9f      	ldr	r3, [pc, #636]	; (8007840 <_printf_float+0x2dc>)
 80075c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075c6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ca:	f7f9 facf 	bl	8000b6c <__aeabi_dcmpun>
 80075ce:	bb88      	cbnz	r0, 8007634 <_printf_float+0xd0>
 80075d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075d4:	4b9a      	ldr	r3, [pc, #616]	; (8007840 <_printf_float+0x2dc>)
 80075d6:	f04f 32ff 	mov.w	r2, #4294967295
 80075da:	f7f9 faa9 	bl	8000b30 <__aeabi_dcmple>
 80075de:	bb48      	cbnz	r0, 8007634 <_printf_float+0xd0>
 80075e0:	2200      	movs	r2, #0
 80075e2:	2300      	movs	r3, #0
 80075e4:	4640      	mov	r0, r8
 80075e6:	4649      	mov	r1, r9
 80075e8:	f7f9 fa98 	bl	8000b1c <__aeabi_dcmplt>
 80075ec:	b110      	cbz	r0, 80075f4 <_printf_float+0x90>
 80075ee:	232d      	movs	r3, #45	; 0x2d
 80075f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f4:	4b93      	ldr	r3, [pc, #588]	; (8007844 <_printf_float+0x2e0>)
 80075f6:	4894      	ldr	r0, [pc, #592]	; (8007848 <_printf_float+0x2e4>)
 80075f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075fc:	bf94      	ite	ls
 80075fe:	4698      	movls	r8, r3
 8007600:	4680      	movhi	r8, r0
 8007602:	2303      	movs	r3, #3
 8007604:	6123      	str	r3, [r4, #16]
 8007606:	9b05      	ldr	r3, [sp, #20]
 8007608:	f023 0204 	bic.w	r2, r3, #4
 800760c:	6022      	str	r2, [r4, #0]
 800760e:	f04f 0900 	mov.w	r9, #0
 8007612:	9700      	str	r7, [sp, #0]
 8007614:	4633      	mov	r3, r6
 8007616:	aa0b      	add	r2, sp, #44	; 0x2c
 8007618:	4621      	mov	r1, r4
 800761a:	4628      	mov	r0, r5
 800761c:	f000 f9d8 	bl	80079d0 <_printf_common>
 8007620:	3001      	adds	r0, #1
 8007622:	f040 8090 	bne.w	8007746 <_printf_float+0x1e2>
 8007626:	f04f 30ff 	mov.w	r0, #4294967295
 800762a:	b00d      	add	sp, #52	; 0x34
 800762c:	ecbd 8b02 	vpop	{d8}
 8007630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007634:	4642      	mov	r2, r8
 8007636:	464b      	mov	r3, r9
 8007638:	4640      	mov	r0, r8
 800763a:	4649      	mov	r1, r9
 800763c:	f7f9 fa96 	bl	8000b6c <__aeabi_dcmpun>
 8007640:	b140      	cbz	r0, 8007654 <_printf_float+0xf0>
 8007642:	464b      	mov	r3, r9
 8007644:	2b00      	cmp	r3, #0
 8007646:	bfbc      	itt	lt
 8007648:	232d      	movlt	r3, #45	; 0x2d
 800764a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800764e:	487f      	ldr	r0, [pc, #508]	; (800784c <_printf_float+0x2e8>)
 8007650:	4b7f      	ldr	r3, [pc, #508]	; (8007850 <_printf_float+0x2ec>)
 8007652:	e7d1      	b.n	80075f8 <_printf_float+0x94>
 8007654:	6863      	ldr	r3, [r4, #4]
 8007656:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800765a:	9206      	str	r2, [sp, #24]
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	d13f      	bne.n	80076e0 <_printf_float+0x17c>
 8007660:	2306      	movs	r3, #6
 8007662:	6063      	str	r3, [r4, #4]
 8007664:	9b05      	ldr	r3, [sp, #20]
 8007666:	6861      	ldr	r1, [r4, #4]
 8007668:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800766c:	2300      	movs	r3, #0
 800766e:	9303      	str	r3, [sp, #12]
 8007670:	ab0a      	add	r3, sp, #40	; 0x28
 8007672:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007676:	ab09      	add	r3, sp, #36	; 0x24
 8007678:	ec49 8b10 	vmov	d0, r8, r9
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	6022      	str	r2, [r4, #0]
 8007680:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007684:	4628      	mov	r0, r5
 8007686:	f7ff fecd 	bl	8007424 <__cvt>
 800768a:	9b06      	ldr	r3, [sp, #24]
 800768c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800768e:	2b47      	cmp	r3, #71	; 0x47
 8007690:	4680      	mov	r8, r0
 8007692:	d108      	bne.n	80076a6 <_printf_float+0x142>
 8007694:	1cc8      	adds	r0, r1, #3
 8007696:	db02      	blt.n	800769e <_printf_float+0x13a>
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	4299      	cmp	r1, r3
 800769c:	dd41      	ble.n	8007722 <_printf_float+0x1be>
 800769e:	f1ab 0b02 	sub.w	fp, fp, #2
 80076a2:	fa5f fb8b 	uxtb.w	fp, fp
 80076a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076aa:	d820      	bhi.n	80076ee <_printf_float+0x18a>
 80076ac:	3901      	subs	r1, #1
 80076ae:	465a      	mov	r2, fp
 80076b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076b4:	9109      	str	r1, [sp, #36]	; 0x24
 80076b6:	f7ff ff17 	bl	80074e8 <__exponent>
 80076ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076bc:	1813      	adds	r3, r2, r0
 80076be:	2a01      	cmp	r2, #1
 80076c0:	4681      	mov	r9, r0
 80076c2:	6123      	str	r3, [r4, #16]
 80076c4:	dc02      	bgt.n	80076cc <_printf_float+0x168>
 80076c6:	6822      	ldr	r2, [r4, #0]
 80076c8:	07d2      	lsls	r2, r2, #31
 80076ca:	d501      	bpl.n	80076d0 <_printf_float+0x16c>
 80076cc:	3301      	adds	r3, #1
 80076ce:	6123      	str	r3, [r4, #16]
 80076d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d09c      	beq.n	8007612 <_printf_float+0xae>
 80076d8:	232d      	movs	r3, #45	; 0x2d
 80076da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076de:	e798      	b.n	8007612 <_printf_float+0xae>
 80076e0:	9a06      	ldr	r2, [sp, #24]
 80076e2:	2a47      	cmp	r2, #71	; 0x47
 80076e4:	d1be      	bne.n	8007664 <_printf_float+0x100>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1bc      	bne.n	8007664 <_printf_float+0x100>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e7b9      	b.n	8007662 <_printf_float+0xfe>
 80076ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076f2:	d118      	bne.n	8007726 <_printf_float+0x1c2>
 80076f4:	2900      	cmp	r1, #0
 80076f6:	6863      	ldr	r3, [r4, #4]
 80076f8:	dd0b      	ble.n	8007712 <_printf_float+0x1ae>
 80076fa:	6121      	str	r1, [r4, #16]
 80076fc:	b913      	cbnz	r3, 8007704 <_printf_float+0x1a0>
 80076fe:	6822      	ldr	r2, [r4, #0]
 8007700:	07d0      	lsls	r0, r2, #31
 8007702:	d502      	bpl.n	800770a <_printf_float+0x1a6>
 8007704:	3301      	adds	r3, #1
 8007706:	440b      	add	r3, r1
 8007708:	6123      	str	r3, [r4, #16]
 800770a:	65a1      	str	r1, [r4, #88]	; 0x58
 800770c:	f04f 0900 	mov.w	r9, #0
 8007710:	e7de      	b.n	80076d0 <_printf_float+0x16c>
 8007712:	b913      	cbnz	r3, 800771a <_printf_float+0x1b6>
 8007714:	6822      	ldr	r2, [r4, #0]
 8007716:	07d2      	lsls	r2, r2, #31
 8007718:	d501      	bpl.n	800771e <_printf_float+0x1ba>
 800771a:	3302      	adds	r3, #2
 800771c:	e7f4      	b.n	8007708 <_printf_float+0x1a4>
 800771e:	2301      	movs	r3, #1
 8007720:	e7f2      	b.n	8007708 <_printf_float+0x1a4>
 8007722:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007728:	4299      	cmp	r1, r3
 800772a:	db05      	blt.n	8007738 <_printf_float+0x1d4>
 800772c:	6823      	ldr	r3, [r4, #0]
 800772e:	6121      	str	r1, [r4, #16]
 8007730:	07d8      	lsls	r0, r3, #31
 8007732:	d5ea      	bpl.n	800770a <_printf_float+0x1a6>
 8007734:	1c4b      	adds	r3, r1, #1
 8007736:	e7e7      	b.n	8007708 <_printf_float+0x1a4>
 8007738:	2900      	cmp	r1, #0
 800773a:	bfd4      	ite	le
 800773c:	f1c1 0202 	rsble	r2, r1, #2
 8007740:	2201      	movgt	r2, #1
 8007742:	4413      	add	r3, r2
 8007744:	e7e0      	b.n	8007708 <_printf_float+0x1a4>
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	055a      	lsls	r2, r3, #21
 800774a:	d407      	bmi.n	800775c <_printf_float+0x1f8>
 800774c:	6923      	ldr	r3, [r4, #16]
 800774e:	4642      	mov	r2, r8
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	47b8      	blx	r7
 8007756:	3001      	adds	r0, #1
 8007758:	d12c      	bne.n	80077b4 <_printf_float+0x250>
 800775a:	e764      	b.n	8007626 <_printf_float+0xc2>
 800775c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007760:	f240 80e0 	bls.w	8007924 <_printf_float+0x3c0>
 8007764:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007768:	2200      	movs	r2, #0
 800776a:	2300      	movs	r3, #0
 800776c:	f7f9 f9cc 	bl	8000b08 <__aeabi_dcmpeq>
 8007770:	2800      	cmp	r0, #0
 8007772:	d034      	beq.n	80077de <_printf_float+0x27a>
 8007774:	4a37      	ldr	r2, [pc, #220]	; (8007854 <_printf_float+0x2f0>)
 8007776:	2301      	movs	r3, #1
 8007778:	4631      	mov	r1, r6
 800777a:	4628      	mov	r0, r5
 800777c:	47b8      	blx	r7
 800777e:	3001      	adds	r0, #1
 8007780:	f43f af51 	beq.w	8007626 <_printf_float+0xc2>
 8007784:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007788:	429a      	cmp	r2, r3
 800778a:	db02      	blt.n	8007792 <_printf_float+0x22e>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	07d8      	lsls	r0, r3, #31
 8007790:	d510      	bpl.n	80077b4 <_printf_float+0x250>
 8007792:	ee18 3a10 	vmov	r3, s16
 8007796:	4652      	mov	r2, sl
 8007798:	4631      	mov	r1, r6
 800779a:	4628      	mov	r0, r5
 800779c:	47b8      	blx	r7
 800779e:	3001      	adds	r0, #1
 80077a0:	f43f af41 	beq.w	8007626 <_printf_float+0xc2>
 80077a4:	f04f 0800 	mov.w	r8, #0
 80077a8:	f104 091a 	add.w	r9, r4, #26
 80077ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ae:	3b01      	subs	r3, #1
 80077b0:	4543      	cmp	r3, r8
 80077b2:	dc09      	bgt.n	80077c8 <_printf_float+0x264>
 80077b4:	6823      	ldr	r3, [r4, #0]
 80077b6:	079b      	lsls	r3, r3, #30
 80077b8:	f100 8105 	bmi.w	80079c6 <_printf_float+0x462>
 80077bc:	68e0      	ldr	r0, [r4, #12]
 80077be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077c0:	4298      	cmp	r0, r3
 80077c2:	bfb8      	it	lt
 80077c4:	4618      	movlt	r0, r3
 80077c6:	e730      	b.n	800762a <_printf_float+0xc6>
 80077c8:	2301      	movs	r3, #1
 80077ca:	464a      	mov	r2, r9
 80077cc:	4631      	mov	r1, r6
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	f43f af27 	beq.w	8007626 <_printf_float+0xc2>
 80077d8:	f108 0801 	add.w	r8, r8, #1
 80077dc:	e7e6      	b.n	80077ac <_printf_float+0x248>
 80077de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	dc39      	bgt.n	8007858 <_printf_float+0x2f4>
 80077e4:	4a1b      	ldr	r2, [pc, #108]	; (8007854 <_printf_float+0x2f0>)
 80077e6:	2301      	movs	r3, #1
 80077e8:	4631      	mov	r1, r6
 80077ea:	4628      	mov	r0, r5
 80077ec:	47b8      	blx	r7
 80077ee:	3001      	adds	r0, #1
 80077f0:	f43f af19 	beq.w	8007626 <_printf_float+0xc2>
 80077f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077f8:	4313      	orrs	r3, r2
 80077fa:	d102      	bne.n	8007802 <_printf_float+0x29e>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	07d9      	lsls	r1, r3, #31
 8007800:	d5d8      	bpl.n	80077b4 <_printf_float+0x250>
 8007802:	ee18 3a10 	vmov	r3, s16
 8007806:	4652      	mov	r2, sl
 8007808:	4631      	mov	r1, r6
 800780a:	4628      	mov	r0, r5
 800780c:	47b8      	blx	r7
 800780e:	3001      	adds	r0, #1
 8007810:	f43f af09 	beq.w	8007626 <_printf_float+0xc2>
 8007814:	f04f 0900 	mov.w	r9, #0
 8007818:	f104 0a1a 	add.w	sl, r4, #26
 800781c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781e:	425b      	negs	r3, r3
 8007820:	454b      	cmp	r3, r9
 8007822:	dc01      	bgt.n	8007828 <_printf_float+0x2c4>
 8007824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007826:	e792      	b.n	800774e <_printf_float+0x1ea>
 8007828:	2301      	movs	r3, #1
 800782a:	4652      	mov	r2, sl
 800782c:	4631      	mov	r1, r6
 800782e:	4628      	mov	r0, r5
 8007830:	47b8      	blx	r7
 8007832:	3001      	adds	r0, #1
 8007834:	f43f aef7 	beq.w	8007626 <_printf_float+0xc2>
 8007838:	f109 0901 	add.w	r9, r9, #1
 800783c:	e7ee      	b.n	800781c <_printf_float+0x2b8>
 800783e:	bf00      	nop
 8007840:	7fefffff 	.word	0x7fefffff
 8007844:	0800b3c4 	.word	0x0800b3c4
 8007848:	0800b3c8 	.word	0x0800b3c8
 800784c:	0800b3d0 	.word	0x0800b3d0
 8007850:	0800b3cc 	.word	0x0800b3cc
 8007854:	0800b3d4 	.word	0x0800b3d4
 8007858:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800785a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800785c:	429a      	cmp	r2, r3
 800785e:	bfa8      	it	ge
 8007860:	461a      	movge	r2, r3
 8007862:	2a00      	cmp	r2, #0
 8007864:	4691      	mov	r9, r2
 8007866:	dc37      	bgt.n	80078d8 <_printf_float+0x374>
 8007868:	f04f 0b00 	mov.w	fp, #0
 800786c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007870:	f104 021a 	add.w	r2, r4, #26
 8007874:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007876:	9305      	str	r3, [sp, #20]
 8007878:	eba3 0309 	sub.w	r3, r3, r9
 800787c:	455b      	cmp	r3, fp
 800787e:	dc33      	bgt.n	80078e8 <_printf_float+0x384>
 8007880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007884:	429a      	cmp	r2, r3
 8007886:	db3b      	blt.n	8007900 <_printf_float+0x39c>
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	07da      	lsls	r2, r3, #31
 800788c:	d438      	bmi.n	8007900 <_printf_float+0x39c>
 800788e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007890:	9a05      	ldr	r2, [sp, #20]
 8007892:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007894:	1a9a      	subs	r2, r3, r2
 8007896:	eba3 0901 	sub.w	r9, r3, r1
 800789a:	4591      	cmp	r9, r2
 800789c:	bfa8      	it	ge
 800789e:	4691      	movge	r9, r2
 80078a0:	f1b9 0f00 	cmp.w	r9, #0
 80078a4:	dc35      	bgt.n	8007912 <_printf_float+0x3ae>
 80078a6:	f04f 0800 	mov.w	r8, #0
 80078aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078ae:	f104 0a1a 	add.w	sl, r4, #26
 80078b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078b6:	1a9b      	subs	r3, r3, r2
 80078b8:	eba3 0309 	sub.w	r3, r3, r9
 80078bc:	4543      	cmp	r3, r8
 80078be:	f77f af79 	ble.w	80077b4 <_printf_float+0x250>
 80078c2:	2301      	movs	r3, #1
 80078c4:	4652      	mov	r2, sl
 80078c6:	4631      	mov	r1, r6
 80078c8:	4628      	mov	r0, r5
 80078ca:	47b8      	blx	r7
 80078cc:	3001      	adds	r0, #1
 80078ce:	f43f aeaa 	beq.w	8007626 <_printf_float+0xc2>
 80078d2:	f108 0801 	add.w	r8, r8, #1
 80078d6:	e7ec      	b.n	80078b2 <_printf_float+0x34e>
 80078d8:	4613      	mov	r3, r2
 80078da:	4631      	mov	r1, r6
 80078dc:	4642      	mov	r2, r8
 80078de:	4628      	mov	r0, r5
 80078e0:	47b8      	blx	r7
 80078e2:	3001      	adds	r0, #1
 80078e4:	d1c0      	bne.n	8007868 <_printf_float+0x304>
 80078e6:	e69e      	b.n	8007626 <_printf_float+0xc2>
 80078e8:	2301      	movs	r3, #1
 80078ea:	4631      	mov	r1, r6
 80078ec:	4628      	mov	r0, r5
 80078ee:	9205      	str	r2, [sp, #20]
 80078f0:	47b8      	blx	r7
 80078f2:	3001      	adds	r0, #1
 80078f4:	f43f ae97 	beq.w	8007626 <_printf_float+0xc2>
 80078f8:	9a05      	ldr	r2, [sp, #20]
 80078fa:	f10b 0b01 	add.w	fp, fp, #1
 80078fe:	e7b9      	b.n	8007874 <_printf_float+0x310>
 8007900:	ee18 3a10 	vmov	r3, s16
 8007904:	4652      	mov	r2, sl
 8007906:	4631      	mov	r1, r6
 8007908:	4628      	mov	r0, r5
 800790a:	47b8      	blx	r7
 800790c:	3001      	adds	r0, #1
 800790e:	d1be      	bne.n	800788e <_printf_float+0x32a>
 8007910:	e689      	b.n	8007626 <_printf_float+0xc2>
 8007912:	9a05      	ldr	r2, [sp, #20]
 8007914:	464b      	mov	r3, r9
 8007916:	4442      	add	r2, r8
 8007918:	4631      	mov	r1, r6
 800791a:	4628      	mov	r0, r5
 800791c:	47b8      	blx	r7
 800791e:	3001      	adds	r0, #1
 8007920:	d1c1      	bne.n	80078a6 <_printf_float+0x342>
 8007922:	e680      	b.n	8007626 <_printf_float+0xc2>
 8007924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007926:	2a01      	cmp	r2, #1
 8007928:	dc01      	bgt.n	800792e <_printf_float+0x3ca>
 800792a:	07db      	lsls	r3, r3, #31
 800792c:	d538      	bpl.n	80079a0 <_printf_float+0x43c>
 800792e:	2301      	movs	r3, #1
 8007930:	4642      	mov	r2, r8
 8007932:	4631      	mov	r1, r6
 8007934:	4628      	mov	r0, r5
 8007936:	47b8      	blx	r7
 8007938:	3001      	adds	r0, #1
 800793a:	f43f ae74 	beq.w	8007626 <_printf_float+0xc2>
 800793e:	ee18 3a10 	vmov	r3, s16
 8007942:	4652      	mov	r2, sl
 8007944:	4631      	mov	r1, r6
 8007946:	4628      	mov	r0, r5
 8007948:	47b8      	blx	r7
 800794a:	3001      	adds	r0, #1
 800794c:	f43f ae6b 	beq.w	8007626 <_printf_float+0xc2>
 8007950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007954:	2200      	movs	r2, #0
 8007956:	2300      	movs	r3, #0
 8007958:	f7f9 f8d6 	bl	8000b08 <__aeabi_dcmpeq>
 800795c:	b9d8      	cbnz	r0, 8007996 <_printf_float+0x432>
 800795e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007960:	f108 0201 	add.w	r2, r8, #1
 8007964:	3b01      	subs	r3, #1
 8007966:	4631      	mov	r1, r6
 8007968:	4628      	mov	r0, r5
 800796a:	47b8      	blx	r7
 800796c:	3001      	adds	r0, #1
 800796e:	d10e      	bne.n	800798e <_printf_float+0x42a>
 8007970:	e659      	b.n	8007626 <_printf_float+0xc2>
 8007972:	2301      	movs	r3, #1
 8007974:	4652      	mov	r2, sl
 8007976:	4631      	mov	r1, r6
 8007978:	4628      	mov	r0, r5
 800797a:	47b8      	blx	r7
 800797c:	3001      	adds	r0, #1
 800797e:	f43f ae52 	beq.w	8007626 <_printf_float+0xc2>
 8007982:	f108 0801 	add.w	r8, r8, #1
 8007986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007988:	3b01      	subs	r3, #1
 800798a:	4543      	cmp	r3, r8
 800798c:	dcf1      	bgt.n	8007972 <_printf_float+0x40e>
 800798e:	464b      	mov	r3, r9
 8007990:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007994:	e6dc      	b.n	8007750 <_printf_float+0x1ec>
 8007996:	f04f 0800 	mov.w	r8, #0
 800799a:	f104 0a1a 	add.w	sl, r4, #26
 800799e:	e7f2      	b.n	8007986 <_printf_float+0x422>
 80079a0:	2301      	movs	r3, #1
 80079a2:	4642      	mov	r2, r8
 80079a4:	e7df      	b.n	8007966 <_printf_float+0x402>
 80079a6:	2301      	movs	r3, #1
 80079a8:	464a      	mov	r2, r9
 80079aa:	4631      	mov	r1, r6
 80079ac:	4628      	mov	r0, r5
 80079ae:	47b8      	blx	r7
 80079b0:	3001      	adds	r0, #1
 80079b2:	f43f ae38 	beq.w	8007626 <_printf_float+0xc2>
 80079b6:	f108 0801 	add.w	r8, r8, #1
 80079ba:	68e3      	ldr	r3, [r4, #12]
 80079bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079be:	1a5b      	subs	r3, r3, r1
 80079c0:	4543      	cmp	r3, r8
 80079c2:	dcf0      	bgt.n	80079a6 <_printf_float+0x442>
 80079c4:	e6fa      	b.n	80077bc <_printf_float+0x258>
 80079c6:	f04f 0800 	mov.w	r8, #0
 80079ca:	f104 0919 	add.w	r9, r4, #25
 80079ce:	e7f4      	b.n	80079ba <_printf_float+0x456>

080079d0 <_printf_common>:
 80079d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d4:	4616      	mov	r6, r2
 80079d6:	4699      	mov	r9, r3
 80079d8:	688a      	ldr	r2, [r1, #8]
 80079da:	690b      	ldr	r3, [r1, #16]
 80079dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079e0:	4293      	cmp	r3, r2
 80079e2:	bfb8      	it	lt
 80079e4:	4613      	movlt	r3, r2
 80079e6:	6033      	str	r3, [r6, #0]
 80079e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079ec:	4607      	mov	r7, r0
 80079ee:	460c      	mov	r4, r1
 80079f0:	b10a      	cbz	r2, 80079f6 <_printf_common+0x26>
 80079f2:	3301      	adds	r3, #1
 80079f4:	6033      	str	r3, [r6, #0]
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	0699      	lsls	r1, r3, #26
 80079fa:	bf42      	ittt	mi
 80079fc:	6833      	ldrmi	r3, [r6, #0]
 80079fe:	3302      	addmi	r3, #2
 8007a00:	6033      	strmi	r3, [r6, #0]
 8007a02:	6825      	ldr	r5, [r4, #0]
 8007a04:	f015 0506 	ands.w	r5, r5, #6
 8007a08:	d106      	bne.n	8007a18 <_printf_common+0x48>
 8007a0a:	f104 0a19 	add.w	sl, r4, #25
 8007a0e:	68e3      	ldr	r3, [r4, #12]
 8007a10:	6832      	ldr	r2, [r6, #0]
 8007a12:	1a9b      	subs	r3, r3, r2
 8007a14:	42ab      	cmp	r3, r5
 8007a16:	dc26      	bgt.n	8007a66 <_printf_common+0x96>
 8007a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a1c:	1e13      	subs	r3, r2, #0
 8007a1e:	6822      	ldr	r2, [r4, #0]
 8007a20:	bf18      	it	ne
 8007a22:	2301      	movne	r3, #1
 8007a24:	0692      	lsls	r2, r2, #26
 8007a26:	d42b      	bmi.n	8007a80 <_printf_common+0xb0>
 8007a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	4638      	mov	r0, r7
 8007a30:	47c0      	blx	r8
 8007a32:	3001      	adds	r0, #1
 8007a34:	d01e      	beq.n	8007a74 <_printf_common+0xa4>
 8007a36:	6823      	ldr	r3, [r4, #0]
 8007a38:	68e5      	ldr	r5, [r4, #12]
 8007a3a:	6832      	ldr	r2, [r6, #0]
 8007a3c:	f003 0306 	and.w	r3, r3, #6
 8007a40:	2b04      	cmp	r3, #4
 8007a42:	bf08      	it	eq
 8007a44:	1aad      	subeq	r5, r5, r2
 8007a46:	68a3      	ldr	r3, [r4, #8]
 8007a48:	6922      	ldr	r2, [r4, #16]
 8007a4a:	bf0c      	ite	eq
 8007a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a50:	2500      	movne	r5, #0
 8007a52:	4293      	cmp	r3, r2
 8007a54:	bfc4      	itt	gt
 8007a56:	1a9b      	subgt	r3, r3, r2
 8007a58:	18ed      	addgt	r5, r5, r3
 8007a5a:	2600      	movs	r6, #0
 8007a5c:	341a      	adds	r4, #26
 8007a5e:	42b5      	cmp	r5, r6
 8007a60:	d11a      	bne.n	8007a98 <_printf_common+0xc8>
 8007a62:	2000      	movs	r0, #0
 8007a64:	e008      	b.n	8007a78 <_printf_common+0xa8>
 8007a66:	2301      	movs	r3, #1
 8007a68:	4652      	mov	r2, sl
 8007a6a:	4649      	mov	r1, r9
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	47c0      	blx	r8
 8007a70:	3001      	adds	r0, #1
 8007a72:	d103      	bne.n	8007a7c <_printf_common+0xac>
 8007a74:	f04f 30ff 	mov.w	r0, #4294967295
 8007a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7c:	3501      	adds	r5, #1
 8007a7e:	e7c6      	b.n	8007a0e <_printf_common+0x3e>
 8007a80:	18e1      	adds	r1, r4, r3
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	2030      	movs	r0, #48	; 0x30
 8007a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a8a:	4422      	add	r2, r4
 8007a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a94:	3302      	adds	r3, #2
 8007a96:	e7c7      	b.n	8007a28 <_printf_common+0x58>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4622      	mov	r2, r4
 8007a9c:	4649      	mov	r1, r9
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	47c0      	blx	r8
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	d0e6      	beq.n	8007a74 <_printf_common+0xa4>
 8007aa6:	3601      	adds	r6, #1
 8007aa8:	e7d9      	b.n	8007a5e <_printf_common+0x8e>
	...

08007aac <_printf_i>:
 8007aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab0:	7e0f      	ldrb	r7, [r1, #24]
 8007ab2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ab4:	2f78      	cmp	r7, #120	; 0x78
 8007ab6:	4691      	mov	r9, r2
 8007ab8:	4680      	mov	r8, r0
 8007aba:	460c      	mov	r4, r1
 8007abc:	469a      	mov	sl, r3
 8007abe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ac2:	d807      	bhi.n	8007ad4 <_printf_i+0x28>
 8007ac4:	2f62      	cmp	r7, #98	; 0x62
 8007ac6:	d80a      	bhi.n	8007ade <_printf_i+0x32>
 8007ac8:	2f00      	cmp	r7, #0
 8007aca:	f000 80d8 	beq.w	8007c7e <_printf_i+0x1d2>
 8007ace:	2f58      	cmp	r7, #88	; 0x58
 8007ad0:	f000 80a3 	beq.w	8007c1a <_printf_i+0x16e>
 8007ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007adc:	e03a      	b.n	8007b54 <_printf_i+0xa8>
 8007ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ae2:	2b15      	cmp	r3, #21
 8007ae4:	d8f6      	bhi.n	8007ad4 <_printf_i+0x28>
 8007ae6:	a101      	add	r1, pc, #4	; (adr r1, 8007aec <_printf_i+0x40>)
 8007ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007aec:	08007b45 	.word	0x08007b45
 8007af0:	08007b59 	.word	0x08007b59
 8007af4:	08007ad5 	.word	0x08007ad5
 8007af8:	08007ad5 	.word	0x08007ad5
 8007afc:	08007ad5 	.word	0x08007ad5
 8007b00:	08007ad5 	.word	0x08007ad5
 8007b04:	08007b59 	.word	0x08007b59
 8007b08:	08007ad5 	.word	0x08007ad5
 8007b0c:	08007ad5 	.word	0x08007ad5
 8007b10:	08007ad5 	.word	0x08007ad5
 8007b14:	08007ad5 	.word	0x08007ad5
 8007b18:	08007c65 	.word	0x08007c65
 8007b1c:	08007b89 	.word	0x08007b89
 8007b20:	08007c47 	.word	0x08007c47
 8007b24:	08007ad5 	.word	0x08007ad5
 8007b28:	08007ad5 	.word	0x08007ad5
 8007b2c:	08007c87 	.word	0x08007c87
 8007b30:	08007ad5 	.word	0x08007ad5
 8007b34:	08007b89 	.word	0x08007b89
 8007b38:	08007ad5 	.word	0x08007ad5
 8007b3c:	08007ad5 	.word	0x08007ad5
 8007b40:	08007c4f 	.word	0x08007c4f
 8007b44:	682b      	ldr	r3, [r5, #0]
 8007b46:	1d1a      	adds	r2, r3, #4
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	602a      	str	r2, [r5, #0]
 8007b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b54:	2301      	movs	r3, #1
 8007b56:	e0a3      	b.n	8007ca0 <_printf_i+0x1f4>
 8007b58:	6820      	ldr	r0, [r4, #0]
 8007b5a:	6829      	ldr	r1, [r5, #0]
 8007b5c:	0606      	lsls	r6, r0, #24
 8007b5e:	f101 0304 	add.w	r3, r1, #4
 8007b62:	d50a      	bpl.n	8007b7a <_printf_i+0xce>
 8007b64:	680e      	ldr	r6, [r1, #0]
 8007b66:	602b      	str	r3, [r5, #0]
 8007b68:	2e00      	cmp	r6, #0
 8007b6a:	da03      	bge.n	8007b74 <_printf_i+0xc8>
 8007b6c:	232d      	movs	r3, #45	; 0x2d
 8007b6e:	4276      	negs	r6, r6
 8007b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b74:	485e      	ldr	r0, [pc, #376]	; (8007cf0 <_printf_i+0x244>)
 8007b76:	230a      	movs	r3, #10
 8007b78:	e019      	b.n	8007bae <_printf_i+0x102>
 8007b7a:	680e      	ldr	r6, [r1, #0]
 8007b7c:	602b      	str	r3, [r5, #0]
 8007b7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b82:	bf18      	it	ne
 8007b84:	b236      	sxthne	r6, r6
 8007b86:	e7ef      	b.n	8007b68 <_printf_i+0xbc>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	6820      	ldr	r0, [r4, #0]
 8007b8c:	1d19      	adds	r1, r3, #4
 8007b8e:	6029      	str	r1, [r5, #0]
 8007b90:	0601      	lsls	r1, r0, #24
 8007b92:	d501      	bpl.n	8007b98 <_printf_i+0xec>
 8007b94:	681e      	ldr	r6, [r3, #0]
 8007b96:	e002      	b.n	8007b9e <_printf_i+0xf2>
 8007b98:	0646      	lsls	r6, r0, #25
 8007b9a:	d5fb      	bpl.n	8007b94 <_printf_i+0xe8>
 8007b9c:	881e      	ldrh	r6, [r3, #0]
 8007b9e:	4854      	ldr	r0, [pc, #336]	; (8007cf0 <_printf_i+0x244>)
 8007ba0:	2f6f      	cmp	r7, #111	; 0x6f
 8007ba2:	bf0c      	ite	eq
 8007ba4:	2308      	moveq	r3, #8
 8007ba6:	230a      	movne	r3, #10
 8007ba8:	2100      	movs	r1, #0
 8007baa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007bae:	6865      	ldr	r5, [r4, #4]
 8007bb0:	60a5      	str	r5, [r4, #8]
 8007bb2:	2d00      	cmp	r5, #0
 8007bb4:	bfa2      	ittt	ge
 8007bb6:	6821      	ldrge	r1, [r4, #0]
 8007bb8:	f021 0104 	bicge.w	r1, r1, #4
 8007bbc:	6021      	strge	r1, [r4, #0]
 8007bbe:	b90e      	cbnz	r6, 8007bc4 <_printf_i+0x118>
 8007bc0:	2d00      	cmp	r5, #0
 8007bc2:	d04d      	beq.n	8007c60 <_printf_i+0x1b4>
 8007bc4:	4615      	mov	r5, r2
 8007bc6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bca:	fb03 6711 	mls	r7, r3, r1, r6
 8007bce:	5dc7      	ldrb	r7, [r0, r7]
 8007bd0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bd4:	4637      	mov	r7, r6
 8007bd6:	42bb      	cmp	r3, r7
 8007bd8:	460e      	mov	r6, r1
 8007bda:	d9f4      	bls.n	8007bc6 <_printf_i+0x11a>
 8007bdc:	2b08      	cmp	r3, #8
 8007bde:	d10b      	bne.n	8007bf8 <_printf_i+0x14c>
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	07de      	lsls	r6, r3, #31
 8007be4:	d508      	bpl.n	8007bf8 <_printf_i+0x14c>
 8007be6:	6923      	ldr	r3, [r4, #16]
 8007be8:	6861      	ldr	r1, [r4, #4]
 8007bea:	4299      	cmp	r1, r3
 8007bec:	bfde      	ittt	le
 8007bee:	2330      	movle	r3, #48	; 0x30
 8007bf0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bf4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bf8:	1b52      	subs	r2, r2, r5
 8007bfa:	6122      	str	r2, [r4, #16]
 8007bfc:	f8cd a000 	str.w	sl, [sp]
 8007c00:	464b      	mov	r3, r9
 8007c02:	aa03      	add	r2, sp, #12
 8007c04:	4621      	mov	r1, r4
 8007c06:	4640      	mov	r0, r8
 8007c08:	f7ff fee2 	bl	80079d0 <_printf_common>
 8007c0c:	3001      	adds	r0, #1
 8007c0e:	d14c      	bne.n	8007caa <_printf_i+0x1fe>
 8007c10:	f04f 30ff 	mov.w	r0, #4294967295
 8007c14:	b004      	add	sp, #16
 8007c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1a:	4835      	ldr	r0, [pc, #212]	; (8007cf0 <_printf_i+0x244>)
 8007c1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c20:	6829      	ldr	r1, [r5, #0]
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c28:	6029      	str	r1, [r5, #0]
 8007c2a:	061d      	lsls	r5, r3, #24
 8007c2c:	d514      	bpl.n	8007c58 <_printf_i+0x1ac>
 8007c2e:	07df      	lsls	r7, r3, #31
 8007c30:	bf44      	itt	mi
 8007c32:	f043 0320 	orrmi.w	r3, r3, #32
 8007c36:	6023      	strmi	r3, [r4, #0]
 8007c38:	b91e      	cbnz	r6, 8007c42 <_printf_i+0x196>
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	f023 0320 	bic.w	r3, r3, #32
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	2310      	movs	r3, #16
 8007c44:	e7b0      	b.n	8007ba8 <_printf_i+0xfc>
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	f043 0320 	orr.w	r3, r3, #32
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	2378      	movs	r3, #120	; 0x78
 8007c50:	4828      	ldr	r0, [pc, #160]	; (8007cf4 <_printf_i+0x248>)
 8007c52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c56:	e7e3      	b.n	8007c20 <_printf_i+0x174>
 8007c58:	0659      	lsls	r1, r3, #25
 8007c5a:	bf48      	it	mi
 8007c5c:	b2b6      	uxthmi	r6, r6
 8007c5e:	e7e6      	b.n	8007c2e <_printf_i+0x182>
 8007c60:	4615      	mov	r5, r2
 8007c62:	e7bb      	b.n	8007bdc <_printf_i+0x130>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	6826      	ldr	r6, [r4, #0]
 8007c68:	6961      	ldr	r1, [r4, #20]
 8007c6a:	1d18      	adds	r0, r3, #4
 8007c6c:	6028      	str	r0, [r5, #0]
 8007c6e:	0635      	lsls	r5, r6, #24
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	d501      	bpl.n	8007c78 <_printf_i+0x1cc>
 8007c74:	6019      	str	r1, [r3, #0]
 8007c76:	e002      	b.n	8007c7e <_printf_i+0x1d2>
 8007c78:	0670      	lsls	r0, r6, #25
 8007c7a:	d5fb      	bpl.n	8007c74 <_printf_i+0x1c8>
 8007c7c:	8019      	strh	r1, [r3, #0]
 8007c7e:	2300      	movs	r3, #0
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	4615      	mov	r5, r2
 8007c84:	e7ba      	b.n	8007bfc <_printf_i+0x150>
 8007c86:	682b      	ldr	r3, [r5, #0]
 8007c88:	1d1a      	adds	r2, r3, #4
 8007c8a:	602a      	str	r2, [r5, #0]
 8007c8c:	681d      	ldr	r5, [r3, #0]
 8007c8e:	6862      	ldr	r2, [r4, #4]
 8007c90:	2100      	movs	r1, #0
 8007c92:	4628      	mov	r0, r5
 8007c94:	f7f8 fac4 	bl	8000220 <memchr>
 8007c98:	b108      	cbz	r0, 8007c9e <_printf_i+0x1f2>
 8007c9a:	1b40      	subs	r0, r0, r5
 8007c9c:	6060      	str	r0, [r4, #4]
 8007c9e:	6863      	ldr	r3, [r4, #4]
 8007ca0:	6123      	str	r3, [r4, #16]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ca8:	e7a8      	b.n	8007bfc <_printf_i+0x150>
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	462a      	mov	r2, r5
 8007cae:	4649      	mov	r1, r9
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	47d0      	blx	sl
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d0ab      	beq.n	8007c10 <_printf_i+0x164>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	079b      	lsls	r3, r3, #30
 8007cbc:	d413      	bmi.n	8007ce6 <_printf_i+0x23a>
 8007cbe:	68e0      	ldr	r0, [r4, #12]
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	4298      	cmp	r0, r3
 8007cc4:	bfb8      	it	lt
 8007cc6:	4618      	movlt	r0, r3
 8007cc8:	e7a4      	b.n	8007c14 <_printf_i+0x168>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4632      	mov	r2, r6
 8007cce:	4649      	mov	r1, r9
 8007cd0:	4640      	mov	r0, r8
 8007cd2:	47d0      	blx	sl
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d09b      	beq.n	8007c10 <_printf_i+0x164>
 8007cd8:	3501      	adds	r5, #1
 8007cda:	68e3      	ldr	r3, [r4, #12]
 8007cdc:	9903      	ldr	r1, [sp, #12]
 8007cde:	1a5b      	subs	r3, r3, r1
 8007ce0:	42ab      	cmp	r3, r5
 8007ce2:	dcf2      	bgt.n	8007cca <_printf_i+0x21e>
 8007ce4:	e7eb      	b.n	8007cbe <_printf_i+0x212>
 8007ce6:	2500      	movs	r5, #0
 8007ce8:	f104 0619 	add.w	r6, r4, #25
 8007cec:	e7f5      	b.n	8007cda <_printf_i+0x22e>
 8007cee:	bf00      	nop
 8007cf0:	0800b3d6 	.word	0x0800b3d6
 8007cf4:	0800b3e7 	.word	0x0800b3e7

08007cf8 <quorem>:
 8007cf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	6903      	ldr	r3, [r0, #16]
 8007cfe:	690c      	ldr	r4, [r1, #16]
 8007d00:	42a3      	cmp	r3, r4
 8007d02:	4607      	mov	r7, r0
 8007d04:	f2c0 8081 	blt.w	8007e0a <quorem+0x112>
 8007d08:	3c01      	subs	r4, #1
 8007d0a:	f101 0814 	add.w	r8, r1, #20
 8007d0e:	f100 0514 	add.w	r5, r0, #20
 8007d12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d16:	9301      	str	r3, [sp, #4]
 8007d18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d20:	3301      	adds	r3, #1
 8007d22:	429a      	cmp	r2, r3
 8007d24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d30:	d331      	bcc.n	8007d96 <quorem+0x9e>
 8007d32:	f04f 0e00 	mov.w	lr, #0
 8007d36:	4640      	mov	r0, r8
 8007d38:	46ac      	mov	ip, r5
 8007d3a:	46f2      	mov	sl, lr
 8007d3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d40:	b293      	uxth	r3, r2
 8007d42:	fb06 e303 	mla	r3, r6, r3, lr
 8007d46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	ebaa 0303 	sub.w	r3, sl, r3
 8007d50:	f8dc a000 	ldr.w	sl, [ip]
 8007d54:	0c12      	lsrs	r2, r2, #16
 8007d56:	fa13 f38a 	uxtah	r3, r3, sl
 8007d5a:	fb06 e202 	mla	r2, r6, r2, lr
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	9b00      	ldr	r3, [sp, #0]
 8007d62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d66:	b292      	uxth	r2, r2
 8007d68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d70:	f8bd 3000 	ldrh.w	r3, [sp]
 8007d74:	4581      	cmp	r9, r0
 8007d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d7a:	f84c 3b04 	str.w	r3, [ip], #4
 8007d7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d82:	d2db      	bcs.n	8007d3c <quorem+0x44>
 8007d84:	f855 300b 	ldr.w	r3, [r5, fp]
 8007d88:	b92b      	cbnz	r3, 8007d96 <quorem+0x9e>
 8007d8a:	9b01      	ldr	r3, [sp, #4]
 8007d8c:	3b04      	subs	r3, #4
 8007d8e:	429d      	cmp	r5, r3
 8007d90:	461a      	mov	r2, r3
 8007d92:	d32e      	bcc.n	8007df2 <quorem+0xfa>
 8007d94:	613c      	str	r4, [r7, #16]
 8007d96:	4638      	mov	r0, r7
 8007d98:	f001 f8b6 	bl	8008f08 <__mcmp>
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	db24      	blt.n	8007dea <quorem+0xf2>
 8007da0:	3601      	adds	r6, #1
 8007da2:	4628      	mov	r0, r5
 8007da4:	f04f 0c00 	mov.w	ip, #0
 8007da8:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dac:	f8d0 e000 	ldr.w	lr, [r0]
 8007db0:	b293      	uxth	r3, r2
 8007db2:	ebac 0303 	sub.w	r3, ip, r3
 8007db6:	0c12      	lsrs	r2, r2, #16
 8007db8:	fa13 f38e 	uxtah	r3, r3, lr
 8007dbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007dc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dca:	45c1      	cmp	r9, r8
 8007dcc:	f840 3b04 	str.w	r3, [r0], #4
 8007dd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007dd4:	d2e8      	bcs.n	8007da8 <quorem+0xb0>
 8007dd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dde:	b922      	cbnz	r2, 8007dea <quorem+0xf2>
 8007de0:	3b04      	subs	r3, #4
 8007de2:	429d      	cmp	r5, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	d30a      	bcc.n	8007dfe <quorem+0x106>
 8007de8:	613c      	str	r4, [r7, #16]
 8007dea:	4630      	mov	r0, r6
 8007dec:	b003      	add	sp, #12
 8007dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df2:	6812      	ldr	r2, [r2, #0]
 8007df4:	3b04      	subs	r3, #4
 8007df6:	2a00      	cmp	r2, #0
 8007df8:	d1cc      	bne.n	8007d94 <quorem+0x9c>
 8007dfa:	3c01      	subs	r4, #1
 8007dfc:	e7c7      	b.n	8007d8e <quorem+0x96>
 8007dfe:	6812      	ldr	r2, [r2, #0]
 8007e00:	3b04      	subs	r3, #4
 8007e02:	2a00      	cmp	r2, #0
 8007e04:	d1f0      	bne.n	8007de8 <quorem+0xf0>
 8007e06:	3c01      	subs	r4, #1
 8007e08:	e7eb      	b.n	8007de2 <quorem+0xea>
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	e7ee      	b.n	8007dec <quorem+0xf4>
	...

08007e10 <_dtoa_r>:
 8007e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e14:	ed2d 8b04 	vpush	{d8-d9}
 8007e18:	ec57 6b10 	vmov	r6, r7, d0
 8007e1c:	b093      	sub	sp, #76	; 0x4c
 8007e1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e24:	9106      	str	r1, [sp, #24]
 8007e26:	ee10 aa10 	vmov	sl, s0
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e2e:	930c      	str	r3, [sp, #48]	; 0x30
 8007e30:	46bb      	mov	fp, r7
 8007e32:	b975      	cbnz	r5, 8007e52 <_dtoa_r+0x42>
 8007e34:	2010      	movs	r0, #16
 8007e36:	f000 fddd 	bl	80089f4 <malloc>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	6260      	str	r0, [r4, #36]	; 0x24
 8007e3e:	b920      	cbnz	r0, 8007e4a <_dtoa_r+0x3a>
 8007e40:	4ba7      	ldr	r3, [pc, #668]	; (80080e0 <_dtoa_r+0x2d0>)
 8007e42:	21ea      	movs	r1, #234	; 0xea
 8007e44:	48a7      	ldr	r0, [pc, #668]	; (80080e4 <_dtoa_r+0x2d4>)
 8007e46:	f001 fa67 	bl	8009318 <__assert_func>
 8007e4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e4e:	6005      	str	r5, [r0, #0]
 8007e50:	60c5      	str	r5, [r0, #12]
 8007e52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e54:	6819      	ldr	r1, [r3, #0]
 8007e56:	b151      	cbz	r1, 8007e6e <_dtoa_r+0x5e>
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	604a      	str	r2, [r1, #4]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	4093      	lsls	r3, r2
 8007e60:	608b      	str	r3, [r1, #8]
 8007e62:	4620      	mov	r0, r4
 8007e64:	f000 fe0e 	bl	8008a84 <_Bfree>
 8007e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	1e3b      	subs	r3, r7, #0
 8007e70:	bfaa      	itet	ge
 8007e72:	2300      	movge	r3, #0
 8007e74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007e78:	f8c8 3000 	strge.w	r3, [r8]
 8007e7c:	4b9a      	ldr	r3, [pc, #616]	; (80080e8 <_dtoa_r+0x2d8>)
 8007e7e:	bfbc      	itt	lt
 8007e80:	2201      	movlt	r2, #1
 8007e82:	f8c8 2000 	strlt.w	r2, [r8]
 8007e86:	ea33 030b 	bics.w	r3, r3, fp
 8007e8a:	d11b      	bne.n	8007ec4 <_dtoa_r+0xb4>
 8007e8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e92:	6013      	str	r3, [r2, #0]
 8007e94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e98:	4333      	orrs	r3, r6
 8007e9a:	f000 8592 	beq.w	80089c2 <_dtoa_r+0xbb2>
 8007e9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ea0:	b963      	cbnz	r3, 8007ebc <_dtoa_r+0xac>
 8007ea2:	4b92      	ldr	r3, [pc, #584]	; (80080ec <_dtoa_r+0x2dc>)
 8007ea4:	e022      	b.n	8007eec <_dtoa_r+0xdc>
 8007ea6:	4b92      	ldr	r3, [pc, #584]	; (80080f0 <_dtoa_r+0x2e0>)
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	9801      	ldr	r0, [sp, #4]
 8007eb2:	b013      	add	sp, #76	; 0x4c
 8007eb4:	ecbd 8b04 	vpop	{d8-d9}
 8007eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ebc:	4b8b      	ldr	r3, [pc, #556]	; (80080ec <_dtoa_r+0x2dc>)
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	3303      	adds	r3, #3
 8007ec2:	e7f3      	b.n	8007eac <_dtoa_r+0x9c>
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	4650      	mov	r0, sl
 8007eca:	4659      	mov	r1, fp
 8007ecc:	f7f8 fe1c 	bl	8000b08 <__aeabi_dcmpeq>
 8007ed0:	ec4b ab19 	vmov	d9, sl, fp
 8007ed4:	4680      	mov	r8, r0
 8007ed6:	b158      	cbz	r0, 8007ef0 <_dtoa_r+0xe0>
 8007ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007eda:	2301      	movs	r3, #1
 8007edc:	6013      	str	r3, [r2, #0]
 8007ede:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f000 856b 	beq.w	80089bc <_dtoa_r+0xbac>
 8007ee6:	4883      	ldr	r0, [pc, #524]	; (80080f4 <_dtoa_r+0x2e4>)
 8007ee8:	6018      	str	r0, [r3, #0]
 8007eea:	1e43      	subs	r3, r0, #1
 8007eec:	9301      	str	r3, [sp, #4]
 8007eee:	e7df      	b.n	8007eb0 <_dtoa_r+0xa0>
 8007ef0:	ec4b ab10 	vmov	d0, sl, fp
 8007ef4:	aa10      	add	r2, sp, #64	; 0x40
 8007ef6:	a911      	add	r1, sp, #68	; 0x44
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f001 f8ab 	bl	8009054 <__d2b>
 8007efe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007f02:	ee08 0a10 	vmov	s16, r0
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	f000 8084 	beq.w	8008014 <_dtoa_r+0x204>
 8007f0c:	ee19 3a90 	vmov	r3, s19
 8007f10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007f18:	4656      	mov	r6, sl
 8007f1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007f1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007f26:	4b74      	ldr	r3, [pc, #464]	; (80080f8 <_dtoa_r+0x2e8>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	4639      	mov	r1, r7
 8007f2e:	f7f8 f9cb 	bl	80002c8 <__aeabi_dsub>
 8007f32:	a365      	add	r3, pc, #404	; (adr r3, 80080c8 <_dtoa_r+0x2b8>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 fb7e 	bl	8000638 <__aeabi_dmul>
 8007f3c:	a364      	add	r3, pc, #400	; (adr r3, 80080d0 <_dtoa_r+0x2c0>)
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	f7f8 f9c3 	bl	80002cc <__adddf3>
 8007f46:	4606      	mov	r6, r0
 8007f48:	4628      	mov	r0, r5
 8007f4a:	460f      	mov	r7, r1
 8007f4c:	f7f8 fb0a 	bl	8000564 <__aeabi_i2d>
 8007f50:	a361      	add	r3, pc, #388	; (adr r3, 80080d8 <_dtoa_r+0x2c8>)
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f7f8 fb6f 	bl	8000638 <__aeabi_dmul>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	4630      	mov	r0, r6
 8007f60:	4639      	mov	r1, r7
 8007f62:	f7f8 f9b3 	bl	80002cc <__adddf3>
 8007f66:	4606      	mov	r6, r0
 8007f68:	460f      	mov	r7, r1
 8007f6a:	f7f8 fe15 	bl	8000b98 <__aeabi_d2iz>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	9000      	str	r0, [sp, #0]
 8007f72:	2300      	movs	r3, #0
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 fdd0 	bl	8000b1c <__aeabi_dcmplt>
 8007f7c:	b150      	cbz	r0, 8007f94 <_dtoa_r+0x184>
 8007f7e:	9800      	ldr	r0, [sp, #0]
 8007f80:	f7f8 faf0 	bl	8000564 <__aeabi_i2d>
 8007f84:	4632      	mov	r2, r6
 8007f86:	463b      	mov	r3, r7
 8007f88:	f7f8 fdbe 	bl	8000b08 <__aeabi_dcmpeq>
 8007f8c:	b910      	cbnz	r0, 8007f94 <_dtoa_r+0x184>
 8007f8e:	9b00      	ldr	r3, [sp, #0]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	9b00      	ldr	r3, [sp, #0]
 8007f96:	2b16      	cmp	r3, #22
 8007f98:	d85a      	bhi.n	8008050 <_dtoa_r+0x240>
 8007f9a:	9a00      	ldr	r2, [sp, #0]
 8007f9c:	4b57      	ldr	r3, [pc, #348]	; (80080fc <_dtoa_r+0x2ec>)
 8007f9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	ec51 0b19 	vmov	r0, r1, d9
 8007faa:	f7f8 fdb7 	bl	8000b1c <__aeabi_dcmplt>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d050      	beq.n	8008054 <_dtoa_r+0x244>
 8007fb2:	9b00      	ldr	r3, [sp, #0]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fbe:	1b5d      	subs	r5, r3, r5
 8007fc0:	1e6b      	subs	r3, r5, #1
 8007fc2:	9305      	str	r3, [sp, #20]
 8007fc4:	bf45      	ittet	mi
 8007fc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007fca:	9304      	strmi	r3, [sp, #16]
 8007fcc:	2300      	movpl	r3, #0
 8007fce:	2300      	movmi	r3, #0
 8007fd0:	bf4c      	ite	mi
 8007fd2:	9305      	strmi	r3, [sp, #20]
 8007fd4:	9304      	strpl	r3, [sp, #16]
 8007fd6:	9b00      	ldr	r3, [sp, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	db3d      	blt.n	8008058 <_dtoa_r+0x248>
 8007fdc:	9b05      	ldr	r3, [sp, #20]
 8007fde:	9a00      	ldr	r2, [sp, #0]
 8007fe0:	920a      	str	r2, [sp, #40]	; 0x28
 8007fe2:	4413      	add	r3, r2
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	9307      	str	r3, [sp, #28]
 8007fea:	9b06      	ldr	r3, [sp, #24]
 8007fec:	2b09      	cmp	r3, #9
 8007fee:	f200 8089 	bhi.w	8008104 <_dtoa_r+0x2f4>
 8007ff2:	2b05      	cmp	r3, #5
 8007ff4:	bfc4      	itt	gt
 8007ff6:	3b04      	subgt	r3, #4
 8007ff8:	9306      	strgt	r3, [sp, #24]
 8007ffa:	9b06      	ldr	r3, [sp, #24]
 8007ffc:	f1a3 0302 	sub.w	r3, r3, #2
 8008000:	bfcc      	ite	gt
 8008002:	2500      	movgt	r5, #0
 8008004:	2501      	movle	r5, #1
 8008006:	2b03      	cmp	r3, #3
 8008008:	f200 8087 	bhi.w	800811a <_dtoa_r+0x30a>
 800800c:	e8df f003 	tbb	[pc, r3]
 8008010:	59383a2d 	.word	0x59383a2d
 8008014:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008018:	441d      	add	r5, r3
 800801a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800801e:	2b20      	cmp	r3, #32
 8008020:	bfc1      	itttt	gt
 8008022:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008026:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800802a:	fa0b f303 	lslgt.w	r3, fp, r3
 800802e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008032:	bfda      	itte	le
 8008034:	f1c3 0320 	rsble	r3, r3, #32
 8008038:	fa06 f003 	lslle.w	r0, r6, r3
 800803c:	4318      	orrgt	r0, r3
 800803e:	f7f8 fa81 	bl	8000544 <__aeabi_ui2d>
 8008042:	2301      	movs	r3, #1
 8008044:	4606      	mov	r6, r0
 8008046:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800804a:	3d01      	subs	r5, #1
 800804c:	930e      	str	r3, [sp, #56]	; 0x38
 800804e:	e76a      	b.n	8007f26 <_dtoa_r+0x116>
 8008050:	2301      	movs	r3, #1
 8008052:	e7b2      	b.n	8007fba <_dtoa_r+0x1aa>
 8008054:	900b      	str	r0, [sp, #44]	; 0x2c
 8008056:	e7b1      	b.n	8007fbc <_dtoa_r+0x1ac>
 8008058:	9b04      	ldr	r3, [sp, #16]
 800805a:	9a00      	ldr	r2, [sp, #0]
 800805c:	1a9b      	subs	r3, r3, r2
 800805e:	9304      	str	r3, [sp, #16]
 8008060:	4253      	negs	r3, r2
 8008062:	9307      	str	r3, [sp, #28]
 8008064:	2300      	movs	r3, #0
 8008066:	930a      	str	r3, [sp, #40]	; 0x28
 8008068:	e7bf      	b.n	8007fea <_dtoa_r+0x1da>
 800806a:	2300      	movs	r3, #0
 800806c:	9308      	str	r3, [sp, #32]
 800806e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	dc55      	bgt.n	8008120 <_dtoa_r+0x310>
 8008074:	2301      	movs	r3, #1
 8008076:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800807a:	461a      	mov	r2, r3
 800807c:	9209      	str	r2, [sp, #36]	; 0x24
 800807e:	e00c      	b.n	800809a <_dtoa_r+0x28a>
 8008080:	2301      	movs	r3, #1
 8008082:	e7f3      	b.n	800806c <_dtoa_r+0x25c>
 8008084:	2300      	movs	r3, #0
 8008086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008088:	9308      	str	r3, [sp, #32]
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	4413      	add	r3, r2
 800808e:	9302      	str	r3, [sp, #8]
 8008090:	3301      	adds	r3, #1
 8008092:	2b01      	cmp	r3, #1
 8008094:	9303      	str	r3, [sp, #12]
 8008096:	bfb8      	it	lt
 8008098:	2301      	movlt	r3, #1
 800809a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800809c:	2200      	movs	r2, #0
 800809e:	6042      	str	r2, [r0, #4]
 80080a0:	2204      	movs	r2, #4
 80080a2:	f102 0614 	add.w	r6, r2, #20
 80080a6:	429e      	cmp	r6, r3
 80080a8:	6841      	ldr	r1, [r0, #4]
 80080aa:	d93d      	bls.n	8008128 <_dtoa_r+0x318>
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 fca9 	bl	8008a04 <_Balloc>
 80080b2:	9001      	str	r0, [sp, #4]
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d13b      	bne.n	8008130 <_dtoa_r+0x320>
 80080b8:	4b11      	ldr	r3, [pc, #68]	; (8008100 <_dtoa_r+0x2f0>)
 80080ba:	4602      	mov	r2, r0
 80080bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80080c0:	e6c0      	b.n	8007e44 <_dtoa_r+0x34>
 80080c2:	2301      	movs	r3, #1
 80080c4:	e7df      	b.n	8008086 <_dtoa_r+0x276>
 80080c6:	bf00      	nop
 80080c8:	636f4361 	.word	0x636f4361
 80080cc:	3fd287a7 	.word	0x3fd287a7
 80080d0:	8b60c8b3 	.word	0x8b60c8b3
 80080d4:	3fc68a28 	.word	0x3fc68a28
 80080d8:	509f79fb 	.word	0x509f79fb
 80080dc:	3fd34413 	.word	0x3fd34413
 80080e0:	0800b405 	.word	0x0800b405
 80080e4:	0800b41c 	.word	0x0800b41c
 80080e8:	7ff00000 	.word	0x7ff00000
 80080ec:	0800b401 	.word	0x0800b401
 80080f0:	0800b3f8 	.word	0x0800b3f8
 80080f4:	0800b3d5 	.word	0x0800b3d5
 80080f8:	3ff80000 	.word	0x3ff80000
 80080fc:	0800b510 	.word	0x0800b510
 8008100:	0800b477 	.word	0x0800b477
 8008104:	2501      	movs	r5, #1
 8008106:	2300      	movs	r3, #0
 8008108:	9306      	str	r3, [sp, #24]
 800810a:	9508      	str	r5, [sp, #32]
 800810c:	f04f 33ff 	mov.w	r3, #4294967295
 8008110:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008114:	2200      	movs	r2, #0
 8008116:	2312      	movs	r3, #18
 8008118:	e7b0      	b.n	800807c <_dtoa_r+0x26c>
 800811a:	2301      	movs	r3, #1
 800811c:	9308      	str	r3, [sp, #32]
 800811e:	e7f5      	b.n	800810c <_dtoa_r+0x2fc>
 8008120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008122:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008126:	e7b8      	b.n	800809a <_dtoa_r+0x28a>
 8008128:	3101      	adds	r1, #1
 800812a:	6041      	str	r1, [r0, #4]
 800812c:	0052      	lsls	r2, r2, #1
 800812e:	e7b8      	b.n	80080a2 <_dtoa_r+0x292>
 8008130:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008132:	9a01      	ldr	r2, [sp, #4]
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	9b03      	ldr	r3, [sp, #12]
 8008138:	2b0e      	cmp	r3, #14
 800813a:	f200 809d 	bhi.w	8008278 <_dtoa_r+0x468>
 800813e:	2d00      	cmp	r5, #0
 8008140:	f000 809a 	beq.w	8008278 <_dtoa_r+0x468>
 8008144:	9b00      	ldr	r3, [sp, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	dd32      	ble.n	80081b0 <_dtoa_r+0x3a0>
 800814a:	4ab7      	ldr	r2, [pc, #732]	; (8008428 <_dtoa_r+0x618>)
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008158:	9b00      	ldr	r3, [sp, #0]
 800815a:	05d8      	lsls	r0, r3, #23
 800815c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008160:	d516      	bpl.n	8008190 <_dtoa_r+0x380>
 8008162:	4bb2      	ldr	r3, [pc, #712]	; (800842c <_dtoa_r+0x61c>)
 8008164:	ec51 0b19 	vmov	r0, r1, d9
 8008168:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800816c:	f7f8 fb8e 	bl	800088c <__aeabi_ddiv>
 8008170:	f007 070f 	and.w	r7, r7, #15
 8008174:	4682      	mov	sl, r0
 8008176:	468b      	mov	fp, r1
 8008178:	2503      	movs	r5, #3
 800817a:	4eac      	ldr	r6, [pc, #688]	; (800842c <_dtoa_r+0x61c>)
 800817c:	b957      	cbnz	r7, 8008194 <_dtoa_r+0x384>
 800817e:	4642      	mov	r2, r8
 8008180:	464b      	mov	r3, r9
 8008182:	4650      	mov	r0, sl
 8008184:	4659      	mov	r1, fp
 8008186:	f7f8 fb81 	bl	800088c <__aeabi_ddiv>
 800818a:	4682      	mov	sl, r0
 800818c:	468b      	mov	fp, r1
 800818e:	e028      	b.n	80081e2 <_dtoa_r+0x3d2>
 8008190:	2502      	movs	r5, #2
 8008192:	e7f2      	b.n	800817a <_dtoa_r+0x36a>
 8008194:	07f9      	lsls	r1, r7, #31
 8008196:	d508      	bpl.n	80081aa <_dtoa_r+0x39a>
 8008198:	4640      	mov	r0, r8
 800819a:	4649      	mov	r1, r9
 800819c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081a0:	f7f8 fa4a 	bl	8000638 <__aeabi_dmul>
 80081a4:	3501      	adds	r5, #1
 80081a6:	4680      	mov	r8, r0
 80081a8:	4689      	mov	r9, r1
 80081aa:	107f      	asrs	r7, r7, #1
 80081ac:	3608      	adds	r6, #8
 80081ae:	e7e5      	b.n	800817c <_dtoa_r+0x36c>
 80081b0:	f000 809b 	beq.w	80082ea <_dtoa_r+0x4da>
 80081b4:	9b00      	ldr	r3, [sp, #0]
 80081b6:	4f9d      	ldr	r7, [pc, #628]	; (800842c <_dtoa_r+0x61c>)
 80081b8:	425e      	negs	r6, r3
 80081ba:	4b9b      	ldr	r3, [pc, #620]	; (8008428 <_dtoa_r+0x618>)
 80081bc:	f006 020f 	and.w	r2, r6, #15
 80081c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c8:	ec51 0b19 	vmov	r0, r1, d9
 80081cc:	f7f8 fa34 	bl	8000638 <__aeabi_dmul>
 80081d0:	1136      	asrs	r6, r6, #4
 80081d2:	4682      	mov	sl, r0
 80081d4:	468b      	mov	fp, r1
 80081d6:	2300      	movs	r3, #0
 80081d8:	2502      	movs	r5, #2
 80081da:	2e00      	cmp	r6, #0
 80081dc:	d17a      	bne.n	80082d4 <_dtoa_r+0x4c4>
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d1d3      	bne.n	800818a <_dtoa_r+0x37a>
 80081e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8082 	beq.w	80082ee <_dtoa_r+0x4de>
 80081ea:	4b91      	ldr	r3, [pc, #580]	; (8008430 <_dtoa_r+0x620>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	4650      	mov	r0, sl
 80081f0:	4659      	mov	r1, fp
 80081f2:	f7f8 fc93 	bl	8000b1c <__aeabi_dcmplt>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d079      	beq.n	80082ee <_dtoa_r+0x4de>
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d076      	beq.n	80082ee <_dtoa_r+0x4de>
 8008200:	9b02      	ldr	r3, [sp, #8]
 8008202:	2b00      	cmp	r3, #0
 8008204:	dd36      	ble.n	8008274 <_dtoa_r+0x464>
 8008206:	9b00      	ldr	r3, [sp, #0]
 8008208:	4650      	mov	r0, sl
 800820a:	4659      	mov	r1, fp
 800820c:	1e5f      	subs	r7, r3, #1
 800820e:	2200      	movs	r2, #0
 8008210:	4b88      	ldr	r3, [pc, #544]	; (8008434 <_dtoa_r+0x624>)
 8008212:	f7f8 fa11 	bl	8000638 <__aeabi_dmul>
 8008216:	9e02      	ldr	r6, [sp, #8]
 8008218:	4682      	mov	sl, r0
 800821a:	468b      	mov	fp, r1
 800821c:	3501      	adds	r5, #1
 800821e:	4628      	mov	r0, r5
 8008220:	f7f8 f9a0 	bl	8000564 <__aeabi_i2d>
 8008224:	4652      	mov	r2, sl
 8008226:	465b      	mov	r3, fp
 8008228:	f7f8 fa06 	bl	8000638 <__aeabi_dmul>
 800822c:	4b82      	ldr	r3, [pc, #520]	; (8008438 <_dtoa_r+0x628>)
 800822e:	2200      	movs	r2, #0
 8008230:	f7f8 f84c 	bl	80002cc <__adddf3>
 8008234:	46d0      	mov	r8, sl
 8008236:	46d9      	mov	r9, fp
 8008238:	4682      	mov	sl, r0
 800823a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800823e:	2e00      	cmp	r6, #0
 8008240:	d158      	bne.n	80082f4 <_dtoa_r+0x4e4>
 8008242:	4b7e      	ldr	r3, [pc, #504]	; (800843c <_dtoa_r+0x62c>)
 8008244:	2200      	movs	r2, #0
 8008246:	4640      	mov	r0, r8
 8008248:	4649      	mov	r1, r9
 800824a:	f7f8 f83d 	bl	80002c8 <__aeabi_dsub>
 800824e:	4652      	mov	r2, sl
 8008250:	465b      	mov	r3, fp
 8008252:	4680      	mov	r8, r0
 8008254:	4689      	mov	r9, r1
 8008256:	f7f8 fc7f 	bl	8000b58 <__aeabi_dcmpgt>
 800825a:	2800      	cmp	r0, #0
 800825c:	f040 8295 	bne.w	800878a <_dtoa_r+0x97a>
 8008260:	4652      	mov	r2, sl
 8008262:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008266:	4640      	mov	r0, r8
 8008268:	4649      	mov	r1, r9
 800826a:	f7f8 fc57 	bl	8000b1c <__aeabi_dcmplt>
 800826e:	2800      	cmp	r0, #0
 8008270:	f040 8289 	bne.w	8008786 <_dtoa_r+0x976>
 8008274:	ec5b ab19 	vmov	sl, fp, d9
 8008278:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800827a:	2b00      	cmp	r3, #0
 800827c:	f2c0 8148 	blt.w	8008510 <_dtoa_r+0x700>
 8008280:	9a00      	ldr	r2, [sp, #0]
 8008282:	2a0e      	cmp	r2, #14
 8008284:	f300 8144 	bgt.w	8008510 <_dtoa_r+0x700>
 8008288:	4b67      	ldr	r3, [pc, #412]	; (8008428 <_dtoa_r+0x618>)
 800828a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800828e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008294:	2b00      	cmp	r3, #0
 8008296:	f280 80d5 	bge.w	8008444 <_dtoa_r+0x634>
 800829a:	9b03      	ldr	r3, [sp, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f300 80d1 	bgt.w	8008444 <_dtoa_r+0x634>
 80082a2:	f040 826f 	bne.w	8008784 <_dtoa_r+0x974>
 80082a6:	4b65      	ldr	r3, [pc, #404]	; (800843c <_dtoa_r+0x62c>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	4640      	mov	r0, r8
 80082ac:	4649      	mov	r1, r9
 80082ae:	f7f8 f9c3 	bl	8000638 <__aeabi_dmul>
 80082b2:	4652      	mov	r2, sl
 80082b4:	465b      	mov	r3, fp
 80082b6:	f7f8 fc45 	bl	8000b44 <__aeabi_dcmpge>
 80082ba:	9e03      	ldr	r6, [sp, #12]
 80082bc:	4637      	mov	r7, r6
 80082be:	2800      	cmp	r0, #0
 80082c0:	f040 8245 	bne.w	800874e <_dtoa_r+0x93e>
 80082c4:	9d01      	ldr	r5, [sp, #4]
 80082c6:	2331      	movs	r3, #49	; 0x31
 80082c8:	f805 3b01 	strb.w	r3, [r5], #1
 80082cc:	9b00      	ldr	r3, [sp, #0]
 80082ce:	3301      	adds	r3, #1
 80082d0:	9300      	str	r3, [sp, #0]
 80082d2:	e240      	b.n	8008756 <_dtoa_r+0x946>
 80082d4:	07f2      	lsls	r2, r6, #31
 80082d6:	d505      	bpl.n	80082e4 <_dtoa_r+0x4d4>
 80082d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082dc:	f7f8 f9ac 	bl	8000638 <__aeabi_dmul>
 80082e0:	3501      	adds	r5, #1
 80082e2:	2301      	movs	r3, #1
 80082e4:	1076      	asrs	r6, r6, #1
 80082e6:	3708      	adds	r7, #8
 80082e8:	e777      	b.n	80081da <_dtoa_r+0x3ca>
 80082ea:	2502      	movs	r5, #2
 80082ec:	e779      	b.n	80081e2 <_dtoa_r+0x3d2>
 80082ee:	9f00      	ldr	r7, [sp, #0]
 80082f0:	9e03      	ldr	r6, [sp, #12]
 80082f2:	e794      	b.n	800821e <_dtoa_r+0x40e>
 80082f4:	9901      	ldr	r1, [sp, #4]
 80082f6:	4b4c      	ldr	r3, [pc, #304]	; (8008428 <_dtoa_r+0x618>)
 80082f8:	4431      	add	r1, r6
 80082fa:	910d      	str	r1, [sp, #52]	; 0x34
 80082fc:	9908      	ldr	r1, [sp, #32]
 80082fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008302:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008306:	2900      	cmp	r1, #0
 8008308:	d043      	beq.n	8008392 <_dtoa_r+0x582>
 800830a:	494d      	ldr	r1, [pc, #308]	; (8008440 <_dtoa_r+0x630>)
 800830c:	2000      	movs	r0, #0
 800830e:	f7f8 fabd 	bl	800088c <__aeabi_ddiv>
 8008312:	4652      	mov	r2, sl
 8008314:	465b      	mov	r3, fp
 8008316:	f7f7 ffd7 	bl	80002c8 <__aeabi_dsub>
 800831a:	9d01      	ldr	r5, [sp, #4]
 800831c:	4682      	mov	sl, r0
 800831e:	468b      	mov	fp, r1
 8008320:	4649      	mov	r1, r9
 8008322:	4640      	mov	r0, r8
 8008324:	f7f8 fc38 	bl	8000b98 <__aeabi_d2iz>
 8008328:	4606      	mov	r6, r0
 800832a:	f7f8 f91b 	bl	8000564 <__aeabi_i2d>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4640      	mov	r0, r8
 8008334:	4649      	mov	r1, r9
 8008336:	f7f7 ffc7 	bl	80002c8 <__aeabi_dsub>
 800833a:	3630      	adds	r6, #48	; 0x30
 800833c:	f805 6b01 	strb.w	r6, [r5], #1
 8008340:	4652      	mov	r2, sl
 8008342:	465b      	mov	r3, fp
 8008344:	4680      	mov	r8, r0
 8008346:	4689      	mov	r9, r1
 8008348:	f7f8 fbe8 	bl	8000b1c <__aeabi_dcmplt>
 800834c:	2800      	cmp	r0, #0
 800834e:	d163      	bne.n	8008418 <_dtoa_r+0x608>
 8008350:	4642      	mov	r2, r8
 8008352:	464b      	mov	r3, r9
 8008354:	4936      	ldr	r1, [pc, #216]	; (8008430 <_dtoa_r+0x620>)
 8008356:	2000      	movs	r0, #0
 8008358:	f7f7 ffb6 	bl	80002c8 <__aeabi_dsub>
 800835c:	4652      	mov	r2, sl
 800835e:	465b      	mov	r3, fp
 8008360:	f7f8 fbdc 	bl	8000b1c <__aeabi_dcmplt>
 8008364:	2800      	cmp	r0, #0
 8008366:	f040 80b5 	bne.w	80084d4 <_dtoa_r+0x6c4>
 800836a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800836c:	429d      	cmp	r5, r3
 800836e:	d081      	beq.n	8008274 <_dtoa_r+0x464>
 8008370:	4b30      	ldr	r3, [pc, #192]	; (8008434 <_dtoa_r+0x624>)
 8008372:	2200      	movs	r2, #0
 8008374:	4650      	mov	r0, sl
 8008376:	4659      	mov	r1, fp
 8008378:	f7f8 f95e 	bl	8000638 <__aeabi_dmul>
 800837c:	4b2d      	ldr	r3, [pc, #180]	; (8008434 <_dtoa_r+0x624>)
 800837e:	4682      	mov	sl, r0
 8008380:	468b      	mov	fp, r1
 8008382:	4640      	mov	r0, r8
 8008384:	4649      	mov	r1, r9
 8008386:	2200      	movs	r2, #0
 8008388:	f7f8 f956 	bl	8000638 <__aeabi_dmul>
 800838c:	4680      	mov	r8, r0
 800838e:	4689      	mov	r9, r1
 8008390:	e7c6      	b.n	8008320 <_dtoa_r+0x510>
 8008392:	4650      	mov	r0, sl
 8008394:	4659      	mov	r1, fp
 8008396:	f7f8 f94f 	bl	8000638 <__aeabi_dmul>
 800839a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800839c:	9d01      	ldr	r5, [sp, #4]
 800839e:	930f      	str	r3, [sp, #60]	; 0x3c
 80083a0:	4682      	mov	sl, r0
 80083a2:	468b      	mov	fp, r1
 80083a4:	4649      	mov	r1, r9
 80083a6:	4640      	mov	r0, r8
 80083a8:	f7f8 fbf6 	bl	8000b98 <__aeabi_d2iz>
 80083ac:	4606      	mov	r6, r0
 80083ae:	f7f8 f8d9 	bl	8000564 <__aeabi_i2d>
 80083b2:	3630      	adds	r6, #48	; 0x30
 80083b4:	4602      	mov	r2, r0
 80083b6:	460b      	mov	r3, r1
 80083b8:	4640      	mov	r0, r8
 80083ba:	4649      	mov	r1, r9
 80083bc:	f7f7 ff84 	bl	80002c8 <__aeabi_dsub>
 80083c0:	f805 6b01 	strb.w	r6, [r5], #1
 80083c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083c6:	429d      	cmp	r5, r3
 80083c8:	4680      	mov	r8, r0
 80083ca:	4689      	mov	r9, r1
 80083cc:	f04f 0200 	mov.w	r2, #0
 80083d0:	d124      	bne.n	800841c <_dtoa_r+0x60c>
 80083d2:	4b1b      	ldr	r3, [pc, #108]	; (8008440 <_dtoa_r+0x630>)
 80083d4:	4650      	mov	r0, sl
 80083d6:	4659      	mov	r1, fp
 80083d8:	f7f7 ff78 	bl	80002cc <__adddf3>
 80083dc:	4602      	mov	r2, r0
 80083de:	460b      	mov	r3, r1
 80083e0:	4640      	mov	r0, r8
 80083e2:	4649      	mov	r1, r9
 80083e4:	f7f8 fbb8 	bl	8000b58 <__aeabi_dcmpgt>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d173      	bne.n	80084d4 <_dtoa_r+0x6c4>
 80083ec:	4652      	mov	r2, sl
 80083ee:	465b      	mov	r3, fp
 80083f0:	4913      	ldr	r1, [pc, #76]	; (8008440 <_dtoa_r+0x630>)
 80083f2:	2000      	movs	r0, #0
 80083f4:	f7f7 ff68 	bl	80002c8 <__aeabi_dsub>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4640      	mov	r0, r8
 80083fe:	4649      	mov	r1, r9
 8008400:	f7f8 fb8c 	bl	8000b1c <__aeabi_dcmplt>
 8008404:	2800      	cmp	r0, #0
 8008406:	f43f af35 	beq.w	8008274 <_dtoa_r+0x464>
 800840a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800840c:	1e6b      	subs	r3, r5, #1
 800840e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008410:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008414:	2b30      	cmp	r3, #48	; 0x30
 8008416:	d0f8      	beq.n	800840a <_dtoa_r+0x5fa>
 8008418:	9700      	str	r7, [sp, #0]
 800841a:	e049      	b.n	80084b0 <_dtoa_r+0x6a0>
 800841c:	4b05      	ldr	r3, [pc, #20]	; (8008434 <_dtoa_r+0x624>)
 800841e:	f7f8 f90b 	bl	8000638 <__aeabi_dmul>
 8008422:	4680      	mov	r8, r0
 8008424:	4689      	mov	r9, r1
 8008426:	e7bd      	b.n	80083a4 <_dtoa_r+0x594>
 8008428:	0800b510 	.word	0x0800b510
 800842c:	0800b4e8 	.word	0x0800b4e8
 8008430:	3ff00000 	.word	0x3ff00000
 8008434:	40240000 	.word	0x40240000
 8008438:	401c0000 	.word	0x401c0000
 800843c:	40140000 	.word	0x40140000
 8008440:	3fe00000 	.word	0x3fe00000
 8008444:	9d01      	ldr	r5, [sp, #4]
 8008446:	4656      	mov	r6, sl
 8008448:	465f      	mov	r7, fp
 800844a:	4642      	mov	r2, r8
 800844c:	464b      	mov	r3, r9
 800844e:	4630      	mov	r0, r6
 8008450:	4639      	mov	r1, r7
 8008452:	f7f8 fa1b 	bl	800088c <__aeabi_ddiv>
 8008456:	f7f8 fb9f 	bl	8000b98 <__aeabi_d2iz>
 800845a:	4682      	mov	sl, r0
 800845c:	f7f8 f882 	bl	8000564 <__aeabi_i2d>
 8008460:	4642      	mov	r2, r8
 8008462:	464b      	mov	r3, r9
 8008464:	f7f8 f8e8 	bl	8000638 <__aeabi_dmul>
 8008468:	4602      	mov	r2, r0
 800846a:	460b      	mov	r3, r1
 800846c:	4630      	mov	r0, r6
 800846e:	4639      	mov	r1, r7
 8008470:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008474:	f7f7 ff28 	bl	80002c8 <__aeabi_dsub>
 8008478:	f805 6b01 	strb.w	r6, [r5], #1
 800847c:	9e01      	ldr	r6, [sp, #4]
 800847e:	9f03      	ldr	r7, [sp, #12]
 8008480:	1bae      	subs	r6, r5, r6
 8008482:	42b7      	cmp	r7, r6
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	d135      	bne.n	80084f6 <_dtoa_r+0x6e6>
 800848a:	f7f7 ff1f 	bl	80002cc <__adddf3>
 800848e:	4642      	mov	r2, r8
 8008490:	464b      	mov	r3, r9
 8008492:	4606      	mov	r6, r0
 8008494:	460f      	mov	r7, r1
 8008496:	f7f8 fb5f 	bl	8000b58 <__aeabi_dcmpgt>
 800849a:	b9d0      	cbnz	r0, 80084d2 <_dtoa_r+0x6c2>
 800849c:	4642      	mov	r2, r8
 800849e:	464b      	mov	r3, r9
 80084a0:	4630      	mov	r0, r6
 80084a2:	4639      	mov	r1, r7
 80084a4:	f7f8 fb30 	bl	8000b08 <__aeabi_dcmpeq>
 80084a8:	b110      	cbz	r0, 80084b0 <_dtoa_r+0x6a0>
 80084aa:	f01a 0f01 	tst.w	sl, #1
 80084ae:	d110      	bne.n	80084d2 <_dtoa_r+0x6c2>
 80084b0:	4620      	mov	r0, r4
 80084b2:	ee18 1a10 	vmov	r1, s16
 80084b6:	f000 fae5 	bl	8008a84 <_Bfree>
 80084ba:	2300      	movs	r3, #0
 80084bc:	9800      	ldr	r0, [sp, #0]
 80084be:	702b      	strb	r3, [r5, #0]
 80084c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c2:	3001      	adds	r0, #1
 80084c4:	6018      	str	r0, [r3, #0]
 80084c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f43f acf1 	beq.w	8007eb0 <_dtoa_r+0xa0>
 80084ce:	601d      	str	r5, [r3, #0]
 80084d0:	e4ee      	b.n	8007eb0 <_dtoa_r+0xa0>
 80084d2:	9f00      	ldr	r7, [sp, #0]
 80084d4:	462b      	mov	r3, r5
 80084d6:	461d      	mov	r5, r3
 80084d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084dc:	2a39      	cmp	r2, #57	; 0x39
 80084de:	d106      	bne.n	80084ee <_dtoa_r+0x6de>
 80084e0:	9a01      	ldr	r2, [sp, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d1f7      	bne.n	80084d6 <_dtoa_r+0x6c6>
 80084e6:	9901      	ldr	r1, [sp, #4]
 80084e8:	2230      	movs	r2, #48	; 0x30
 80084ea:	3701      	adds	r7, #1
 80084ec:	700a      	strb	r2, [r1, #0]
 80084ee:	781a      	ldrb	r2, [r3, #0]
 80084f0:	3201      	adds	r2, #1
 80084f2:	701a      	strb	r2, [r3, #0]
 80084f4:	e790      	b.n	8008418 <_dtoa_r+0x608>
 80084f6:	4ba6      	ldr	r3, [pc, #664]	; (8008790 <_dtoa_r+0x980>)
 80084f8:	2200      	movs	r2, #0
 80084fa:	f7f8 f89d 	bl	8000638 <__aeabi_dmul>
 80084fe:	2200      	movs	r2, #0
 8008500:	2300      	movs	r3, #0
 8008502:	4606      	mov	r6, r0
 8008504:	460f      	mov	r7, r1
 8008506:	f7f8 faff 	bl	8000b08 <__aeabi_dcmpeq>
 800850a:	2800      	cmp	r0, #0
 800850c:	d09d      	beq.n	800844a <_dtoa_r+0x63a>
 800850e:	e7cf      	b.n	80084b0 <_dtoa_r+0x6a0>
 8008510:	9a08      	ldr	r2, [sp, #32]
 8008512:	2a00      	cmp	r2, #0
 8008514:	f000 80d7 	beq.w	80086c6 <_dtoa_r+0x8b6>
 8008518:	9a06      	ldr	r2, [sp, #24]
 800851a:	2a01      	cmp	r2, #1
 800851c:	f300 80ba 	bgt.w	8008694 <_dtoa_r+0x884>
 8008520:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008522:	2a00      	cmp	r2, #0
 8008524:	f000 80b2 	beq.w	800868c <_dtoa_r+0x87c>
 8008528:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800852c:	9e07      	ldr	r6, [sp, #28]
 800852e:	9d04      	ldr	r5, [sp, #16]
 8008530:	9a04      	ldr	r2, [sp, #16]
 8008532:	441a      	add	r2, r3
 8008534:	9204      	str	r2, [sp, #16]
 8008536:	9a05      	ldr	r2, [sp, #20]
 8008538:	2101      	movs	r1, #1
 800853a:	441a      	add	r2, r3
 800853c:	4620      	mov	r0, r4
 800853e:	9205      	str	r2, [sp, #20]
 8008540:	f000 fb58 	bl	8008bf4 <__i2b>
 8008544:	4607      	mov	r7, r0
 8008546:	2d00      	cmp	r5, #0
 8008548:	dd0c      	ble.n	8008564 <_dtoa_r+0x754>
 800854a:	9b05      	ldr	r3, [sp, #20]
 800854c:	2b00      	cmp	r3, #0
 800854e:	dd09      	ble.n	8008564 <_dtoa_r+0x754>
 8008550:	42ab      	cmp	r3, r5
 8008552:	9a04      	ldr	r2, [sp, #16]
 8008554:	bfa8      	it	ge
 8008556:	462b      	movge	r3, r5
 8008558:	1ad2      	subs	r2, r2, r3
 800855a:	9204      	str	r2, [sp, #16]
 800855c:	9a05      	ldr	r2, [sp, #20]
 800855e:	1aed      	subs	r5, r5, r3
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	9305      	str	r3, [sp, #20]
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	b31b      	cbz	r3, 80085b0 <_dtoa_r+0x7a0>
 8008568:	9b08      	ldr	r3, [sp, #32]
 800856a:	2b00      	cmp	r3, #0
 800856c:	f000 80af 	beq.w	80086ce <_dtoa_r+0x8be>
 8008570:	2e00      	cmp	r6, #0
 8008572:	dd13      	ble.n	800859c <_dtoa_r+0x78c>
 8008574:	4639      	mov	r1, r7
 8008576:	4632      	mov	r2, r6
 8008578:	4620      	mov	r0, r4
 800857a:	f000 fbfb 	bl	8008d74 <__pow5mult>
 800857e:	ee18 2a10 	vmov	r2, s16
 8008582:	4601      	mov	r1, r0
 8008584:	4607      	mov	r7, r0
 8008586:	4620      	mov	r0, r4
 8008588:	f000 fb4a 	bl	8008c20 <__multiply>
 800858c:	ee18 1a10 	vmov	r1, s16
 8008590:	4680      	mov	r8, r0
 8008592:	4620      	mov	r0, r4
 8008594:	f000 fa76 	bl	8008a84 <_Bfree>
 8008598:	ee08 8a10 	vmov	s16, r8
 800859c:	9b07      	ldr	r3, [sp, #28]
 800859e:	1b9a      	subs	r2, r3, r6
 80085a0:	d006      	beq.n	80085b0 <_dtoa_r+0x7a0>
 80085a2:	ee18 1a10 	vmov	r1, s16
 80085a6:	4620      	mov	r0, r4
 80085a8:	f000 fbe4 	bl	8008d74 <__pow5mult>
 80085ac:	ee08 0a10 	vmov	s16, r0
 80085b0:	2101      	movs	r1, #1
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 fb1e 	bl	8008bf4 <__i2b>
 80085b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	4606      	mov	r6, r0
 80085be:	f340 8088 	ble.w	80086d2 <_dtoa_r+0x8c2>
 80085c2:	461a      	mov	r2, r3
 80085c4:	4601      	mov	r1, r0
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 fbd4 	bl	8008d74 <__pow5mult>
 80085cc:	9b06      	ldr	r3, [sp, #24]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	4606      	mov	r6, r0
 80085d2:	f340 8081 	ble.w	80086d8 <_dtoa_r+0x8c8>
 80085d6:	f04f 0800 	mov.w	r8, #0
 80085da:	6933      	ldr	r3, [r6, #16]
 80085dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80085e0:	6918      	ldr	r0, [r3, #16]
 80085e2:	f000 fab7 	bl	8008b54 <__hi0bits>
 80085e6:	f1c0 0020 	rsb	r0, r0, #32
 80085ea:	9b05      	ldr	r3, [sp, #20]
 80085ec:	4418      	add	r0, r3
 80085ee:	f010 001f 	ands.w	r0, r0, #31
 80085f2:	f000 8092 	beq.w	800871a <_dtoa_r+0x90a>
 80085f6:	f1c0 0320 	rsb	r3, r0, #32
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	f340 808a 	ble.w	8008714 <_dtoa_r+0x904>
 8008600:	f1c0 001c 	rsb	r0, r0, #28
 8008604:	9b04      	ldr	r3, [sp, #16]
 8008606:	4403      	add	r3, r0
 8008608:	9304      	str	r3, [sp, #16]
 800860a:	9b05      	ldr	r3, [sp, #20]
 800860c:	4403      	add	r3, r0
 800860e:	4405      	add	r5, r0
 8008610:	9305      	str	r3, [sp, #20]
 8008612:	9b04      	ldr	r3, [sp, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	dd07      	ble.n	8008628 <_dtoa_r+0x818>
 8008618:	ee18 1a10 	vmov	r1, s16
 800861c:	461a      	mov	r2, r3
 800861e:	4620      	mov	r0, r4
 8008620:	f000 fc02 	bl	8008e28 <__lshift>
 8008624:	ee08 0a10 	vmov	s16, r0
 8008628:	9b05      	ldr	r3, [sp, #20]
 800862a:	2b00      	cmp	r3, #0
 800862c:	dd05      	ble.n	800863a <_dtoa_r+0x82a>
 800862e:	4631      	mov	r1, r6
 8008630:	461a      	mov	r2, r3
 8008632:	4620      	mov	r0, r4
 8008634:	f000 fbf8 	bl	8008e28 <__lshift>
 8008638:	4606      	mov	r6, r0
 800863a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d06e      	beq.n	800871e <_dtoa_r+0x90e>
 8008640:	ee18 0a10 	vmov	r0, s16
 8008644:	4631      	mov	r1, r6
 8008646:	f000 fc5f 	bl	8008f08 <__mcmp>
 800864a:	2800      	cmp	r0, #0
 800864c:	da67      	bge.n	800871e <_dtoa_r+0x90e>
 800864e:	9b00      	ldr	r3, [sp, #0]
 8008650:	3b01      	subs	r3, #1
 8008652:	ee18 1a10 	vmov	r1, s16
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	220a      	movs	r2, #10
 800865a:	2300      	movs	r3, #0
 800865c:	4620      	mov	r0, r4
 800865e:	f000 fa33 	bl	8008ac8 <__multadd>
 8008662:	9b08      	ldr	r3, [sp, #32]
 8008664:	ee08 0a10 	vmov	s16, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 81b1 	beq.w	80089d0 <_dtoa_r+0xbc0>
 800866e:	2300      	movs	r3, #0
 8008670:	4639      	mov	r1, r7
 8008672:	220a      	movs	r2, #10
 8008674:	4620      	mov	r0, r4
 8008676:	f000 fa27 	bl	8008ac8 <__multadd>
 800867a:	9b02      	ldr	r3, [sp, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	4607      	mov	r7, r0
 8008680:	f300 808e 	bgt.w	80087a0 <_dtoa_r+0x990>
 8008684:	9b06      	ldr	r3, [sp, #24]
 8008686:	2b02      	cmp	r3, #2
 8008688:	dc51      	bgt.n	800872e <_dtoa_r+0x91e>
 800868a:	e089      	b.n	80087a0 <_dtoa_r+0x990>
 800868c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800868e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008692:	e74b      	b.n	800852c <_dtoa_r+0x71c>
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	1e5e      	subs	r6, r3, #1
 8008698:	9b07      	ldr	r3, [sp, #28]
 800869a:	42b3      	cmp	r3, r6
 800869c:	bfbf      	itttt	lt
 800869e:	9b07      	ldrlt	r3, [sp, #28]
 80086a0:	9607      	strlt	r6, [sp, #28]
 80086a2:	1af2      	sublt	r2, r6, r3
 80086a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80086a6:	bfb6      	itet	lt
 80086a8:	189b      	addlt	r3, r3, r2
 80086aa:	1b9e      	subge	r6, r3, r6
 80086ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 80086ae:	9b03      	ldr	r3, [sp, #12]
 80086b0:	bfb8      	it	lt
 80086b2:	2600      	movlt	r6, #0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	bfb7      	itett	lt
 80086b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80086bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80086c0:	1a9d      	sublt	r5, r3, r2
 80086c2:	2300      	movlt	r3, #0
 80086c4:	e734      	b.n	8008530 <_dtoa_r+0x720>
 80086c6:	9e07      	ldr	r6, [sp, #28]
 80086c8:	9d04      	ldr	r5, [sp, #16]
 80086ca:	9f08      	ldr	r7, [sp, #32]
 80086cc:	e73b      	b.n	8008546 <_dtoa_r+0x736>
 80086ce:	9a07      	ldr	r2, [sp, #28]
 80086d0:	e767      	b.n	80085a2 <_dtoa_r+0x792>
 80086d2:	9b06      	ldr	r3, [sp, #24]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	dc18      	bgt.n	800870a <_dtoa_r+0x8fa>
 80086d8:	f1ba 0f00 	cmp.w	sl, #0
 80086dc:	d115      	bne.n	800870a <_dtoa_r+0x8fa>
 80086de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086e2:	b993      	cbnz	r3, 800870a <_dtoa_r+0x8fa>
 80086e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80086e8:	0d1b      	lsrs	r3, r3, #20
 80086ea:	051b      	lsls	r3, r3, #20
 80086ec:	b183      	cbz	r3, 8008710 <_dtoa_r+0x900>
 80086ee:	9b04      	ldr	r3, [sp, #16]
 80086f0:	3301      	adds	r3, #1
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	9b05      	ldr	r3, [sp, #20]
 80086f6:	3301      	adds	r3, #1
 80086f8:	9305      	str	r3, [sp, #20]
 80086fa:	f04f 0801 	mov.w	r8, #1
 80086fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008700:	2b00      	cmp	r3, #0
 8008702:	f47f af6a 	bne.w	80085da <_dtoa_r+0x7ca>
 8008706:	2001      	movs	r0, #1
 8008708:	e76f      	b.n	80085ea <_dtoa_r+0x7da>
 800870a:	f04f 0800 	mov.w	r8, #0
 800870e:	e7f6      	b.n	80086fe <_dtoa_r+0x8ee>
 8008710:	4698      	mov	r8, r3
 8008712:	e7f4      	b.n	80086fe <_dtoa_r+0x8ee>
 8008714:	f43f af7d 	beq.w	8008612 <_dtoa_r+0x802>
 8008718:	4618      	mov	r0, r3
 800871a:	301c      	adds	r0, #28
 800871c:	e772      	b.n	8008604 <_dtoa_r+0x7f4>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	dc37      	bgt.n	8008794 <_dtoa_r+0x984>
 8008724:	9b06      	ldr	r3, [sp, #24]
 8008726:	2b02      	cmp	r3, #2
 8008728:	dd34      	ble.n	8008794 <_dtoa_r+0x984>
 800872a:	9b03      	ldr	r3, [sp, #12]
 800872c:	9302      	str	r3, [sp, #8]
 800872e:	9b02      	ldr	r3, [sp, #8]
 8008730:	b96b      	cbnz	r3, 800874e <_dtoa_r+0x93e>
 8008732:	4631      	mov	r1, r6
 8008734:	2205      	movs	r2, #5
 8008736:	4620      	mov	r0, r4
 8008738:	f000 f9c6 	bl	8008ac8 <__multadd>
 800873c:	4601      	mov	r1, r0
 800873e:	4606      	mov	r6, r0
 8008740:	ee18 0a10 	vmov	r0, s16
 8008744:	f000 fbe0 	bl	8008f08 <__mcmp>
 8008748:	2800      	cmp	r0, #0
 800874a:	f73f adbb 	bgt.w	80082c4 <_dtoa_r+0x4b4>
 800874e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008750:	9d01      	ldr	r5, [sp, #4]
 8008752:	43db      	mvns	r3, r3
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	f04f 0800 	mov.w	r8, #0
 800875a:	4631      	mov	r1, r6
 800875c:	4620      	mov	r0, r4
 800875e:	f000 f991 	bl	8008a84 <_Bfree>
 8008762:	2f00      	cmp	r7, #0
 8008764:	f43f aea4 	beq.w	80084b0 <_dtoa_r+0x6a0>
 8008768:	f1b8 0f00 	cmp.w	r8, #0
 800876c:	d005      	beq.n	800877a <_dtoa_r+0x96a>
 800876e:	45b8      	cmp	r8, r7
 8008770:	d003      	beq.n	800877a <_dtoa_r+0x96a>
 8008772:	4641      	mov	r1, r8
 8008774:	4620      	mov	r0, r4
 8008776:	f000 f985 	bl	8008a84 <_Bfree>
 800877a:	4639      	mov	r1, r7
 800877c:	4620      	mov	r0, r4
 800877e:	f000 f981 	bl	8008a84 <_Bfree>
 8008782:	e695      	b.n	80084b0 <_dtoa_r+0x6a0>
 8008784:	2600      	movs	r6, #0
 8008786:	4637      	mov	r7, r6
 8008788:	e7e1      	b.n	800874e <_dtoa_r+0x93e>
 800878a:	9700      	str	r7, [sp, #0]
 800878c:	4637      	mov	r7, r6
 800878e:	e599      	b.n	80082c4 <_dtoa_r+0x4b4>
 8008790:	40240000 	.word	0x40240000
 8008794:	9b08      	ldr	r3, [sp, #32]
 8008796:	2b00      	cmp	r3, #0
 8008798:	f000 80ca 	beq.w	8008930 <_dtoa_r+0xb20>
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	9302      	str	r3, [sp, #8]
 80087a0:	2d00      	cmp	r5, #0
 80087a2:	dd05      	ble.n	80087b0 <_dtoa_r+0x9a0>
 80087a4:	4639      	mov	r1, r7
 80087a6:	462a      	mov	r2, r5
 80087a8:	4620      	mov	r0, r4
 80087aa:	f000 fb3d 	bl	8008e28 <__lshift>
 80087ae:	4607      	mov	r7, r0
 80087b0:	f1b8 0f00 	cmp.w	r8, #0
 80087b4:	d05b      	beq.n	800886e <_dtoa_r+0xa5e>
 80087b6:	6879      	ldr	r1, [r7, #4]
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 f923 	bl	8008a04 <_Balloc>
 80087be:	4605      	mov	r5, r0
 80087c0:	b928      	cbnz	r0, 80087ce <_dtoa_r+0x9be>
 80087c2:	4b87      	ldr	r3, [pc, #540]	; (80089e0 <_dtoa_r+0xbd0>)
 80087c4:	4602      	mov	r2, r0
 80087c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80087ca:	f7ff bb3b 	b.w	8007e44 <_dtoa_r+0x34>
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	3202      	adds	r2, #2
 80087d2:	0092      	lsls	r2, r2, #2
 80087d4:	f107 010c 	add.w	r1, r7, #12
 80087d8:	300c      	adds	r0, #12
 80087da:	f7fe fe0d 	bl	80073f8 <memcpy>
 80087de:	2201      	movs	r2, #1
 80087e0:	4629      	mov	r1, r5
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 fb20 	bl	8008e28 <__lshift>
 80087e8:	9b01      	ldr	r3, [sp, #4]
 80087ea:	f103 0901 	add.w	r9, r3, #1
 80087ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80087f2:	4413      	add	r3, r2
 80087f4:	9305      	str	r3, [sp, #20]
 80087f6:	f00a 0301 	and.w	r3, sl, #1
 80087fa:	46b8      	mov	r8, r7
 80087fc:	9304      	str	r3, [sp, #16]
 80087fe:	4607      	mov	r7, r0
 8008800:	4631      	mov	r1, r6
 8008802:	ee18 0a10 	vmov	r0, s16
 8008806:	f7ff fa77 	bl	8007cf8 <quorem>
 800880a:	4641      	mov	r1, r8
 800880c:	9002      	str	r0, [sp, #8]
 800880e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008812:	ee18 0a10 	vmov	r0, s16
 8008816:	f000 fb77 	bl	8008f08 <__mcmp>
 800881a:	463a      	mov	r2, r7
 800881c:	9003      	str	r0, [sp, #12]
 800881e:	4631      	mov	r1, r6
 8008820:	4620      	mov	r0, r4
 8008822:	f000 fb8d 	bl	8008f40 <__mdiff>
 8008826:	68c2      	ldr	r2, [r0, #12]
 8008828:	f109 3bff 	add.w	fp, r9, #4294967295
 800882c:	4605      	mov	r5, r0
 800882e:	bb02      	cbnz	r2, 8008872 <_dtoa_r+0xa62>
 8008830:	4601      	mov	r1, r0
 8008832:	ee18 0a10 	vmov	r0, s16
 8008836:	f000 fb67 	bl	8008f08 <__mcmp>
 800883a:	4602      	mov	r2, r0
 800883c:	4629      	mov	r1, r5
 800883e:	4620      	mov	r0, r4
 8008840:	9207      	str	r2, [sp, #28]
 8008842:	f000 f91f 	bl	8008a84 <_Bfree>
 8008846:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800884a:	ea43 0102 	orr.w	r1, r3, r2
 800884e:	9b04      	ldr	r3, [sp, #16]
 8008850:	430b      	orrs	r3, r1
 8008852:	464d      	mov	r5, r9
 8008854:	d10f      	bne.n	8008876 <_dtoa_r+0xa66>
 8008856:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800885a:	d02a      	beq.n	80088b2 <_dtoa_r+0xaa2>
 800885c:	9b03      	ldr	r3, [sp, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	dd02      	ble.n	8008868 <_dtoa_r+0xa58>
 8008862:	9b02      	ldr	r3, [sp, #8]
 8008864:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008868:	f88b a000 	strb.w	sl, [fp]
 800886c:	e775      	b.n	800875a <_dtoa_r+0x94a>
 800886e:	4638      	mov	r0, r7
 8008870:	e7ba      	b.n	80087e8 <_dtoa_r+0x9d8>
 8008872:	2201      	movs	r2, #1
 8008874:	e7e2      	b.n	800883c <_dtoa_r+0xa2c>
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	2b00      	cmp	r3, #0
 800887a:	db04      	blt.n	8008886 <_dtoa_r+0xa76>
 800887c:	9906      	ldr	r1, [sp, #24]
 800887e:	430b      	orrs	r3, r1
 8008880:	9904      	ldr	r1, [sp, #16]
 8008882:	430b      	orrs	r3, r1
 8008884:	d122      	bne.n	80088cc <_dtoa_r+0xabc>
 8008886:	2a00      	cmp	r2, #0
 8008888:	ddee      	ble.n	8008868 <_dtoa_r+0xa58>
 800888a:	ee18 1a10 	vmov	r1, s16
 800888e:	2201      	movs	r2, #1
 8008890:	4620      	mov	r0, r4
 8008892:	f000 fac9 	bl	8008e28 <__lshift>
 8008896:	4631      	mov	r1, r6
 8008898:	ee08 0a10 	vmov	s16, r0
 800889c:	f000 fb34 	bl	8008f08 <__mcmp>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	dc03      	bgt.n	80088ac <_dtoa_r+0xa9c>
 80088a4:	d1e0      	bne.n	8008868 <_dtoa_r+0xa58>
 80088a6:	f01a 0f01 	tst.w	sl, #1
 80088aa:	d0dd      	beq.n	8008868 <_dtoa_r+0xa58>
 80088ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088b0:	d1d7      	bne.n	8008862 <_dtoa_r+0xa52>
 80088b2:	2339      	movs	r3, #57	; 0x39
 80088b4:	f88b 3000 	strb.w	r3, [fp]
 80088b8:	462b      	mov	r3, r5
 80088ba:	461d      	mov	r5, r3
 80088bc:	3b01      	subs	r3, #1
 80088be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088c2:	2a39      	cmp	r2, #57	; 0x39
 80088c4:	d071      	beq.n	80089aa <_dtoa_r+0xb9a>
 80088c6:	3201      	adds	r2, #1
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	e746      	b.n	800875a <_dtoa_r+0x94a>
 80088cc:	2a00      	cmp	r2, #0
 80088ce:	dd07      	ble.n	80088e0 <_dtoa_r+0xad0>
 80088d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80088d4:	d0ed      	beq.n	80088b2 <_dtoa_r+0xaa2>
 80088d6:	f10a 0301 	add.w	r3, sl, #1
 80088da:	f88b 3000 	strb.w	r3, [fp]
 80088de:	e73c      	b.n	800875a <_dtoa_r+0x94a>
 80088e0:	9b05      	ldr	r3, [sp, #20]
 80088e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80088e6:	4599      	cmp	r9, r3
 80088e8:	d047      	beq.n	800897a <_dtoa_r+0xb6a>
 80088ea:	ee18 1a10 	vmov	r1, s16
 80088ee:	2300      	movs	r3, #0
 80088f0:	220a      	movs	r2, #10
 80088f2:	4620      	mov	r0, r4
 80088f4:	f000 f8e8 	bl	8008ac8 <__multadd>
 80088f8:	45b8      	cmp	r8, r7
 80088fa:	ee08 0a10 	vmov	s16, r0
 80088fe:	f04f 0300 	mov.w	r3, #0
 8008902:	f04f 020a 	mov.w	r2, #10
 8008906:	4641      	mov	r1, r8
 8008908:	4620      	mov	r0, r4
 800890a:	d106      	bne.n	800891a <_dtoa_r+0xb0a>
 800890c:	f000 f8dc 	bl	8008ac8 <__multadd>
 8008910:	4680      	mov	r8, r0
 8008912:	4607      	mov	r7, r0
 8008914:	f109 0901 	add.w	r9, r9, #1
 8008918:	e772      	b.n	8008800 <_dtoa_r+0x9f0>
 800891a:	f000 f8d5 	bl	8008ac8 <__multadd>
 800891e:	4639      	mov	r1, r7
 8008920:	4680      	mov	r8, r0
 8008922:	2300      	movs	r3, #0
 8008924:	220a      	movs	r2, #10
 8008926:	4620      	mov	r0, r4
 8008928:	f000 f8ce 	bl	8008ac8 <__multadd>
 800892c:	4607      	mov	r7, r0
 800892e:	e7f1      	b.n	8008914 <_dtoa_r+0xb04>
 8008930:	9b03      	ldr	r3, [sp, #12]
 8008932:	9302      	str	r3, [sp, #8]
 8008934:	9d01      	ldr	r5, [sp, #4]
 8008936:	ee18 0a10 	vmov	r0, s16
 800893a:	4631      	mov	r1, r6
 800893c:	f7ff f9dc 	bl	8007cf8 <quorem>
 8008940:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008944:	9b01      	ldr	r3, [sp, #4]
 8008946:	f805 ab01 	strb.w	sl, [r5], #1
 800894a:	1aea      	subs	r2, r5, r3
 800894c:	9b02      	ldr	r3, [sp, #8]
 800894e:	4293      	cmp	r3, r2
 8008950:	dd09      	ble.n	8008966 <_dtoa_r+0xb56>
 8008952:	ee18 1a10 	vmov	r1, s16
 8008956:	2300      	movs	r3, #0
 8008958:	220a      	movs	r2, #10
 800895a:	4620      	mov	r0, r4
 800895c:	f000 f8b4 	bl	8008ac8 <__multadd>
 8008960:	ee08 0a10 	vmov	s16, r0
 8008964:	e7e7      	b.n	8008936 <_dtoa_r+0xb26>
 8008966:	9b02      	ldr	r3, [sp, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	bfc8      	it	gt
 800896c:	461d      	movgt	r5, r3
 800896e:	9b01      	ldr	r3, [sp, #4]
 8008970:	bfd8      	it	le
 8008972:	2501      	movle	r5, #1
 8008974:	441d      	add	r5, r3
 8008976:	f04f 0800 	mov.w	r8, #0
 800897a:	ee18 1a10 	vmov	r1, s16
 800897e:	2201      	movs	r2, #1
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fa51 	bl	8008e28 <__lshift>
 8008986:	4631      	mov	r1, r6
 8008988:	ee08 0a10 	vmov	s16, r0
 800898c:	f000 fabc 	bl	8008f08 <__mcmp>
 8008990:	2800      	cmp	r0, #0
 8008992:	dc91      	bgt.n	80088b8 <_dtoa_r+0xaa8>
 8008994:	d102      	bne.n	800899c <_dtoa_r+0xb8c>
 8008996:	f01a 0f01 	tst.w	sl, #1
 800899a:	d18d      	bne.n	80088b8 <_dtoa_r+0xaa8>
 800899c:	462b      	mov	r3, r5
 800899e:	461d      	mov	r5, r3
 80089a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089a4:	2a30      	cmp	r2, #48	; 0x30
 80089a6:	d0fa      	beq.n	800899e <_dtoa_r+0xb8e>
 80089a8:	e6d7      	b.n	800875a <_dtoa_r+0x94a>
 80089aa:	9a01      	ldr	r2, [sp, #4]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d184      	bne.n	80088ba <_dtoa_r+0xaaa>
 80089b0:	9b00      	ldr	r3, [sp, #0]
 80089b2:	3301      	adds	r3, #1
 80089b4:	9300      	str	r3, [sp, #0]
 80089b6:	2331      	movs	r3, #49	; 0x31
 80089b8:	7013      	strb	r3, [r2, #0]
 80089ba:	e6ce      	b.n	800875a <_dtoa_r+0x94a>
 80089bc:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <_dtoa_r+0xbd4>)
 80089be:	f7ff ba95 	b.w	8007eec <_dtoa_r+0xdc>
 80089c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f47f aa6e 	bne.w	8007ea6 <_dtoa_r+0x96>
 80089ca:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <_dtoa_r+0xbd8>)
 80089cc:	f7ff ba8e 	b.w	8007eec <_dtoa_r+0xdc>
 80089d0:	9b02      	ldr	r3, [sp, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	dcae      	bgt.n	8008934 <_dtoa_r+0xb24>
 80089d6:	9b06      	ldr	r3, [sp, #24]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	f73f aea8 	bgt.w	800872e <_dtoa_r+0x91e>
 80089de:	e7a9      	b.n	8008934 <_dtoa_r+0xb24>
 80089e0:	0800b477 	.word	0x0800b477
 80089e4:	0800b3d4 	.word	0x0800b3d4
 80089e8:	0800b3f8 	.word	0x0800b3f8

080089ec <_localeconv_r>:
 80089ec:	4800      	ldr	r0, [pc, #0]	; (80089f0 <_localeconv_r+0x4>)
 80089ee:	4770      	bx	lr
 80089f0:	20000168 	.word	0x20000168

080089f4 <malloc>:
 80089f4:	4b02      	ldr	r3, [pc, #8]	; (8008a00 <malloc+0xc>)
 80089f6:	4601      	mov	r1, r0
 80089f8:	6818      	ldr	r0, [r3, #0]
 80089fa:	f000 bc09 	b.w	8009210 <_malloc_r>
 80089fe:	bf00      	nop
 8008a00:	20000014 	.word	0x20000014

08008a04 <_Balloc>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a08:	4604      	mov	r4, r0
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	b976      	cbnz	r6, 8008a2c <_Balloc+0x28>
 8008a0e:	2010      	movs	r0, #16
 8008a10:	f7ff fff0 	bl	80089f4 <malloc>
 8008a14:	4602      	mov	r2, r0
 8008a16:	6260      	str	r0, [r4, #36]	; 0x24
 8008a18:	b920      	cbnz	r0, 8008a24 <_Balloc+0x20>
 8008a1a:	4b18      	ldr	r3, [pc, #96]	; (8008a7c <_Balloc+0x78>)
 8008a1c:	4818      	ldr	r0, [pc, #96]	; (8008a80 <_Balloc+0x7c>)
 8008a1e:	2166      	movs	r1, #102	; 0x66
 8008a20:	f000 fc7a 	bl	8009318 <__assert_func>
 8008a24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a28:	6006      	str	r6, [r0, #0]
 8008a2a:	60c6      	str	r6, [r0, #12]
 8008a2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008a2e:	68f3      	ldr	r3, [r6, #12]
 8008a30:	b183      	cbz	r3, 8008a54 <_Balloc+0x50>
 8008a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a34:	68db      	ldr	r3, [r3, #12]
 8008a36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a3a:	b9b8      	cbnz	r0, 8008a6c <_Balloc+0x68>
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	fa01 f605 	lsl.w	r6, r1, r5
 8008a42:	1d72      	adds	r2, r6, #5
 8008a44:	0092      	lsls	r2, r2, #2
 8008a46:	4620      	mov	r0, r4
 8008a48:	f000 fb60 	bl	800910c <_calloc_r>
 8008a4c:	b160      	cbz	r0, 8008a68 <_Balloc+0x64>
 8008a4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a52:	e00e      	b.n	8008a72 <_Balloc+0x6e>
 8008a54:	2221      	movs	r2, #33	; 0x21
 8008a56:	2104      	movs	r1, #4
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f000 fb57 	bl	800910c <_calloc_r>
 8008a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a60:	60f0      	str	r0, [r6, #12]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d1e4      	bne.n	8008a32 <_Balloc+0x2e>
 8008a68:	2000      	movs	r0, #0
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
 8008a6c:	6802      	ldr	r2, [r0, #0]
 8008a6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a72:	2300      	movs	r3, #0
 8008a74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a78:	e7f7      	b.n	8008a6a <_Balloc+0x66>
 8008a7a:	bf00      	nop
 8008a7c:	0800b405 	.word	0x0800b405
 8008a80:	0800b488 	.word	0x0800b488

08008a84 <_Bfree>:
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a88:	4605      	mov	r5, r0
 8008a8a:	460c      	mov	r4, r1
 8008a8c:	b976      	cbnz	r6, 8008aac <_Bfree+0x28>
 8008a8e:	2010      	movs	r0, #16
 8008a90:	f7ff ffb0 	bl	80089f4 <malloc>
 8008a94:	4602      	mov	r2, r0
 8008a96:	6268      	str	r0, [r5, #36]	; 0x24
 8008a98:	b920      	cbnz	r0, 8008aa4 <_Bfree+0x20>
 8008a9a:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <_Bfree+0x3c>)
 8008a9c:	4809      	ldr	r0, [pc, #36]	; (8008ac4 <_Bfree+0x40>)
 8008a9e:	218a      	movs	r1, #138	; 0x8a
 8008aa0:	f000 fc3a 	bl	8009318 <__assert_func>
 8008aa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008aa8:	6006      	str	r6, [r0, #0]
 8008aaa:	60c6      	str	r6, [r0, #12]
 8008aac:	b13c      	cbz	r4, 8008abe <_Bfree+0x3a>
 8008aae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008ab0:	6862      	ldr	r2, [r4, #4]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ab8:	6021      	str	r1, [r4, #0]
 8008aba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008abe:	bd70      	pop	{r4, r5, r6, pc}
 8008ac0:	0800b405 	.word	0x0800b405
 8008ac4:	0800b488 	.word	0x0800b488

08008ac8 <__multadd>:
 8008ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008acc:	690d      	ldr	r5, [r1, #16]
 8008ace:	4607      	mov	r7, r0
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	461e      	mov	r6, r3
 8008ad4:	f101 0c14 	add.w	ip, r1, #20
 8008ad8:	2000      	movs	r0, #0
 8008ada:	f8dc 3000 	ldr.w	r3, [ip]
 8008ade:	b299      	uxth	r1, r3
 8008ae0:	fb02 6101 	mla	r1, r2, r1, r6
 8008ae4:	0c1e      	lsrs	r6, r3, #16
 8008ae6:	0c0b      	lsrs	r3, r1, #16
 8008ae8:	fb02 3306 	mla	r3, r2, r6, r3
 8008aec:	b289      	uxth	r1, r1
 8008aee:	3001      	adds	r0, #1
 8008af0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008af4:	4285      	cmp	r5, r0
 8008af6:	f84c 1b04 	str.w	r1, [ip], #4
 8008afa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008afe:	dcec      	bgt.n	8008ada <__multadd+0x12>
 8008b00:	b30e      	cbz	r6, 8008b46 <__multadd+0x7e>
 8008b02:	68a3      	ldr	r3, [r4, #8]
 8008b04:	42ab      	cmp	r3, r5
 8008b06:	dc19      	bgt.n	8008b3c <__multadd+0x74>
 8008b08:	6861      	ldr	r1, [r4, #4]
 8008b0a:	4638      	mov	r0, r7
 8008b0c:	3101      	adds	r1, #1
 8008b0e:	f7ff ff79 	bl	8008a04 <_Balloc>
 8008b12:	4680      	mov	r8, r0
 8008b14:	b928      	cbnz	r0, 8008b22 <__multadd+0x5a>
 8008b16:	4602      	mov	r2, r0
 8008b18:	4b0c      	ldr	r3, [pc, #48]	; (8008b4c <__multadd+0x84>)
 8008b1a:	480d      	ldr	r0, [pc, #52]	; (8008b50 <__multadd+0x88>)
 8008b1c:	21b5      	movs	r1, #181	; 0xb5
 8008b1e:	f000 fbfb 	bl	8009318 <__assert_func>
 8008b22:	6922      	ldr	r2, [r4, #16]
 8008b24:	3202      	adds	r2, #2
 8008b26:	f104 010c 	add.w	r1, r4, #12
 8008b2a:	0092      	lsls	r2, r2, #2
 8008b2c:	300c      	adds	r0, #12
 8008b2e:	f7fe fc63 	bl	80073f8 <memcpy>
 8008b32:	4621      	mov	r1, r4
 8008b34:	4638      	mov	r0, r7
 8008b36:	f7ff ffa5 	bl	8008a84 <_Bfree>
 8008b3a:	4644      	mov	r4, r8
 8008b3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b40:	3501      	adds	r5, #1
 8008b42:	615e      	str	r6, [r3, #20]
 8008b44:	6125      	str	r5, [r4, #16]
 8008b46:	4620      	mov	r0, r4
 8008b48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b4c:	0800b477 	.word	0x0800b477
 8008b50:	0800b488 	.word	0x0800b488

08008b54 <__hi0bits>:
 8008b54:	0c03      	lsrs	r3, r0, #16
 8008b56:	041b      	lsls	r3, r3, #16
 8008b58:	b9d3      	cbnz	r3, 8008b90 <__hi0bits+0x3c>
 8008b5a:	0400      	lsls	r0, r0, #16
 8008b5c:	2310      	movs	r3, #16
 8008b5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b62:	bf04      	itt	eq
 8008b64:	0200      	lsleq	r0, r0, #8
 8008b66:	3308      	addeq	r3, #8
 8008b68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b6c:	bf04      	itt	eq
 8008b6e:	0100      	lsleq	r0, r0, #4
 8008b70:	3304      	addeq	r3, #4
 8008b72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b76:	bf04      	itt	eq
 8008b78:	0080      	lsleq	r0, r0, #2
 8008b7a:	3302      	addeq	r3, #2
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	db05      	blt.n	8008b8c <__hi0bits+0x38>
 8008b80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b84:	f103 0301 	add.w	r3, r3, #1
 8008b88:	bf08      	it	eq
 8008b8a:	2320      	moveq	r3, #32
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	4770      	bx	lr
 8008b90:	2300      	movs	r3, #0
 8008b92:	e7e4      	b.n	8008b5e <__hi0bits+0xa>

08008b94 <__lo0bits>:
 8008b94:	6803      	ldr	r3, [r0, #0]
 8008b96:	f013 0207 	ands.w	r2, r3, #7
 8008b9a:	4601      	mov	r1, r0
 8008b9c:	d00b      	beq.n	8008bb6 <__lo0bits+0x22>
 8008b9e:	07da      	lsls	r2, r3, #31
 8008ba0:	d423      	bmi.n	8008bea <__lo0bits+0x56>
 8008ba2:	0798      	lsls	r0, r3, #30
 8008ba4:	bf49      	itett	mi
 8008ba6:	085b      	lsrmi	r3, r3, #1
 8008ba8:	089b      	lsrpl	r3, r3, #2
 8008baa:	2001      	movmi	r0, #1
 8008bac:	600b      	strmi	r3, [r1, #0]
 8008bae:	bf5c      	itt	pl
 8008bb0:	600b      	strpl	r3, [r1, #0]
 8008bb2:	2002      	movpl	r0, #2
 8008bb4:	4770      	bx	lr
 8008bb6:	b298      	uxth	r0, r3
 8008bb8:	b9a8      	cbnz	r0, 8008be6 <__lo0bits+0x52>
 8008bba:	0c1b      	lsrs	r3, r3, #16
 8008bbc:	2010      	movs	r0, #16
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	b90a      	cbnz	r2, 8008bc6 <__lo0bits+0x32>
 8008bc2:	3008      	adds	r0, #8
 8008bc4:	0a1b      	lsrs	r3, r3, #8
 8008bc6:	071a      	lsls	r2, r3, #28
 8008bc8:	bf04      	itt	eq
 8008bca:	091b      	lsreq	r3, r3, #4
 8008bcc:	3004      	addeq	r0, #4
 8008bce:	079a      	lsls	r2, r3, #30
 8008bd0:	bf04      	itt	eq
 8008bd2:	089b      	lsreq	r3, r3, #2
 8008bd4:	3002      	addeq	r0, #2
 8008bd6:	07da      	lsls	r2, r3, #31
 8008bd8:	d403      	bmi.n	8008be2 <__lo0bits+0x4e>
 8008bda:	085b      	lsrs	r3, r3, #1
 8008bdc:	f100 0001 	add.w	r0, r0, #1
 8008be0:	d005      	beq.n	8008bee <__lo0bits+0x5a>
 8008be2:	600b      	str	r3, [r1, #0]
 8008be4:	4770      	bx	lr
 8008be6:	4610      	mov	r0, r2
 8008be8:	e7e9      	b.n	8008bbe <__lo0bits+0x2a>
 8008bea:	2000      	movs	r0, #0
 8008bec:	4770      	bx	lr
 8008bee:	2020      	movs	r0, #32
 8008bf0:	4770      	bx	lr
	...

08008bf4 <__i2b>:
 8008bf4:	b510      	push	{r4, lr}
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	f7ff ff03 	bl	8008a04 <_Balloc>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	b928      	cbnz	r0, 8008c0e <__i2b+0x1a>
 8008c02:	4b05      	ldr	r3, [pc, #20]	; (8008c18 <__i2b+0x24>)
 8008c04:	4805      	ldr	r0, [pc, #20]	; (8008c1c <__i2b+0x28>)
 8008c06:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c0a:	f000 fb85 	bl	8009318 <__assert_func>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	6144      	str	r4, [r0, #20]
 8008c12:	6103      	str	r3, [r0, #16]
 8008c14:	bd10      	pop	{r4, pc}
 8008c16:	bf00      	nop
 8008c18:	0800b477 	.word	0x0800b477
 8008c1c:	0800b488 	.word	0x0800b488

08008c20 <__multiply>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	4691      	mov	r9, r2
 8008c26:	690a      	ldr	r2, [r1, #16]
 8008c28:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	bfb8      	it	lt
 8008c30:	460b      	movlt	r3, r1
 8008c32:	460c      	mov	r4, r1
 8008c34:	bfbc      	itt	lt
 8008c36:	464c      	movlt	r4, r9
 8008c38:	4699      	movlt	r9, r3
 8008c3a:	6927      	ldr	r7, [r4, #16]
 8008c3c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008c40:	68a3      	ldr	r3, [r4, #8]
 8008c42:	6861      	ldr	r1, [r4, #4]
 8008c44:	eb07 060a 	add.w	r6, r7, sl
 8008c48:	42b3      	cmp	r3, r6
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	bfb8      	it	lt
 8008c4e:	3101      	addlt	r1, #1
 8008c50:	f7ff fed8 	bl	8008a04 <_Balloc>
 8008c54:	b930      	cbnz	r0, 8008c64 <__multiply+0x44>
 8008c56:	4602      	mov	r2, r0
 8008c58:	4b44      	ldr	r3, [pc, #272]	; (8008d6c <__multiply+0x14c>)
 8008c5a:	4845      	ldr	r0, [pc, #276]	; (8008d70 <__multiply+0x150>)
 8008c5c:	f240 115d 	movw	r1, #349	; 0x15d
 8008c60:	f000 fb5a 	bl	8009318 <__assert_func>
 8008c64:	f100 0514 	add.w	r5, r0, #20
 8008c68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	2200      	movs	r2, #0
 8008c70:	4543      	cmp	r3, r8
 8008c72:	d321      	bcc.n	8008cb8 <__multiply+0x98>
 8008c74:	f104 0314 	add.w	r3, r4, #20
 8008c78:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c7c:	f109 0314 	add.w	r3, r9, #20
 8008c80:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c84:	9202      	str	r2, [sp, #8]
 8008c86:	1b3a      	subs	r2, r7, r4
 8008c88:	3a15      	subs	r2, #21
 8008c8a:	f022 0203 	bic.w	r2, r2, #3
 8008c8e:	3204      	adds	r2, #4
 8008c90:	f104 0115 	add.w	r1, r4, #21
 8008c94:	428f      	cmp	r7, r1
 8008c96:	bf38      	it	cc
 8008c98:	2204      	movcc	r2, #4
 8008c9a:	9201      	str	r2, [sp, #4]
 8008c9c:	9a02      	ldr	r2, [sp, #8]
 8008c9e:	9303      	str	r3, [sp, #12]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d80c      	bhi.n	8008cbe <__multiply+0x9e>
 8008ca4:	2e00      	cmp	r6, #0
 8008ca6:	dd03      	ble.n	8008cb0 <__multiply+0x90>
 8008ca8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d05a      	beq.n	8008d66 <__multiply+0x146>
 8008cb0:	6106      	str	r6, [r0, #16]
 8008cb2:	b005      	add	sp, #20
 8008cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb8:	f843 2b04 	str.w	r2, [r3], #4
 8008cbc:	e7d8      	b.n	8008c70 <__multiply+0x50>
 8008cbe:	f8b3 a000 	ldrh.w	sl, [r3]
 8008cc2:	f1ba 0f00 	cmp.w	sl, #0
 8008cc6:	d024      	beq.n	8008d12 <__multiply+0xf2>
 8008cc8:	f104 0e14 	add.w	lr, r4, #20
 8008ccc:	46a9      	mov	r9, r5
 8008cce:	f04f 0c00 	mov.w	ip, #0
 8008cd2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008cd6:	f8d9 1000 	ldr.w	r1, [r9]
 8008cda:	fa1f fb82 	uxth.w	fp, r2
 8008cde:	b289      	uxth	r1, r1
 8008ce0:	fb0a 110b 	mla	r1, sl, fp, r1
 8008ce4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008ce8:	f8d9 2000 	ldr.w	r2, [r9]
 8008cec:	4461      	add	r1, ip
 8008cee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008cf2:	fb0a c20b 	mla	r2, sl, fp, ip
 8008cf6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008cfa:	b289      	uxth	r1, r1
 8008cfc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d00:	4577      	cmp	r7, lr
 8008d02:	f849 1b04 	str.w	r1, [r9], #4
 8008d06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d0a:	d8e2      	bhi.n	8008cd2 <__multiply+0xb2>
 8008d0c:	9a01      	ldr	r2, [sp, #4]
 8008d0e:	f845 c002 	str.w	ip, [r5, r2]
 8008d12:	9a03      	ldr	r2, [sp, #12]
 8008d14:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	f1b9 0f00 	cmp.w	r9, #0
 8008d1e:	d020      	beq.n	8008d62 <__multiply+0x142>
 8008d20:	6829      	ldr	r1, [r5, #0]
 8008d22:	f104 0c14 	add.w	ip, r4, #20
 8008d26:	46ae      	mov	lr, r5
 8008d28:	f04f 0a00 	mov.w	sl, #0
 8008d2c:	f8bc b000 	ldrh.w	fp, [ip]
 8008d30:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008d34:	fb09 220b 	mla	r2, r9, fp, r2
 8008d38:	4492      	add	sl, r2
 8008d3a:	b289      	uxth	r1, r1
 8008d3c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008d40:	f84e 1b04 	str.w	r1, [lr], #4
 8008d44:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008d48:	f8be 1000 	ldrh.w	r1, [lr]
 8008d4c:	0c12      	lsrs	r2, r2, #16
 8008d4e:	fb09 1102 	mla	r1, r9, r2, r1
 8008d52:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008d56:	4567      	cmp	r7, ip
 8008d58:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d5c:	d8e6      	bhi.n	8008d2c <__multiply+0x10c>
 8008d5e:	9a01      	ldr	r2, [sp, #4]
 8008d60:	50a9      	str	r1, [r5, r2]
 8008d62:	3504      	adds	r5, #4
 8008d64:	e79a      	b.n	8008c9c <__multiply+0x7c>
 8008d66:	3e01      	subs	r6, #1
 8008d68:	e79c      	b.n	8008ca4 <__multiply+0x84>
 8008d6a:	bf00      	nop
 8008d6c:	0800b477 	.word	0x0800b477
 8008d70:	0800b488 	.word	0x0800b488

08008d74 <__pow5mult>:
 8008d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d78:	4615      	mov	r5, r2
 8008d7a:	f012 0203 	ands.w	r2, r2, #3
 8008d7e:	4606      	mov	r6, r0
 8008d80:	460f      	mov	r7, r1
 8008d82:	d007      	beq.n	8008d94 <__pow5mult+0x20>
 8008d84:	4c25      	ldr	r4, [pc, #148]	; (8008e1c <__pow5mult+0xa8>)
 8008d86:	3a01      	subs	r2, #1
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d8e:	f7ff fe9b 	bl	8008ac8 <__multadd>
 8008d92:	4607      	mov	r7, r0
 8008d94:	10ad      	asrs	r5, r5, #2
 8008d96:	d03d      	beq.n	8008e14 <__pow5mult+0xa0>
 8008d98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008d9a:	b97c      	cbnz	r4, 8008dbc <__pow5mult+0x48>
 8008d9c:	2010      	movs	r0, #16
 8008d9e:	f7ff fe29 	bl	80089f4 <malloc>
 8008da2:	4602      	mov	r2, r0
 8008da4:	6270      	str	r0, [r6, #36]	; 0x24
 8008da6:	b928      	cbnz	r0, 8008db4 <__pow5mult+0x40>
 8008da8:	4b1d      	ldr	r3, [pc, #116]	; (8008e20 <__pow5mult+0xac>)
 8008daa:	481e      	ldr	r0, [pc, #120]	; (8008e24 <__pow5mult+0xb0>)
 8008dac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008db0:	f000 fab2 	bl	8009318 <__assert_func>
 8008db4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008db8:	6004      	str	r4, [r0, #0]
 8008dba:	60c4      	str	r4, [r0, #12]
 8008dbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008dc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008dc4:	b94c      	cbnz	r4, 8008dda <__pow5mult+0x66>
 8008dc6:	f240 2171 	movw	r1, #625	; 0x271
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f7ff ff12 	bl	8008bf4 <__i2b>
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	6003      	str	r3, [r0, #0]
 8008dda:	f04f 0900 	mov.w	r9, #0
 8008dde:	07eb      	lsls	r3, r5, #31
 8008de0:	d50a      	bpl.n	8008df8 <__pow5mult+0x84>
 8008de2:	4639      	mov	r1, r7
 8008de4:	4622      	mov	r2, r4
 8008de6:	4630      	mov	r0, r6
 8008de8:	f7ff ff1a 	bl	8008c20 <__multiply>
 8008dec:	4639      	mov	r1, r7
 8008dee:	4680      	mov	r8, r0
 8008df0:	4630      	mov	r0, r6
 8008df2:	f7ff fe47 	bl	8008a84 <_Bfree>
 8008df6:	4647      	mov	r7, r8
 8008df8:	106d      	asrs	r5, r5, #1
 8008dfa:	d00b      	beq.n	8008e14 <__pow5mult+0xa0>
 8008dfc:	6820      	ldr	r0, [r4, #0]
 8008dfe:	b938      	cbnz	r0, 8008e10 <__pow5mult+0x9c>
 8008e00:	4622      	mov	r2, r4
 8008e02:	4621      	mov	r1, r4
 8008e04:	4630      	mov	r0, r6
 8008e06:	f7ff ff0b 	bl	8008c20 <__multiply>
 8008e0a:	6020      	str	r0, [r4, #0]
 8008e0c:	f8c0 9000 	str.w	r9, [r0]
 8008e10:	4604      	mov	r4, r0
 8008e12:	e7e4      	b.n	8008dde <__pow5mult+0x6a>
 8008e14:	4638      	mov	r0, r7
 8008e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e1a:	bf00      	nop
 8008e1c:	0800b5d8 	.word	0x0800b5d8
 8008e20:	0800b405 	.word	0x0800b405
 8008e24:	0800b488 	.word	0x0800b488

08008e28 <__lshift>:
 8008e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e2c:	460c      	mov	r4, r1
 8008e2e:	6849      	ldr	r1, [r1, #4]
 8008e30:	6923      	ldr	r3, [r4, #16]
 8008e32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008e36:	68a3      	ldr	r3, [r4, #8]
 8008e38:	4607      	mov	r7, r0
 8008e3a:	4691      	mov	r9, r2
 8008e3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008e40:	f108 0601 	add.w	r6, r8, #1
 8008e44:	42b3      	cmp	r3, r6
 8008e46:	db0b      	blt.n	8008e60 <__lshift+0x38>
 8008e48:	4638      	mov	r0, r7
 8008e4a:	f7ff fddb 	bl	8008a04 <_Balloc>
 8008e4e:	4605      	mov	r5, r0
 8008e50:	b948      	cbnz	r0, 8008e66 <__lshift+0x3e>
 8008e52:	4602      	mov	r2, r0
 8008e54:	4b2a      	ldr	r3, [pc, #168]	; (8008f00 <__lshift+0xd8>)
 8008e56:	482b      	ldr	r0, [pc, #172]	; (8008f04 <__lshift+0xdc>)
 8008e58:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008e5c:	f000 fa5c 	bl	8009318 <__assert_func>
 8008e60:	3101      	adds	r1, #1
 8008e62:	005b      	lsls	r3, r3, #1
 8008e64:	e7ee      	b.n	8008e44 <__lshift+0x1c>
 8008e66:	2300      	movs	r3, #0
 8008e68:	f100 0114 	add.w	r1, r0, #20
 8008e6c:	f100 0210 	add.w	r2, r0, #16
 8008e70:	4618      	mov	r0, r3
 8008e72:	4553      	cmp	r3, sl
 8008e74:	db37      	blt.n	8008ee6 <__lshift+0xbe>
 8008e76:	6920      	ldr	r0, [r4, #16]
 8008e78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e7c:	f104 0314 	add.w	r3, r4, #20
 8008e80:	f019 091f 	ands.w	r9, r9, #31
 8008e84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e88:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008e8c:	d02f      	beq.n	8008eee <__lshift+0xc6>
 8008e8e:	f1c9 0e20 	rsb	lr, r9, #32
 8008e92:	468a      	mov	sl, r1
 8008e94:	f04f 0c00 	mov.w	ip, #0
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	fa02 f209 	lsl.w	r2, r2, r9
 8008e9e:	ea42 020c 	orr.w	r2, r2, ip
 8008ea2:	f84a 2b04 	str.w	r2, [sl], #4
 8008ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008eaa:	4298      	cmp	r0, r3
 8008eac:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008eb0:	d8f2      	bhi.n	8008e98 <__lshift+0x70>
 8008eb2:	1b03      	subs	r3, r0, r4
 8008eb4:	3b15      	subs	r3, #21
 8008eb6:	f023 0303 	bic.w	r3, r3, #3
 8008eba:	3304      	adds	r3, #4
 8008ebc:	f104 0215 	add.w	r2, r4, #21
 8008ec0:	4290      	cmp	r0, r2
 8008ec2:	bf38      	it	cc
 8008ec4:	2304      	movcc	r3, #4
 8008ec6:	f841 c003 	str.w	ip, [r1, r3]
 8008eca:	f1bc 0f00 	cmp.w	ip, #0
 8008ece:	d001      	beq.n	8008ed4 <__lshift+0xac>
 8008ed0:	f108 0602 	add.w	r6, r8, #2
 8008ed4:	3e01      	subs	r6, #1
 8008ed6:	4638      	mov	r0, r7
 8008ed8:	612e      	str	r6, [r5, #16]
 8008eda:	4621      	mov	r1, r4
 8008edc:	f7ff fdd2 	bl	8008a84 <_Bfree>
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008eea:	3301      	adds	r3, #1
 8008eec:	e7c1      	b.n	8008e72 <__lshift+0x4a>
 8008eee:	3904      	subs	r1, #4
 8008ef0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ef8:	4298      	cmp	r0, r3
 8008efa:	d8f9      	bhi.n	8008ef0 <__lshift+0xc8>
 8008efc:	e7ea      	b.n	8008ed4 <__lshift+0xac>
 8008efe:	bf00      	nop
 8008f00:	0800b477 	.word	0x0800b477
 8008f04:	0800b488 	.word	0x0800b488

08008f08 <__mcmp>:
 8008f08:	b530      	push	{r4, r5, lr}
 8008f0a:	6902      	ldr	r2, [r0, #16]
 8008f0c:	690c      	ldr	r4, [r1, #16]
 8008f0e:	1b12      	subs	r2, r2, r4
 8008f10:	d10e      	bne.n	8008f30 <__mcmp+0x28>
 8008f12:	f100 0314 	add.w	r3, r0, #20
 8008f16:	3114      	adds	r1, #20
 8008f18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008f1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008f20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008f24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008f28:	42a5      	cmp	r5, r4
 8008f2a:	d003      	beq.n	8008f34 <__mcmp+0x2c>
 8008f2c:	d305      	bcc.n	8008f3a <__mcmp+0x32>
 8008f2e:	2201      	movs	r2, #1
 8008f30:	4610      	mov	r0, r2
 8008f32:	bd30      	pop	{r4, r5, pc}
 8008f34:	4283      	cmp	r3, r0
 8008f36:	d3f3      	bcc.n	8008f20 <__mcmp+0x18>
 8008f38:	e7fa      	b.n	8008f30 <__mcmp+0x28>
 8008f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3e:	e7f7      	b.n	8008f30 <__mcmp+0x28>

08008f40 <__mdiff>:
 8008f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f44:	460c      	mov	r4, r1
 8008f46:	4606      	mov	r6, r0
 8008f48:	4611      	mov	r1, r2
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	4690      	mov	r8, r2
 8008f4e:	f7ff ffdb 	bl	8008f08 <__mcmp>
 8008f52:	1e05      	subs	r5, r0, #0
 8008f54:	d110      	bne.n	8008f78 <__mdiff+0x38>
 8008f56:	4629      	mov	r1, r5
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f7ff fd53 	bl	8008a04 <_Balloc>
 8008f5e:	b930      	cbnz	r0, 8008f6e <__mdiff+0x2e>
 8008f60:	4b3a      	ldr	r3, [pc, #232]	; (800904c <__mdiff+0x10c>)
 8008f62:	4602      	mov	r2, r0
 8008f64:	f240 2132 	movw	r1, #562	; 0x232
 8008f68:	4839      	ldr	r0, [pc, #228]	; (8009050 <__mdiff+0x110>)
 8008f6a:	f000 f9d5 	bl	8009318 <__assert_func>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f78:	bfa4      	itt	ge
 8008f7a:	4643      	movge	r3, r8
 8008f7c:	46a0      	movge	r8, r4
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f84:	bfa6      	itte	ge
 8008f86:	461c      	movge	r4, r3
 8008f88:	2500      	movge	r5, #0
 8008f8a:	2501      	movlt	r5, #1
 8008f8c:	f7ff fd3a 	bl	8008a04 <_Balloc>
 8008f90:	b920      	cbnz	r0, 8008f9c <__mdiff+0x5c>
 8008f92:	4b2e      	ldr	r3, [pc, #184]	; (800904c <__mdiff+0x10c>)
 8008f94:	4602      	mov	r2, r0
 8008f96:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008f9a:	e7e5      	b.n	8008f68 <__mdiff+0x28>
 8008f9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008fa0:	6926      	ldr	r6, [r4, #16]
 8008fa2:	60c5      	str	r5, [r0, #12]
 8008fa4:	f104 0914 	add.w	r9, r4, #20
 8008fa8:	f108 0514 	add.w	r5, r8, #20
 8008fac:	f100 0e14 	add.w	lr, r0, #20
 8008fb0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008fb4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008fb8:	f108 0210 	add.w	r2, r8, #16
 8008fbc:	46f2      	mov	sl, lr
 8008fbe:	2100      	movs	r1, #0
 8008fc0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008fc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008fc8:	fa1f f883 	uxth.w	r8, r3
 8008fcc:	fa11 f18b 	uxtah	r1, r1, fp
 8008fd0:	0c1b      	lsrs	r3, r3, #16
 8008fd2:	eba1 0808 	sub.w	r8, r1, r8
 8008fd6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008fda:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008fde:	fa1f f888 	uxth.w	r8, r8
 8008fe2:	1419      	asrs	r1, r3, #16
 8008fe4:	454e      	cmp	r6, r9
 8008fe6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008fea:	f84a 3b04 	str.w	r3, [sl], #4
 8008fee:	d8e7      	bhi.n	8008fc0 <__mdiff+0x80>
 8008ff0:	1b33      	subs	r3, r6, r4
 8008ff2:	3b15      	subs	r3, #21
 8008ff4:	f023 0303 	bic.w	r3, r3, #3
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	3415      	adds	r4, #21
 8008ffc:	42a6      	cmp	r6, r4
 8008ffe:	bf38      	it	cc
 8009000:	2304      	movcc	r3, #4
 8009002:	441d      	add	r5, r3
 8009004:	4473      	add	r3, lr
 8009006:	469e      	mov	lr, r3
 8009008:	462e      	mov	r6, r5
 800900a:	4566      	cmp	r6, ip
 800900c:	d30e      	bcc.n	800902c <__mdiff+0xec>
 800900e:	f10c 0203 	add.w	r2, ip, #3
 8009012:	1b52      	subs	r2, r2, r5
 8009014:	f022 0203 	bic.w	r2, r2, #3
 8009018:	3d03      	subs	r5, #3
 800901a:	45ac      	cmp	ip, r5
 800901c:	bf38      	it	cc
 800901e:	2200      	movcc	r2, #0
 8009020:	441a      	add	r2, r3
 8009022:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009026:	b17b      	cbz	r3, 8009048 <__mdiff+0x108>
 8009028:	6107      	str	r7, [r0, #16]
 800902a:	e7a3      	b.n	8008f74 <__mdiff+0x34>
 800902c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009030:	fa11 f288 	uxtah	r2, r1, r8
 8009034:	1414      	asrs	r4, r2, #16
 8009036:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800903a:	b292      	uxth	r2, r2
 800903c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009040:	f84e 2b04 	str.w	r2, [lr], #4
 8009044:	1421      	asrs	r1, r4, #16
 8009046:	e7e0      	b.n	800900a <__mdiff+0xca>
 8009048:	3f01      	subs	r7, #1
 800904a:	e7ea      	b.n	8009022 <__mdiff+0xe2>
 800904c:	0800b477 	.word	0x0800b477
 8009050:	0800b488 	.word	0x0800b488

08009054 <__d2b>:
 8009054:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009058:	4689      	mov	r9, r1
 800905a:	2101      	movs	r1, #1
 800905c:	ec57 6b10 	vmov	r6, r7, d0
 8009060:	4690      	mov	r8, r2
 8009062:	f7ff fccf 	bl	8008a04 <_Balloc>
 8009066:	4604      	mov	r4, r0
 8009068:	b930      	cbnz	r0, 8009078 <__d2b+0x24>
 800906a:	4602      	mov	r2, r0
 800906c:	4b25      	ldr	r3, [pc, #148]	; (8009104 <__d2b+0xb0>)
 800906e:	4826      	ldr	r0, [pc, #152]	; (8009108 <__d2b+0xb4>)
 8009070:	f240 310a 	movw	r1, #778	; 0x30a
 8009074:	f000 f950 	bl	8009318 <__assert_func>
 8009078:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800907c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009080:	bb35      	cbnz	r5, 80090d0 <__d2b+0x7c>
 8009082:	2e00      	cmp	r6, #0
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	d028      	beq.n	80090da <__d2b+0x86>
 8009088:	4668      	mov	r0, sp
 800908a:	9600      	str	r6, [sp, #0]
 800908c:	f7ff fd82 	bl	8008b94 <__lo0bits>
 8009090:	9900      	ldr	r1, [sp, #0]
 8009092:	b300      	cbz	r0, 80090d6 <__d2b+0x82>
 8009094:	9a01      	ldr	r2, [sp, #4]
 8009096:	f1c0 0320 	rsb	r3, r0, #32
 800909a:	fa02 f303 	lsl.w	r3, r2, r3
 800909e:	430b      	orrs	r3, r1
 80090a0:	40c2      	lsrs	r2, r0
 80090a2:	6163      	str	r3, [r4, #20]
 80090a4:	9201      	str	r2, [sp, #4]
 80090a6:	9b01      	ldr	r3, [sp, #4]
 80090a8:	61a3      	str	r3, [r4, #24]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	bf14      	ite	ne
 80090ae:	2202      	movne	r2, #2
 80090b0:	2201      	moveq	r2, #1
 80090b2:	6122      	str	r2, [r4, #16]
 80090b4:	b1d5      	cbz	r5, 80090ec <__d2b+0x98>
 80090b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80090ba:	4405      	add	r5, r0
 80090bc:	f8c9 5000 	str.w	r5, [r9]
 80090c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80090c4:	f8c8 0000 	str.w	r0, [r8]
 80090c8:	4620      	mov	r0, r4
 80090ca:	b003      	add	sp, #12
 80090cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090d4:	e7d5      	b.n	8009082 <__d2b+0x2e>
 80090d6:	6161      	str	r1, [r4, #20]
 80090d8:	e7e5      	b.n	80090a6 <__d2b+0x52>
 80090da:	a801      	add	r0, sp, #4
 80090dc:	f7ff fd5a 	bl	8008b94 <__lo0bits>
 80090e0:	9b01      	ldr	r3, [sp, #4]
 80090e2:	6163      	str	r3, [r4, #20]
 80090e4:	2201      	movs	r2, #1
 80090e6:	6122      	str	r2, [r4, #16]
 80090e8:	3020      	adds	r0, #32
 80090ea:	e7e3      	b.n	80090b4 <__d2b+0x60>
 80090ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80090f4:	f8c9 0000 	str.w	r0, [r9]
 80090f8:	6918      	ldr	r0, [r3, #16]
 80090fa:	f7ff fd2b 	bl	8008b54 <__hi0bits>
 80090fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009102:	e7df      	b.n	80090c4 <__d2b+0x70>
 8009104:	0800b477 	.word	0x0800b477
 8009108:	0800b488 	.word	0x0800b488

0800910c <_calloc_r>:
 800910c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800910e:	fba1 2402 	umull	r2, r4, r1, r2
 8009112:	b94c      	cbnz	r4, 8009128 <_calloc_r+0x1c>
 8009114:	4611      	mov	r1, r2
 8009116:	9201      	str	r2, [sp, #4]
 8009118:	f000 f87a 	bl	8009210 <_malloc_r>
 800911c:	9a01      	ldr	r2, [sp, #4]
 800911e:	4605      	mov	r5, r0
 8009120:	b930      	cbnz	r0, 8009130 <_calloc_r+0x24>
 8009122:	4628      	mov	r0, r5
 8009124:	b003      	add	sp, #12
 8009126:	bd30      	pop	{r4, r5, pc}
 8009128:	220c      	movs	r2, #12
 800912a:	6002      	str	r2, [r0, #0]
 800912c:	2500      	movs	r5, #0
 800912e:	e7f8      	b.n	8009122 <_calloc_r+0x16>
 8009130:	4621      	mov	r1, r4
 8009132:	f7fe f96f 	bl	8007414 <memset>
 8009136:	e7f4      	b.n	8009122 <_calloc_r+0x16>

08009138 <_free_r>:
 8009138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800913a:	2900      	cmp	r1, #0
 800913c:	d044      	beq.n	80091c8 <_free_r+0x90>
 800913e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009142:	9001      	str	r0, [sp, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	f1a1 0404 	sub.w	r4, r1, #4
 800914a:	bfb8      	it	lt
 800914c:	18e4      	addlt	r4, r4, r3
 800914e:	f000 f925 	bl	800939c <__malloc_lock>
 8009152:	4a1e      	ldr	r2, [pc, #120]	; (80091cc <_free_r+0x94>)
 8009154:	9801      	ldr	r0, [sp, #4]
 8009156:	6813      	ldr	r3, [r2, #0]
 8009158:	b933      	cbnz	r3, 8009168 <_free_r+0x30>
 800915a:	6063      	str	r3, [r4, #4]
 800915c:	6014      	str	r4, [r2, #0]
 800915e:	b003      	add	sp, #12
 8009160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009164:	f000 b920 	b.w	80093a8 <__malloc_unlock>
 8009168:	42a3      	cmp	r3, r4
 800916a:	d908      	bls.n	800917e <_free_r+0x46>
 800916c:	6825      	ldr	r5, [r4, #0]
 800916e:	1961      	adds	r1, r4, r5
 8009170:	428b      	cmp	r3, r1
 8009172:	bf01      	itttt	eq
 8009174:	6819      	ldreq	r1, [r3, #0]
 8009176:	685b      	ldreq	r3, [r3, #4]
 8009178:	1949      	addeq	r1, r1, r5
 800917a:	6021      	streq	r1, [r4, #0]
 800917c:	e7ed      	b.n	800915a <_free_r+0x22>
 800917e:	461a      	mov	r2, r3
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	b10b      	cbz	r3, 8009188 <_free_r+0x50>
 8009184:	42a3      	cmp	r3, r4
 8009186:	d9fa      	bls.n	800917e <_free_r+0x46>
 8009188:	6811      	ldr	r1, [r2, #0]
 800918a:	1855      	adds	r5, r2, r1
 800918c:	42a5      	cmp	r5, r4
 800918e:	d10b      	bne.n	80091a8 <_free_r+0x70>
 8009190:	6824      	ldr	r4, [r4, #0]
 8009192:	4421      	add	r1, r4
 8009194:	1854      	adds	r4, r2, r1
 8009196:	42a3      	cmp	r3, r4
 8009198:	6011      	str	r1, [r2, #0]
 800919a:	d1e0      	bne.n	800915e <_free_r+0x26>
 800919c:	681c      	ldr	r4, [r3, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	6053      	str	r3, [r2, #4]
 80091a2:	4421      	add	r1, r4
 80091a4:	6011      	str	r1, [r2, #0]
 80091a6:	e7da      	b.n	800915e <_free_r+0x26>
 80091a8:	d902      	bls.n	80091b0 <_free_r+0x78>
 80091aa:	230c      	movs	r3, #12
 80091ac:	6003      	str	r3, [r0, #0]
 80091ae:	e7d6      	b.n	800915e <_free_r+0x26>
 80091b0:	6825      	ldr	r5, [r4, #0]
 80091b2:	1961      	adds	r1, r4, r5
 80091b4:	428b      	cmp	r3, r1
 80091b6:	bf04      	itt	eq
 80091b8:	6819      	ldreq	r1, [r3, #0]
 80091ba:	685b      	ldreq	r3, [r3, #4]
 80091bc:	6063      	str	r3, [r4, #4]
 80091be:	bf04      	itt	eq
 80091c0:	1949      	addeq	r1, r1, r5
 80091c2:	6021      	streq	r1, [r4, #0]
 80091c4:	6054      	str	r4, [r2, #4]
 80091c6:	e7ca      	b.n	800915e <_free_r+0x26>
 80091c8:	b003      	add	sp, #12
 80091ca:	bd30      	pop	{r4, r5, pc}
 80091cc:	200006ac 	.word	0x200006ac

080091d0 <sbrk_aligned>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	4e0e      	ldr	r6, [pc, #56]	; (800920c <sbrk_aligned+0x3c>)
 80091d4:	460c      	mov	r4, r1
 80091d6:	6831      	ldr	r1, [r6, #0]
 80091d8:	4605      	mov	r5, r0
 80091da:	b911      	cbnz	r1, 80091e2 <sbrk_aligned+0x12>
 80091dc:	f000 f88c 	bl	80092f8 <_sbrk_r>
 80091e0:	6030      	str	r0, [r6, #0]
 80091e2:	4621      	mov	r1, r4
 80091e4:	4628      	mov	r0, r5
 80091e6:	f000 f887 	bl	80092f8 <_sbrk_r>
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	d00a      	beq.n	8009204 <sbrk_aligned+0x34>
 80091ee:	1cc4      	adds	r4, r0, #3
 80091f0:	f024 0403 	bic.w	r4, r4, #3
 80091f4:	42a0      	cmp	r0, r4
 80091f6:	d007      	beq.n	8009208 <sbrk_aligned+0x38>
 80091f8:	1a21      	subs	r1, r4, r0
 80091fa:	4628      	mov	r0, r5
 80091fc:	f000 f87c 	bl	80092f8 <_sbrk_r>
 8009200:	3001      	adds	r0, #1
 8009202:	d101      	bne.n	8009208 <sbrk_aligned+0x38>
 8009204:	f04f 34ff 	mov.w	r4, #4294967295
 8009208:	4620      	mov	r0, r4
 800920a:	bd70      	pop	{r4, r5, r6, pc}
 800920c:	200006b0 	.word	0x200006b0

08009210 <_malloc_r>:
 8009210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009214:	1ccd      	adds	r5, r1, #3
 8009216:	f025 0503 	bic.w	r5, r5, #3
 800921a:	3508      	adds	r5, #8
 800921c:	2d0c      	cmp	r5, #12
 800921e:	bf38      	it	cc
 8009220:	250c      	movcc	r5, #12
 8009222:	2d00      	cmp	r5, #0
 8009224:	4607      	mov	r7, r0
 8009226:	db01      	blt.n	800922c <_malloc_r+0x1c>
 8009228:	42a9      	cmp	r1, r5
 800922a:	d905      	bls.n	8009238 <_malloc_r+0x28>
 800922c:	230c      	movs	r3, #12
 800922e:	603b      	str	r3, [r7, #0]
 8009230:	2600      	movs	r6, #0
 8009232:	4630      	mov	r0, r6
 8009234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009238:	4e2e      	ldr	r6, [pc, #184]	; (80092f4 <_malloc_r+0xe4>)
 800923a:	f000 f8af 	bl	800939c <__malloc_lock>
 800923e:	6833      	ldr	r3, [r6, #0]
 8009240:	461c      	mov	r4, r3
 8009242:	bb34      	cbnz	r4, 8009292 <_malloc_r+0x82>
 8009244:	4629      	mov	r1, r5
 8009246:	4638      	mov	r0, r7
 8009248:	f7ff ffc2 	bl	80091d0 <sbrk_aligned>
 800924c:	1c43      	adds	r3, r0, #1
 800924e:	4604      	mov	r4, r0
 8009250:	d14d      	bne.n	80092ee <_malloc_r+0xde>
 8009252:	6834      	ldr	r4, [r6, #0]
 8009254:	4626      	mov	r6, r4
 8009256:	2e00      	cmp	r6, #0
 8009258:	d140      	bne.n	80092dc <_malloc_r+0xcc>
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	4631      	mov	r1, r6
 800925e:	4638      	mov	r0, r7
 8009260:	eb04 0803 	add.w	r8, r4, r3
 8009264:	f000 f848 	bl	80092f8 <_sbrk_r>
 8009268:	4580      	cmp	r8, r0
 800926a:	d13a      	bne.n	80092e2 <_malloc_r+0xd2>
 800926c:	6821      	ldr	r1, [r4, #0]
 800926e:	3503      	adds	r5, #3
 8009270:	1a6d      	subs	r5, r5, r1
 8009272:	f025 0503 	bic.w	r5, r5, #3
 8009276:	3508      	adds	r5, #8
 8009278:	2d0c      	cmp	r5, #12
 800927a:	bf38      	it	cc
 800927c:	250c      	movcc	r5, #12
 800927e:	4629      	mov	r1, r5
 8009280:	4638      	mov	r0, r7
 8009282:	f7ff ffa5 	bl	80091d0 <sbrk_aligned>
 8009286:	3001      	adds	r0, #1
 8009288:	d02b      	beq.n	80092e2 <_malloc_r+0xd2>
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	442b      	add	r3, r5
 800928e:	6023      	str	r3, [r4, #0]
 8009290:	e00e      	b.n	80092b0 <_malloc_r+0xa0>
 8009292:	6822      	ldr	r2, [r4, #0]
 8009294:	1b52      	subs	r2, r2, r5
 8009296:	d41e      	bmi.n	80092d6 <_malloc_r+0xc6>
 8009298:	2a0b      	cmp	r2, #11
 800929a:	d916      	bls.n	80092ca <_malloc_r+0xba>
 800929c:	1961      	adds	r1, r4, r5
 800929e:	42a3      	cmp	r3, r4
 80092a0:	6025      	str	r5, [r4, #0]
 80092a2:	bf18      	it	ne
 80092a4:	6059      	strne	r1, [r3, #4]
 80092a6:	6863      	ldr	r3, [r4, #4]
 80092a8:	bf08      	it	eq
 80092aa:	6031      	streq	r1, [r6, #0]
 80092ac:	5162      	str	r2, [r4, r5]
 80092ae:	604b      	str	r3, [r1, #4]
 80092b0:	4638      	mov	r0, r7
 80092b2:	f104 060b 	add.w	r6, r4, #11
 80092b6:	f000 f877 	bl	80093a8 <__malloc_unlock>
 80092ba:	f026 0607 	bic.w	r6, r6, #7
 80092be:	1d23      	adds	r3, r4, #4
 80092c0:	1af2      	subs	r2, r6, r3
 80092c2:	d0b6      	beq.n	8009232 <_malloc_r+0x22>
 80092c4:	1b9b      	subs	r3, r3, r6
 80092c6:	50a3      	str	r3, [r4, r2]
 80092c8:	e7b3      	b.n	8009232 <_malloc_r+0x22>
 80092ca:	6862      	ldr	r2, [r4, #4]
 80092cc:	42a3      	cmp	r3, r4
 80092ce:	bf0c      	ite	eq
 80092d0:	6032      	streq	r2, [r6, #0]
 80092d2:	605a      	strne	r2, [r3, #4]
 80092d4:	e7ec      	b.n	80092b0 <_malloc_r+0xa0>
 80092d6:	4623      	mov	r3, r4
 80092d8:	6864      	ldr	r4, [r4, #4]
 80092da:	e7b2      	b.n	8009242 <_malloc_r+0x32>
 80092dc:	4634      	mov	r4, r6
 80092de:	6876      	ldr	r6, [r6, #4]
 80092e0:	e7b9      	b.n	8009256 <_malloc_r+0x46>
 80092e2:	230c      	movs	r3, #12
 80092e4:	603b      	str	r3, [r7, #0]
 80092e6:	4638      	mov	r0, r7
 80092e8:	f000 f85e 	bl	80093a8 <__malloc_unlock>
 80092ec:	e7a1      	b.n	8009232 <_malloc_r+0x22>
 80092ee:	6025      	str	r5, [r4, #0]
 80092f0:	e7de      	b.n	80092b0 <_malloc_r+0xa0>
 80092f2:	bf00      	nop
 80092f4:	200006ac 	.word	0x200006ac

080092f8 <_sbrk_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d06      	ldr	r5, [pc, #24]	; (8009314 <_sbrk_r+0x1c>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	f002 f81e 	bl	800b344 <_sbrk>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_sbrk_r+0x1a>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_sbrk_r+0x1a>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	200006b4 	.word	0x200006b4

08009318 <__assert_func>:
 8009318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800931a:	4614      	mov	r4, r2
 800931c:	461a      	mov	r2, r3
 800931e:	4b09      	ldr	r3, [pc, #36]	; (8009344 <__assert_func+0x2c>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4605      	mov	r5, r0
 8009324:	68d8      	ldr	r0, [r3, #12]
 8009326:	b14c      	cbz	r4, 800933c <__assert_func+0x24>
 8009328:	4b07      	ldr	r3, [pc, #28]	; (8009348 <__assert_func+0x30>)
 800932a:	9100      	str	r1, [sp, #0]
 800932c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009330:	4906      	ldr	r1, [pc, #24]	; (800934c <__assert_func+0x34>)
 8009332:	462b      	mov	r3, r5
 8009334:	f000 f80e 	bl	8009354 <fiprintf>
 8009338:	f000 fa64 	bl	8009804 <abort>
 800933c:	4b04      	ldr	r3, [pc, #16]	; (8009350 <__assert_func+0x38>)
 800933e:	461c      	mov	r4, r3
 8009340:	e7f3      	b.n	800932a <__assert_func+0x12>
 8009342:	bf00      	nop
 8009344:	20000014 	.word	0x20000014
 8009348:	0800b5e4 	.word	0x0800b5e4
 800934c:	0800b5f1 	.word	0x0800b5f1
 8009350:	0800b61f 	.word	0x0800b61f

08009354 <fiprintf>:
 8009354:	b40e      	push	{r1, r2, r3}
 8009356:	b503      	push	{r0, r1, lr}
 8009358:	4601      	mov	r1, r0
 800935a:	ab03      	add	r3, sp, #12
 800935c:	4805      	ldr	r0, [pc, #20]	; (8009374 <fiprintf+0x20>)
 800935e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009362:	6800      	ldr	r0, [r0, #0]
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	f000 f84f 	bl	8009408 <_vfiprintf_r>
 800936a:	b002      	add	sp, #8
 800936c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009370:	b003      	add	sp, #12
 8009372:	4770      	bx	lr
 8009374:	20000014 	.word	0x20000014

08009378 <__ascii_mbtowc>:
 8009378:	b082      	sub	sp, #8
 800937a:	b901      	cbnz	r1, 800937e <__ascii_mbtowc+0x6>
 800937c:	a901      	add	r1, sp, #4
 800937e:	b142      	cbz	r2, 8009392 <__ascii_mbtowc+0x1a>
 8009380:	b14b      	cbz	r3, 8009396 <__ascii_mbtowc+0x1e>
 8009382:	7813      	ldrb	r3, [r2, #0]
 8009384:	600b      	str	r3, [r1, #0]
 8009386:	7812      	ldrb	r2, [r2, #0]
 8009388:	1e10      	subs	r0, r2, #0
 800938a:	bf18      	it	ne
 800938c:	2001      	movne	r0, #1
 800938e:	b002      	add	sp, #8
 8009390:	4770      	bx	lr
 8009392:	4610      	mov	r0, r2
 8009394:	e7fb      	b.n	800938e <__ascii_mbtowc+0x16>
 8009396:	f06f 0001 	mvn.w	r0, #1
 800939a:	e7f8      	b.n	800938e <__ascii_mbtowc+0x16>

0800939c <__malloc_lock>:
 800939c:	4801      	ldr	r0, [pc, #4]	; (80093a4 <__malloc_lock+0x8>)
 800939e:	f000 bbf1 	b.w	8009b84 <__retarget_lock_acquire_recursive>
 80093a2:	bf00      	nop
 80093a4:	200006b8 	.word	0x200006b8

080093a8 <__malloc_unlock>:
 80093a8:	4801      	ldr	r0, [pc, #4]	; (80093b0 <__malloc_unlock+0x8>)
 80093aa:	f000 bbec 	b.w	8009b86 <__retarget_lock_release_recursive>
 80093ae:	bf00      	nop
 80093b0:	200006b8 	.word	0x200006b8

080093b4 <__sfputc_r>:
 80093b4:	6893      	ldr	r3, [r2, #8]
 80093b6:	3b01      	subs	r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	b410      	push	{r4}
 80093bc:	6093      	str	r3, [r2, #8]
 80093be:	da08      	bge.n	80093d2 <__sfputc_r+0x1e>
 80093c0:	6994      	ldr	r4, [r2, #24]
 80093c2:	42a3      	cmp	r3, r4
 80093c4:	db01      	blt.n	80093ca <__sfputc_r+0x16>
 80093c6:	290a      	cmp	r1, #10
 80093c8:	d103      	bne.n	80093d2 <__sfputc_r+0x1e>
 80093ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093ce:	f000 b94b 	b.w	8009668 <__swbuf_r>
 80093d2:	6813      	ldr	r3, [r2, #0]
 80093d4:	1c58      	adds	r0, r3, #1
 80093d6:	6010      	str	r0, [r2, #0]
 80093d8:	7019      	strb	r1, [r3, #0]
 80093da:	4608      	mov	r0, r1
 80093dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <__sfputs_r>:
 80093e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e4:	4606      	mov	r6, r0
 80093e6:	460f      	mov	r7, r1
 80093e8:	4614      	mov	r4, r2
 80093ea:	18d5      	adds	r5, r2, r3
 80093ec:	42ac      	cmp	r4, r5
 80093ee:	d101      	bne.n	80093f4 <__sfputs_r+0x12>
 80093f0:	2000      	movs	r0, #0
 80093f2:	e007      	b.n	8009404 <__sfputs_r+0x22>
 80093f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f8:	463a      	mov	r2, r7
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7ff ffda 	bl	80093b4 <__sfputc_r>
 8009400:	1c43      	adds	r3, r0, #1
 8009402:	d1f3      	bne.n	80093ec <__sfputs_r+0xa>
 8009404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009408 <_vfiprintf_r>:
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	460d      	mov	r5, r1
 800940e:	b09d      	sub	sp, #116	; 0x74
 8009410:	4614      	mov	r4, r2
 8009412:	4698      	mov	r8, r3
 8009414:	4606      	mov	r6, r0
 8009416:	b118      	cbz	r0, 8009420 <_vfiprintf_r+0x18>
 8009418:	6983      	ldr	r3, [r0, #24]
 800941a:	b90b      	cbnz	r3, 8009420 <_vfiprintf_r+0x18>
 800941c:	f000 fb14 	bl	8009a48 <__sinit>
 8009420:	4b89      	ldr	r3, [pc, #548]	; (8009648 <_vfiprintf_r+0x240>)
 8009422:	429d      	cmp	r5, r3
 8009424:	d11b      	bne.n	800945e <_vfiprintf_r+0x56>
 8009426:	6875      	ldr	r5, [r6, #4]
 8009428:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800942a:	07d9      	lsls	r1, r3, #31
 800942c:	d405      	bmi.n	800943a <_vfiprintf_r+0x32>
 800942e:	89ab      	ldrh	r3, [r5, #12]
 8009430:	059a      	lsls	r2, r3, #22
 8009432:	d402      	bmi.n	800943a <_vfiprintf_r+0x32>
 8009434:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009436:	f000 fba5 	bl	8009b84 <__retarget_lock_acquire_recursive>
 800943a:	89ab      	ldrh	r3, [r5, #12]
 800943c:	071b      	lsls	r3, r3, #28
 800943e:	d501      	bpl.n	8009444 <_vfiprintf_r+0x3c>
 8009440:	692b      	ldr	r3, [r5, #16]
 8009442:	b9eb      	cbnz	r3, 8009480 <_vfiprintf_r+0x78>
 8009444:	4629      	mov	r1, r5
 8009446:	4630      	mov	r0, r6
 8009448:	f000 f96e 	bl	8009728 <__swsetup_r>
 800944c:	b1c0      	cbz	r0, 8009480 <_vfiprintf_r+0x78>
 800944e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009450:	07dc      	lsls	r4, r3, #31
 8009452:	d50e      	bpl.n	8009472 <_vfiprintf_r+0x6a>
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	b01d      	add	sp, #116	; 0x74
 800945a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945e:	4b7b      	ldr	r3, [pc, #492]	; (800964c <_vfiprintf_r+0x244>)
 8009460:	429d      	cmp	r5, r3
 8009462:	d101      	bne.n	8009468 <_vfiprintf_r+0x60>
 8009464:	68b5      	ldr	r5, [r6, #8]
 8009466:	e7df      	b.n	8009428 <_vfiprintf_r+0x20>
 8009468:	4b79      	ldr	r3, [pc, #484]	; (8009650 <_vfiprintf_r+0x248>)
 800946a:	429d      	cmp	r5, r3
 800946c:	bf08      	it	eq
 800946e:	68f5      	ldreq	r5, [r6, #12]
 8009470:	e7da      	b.n	8009428 <_vfiprintf_r+0x20>
 8009472:	89ab      	ldrh	r3, [r5, #12]
 8009474:	0598      	lsls	r0, r3, #22
 8009476:	d4ed      	bmi.n	8009454 <_vfiprintf_r+0x4c>
 8009478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800947a:	f000 fb84 	bl	8009b86 <__retarget_lock_release_recursive>
 800947e:	e7e9      	b.n	8009454 <_vfiprintf_r+0x4c>
 8009480:	2300      	movs	r3, #0
 8009482:	9309      	str	r3, [sp, #36]	; 0x24
 8009484:	2320      	movs	r3, #32
 8009486:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800948a:	f8cd 800c 	str.w	r8, [sp, #12]
 800948e:	2330      	movs	r3, #48	; 0x30
 8009490:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009654 <_vfiprintf_r+0x24c>
 8009494:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009498:	f04f 0901 	mov.w	r9, #1
 800949c:	4623      	mov	r3, r4
 800949e:	469a      	mov	sl, r3
 80094a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094a4:	b10a      	cbz	r2, 80094aa <_vfiprintf_r+0xa2>
 80094a6:	2a25      	cmp	r2, #37	; 0x25
 80094a8:	d1f9      	bne.n	800949e <_vfiprintf_r+0x96>
 80094aa:	ebba 0b04 	subs.w	fp, sl, r4
 80094ae:	d00b      	beq.n	80094c8 <_vfiprintf_r+0xc0>
 80094b0:	465b      	mov	r3, fp
 80094b2:	4622      	mov	r2, r4
 80094b4:	4629      	mov	r1, r5
 80094b6:	4630      	mov	r0, r6
 80094b8:	f7ff ff93 	bl	80093e2 <__sfputs_r>
 80094bc:	3001      	adds	r0, #1
 80094be:	f000 80aa 	beq.w	8009616 <_vfiprintf_r+0x20e>
 80094c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094c4:	445a      	add	r2, fp
 80094c6:	9209      	str	r2, [sp, #36]	; 0x24
 80094c8:	f89a 3000 	ldrb.w	r3, [sl]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 80a2 	beq.w	8009616 <_vfiprintf_r+0x20e>
 80094d2:	2300      	movs	r3, #0
 80094d4:	f04f 32ff 	mov.w	r2, #4294967295
 80094d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094dc:	f10a 0a01 	add.w	sl, sl, #1
 80094e0:	9304      	str	r3, [sp, #16]
 80094e2:	9307      	str	r3, [sp, #28]
 80094e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094e8:	931a      	str	r3, [sp, #104]	; 0x68
 80094ea:	4654      	mov	r4, sl
 80094ec:	2205      	movs	r2, #5
 80094ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f2:	4858      	ldr	r0, [pc, #352]	; (8009654 <_vfiprintf_r+0x24c>)
 80094f4:	f7f6 fe94 	bl	8000220 <memchr>
 80094f8:	9a04      	ldr	r2, [sp, #16]
 80094fa:	b9d8      	cbnz	r0, 8009534 <_vfiprintf_r+0x12c>
 80094fc:	06d1      	lsls	r1, r2, #27
 80094fe:	bf44      	itt	mi
 8009500:	2320      	movmi	r3, #32
 8009502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009506:	0713      	lsls	r3, r2, #28
 8009508:	bf44      	itt	mi
 800950a:	232b      	movmi	r3, #43	; 0x2b
 800950c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009510:	f89a 3000 	ldrb.w	r3, [sl]
 8009514:	2b2a      	cmp	r3, #42	; 0x2a
 8009516:	d015      	beq.n	8009544 <_vfiprintf_r+0x13c>
 8009518:	9a07      	ldr	r2, [sp, #28]
 800951a:	4654      	mov	r4, sl
 800951c:	2000      	movs	r0, #0
 800951e:	f04f 0c0a 	mov.w	ip, #10
 8009522:	4621      	mov	r1, r4
 8009524:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009528:	3b30      	subs	r3, #48	; 0x30
 800952a:	2b09      	cmp	r3, #9
 800952c:	d94e      	bls.n	80095cc <_vfiprintf_r+0x1c4>
 800952e:	b1b0      	cbz	r0, 800955e <_vfiprintf_r+0x156>
 8009530:	9207      	str	r2, [sp, #28]
 8009532:	e014      	b.n	800955e <_vfiprintf_r+0x156>
 8009534:	eba0 0308 	sub.w	r3, r0, r8
 8009538:	fa09 f303 	lsl.w	r3, r9, r3
 800953c:	4313      	orrs	r3, r2
 800953e:	9304      	str	r3, [sp, #16]
 8009540:	46a2      	mov	sl, r4
 8009542:	e7d2      	b.n	80094ea <_vfiprintf_r+0xe2>
 8009544:	9b03      	ldr	r3, [sp, #12]
 8009546:	1d19      	adds	r1, r3, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	9103      	str	r1, [sp, #12]
 800954c:	2b00      	cmp	r3, #0
 800954e:	bfbb      	ittet	lt
 8009550:	425b      	neglt	r3, r3
 8009552:	f042 0202 	orrlt.w	r2, r2, #2
 8009556:	9307      	strge	r3, [sp, #28]
 8009558:	9307      	strlt	r3, [sp, #28]
 800955a:	bfb8      	it	lt
 800955c:	9204      	strlt	r2, [sp, #16]
 800955e:	7823      	ldrb	r3, [r4, #0]
 8009560:	2b2e      	cmp	r3, #46	; 0x2e
 8009562:	d10c      	bne.n	800957e <_vfiprintf_r+0x176>
 8009564:	7863      	ldrb	r3, [r4, #1]
 8009566:	2b2a      	cmp	r3, #42	; 0x2a
 8009568:	d135      	bne.n	80095d6 <_vfiprintf_r+0x1ce>
 800956a:	9b03      	ldr	r3, [sp, #12]
 800956c:	1d1a      	adds	r2, r3, #4
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	9203      	str	r2, [sp, #12]
 8009572:	2b00      	cmp	r3, #0
 8009574:	bfb8      	it	lt
 8009576:	f04f 33ff 	movlt.w	r3, #4294967295
 800957a:	3402      	adds	r4, #2
 800957c:	9305      	str	r3, [sp, #20]
 800957e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009664 <_vfiprintf_r+0x25c>
 8009582:	7821      	ldrb	r1, [r4, #0]
 8009584:	2203      	movs	r2, #3
 8009586:	4650      	mov	r0, sl
 8009588:	f7f6 fe4a 	bl	8000220 <memchr>
 800958c:	b140      	cbz	r0, 80095a0 <_vfiprintf_r+0x198>
 800958e:	2340      	movs	r3, #64	; 0x40
 8009590:	eba0 000a 	sub.w	r0, r0, sl
 8009594:	fa03 f000 	lsl.w	r0, r3, r0
 8009598:	9b04      	ldr	r3, [sp, #16]
 800959a:	4303      	orrs	r3, r0
 800959c:	3401      	adds	r4, #1
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a4:	482c      	ldr	r0, [pc, #176]	; (8009658 <_vfiprintf_r+0x250>)
 80095a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095aa:	2206      	movs	r2, #6
 80095ac:	f7f6 fe38 	bl	8000220 <memchr>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	d03f      	beq.n	8009634 <_vfiprintf_r+0x22c>
 80095b4:	4b29      	ldr	r3, [pc, #164]	; (800965c <_vfiprintf_r+0x254>)
 80095b6:	bb1b      	cbnz	r3, 8009600 <_vfiprintf_r+0x1f8>
 80095b8:	9b03      	ldr	r3, [sp, #12]
 80095ba:	3307      	adds	r3, #7
 80095bc:	f023 0307 	bic.w	r3, r3, #7
 80095c0:	3308      	adds	r3, #8
 80095c2:	9303      	str	r3, [sp, #12]
 80095c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c6:	443b      	add	r3, r7
 80095c8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ca:	e767      	b.n	800949c <_vfiprintf_r+0x94>
 80095cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80095d0:	460c      	mov	r4, r1
 80095d2:	2001      	movs	r0, #1
 80095d4:	e7a5      	b.n	8009522 <_vfiprintf_r+0x11a>
 80095d6:	2300      	movs	r3, #0
 80095d8:	3401      	adds	r4, #1
 80095da:	9305      	str	r3, [sp, #20]
 80095dc:	4619      	mov	r1, r3
 80095de:	f04f 0c0a 	mov.w	ip, #10
 80095e2:	4620      	mov	r0, r4
 80095e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095e8:	3a30      	subs	r2, #48	; 0x30
 80095ea:	2a09      	cmp	r2, #9
 80095ec:	d903      	bls.n	80095f6 <_vfiprintf_r+0x1ee>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0c5      	beq.n	800957e <_vfiprintf_r+0x176>
 80095f2:	9105      	str	r1, [sp, #20]
 80095f4:	e7c3      	b.n	800957e <_vfiprintf_r+0x176>
 80095f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80095fa:	4604      	mov	r4, r0
 80095fc:	2301      	movs	r3, #1
 80095fe:	e7f0      	b.n	80095e2 <_vfiprintf_r+0x1da>
 8009600:	ab03      	add	r3, sp, #12
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	462a      	mov	r2, r5
 8009606:	4b16      	ldr	r3, [pc, #88]	; (8009660 <_vfiprintf_r+0x258>)
 8009608:	a904      	add	r1, sp, #16
 800960a:	4630      	mov	r0, r6
 800960c:	f7fd ffaa 	bl	8007564 <_printf_float>
 8009610:	4607      	mov	r7, r0
 8009612:	1c78      	adds	r0, r7, #1
 8009614:	d1d6      	bne.n	80095c4 <_vfiprintf_r+0x1bc>
 8009616:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009618:	07d9      	lsls	r1, r3, #31
 800961a:	d405      	bmi.n	8009628 <_vfiprintf_r+0x220>
 800961c:	89ab      	ldrh	r3, [r5, #12]
 800961e:	059a      	lsls	r2, r3, #22
 8009620:	d402      	bmi.n	8009628 <_vfiprintf_r+0x220>
 8009622:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009624:	f000 faaf 	bl	8009b86 <__retarget_lock_release_recursive>
 8009628:	89ab      	ldrh	r3, [r5, #12]
 800962a:	065b      	lsls	r3, r3, #25
 800962c:	f53f af12 	bmi.w	8009454 <_vfiprintf_r+0x4c>
 8009630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009632:	e711      	b.n	8009458 <_vfiprintf_r+0x50>
 8009634:	ab03      	add	r3, sp, #12
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	462a      	mov	r2, r5
 800963a:	4b09      	ldr	r3, [pc, #36]	; (8009660 <_vfiprintf_r+0x258>)
 800963c:	a904      	add	r1, sp, #16
 800963e:	4630      	mov	r0, r6
 8009640:	f7fe fa34 	bl	8007aac <_printf_i>
 8009644:	e7e4      	b.n	8009610 <_vfiprintf_r+0x208>
 8009646:	bf00      	nop
 8009648:	0800b75c 	.word	0x0800b75c
 800964c:	0800b77c 	.word	0x0800b77c
 8009650:	0800b73c 	.word	0x0800b73c
 8009654:	0800b62a 	.word	0x0800b62a
 8009658:	0800b634 	.word	0x0800b634
 800965c:	08007565 	.word	0x08007565
 8009660:	080093e3 	.word	0x080093e3
 8009664:	0800b630 	.word	0x0800b630

08009668 <__swbuf_r>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	460e      	mov	r6, r1
 800966c:	4614      	mov	r4, r2
 800966e:	4605      	mov	r5, r0
 8009670:	b118      	cbz	r0, 800967a <__swbuf_r+0x12>
 8009672:	6983      	ldr	r3, [r0, #24]
 8009674:	b90b      	cbnz	r3, 800967a <__swbuf_r+0x12>
 8009676:	f000 f9e7 	bl	8009a48 <__sinit>
 800967a:	4b21      	ldr	r3, [pc, #132]	; (8009700 <__swbuf_r+0x98>)
 800967c:	429c      	cmp	r4, r3
 800967e:	d12b      	bne.n	80096d8 <__swbuf_r+0x70>
 8009680:	686c      	ldr	r4, [r5, #4]
 8009682:	69a3      	ldr	r3, [r4, #24]
 8009684:	60a3      	str	r3, [r4, #8]
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	071a      	lsls	r2, r3, #28
 800968a:	d52f      	bpl.n	80096ec <__swbuf_r+0x84>
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	b36b      	cbz	r3, 80096ec <__swbuf_r+0x84>
 8009690:	6923      	ldr	r3, [r4, #16]
 8009692:	6820      	ldr	r0, [r4, #0]
 8009694:	1ac0      	subs	r0, r0, r3
 8009696:	6963      	ldr	r3, [r4, #20]
 8009698:	b2f6      	uxtb	r6, r6
 800969a:	4283      	cmp	r3, r0
 800969c:	4637      	mov	r7, r6
 800969e:	dc04      	bgt.n	80096aa <__swbuf_r+0x42>
 80096a0:	4621      	mov	r1, r4
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 f93c 	bl	8009920 <_fflush_r>
 80096a8:	bb30      	cbnz	r0, 80096f8 <__swbuf_r+0x90>
 80096aa:	68a3      	ldr	r3, [r4, #8]
 80096ac:	3b01      	subs	r3, #1
 80096ae:	60a3      	str	r3, [r4, #8]
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	1c5a      	adds	r2, r3, #1
 80096b4:	6022      	str	r2, [r4, #0]
 80096b6:	701e      	strb	r6, [r3, #0]
 80096b8:	6963      	ldr	r3, [r4, #20]
 80096ba:	3001      	adds	r0, #1
 80096bc:	4283      	cmp	r3, r0
 80096be:	d004      	beq.n	80096ca <__swbuf_r+0x62>
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	07db      	lsls	r3, r3, #31
 80096c4:	d506      	bpl.n	80096d4 <__swbuf_r+0x6c>
 80096c6:	2e0a      	cmp	r6, #10
 80096c8:	d104      	bne.n	80096d4 <__swbuf_r+0x6c>
 80096ca:	4621      	mov	r1, r4
 80096cc:	4628      	mov	r0, r5
 80096ce:	f000 f927 	bl	8009920 <_fflush_r>
 80096d2:	b988      	cbnz	r0, 80096f8 <__swbuf_r+0x90>
 80096d4:	4638      	mov	r0, r7
 80096d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096d8:	4b0a      	ldr	r3, [pc, #40]	; (8009704 <__swbuf_r+0x9c>)
 80096da:	429c      	cmp	r4, r3
 80096dc:	d101      	bne.n	80096e2 <__swbuf_r+0x7a>
 80096de:	68ac      	ldr	r4, [r5, #8]
 80096e0:	e7cf      	b.n	8009682 <__swbuf_r+0x1a>
 80096e2:	4b09      	ldr	r3, [pc, #36]	; (8009708 <__swbuf_r+0xa0>)
 80096e4:	429c      	cmp	r4, r3
 80096e6:	bf08      	it	eq
 80096e8:	68ec      	ldreq	r4, [r5, #12]
 80096ea:	e7ca      	b.n	8009682 <__swbuf_r+0x1a>
 80096ec:	4621      	mov	r1, r4
 80096ee:	4628      	mov	r0, r5
 80096f0:	f000 f81a 	bl	8009728 <__swsetup_r>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d0cb      	beq.n	8009690 <__swbuf_r+0x28>
 80096f8:	f04f 37ff 	mov.w	r7, #4294967295
 80096fc:	e7ea      	b.n	80096d4 <__swbuf_r+0x6c>
 80096fe:	bf00      	nop
 8009700:	0800b75c 	.word	0x0800b75c
 8009704:	0800b77c 	.word	0x0800b77c
 8009708:	0800b73c 	.word	0x0800b73c

0800970c <__ascii_wctomb>:
 800970c:	b149      	cbz	r1, 8009722 <__ascii_wctomb+0x16>
 800970e:	2aff      	cmp	r2, #255	; 0xff
 8009710:	bf85      	ittet	hi
 8009712:	238a      	movhi	r3, #138	; 0x8a
 8009714:	6003      	strhi	r3, [r0, #0]
 8009716:	700a      	strbls	r2, [r1, #0]
 8009718:	f04f 30ff 	movhi.w	r0, #4294967295
 800971c:	bf98      	it	ls
 800971e:	2001      	movls	r0, #1
 8009720:	4770      	bx	lr
 8009722:	4608      	mov	r0, r1
 8009724:	4770      	bx	lr
	...

08009728 <__swsetup_r>:
 8009728:	4b32      	ldr	r3, [pc, #200]	; (80097f4 <__swsetup_r+0xcc>)
 800972a:	b570      	push	{r4, r5, r6, lr}
 800972c:	681d      	ldr	r5, [r3, #0]
 800972e:	4606      	mov	r6, r0
 8009730:	460c      	mov	r4, r1
 8009732:	b125      	cbz	r5, 800973e <__swsetup_r+0x16>
 8009734:	69ab      	ldr	r3, [r5, #24]
 8009736:	b913      	cbnz	r3, 800973e <__swsetup_r+0x16>
 8009738:	4628      	mov	r0, r5
 800973a:	f000 f985 	bl	8009a48 <__sinit>
 800973e:	4b2e      	ldr	r3, [pc, #184]	; (80097f8 <__swsetup_r+0xd0>)
 8009740:	429c      	cmp	r4, r3
 8009742:	d10f      	bne.n	8009764 <__swsetup_r+0x3c>
 8009744:	686c      	ldr	r4, [r5, #4]
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800974c:	0719      	lsls	r1, r3, #28
 800974e:	d42c      	bmi.n	80097aa <__swsetup_r+0x82>
 8009750:	06dd      	lsls	r5, r3, #27
 8009752:	d411      	bmi.n	8009778 <__swsetup_r+0x50>
 8009754:	2309      	movs	r3, #9
 8009756:	6033      	str	r3, [r6, #0]
 8009758:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800975c:	81a3      	strh	r3, [r4, #12]
 800975e:	f04f 30ff 	mov.w	r0, #4294967295
 8009762:	e03e      	b.n	80097e2 <__swsetup_r+0xba>
 8009764:	4b25      	ldr	r3, [pc, #148]	; (80097fc <__swsetup_r+0xd4>)
 8009766:	429c      	cmp	r4, r3
 8009768:	d101      	bne.n	800976e <__swsetup_r+0x46>
 800976a:	68ac      	ldr	r4, [r5, #8]
 800976c:	e7eb      	b.n	8009746 <__swsetup_r+0x1e>
 800976e:	4b24      	ldr	r3, [pc, #144]	; (8009800 <__swsetup_r+0xd8>)
 8009770:	429c      	cmp	r4, r3
 8009772:	bf08      	it	eq
 8009774:	68ec      	ldreq	r4, [r5, #12]
 8009776:	e7e6      	b.n	8009746 <__swsetup_r+0x1e>
 8009778:	0758      	lsls	r0, r3, #29
 800977a:	d512      	bpl.n	80097a2 <__swsetup_r+0x7a>
 800977c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800977e:	b141      	cbz	r1, 8009792 <__swsetup_r+0x6a>
 8009780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009784:	4299      	cmp	r1, r3
 8009786:	d002      	beq.n	800978e <__swsetup_r+0x66>
 8009788:	4630      	mov	r0, r6
 800978a:	f7ff fcd5 	bl	8009138 <_free_r>
 800978e:	2300      	movs	r3, #0
 8009790:	6363      	str	r3, [r4, #52]	; 0x34
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	2300      	movs	r3, #0
 800979c:	6063      	str	r3, [r4, #4]
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	89a3      	ldrh	r3, [r4, #12]
 80097a4:	f043 0308 	orr.w	r3, r3, #8
 80097a8:	81a3      	strh	r3, [r4, #12]
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	b94b      	cbnz	r3, 80097c2 <__swsetup_r+0x9a>
 80097ae:	89a3      	ldrh	r3, [r4, #12]
 80097b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80097b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097b8:	d003      	beq.n	80097c2 <__swsetup_r+0x9a>
 80097ba:	4621      	mov	r1, r4
 80097bc:	4630      	mov	r0, r6
 80097be:	f000 fa09 	bl	8009bd4 <__smakebuf_r>
 80097c2:	89a0      	ldrh	r0, [r4, #12]
 80097c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097c8:	f010 0301 	ands.w	r3, r0, #1
 80097cc:	d00a      	beq.n	80097e4 <__swsetup_r+0xbc>
 80097ce:	2300      	movs	r3, #0
 80097d0:	60a3      	str	r3, [r4, #8]
 80097d2:	6963      	ldr	r3, [r4, #20]
 80097d4:	425b      	negs	r3, r3
 80097d6:	61a3      	str	r3, [r4, #24]
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	b943      	cbnz	r3, 80097ee <__swsetup_r+0xc6>
 80097dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097e0:	d1ba      	bne.n	8009758 <__swsetup_r+0x30>
 80097e2:	bd70      	pop	{r4, r5, r6, pc}
 80097e4:	0781      	lsls	r1, r0, #30
 80097e6:	bf58      	it	pl
 80097e8:	6963      	ldrpl	r3, [r4, #20]
 80097ea:	60a3      	str	r3, [r4, #8]
 80097ec:	e7f4      	b.n	80097d8 <__swsetup_r+0xb0>
 80097ee:	2000      	movs	r0, #0
 80097f0:	e7f7      	b.n	80097e2 <__swsetup_r+0xba>
 80097f2:	bf00      	nop
 80097f4:	20000014 	.word	0x20000014
 80097f8:	0800b75c 	.word	0x0800b75c
 80097fc:	0800b77c 	.word	0x0800b77c
 8009800:	0800b73c 	.word	0x0800b73c

08009804 <abort>:
 8009804:	b508      	push	{r3, lr}
 8009806:	2006      	movs	r0, #6
 8009808:	f000 fa4c 	bl	8009ca4 <raise>
 800980c:	2001      	movs	r0, #1
 800980e:	f001 fdaf 	bl	800b370 <_exit>
	...

08009814 <__sflush_r>:
 8009814:	898a      	ldrh	r2, [r1, #12]
 8009816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981a:	4605      	mov	r5, r0
 800981c:	0710      	lsls	r0, r2, #28
 800981e:	460c      	mov	r4, r1
 8009820:	d458      	bmi.n	80098d4 <__sflush_r+0xc0>
 8009822:	684b      	ldr	r3, [r1, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	dc05      	bgt.n	8009834 <__sflush_r+0x20>
 8009828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800982a:	2b00      	cmp	r3, #0
 800982c:	dc02      	bgt.n	8009834 <__sflush_r+0x20>
 800982e:	2000      	movs	r0, #0
 8009830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009836:	2e00      	cmp	r6, #0
 8009838:	d0f9      	beq.n	800982e <__sflush_r+0x1a>
 800983a:	2300      	movs	r3, #0
 800983c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009840:	682f      	ldr	r7, [r5, #0]
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	d032      	beq.n	80098ac <__sflush_r+0x98>
 8009846:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009848:	89a3      	ldrh	r3, [r4, #12]
 800984a:	075a      	lsls	r2, r3, #29
 800984c:	d505      	bpl.n	800985a <__sflush_r+0x46>
 800984e:	6863      	ldr	r3, [r4, #4]
 8009850:	1ac0      	subs	r0, r0, r3
 8009852:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009854:	b10b      	cbz	r3, 800985a <__sflush_r+0x46>
 8009856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009858:	1ac0      	subs	r0, r0, r3
 800985a:	2300      	movs	r3, #0
 800985c:	4602      	mov	r2, r0
 800985e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009860:	6a21      	ldr	r1, [r4, #32]
 8009862:	4628      	mov	r0, r5
 8009864:	47b0      	blx	r6
 8009866:	1c43      	adds	r3, r0, #1
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	d106      	bne.n	800987a <__sflush_r+0x66>
 800986c:	6829      	ldr	r1, [r5, #0]
 800986e:	291d      	cmp	r1, #29
 8009870:	d82c      	bhi.n	80098cc <__sflush_r+0xb8>
 8009872:	4a2a      	ldr	r2, [pc, #168]	; (800991c <__sflush_r+0x108>)
 8009874:	40ca      	lsrs	r2, r1
 8009876:	07d6      	lsls	r6, r2, #31
 8009878:	d528      	bpl.n	80098cc <__sflush_r+0xb8>
 800987a:	2200      	movs	r2, #0
 800987c:	6062      	str	r2, [r4, #4]
 800987e:	04d9      	lsls	r1, r3, #19
 8009880:	6922      	ldr	r2, [r4, #16]
 8009882:	6022      	str	r2, [r4, #0]
 8009884:	d504      	bpl.n	8009890 <__sflush_r+0x7c>
 8009886:	1c42      	adds	r2, r0, #1
 8009888:	d101      	bne.n	800988e <__sflush_r+0x7a>
 800988a:	682b      	ldr	r3, [r5, #0]
 800988c:	b903      	cbnz	r3, 8009890 <__sflush_r+0x7c>
 800988e:	6560      	str	r0, [r4, #84]	; 0x54
 8009890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009892:	602f      	str	r7, [r5, #0]
 8009894:	2900      	cmp	r1, #0
 8009896:	d0ca      	beq.n	800982e <__sflush_r+0x1a>
 8009898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800989c:	4299      	cmp	r1, r3
 800989e:	d002      	beq.n	80098a6 <__sflush_r+0x92>
 80098a0:	4628      	mov	r0, r5
 80098a2:	f7ff fc49 	bl	8009138 <_free_r>
 80098a6:	2000      	movs	r0, #0
 80098a8:	6360      	str	r0, [r4, #52]	; 0x34
 80098aa:	e7c1      	b.n	8009830 <__sflush_r+0x1c>
 80098ac:	6a21      	ldr	r1, [r4, #32]
 80098ae:	2301      	movs	r3, #1
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b0      	blx	r6
 80098b4:	1c41      	adds	r1, r0, #1
 80098b6:	d1c7      	bne.n	8009848 <__sflush_r+0x34>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d0c4      	beq.n	8009848 <__sflush_r+0x34>
 80098be:	2b1d      	cmp	r3, #29
 80098c0:	d001      	beq.n	80098c6 <__sflush_r+0xb2>
 80098c2:	2b16      	cmp	r3, #22
 80098c4:	d101      	bne.n	80098ca <__sflush_r+0xb6>
 80098c6:	602f      	str	r7, [r5, #0]
 80098c8:	e7b1      	b.n	800982e <__sflush_r+0x1a>
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d0:	81a3      	strh	r3, [r4, #12]
 80098d2:	e7ad      	b.n	8009830 <__sflush_r+0x1c>
 80098d4:	690f      	ldr	r7, [r1, #16]
 80098d6:	2f00      	cmp	r7, #0
 80098d8:	d0a9      	beq.n	800982e <__sflush_r+0x1a>
 80098da:	0793      	lsls	r3, r2, #30
 80098dc:	680e      	ldr	r6, [r1, #0]
 80098de:	bf08      	it	eq
 80098e0:	694b      	ldreq	r3, [r1, #20]
 80098e2:	600f      	str	r7, [r1, #0]
 80098e4:	bf18      	it	ne
 80098e6:	2300      	movne	r3, #0
 80098e8:	eba6 0807 	sub.w	r8, r6, r7
 80098ec:	608b      	str	r3, [r1, #8]
 80098ee:	f1b8 0f00 	cmp.w	r8, #0
 80098f2:	dd9c      	ble.n	800982e <__sflush_r+0x1a>
 80098f4:	6a21      	ldr	r1, [r4, #32]
 80098f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098f8:	4643      	mov	r3, r8
 80098fa:	463a      	mov	r2, r7
 80098fc:	4628      	mov	r0, r5
 80098fe:	47b0      	blx	r6
 8009900:	2800      	cmp	r0, #0
 8009902:	dc06      	bgt.n	8009912 <__sflush_r+0xfe>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800990a:	81a3      	strh	r3, [r4, #12]
 800990c:	f04f 30ff 	mov.w	r0, #4294967295
 8009910:	e78e      	b.n	8009830 <__sflush_r+0x1c>
 8009912:	4407      	add	r7, r0
 8009914:	eba8 0800 	sub.w	r8, r8, r0
 8009918:	e7e9      	b.n	80098ee <__sflush_r+0xda>
 800991a:	bf00      	nop
 800991c:	20400001 	.word	0x20400001

08009920 <_fflush_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	690b      	ldr	r3, [r1, #16]
 8009924:	4605      	mov	r5, r0
 8009926:	460c      	mov	r4, r1
 8009928:	b913      	cbnz	r3, 8009930 <_fflush_r+0x10>
 800992a:	2500      	movs	r5, #0
 800992c:	4628      	mov	r0, r5
 800992e:	bd38      	pop	{r3, r4, r5, pc}
 8009930:	b118      	cbz	r0, 800993a <_fflush_r+0x1a>
 8009932:	6983      	ldr	r3, [r0, #24]
 8009934:	b90b      	cbnz	r3, 800993a <_fflush_r+0x1a>
 8009936:	f000 f887 	bl	8009a48 <__sinit>
 800993a:	4b14      	ldr	r3, [pc, #80]	; (800998c <_fflush_r+0x6c>)
 800993c:	429c      	cmp	r4, r3
 800993e:	d11b      	bne.n	8009978 <_fflush_r+0x58>
 8009940:	686c      	ldr	r4, [r5, #4]
 8009942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d0ef      	beq.n	800992a <_fflush_r+0xa>
 800994a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800994c:	07d0      	lsls	r0, r2, #31
 800994e:	d404      	bmi.n	800995a <_fflush_r+0x3a>
 8009950:	0599      	lsls	r1, r3, #22
 8009952:	d402      	bmi.n	800995a <_fflush_r+0x3a>
 8009954:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009956:	f000 f915 	bl	8009b84 <__retarget_lock_acquire_recursive>
 800995a:	4628      	mov	r0, r5
 800995c:	4621      	mov	r1, r4
 800995e:	f7ff ff59 	bl	8009814 <__sflush_r>
 8009962:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009964:	07da      	lsls	r2, r3, #31
 8009966:	4605      	mov	r5, r0
 8009968:	d4e0      	bmi.n	800992c <_fflush_r+0xc>
 800996a:	89a3      	ldrh	r3, [r4, #12]
 800996c:	059b      	lsls	r3, r3, #22
 800996e:	d4dd      	bmi.n	800992c <_fflush_r+0xc>
 8009970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009972:	f000 f908 	bl	8009b86 <__retarget_lock_release_recursive>
 8009976:	e7d9      	b.n	800992c <_fflush_r+0xc>
 8009978:	4b05      	ldr	r3, [pc, #20]	; (8009990 <_fflush_r+0x70>)
 800997a:	429c      	cmp	r4, r3
 800997c:	d101      	bne.n	8009982 <_fflush_r+0x62>
 800997e:	68ac      	ldr	r4, [r5, #8]
 8009980:	e7df      	b.n	8009942 <_fflush_r+0x22>
 8009982:	4b04      	ldr	r3, [pc, #16]	; (8009994 <_fflush_r+0x74>)
 8009984:	429c      	cmp	r4, r3
 8009986:	bf08      	it	eq
 8009988:	68ec      	ldreq	r4, [r5, #12]
 800998a:	e7da      	b.n	8009942 <_fflush_r+0x22>
 800998c:	0800b75c 	.word	0x0800b75c
 8009990:	0800b77c 	.word	0x0800b77c
 8009994:	0800b73c 	.word	0x0800b73c

08009998 <std>:
 8009998:	2300      	movs	r3, #0
 800999a:	b510      	push	{r4, lr}
 800999c:	4604      	mov	r4, r0
 800999e:	e9c0 3300 	strd	r3, r3, [r0]
 80099a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099a6:	6083      	str	r3, [r0, #8]
 80099a8:	8181      	strh	r1, [r0, #12]
 80099aa:	6643      	str	r3, [r0, #100]	; 0x64
 80099ac:	81c2      	strh	r2, [r0, #14]
 80099ae:	6183      	str	r3, [r0, #24]
 80099b0:	4619      	mov	r1, r3
 80099b2:	2208      	movs	r2, #8
 80099b4:	305c      	adds	r0, #92	; 0x5c
 80099b6:	f7fd fd2d 	bl	8007414 <memset>
 80099ba:	4b05      	ldr	r3, [pc, #20]	; (80099d0 <std+0x38>)
 80099bc:	6263      	str	r3, [r4, #36]	; 0x24
 80099be:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <std+0x3c>)
 80099c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80099c2:	4b05      	ldr	r3, [pc, #20]	; (80099d8 <std+0x40>)
 80099c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80099c6:	4b05      	ldr	r3, [pc, #20]	; (80099dc <std+0x44>)
 80099c8:	6224      	str	r4, [r4, #32]
 80099ca:	6323      	str	r3, [r4, #48]	; 0x30
 80099cc:	bd10      	pop	{r4, pc}
 80099ce:	bf00      	nop
 80099d0:	08009cdd 	.word	0x08009cdd
 80099d4:	08009cff 	.word	0x08009cff
 80099d8:	08009d37 	.word	0x08009d37
 80099dc:	08009d5b 	.word	0x08009d5b

080099e0 <_cleanup_r>:
 80099e0:	4901      	ldr	r1, [pc, #4]	; (80099e8 <_cleanup_r+0x8>)
 80099e2:	f000 b8af 	b.w	8009b44 <_fwalk_reent>
 80099e6:	bf00      	nop
 80099e8:	08009921 	.word	0x08009921

080099ec <__sfmoreglue>:
 80099ec:	b570      	push	{r4, r5, r6, lr}
 80099ee:	2268      	movs	r2, #104	; 0x68
 80099f0:	1e4d      	subs	r5, r1, #1
 80099f2:	4355      	muls	r5, r2
 80099f4:	460e      	mov	r6, r1
 80099f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099fa:	f7ff fc09 	bl	8009210 <_malloc_r>
 80099fe:	4604      	mov	r4, r0
 8009a00:	b140      	cbz	r0, 8009a14 <__sfmoreglue+0x28>
 8009a02:	2100      	movs	r1, #0
 8009a04:	e9c0 1600 	strd	r1, r6, [r0]
 8009a08:	300c      	adds	r0, #12
 8009a0a:	60a0      	str	r0, [r4, #8]
 8009a0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a10:	f7fd fd00 	bl	8007414 <memset>
 8009a14:	4620      	mov	r0, r4
 8009a16:	bd70      	pop	{r4, r5, r6, pc}

08009a18 <__sfp_lock_acquire>:
 8009a18:	4801      	ldr	r0, [pc, #4]	; (8009a20 <__sfp_lock_acquire+0x8>)
 8009a1a:	f000 b8b3 	b.w	8009b84 <__retarget_lock_acquire_recursive>
 8009a1e:	bf00      	nop
 8009a20:	200006b9 	.word	0x200006b9

08009a24 <__sfp_lock_release>:
 8009a24:	4801      	ldr	r0, [pc, #4]	; (8009a2c <__sfp_lock_release+0x8>)
 8009a26:	f000 b8ae 	b.w	8009b86 <__retarget_lock_release_recursive>
 8009a2a:	bf00      	nop
 8009a2c:	200006b9 	.word	0x200006b9

08009a30 <__sinit_lock_acquire>:
 8009a30:	4801      	ldr	r0, [pc, #4]	; (8009a38 <__sinit_lock_acquire+0x8>)
 8009a32:	f000 b8a7 	b.w	8009b84 <__retarget_lock_acquire_recursive>
 8009a36:	bf00      	nop
 8009a38:	200006ba 	.word	0x200006ba

08009a3c <__sinit_lock_release>:
 8009a3c:	4801      	ldr	r0, [pc, #4]	; (8009a44 <__sinit_lock_release+0x8>)
 8009a3e:	f000 b8a2 	b.w	8009b86 <__retarget_lock_release_recursive>
 8009a42:	bf00      	nop
 8009a44:	200006ba 	.word	0x200006ba

08009a48 <__sinit>:
 8009a48:	b510      	push	{r4, lr}
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	f7ff fff0 	bl	8009a30 <__sinit_lock_acquire>
 8009a50:	69a3      	ldr	r3, [r4, #24]
 8009a52:	b11b      	cbz	r3, 8009a5c <__sinit+0x14>
 8009a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a58:	f7ff bff0 	b.w	8009a3c <__sinit_lock_release>
 8009a5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a60:	6523      	str	r3, [r4, #80]	; 0x50
 8009a62:	4b13      	ldr	r3, [pc, #76]	; (8009ab0 <__sinit+0x68>)
 8009a64:	4a13      	ldr	r2, [pc, #76]	; (8009ab4 <__sinit+0x6c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a6a:	42a3      	cmp	r3, r4
 8009a6c:	bf04      	itt	eq
 8009a6e:	2301      	moveq	r3, #1
 8009a70:	61a3      	streq	r3, [r4, #24]
 8009a72:	4620      	mov	r0, r4
 8009a74:	f000 f820 	bl	8009ab8 <__sfp>
 8009a78:	6060      	str	r0, [r4, #4]
 8009a7a:	4620      	mov	r0, r4
 8009a7c:	f000 f81c 	bl	8009ab8 <__sfp>
 8009a80:	60a0      	str	r0, [r4, #8]
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 f818 	bl	8009ab8 <__sfp>
 8009a88:	2200      	movs	r2, #0
 8009a8a:	60e0      	str	r0, [r4, #12]
 8009a8c:	2104      	movs	r1, #4
 8009a8e:	6860      	ldr	r0, [r4, #4]
 8009a90:	f7ff ff82 	bl	8009998 <std>
 8009a94:	68a0      	ldr	r0, [r4, #8]
 8009a96:	2201      	movs	r2, #1
 8009a98:	2109      	movs	r1, #9
 8009a9a:	f7ff ff7d 	bl	8009998 <std>
 8009a9e:	68e0      	ldr	r0, [r4, #12]
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	2112      	movs	r1, #18
 8009aa4:	f7ff ff78 	bl	8009998 <std>
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	61a3      	str	r3, [r4, #24]
 8009aac:	e7d2      	b.n	8009a54 <__sinit+0xc>
 8009aae:	bf00      	nop
 8009ab0:	0800b3c0 	.word	0x0800b3c0
 8009ab4:	080099e1 	.word	0x080099e1

08009ab8 <__sfp>:
 8009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aba:	4607      	mov	r7, r0
 8009abc:	f7ff ffac 	bl	8009a18 <__sfp_lock_acquire>
 8009ac0:	4b1e      	ldr	r3, [pc, #120]	; (8009b3c <__sfp+0x84>)
 8009ac2:	681e      	ldr	r6, [r3, #0]
 8009ac4:	69b3      	ldr	r3, [r6, #24]
 8009ac6:	b913      	cbnz	r3, 8009ace <__sfp+0x16>
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7ff ffbd 	bl	8009a48 <__sinit>
 8009ace:	3648      	adds	r6, #72	; 0x48
 8009ad0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	d503      	bpl.n	8009ae0 <__sfp+0x28>
 8009ad8:	6833      	ldr	r3, [r6, #0]
 8009ada:	b30b      	cbz	r3, 8009b20 <__sfp+0x68>
 8009adc:	6836      	ldr	r6, [r6, #0]
 8009ade:	e7f7      	b.n	8009ad0 <__sfp+0x18>
 8009ae0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ae4:	b9d5      	cbnz	r5, 8009b1c <__sfp+0x64>
 8009ae6:	4b16      	ldr	r3, [pc, #88]	; (8009b40 <__sfp+0x88>)
 8009ae8:	60e3      	str	r3, [r4, #12]
 8009aea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009aee:	6665      	str	r5, [r4, #100]	; 0x64
 8009af0:	f000 f847 	bl	8009b82 <__retarget_lock_init_recursive>
 8009af4:	f7ff ff96 	bl	8009a24 <__sfp_lock_release>
 8009af8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009afc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b00:	6025      	str	r5, [r4, #0]
 8009b02:	61a5      	str	r5, [r4, #24]
 8009b04:	2208      	movs	r2, #8
 8009b06:	4629      	mov	r1, r5
 8009b08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b0c:	f7fd fc82 	bl	8007414 <memset>
 8009b10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b18:	4620      	mov	r0, r4
 8009b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b1c:	3468      	adds	r4, #104	; 0x68
 8009b1e:	e7d9      	b.n	8009ad4 <__sfp+0x1c>
 8009b20:	2104      	movs	r1, #4
 8009b22:	4638      	mov	r0, r7
 8009b24:	f7ff ff62 	bl	80099ec <__sfmoreglue>
 8009b28:	4604      	mov	r4, r0
 8009b2a:	6030      	str	r0, [r6, #0]
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d1d5      	bne.n	8009adc <__sfp+0x24>
 8009b30:	f7ff ff78 	bl	8009a24 <__sfp_lock_release>
 8009b34:	230c      	movs	r3, #12
 8009b36:	603b      	str	r3, [r7, #0]
 8009b38:	e7ee      	b.n	8009b18 <__sfp+0x60>
 8009b3a:	bf00      	nop
 8009b3c:	0800b3c0 	.word	0x0800b3c0
 8009b40:	ffff0001 	.word	0xffff0001

08009b44 <_fwalk_reent>:
 8009b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b48:	4606      	mov	r6, r0
 8009b4a:	4688      	mov	r8, r1
 8009b4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b50:	2700      	movs	r7, #0
 8009b52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b56:	f1b9 0901 	subs.w	r9, r9, #1
 8009b5a:	d505      	bpl.n	8009b68 <_fwalk_reent+0x24>
 8009b5c:	6824      	ldr	r4, [r4, #0]
 8009b5e:	2c00      	cmp	r4, #0
 8009b60:	d1f7      	bne.n	8009b52 <_fwalk_reent+0xe>
 8009b62:	4638      	mov	r0, r7
 8009b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b68:	89ab      	ldrh	r3, [r5, #12]
 8009b6a:	2b01      	cmp	r3, #1
 8009b6c:	d907      	bls.n	8009b7e <_fwalk_reent+0x3a>
 8009b6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b72:	3301      	adds	r3, #1
 8009b74:	d003      	beq.n	8009b7e <_fwalk_reent+0x3a>
 8009b76:	4629      	mov	r1, r5
 8009b78:	4630      	mov	r0, r6
 8009b7a:	47c0      	blx	r8
 8009b7c:	4307      	orrs	r7, r0
 8009b7e:	3568      	adds	r5, #104	; 0x68
 8009b80:	e7e9      	b.n	8009b56 <_fwalk_reent+0x12>

08009b82 <__retarget_lock_init_recursive>:
 8009b82:	4770      	bx	lr

08009b84 <__retarget_lock_acquire_recursive>:
 8009b84:	4770      	bx	lr

08009b86 <__retarget_lock_release_recursive>:
 8009b86:	4770      	bx	lr

08009b88 <__swhatbuf_r>:
 8009b88:	b570      	push	{r4, r5, r6, lr}
 8009b8a:	460e      	mov	r6, r1
 8009b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b90:	2900      	cmp	r1, #0
 8009b92:	b096      	sub	sp, #88	; 0x58
 8009b94:	4614      	mov	r4, r2
 8009b96:	461d      	mov	r5, r3
 8009b98:	da08      	bge.n	8009bac <__swhatbuf_r+0x24>
 8009b9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	602a      	str	r2, [r5, #0]
 8009ba2:	061a      	lsls	r2, r3, #24
 8009ba4:	d410      	bmi.n	8009bc8 <__swhatbuf_r+0x40>
 8009ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009baa:	e00e      	b.n	8009bca <__swhatbuf_r+0x42>
 8009bac:	466a      	mov	r2, sp
 8009bae:	f000 f8fb 	bl	8009da8 <_fstat_r>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	dbf1      	blt.n	8009b9a <__swhatbuf_r+0x12>
 8009bb6:	9a01      	ldr	r2, [sp, #4]
 8009bb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bc0:	425a      	negs	r2, r3
 8009bc2:	415a      	adcs	r2, r3
 8009bc4:	602a      	str	r2, [r5, #0]
 8009bc6:	e7ee      	b.n	8009ba6 <__swhatbuf_r+0x1e>
 8009bc8:	2340      	movs	r3, #64	; 0x40
 8009bca:	2000      	movs	r0, #0
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	b016      	add	sp, #88	; 0x58
 8009bd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08009bd4 <__smakebuf_r>:
 8009bd4:	898b      	ldrh	r3, [r1, #12]
 8009bd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bd8:	079d      	lsls	r5, r3, #30
 8009bda:	4606      	mov	r6, r0
 8009bdc:	460c      	mov	r4, r1
 8009bde:	d507      	bpl.n	8009bf0 <__smakebuf_r+0x1c>
 8009be0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009be4:	6023      	str	r3, [r4, #0]
 8009be6:	6123      	str	r3, [r4, #16]
 8009be8:	2301      	movs	r3, #1
 8009bea:	6163      	str	r3, [r4, #20]
 8009bec:	b002      	add	sp, #8
 8009bee:	bd70      	pop	{r4, r5, r6, pc}
 8009bf0:	ab01      	add	r3, sp, #4
 8009bf2:	466a      	mov	r2, sp
 8009bf4:	f7ff ffc8 	bl	8009b88 <__swhatbuf_r>
 8009bf8:	9900      	ldr	r1, [sp, #0]
 8009bfa:	4605      	mov	r5, r0
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f7ff fb07 	bl	8009210 <_malloc_r>
 8009c02:	b948      	cbnz	r0, 8009c18 <__smakebuf_r+0x44>
 8009c04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c08:	059a      	lsls	r2, r3, #22
 8009c0a:	d4ef      	bmi.n	8009bec <__smakebuf_r+0x18>
 8009c0c:	f023 0303 	bic.w	r3, r3, #3
 8009c10:	f043 0302 	orr.w	r3, r3, #2
 8009c14:	81a3      	strh	r3, [r4, #12]
 8009c16:	e7e3      	b.n	8009be0 <__smakebuf_r+0xc>
 8009c18:	4b0d      	ldr	r3, [pc, #52]	; (8009c50 <__smakebuf_r+0x7c>)
 8009c1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	6020      	str	r0, [r4, #0]
 8009c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c24:	81a3      	strh	r3, [r4, #12]
 8009c26:	9b00      	ldr	r3, [sp, #0]
 8009c28:	6163      	str	r3, [r4, #20]
 8009c2a:	9b01      	ldr	r3, [sp, #4]
 8009c2c:	6120      	str	r0, [r4, #16]
 8009c2e:	b15b      	cbz	r3, 8009c48 <__smakebuf_r+0x74>
 8009c30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c34:	4630      	mov	r0, r6
 8009c36:	f000 f8c9 	bl	8009dcc <_isatty_r>
 8009c3a:	b128      	cbz	r0, 8009c48 <__smakebuf_r+0x74>
 8009c3c:	89a3      	ldrh	r3, [r4, #12]
 8009c3e:	f023 0303 	bic.w	r3, r3, #3
 8009c42:	f043 0301 	orr.w	r3, r3, #1
 8009c46:	81a3      	strh	r3, [r4, #12]
 8009c48:	89a0      	ldrh	r0, [r4, #12]
 8009c4a:	4305      	orrs	r5, r0
 8009c4c:	81a5      	strh	r5, [r4, #12]
 8009c4e:	e7cd      	b.n	8009bec <__smakebuf_r+0x18>
 8009c50:	080099e1 	.word	0x080099e1

08009c54 <_raise_r>:
 8009c54:	291f      	cmp	r1, #31
 8009c56:	b538      	push	{r3, r4, r5, lr}
 8009c58:	4604      	mov	r4, r0
 8009c5a:	460d      	mov	r5, r1
 8009c5c:	d904      	bls.n	8009c68 <_raise_r+0x14>
 8009c5e:	2316      	movs	r3, #22
 8009c60:	6003      	str	r3, [r0, #0]
 8009c62:	f04f 30ff 	mov.w	r0, #4294967295
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c6a:	b112      	cbz	r2, 8009c72 <_raise_r+0x1e>
 8009c6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c70:	b94b      	cbnz	r3, 8009c86 <_raise_r+0x32>
 8009c72:	4620      	mov	r0, r4
 8009c74:	f000 f830 	bl	8009cd8 <_getpid_r>
 8009c78:	462a      	mov	r2, r5
 8009c7a:	4601      	mov	r1, r0
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c82:	f000 b817 	b.w	8009cb4 <_kill_r>
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d00a      	beq.n	8009ca0 <_raise_r+0x4c>
 8009c8a:	1c59      	adds	r1, r3, #1
 8009c8c:	d103      	bne.n	8009c96 <_raise_r+0x42>
 8009c8e:	2316      	movs	r3, #22
 8009c90:	6003      	str	r3, [r0, #0]
 8009c92:	2001      	movs	r0, #1
 8009c94:	e7e7      	b.n	8009c66 <_raise_r+0x12>
 8009c96:	2400      	movs	r4, #0
 8009c98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	4798      	blx	r3
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	e7e0      	b.n	8009c66 <_raise_r+0x12>

08009ca4 <raise>:
 8009ca4:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <raise+0xc>)
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	6818      	ldr	r0, [r3, #0]
 8009caa:	f7ff bfd3 	b.w	8009c54 <_raise_r>
 8009cae:	bf00      	nop
 8009cb0:	20000014 	.word	0x20000014

08009cb4 <_kill_r>:
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4d07      	ldr	r5, [pc, #28]	; (8009cd4 <_kill_r+0x20>)
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4604      	mov	r4, r0
 8009cbc:	4608      	mov	r0, r1
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	602b      	str	r3, [r5, #0]
 8009cc2:	f001 fb27 	bl	800b314 <_kill>
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	d102      	bne.n	8009cd0 <_kill_r+0x1c>
 8009cca:	682b      	ldr	r3, [r5, #0]
 8009ccc:	b103      	cbz	r3, 8009cd0 <_kill_r+0x1c>
 8009cce:	6023      	str	r3, [r4, #0]
 8009cd0:	bd38      	pop	{r3, r4, r5, pc}
 8009cd2:	bf00      	nop
 8009cd4:	200006b4 	.word	0x200006b4

08009cd8 <_getpid_r>:
 8009cd8:	f001 bb0c 	b.w	800b2f4 <_getpid>

08009cdc <__sread>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	460c      	mov	r4, r1
 8009ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ce4:	f000 f894 	bl	8009e10 <_read_r>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	bfab      	itete	ge
 8009cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cee:	89a3      	ldrhlt	r3, [r4, #12]
 8009cf0:	181b      	addge	r3, r3, r0
 8009cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cf6:	bfac      	ite	ge
 8009cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cfa:	81a3      	strhlt	r3, [r4, #12]
 8009cfc:	bd10      	pop	{r4, pc}

08009cfe <__swrite>:
 8009cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d02:	461f      	mov	r7, r3
 8009d04:	898b      	ldrh	r3, [r1, #12]
 8009d06:	05db      	lsls	r3, r3, #23
 8009d08:	4605      	mov	r5, r0
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	4616      	mov	r6, r2
 8009d0e:	d505      	bpl.n	8009d1c <__swrite+0x1e>
 8009d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d14:	2302      	movs	r3, #2
 8009d16:	2200      	movs	r2, #0
 8009d18:	f000 f868 	bl	8009dec <_lseek_r>
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d26:	81a3      	strh	r3, [r4, #12]
 8009d28:	4632      	mov	r2, r6
 8009d2a:	463b      	mov	r3, r7
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d32:	f000 b817 	b.w	8009d64 <_write_r>

08009d36 <__sseek>:
 8009d36:	b510      	push	{r4, lr}
 8009d38:	460c      	mov	r4, r1
 8009d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d3e:	f000 f855 	bl	8009dec <_lseek_r>
 8009d42:	1c43      	adds	r3, r0, #1
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	bf15      	itete	ne
 8009d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d52:	81a3      	strheq	r3, [r4, #12]
 8009d54:	bf18      	it	ne
 8009d56:	81a3      	strhne	r3, [r4, #12]
 8009d58:	bd10      	pop	{r4, pc}

08009d5a <__sclose>:
 8009d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d5e:	f000 b813 	b.w	8009d88 <_close_r>
	...

08009d64 <_write_r>:
 8009d64:	b538      	push	{r3, r4, r5, lr}
 8009d66:	4d07      	ldr	r5, [pc, #28]	; (8009d84 <_write_r+0x20>)
 8009d68:	4604      	mov	r4, r0
 8009d6a:	4608      	mov	r0, r1
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	2200      	movs	r2, #0
 8009d70:	602a      	str	r2, [r5, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	f001 faf4 	bl	800b360 <_write>
 8009d78:	1c43      	adds	r3, r0, #1
 8009d7a:	d102      	bne.n	8009d82 <_write_r+0x1e>
 8009d7c:	682b      	ldr	r3, [r5, #0]
 8009d7e:	b103      	cbz	r3, 8009d82 <_write_r+0x1e>
 8009d80:	6023      	str	r3, [r4, #0]
 8009d82:	bd38      	pop	{r3, r4, r5, pc}
 8009d84:	200006b4 	.word	0x200006b4

08009d88 <_close_r>:
 8009d88:	b538      	push	{r3, r4, r5, lr}
 8009d8a:	4d06      	ldr	r5, [pc, #24]	; (8009da4 <_close_r+0x1c>)
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	4604      	mov	r4, r0
 8009d90:	4608      	mov	r0, r1
 8009d92:	602b      	str	r3, [r5, #0]
 8009d94:	f001 fa9e 	bl	800b2d4 <_close>
 8009d98:	1c43      	adds	r3, r0, #1
 8009d9a:	d102      	bne.n	8009da2 <_close_r+0x1a>
 8009d9c:	682b      	ldr	r3, [r5, #0]
 8009d9e:	b103      	cbz	r3, 8009da2 <_close_r+0x1a>
 8009da0:	6023      	str	r3, [r4, #0]
 8009da2:	bd38      	pop	{r3, r4, r5, pc}
 8009da4:	200006b4 	.word	0x200006b4

08009da8 <_fstat_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4d07      	ldr	r5, [pc, #28]	; (8009dc8 <_fstat_r+0x20>)
 8009dac:	2300      	movs	r3, #0
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	4611      	mov	r1, r2
 8009db4:	602b      	str	r3, [r5, #0]
 8009db6:	f001 fa95 	bl	800b2e4 <_fstat>
 8009dba:	1c43      	adds	r3, r0, #1
 8009dbc:	d102      	bne.n	8009dc4 <_fstat_r+0x1c>
 8009dbe:	682b      	ldr	r3, [r5, #0]
 8009dc0:	b103      	cbz	r3, 8009dc4 <_fstat_r+0x1c>
 8009dc2:	6023      	str	r3, [r4, #0]
 8009dc4:	bd38      	pop	{r3, r4, r5, pc}
 8009dc6:	bf00      	nop
 8009dc8:	200006b4 	.word	0x200006b4

08009dcc <_isatty_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4d06      	ldr	r5, [pc, #24]	; (8009de8 <_isatty_r+0x1c>)
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	4604      	mov	r4, r0
 8009dd4:	4608      	mov	r0, r1
 8009dd6:	602b      	str	r3, [r5, #0]
 8009dd8:	f001 fa94 	bl	800b304 <_isatty>
 8009ddc:	1c43      	adds	r3, r0, #1
 8009dde:	d102      	bne.n	8009de6 <_isatty_r+0x1a>
 8009de0:	682b      	ldr	r3, [r5, #0]
 8009de2:	b103      	cbz	r3, 8009de6 <_isatty_r+0x1a>
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	bd38      	pop	{r3, r4, r5, pc}
 8009de8:	200006b4 	.word	0x200006b4

08009dec <_lseek_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4d07      	ldr	r5, [pc, #28]	; (8009e0c <_lseek_r+0x20>)
 8009df0:	4604      	mov	r4, r0
 8009df2:	4608      	mov	r0, r1
 8009df4:	4611      	mov	r1, r2
 8009df6:	2200      	movs	r2, #0
 8009df8:	602a      	str	r2, [r5, #0]
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	f001 fa92 	bl	800b324 <_lseek>
 8009e00:	1c43      	adds	r3, r0, #1
 8009e02:	d102      	bne.n	8009e0a <_lseek_r+0x1e>
 8009e04:	682b      	ldr	r3, [r5, #0]
 8009e06:	b103      	cbz	r3, 8009e0a <_lseek_r+0x1e>
 8009e08:	6023      	str	r3, [r4, #0]
 8009e0a:	bd38      	pop	{r3, r4, r5, pc}
 8009e0c:	200006b4 	.word	0x200006b4

08009e10 <_read_r>:
 8009e10:	b538      	push	{r3, r4, r5, lr}
 8009e12:	4d07      	ldr	r5, [pc, #28]	; (8009e30 <_read_r+0x20>)
 8009e14:	4604      	mov	r4, r0
 8009e16:	4608      	mov	r0, r1
 8009e18:	4611      	mov	r1, r2
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	602a      	str	r2, [r5, #0]
 8009e1e:	461a      	mov	r2, r3
 8009e20:	f001 fa88 	bl	800b334 <_read>
 8009e24:	1c43      	adds	r3, r0, #1
 8009e26:	d102      	bne.n	8009e2e <_read_r+0x1e>
 8009e28:	682b      	ldr	r3, [r5, #0]
 8009e2a:	b103      	cbz	r3, 8009e2e <_read_r+0x1e>
 8009e2c:	6023      	str	r3, [r4, #0]
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	200006b4 	.word	0x200006b4
 8009e34:	00000000 	.word	0x00000000

08009e38 <atan>:
 8009e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	ec55 4b10 	vmov	r4, r5, d0
 8009e40:	4bc3      	ldr	r3, [pc, #780]	; (800a150 <atan+0x318>)
 8009e42:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009e46:	429e      	cmp	r6, r3
 8009e48:	46ab      	mov	fp, r5
 8009e4a:	dd18      	ble.n	8009e7e <atan+0x46>
 8009e4c:	4bc1      	ldr	r3, [pc, #772]	; (800a154 <atan+0x31c>)
 8009e4e:	429e      	cmp	r6, r3
 8009e50:	dc01      	bgt.n	8009e56 <atan+0x1e>
 8009e52:	d109      	bne.n	8009e68 <atan+0x30>
 8009e54:	b144      	cbz	r4, 8009e68 <atan+0x30>
 8009e56:	4622      	mov	r2, r4
 8009e58:	462b      	mov	r3, r5
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	4629      	mov	r1, r5
 8009e5e:	f7f6 fa35 	bl	80002cc <__adddf3>
 8009e62:	4604      	mov	r4, r0
 8009e64:	460d      	mov	r5, r1
 8009e66:	e006      	b.n	8009e76 <atan+0x3e>
 8009e68:	f1bb 0f00 	cmp.w	fp, #0
 8009e6c:	f300 8131 	bgt.w	800a0d2 <atan+0x29a>
 8009e70:	a59b      	add	r5, pc, #620	; (adr r5, 800a0e0 <atan+0x2a8>)
 8009e72:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e76:	ec45 4b10 	vmov	d0, r4, r5
 8009e7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7e:	4bb6      	ldr	r3, [pc, #728]	; (800a158 <atan+0x320>)
 8009e80:	429e      	cmp	r6, r3
 8009e82:	dc14      	bgt.n	8009eae <atan+0x76>
 8009e84:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8009e88:	429e      	cmp	r6, r3
 8009e8a:	dc0d      	bgt.n	8009ea8 <atan+0x70>
 8009e8c:	a396      	add	r3, pc, #600	; (adr r3, 800a0e8 <atan+0x2b0>)
 8009e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e92:	ee10 0a10 	vmov	r0, s0
 8009e96:	4629      	mov	r1, r5
 8009e98:	f7f6 fa18 	bl	80002cc <__adddf3>
 8009e9c:	4baf      	ldr	r3, [pc, #700]	; (800a15c <atan+0x324>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f7f6 fe5a 	bl	8000b58 <__aeabi_dcmpgt>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d1e6      	bne.n	8009e76 <atan+0x3e>
 8009ea8:	f04f 3aff 	mov.w	sl, #4294967295
 8009eac:	e02b      	b.n	8009f06 <atan+0xce>
 8009eae:	f000 f963 	bl	800a178 <fabs>
 8009eb2:	4bab      	ldr	r3, [pc, #684]	; (800a160 <atan+0x328>)
 8009eb4:	429e      	cmp	r6, r3
 8009eb6:	ec55 4b10 	vmov	r4, r5, d0
 8009eba:	f300 80bf 	bgt.w	800a03c <atan+0x204>
 8009ebe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009ec2:	429e      	cmp	r6, r3
 8009ec4:	f300 80a0 	bgt.w	800a008 <atan+0x1d0>
 8009ec8:	ee10 2a10 	vmov	r2, s0
 8009ecc:	ee10 0a10 	vmov	r0, s0
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	f7f6 f9fa 	bl	80002cc <__adddf3>
 8009ed8:	4ba0      	ldr	r3, [pc, #640]	; (800a15c <atan+0x324>)
 8009eda:	2200      	movs	r2, #0
 8009edc:	f7f6 f9f4 	bl	80002c8 <__aeabi_dsub>
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	460f      	mov	r7, r1
 8009ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009eea:	4620      	mov	r0, r4
 8009eec:	4629      	mov	r1, r5
 8009eee:	f7f6 f9ed 	bl	80002cc <__adddf3>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	460b      	mov	r3, r1
 8009ef6:	4630      	mov	r0, r6
 8009ef8:	4639      	mov	r1, r7
 8009efa:	f7f6 fcc7 	bl	800088c <__aeabi_ddiv>
 8009efe:	f04f 0a00 	mov.w	sl, #0
 8009f02:	4604      	mov	r4, r0
 8009f04:	460d      	mov	r5, r1
 8009f06:	4622      	mov	r2, r4
 8009f08:	462b      	mov	r3, r5
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	f7f6 fb93 	bl	8000638 <__aeabi_dmul>
 8009f12:	4602      	mov	r2, r0
 8009f14:	460b      	mov	r3, r1
 8009f16:	4680      	mov	r8, r0
 8009f18:	4689      	mov	r9, r1
 8009f1a:	f7f6 fb8d 	bl	8000638 <__aeabi_dmul>
 8009f1e:	a374      	add	r3, pc, #464	; (adr r3, 800a0f0 <atan+0x2b8>)
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	4606      	mov	r6, r0
 8009f26:	460f      	mov	r7, r1
 8009f28:	f7f6 fb86 	bl	8000638 <__aeabi_dmul>
 8009f2c:	a372      	add	r3, pc, #456	; (adr r3, 800a0f8 <atan+0x2c0>)
 8009f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f32:	f7f6 f9cb 	bl	80002cc <__adddf3>
 8009f36:	4632      	mov	r2, r6
 8009f38:	463b      	mov	r3, r7
 8009f3a:	f7f6 fb7d 	bl	8000638 <__aeabi_dmul>
 8009f3e:	a370      	add	r3, pc, #448	; (adr r3, 800a100 <atan+0x2c8>)
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	f7f6 f9c2 	bl	80002cc <__adddf3>
 8009f48:	4632      	mov	r2, r6
 8009f4a:	463b      	mov	r3, r7
 8009f4c:	f7f6 fb74 	bl	8000638 <__aeabi_dmul>
 8009f50:	a36d      	add	r3, pc, #436	; (adr r3, 800a108 <atan+0x2d0>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 f9b9 	bl	80002cc <__adddf3>
 8009f5a:	4632      	mov	r2, r6
 8009f5c:	463b      	mov	r3, r7
 8009f5e:	f7f6 fb6b 	bl	8000638 <__aeabi_dmul>
 8009f62:	a36b      	add	r3, pc, #428	; (adr r3, 800a110 <atan+0x2d8>)
 8009f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f68:	f7f6 f9b0 	bl	80002cc <__adddf3>
 8009f6c:	4632      	mov	r2, r6
 8009f6e:	463b      	mov	r3, r7
 8009f70:	f7f6 fb62 	bl	8000638 <__aeabi_dmul>
 8009f74:	a368      	add	r3, pc, #416	; (adr r3, 800a118 <atan+0x2e0>)
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f7f6 f9a7 	bl	80002cc <__adddf3>
 8009f7e:	4642      	mov	r2, r8
 8009f80:	464b      	mov	r3, r9
 8009f82:	f7f6 fb59 	bl	8000638 <__aeabi_dmul>
 8009f86:	a366      	add	r3, pc, #408	; (adr r3, 800a120 <atan+0x2e8>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	4680      	mov	r8, r0
 8009f8e:	4689      	mov	r9, r1
 8009f90:	4630      	mov	r0, r6
 8009f92:	4639      	mov	r1, r7
 8009f94:	f7f6 fb50 	bl	8000638 <__aeabi_dmul>
 8009f98:	a363      	add	r3, pc, #396	; (adr r3, 800a128 <atan+0x2f0>)
 8009f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9e:	f7f6 f993 	bl	80002c8 <__aeabi_dsub>
 8009fa2:	4632      	mov	r2, r6
 8009fa4:	463b      	mov	r3, r7
 8009fa6:	f7f6 fb47 	bl	8000638 <__aeabi_dmul>
 8009faa:	a361      	add	r3, pc, #388	; (adr r3, 800a130 <atan+0x2f8>)
 8009fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb0:	f7f6 f98a 	bl	80002c8 <__aeabi_dsub>
 8009fb4:	4632      	mov	r2, r6
 8009fb6:	463b      	mov	r3, r7
 8009fb8:	f7f6 fb3e 	bl	8000638 <__aeabi_dmul>
 8009fbc:	a35e      	add	r3, pc, #376	; (adr r3, 800a138 <atan+0x300>)
 8009fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc2:	f7f6 f981 	bl	80002c8 <__aeabi_dsub>
 8009fc6:	4632      	mov	r2, r6
 8009fc8:	463b      	mov	r3, r7
 8009fca:	f7f6 fb35 	bl	8000638 <__aeabi_dmul>
 8009fce:	a35c      	add	r3, pc, #368	; (adr r3, 800a140 <atan+0x308>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f7f6 f978 	bl	80002c8 <__aeabi_dsub>
 8009fd8:	4632      	mov	r2, r6
 8009fda:	463b      	mov	r3, r7
 8009fdc:	f7f6 fb2c 	bl	8000638 <__aeabi_dmul>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	4640      	mov	r0, r8
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	f7f6 f970 	bl	80002cc <__adddf3>
 8009fec:	4622      	mov	r2, r4
 8009fee:	462b      	mov	r3, r5
 8009ff0:	f7f6 fb22 	bl	8000638 <__aeabi_dmul>
 8009ff4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	d14b      	bne.n	800a096 <atan+0x25e>
 8009ffe:	4620      	mov	r0, r4
 800a000:	4629      	mov	r1, r5
 800a002:	f7f6 f961 	bl	80002c8 <__aeabi_dsub>
 800a006:	e72c      	b.n	8009e62 <atan+0x2a>
 800a008:	ee10 0a10 	vmov	r0, s0
 800a00c:	4b53      	ldr	r3, [pc, #332]	; (800a15c <atan+0x324>)
 800a00e:	2200      	movs	r2, #0
 800a010:	4629      	mov	r1, r5
 800a012:	f7f6 f959 	bl	80002c8 <__aeabi_dsub>
 800a016:	4b51      	ldr	r3, [pc, #324]	; (800a15c <atan+0x324>)
 800a018:	4606      	mov	r6, r0
 800a01a:	460f      	mov	r7, r1
 800a01c:	2200      	movs	r2, #0
 800a01e:	4620      	mov	r0, r4
 800a020:	4629      	mov	r1, r5
 800a022:	f7f6 f953 	bl	80002cc <__adddf3>
 800a026:	4602      	mov	r2, r0
 800a028:	460b      	mov	r3, r1
 800a02a:	4630      	mov	r0, r6
 800a02c:	4639      	mov	r1, r7
 800a02e:	f7f6 fc2d 	bl	800088c <__aeabi_ddiv>
 800a032:	f04f 0a01 	mov.w	sl, #1
 800a036:	4604      	mov	r4, r0
 800a038:	460d      	mov	r5, r1
 800a03a:	e764      	b.n	8009f06 <atan+0xce>
 800a03c:	4b49      	ldr	r3, [pc, #292]	; (800a164 <atan+0x32c>)
 800a03e:	429e      	cmp	r6, r3
 800a040:	da1d      	bge.n	800a07e <atan+0x246>
 800a042:	ee10 0a10 	vmov	r0, s0
 800a046:	4b48      	ldr	r3, [pc, #288]	; (800a168 <atan+0x330>)
 800a048:	2200      	movs	r2, #0
 800a04a:	4629      	mov	r1, r5
 800a04c:	f7f6 f93c 	bl	80002c8 <__aeabi_dsub>
 800a050:	4b45      	ldr	r3, [pc, #276]	; (800a168 <atan+0x330>)
 800a052:	4606      	mov	r6, r0
 800a054:	460f      	mov	r7, r1
 800a056:	2200      	movs	r2, #0
 800a058:	4620      	mov	r0, r4
 800a05a:	4629      	mov	r1, r5
 800a05c:	f7f6 faec 	bl	8000638 <__aeabi_dmul>
 800a060:	4b3e      	ldr	r3, [pc, #248]	; (800a15c <atan+0x324>)
 800a062:	2200      	movs	r2, #0
 800a064:	f7f6 f932 	bl	80002cc <__adddf3>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	4630      	mov	r0, r6
 800a06e:	4639      	mov	r1, r7
 800a070:	f7f6 fc0c 	bl	800088c <__aeabi_ddiv>
 800a074:	f04f 0a02 	mov.w	sl, #2
 800a078:	4604      	mov	r4, r0
 800a07a:	460d      	mov	r5, r1
 800a07c:	e743      	b.n	8009f06 <atan+0xce>
 800a07e:	462b      	mov	r3, r5
 800a080:	ee10 2a10 	vmov	r2, s0
 800a084:	4939      	ldr	r1, [pc, #228]	; (800a16c <atan+0x334>)
 800a086:	2000      	movs	r0, #0
 800a088:	f7f6 fc00 	bl	800088c <__aeabi_ddiv>
 800a08c:	f04f 0a03 	mov.w	sl, #3
 800a090:	4604      	mov	r4, r0
 800a092:	460d      	mov	r5, r1
 800a094:	e737      	b.n	8009f06 <atan+0xce>
 800a096:	4b36      	ldr	r3, [pc, #216]	; (800a170 <atan+0x338>)
 800a098:	4e36      	ldr	r6, [pc, #216]	; (800a174 <atan+0x33c>)
 800a09a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a09e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a0a2:	e9da 2300 	ldrd	r2, r3, [sl]
 800a0a6:	f7f6 f90f 	bl	80002c8 <__aeabi_dsub>
 800a0aa:	4622      	mov	r2, r4
 800a0ac:	462b      	mov	r3, r5
 800a0ae:	f7f6 f90b 	bl	80002c8 <__aeabi_dsub>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a0ba:	f7f6 f905 	bl	80002c8 <__aeabi_dsub>
 800a0be:	f1bb 0f00 	cmp.w	fp, #0
 800a0c2:	4604      	mov	r4, r0
 800a0c4:	460d      	mov	r5, r1
 800a0c6:	f6bf aed6 	bge.w	8009e76 <atan+0x3e>
 800a0ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a0ce:	461d      	mov	r5, r3
 800a0d0:	e6d1      	b.n	8009e76 <atan+0x3e>
 800a0d2:	a51d      	add	r5, pc, #116	; (adr r5, 800a148 <atan+0x310>)
 800a0d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a0d8:	e6cd      	b.n	8009e76 <atan+0x3e>
 800a0da:	bf00      	nop
 800a0dc:	f3af 8000 	nop.w
 800a0e0:	54442d18 	.word	0x54442d18
 800a0e4:	bff921fb 	.word	0xbff921fb
 800a0e8:	8800759c 	.word	0x8800759c
 800a0ec:	7e37e43c 	.word	0x7e37e43c
 800a0f0:	e322da11 	.word	0xe322da11
 800a0f4:	3f90ad3a 	.word	0x3f90ad3a
 800a0f8:	24760deb 	.word	0x24760deb
 800a0fc:	3fa97b4b 	.word	0x3fa97b4b
 800a100:	a0d03d51 	.word	0xa0d03d51
 800a104:	3fb10d66 	.word	0x3fb10d66
 800a108:	c54c206e 	.word	0xc54c206e
 800a10c:	3fb745cd 	.word	0x3fb745cd
 800a110:	920083ff 	.word	0x920083ff
 800a114:	3fc24924 	.word	0x3fc24924
 800a118:	5555550d 	.word	0x5555550d
 800a11c:	3fd55555 	.word	0x3fd55555
 800a120:	2c6a6c2f 	.word	0x2c6a6c2f
 800a124:	bfa2b444 	.word	0xbfa2b444
 800a128:	52defd9a 	.word	0x52defd9a
 800a12c:	3fadde2d 	.word	0x3fadde2d
 800a130:	af749a6d 	.word	0xaf749a6d
 800a134:	3fb3b0f2 	.word	0x3fb3b0f2
 800a138:	fe231671 	.word	0xfe231671
 800a13c:	3fbc71c6 	.word	0x3fbc71c6
 800a140:	9998ebc4 	.word	0x9998ebc4
 800a144:	3fc99999 	.word	0x3fc99999
 800a148:	54442d18 	.word	0x54442d18
 800a14c:	3ff921fb 	.word	0x3ff921fb
 800a150:	440fffff 	.word	0x440fffff
 800a154:	7ff00000 	.word	0x7ff00000
 800a158:	3fdbffff 	.word	0x3fdbffff
 800a15c:	3ff00000 	.word	0x3ff00000
 800a160:	3ff2ffff 	.word	0x3ff2ffff
 800a164:	40038000 	.word	0x40038000
 800a168:	3ff80000 	.word	0x3ff80000
 800a16c:	bff00000 	.word	0xbff00000
 800a170:	0800b7c0 	.word	0x0800b7c0
 800a174:	0800b7a0 	.word	0x0800b7a0

0800a178 <fabs>:
 800a178:	ec51 0b10 	vmov	r0, r1, d0
 800a17c:	ee10 2a10 	vmov	r2, s0
 800a180:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a184:	ec43 2b10 	vmov	d0, r2, r3
 800a188:	4770      	bx	lr
 800a18a:	0000      	movs	r0, r0
 800a18c:	0000      	movs	r0, r0
	...

0800a190 <tan>:
 800a190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a192:	ec53 2b10 	vmov	r2, r3, d0
 800a196:	4816      	ldr	r0, [pc, #88]	; (800a1f0 <tan+0x60>)
 800a198:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a19c:	4281      	cmp	r1, r0
 800a19e:	dc07      	bgt.n	800a1b0 <tan+0x20>
 800a1a0:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800a1e8 <tan+0x58>
 800a1a4:	2001      	movs	r0, #1
 800a1a6:	b005      	add	sp, #20
 800a1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1ac:	f000 bd80 	b.w	800acb0 <__kernel_tan>
 800a1b0:	4810      	ldr	r0, [pc, #64]	; (800a1f4 <tan+0x64>)
 800a1b2:	4281      	cmp	r1, r0
 800a1b4:	dd09      	ble.n	800a1ca <tan+0x3a>
 800a1b6:	ee10 0a10 	vmov	r0, s0
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	f7f6 f884 	bl	80002c8 <__aeabi_dsub>
 800a1c0:	ec41 0b10 	vmov	d0, r0, r1
 800a1c4:	b005      	add	sp, #20
 800a1c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1ca:	4668      	mov	r0, sp
 800a1cc:	f000 f814 	bl	800a1f8 <__ieee754_rem_pio2>
 800a1d0:	0040      	lsls	r0, r0, #1
 800a1d2:	f000 0002 	and.w	r0, r0, #2
 800a1d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a1da:	ed9d 0b00 	vldr	d0, [sp]
 800a1de:	f1c0 0001 	rsb	r0, r0, #1
 800a1e2:	f000 fd65 	bl	800acb0 <__kernel_tan>
 800a1e6:	e7ed      	b.n	800a1c4 <tan+0x34>
	...
 800a1f0:	3fe921fb 	.word	0x3fe921fb
 800a1f4:	7fefffff 	.word	0x7fefffff

0800a1f8 <__ieee754_rem_pio2>:
 800a1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	ed2d 8b02 	vpush	{d8}
 800a200:	ec55 4b10 	vmov	r4, r5, d0
 800a204:	4bca      	ldr	r3, [pc, #808]	; (800a530 <__ieee754_rem_pio2+0x338>)
 800a206:	b08b      	sub	sp, #44	; 0x2c
 800a208:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a20c:	4598      	cmp	r8, r3
 800a20e:	4682      	mov	sl, r0
 800a210:	9502      	str	r5, [sp, #8]
 800a212:	dc08      	bgt.n	800a226 <__ieee754_rem_pio2+0x2e>
 800a214:	2200      	movs	r2, #0
 800a216:	2300      	movs	r3, #0
 800a218:	ed80 0b00 	vstr	d0, [r0]
 800a21c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a220:	f04f 0b00 	mov.w	fp, #0
 800a224:	e028      	b.n	800a278 <__ieee754_rem_pio2+0x80>
 800a226:	4bc3      	ldr	r3, [pc, #780]	; (800a534 <__ieee754_rem_pio2+0x33c>)
 800a228:	4598      	cmp	r8, r3
 800a22a:	dc78      	bgt.n	800a31e <__ieee754_rem_pio2+0x126>
 800a22c:	9b02      	ldr	r3, [sp, #8]
 800a22e:	4ec2      	ldr	r6, [pc, #776]	; (800a538 <__ieee754_rem_pio2+0x340>)
 800a230:	2b00      	cmp	r3, #0
 800a232:	ee10 0a10 	vmov	r0, s0
 800a236:	a3b0      	add	r3, pc, #704	; (adr r3, 800a4f8 <__ieee754_rem_pio2+0x300>)
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	4629      	mov	r1, r5
 800a23e:	dd39      	ble.n	800a2b4 <__ieee754_rem_pio2+0xbc>
 800a240:	f7f6 f842 	bl	80002c8 <__aeabi_dsub>
 800a244:	45b0      	cmp	r8, r6
 800a246:	4604      	mov	r4, r0
 800a248:	460d      	mov	r5, r1
 800a24a:	d01b      	beq.n	800a284 <__ieee754_rem_pio2+0x8c>
 800a24c:	a3ac      	add	r3, pc, #688	; (adr r3, 800a500 <__ieee754_rem_pio2+0x308>)
 800a24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a252:	f7f6 f839 	bl	80002c8 <__aeabi_dsub>
 800a256:	4602      	mov	r2, r0
 800a258:	460b      	mov	r3, r1
 800a25a:	e9ca 2300 	strd	r2, r3, [sl]
 800a25e:	4620      	mov	r0, r4
 800a260:	4629      	mov	r1, r5
 800a262:	f7f6 f831 	bl	80002c8 <__aeabi_dsub>
 800a266:	a3a6      	add	r3, pc, #664	; (adr r3, 800a500 <__ieee754_rem_pio2+0x308>)
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	f7f6 f82c 	bl	80002c8 <__aeabi_dsub>
 800a270:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a274:	f04f 0b01 	mov.w	fp, #1
 800a278:	4658      	mov	r0, fp
 800a27a:	b00b      	add	sp, #44	; 0x2c
 800a27c:	ecbd 8b02 	vpop	{d8}
 800a280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a284:	a3a0      	add	r3, pc, #640	; (adr r3, 800a508 <__ieee754_rem_pio2+0x310>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f7f6 f81d 	bl	80002c8 <__aeabi_dsub>
 800a28e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a510 <__ieee754_rem_pio2+0x318>)
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	4604      	mov	r4, r0
 800a296:	460d      	mov	r5, r1
 800a298:	f7f6 f816 	bl	80002c8 <__aeabi_dsub>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	e9ca 2300 	strd	r2, r3, [sl]
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	f7f6 f80e 	bl	80002c8 <__aeabi_dsub>
 800a2ac:	a398      	add	r3, pc, #608	; (adr r3, 800a510 <__ieee754_rem_pio2+0x318>)
 800a2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b2:	e7db      	b.n	800a26c <__ieee754_rem_pio2+0x74>
 800a2b4:	f7f6 f80a 	bl	80002cc <__adddf3>
 800a2b8:	45b0      	cmp	r8, r6
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	460d      	mov	r5, r1
 800a2be:	d016      	beq.n	800a2ee <__ieee754_rem_pio2+0xf6>
 800a2c0:	a38f      	add	r3, pc, #572	; (adr r3, 800a500 <__ieee754_rem_pio2+0x308>)
 800a2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c6:	f7f6 f801 	bl	80002cc <__adddf3>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	e9ca 2300 	strd	r2, r3, [sl]
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	f7f5 fff7 	bl	80002c8 <__aeabi_dsub>
 800a2da:	a389      	add	r3, pc, #548	; (adr r3, 800a500 <__ieee754_rem_pio2+0x308>)
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	f7f5 fff4 	bl	80002cc <__adddf3>
 800a2e4:	f04f 3bff 	mov.w	fp, #4294967295
 800a2e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a2ec:	e7c4      	b.n	800a278 <__ieee754_rem_pio2+0x80>
 800a2ee:	a386      	add	r3, pc, #536	; (adr r3, 800a508 <__ieee754_rem_pio2+0x310>)
 800a2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f4:	f7f5 ffea 	bl	80002cc <__adddf3>
 800a2f8:	a385      	add	r3, pc, #532	; (adr r3, 800a510 <__ieee754_rem_pio2+0x318>)
 800a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fe:	4604      	mov	r4, r0
 800a300:	460d      	mov	r5, r1
 800a302:	f7f5 ffe3 	bl	80002cc <__adddf3>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	e9ca 2300 	strd	r2, r3, [sl]
 800a30e:	4620      	mov	r0, r4
 800a310:	4629      	mov	r1, r5
 800a312:	f7f5 ffd9 	bl	80002c8 <__aeabi_dsub>
 800a316:	a37e      	add	r3, pc, #504	; (adr r3, 800a510 <__ieee754_rem_pio2+0x318>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	e7e0      	b.n	800a2e0 <__ieee754_rem_pio2+0xe8>
 800a31e:	4b87      	ldr	r3, [pc, #540]	; (800a53c <__ieee754_rem_pio2+0x344>)
 800a320:	4598      	cmp	r8, r3
 800a322:	f300 80d9 	bgt.w	800a4d8 <__ieee754_rem_pio2+0x2e0>
 800a326:	f7ff ff27 	bl	800a178 <fabs>
 800a32a:	ec55 4b10 	vmov	r4, r5, d0
 800a32e:	ee10 0a10 	vmov	r0, s0
 800a332:	a379      	add	r3, pc, #484	; (adr r3, 800a518 <__ieee754_rem_pio2+0x320>)
 800a334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a338:	4629      	mov	r1, r5
 800a33a:	f7f6 f97d 	bl	8000638 <__aeabi_dmul>
 800a33e:	4b80      	ldr	r3, [pc, #512]	; (800a540 <__ieee754_rem_pio2+0x348>)
 800a340:	2200      	movs	r2, #0
 800a342:	f7f5 ffc3 	bl	80002cc <__adddf3>
 800a346:	f7f6 fc27 	bl	8000b98 <__aeabi_d2iz>
 800a34a:	4683      	mov	fp, r0
 800a34c:	f7f6 f90a 	bl	8000564 <__aeabi_i2d>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	ec43 2b18 	vmov	d8, r2, r3
 800a358:	a367      	add	r3, pc, #412	; (adr r3, 800a4f8 <__ieee754_rem_pio2+0x300>)
 800a35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35e:	f7f6 f96b 	bl	8000638 <__aeabi_dmul>
 800a362:	4602      	mov	r2, r0
 800a364:	460b      	mov	r3, r1
 800a366:	4620      	mov	r0, r4
 800a368:	4629      	mov	r1, r5
 800a36a:	f7f5 ffad 	bl	80002c8 <__aeabi_dsub>
 800a36e:	a364      	add	r3, pc, #400	; (adr r3, 800a500 <__ieee754_rem_pio2+0x308>)
 800a370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a374:	4606      	mov	r6, r0
 800a376:	460f      	mov	r7, r1
 800a378:	ec51 0b18 	vmov	r0, r1, d8
 800a37c:	f7f6 f95c 	bl	8000638 <__aeabi_dmul>
 800a380:	f1bb 0f1f 	cmp.w	fp, #31
 800a384:	4604      	mov	r4, r0
 800a386:	460d      	mov	r5, r1
 800a388:	dc0d      	bgt.n	800a3a6 <__ieee754_rem_pio2+0x1ae>
 800a38a:	4b6e      	ldr	r3, [pc, #440]	; (800a544 <__ieee754_rem_pio2+0x34c>)
 800a38c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a394:	4543      	cmp	r3, r8
 800a396:	d006      	beq.n	800a3a6 <__ieee754_rem_pio2+0x1ae>
 800a398:	4622      	mov	r2, r4
 800a39a:	462b      	mov	r3, r5
 800a39c:	4630      	mov	r0, r6
 800a39e:	4639      	mov	r1, r7
 800a3a0:	f7f5 ff92 	bl	80002c8 <__aeabi_dsub>
 800a3a4:	e00f      	b.n	800a3c6 <__ieee754_rem_pio2+0x1ce>
 800a3a6:	462b      	mov	r3, r5
 800a3a8:	4622      	mov	r2, r4
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	f7f5 ff8b 	bl	80002c8 <__aeabi_dsub>
 800a3b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a3b6:	9303      	str	r3, [sp, #12]
 800a3b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a3bc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a3c0:	f1b8 0f10 	cmp.w	r8, #16
 800a3c4:	dc02      	bgt.n	800a3cc <__ieee754_rem_pio2+0x1d4>
 800a3c6:	e9ca 0100 	strd	r0, r1, [sl]
 800a3ca:	e039      	b.n	800a440 <__ieee754_rem_pio2+0x248>
 800a3cc:	a34e      	add	r3, pc, #312	; (adr r3, 800a508 <__ieee754_rem_pio2+0x310>)
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	ec51 0b18 	vmov	r0, r1, d8
 800a3d6:	f7f6 f92f 	bl	8000638 <__aeabi_dmul>
 800a3da:	4604      	mov	r4, r0
 800a3dc:	460d      	mov	r5, r1
 800a3de:	4602      	mov	r2, r0
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	4639      	mov	r1, r7
 800a3e6:	f7f5 ff6f 	bl	80002c8 <__aeabi_dsub>
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	4680      	mov	r8, r0
 800a3f0:	4689      	mov	r9, r1
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	4639      	mov	r1, r7
 800a3f6:	f7f5 ff67 	bl	80002c8 <__aeabi_dsub>
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	462b      	mov	r3, r5
 800a3fe:	f7f5 ff63 	bl	80002c8 <__aeabi_dsub>
 800a402:	a343      	add	r3, pc, #268	; (adr r3, 800a510 <__ieee754_rem_pio2+0x318>)
 800a404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a408:	4604      	mov	r4, r0
 800a40a:	460d      	mov	r5, r1
 800a40c:	ec51 0b18 	vmov	r0, r1, d8
 800a410:	f7f6 f912 	bl	8000638 <__aeabi_dmul>
 800a414:	4622      	mov	r2, r4
 800a416:	462b      	mov	r3, r5
 800a418:	f7f5 ff56 	bl	80002c8 <__aeabi_dsub>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4604      	mov	r4, r0
 800a422:	460d      	mov	r5, r1
 800a424:	4640      	mov	r0, r8
 800a426:	4649      	mov	r1, r9
 800a428:	f7f5 ff4e 	bl	80002c8 <__aeabi_dsub>
 800a42c:	9a03      	ldr	r2, [sp, #12]
 800a42e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	2b31      	cmp	r3, #49	; 0x31
 800a436:	dc24      	bgt.n	800a482 <__ieee754_rem_pio2+0x28a>
 800a438:	e9ca 0100 	strd	r0, r1, [sl]
 800a43c:	4646      	mov	r6, r8
 800a43e:	464f      	mov	r7, r9
 800a440:	e9da 8900 	ldrd	r8, r9, [sl]
 800a444:	4630      	mov	r0, r6
 800a446:	4642      	mov	r2, r8
 800a448:	464b      	mov	r3, r9
 800a44a:	4639      	mov	r1, r7
 800a44c:	f7f5 ff3c 	bl	80002c8 <__aeabi_dsub>
 800a450:	462b      	mov	r3, r5
 800a452:	4622      	mov	r2, r4
 800a454:	f7f5 ff38 	bl	80002c8 <__aeabi_dsub>
 800a458:	9b02      	ldr	r3, [sp, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a460:	f6bf af0a 	bge.w	800a278 <__ieee754_rem_pio2+0x80>
 800a464:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a468:	f8ca 3004 	str.w	r3, [sl, #4]
 800a46c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a470:	f8ca 8000 	str.w	r8, [sl]
 800a474:	f8ca 0008 	str.w	r0, [sl, #8]
 800a478:	f8ca 300c 	str.w	r3, [sl, #12]
 800a47c:	f1cb 0b00 	rsb	fp, fp, #0
 800a480:	e6fa      	b.n	800a278 <__ieee754_rem_pio2+0x80>
 800a482:	a327      	add	r3, pc, #156	; (adr r3, 800a520 <__ieee754_rem_pio2+0x328>)
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	ec51 0b18 	vmov	r0, r1, d8
 800a48c:	f7f6 f8d4 	bl	8000638 <__aeabi_dmul>
 800a490:	4604      	mov	r4, r0
 800a492:	460d      	mov	r5, r1
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4640      	mov	r0, r8
 800a49a:	4649      	mov	r1, r9
 800a49c:	f7f5 ff14 	bl	80002c8 <__aeabi_dsub>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4606      	mov	r6, r0
 800a4a6:	460f      	mov	r7, r1
 800a4a8:	4640      	mov	r0, r8
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	f7f5 ff0c 	bl	80002c8 <__aeabi_dsub>
 800a4b0:	4622      	mov	r2, r4
 800a4b2:	462b      	mov	r3, r5
 800a4b4:	f7f5 ff08 	bl	80002c8 <__aeabi_dsub>
 800a4b8:	a31b      	add	r3, pc, #108	; (adr r3, 800a528 <__ieee754_rem_pio2+0x330>)
 800a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4be:	4604      	mov	r4, r0
 800a4c0:	460d      	mov	r5, r1
 800a4c2:	ec51 0b18 	vmov	r0, r1, d8
 800a4c6:	f7f6 f8b7 	bl	8000638 <__aeabi_dmul>
 800a4ca:	4622      	mov	r2, r4
 800a4cc:	462b      	mov	r3, r5
 800a4ce:	f7f5 fefb 	bl	80002c8 <__aeabi_dsub>
 800a4d2:	4604      	mov	r4, r0
 800a4d4:	460d      	mov	r5, r1
 800a4d6:	e75f      	b.n	800a398 <__ieee754_rem_pio2+0x1a0>
 800a4d8:	4b1b      	ldr	r3, [pc, #108]	; (800a548 <__ieee754_rem_pio2+0x350>)
 800a4da:	4598      	cmp	r8, r3
 800a4dc:	dd36      	ble.n	800a54c <__ieee754_rem_pio2+0x354>
 800a4de:	ee10 2a10 	vmov	r2, s0
 800a4e2:	462b      	mov	r3, r5
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	f7f5 feee 	bl	80002c8 <__aeabi_dsub>
 800a4ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a4f0:	e9ca 0100 	strd	r0, r1, [sl]
 800a4f4:	e694      	b.n	800a220 <__ieee754_rem_pio2+0x28>
 800a4f6:	bf00      	nop
 800a4f8:	54400000 	.word	0x54400000
 800a4fc:	3ff921fb 	.word	0x3ff921fb
 800a500:	1a626331 	.word	0x1a626331
 800a504:	3dd0b461 	.word	0x3dd0b461
 800a508:	1a600000 	.word	0x1a600000
 800a50c:	3dd0b461 	.word	0x3dd0b461
 800a510:	2e037073 	.word	0x2e037073
 800a514:	3ba3198a 	.word	0x3ba3198a
 800a518:	6dc9c883 	.word	0x6dc9c883
 800a51c:	3fe45f30 	.word	0x3fe45f30
 800a520:	2e000000 	.word	0x2e000000
 800a524:	3ba3198a 	.word	0x3ba3198a
 800a528:	252049c1 	.word	0x252049c1
 800a52c:	397b839a 	.word	0x397b839a
 800a530:	3fe921fb 	.word	0x3fe921fb
 800a534:	4002d97b 	.word	0x4002d97b
 800a538:	3ff921fb 	.word	0x3ff921fb
 800a53c:	413921fb 	.word	0x413921fb
 800a540:	3fe00000 	.word	0x3fe00000
 800a544:	0800b7e0 	.word	0x0800b7e0
 800a548:	7fefffff 	.word	0x7fefffff
 800a54c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a550:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a554:	ee10 0a10 	vmov	r0, s0
 800a558:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a55c:	ee10 6a10 	vmov	r6, s0
 800a560:	460f      	mov	r7, r1
 800a562:	f7f6 fb19 	bl	8000b98 <__aeabi_d2iz>
 800a566:	f7f5 fffd 	bl	8000564 <__aeabi_i2d>
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	4630      	mov	r0, r6
 800a570:	4639      	mov	r1, r7
 800a572:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a576:	f7f5 fea7 	bl	80002c8 <__aeabi_dsub>
 800a57a:	4b23      	ldr	r3, [pc, #140]	; (800a608 <__ieee754_rem_pio2+0x410>)
 800a57c:	2200      	movs	r2, #0
 800a57e:	f7f6 f85b 	bl	8000638 <__aeabi_dmul>
 800a582:	460f      	mov	r7, r1
 800a584:	4606      	mov	r6, r0
 800a586:	f7f6 fb07 	bl	8000b98 <__aeabi_d2iz>
 800a58a:	f7f5 ffeb 	bl	8000564 <__aeabi_i2d>
 800a58e:	4602      	mov	r2, r0
 800a590:	460b      	mov	r3, r1
 800a592:	4630      	mov	r0, r6
 800a594:	4639      	mov	r1, r7
 800a596:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a59a:	f7f5 fe95 	bl	80002c8 <__aeabi_dsub>
 800a59e:	4b1a      	ldr	r3, [pc, #104]	; (800a608 <__ieee754_rem_pio2+0x410>)
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f7f6 f849 	bl	8000638 <__aeabi_dmul>
 800a5a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a5aa:	ad04      	add	r5, sp, #16
 800a5ac:	f04f 0803 	mov.w	r8, #3
 800a5b0:	46a9      	mov	r9, r5
 800a5b2:	2600      	movs	r6, #0
 800a5b4:	2700      	movs	r7, #0
 800a5b6:	4632      	mov	r2, r6
 800a5b8:	463b      	mov	r3, r7
 800a5ba:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a5be:	46c3      	mov	fp, r8
 800a5c0:	3d08      	subs	r5, #8
 800a5c2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a5c6:	f7f6 fa9f 	bl	8000b08 <__aeabi_dcmpeq>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d1f3      	bne.n	800a5b6 <__ieee754_rem_pio2+0x3be>
 800a5ce:	4b0f      	ldr	r3, [pc, #60]	; (800a60c <__ieee754_rem_pio2+0x414>)
 800a5d0:	9301      	str	r3, [sp, #4]
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	9300      	str	r3, [sp, #0]
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	465b      	mov	r3, fp
 800a5da:	4651      	mov	r1, sl
 800a5dc:	4648      	mov	r0, r9
 800a5de:	f000 f817 	bl	800a610 <__kernel_rem_pio2>
 800a5e2:	9b02      	ldr	r3, [sp, #8]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	4683      	mov	fp, r0
 800a5e8:	f6bf ae46 	bge.w	800a278 <__ieee754_rem_pio2+0x80>
 800a5ec:	e9da 2100 	ldrd	r2, r1, [sl]
 800a5f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5f4:	e9ca 2300 	strd	r2, r3, [sl]
 800a5f8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a5fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a600:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a604:	e73a      	b.n	800a47c <__ieee754_rem_pio2+0x284>
 800a606:	bf00      	nop
 800a608:	41700000 	.word	0x41700000
 800a60c:	0800b860 	.word	0x0800b860

0800a610 <__kernel_rem_pio2>:
 800a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a614:	ed2d 8b02 	vpush	{d8}
 800a618:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a61c:	f112 0f14 	cmn.w	r2, #20
 800a620:	9308      	str	r3, [sp, #32]
 800a622:	9101      	str	r1, [sp, #4]
 800a624:	4bc4      	ldr	r3, [pc, #784]	; (800a938 <__kernel_rem_pio2+0x328>)
 800a626:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a628:	900b      	str	r0, [sp, #44]	; 0x2c
 800a62a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a62e:	9302      	str	r3, [sp, #8]
 800a630:	9b08      	ldr	r3, [sp, #32]
 800a632:	f103 33ff 	add.w	r3, r3, #4294967295
 800a636:	bfa8      	it	ge
 800a638:	1ed4      	subge	r4, r2, #3
 800a63a:	9306      	str	r3, [sp, #24]
 800a63c:	bfb2      	itee	lt
 800a63e:	2400      	movlt	r4, #0
 800a640:	2318      	movge	r3, #24
 800a642:	fb94 f4f3 	sdivge	r4, r4, r3
 800a646:	f06f 0317 	mvn.w	r3, #23
 800a64a:	fb04 3303 	mla	r3, r4, r3, r3
 800a64e:	eb03 0a02 	add.w	sl, r3, r2
 800a652:	9b02      	ldr	r3, [sp, #8]
 800a654:	9a06      	ldr	r2, [sp, #24]
 800a656:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800a928 <__kernel_rem_pio2+0x318>
 800a65a:	eb03 0802 	add.w	r8, r3, r2
 800a65e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a660:	1aa7      	subs	r7, r4, r2
 800a662:	ae22      	add	r6, sp, #136	; 0x88
 800a664:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a668:	2500      	movs	r5, #0
 800a66a:	4545      	cmp	r5, r8
 800a66c:	dd13      	ble.n	800a696 <__kernel_rem_pio2+0x86>
 800a66e:	9b08      	ldr	r3, [sp, #32]
 800a670:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800a928 <__kernel_rem_pio2+0x318>
 800a674:	aa22      	add	r2, sp, #136	; 0x88
 800a676:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a67a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	9b02      	ldr	r3, [sp, #8]
 800a684:	4598      	cmp	r8, r3
 800a686:	dc2f      	bgt.n	800a6e8 <__kernel_rem_pio2+0xd8>
 800a688:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a68c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a690:	462f      	mov	r7, r5
 800a692:	2600      	movs	r6, #0
 800a694:	e01b      	b.n	800a6ce <__kernel_rem_pio2+0xbe>
 800a696:	42ef      	cmn	r7, r5
 800a698:	d407      	bmi.n	800a6aa <__kernel_rem_pio2+0x9a>
 800a69a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a69e:	f7f5 ff61 	bl	8000564 <__aeabi_i2d>
 800a6a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a6a6:	3501      	adds	r5, #1
 800a6a8:	e7df      	b.n	800a66a <__kernel_rem_pio2+0x5a>
 800a6aa:	ec51 0b18 	vmov	r0, r1, d8
 800a6ae:	e7f8      	b.n	800a6a2 <__kernel_rem_pio2+0x92>
 800a6b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a6b8:	f7f5 ffbe 	bl	8000638 <__aeabi_dmul>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a6c4:	f7f5 fe02 	bl	80002cc <__adddf3>
 800a6c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a6cc:	3601      	adds	r6, #1
 800a6ce:	9b06      	ldr	r3, [sp, #24]
 800a6d0:	429e      	cmp	r6, r3
 800a6d2:	f1a7 0708 	sub.w	r7, r7, #8
 800a6d6:	ddeb      	ble.n	800a6b0 <__kernel_rem_pio2+0xa0>
 800a6d8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a6dc:	f108 0801 	add.w	r8, r8, #1
 800a6e0:	ecab 7b02 	vstmia	fp!, {d7}
 800a6e4:	3508      	adds	r5, #8
 800a6e6:	e7cc      	b.n	800a682 <__kernel_rem_pio2+0x72>
 800a6e8:	9b02      	ldr	r3, [sp, #8]
 800a6ea:	aa0e      	add	r2, sp, #56	; 0x38
 800a6ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a6f0:	930d      	str	r3, [sp, #52]	; 0x34
 800a6f2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a6f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a6f8:	9c02      	ldr	r4, [sp, #8]
 800a6fa:	930c      	str	r3, [sp, #48]	; 0x30
 800a6fc:	00e3      	lsls	r3, r4, #3
 800a6fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a700:	ab9a      	add	r3, sp, #616	; 0x268
 800a702:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a706:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a70a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a70e:	ab72      	add	r3, sp, #456	; 0x1c8
 800a710:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a714:	46c3      	mov	fp, r8
 800a716:	46a1      	mov	r9, r4
 800a718:	f1b9 0f00 	cmp.w	r9, #0
 800a71c:	f1a5 0508 	sub.w	r5, r5, #8
 800a720:	dc77      	bgt.n	800a812 <__kernel_rem_pio2+0x202>
 800a722:	ec47 6b10 	vmov	d0, r6, r7
 800a726:	4650      	mov	r0, sl
 800a728:	f000 fd4e 	bl	800b1c8 <scalbn>
 800a72c:	ec57 6b10 	vmov	r6, r7, d0
 800a730:	2200      	movs	r2, #0
 800a732:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a736:	ee10 0a10 	vmov	r0, s0
 800a73a:	4639      	mov	r1, r7
 800a73c:	f7f5 ff7c 	bl	8000638 <__aeabi_dmul>
 800a740:	ec41 0b10 	vmov	d0, r0, r1
 800a744:	f000 fcc0 	bl	800b0c8 <floor>
 800a748:	4b7c      	ldr	r3, [pc, #496]	; (800a93c <__kernel_rem_pio2+0x32c>)
 800a74a:	ec51 0b10 	vmov	r0, r1, d0
 800a74e:	2200      	movs	r2, #0
 800a750:	f7f5 ff72 	bl	8000638 <__aeabi_dmul>
 800a754:	4602      	mov	r2, r0
 800a756:	460b      	mov	r3, r1
 800a758:	4630      	mov	r0, r6
 800a75a:	4639      	mov	r1, r7
 800a75c:	f7f5 fdb4 	bl	80002c8 <__aeabi_dsub>
 800a760:	460f      	mov	r7, r1
 800a762:	4606      	mov	r6, r0
 800a764:	f7f6 fa18 	bl	8000b98 <__aeabi_d2iz>
 800a768:	9004      	str	r0, [sp, #16]
 800a76a:	f7f5 fefb 	bl	8000564 <__aeabi_i2d>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	4630      	mov	r0, r6
 800a774:	4639      	mov	r1, r7
 800a776:	f7f5 fda7 	bl	80002c8 <__aeabi_dsub>
 800a77a:	f1ba 0f00 	cmp.w	sl, #0
 800a77e:	4606      	mov	r6, r0
 800a780:	460f      	mov	r7, r1
 800a782:	dd6d      	ble.n	800a860 <__kernel_rem_pio2+0x250>
 800a784:	1e62      	subs	r2, r4, #1
 800a786:	ab0e      	add	r3, sp, #56	; 0x38
 800a788:	9d04      	ldr	r5, [sp, #16]
 800a78a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a78e:	f1ca 0118 	rsb	r1, sl, #24
 800a792:	fa40 f301 	asr.w	r3, r0, r1
 800a796:	441d      	add	r5, r3
 800a798:	408b      	lsls	r3, r1
 800a79a:	1ac0      	subs	r0, r0, r3
 800a79c:	ab0e      	add	r3, sp, #56	; 0x38
 800a79e:	9504      	str	r5, [sp, #16]
 800a7a0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a7a4:	f1ca 0317 	rsb	r3, sl, #23
 800a7a8:	fa40 fb03 	asr.w	fp, r0, r3
 800a7ac:	f1bb 0f00 	cmp.w	fp, #0
 800a7b0:	dd65      	ble.n	800a87e <__kernel_rem_pio2+0x26e>
 800a7b2:	9b04      	ldr	r3, [sp, #16]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	9304      	str	r3, [sp, #16]
 800a7ba:	4615      	mov	r5, r2
 800a7bc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a7c0:	4294      	cmp	r4, r2
 800a7c2:	f300 809c 	bgt.w	800a8fe <__kernel_rem_pio2+0x2ee>
 800a7c6:	f1ba 0f00 	cmp.w	sl, #0
 800a7ca:	dd07      	ble.n	800a7dc <__kernel_rem_pio2+0x1cc>
 800a7cc:	f1ba 0f01 	cmp.w	sl, #1
 800a7d0:	f000 80c0 	beq.w	800a954 <__kernel_rem_pio2+0x344>
 800a7d4:	f1ba 0f02 	cmp.w	sl, #2
 800a7d8:	f000 80c6 	beq.w	800a968 <__kernel_rem_pio2+0x358>
 800a7dc:	f1bb 0f02 	cmp.w	fp, #2
 800a7e0:	d14d      	bne.n	800a87e <__kernel_rem_pio2+0x26e>
 800a7e2:	4632      	mov	r2, r6
 800a7e4:	463b      	mov	r3, r7
 800a7e6:	4956      	ldr	r1, [pc, #344]	; (800a940 <__kernel_rem_pio2+0x330>)
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	f7f5 fd6d 	bl	80002c8 <__aeabi_dsub>
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	460f      	mov	r7, r1
 800a7f2:	2d00      	cmp	r5, #0
 800a7f4:	d043      	beq.n	800a87e <__kernel_rem_pio2+0x26e>
 800a7f6:	4650      	mov	r0, sl
 800a7f8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800a930 <__kernel_rem_pio2+0x320>
 800a7fc:	f000 fce4 	bl	800b1c8 <scalbn>
 800a800:	4630      	mov	r0, r6
 800a802:	4639      	mov	r1, r7
 800a804:	ec53 2b10 	vmov	r2, r3, d0
 800a808:	f7f5 fd5e 	bl	80002c8 <__aeabi_dsub>
 800a80c:	4606      	mov	r6, r0
 800a80e:	460f      	mov	r7, r1
 800a810:	e035      	b.n	800a87e <__kernel_rem_pio2+0x26e>
 800a812:	4b4c      	ldr	r3, [pc, #304]	; (800a944 <__kernel_rem_pio2+0x334>)
 800a814:	2200      	movs	r2, #0
 800a816:	4630      	mov	r0, r6
 800a818:	4639      	mov	r1, r7
 800a81a:	f7f5 ff0d 	bl	8000638 <__aeabi_dmul>
 800a81e:	f7f6 f9bb 	bl	8000b98 <__aeabi_d2iz>
 800a822:	f7f5 fe9f 	bl	8000564 <__aeabi_i2d>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	ec43 2b18 	vmov	d8, r2, r3
 800a82e:	4b46      	ldr	r3, [pc, #280]	; (800a948 <__kernel_rem_pio2+0x338>)
 800a830:	2200      	movs	r2, #0
 800a832:	f7f5 ff01 	bl	8000638 <__aeabi_dmul>
 800a836:	4602      	mov	r2, r0
 800a838:	460b      	mov	r3, r1
 800a83a:	4630      	mov	r0, r6
 800a83c:	4639      	mov	r1, r7
 800a83e:	f7f5 fd43 	bl	80002c8 <__aeabi_dsub>
 800a842:	f7f6 f9a9 	bl	8000b98 <__aeabi_d2iz>
 800a846:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a84a:	f84b 0b04 	str.w	r0, [fp], #4
 800a84e:	ec51 0b18 	vmov	r0, r1, d8
 800a852:	f7f5 fd3b 	bl	80002cc <__adddf3>
 800a856:	f109 39ff 	add.w	r9, r9, #4294967295
 800a85a:	4606      	mov	r6, r0
 800a85c:	460f      	mov	r7, r1
 800a85e:	e75b      	b.n	800a718 <__kernel_rem_pio2+0x108>
 800a860:	d106      	bne.n	800a870 <__kernel_rem_pio2+0x260>
 800a862:	1e63      	subs	r3, r4, #1
 800a864:	aa0e      	add	r2, sp, #56	; 0x38
 800a866:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a86a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a86e:	e79d      	b.n	800a7ac <__kernel_rem_pio2+0x19c>
 800a870:	4b36      	ldr	r3, [pc, #216]	; (800a94c <__kernel_rem_pio2+0x33c>)
 800a872:	2200      	movs	r2, #0
 800a874:	f7f6 f966 	bl	8000b44 <__aeabi_dcmpge>
 800a878:	2800      	cmp	r0, #0
 800a87a:	d13d      	bne.n	800a8f8 <__kernel_rem_pio2+0x2e8>
 800a87c:	4683      	mov	fp, r0
 800a87e:	2200      	movs	r2, #0
 800a880:	2300      	movs	r3, #0
 800a882:	4630      	mov	r0, r6
 800a884:	4639      	mov	r1, r7
 800a886:	f7f6 f93f 	bl	8000b08 <__aeabi_dcmpeq>
 800a88a:	2800      	cmp	r0, #0
 800a88c:	f000 80c0 	beq.w	800aa10 <__kernel_rem_pio2+0x400>
 800a890:	1e65      	subs	r5, r4, #1
 800a892:	462b      	mov	r3, r5
 800a894:	2200      	movs	r2, #0
 800a896:	9902      	ldr	r1, [sp, #8]
 800a898:	428b      	cmp	r3, r1
 800a89a:	da6c      	bge.n	800a976 <__kernel_rem_pio2+0x366>
 800a89c:	2a00      	cmp	r2, #0
 800a89e:	f000 8089 	beq.w	800a9b4 <__kernel_rem_pio2+0x3a4>
 800a8a2:	ab0e      	add	r3, sp, #56	; 0x38
 800a8a4:	f1aa 0a18 	sub.w	sl, sl, #24
 800a8a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 80ad 	beq.w	800aa0c <__kernel_rem_pio2+0x3fc>
 800a8b2:	4650      	mov	r0, sl
 800a8b4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800a930 <__kernel_rem_pio2+0x320>
 800a8b8:	f000 fc86 	bl	800b1c8 <scalbn>
 800a8bc:	ab9a      	add	r3, sp, #616	; 0x268
 800a8be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a8c2:	ec57 6b10 	vmov	r6, r7, d0
 800a8c6:	00ec      	lsls	r4, r5, #3
 800a8c8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800a8cc:	46aa      	mov	sl, r5
 800a8ce:	f1ba 0f00 	cmp.w	sl, #0
 800a8d2:	f280 80d6 	bge.w	800aa82 <__kernel_rem_pio2+0x472>
 800a8d6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800a928 <__kernel_rem_pio2+0x318>
 800a8da:	462e      	mov	r6, r5
 800a8dc:	2e00      	cmp	r6, #0
 800a8de:	f2c0 8104 	blt.w	800aaea <__kernel_rem_pio2+0x4da>
 800a8e2:	ab72      	add	r3, sp, #456	; 0x1c8
 800a8e4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800a8e8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800a950 <__kernel_rem_pio2+0x340>
 800a8ec:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800a8f0:	f04f 0800 	mov.w	r8, #0
 800a8f4:	1baf      	subs	r7, r5, r6
 800a8f6:	e0ea      	b.n	800aace <__kernel_rem_pio2+0x4be>
 800a8f8:	f04f 0b02 	mov.w	fp, #2
 800a8fc:	e759      	b.n	800a7b2 <__kernel_rem_pio2+0x1a2>
 800a8fe:	f8d8 3000 	ldr.w	r3, [r8]
 800a902:	b955      	cbnz	r5, 800a91a <__kernel_rem_pio2+0x30a>
 800a904:	b123      	cbz	r3, 800a910 <__kernel_rem_pio2+0x300>
 800a906:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a90a:	f8c8 3000 	str.w	r3, [r8]
 800a90e:	2301      	movs	r3, #1
 800a910:	3201      	adds	r2, #1
 800a912:	f108 0804 	add.w	r8, r8, #4
 800a916:	461d      	mov	r5, r3
 800a918:	e752      	b.n	800a7c0 <__kernel_rem_pio2+0x1b0>
 800a91a:	1acb      	subs	r3, r1, r3
 800a91c:	f8c8 3000 	str.w	r3, [r8]
 800a920:	462b      	mov	r3, r5
 800a922:	e7f5      	b.n	800a910 <__kernel_rem_pio2+0x300>
 800a924:	f3af 8000 	nop.w
	...
 800a934:	3ff00000 	.word	0x3ff00000
 800a938:	0800b9a8 	.word	0x0800b9a8
 800a93c:	40200000 	.word	0x40200000
 800a940:	3ff00000 	.word	0x3ff00000
 800a944:	3e700000 	.word	0x3e700000
 800a948:	41700000 	.word	0x41700000
 800a94c:	3fe00000 	.word	0x3fe00000
 800a950:	0800b968 	.word	0x0800b968
 800a954:	1e62      	subs	r2, r4, #1
 800a956:	ab0e      	add	r3, sp, #56	; 0x38
 800a958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a95c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a960:	a90e      	add	r1, sp, #56	; 0x38
 800a962:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a966:	e739      	b.n	800a7dc <__kernel_rem_pio2+0x1cc>
 800a968:	1e62      	subs	r2, r4, #1
 800a96a:	ab0e      	add	r3, sp, #56	; 0x38
 800a96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a970:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a974:	e7f4      	b.n	800a960 <__kernel_rem_pio2+0x350>
 800a976:	a90e      	add	r1, sp, #56	; 0x38
 800a978:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	430a      	orrs	r2, r1
 800a980:	e789      	b.n	800a896 <__kernel_rem_pio2+0x286>
 800a982:	3301      	adds	r3, #1
 800a984:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a988:	2900      	cmp	r1, #0
 800a98a:	d0fa      	beq.n	800a982 <__kernel_rem_pio2+0x372>
 800a98c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a98e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800a992:	446a      	add	r2, sp
 800a994:	3a98      	subs	r2, #152	; 0x98
 800a996:	920a      	str	r2, [sp, #40]	; 0x28
 800a998:	9a08      	ldr	r2, [sp, #32]
 800a99a:	18e3      	adds	r3, r4, r3
 800a99c:	18a5      	adds	r5, r4, r2
 800a99e:	aa22      	add	r2, sp, #136	; 0x88
 800a9a0:	f104 0801 	add.w	r8, r4, #1
 800a9a4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a9a8:	9304      	str	r3, [sp, #16]
 800a9aa:	9b04      	ldr	r3, [sp, #16]
 800a9ac:	4543      	cmp	r3, r8
 800a9ae:	da04      	bge.n	800a9ba <__kernel_rem_pio2+0x3aa>
 800a9b0:	461c      	mov	r4, r3
 800a9b2:	e6a3      	b.n	800a6fc <__kernel_rem_pio2+0xec>
 800a9b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e7e4      	b.n	800a984 <__kernel_rem_pio2+0x374>
 800a9ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9bc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a9c0:	f7f5 fdd0 	bl	8000564 <__aeabi_i2d>
 800a9c4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800a9c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9ca:	46ab      	mov	fp, r5
 800a9cc:	461c      	mov	r4, r3
 800a9ce:	f04f 0900 	mov.w	r9, #0
 800a9d2:	2600      	movs	r6, #0
 800a9d4:	2700      	movs	r7, #0
 800a9d6:	9b06      	ldr	r3, [sp, #24]
 800a9d8:	4599      	cmp	r9, r3
 800a9da:	dd06      	ble.n	800a9ea <__kernel_rem_pio2+0x3da>
 800a9dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9de:	e8e3 6702 	strd	r6, r7, [r3], #8
 800a9e2:	f108 0801 	add.w	r8, r8, #1
 800a9e6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9e8:	e7df      	b.n	800a9aa <__kernel_rem_pio2+0x39a>
 800a9ea:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a9ee:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a9f2:	f7f5 fe21 	bl	8000638 <__aeabi_dmul>
 800a9f6:	4602      	mov	r2, r0
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	f7f5 fc65 	bl	80002cc <__adddf3>
 800aa02:	f109 0901 	add.w	r9, r9, #1
 800aa06:	4606      	mov	r6, r0
 800aa08:	460f      	mov	r7, r1
 800aa0a:	e7e4      	b.n	800a9d6 <__kernel_rem_pio2+0x3c6>
 800aa0c:	3d01      	subs	r5, #1
 800aa0e:	e748      	b.n	800a8a2 <__kernel_rem_pio2+0x292>
 800aa10:	ec47 6b10 	vmov	d0, r6, r7
 800aa14:	f1ca 0000 	rsb	r0, sl, #0
 800aa18:	f000 fbd6 	bl	800b1c8 <scalbn>
 800aa1c:	ec57 6b10 	vmov	r6, r7, d0
 800aa20:	4ba0      	ldr	r3, [pc, #640]	; (800aca4 <__kernel_rem_pio2+0x694>)
 800aa22:	ee10 0a10 	vmov	r0, s0
 800aa26:	2200      	movs	r2, #0
 800aa28:	4639      	mov	r1, r7
 800aa2a:	f7f6 f88b 	bl	8000b44 <__aeabi_dcmpge>
 800aa2e:	b1f8      	cbz	r0, 800aa70 <__kernel_rem_pio2+0x460>
 800aa30:	4b9d      	ldr	r3, [pc, #628]	; (800aca8 <__kernel_rem_pio2+0x698>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	4630      	mov	r0, r6
 800aa36:	4639      	mov	r1, r7
 800aa38:	f7f5 fdfe 	bl	8000638 <__aeabi_dmul>
 800aa3c:	f7f6 f8ac 	bl	8000b98 <__aeabi_d2iz>
 800aa40:	4680      	mov	r8, r0
 800aa42:	f7f5 fd8f 	bl	8000564 <__aeabi_i2d>
 800aa46:	4b97      	ldr	r3, [pc, #604]	; (800aca4 <__kernel_rem_pio2+0x694>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f7f5 fdf5 	bl	8000638 <__aeabi_dmul>
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4602      	mov	r2, r0
 800aa52:	4639      	mov	r1, r7
 800aa54:	4630      	mov	r0, r6
 800aa56:	f7f5 fc37 	bl	80002c8 <__aeabi_dsub>
 800aa5a:	f7f6 f89d 	bl	8000b98 <__aeabi_d2iz>
 800aa5e:	1c65      	adds	r5, r4, #1
 800aa60:	ab0e      	add	r3, sp, #56	; 0x38
 800aa62:	f10a 0a18 	add.w	sl, sl, #24
 800aa66:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aa6a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800aa6e:	e720      	b.n	800a8b2 <__kernel_rem_pio2+0x2a2>
 800aa70:	4630      	mov	r0, r6
 800aa72:	4639      	mov	r1, r7
 800aa74:	f7f6 f890 	bl	8000b98 <__aeabi_d2iz>
 800aa78:	ab0e      	add	r3, sp, #56	; 0x38
 800aa7a:	4625      	mov	r5, r4
 800aa7c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800aa80:	e717      	b.n	800a8b2 <__kernel_rem_pio2+0x2a2>
 800aa82:	ab0e      	add	r3, sp, #56	; 0x38
 800aa84:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800aa88:	f7f5 fd6c 	bl	8000564 <__aeabi_i2d>
 800aa8c:	4632      	mov	r2, r6
 800aa8e:	463b      	mov	r3, r7
 800aa90:	f7f5 fdd2 	bl	8000638 <__aeabi_dmul>
 800aa94:	4b84      	ldr	r3, [pc, #528]	; (800aca8 <__kernel_rem_pio2+0x698>)
 800aa96:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	4639      	mov	r1, r7
 800aaa0:	f7f5 fdca 	bl	8000638 <__aeabi_dmul>
 800aaa4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaa8:	4606      	mov	r6, r0
 800aaaa:	460f      	mov	r7, r1
 800aaac:	e70f      	b.n	800a8ce <__kernel_rem_pio2+0x2be>
 800aaae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800aab2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800aab6:	f7f5 fdbf 	bl	8000638 <__aeabi_dmul>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aac2:	f7f5 fc03 	bl	80002cc <__adddf3>
 800aac6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aaca:	f108 0801 	add.w	r8, r8, #1
 800aace:	9b02      	ldr	r3, [sp, #8]
 800aad0:	4598      	cmp	r8, r3
 800aad2:	dc01      	bgt.n	800aad8 <__kernel_rem_pio2+0x4c8>
 800aad4:	45b8      	cmp	r8, r7
 800aad6:	ddea      	ble.n	800aaae <__kernel_rem_pio2+0x49e>
 800aad8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800aadc:	ab4a      	add	r3, sp, #296	; 0x128
 800aade:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aae2:	ed87 7b00 	vstr	d7, [r7]
 800aae6:	3e01      	subs	r6, #1
 800aae8:	e6f8      	b.n	800a8dc <__kernel_rem_pio2+0x2cc>
 800aaea:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	dc0b      	bgt.n	800ab08 <__kernel_rem_pio2+0x4f8>
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	dc35      	bgt.n	800ab60 <__kernel_rem_pio2+0x550>
 800aaf4:	d059      	beq.n	800abaa <__kernel_rem_pio2+0x59a>
 800aaf6:	9b04      	ldr	r3, [sp, #16]
 800aaf8:	f003 0007 	and.w	r0, r3, #7
 800aafc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ab00:	ecbd 8b02 	vpop	{d8}
 800ab04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab08:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ab0a:	2b03      	cmp	r3, #3
 800ab0c:	d1f3      	bne.n	800aaf6 <__kernel_rem_pio2+0x4e6>
 800ab0e:	ab4a      	add	r3, sp, #296	; 0x128
 800ab10:	4423      	add	r3, r4
 800ab12:	9306      	str	r3, [sp, #24]
 800ab14:	461c      	mov	r4, r3
 800ab16:	469a      	mov	sl, r3
 800ab18:	9502      	str	r5, [sp, #8]
 800ab1a:	9b02      	ldr	r3, [sp, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f1aa 0a08 	sub.w	sl, sl, #8
 800ab22:	dc6b      	bgt.n	800abfc <__kernel_rem_pio2+0x5ec>
 800ab24:	46aa      	mov	sl, r5
 800ab26:	f1ba 0f01 	cmp.w	sl, #1
 800ab2a:	f1a4 0408 	sub.w	r4, r4, #8
 800ab2e:	f300 8085 	bgt.w	800ac3c <__kernel_rem_pio2+0x62c>
 800ab32:	9c06      	ldr	r4, [sp, #24]
 800ab34:	2000      	movs	r0, #0
 800ab36:	3408      	adds	r4, #8
 800ab38:	2100      	movs	r1, #0
 800ab3a:	2d01      	cmp	r5, #1
 800ab3c:	f300 809d 	bgt.w	800ac7a <__kernel_rem_pio2+0x66a>
 800ab40:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ab44:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ab48:	f1bb 0f00 	cmp.w	fp, #0
 800ab4c:	f040 809b 	bne.w	800ac86 <__kernel_rem_pio2+0x676>
 800ab50:	9b01      	ldr	r3, [sp, #4]
 800ab52:	e9c3 5600 	strd	r5, r6, [r3]
 800ab56:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ab5a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ab5e:	e7ca      	b.n	800aaf6 <__kernel_rem_pio2+0x4e6>
 800ab60:	3408      	adds	r4, #8
 800ab62:	ab4a      	add	r3, sp, #296	; 0x128
 800ab64:	441c      	add	r4, r3
 800ab66:	462e      	mov	r6, r5
 800ab68:	2000      	movs	r0, #0
 800ab6a:	2100      	movs	r1, #0
 800ab6c:	2e00      	cmp	r6, #0
 800ab6e:	da36      	bge.n	800abde <__kernel_rem_pio2+0x5ce>
 800ab70:	f1bb 0f00 	cmp.w	fp, #0
 800ab74:	d039      	beq.n	800abea <__kernel_rem_pio2+0x5da>
 800ab76:	4602      	mov	r2, r0
 800ab78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab7c:	9c01      	ldr	r4, [sp, #4]
 800ab7e:	e9c4 2300 	strd	r2, r3, [r4]
 800ab82:	4602      	mov	r2, r0
 800ab84:	460b      	mov	r3, r1
 800ab86:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ab8a:	f7f5 fb9d 	bl	80002c8 <__aeabi_dsub>
 800ab8e:	ae4c      	add	r6, sp, #304	; 0x130
 800ab90:	2401      	movs	r4, #1
 800ab92:	42a5      	cmp	r5, r4
 800ab94:	da2c      	bge.n	800abf0 <__kernel_rem_pio2+0x5e0>
 800ab96:	f1bb 0f00 	cmp.w	fp, #0
 800ab9a:	d002      	beq.n	800aba2 <__kernel_rem_pio2+0x592>
 800ab9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aba0:	4619      	mov	r1, r3
 800aba2:	9b01      	ldr	r3, [sp, #4]
 800aba4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800aba8:	e7a5      	b.n	800aaf6 <__kernel_rem_pio2+0x4e6>
 800abaa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800abae:	eb0d 0403 	add.w	r4, sp, r3
 800abb2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800abb6:	2000      	movs	r0, #0
 800abb8:	2100      	movs	r1, #0
 800abba:	2d00      	cmp	r5, #0
 800abbc:	da09      	bge.n	800abd2 <__kernel_rem_pio2+0x5c2>
 800abbe:	f1bb 0f00 	cmp.w	fp, #0
 800abc2:	d002      	beq.n	800abca <__kernel_rem_pio2+0x5ba>
 800abc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abc8:	4619      	mov	r1, r3
 800abca:	9b01      	ldr	r3, [sp, #4]
 800abcc:	e9c3 0100 	strd	r0, r1, [r3]
 800abd0:	e791      	b.n	800aaf6 <__kernel_rem_pio2+0x4e6>
 800abd2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800abd6:	f7f5 fb79 	bl	80002cc <__adddf3>
 800abda:	3d01      	subs	r5, #1
 800abdc:	e7ed      	b.n	800abba <__kernel_rem_pio2+0x5aa>
 800abde:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800abe2:	f7f5 fb73 	bl	80002cc <__adddf3>
 800abe6:	3e01      	subs	r6, #1
 800abe8:	e7c0      	b.n	800ab6c <__kernel_rem_pio2+0x55c>
 800abea:	4602      	mov	r2, r0
 800abec:	460b      	mov	r3, r1
 800abee:	e7c5      	b.n	800ab7c <__kernel_rem_pio2+0x56c>
 800abf0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800abf4:	f7f5 fb6a 	bl	80002cc <__adddf3>
 800abf8:	3401      	adds	r4, #1
 800abfa:	e7ca      	b.n	800ab92 <__kernel_rem_pio2+0x582>
 800abfc:	e9da 8900 	ldrd	r8, r9, [sl]
 800ac00:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ac04:	9b02      	ldr	r3, [sp, #8]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	9302      	str	r3, [sp, #8]
 800ac0a:	4632      	mov	r2, r6
 800ac0c:	463b      	mov	r3, r7
 800ac0e:	4640      	mov	r0, r8
 800ac10:	4649      	mov	r1, r9
 800ac12:	f7f5 fb5b 	bl	80002cc <__adddf3>
 800ac16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	4640      	mov	r0, r8
 800ac20:	4649      	mov	r1, r9
 800ac22:	f7f5 fb51 	bl	80002c8 <__aeabi_dsub>
 800ac26:	4632      	mov	r2, r6
 800ac28:	463b      	mov	r3, r7
 800ac2a:	f7f5 fb4f 	bl	80002cc <__adddf3>
 800ac2e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ac32:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ac36:	ed8a 7b00 	vstr	d7, [sl]
 800ac3a:	e76e      	b.n	800ab1a <__kernel_rem_pio2+0x50a>
 800ac3c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ac40:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ac44:	4640      	mov	r0, r8
 800ac46:	4632      	mov	r2, r6
 800ac48:	463b      	mov	r3, r7
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	f7f5 fb3e 	bl	80002cc <__adddf3>
 800ac50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4640      	mov	r0, r8
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	f7f5 fb34 	bl	80002c8 <__aeabi_dsub>
 800ac60:	4632      	mov	r2, r6
 800ac62:	463b      	mov	r3, r7
 800ac64:	f7f5 fb32 	bl	80002cc <__adddf3>
 800ac68:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac6c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac70:	ed84 7b00 	vstr	d7, [r4]
 800ac74:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac78:	e755      	b.n	800ab26 <__kernel_rem_pio2+0x516>
 800ac7a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ac7e:	f7f5 fb25 	bl	80002cc <__adddf3>
 800ac82:	3d01      	subs	r5, #1
 800ac84:	e759      	b.n	800ab3a <__kernel_rem_pio2+0x52a>
 800ac86:	9b01      	ldr	r3, [sp, #4]
 800ac88:	9a01      	ldr	r2, [sp, #4]
 800ac8a:	601d      	str	r5, [r3, #0]
 800ac8c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ac90:	605c      	str	r4, [r3, #4]
 800ac92:	609f      	str	r7, [r3, #8]
 800ac94:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ac98:	60d3      	str	r3, [r2, #12]
 800ac9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac9e:	6110      	str	r0, [r2, #16]
 800aca0:	6153      	str	r3, [r2, #20]
 800aca2:	e728      	b.n	800aaf6 <__kernel_rem_pio2+0x4e6>
 800aca4:	41700000 	.word	0x41700000
 800aca8:	3e700000 	.word	0x3e700000
 800acac:	00000000 	.word	0x00000000

0800acb0 <__kernel_tan>:
 800acb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acb4:	ed2d 8b06 	vpush	{d8-d10}
 800acb8:	ec5b ab10 	vmov	sl, fp, d0
 800acbc:	4be0      	ldr	r3, [pc, #896]	; (800b040 <__kernel_tan+0x390>)
 800acbe:	b083      	sub	sp, #12
 800acc0:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800acc4:	429f      	cmp	r7, r3
 800acc6:	ec59 8b11 	vmov	r8, r9, d1
 800acca:	4606      	mov	r6, r0
 800accc:	f8cd b000 	str.w	fp, [sp]
 800acd0:	dc61      	bgt.n	800ad96 <__kernel_tan+0xe6>
 800acd2:	ee10 0a10 	vmov	r0, s0
 800acd6:	4659      	mov	r1, fp
 800acd8:	f7f5 ff5e 	bl	8000b98 <__aeabi_d2iz>
 800acdc:	4605      	mov	r5, r0
 800acde:	2800      	cmp	r0, #0
 800ace0:	f040 8083 	bne.w	800adea <__kernel_tan+0x13a>
 800ace4:	1c73      	adds	r3, r6, #1
 800ace6:	4652      	mov	r2, sl
 800ace8:	4313      	orrs	r3, r2
 800acea:	433b      	orrs	r3, r7
 800acec:	d112      	bne.n	800ad14 <__kernel_tan+0x64>
 800acee:	ec4b ab10 	vmov	d0, sl, fp
 800acf2:	f7ff fa41 	bl	800a178 <fabs>
 800acf6:	49d3      	ldr	r1, [pc, #844]	; (800b044 <__kernel_tan+0x394>)
 800acf8:	ec53 2b10 	vmov	r2, r3, d0
 800acfc:	2000      	movs	r0, #0
 800acfe:	f7f5 fdc5 	bl	800088c <__aeabi_ddiv>
 800ad02:	4682      	mov	sl, r0
 800ad04:	468b      	mov	fp, r1
 800ad06:	ec4b ab10 	vmov	d0, sl, fp
 800ad0a:	b003      	add	sp, #12
 800ad0c:	ecbd 8b06 	vpop	{d8-d10}
 800ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad14:	2e01      	cmp	r6, #1
 800ad16:	d0f6      	beq.n	800ad06 <__kernel_tan+0x56>
 800ad18:	4642      	mov	r2, r8
 800ad1a:	464b      	mov	r3, r9
 800ad1c:	4650      	mov	r0, sl
 800ad1e:	4659      	mov	r1, fp
 800ad20:	f7f5 fad4 	bl	80002cc <__adddf3>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	460f      	mov	r7, r1
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	49c6      	ldr	r1, [pc, #792]	; (800b048 <__kernel_tan+0x398>)
 800ad2e:	f7f5 fdad 	bl	800088c <__aeabi_ddiv>
 800ad32:	e9cd 0100 	strd	r0, r1, [sp]
 800ad36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad3a:	462e      	mov	r6, r5
 800ad3c:	4652      	mov	r2, sl
 800ad3e:	462c      	mov	r4, r5
 800ad40:	4630      	mov	r0, r6
 800ad42:	461d      	mov	r5, r3
 800ad44:	4639      	mov	r1, r7
 800ad46:	465b      	mov	r3, fp
 800ad48:	f7f5 fabe 	bl	80002c8 <__aeabi_dsub>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	4640      	mov	r0, r8
 800ad52:	4649      	mov	r1, r9
 800ad54:	f7f5 fab8 	bl	80002c8 <__aeabi_dsub>
 800ad58:	4632      	mov	r2, r6
 800ad5a:	462b      	mov	r3, r5
 800ad5c:	f7f5 fc6c 	bl	8000638 <__aeabi_dmul>
 800ad60:	4632      	mov	r2, r6
 800ad62:	4680      	mov	r8, r0
 800ad64:	4689      	mov	r9, r1
 800ad66:	462b      	mov	r3, r5
 800ad68:	4630      	mov	r0, r6
 800ad6a:	4639      	mov	r1, r7
 800ad6c:	f7f5 fc64 	bl	8000638 <__aeabi_dmul>
 800ad70:	4bb4      	ldr	r3, [pc, #720]	; (800b044 <__kernel_tan+0x394>)
 800ad72:	2200      	movs	r2, #0
 800ad74:	f7f5 faaa 	bl	80002cc <__adddf3>
 800ad78:	4602      	mov	r2, r0
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	4649      	mov	r1, r9
 800ad80:	f7f5 faa4 	bl	80002cc <__adddf3>
 800ad84:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ad88:	f7f5 fc56 	bl	8000638 <__aeabi_dmul>
 800ad8c:	4622      	mov	r2, r4
 800ad8e:	462b      	mov	r3, r5
 800ad90:	f7f5 fa9c 	bl	80002cc <__adddf3>
 800ad94:	e7b5      	b.n	800ad02 <__kernel_tan+0x52>
 800ad96:	4bad      	ldr	r3, [pc, #692]	; (800b04c <__kernel_tan+0x39c>)
 800ad98:	429f      	cmp	r7, r3
 800ad9a:	dd26      	ble.n	800adea <__kernel_tan+0x13a>
 800ad9c:	9b00      	ldr	r3, [sp, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	da09      	bge.n	800adb6 <__kernel_tan+0x106>
 800ada2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ada6:	469b      	mov	fp, r3
 800ada8:	ee10 aa10 	vmov	sl, s0
 800adac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800adb0:	ee11 8a10 	vmov	r8, s2
 800adb4:	4699      	mov	r9, r3
 800adb6:	4652      	mov	r2, sl
 800adb8:	465b      	mov	r3, fp
 800adba:	a183      	add	r1, pc, #524	; (adr r1, 800afc8 <__kernel_tan+0x318>)
 800adbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adc0:	f7f5 fa82 	bl	80002c8 <__aeabi_dsub>
 800adc4:	4642      	mov	r2, r8
 800adc6:	464b      	mov	r3, r9
 800adc8:	4604      	mov	r4, r0
 800adca:	460d      	mov	r5, r1
 800adcc:	a180      	add	r1, pc, #512	; (adr r1, 800afd0 <__kernel_tan+0x320>)
 800adce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800add2:	f7f5 fa79 	bl	80002c8 <__aeabi_dsub>
 800add6:	4622      	mov	r2, r4
 800add8:	462b      	mov	r3, r5
 800adda:	f7f5 fa77 	bl	80002cc <__adddf3>
 800adde:	f04f 0800 	mov.w	r8, #0
 800ade2:	4682      	mov	sl, r0
 800ade4:	468b      	mov	fp, r1
 800ade6:	f04f 0900 	mov.w	r9, #0
 800adea:	4652      	mov	r2, sl
 800adec:	465b      	mov	r3, fp
 800adee:	4650      	mov	r0, sl
 800adf0:	4659      	mov	r1, fp
 800adf2:	f7f5 fc21 	bl	8000638 <__aeabi_dmul>
 800adf6:	4602      	mov	r2, r0
 800adf8:	460b      	mov	r3, r1
 800adfa:	ec43 2b18 	vmov	d8, r2, r3
 800adfe:	f7f5 fc1b 	bl	8000638 <__aeabi_dmul>
 800ae02:	ec53 2b18 	vmov	r2, r3, d8
 800ae06:	4604      	mov	r4, r0
 800ae08:	460d      	mov	r5, r1
 800ae0a:	4650      	mov	r0, sl
 800ae0c:	4659      	mov	r1, fp
 800ae0e:	f7f5 fc13 	bl	8000638 <__aeabi_dmul>
 800ae12:	a371      	add	r3, pc, #452	; (adr r3, 800afd8 <__kernel_tan+0x328>)
 800ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae18:	ec41 0b19 	vmov	d9, r0, r1
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	4629      	mov	r1, r5
 800ae20:	f7f5 fc0a 	bl	8000638 <__aeabi_dmul>
 800ae24:	a36e      	add	r3, pc, #440	; (adr r3, 800afe0 <__kernel_tan+0x330>)
 800ae26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2a:	f7f5 fa4f 	bl	80002cc <__adddf3>
 800ae2e:	4622      	mov	r2, r4
 800ae30:	462b      	mov	r3, r5
 800ae32:	f7f5 fc01 	bl	8000638 <__aeabi_dmul>
 800ae36:	a36c      	add	r3, pc, #432	; (adr r3, 800afe8 <__kernel_tan+0x338>)
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	f7f5 fa46 	bl	80002cc <__adddf3>
 800ae40:	4622      	mov	r2, r4
 800ae42:	462b      	mov	r3, r5
 800ae44:	f7f5 fbf8 	bl	8000638 <__aeabi_dmul>
 800ae48:	a369      	add	r3, pc, #420	; (adr r3, 800aff0 <__kernel_tan+0x340>)
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	f7f5 fa3d 	bl	80002cc <__adddf3>
 800ae52:	4622      	mov	r2, r4
 800ae54:	462b      	mov	r3, r5
 800ae56:	f7f5 fbef 	bl	8000638 <__aeabi_dmul>
 800ae5a:	a367      	add	r3, pc, #412	; (adr r3, 800aff8 <__kernel_tan+0x348>)
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	f7f5 fa34 	bl	80002cc <__adddf3>
 800ae64:	4622      	mov	r2, r4
 800ae66:	462b      	mov	r3, r5
 800ae68:	f7f5 fbe6 	bl	8000638 <__aeabi_dmul>
 800ae6c:	a364      	add	r3, pc, #400	; (adr r3, 800b000 <__kernel_tan+0x350>)
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	f7f5 fa2b 	bl	80002cc <__adddf3>
 800ae76:	ec53 2b18 	vmov	r2, r3, d8
 800ae7a:	f7f5 fbdd 	bl	8000638 <__aeabi_dmul>
 800ae7e:	a362      	add	r3, pc, #392	; (adr r3, 800b008 <__kernel_tan+0x358>)
 800ae80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae84:	ec41 0b1a 	vmov	d10, r0, r1
 800ae88:	4620      	mov	r0, r4
 800ae8a:	4629      	mov	r1, r5
 800ae8c:	f7f5 fbd4 	bl	8000638 <__aeabi_dmul>
 800ae90:	a35f      	add	r3, pc, #380	; (adr r3, 800b010 <__kernel_tan+0x360>)
 800ae92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae96:	f7f5 fa19 	bl	80002cc <__adddf3>
 800ae9a:	4622      	mov	r2, r4
 800ae9c:	462b      	mov	r3, r5
 800ae9e:	f7f5 fbcb 	bl	8000638 <__aeabi_dmul>
 800aea2:	a35d      	add	r3, pc, #372	; (adr r3, 800b018 <__kernel_tan+0x368>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	f7f5 fa10 	bl	80002cc <__adddf3>
 800aeac:	4622      	mov	r2, r4
 800aeae:	462b      	mov	r3, r5
 800aeb0:	f7f5 fbc2 	bl	8000638 <__aeabi_dmul>
 800aeb4:	a35a      	add	r3, pc, #360	; (adr r3, 800b020 <__kernel_tan+0x370>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	f7f5 fa07 	bl	80002cc <__adddf3>
 800aebe:	4622      	mov	r2, r4
 800aec0:	462b      	mov	r3, r5
 800aec2:	f7f5 fbb9 	bl	8000638 <__aeabi_dmul>
 800aec6:	a358      	add	r3, pc, #352	; (adr r3, 800b028 <__kernel_tan+0x378>)
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	f7f5 f9fe 	bl	80002cc <__adddf3>
 800aed0:	4622      	mov	r2, r4
 800aed2:	462b      	mov	r3, r5
 800aed4:	f7f5 fbb0 	bl	8000638 <__aeabi_dmul>
 800aed8:	a355      	add	r3, pc, #340	; (adr r3, 800b030 <__kernel_tan+0x380>)
 800aeda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aede:	f7f5 f9f5 	bl	80002cc <__adddf3>
 800aee2:	4602      	mov	r2, r0
 800aee4:	460b      	mov	r3, r1
 800aee6:	ec51 0b1a 	vmov	r0, r1, d10
 800aeea:	f7f5 f9ef 	bl	80002cc <__adddf3>
 800aeee:	ec53 2b19 	vmov	r2, r3, d9
 800aef2:	f7f5 fba1 	bl	8000638 <__aeabi_dmul>
 800aef6:	4642      	mov	r2, r8
 800aef8:	464b      	mov	r3, r9
 800aefa:	f7f5 f9e7 	bl	80002cc <__adddf3>
 800aefe:	ec53 2b18 	vmov	r2, r3, d8
 800af02:	f7f5 fb99 	bl	8000638 <__aeabi_dmul>
 800af06:	4642      	mov	r2, r8
 800af08:	464b      	mov	r3, r9
 800af0a:	f7f5 f9df 	bl	80002cc <__adddf3>
 800af0e:	a34a      	add	r3, pc, #296	; (adr r3, 800b038 <__kernel_tan+0x388>)
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	4604      	mov	r4, r0
 800af16:	460d      	mov	r5, r1
 800af18:	ec51 0b19 	vmov	r0, r1, d9
 800af1c:	f7f5 fb8c 	bl	8000638 <__aeabi_dmul>
 800af20:	4622      	mov	r2, r4
 800af22:	462b      	mov	r3, r5
 800af24:	f7f5 f9d2 	bl	80002cc <__adddf3>
 800af28:	460b      	mov	r3, r1
 800af2a:	ec41 0b18 	vmov	d8, r0, r1
 800af2e:	4602      	mov	r2, r0
 800af30:	4659      	mov	r1, fp
 800af32:	4650      	mov	r0, sl
 800af34:	f7f5 f9ca 	bl	80002cc <__adddf3>
 800af38:	4b44      	ldr	r3, [pc, #272]	; (800b04c <__kernel_tan+0x39c>)
 800af3a:	429f      	cmp	r7, r3
 800af3c:	4604      	mov	r4, r0
 800af3e:	460d      	mov	r5, r1
 800af40:	f340 8086 	ble.w	800b050 <__kernel_tan+0x3a0>
 800af44:	4630      	mov	r0, r6
 800af46:	f7f5 fb0d 	bl	8000564 <__aeabi_i2d>
 800af4a:	4622      	mov	r2, r4
 800af4c:	4680      	mov	r8, r0
 800af4e:	4689      	mov	r9, r1
 800af50:	462b      	mov	r3, r5
 800af52:	4620      	mov	r0, r4
 800af54:	4629      	mov	r1, r5
 800af56:	f7f5 fb6f 	bl	8000638 <__aeabi_dmul>
 800af5a:	4642      	mov	r2, r8
 800af5c:	4606      	mov	r6, r0
 800af5e:	460f      	mov	r7, r1
 800af60:	464b      	mov	r3, r9
 800af62:	4620      	mov	r0, r4
 800af64:	4629      	mov	r1, r5
 800af66:	f7f5 f9b1 	bl	80002cc <__adddf3>
 800af6a:	4602      	mov	r2, r0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4630      	mov	r0, r6
 800af70:	4639      	mov	r1, r7
 800af72:	f7f5 fc8b 	bl	800088c <__aeabi_ddiv>
 800af76:	ec53 2b18 	vmov	r2, r3, d8
 800af7a:	f7f5 f9a5 	bl	80002c8 <__aeabi_dsub>
 800af7e:	4602      	mov	r2, r0
 800af80:	460b      	mov	r3, r1
 800af82:	4650      	mov	r0, sl
 800af84:	4659      	mov	r1, fp
 800af86:	f7f5 f99f 	bl	80002c8 <__aeabi_dsub>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	f7f5 f99d 	bl	80002cc <__adddf3>
 800af92:	4602      	mov	r2, r0
 800af94:	460b      	mov	r3, r1
 800af96:	4640      	mov	r0, r8
 800af98:	4649      	mov	r1, r9
 800af9a:	f7f5 f995 	bl	80002c8 <__aeabi_dsub>
 800af9e:	9b00      	ldr	r3, [sp, #0]
 800afa0:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800afa4:	f00a 0a02 	and.w	sl, sl, #2
 800afa8:	4604      	mov	r4, r0
 800afaa:	f1ca 0001 	rsb	r0, sl, #1
 800afae:	460d      	mov	r5, r1
 800afb0:	f7f5 fad8 	bl	8000564 <__aeabi_i2d>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4620      	mov	r0, r4
 800afba:	4629      	mov	r1, r5
 800afbc:	f7f5 fb3c 	bl	8000638 <__aeabi_dmul>
 800afc0:	e69f      	b.n	800ad02 <__kernel_tan+0x52>
 800afc2:	bf00      	nop
 800afc4:	f3af 8000 	nop.w
 800afc8:	54442d18 	.word	0x54442d18
 800afcc:	3fe921fb 	.word	0x3fe921fb
 800afd0:	33145c07 	.word	0x33145c07
 800afd4:	3c81a626 	.word	0x3c81a626
 800afd8:	74bf7ad4 	.word	0x74bf7ad4
 800afdc:	3efb2a70 	.word	0x3efb2a70
 800afe0:	32f0a7e9 	.word	0x32f0a7e9
 800afe4:	3f12b80f 	.word	0x3f12b80f
 800afe8:	1a8d1068 	.word	0x1a8d1068
 800afec:	3f3026f7 	.word	0x3f3026f7
 800aff0:	fee08315 	.word	0xfee08315
 800aff4:	3f57dbc8 	.word	0x3f57dbc8
 800aff8:	e96e8493 	.word	0xe96e8493
 800affc:	3f8226e3 	.word	0x3f8226e3
 800b000:	1bb341fe 	.word	0x1bb341fe
 800b004:	3faba1ba 	.word	0x3faba1ba
 800b008:	db605373 	.word	0xdb605373
 800b00c:	bef375cb 	.word	0xbef375cb
 800b010:	a03792a6 	.word	0xa03792a6
 800b014:	3f147e88 	.word	0x3f147e88
 800b018:	f2f26501 	.word	0xf2f26501
 800b01c:	3f4344d8 	.word	0x3f4344d8
 800b020:	c9560328 	.word	0xc9560328
 800b024:	3f6d6d22 	.word	0x3f6d6d22
 800b028:	8406d637 	.word	0x8406d637
 800b02c:	3f9664f4 	.word	0x3f9664f4
 800b030:	1110fe7a 	.word	0x1110fe7a
 800b034:	3fc11111 	.word	0x3fc11111
 800b038:	55555563 	.word	0x55555563
 800b03c:	3fd55555 	.word	0x3fd55555
 800b040:	3e2fffff 	.word	0x3e2fffff
 800b044:	3ff00000 	.word	0x3ff00000
 800b048:	bff00000 	.word	0xbff00000
 800b04c:	3fe59427 	.word	0x3fe59427
 800b050:	2e01      	cmp	r6, #1
 800b052:	d02f      	beq.n	800b0b4 <__kernel_tan+0x404>
 800b054:	460f      	mov	r7, r1
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4689      	mov	r9, r1
 800b05c:	2000      	movs	r0, #0
 800b05e:	4917      	ldr	r1, [pc, #92]	; (800b0bc <__kernel_tan+0x40c>)
 800b060:	f7f5 fc14 	bl	800088c <__aeabi_ddiv>
 800b064:	2600      	movs	r6, #0
 800b066:	e9cd 0100 	strd	r0, r1, [sp]
 800b06a:	4652      	mov	r2, sl
 800b06c:	465b      	mov	r3, fp
 800b06e:	4630      	mov	r0, r6
 800b070:	4639      	mov	r1, r7
 800b072:	f7f5 f929 	bl	80002c8 <__aeabi_dsub>
 800b076:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	ec51 0b18 	vmov	r0, r1, d8
 800b082:	f7f5 f921 	bl	80002c8 <__aeabi_dsub>
 800b086:	4632      	mov	r2, r6
 800b088:	462b      	mov	r3, r5
 800b08a:	f7f5 fad5 	bl	8000638 <__aeabi_dmul>
 800b08e:	46b0      	mov	r8, r6
 800b090:	460f      	mov	r7, r1
 800b092:	4642      	mov	r2, r8
 800b094:	462b      	mov	r3, r5
 800b096:	4634      	mov	r4, r6
 800b098:	4649      	mov	r1, r9
 800b09a:	4606      	mov	r6, r0
 800b09c:	4640      	mov	r0, r8
 800b09e:	f7f5 facb 	bl	8000638 <__aeabi_dmul>
 800b0a2:	4b07      	ldr	r3, [pc, #28]	; (800b0c0 <__kernel_tan+0x410>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f7f5 f911 	bl	80002cc <__adddf3>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	4639      	mov	r1, r7
 800b0b2:	e665      	b.n	800ad80 <__kernel_tan+0xd0>
 800b0b4:	4682      	mov	sl, r0
 800b0b6:	468b      	mov	fp, r1
 800b0b8:	e625      	b.n	800ad06 <__kernel_tan+0x56>
 800b0ba:	bf00      	nop
 800b0bc:	bff00000 	.word	0xbff00000
 800b0c0:	3ff00000 	.word	0x3ff00000
 800b0c4:	00000000 	.word	0x00000000

0800b0c8 <floor>:
 800b0c8:	ec51 0b10 	vmov	r0, r1, d0
 800b0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b0d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b0d8:	2e13      	cmp	r6, #19
 800b0da:	ee10 5a10 	vmov	r5, s0
 800b0de:	ee10 8a10 	vmov	r8, s0
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	dc32      	bgt.n	800b14c <floor+0x84>
 800b0e6:	2e00      	cmp	r6, #0
 800b0e8:	da14      	bge.n	800b114 <floor+0x4c>
 800b0ea:	a333      	add	r3, pc, #204	; (adr r3, 800b1b8 <floor+0xf0>)
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	f7f5 f8ec 	bl	80002cc <__adddf3>
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f7f5 fd2e 	bl	8000b58 <__aeabi_dcmpgt>
 800b0fc:	b138      	cbz	r0, 800b10e <floor+0x46>
 800b0fe:	2c00      	cmp	r4, #0
 800b100:	da57      	bge.n	800b1b2 <floor+0xea>
 800b102:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b106:	431d      	orrs	r5, r3
 800b108:	d001      	beq.n	800b10e <floor+0x46>
 800b10a:	4c2d      	ldr	r4, [pc, #180]	; (800b1c0 <floor+0xf8>)
 800b10c:	2500      	movs	r5, #0
 800b10e:	4621      	mov	r1, r4
 800b110:	4628      	mov	r0, r5
 800b112:	e025      	b.n	800b160 <floor+0x98>
 800b114:	4f2b      	ldr	r7, [pc, #172]	; (800b1c4 <floor+0xfc>)
 800b116:	4137      	asrs	r7, r6
 800b118:	ea01 0307 	and.w	r3, r1, r7
 800b11c:	4303      	orrs	r3, r0
 800b11e:	d01f      	beq.n	800b160 <floor+0x98>
 800b120:	a325      	add	r3, pc, #148	; (adr r3, 800b1b8 <floor+0xf0>)
 800b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b126:	f7f5 f8d1 	bl	80002cc <__adddf3>
 800b12a:	2200      	movs	r2, #0
 800b12c:	2300      	movs	r3, #0
 800b12e:	f7f5 fd13 	bl	8000b58 <__aeabi_dcmpgt>
 800b132:	2800      	cmp	r0, #0
 800b134:	d0eb      	beq.n	800b10e <floor+0x46>
 800b136:	2c00      	cmp	r4, #0
 800b138:	bfbe      	ittt	lt
 800b13a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b13e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b142:	19a4      	addlt	r4, r4, r6
 800b144:	ea24 0407 	bic.w	r4, r4, r7
 800b148:	2500      	movs	r5, #0
 800b14a:	e7e0      	b.n	800b10e <floor+0x46>
 800b14c:	2e33      	cmp	r6, #51	; 0x33
 800b14e:	dd0b      	ble.n	800b168 <floor+0xa0>
 800b150:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b154:	d104      	bne.n	800b160 <floor+0x98>
 800b156:	ee10 2a10 	vmov	r2, s0
 800b15a:	460b      	mov	r3, r1
 800b15c:	f7f5 f8b6 	bl	80002cc <__adddf3>
 800b160:	ec41 0b10 	vmov	d0, r0, r1
 800b164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b168:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b16c:	f04f 33ff 	mov.w	r3, #4294967295
 800b170:	fa23 f707 	lsr.w	r7, r3, r7
 800b174:	4207      	tst	r7, r0
 800b176:	d0f3      	beq.n	800b160 <floor+0x98>
 800b178:	a30f      	add	r3, pc, #60	; (adr r3, 800b1b8 <floor+0xf0>)
 800b17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17e:	f7f5 f8a5 	bl	80002cc <__adddf3>
 800b182:	2200      	movs	r2, #0
 800b184:	2300      	movs	r3, #0
 800b186:	f7f5 fce7 	bl	8000b58 <__aeabi_dcmpgt>
 800b18a:	2800      	cmp	r0, #0
 800b18c:	d0bf      	beq.n	800b10e <floor+0x46>
 800b18e:	2c00      	cmp	r4, #0
 800b190:	da02      	bge.n	800b198 <floor+0xd0>
 800b192:	2e14      	cmp	r6, #20
 800b194:	d103      	bne.n	800b19e <floor+0xd6>
 800b196:	3401      	adds	r4, #1
 800b198:	ea25 0507 	bic.w	r5, r5, r7
 800b19c:	e7b7      	b.n	800b10e <floor+0x46>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b1a4:	fa03 f606 	lsl.w	r6, r3, r6
 800b1a8:	4435      	add	r5, r6
 800b1aa:	4545      	cmp	r5, r8
 800b1ac:	bf38      	it	cc
 800b1ae:	18e4      	addcc	r4, r4, r3
 800b1b0:	e7f2      	b.n	800b198 <floor+0xd0>
 800b1b2:	2500      	movs	r5, #0
 800b1b4:	462c      	mov	r4, r5
 800b1b6:	e7aa      	b.n	800b10e <floor+0x46>
 800b1b8:	8800759c 	.word	0x8800759c
 800b1bc:	7e37e43c 	.word	0x7e37e43c
 800b1c0:	bff00000 	.word	0xbff00000
 800b1c4:	000fffff 	.word	0x000fffff

0800b1c8 <scalbn>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	ec55 4b10 	vmov	r4, r5, d0
 800b1ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b1d2:	4606      	mov	r6, r0
 800b1d4:	462b      	mov	r3, r5
 800b1d6:	b99a      	cbnz	r2, 800b200 <scalbn+0x38>
 800b1d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b1dc:	4323      	orrs	r3, r4
 800b1de:	d036      	beq.n	800b24e <scalbn+0x86>
 800b1e0:	4b39      	ldr	r3, [pc, #228]	; (800b2c8 <scalbn+0x100>)
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	ee10 0a10 	vmov	r0, s0
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f7f5 fa25 	bl	8000638 <__aeabi_dmul>
 800b1ee:	4b37      	ldr	r3, [pc, #220]	; (800b2cc <scalbn+0x104>)
 800b1f0:	429e      	cmp	r6, r3
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	460d      	mov	r5, r1
 800b1f6:	da10      	bge.n	800b21a <scalbn+0x52>
 800b1f8:	a32b      	add	r3, pc, #172	; (adr r3, 800b2a8 <scalbn+0xe0>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	e03a      	b.n	800b276 <scalbn+0xae>
 800b200:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b204:	428a      	cmp	r2, r1
 800b206:	d10c      	bne.n	800b222 <scalbn+0x5a>
 800b208:	ee10 2a10 	vmov	r2, s0
 800b20c:	4620      	mov	r0, r4
 800b20e:	4629      	mov	r1, r5
 800b210:	f7f5 f85c 	bl	80002cc <__adddf3>
 800b214:	4604      	mov	r4, r0
 800b216:	460d      	mov	r5, r1
 800b218:	e019      	b.n	800b24e <scalbn+0x86>
 800b21a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b21e:	460b      	mov	r3, r1
 800b220:	3a36      	subs	r2, #54	; 0x36
 800b222:	4432      	add	r2, r6
 800b224:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b228:	428a      	cmp	r2, r1
 800b22a:	dd08      	ble.n	800b23e <scalbn+0x76>
 800b22c:	2d00      	cmp	r5, #0
 800b22e:	a120      	add	r1, pc, #128	; (adr r1, 800b2b0 <scalbn+0xe8>)
 800b230:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b234:	da1c      	bge.n	800b270 <scalbn+0xa8>
 800b236:	a120      	add	r1, pc, #128	; (adr r1, 800b2b8 <scalbn+0xf0>)
 800b238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b23c:	e018      	b.n	800b270 <scalbn+0xa8>
 800b23e:	2a00      	cmp	r2, #0
 800b240:	dd08      	ble.n	800b254 <scalbn+0x8c>
 800b242:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b246:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b24a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b24e:	ec45 4b10 	vmov	d0, r4, r5
 800b252:	bd70      	pop	{r4, r5, r6, pc}
 800b254:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b258:	da19      	bge.n	800b28e <scalbn+0xc6>
 800b25a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b25e:	429e      	cmp	r6, r3
 800b260:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b264:	dd0a      	ble.n	800b27c <scalbn+0xb4>
 800b266:	a112      	add	r1, pc, #72	; (adr r1, 800b2b0 <scalbn+0xe8>)
 800b268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1e2      	bne.n	800b236 <scalbn+0x6e>
 800b270:	a30f      	add	r3, pc, #60	; (adr r3, 800b2b0 <scalbn+0xe8>)
 800b272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b276:	f7f5 f9df 	bl	8000638 <__aeabi_dmul>
 800b27a:	e7cb      	b.n	800b214 <scalbn+0x4c>
 800b27c:	a10a      	add	r1, pc, #40	; (adr r1, 800b2a8 <scalbn+0xe0>)
 800b27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d0b8      	beq.n	800b1f8 <scalbn+0x30>
 800b286:	a10e      	add	r1, pc, #56	; (adr r1, 800b2c0 <scalbn+0xf8>)
 800b288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b28c:	e7b4      	b.n	800b1f8 <scalbn+0x30>
 800b28e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b292:	3236      	adds	r2, #54	; 0x36
 800b294:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b298:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b29c:	4620      	mov	r0, r4
 800b29e:	4b0c      	ldr	r3, [pc, #48]	; (800b2d0 <scalbn+0x108>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	e7e8      	b.n	800b276 <scalbn+0xae>
 800b2a4:	f3af 8000 	nop.w
 800b2a8:	c2f8f359 	.word	0xc2f8f359
 800b2ac:	01a56e1f 	.word	0x01a56e1f
 800b2b0:	8800759c 	.word	0x8800759c
 800b2b4:	7e37e43c 	.word	0x7e37e43c
 800b2b8:	8800759c 	.word	0x8800759c
 800b2bc:	fe37e43c 	.word	0xfe37e43c
 800b2c0:	c2f8f359 	.word	0xc2f8f359
 800b2c4:	81a56e1f 	.word	0x81a56e1f
 800b2c8:	43500000 	.word	0x43500000
 800b2cc:	ffff3cb0 	.word	0xffff3cb0
 800b2d0:	3c900000 	.word	0x3c900000

0800b2d4 <_close>:
 800b2d4:	4b02      	ldr	r3, [pc, #8]	; (800b2e0 <_close+0xc>)
 800b2d6:	2258      	movs	r2, #88	; 0x58
 800b2d8:	601a      	str	r2, [r3, #0]
 800b2da:	f04f 30ff 	mov.w	r0, #4294967295
 800b2de:	4770      	bx	lr
 800b2e0:	200006b4 	.word	0x200006b4

0800b2e4 <_fstat>:
 800b2e4:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <_fstat+0xc>)
 800b2e6:	2258      	movs	r2, #88	; 0x58
 800b2e8:	601a      	str	r2, [r3, #0]
 800b2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ee:	4770      	bx	lr
 800b2f0:	200006b4 	.word	0x200006b4

0800b2f4 <_getpid>:
 800b2f4:	4b02      	ldr	r3, [pc, #8]	; (800b300 <_getpid+0xc>)
 800b2f6:	2258      	movs	r2, #88	; 0x58
 800b2f8:	601a      	str	r2, [r3, #0]
 800b2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fe:	4770      	bx	lr
 800b300:	200006b4 	.word	0x200006b4

0800b304 <_isatty>:
 800b304:	4b02      	ldr	r3, [pc, #8]	; (800b310 <_isatty+0xc>)
 800b306:	2258      	movs	r2, #88	; 0x58
 800b308:	601a      	str	r2, [r3, #0]
 800b30a:	2000      	movs	r0, #0
 800b30c:	4770      	bx	lr
 800b30e:	bf00      	nop
 800b310:	200006b4 	.word	0x200006b4

0800b314 <_kill>:
 800b314:	4b02      	ldr	r3, [pc, #8]	; (800b320 <_kill+0xc>)
 800b316:	2258      	movs	r2, #88	; 0x58
 800b318:	601a      	str	r2, [r3, #0]
 800b31a:	f04f 30ff 	mov.w	r0, #4294967295
 800b31e:	4770      	bx	lr
 800b320:	200006b4 	.word	0x200006b4

0800b324 <_lseek>:
 800b324:	4b02      	ldr	r3, [pc, #8]	; (800b330 <_lseek+0xc>)
 800b326:	2258      	movs	r2, #88	; 0x58
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	f04f 30ff 	mov.w	r0, #4294967295
 800b32e:	4770      	bx	lr
 800b330:	200006b4 	.word	0x200006b4

0800b334 <_read>:
 800b334:	4b02      	ldr	r3, [pc, #8]	; (800b340 <_read+0xc>)
 800b336:	2258      	movs	r2, #88	; 0x58
 800b338:	601a      	str	r2, [r3, #0]
 800b33a:	f04f 30ff 	mov.w	r0, #4294967295
 800b33e:	4770      	bx	lr
 800b340:	200006b4 	.word	0x200006b4

0800b344 <_sbrk>:
 800b344:	4a04      	ldr	r2, [pc, #16]	; (800b358 <_sbrk+0x14>)
 800b346:	6811      	ldr	r1, [r2, #0]
 800b348:	4603      	mov	r3, r0
 800b34a:	b909      	cbnz	r1, 800b350 <_sbrk+0xc>
 800b34c:	4903      	ldr	r1, [pc, #12]	; (800b35c <_sbrk+0x18>)
 800b34e:	6011      	str	r1, [r2, #0]
 800b350:	6810      	ldr	r0, [r2, #0]
 800b352:	4403      	add	r3, r0
 800b354:	6013      	str	r3, [r2, #0]
 800b356:	4770      	bx	lr
 800b358:	200006bc 	.word	0x200006bc
 800b35c:	200006c0 	.word	0x200006c0

0800b360 <_write>:
 800b360:	4b02      	ldr	r3, [pc, #8]	; (800b36c <_write+0xc>)
 800b362:	2258      	movs	r2, #88	; 0x58
 800b364:	601a      	str	r2, [r3, #0]
 800b366:	f04f 30ff 	mov.w	r0, #4294967295
 800b36a:	4770      	bx	lr
 800b36c:	200006b4 	.word	0x200006b4

0800b370 <_exit>:
 800b370:	e7fe      	b.n	800b370 <_exit>
	...

0800b374 <_init>:
 800b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b376:	bf00      	nop
 800b378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b37a:	bc08      	pop	{r3}
 800b37c:	469e      	mov	lr, r3
 800b37e:	4770      	bx	lr

0800b380 <_fini>:
 800b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b382:	bf00      	nop
 800b384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b386:	bc08      	pop	{r3}
 800b388:	469e      	mov	lr, r3
 800b38a:	4770      	bx	lr
