
Robonaut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b81c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000630  0800b9f0  0800b9f0  0001b9f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c020  0800c020  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c020  0800c020  0001c020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c028  0800c028  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c028  0800c028  0001c028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c02c  0800c02c  0001c02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000954  200001e8  0800c218  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b3c  0800c218  00020b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189b2  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b8a  00000000  00000000  00038bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  0003b758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003cac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d86  00000000  00000000  0003dd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ce4  00000000  00000000  00065aae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fafd8  00000000  00000000  0007e792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017976a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006798  00000000  00000000  001797bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0017ff54  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  00180020  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b9d4 	.word	0x0800b9d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800b9d4 	.word	0x0800b9d4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <BT_TransmitMsg>:

#include <string.h>
#include "main.h"

void BT_TransmitMsg(UART_HandleTypeDef *huart, unsigned char *msg_to_send)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	uint32_t len = strlen((char*)msg_to_send);
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f7ff f93a 	bl	8000210 <strlen>
 8000f9c:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t*)msg_to_send, len, 100);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	2364      	movs	r3, #100	; 0x64
 8000fa4:	6839      	ldr	r1, [r7, #0]
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f005 fff1 	bl	8006f8e <HAL_UART_Transmit>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <LS_LED_Light>:
#include <stdbool.h>
#include <math.h>

// Az utolsó beadott érték mindig 33-nál nagyobb legyen!
void LS_LED_Light(SPI_HandleTypeDef *hspi, uint8_t *leds_to_light)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_on[4] = {0};
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
	uint8_t fb_leds_on_temp[4] = {0};
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
	for (int i=0; leds_to_light[i]<33; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fca:	e082      	b.n	80010d2 <LS_LED_Light+0x11e>
	{
		switch(leds_to_light[i]/8) {
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	08db      	lsrs	r3, r3, #3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d877      	bhi.n	80010cc <LS_LED_Light+0x118>
 8000fdc:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <LS_LED_Light+0x30>)
 8000fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe2:	bf00      	nop
 8000fe4:	08000ff5 	.word	0x08000ff5
 8000fe8:	0800102b 	.word	0x0800102b
 8000fec:	08001061 	.word	0x08001061
 8000ff0:	08001097 	.word	0x08001097
		case 0:
			fb_leds_on_temp[3] = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
 8000ffc:	e006      	b.n	800100c <LS_LED_Light+0x58>
				fb_leds_on_temp[3] <<= 1;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	3301      	adds	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	6a3a      	ldr	r2, [r7, #32]
 800101a:	429a      	cmp	r2, r3
 800101c:	dbef      	blt.n	8000ffe <LS_LED_Light+0x4a>
			}
			fb_leds_on[3] |= fb_leds_on_temp[3];
 800101e:	7cfa      	ldrb	r2, [r7, #19]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	4313      	orrs	r3, r2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	74fb      	strb	r3, [r7, #19]
			break;
 8001028:	e050      	b.n	80010cc <LS_LED_Light+0x118>
		case 1:
			fb_leds_on_temp[2] = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	e006      	b.n	8001042 <LS_LED_Light+0x8e>
				fb_leds_on_temp[2] <<= 1;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	3301      	adds	r3, #1
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbef      	blt.n	8001034 <LS_LED_Light+0x80>
			}
			fb_leds_on[2] |= fb_leds_on_temp[2];
 8001054:	7cba      	ldrb	r2, [r7, #18]
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	4313      	orrs	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	74bb      	strb	r3, [r7, #18]
			break;
 800105e:	e035      	b.n	80010cc <LS_LED_Light+0x118>
		case 2:
			fb_leds_on_temp[1] = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	e006      	b.n	8001078 <LS_LED_Light+0xc4>
				fb_leds_on_temp[1] <<= 1;
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	3301      	adds	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	429a      	cmp	r2, r3
 8001088:	dbef      	blt.n	800106a <LS_LED_Light+0xb6>
			}
			fb_leds_on[1] |= fb_leds_on_temp[1];
 800108a:	7c7a      	ldrb	r2, [r7, #17]
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	4313      	orrs	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	747b      	strb	r3, [r7, #17]
			break;
 8001094:	e01a      	b.n	80010cc <LS_LED_Light+0x118>
		case 3:
			fb_leds_on_temp[0] = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e006      	b.n	80010ae <LS_LED_Light+0xfa>
				fb_leds_on_temp[0] <<= 1;
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbef      	blt.n	80010a0 <LS_LED_Light+0xec>
			}
			fb_leds_on[0] |= fb_leds_on_temp[0];
 80010c0:	7c3a      	ldrb	r2, [r7, #16]
 80010c2:	7b3b      	ldrb	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	743b      	strb	r3, [r7, #16]
			break;
 80010ca:	bf00      	nop
	for (int i=0; leds_to_light[i]<33; i++)
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	3301      	adds	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b20      	cmp	r3, #32
 80010dc:	f67f af76 	bls.w	8000fcc <LS_LED_Light+0x18>
		}
	}
	LS_LED_Send(hspi, fb_leds_on);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f804 	bl	80010f4 <LS_LED_Send>
}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <LS_LED_Send>:

void LS_LED_Send(SPI_HandleTypeDef *hspi, uint8_t *leds_on)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 80010fe:	2364      	movs	r3, #100	; 0x64
 8001100:	2204      	movs	r2, #4
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f003 fde8 	bl	8004cda <HAL_SPI_Transmit>

	// Latch enable
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <LS_LED_Send+0x4c>)
 8001112:	f002 fdc3 	bl	8003c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <LS_LED_Send+0x4c>)
 800111e:	f002 fdbd 	bl	8003c9c <HAL_GPIO_WritePin>

	//Output enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2104      	movs	r1, #4
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <LS_LED_Send+0x50>)
 8001128:	f002 fdb8 	bl	8003c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2104      	movs	r1, #4
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <LS_LED_Send+0x50>)
 8001132:	f002 fdb3 	bl	8003c9c <HAL_GPIO_WritePin>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00

08001148 <LS_INF_Send>:

void LS_INF_Send(SPI_HandleTypeDef *hspi, uint8_t *infs_on)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, infs_on, 4, 100);
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	2204      	movs	r2, #4
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f003 fdbe 	bl	8004cda <HAL_SPI_Transmit>

	// Inf Latch enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <LS_INF_Send+0x50>)
 8001166:	f002 fd99 	bl	8003c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <LS_INF_Send+0x50>)
 8001172:	f002 fd93 	bl	8003c9c <HAL_GPIO_WritePin>

	// Inf Output enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <LS_INF_Send+0x50>)
 800117e:	f002 fd8d 	bl	8003c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <LS_INF_Send+0x50>)
 800118a:	f002 fd87 	bl	8003c9c <HAL_GPIO_WritePin>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020000 	.word	0x40020000

0800119c <LS_ADC_ChipSelect>:
			  HAL_Delay(100);
		  }
}

void LS_ADC_ChipSelect(int CS)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	switch(CS) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d827      	bhi.n	80011fc <LS_ADC_ChipSelect+0x60>
 80011ac:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <LS_ADC_ChipSelect+0x18>)
 80011ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b2:	bf00      	nop
 80011b4:	080011c5 	.word	0x080011c5
 80011b8:	080011d3 	.word	0x080011d3
 80011bc:	080011e1 	.word	0x080011e1
 80011c0:	080011ef 	.word	0x080011ef
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ca:	481b      	ldr	r0, [pc, #108]	; (8001238 <LS_ADC_ChipSelect+0x9c>)
 80011cc:	f002 fd66 	bl	8003c9c <HAL_GPIO_WritePin>
		break;
 80011d0:	e02d      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d8:	4818      	ldr	r0, [pc, #96]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011da:	f002 fd5f 	bl	8003c9c <HAL_GPIO_WritePin>
		break;
 80011de:	e026      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011e8:	f002 fd58 	bl	8003c9c <HAL_GPIO_WritePin>
		break;
 80011ec:	e01f      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011f6:	f002 fd51 	bl	8003c9c <HAL_GPIO_WritePin>
		break;
 80011fa:	e018      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	default:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <LS_ADC_ChipSelect+0x9c>)
 8001204:	f002 fd4a 	bl	8003c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 8001210:	f002 fd44 	bl	8003c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 800121c:	f002 fd3e 	bl	8003c9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 8001228:	f002 fd38 	bl	8003c9c <HAL_GPIO_WritePin>
	}
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020800 	.word	0x40020800
 800123c:	40020400 	.word	0x40020400

08001240 <LS_Holavonal_favago>:
	sum -= 32*250;
	line = (double)weighted_sum/sum;
	return line;
}

float LS_Holavonal_favago(uint16_t *ADC_values, int prev_value, int* summ, int* MA_sum){
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
    int m = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    int sum = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
    float alpha = 0.1;
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <LS_Holavonal_favago+0xd8>)
 8001258:	613b      	str	r3, [r7, #16]
    *summ = 0;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
    for(int i=0; i<32; i++){
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e01c      	b.n	80012a0 <LS_Holavonal_favago+0x60>
        if (ADC_values[i] > 2500){
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	4413      	add	r3, r2
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001274:	4293      	cmp	r3, r2
 8001276:	d910      	bls.n	800129a <LS_Holavonal_favago+0x5a>
        	*summ += ADC_values[i];
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	0052      	lsls	r2, r2, #1
 8001280:	68f9      	ldr	r1, [r7, #12]
 8001282:	440a      	add	r2, r1
 8001284:	8812      	ldrh	r2, [r2, #0]
 8001286:	441a      	add	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	601a      	str	r2, [r3, #0]
            sum += i;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	4413      	add	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
            m++;
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	3301      	adds	r3, #1
 8001298:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<32; i++){
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	3301      	adds	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2b1f      	cmp	r3, #31
 80012a4:	dddf      	ble.n	8001266 <LS_Holavonal_favago+0x26>
        }
    }
    if(m == 0)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <LS_Holavonal_favago+0x78>
		return prev_value;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	e027      	b.n	8001308 <LS_Holavonal_favago+0xc8>
    *MA_sum = alpha * *summ + (1-alpha) * *MA_sum;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f0:	ee17 2a90 	vmov	r2, s15
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	601a      	str	r2, [r3, #0]
    return sum/m;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001308:	eeb0 0a67 	vmov.f32	s0, s15
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	3dcccccd 	.word	0x3dcccccd

0800131c <LineSensor_FrontAndBack>:
	}
}

void LineSensor_FrontAndBack(UART_HandleTypeDef *huart, SPI_HandleTypeDef *hspi_led, SPI_HandleTypeDef *hspi_sense_front,
		SPI_HandleTypeDef *hspi_sense_rear, uint16_t *ADC_values_front, uint16_t *ADC_values_rear)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b090      	sub	sp, #64	; 0x40
 8001320:	af02      	add	r7, sp, #8
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	603b      	str	r3, [r7, #0]
	uint8_t leds_on[4];// = {1, 1, 1, 1};

	uint8_t ADC_inputs[] = {0, 8, 16, 24, 32, 40, 48, 56};
 800132a:	4a92      	ldr	r2, [pc, #584]	; (8001574 <LineSensor_FrontAndBack+0x258>)
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001334:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ADC_received_msg[2];

	//LS_INF_Send(&hspi3, leds_off);

	// Turn on first set of LEDs
	leds_on[0] = 1;leds_on[1] = 1;leds_on[2] = 1;leds_on[3] = 1;
 8001338:	2301      	movs	r3, #1
 800133a:	f887 3020 	strb.w	r3, [r7, #32]
 800133e:	2301      	movs	r3, #1
 8001340:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001344:	2301      	movs	r3, #1
 8001346:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800134a:	2301      	movs	r3, #1
 800134c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	LS_INF_Send(hspi_led, leds_on);
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	4619      	mov	r1, r3
 8001356:	68b8      	ldr	r0, [r7, #8]
 8001358:	f7ff fef6 	bl	8001148 <LS_INF_Send>
	HAL_Delay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f001 ff61 	bl	8003224 <HAL_Delay>
	// Retrieve data from first set of ADCs - Front
	for (int i=1; i<5; i++)
 8001362:	2301      	movs	r3, #1
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
 8001366:	e02a      	b.n	80013be <LineSensor_FrontAndBack+0xa2>
	{
	  LS_ADC_ChipSelect(i);
 8001368:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800136a:	f7ff ff17 	bl	800119c <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 800136e:	f107 0214 	add.w	r2, r7, #20
 8001372:	f107 0118 	add.w	r1, r7, #24
 8001376:	2364      	movs	r3, #100	; 0x64
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2302      	movs	r3, #2
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f003 fde8 	bl	8004f52 <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 8001382:	f107 0214 	add.w	r2, r7, #20
 8001386:	f107 0118 	add.w	r1, r7, #24
 800138a:	2364      	movs	r3, #100	; 0x64
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2302      	movs	r3, #2
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f003 fdde 	bl	8004f52 <HAL_SPI_TransmitReceive>
	  ADC_values_front[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001396:	7d7b      	ldrb	r3, [r7, #21]
 8001398:	b21a      	sxth	r2, r3
 800139a:	7d3b      	ldrb	r3, [r7, #20]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b219      	sxth	r1, r3
 80013a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a6:	3b01      	subs	r3, #1
 80013a8:	011b      	lsls	r3, r3, #4
 80013aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013ac:	4413      	add	r3, r2
 80013ae:	b28a      	uxth	r2, r1
 80013b0:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fef2 	bl	800119c <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 80013b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ba:	3301      	adds	r3, #1
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
 80013be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c0:	2b04      	cmp	r3, #4
 80013c2:	ddd1      	ble.n	8001368 <LineSensor_FrontAndBack+0x4c>
	}
	// Ez működjön, aztán lehet optimalizálni, hogy egy loopon belül kérjük be az adatokat mindettőtől
	// Retrieve data from first set of ADCs - Rear
	for (int i=1; i<5; i++)
 80013c4:	2301      	movs	r3, #1
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
 80013c8:	e02a      	b.n	8001420 <LineSensor_FrontAndBack+0x104>
	{
	  LS_ADC_ChipSelect(i);
 80013ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013cc:	f7ff fee6 	bl	800119c <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013d0:	f107 0214 	add.w	r2, r7, #20
 80013d4:	f107 0118 	add.w	r1, r7, #24
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2302      	movs	r3, #2
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f003 fdb7 	bl	8004f52 <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013e4:	f107 0214 	add.w	r2, r7, #20
 80013e8:	f107 0118 	add.w	r1, r7, #24
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2302      	movs	r3, #2
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f003 fdad 	bl	8004f52 <HAL_SPI_TransmitReceive>
	  ADC_values_rear[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80013f8:	7d7b      	ldrb	r3, [r7, #21]
 80013fa:	b21a      	sxth	r2, r3
 80013fc:	7d3b      	ldrb	r3, [r7, #20]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	b21b      	sxth	r3, r3
 8001402:	4313      	orrs	r3, r2
 8001404:	b219      	sxth	r1, r3
 8001406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001408:	3b01      	subs	r3, #1
 800140a:	011b      	lsls	r3, r3, #4
 800140c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800140e:	4413      	add	r3, r2
 8001410:	b28a      	uxth	r2, r1
 8001412:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fec1 	bl	800119c <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 800141a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141c:	3301      	adds	r3, #1
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
 8001420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001422:	2b04      	cmp	r3, #4
 8001424:	ddd1      	ble.n	80013ca <LineSensor_FrontAndBack+0xae>
	}

	// Shift the LEDs by one
	for (int k=0; k<7; k++)
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800142a:	e099      	b.n	8001560 <LineSensor_FrontAndBack+0x244>
	{
	  leds_on[0] <<= 1;
 800142c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f887 3020 	strb.w	r3, [r7, #32]
	  leds_on[1] <<= 1;
 8001438:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  leds_on[2] <<= 1;
 8001444:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  leds_on[3] <<= 1;
 8001450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  LS_INF_Send(hspi_led, leds_on);
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	4619      	mov	r1, r3
 8001462:	68b8      	ldr	r0, [r7, #8]
 8001464:	f7ff fe70 	bl	8001148 <LS_INF_Send>
	  HAL_Delay(1);
 8001468:	2001      	movs	r0, #1
 800146a:	f001 fedb 	bl	8003224 <HAL_Delay>

	  //Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 800146e:	2301      	movs	r3, #1
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
 8001472:	e034      	b.n	80014de <LineSensor_FrontAndBack+0x1c2>
	  {
		  LS_ADC_ChipSelect(i);
 8001474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001476:	f7ff fe91 	bl	800119c <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 800147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147c:	3301      	adds	r3, #1
 800147e:	f107 0218 	add.w	r2, r7, #24
 8001482:	18d1      	adds	r1, r2, r3
 8001484:	f107 0214 	add.w	r2, r7, #20
 8001488:	2364      	movs	r3, #100	; 0x64
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2302      	movs	r3, #2
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f003 fd5f 	bl	8004f52 <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 8001494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001496:	3301      	adds	r3, #1
 8001498:	f107 0218 	add.w	r2, r7, #24
 800149c:	18d1      	adds	r1, r2, r3
 800149e:	f107 0214 	add.w	r2, r7, #20
 80014a2:	2364      	movs	r3, #100	; 0x64
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2302      	movs	r3, #2
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f003 fd52 	bl	8004f52 <HAL_SPI_TransmitReceive>
		  ADC_values_front[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80014ae:	7d7b      	ldrb	r3, [r7, #21]
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	7d3b      	ldrb	r3, [r7, #20]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21b      	sxth	r3, r3
 80014b8:	4313      	orrs	r3, r2
 80014ba:	b219      	sxth	r1, r3
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	3b01      	subs	r3, #1
 80014c0:	00da      	lsls	r2, r3, #3
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	4413      	add	r3, r2
 80014c6:	3301      	adds	r3, #1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014cc:	4413      	add	r3, r2
 80014ce:	b28a      	uxth	r2, r1
 80014d0:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 80014d2:	2000      	movs	r0, #0
 80014d4:	f7ff fe62 	bl	800119c <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	3301      	adds	r3, #1
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	2b04      	cmp	r3, #4
 80014e2:	ddc7      	ble.n	8001474 <LineSensor_FrontAndBack+0x158>
	  }

	  // Szintén lehet optimalizálni
	  // Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 80014e4:	2301      	movs	r3, #1
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
 80014e8:	e034      	b.n	8001554 <LineSensor_FrontAndBack+0x238>
	  {
		  LS_ADC_ChipSelect(i);
 80014ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014ec:	f7ff fe56 	bl	800119c <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 80014f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014f2:	3301      	adds	r3, #1
 80014f4:	f107 0218 	add.w	r2, r7, #24
 80014f8:	18d1      	adds	r1, r2, r3
 80014fa:	f107 0214 	add.w	r2, r7, #20
 80014fe:	2364      	movs	r3, #100	; 0x64
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2302      	movs	r3, #2
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f003 fd24 	bl	8004f52 <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	3301      	adds	r3, #1
 800150e:	f107 0218 	add.w	r2, r7, #24
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	f107 0214 	add.w	r2, r7, #20
 8001518:	2364      	movs	r3, #100	; 0x64
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2302      	movs	r3, #2
 800151e:	6838      	ldr	r0, [r7, #0]
 8001520:	f003 fd17 	bl	8004f52 <HAL_SPI_TransmitReceive>
		  ADC_values_rear[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001524:	7d7b      	ldrb	r3, [r7, #21]
 8001526:	b21a      	sxth	r2, r3
 8001528:	7d3b      	ldrb	r3, [r7, #20]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b219      	sxth	r1, r3
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	3b01      	subs	r3, #1
 8001536:	00da      	lsls	r2, r3, #3
 8001538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153a:	4413      	add	r3, r2
 800153c:	3301      	adds	r3, #1
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001542:	4413      	add	r3, r2
 8001544:	b28a      	uxth	r2, r1
 8001546:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fe27 	bl	800119c <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	3301      	adds	r3, #1
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	2b04      	cmp	r3, #4
 8001558:	ddc7      	ble.n	80014ea <LineSensor_FrontAndBack+0x1ce>
	for (int k=0; k<7; k++)
 800155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155c:	3301      	adds	r3, #1
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001562:	2b06      	cmp	r3, #6
 8001564:	f77f af62 	ble.w	800142c <LineSensor_FrontAndBack+0x110>
//			line_pos[0] = ADC_values_rear[i];
//	}

//	unsigned char BT_send_msg_buff[200];
//	LS_BT_SendData(huart, BT_send_msg_buff, ADC_values_rear);
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3738      	adds	r7, #56	; 0x38
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	0800b9f8 	.word	0x0800b9f8

08001578 <LS_feedback_all>:

void LS_feedback_all(SPI_HandleTypeDef *hspi_led, uint16_t *ADC_values)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
 8001582:	4a1c      	ldr	r2, [pc, #112]	; (80015f4 <LS_feedback_all+0x7c>)
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800158c:	6018      	str	r0, [r3, #0]
 800158e:	3304      	adds	r3, #4
 8001590:	7019      	strb	r1, [r3, #0]
	uint8_t leds_off[4] = {0};
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	e016      	b.n	80015ce <LS_feedback_all+0x56>
			if (ADC_values[i]>2500){
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d90a      	bls.n	80015c8 <LS_feedback_all+0x50>
				fb_leds_to_light[j] = i;
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	b2d9      	uxtb	r1, r3
 80015b6:	f107 0210 	add.w	r2, r7, #16
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	460a      	mov	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
				j++;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	3301      	adds	r3, #1
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b1f      	cmp	r3, #31
 80015d2:	dde5      	ble.n	80015a0 <LS_feedback_all+0x28>
			}
		}

	LS_LED_Send(hspi_led, leds_off);
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	4619      	mov	r1, r3
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fd8a 	bl	80010f4 <LS_LED_Send>
	LS_LED_Light(hspi_led, fb_leds_to_light);
 80015e0:	f107 0310 	add.w	r3, r7, #16
 80015e4:	4619      	mov	r1, r3
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fce4 	bl	8000fb4 <LS_LED_Light>
}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	0800ba00 	.word	0x0800ba00

080015f8 <LS_delta_angle>:
	}
	LS_LED_Send(hspi_led, leds_off);
	LS_LED_Light(hspi_led, fb_leds_to_light);
}

float LS_delta_angle(float p1, float p2){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001602:	edc7 0a00 	vstr	s1, [r7]
    float delta = atan((p2-(31-p1))*6.5/460);
 8001606:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800160a:	edd7 7a01 	vldr	s15, [r7, #4]
 800160e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001612:	ed97 7a00 	vldr	s14, [r7]
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	ee17 0a90 	vmov	r0, s15
 800161e:	f7fe ffb3 	bl	8000588 <__aeabi_f2d>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <LS_delta_angle+0x88>)
 8001628:	f7ff f806 	bl	8000638 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	a310      	add	r3, pc, #64	; (adr r3, 8001678 <LS_delta_angle+0x80>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff f927 	bl	800088c <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ec43 2b17 	vmov	d7, r2, r3
 8001646:	eeb0 0a47 	vmov.f32	s0, s14
 800164a:	eef0 0a67 	vmov.f32	s1, s15
 800164e:	f008 ff23 	bl	800a498 <atan>
 8001652:	ec53 2b10 	vmov	r2, r3, d0
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fac5 	bl	8000be8 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	60fb      	str	r3, [r7, #12]
    return delta;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	ee07 3a90 	vmov	s15, r3
}
 8001668:	eeb0 0a67 	vmov.f32	s0, s15
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	00000000 	.word	0x00000000
 800167c:	407cc000 	.word	0x407cc000
 8001680:	401a0000 	.word	0x401a0000
 8001684:	00000000 	.word	0x00000000

08001688 <LS_p>:



float LS_p(float f1){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0a01 	vstr	s0, [r7, #4]
    float p = (15.5-f1)*0.0065;//m-ben adja vissza a p-t
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ff78 	bl	8000588 <__aeabi_f2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	f04f 0000 	mov.w	r0, #0
 80016a0:	490f      	ldr	r1, [pc, #60]	; (80016e0 <LS_p+0x58>)
 80016a2:	f7fe fe11 	bl	80002c8 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	a30a      	add	r3, pc, #40	; (adr r3, 80016d8 <LS_p+0x50>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe ffc0 	bl	8000638 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa92 	bl	8000be8 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	60fb      	str	r3, [r7, #12]
    return p;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	ee07 3a90 	vmov	s15, r3
}
 80016ce:	eeb0 0a67 	vmov.f32	s0, s15
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	76c8b439 	.word	0x76c8b439
 80016dc:	3f7a9fbe 	.word	0x3f7a9fbe
 80016e0:	402f0000 	.word	0x402f0000

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b0aa      	sub	sp, #168	; 0xa8
 80016e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ea:	f001 fd29 	bl	8003140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ee:	f000 f93b 	bl	8001968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f2:	f000 fe05 	bl	8002300 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016f6:	f000 f9fb 	bl	8001af0 <MX_I2C1_Init>
  MX_I2C3_Init();
 80016fa:	f000 fa55 	bl	8001ba8 <MX_I2C3_Init>
  MX_SPI1_Init();
 80016fe:	f000 fa81 	bl	8001c04 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001702:	f000 fab5 	bl	8001c70 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001706:	f000 fae9 	bl	8001cdc <MX_SPI3_Init>
  MX_ADC1_Init();
 800170a:	f000 f99f 	bl	8001a4c <MX_ADC1_Init>
  MX_TIM2_Init();
 800170e:	f000 fb1d 	bl	8001d4c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001712:	f000 fb9b 	bl	8001e4c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001716:	f000 fc13 	bl	8001f40 <MX_TIM4_Init>
  MX_TIM13_Init();
 800171a:	f000 fd4f 	bl	80021bc <MX_TIM13_Init>
  MX_TIM5_Init();
 800171e:	f000 fca1 	bl	8002064 <MX_TIM5_Init>
  MX_I2C2_Init();
 8001722:	f000 fa13 	bl	8001b4c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001726:	f000 fd97 	bl	8002258 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800172a:	f000 fdbf 	bl	80022ac <MX_USART6_UART_Init>
  MX_TIM7_Init();
 800172e:	f000 fd0f 	bl	8002150 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // initialize vl53l1x communication parameters
  Dev1->I2cHandle = &hi2c2;
 8001732:	4b76      	ldr	r3, [pc, #472]	; (800190c <main+0x228>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a76      	ldr	r2, [pc, #472]	; (8001910 <main+0x22c>)
 8001738:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  Dev1->I2cDevAddr = 0x52;
 800173c:	4b73      	ldr	r3, [pc, #460]	; (800190c <main+0x228>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2252      	movs	r2, #82	; 0x52
 8001742:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
//  HAL_Delay(2); // 2ms reset time
//  HAL_GPIO_WritePin(XSHUT1_GPIO_Port, XSHUT1_Pin, GPIO_PIN_RESET);
//  HAL_Delay(2); // 2ms reset time

  // set ToF1
  HAL_GPIO_WritePin(ToF_XSDN_36_GPIO_Port, ToF_XSDN_36_Pin, GPIO_PIN_SET);
 8001746:	2201      	movs	r2, #1
 8001748:	2101      	movs	r1, #1
 800174a:	4872      	ldr	r0, [pc, #456]	; (8001914 <main+0x230>)
 800174c:	f002 faa6 	bl	8003c9c <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8001750:	2002      	movs	r0, #2
 8001752:	f001 fd67 	bl	8003224 <HAL_Delay>

  //unsigned char ADC_value_string[10];
  //uint8_t leds_on[4];// = {1, 1, 1, 1};
  //uint8_t fb_leds_on[4] = {0};
  //uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
  uint16_t ADC_values_front[32] = {0};
 8001756:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f005 ffbc 	bl	80076dc <memset>
  uint16_t ADC_values_rear[32] = {0};
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	2240      	movs	r2, #64	; 0x40
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f005 ffb5 	bl	80076dc <memset>
  float line_pos[2];
//  bool feedback_rear = false;
  float delta, p, str_angle;
  int pwm_val;
  enum circuit_section circuit_Section = Fast_section;
 8001772:	2301      	movs	r3, #1
 8001774:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
//  circuit_Section = Fast_section;
  //LS_INF_Send(&hspi3, leds_off);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Dead man switch PWM input
 8001778:	2100      	movs	r1, #0
 800177a:	4867      	ldr	r0, [pc, #412]	; (8001918 <main+0x234>)
 800177c:	f004 f964 	bl	8005a48 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);    // Dead man switch PWM input
 8001780:	2104      	movs	r1, #4
 8001782:	4865      	ldr	r0, [pc, #404]	; (8001918 <main+0x234>)
 8001784:	f004 f884 	bl	8005890 <HAL_TIM_IC_Start>

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001788:	2100      	movs	r1, #0
 800178a:	4864      	ldr	r0, [pc, #400]	; (800191c <main+0x238>)
 800178c:	f003 ff68 	bl	8005660 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001790:	2104      	movs	r1, #4
 8001792:	4863      	ldr	r0, [pc, #396]	; (8001920 <main+0x23c>)
 8001794:	f003 ff64 	bl	8005660 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001798:	2100      	movs	r1, #0
 800179a:	4862      	ldr	r0, [pc, #392]	; (8001924 <main+0x240>)
 800179c:	f003 ff60 	bl	8005660 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	4b5e      	ldr	r3, [pc, #376]	; (8001928 <main+0x244>)
 80017ae:	4a5f      	ldr	r2, [pc, #380]	; (800192c <main+0x248>)
 80017b0:	495f      	ldr	r1, [pc, #380]	; (8001930 <main+0x24c>)
 80017b2:	4860      	ldr	r0, [pc, #384]	; (8001934 <main+0x250>)
 80017b4:	f7ff fdb2 	bl	800131c <LineSensor_FrontAndBack>
	  line_pos[0] = LS_Holavonal_favago(ADC_values_front, line_pos[0], &summ, &MA_sum_front);
 80017b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017c0:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80017c4:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <main+0x254>)
 80017c6:	4a5d      	ldr	r2, [pc, #372]	; (800193c <main+0x258>)
 80017c8:	ee17 1a90 	vmov	r1, s15
 80017cc:	f7ff fd38 	bl	8001240 <LS_Holavonal_favago>
 80017d0:	eef0 7a40 	vmov.f32	s15, s0
 80017d4:	edc7 7a01 	vstr	s15, [r7, #4]
	  line_pos[1] = LS_Holavonal_favago(ADC_values_rear, line_pos[1], &summ2, &MA_sum_rear);
 80017d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017e0:	f107 000c 	add.w	r0, r7, #12
 80017e4:	4b56      	ldr	r3, [pc, #344]	; (8001940 <main+0x25c>)
 80017e6:	4a57      	ldr	r2, [pc, #348]	; (8001944 <main+0x260>)
 80017e8:	ee17 1a90 	vmov	r1, s15
 80017ec:	f7ff fd28 	bl	8001240 <LS_Holavonal_favago>
 80017f0:	eef0 7a40 	vmov.f32	s15, s0
 80017f4:	edc7 7a02 	vstr	s15, [r7, #8]
	  LS_feedback_all(&hspi3, ADC_values_front);
 80017f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017fc:	4619      	mov	r1, r3
 80017fe:	484c      	ldr	r0, [pc, #304]	; (8001930 <main+0x24c>)
 8001800:	f7ff feba 	bl	8001578 <LS_feedback_all>
//	  //LS_feedback_led(&hspi3, line_pos, feedback_rear);

	  delta = LS_delta_angle(line_pos[0], line_pos[1]);
 8001804:	edd7 7a01 	vldr	s15, [r7, #4]
 8001808:	ed97 7a02 	vldr	s14, [r7, #8]
 800180c:	eef0 0a47 	vmov.f32	s1, s14
 8001810:	eeb0 0a67 	vmov.f32	s0, s15
 8001814:	f7ff fef0 	bl	80015f8 <LS_delta_angle>
 8001818:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94
	  p = LS_p(line_pos[0]);
 800181c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001820:	eeb0 0a67 	vmov.f32	s0, s15
 8001824:	f7ff ff30 	bl	8001688 <LS_p>
 8001828:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90
	  pwm_val = MotorDrive(&htim4, duty_motor);
 800182c:	4b46      	ldr	r3, [pc, #280]	; (8001948 <main+0x264>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	483c      	ldr	r0, [pc, #240]	; (8001924 <main+0x240>)
 8001834:	f000 fed5 	bl	80025e2 <MotorDrive>
 8001838:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	  ServoPosition(&htim5, str_angle);
 800183c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001840:	f7fe fea2 	bl	8000588 <__aeabi_f2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	ec43 2b10 	vmov	d0, r2, r3
 800184c:	4833      	ldr	r0, [pc, #204]	; (800191c <main+0x238>)
 800184e:	f000 fee3 	bl	8002618 <ServoPosition>
	  if(duty_MA>10){
 8001852:	4b3e      	ldr	r3, [pc, #248]	; (800194c <main+0x268>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800185c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	dd06      	ble.n	8001874 <main+0x190>
		  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186c:	4838      	ldr	r0, [pc, #224]	; (8001950 <main+0x26c>)
 800186e:	f002 fa15 	bl	8003c9c <HAL_GPIO_WritePin>
 8001872:	e005      	b.n	8001880 <main+0x19c>
		  }
	  else
		  HAL_GPIO_WritePin(DRV_EN_GPIO_Port, DRV_EN_Pin, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187a:	4835      	ldr	r0, [pc, #212]	; (8001950 <main+0x26c>)
 800187c:	f002 fa0e 	bl	8003c9c <HAL_GPIO_WritePin>
	  //	float kp=-0.75;
	  //	float kd=1.0;
	  //	float kp=-10;
	  //	float kd=0.0;

	  if (circuit_Section == Fast_section)
 8001880:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001884:	2b01      	cmp	r3, #1
 8001886:	d121      	bne.n	80018cc <main+0x1e8>
	  {
		  duty_motor = 40;
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <main+0x264>)
 800188a:	2228      	movs	r2, #40	; 0x28
 800188c:	601a      	str	r2, [r3, #0]
		  str_angle = SteeringAngle(p, delta, -0.75, 1.0);
 800188e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001892:	eebe 1a08 	vmov.f32	s2, #232	; 0xbf400000 -0.750
 8001896:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 800189a:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 800189e:	f000 ff1b 	bl	80026d8 <SteeringAngle>
 80018a2:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c
		  if (MA_sum_front > 10000){
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <main+0x254>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80018ae:	4293      	cmp	r3, r2
 80018b0:	dd05      	ble.n	80018be <main+0x1da>
			  // kb. 2 másodpercenkétn előidéz egy interruptot
			  HAL_TIM_Base_Start_IT(&htim7);
 80018b2:	4828      	ldr	r0, [pc, #160]	; (8001954 <main+0x270>)
 80018b4:	f003 fe0a 	bl	80054cc <HAL_TIM_Base_Start_IT>
			  duty_motor = 15;
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <main+0x264>)
 80018ba:	220f      	movs	r2, #15
 80018bc:	601a      	str	r2, [r3, #0]
		  }
		  if (decel_end_flag){
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <main+0x274>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d002      	beq.n	80018cc <main+0x1e8>
			  circuit_Section = Slow_section;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
		  }
	  }
	  if (circuit_Section == Slow_section)
 80018cc:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d10e      	bne.n	80018f2 <main+0x20e>
	  {
		  duty_motor = 15;
 80018d4:	4b1c      	ldr	r3, [pc, #112]	; (8001948 <main+0x264>)
 80018d6:	220f      	movs	r2, #15
 80018d8:	601a      	str	r2, [r3, #0]
		  str_angle = SteeringAngle(p, delta, -10.0, 0.0);
 80018da:	eddf 1a20 	vldr	s3, [pc, #128]	; 800195c <main+0x278>
 80018de:	eeba 1a04 	vmov.f32	s2, #164	; 0xc1200000 -10.0
 80018e2:	edd7 0a25 	vldr	s1, [r7, #148]	; 0x94
 80018e6:	ed97 0a24 	vldr	s0, [r7, #144]	; 0x90
 80018ea:	f000 fef5 	bl	80026d8 <SteeringAngle>
 80018ee:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c
	  }

	  sprintf((char*)BT_send_msg_buff, " %d\n\r", circuit_Section);
 80018f2:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80018f6:	461a      	mov	r2, r3
 80018f8:	4919      	ldr	r1, [pc, #100]	; (8001960 <main+0x27c>)
 80018fa:	481a      	ldr	r0, [pc, #104]	; (8001964 <main+0x280>)
 80018fc:	f006 fb60 	bl	8007fc0 <siprintf>
	  BT_TransmitMsg(&huart2, BT_send_msg_buff);
 8001900:	4918      	ldr	r1, [pc, #96]	; (8001964 <main+0x280>)
 8001902:	480c      	ldr	r0, [pc, #48]	; (8001934 <main+0x250>)
 8001904:	f7ff fb42 	bl	8000f8c <BT_TransmitMsg>
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 8001908:	e74a      	b.n	80017a0 <main+0xbc>
 800190a:	bf00      	nop
 800190c:	20000004 	.word	0x20000004
 8001910:	200002a0 	.word	0x200002a0
 8001914:	40020400 	.word	0x40020400
 8001918:	20000450 	.word	0x20000450
 800191c:	20000528 	.word	0x20000528
 8001920:	20000498 	.word	0x20000498
 8001924:	200004e0 	.word	0x200004e0
 8001928:	200003a0 	.word	0x200003a0
 800192c:	20000348 	.word	0x20000348
 8001930:	200003f8 	.word	0x200003f8
 8001934:	20000600 	.word	0x20000600
 8001938:	20000758 	.word	0x20000758
 800193c:	20000760 	.word	0x20000760
 8001940:	2000075c 	.word	0x2000075c
 8001944:	20000764 	.word	0x20000764
 8001948:	20000b20 	.word	0x20000b20
 800194c:	20000b1c 	.word	0x20000b1c
 8001950:	40020000 	.word	0x40020000
 8001954:	20000570 	.word	0x20000570
 8001958:	20000b0c 	.word	0x20000b0c
 800195c:	00000000 	.word	0x00000000
 8001960:	0800ba08 	.word	0x0800ba08
 8001964:	20000688 	.word	0x20000688

08001968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	; 0x50
 800196c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	2234      	movs	r2, #52	; 0x34
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f005 feb0 	bl	80076dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <SystemClock_Config+0xdc>)
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	4a2b      	ldr	r2, [pc, #172]	; (8001a44 <SystemClock_Config+0xdc>)
 8001996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800199a:	6413      	str	r3, [r2, #64]	; 0x40
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <SystemClock_Config+0xdc>)
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a8:	2300      	movs	r3, #0
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	4b26      	ldr	r3, [pc, #152]	; (8001a48 <SystemClock_Config+0xe0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <SystemClock_Config+0xe0>)
 80019b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <SystemClock_Config+0xe0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ce:	2302      	movs	r3, #2
 80019d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019d8:	2304      	movs	r3, #4
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80019dc:	23b4      	movs	r3, #180	; 0xb4
 80019de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e0:	2302      	movs	r3, #2
 80019e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 fe4b 	bl	800468c <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019fc:	f000 fdec 	bl	80025d8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a00:	f002 faaa 	bl	8003f58 <HAL_PWREx_EnableOverDrive>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001a0a:	f000 fde5 	bl	80025d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a0e:	230f      	movs	r3, #15
 8001a10:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a12:	2302      	movs	r3, #2
 8001a14:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a24:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	2105      	movs	r1, #5
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 fae3 	bl	8003ff8 <HAL_RCC_ClockConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001a38:	f000 fdce 	bl	80025d8 <Error_Handler>
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3750      	adds	r7, #80	; 0x50
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40007000 	.word	0x40007000

08001a4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a52:	463b      	mov	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a60:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <MX_ADC1_Init+0x9c>)
 8001a62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a78:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a86:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a8e:	4a17      	ldr	r2, [pc, #92]	; (8001aec <MX_ADC1_Init+0xa0>)
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001aae:	f001 fbdd 	bl	800326c <HAL_ADC_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ab8:	f000 fd8e 	bl	80025d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001abc:	2301      	movs	r3, #1
 8001abe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_ADC1_Init+0x98>)
 8001ace:	f001 fc11 	bl	80032f4 <HAL_ADC_ConfigChannel>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ad8:	f000 fd7e 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000204 	.word	0x20000204
 8001ae8:	40012000 	.word	0x40012000
 8001aec:	0f000001 	.word	0x0f000001

08001af0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <MX_I2C1_Init+0x54>)
 8001af8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001afc:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <MX_I2C1_Init+0x58>)
 8001afe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_I2C1_Init+0x50>)
 8001b2e:	f002 f8cf 	bl	8003cd0 <HAL_I2C_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b38:	f000 fd4e 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	2000024c 	.word	0x2000024c
 8001b44:	40005400 	.word	0x40005400
 8001b48:	000186a0 	.word	0x000186a0

08001b4c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <MX_I2C2_Init+0x50>)
 8001b52:	4a13      	ldr	r2, [pc, #76]	; (8001ba0 <MX_I2C2_Init+0x54>)
 8001b54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <MX_I2C2_Init+0x50>)
 8001b58:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <MX_I2C2_Init+0x58>)
 8001b5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b5c:	4b0f      	ldr	r3, [pc, #60]	; (8001b9c <MX_I2C2_Init+0x50>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b62:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <MX_I2C2_Init+0x50>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <MX_I2C2_Init+0x50>)
 8001b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <MX_I2C2_Init+0x50>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <MX_I2C2_Init+0x50>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b7c:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <MX_I2C2_Init+0x50>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <MX_I2C2_Init+0x50>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b88:	4804      	ldr	r0, [pc, #16]	; (8001b9c <MX_I2C2_Init+0x50>)
 8001b8a:	f002 f8a1 	bl	8003cd0 <HAL_I2C_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b94:	f000 fd20 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200002a0 	.word	0x200002a0
 8001ba0:	40005800 	.word	0x40005800
 8001ba4:	000186a0 	.word	0x000186a0

08001ba8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <MX_I2C3_Init+0x50>)
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <MX_I2C3_Init+0x54>)
 8001bb0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <MX_I2C3_Init+0x50>)
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <MX_I2C3_Init+0x58>)
 8001bb6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <MX_I2C3_Init+0x50>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001bbe:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <MX_I2C3_Init+0x50>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <MX_I2C3_Init+0x50>)
 8001bc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <MX_I2C3_Init+0x50>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <MX_I2C3_Init+0x50>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <MX_I2C3_Init+0x50>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_I2C3_Init+0x50>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001be4:	4804      	ldr	r0, [pc, #16]	; (8001bf8 <MX_I2C3_Init+0x50>)
 8001be6:	f002 f873 	bl	8003cd0 <HAL_I2C_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001bf0:	f000 fcf2 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200002f4 	.word	0x200002f4
 8001bfc:	40005c00 	.word	0x40005c00
 8001c00:	000186a0 	.word	0x000186a0

08001c04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c08:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c0a:	4a18      	ldr	r2, [pc, #96]	; (8001c6c <MX_SPI1_Init+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001c36:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c38:	2228      	movs	r2, #40	; 0x28
 8001c3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c50:	220a      	movs	r2, #10
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_SPI1_Init+0x64>)
 8001c56:	f002 ffb7 	bl	8004bc8 <HAL_SPI_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c60:	f000 fcba 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000348 	.word	0x20000348
 8001c6c:	40013000 	.word	0x40013000

08001c70 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c74:	4b17      	ldr	r3, [pc, #92]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c76:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <MX_SPI2_Init+0x68>)
 8001c78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c94:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ca8:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cae:	4b09      	ldr	r3, [pc, #36]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001cbc:	220a      	movs	r2, #10
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001cc0:	4804      	ldr	r0, [pc, #16]	; (8001cd4 <MX_SPI2_Init+0x64>)
 8001cc2:	f002 ff81 	bl	8004bc8 <HAL_SPI_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001ccc:	f000 fc84 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200003a0 	.word	0x200003a0
 8001cd8:	40003800 	.word	0x40003800

08001cdc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001ce2:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <MX_SPI3_Init+0x6c>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001ce6:	4b17      	ldr	r3, [pc, #92]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001cf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cf4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001d12:	2210      	movs	r2, #16
 8001d14:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001d2a:	220a      	movs	r2, #10
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <MX_SPI3_Init+0x68>)
 8001d30:	f002 ff4a 	bl	8004bc8 <HAL_SPI_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001d3a:	f000 fc4d 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200003f8 	.word	0x200003f8
 8001d48:	40003c00 	.word	0x40003c00

08001d4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	; 0x30
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d52:	f107 031c 	add.w	r3, r7, #28
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
 8001d60:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d78:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <MX_TIM2_Init+0xfc>)
 8001d7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8001d80:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <MX_TIM2_Init+0xfc>)
 8001d82:	2208      	movs	r2, #8
 8001d84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <MX_TIM2_Init+0xfc>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <MX_TIM2_Init+0xfc>)
 8001d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	4b2c      	ldr	r3, [pc, #176]	; (8001e48 <MX_TIM2_Init+0xfc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <MX_TIM2_Init+0xfc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001da0:	4829      	ldr	r0, [pc, #164]	; (8001e48 <MX_TIM2_Init+0xfc>)
 8001da2:	f003 fd25 	bl	80057f0 <HAL_TIM_IC_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001dac:	f000 fc14 	bl	80025d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001db0:	2304      	movs	r3, #4
 8001db2:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001db4:	2350      	movs	r3, #80	; 0x50
 8001db6:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	4619      	mov	r1, r3
 8001dca:	481f      	ldr	r0, [pc, #124]	; (8001e48 <MX_TIM2_Init+0xfc>)
 8001dcc:	f004 fa91 	bl	80062f2 <HAL_TIM_SlaveConfigSynchro>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001dd6:	f000 fbff 	bl	80025d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dde:	2301      	movs	r3, #1
 8001de0:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	2200      	movs	r2, #0
 8001df0:	4619      	mov	r1, r3
 8001df2:	4815      	ldr	r0, [pc, #84]	; (8001e48 <MX_TIM2_Init+0xfc>)
 8001df4:	f004 f858 	bl	8005ea8 <HAL_TIM_IC_ConfigChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001dfe:	f000 fbeb 	bl	80025d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001e02:	2302      	movs	r3, #2
 8001e04:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001e06:	2302      	movs	r3, #2
 8001e08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	2204      	movs	r2, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	480d      	ldr	r0, [pc, #52]	; (8001e48 <MX_TIM2_Init+0xfc>)
 8001e14:	f004 f848 	bl	8005ea8 <HAL_TIM_IC_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001e1e:	f000 fbdb 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4806      	ldr	r0, [pc, #24]	; (8001e48 <MX_TIM2_Init+0xfc>)
 8001e30:	f004 ffd0 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001e3a:	f000 fbcd 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	3730      	adds	r7, #48	; 0x30
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000450 	.word	0x20000450

08001e4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08e      	sub	sp, #56	; 0x38
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e60:	f107 0320 	add.w	r3, r7, #32
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
 8001e78:	615a      	str	r2, [r3, #20]
 8001e7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001e7e:	4a2f      	ldr	r2, [pc, #188]	; (8001f3c <MX_TIM3_Init+0xf0>)
 8001e80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001e82:	4b2d      	ldr	r3, [pc, #180]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 8001e8e:	4b2a      	ldr	r3, [pc, #168]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001e90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001e94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e96:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ea2:	4825      	ldr	r0, [pc, #148]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001ea4:	f003 fac2 	bl	800542c <HAL_TIM_Base_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001eae:	f000 fb93 	bl	80025d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001eb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	481e      	ldr	r0, [pc, #120]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001ec0:	f004 f950 	bl	8006164 <HAL_TIM_ConfigClockSource>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001eca:	f000 fb85 	bl	80025d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ece:	481a      	ldr	r0, [pc, #104]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001ed0:	f003 fb6c 	bl	80055ac <HAL_TIM_PWM_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001eda:	f000 fb7d 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ede:	2320      	movs	r3, #32
 8001ee0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ee6:	f107 0320 	add.w	r3, r7, #32
 8001eea:	4619      	mov	r1, r3
 8001eec:	4812      	ldr	r0, [pc, #72]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001eee:	f004 ff71 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ef8:	f000 fb6e 	bl	80025d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efc:	2360      	movs	r3, #96	; 0x60
 8001efe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001f06:	2302      	movs	r3, #2
 8001f08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	2204      	movs	r2, #4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4808      	ldr	r0, [pc, #32]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001f16:	f004 f863 	bl	8005fe0 <HAL_TIM_PWM_ConfigChannel>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001f20:	f000 fb5a 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001f26:	f003 fad1 	bl	80054cc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f2a:	4803      	ldr	r0, [pc, #12]	; (8001f38 <MX_TIM3_Init+0xec>)
 8001f2c:	f000 ff58 	bl	8002de0 <HAL_TIM_MspPostInit>

}
 8001f30:	bf00      	nop
 8001f32:	3738      	adds	r7, #56	; 0x38
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000498 	.word	0x20000498
 8001f3c:	40000400 	.word	0x40000400

08001f40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b092      	sub	sp, #72	; 0x48
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f58:	2200      	movs	r2, #0
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	60da      	str	r2, [r3, #12]
 8001f62:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6e:	463b      	mov	r3, r7
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	615a      	str	r2, [r3, #20]
 8001f7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f80:	4b36      	ldr	r3, [pc, #216]	; (800205c <MX_TIM4_Init+0x11c>)
 8001f82:	4a37      	ldr	r2, [pc, #220]	; (8002060 <MX_TIM4_Init+0x120>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f86:	4b35      	ldr	r3, [pc, #212]	; (800205c <MX_TIM4_Init+0x11c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8001f8c:	4b33      	ldr	r3, [pc, #204]	; (800205c <MX_TIM4_Init+0x11c>)
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2000;
 8001f92:	4b32      	ldr	r3, [pc, #200]	; (800205c <MX_TIM4_Init+0x11c>)
 8001f94:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001f98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9a:	4b30      	ldr	r3, [pc, #192]	; (800205c <MX_TIM4_Init+0x11c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <MX_TIM4_Init+0x11c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001fa6:	482d      	ldr	r0, [pc, #180]	; (800205c <MX_TIM4_Init+0x11c>)
 8001fa8:	f003 fa40 	bl	800542c <HAL_TIM_Base_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001fb2:	f000 fb11 	bl	80025d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001fbc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4826      	ldr	r0, [pc, #152]	; (800205c <MX_TIM4_Init+0x11c>)
 8001fc4:	f004 f8ce 	bl	8006164 <HAL_TIM_ConfigClockSource>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001fce:	f000 fb03 	bl	80025d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001fd2:	4822      	ldr	r0, [pc, #136]	; (800205c <MX_TIM4_Init+0x11c>)
 8001fd4:	f003 faea 	bl	80055ac <HAL_TIM_PWM_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 8001fde:	f000 fafb 	bl	80025d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001fe2:	2306      	movs	r3, #6
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 8001fe6:	2320      	movs	r3, #32
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481a      	ldr	r0, [pc, #104]	; (800205c <MX_TIM4_Init+0x11c>)
 8001ff2:	f004 f97e 	bl	80062f2 <HAL_TIM_SlaveConfigSynchro>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 8001ffc:	f000 faec 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002000:	2320      	movs	r3, #32
 8002002:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	4813      	ldr	r0, [pc, #76]	; (800205c <MX_TIM4_Init+0x11c>)
 8002010:	f004 fee0 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800201a:	f000 fadd 	bl	80025d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201e:	2360      	movs	r3, #96	; 0x60
 8002020:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002022:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002026:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002030:	463b      	mov	r3, r7
 8002032:	2200      	movs	r2, #0
 8002034:	4619      	mov	r1, r3
 8002036:	4809      	ldr	r0, [pc, #36]	; (800205c <MX_TIM4_Init+0x11c>)
 8002038:	f003 ffd2 	bl	8005fe0 <HAL_TIM_PWM_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8002042:	f000 fac9 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <MX_TIM4_Init+0x11c>)
 8002048:	f003 fa40 	bl	80054cc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <MX_TIM4_Init+0x11c>)
 800204e:	f000 fec7 	bl	8002de0 <HAL_TIM_MspPostInit>

}
 8002052:	bf00      	nop
 8002054:	3748      	adds	r7, #72	; 0x48
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200004e0 	.word	0x200004e0
 8002060:	40000800 	.word	0x40000800

08002064 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08e      	sub	sp, #56	; 0x38
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
 8002074:	609a      	str	r2, [r3, #8]
 8002076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002078:	f107 0320 	add.w	r3, r7, #32
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	615a      	str	r2, [r3, #20]
 8002092:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002094:	4b2c      	ldr	r3, [pc, #176]	; (8002148 <MX_TIM5_Init+0xe4>)
 8002096:	4a2d      	ldr	r2, [pc, #180]	; (800214c <MX_TIM5_Init+0xe8>)
 8002098:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 30-1;
 800209a:	4b2b      	ldr	r3, [pc, #172]	; (8002148 <MX_TIM5_Init+0xe4>)
 800209c:	221d      	movs	r2, #29
 800209e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	4b29      	ldr	r3, [pc, #164]	; (8002148 <MX_TIM5_Init+0xe4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000-1;
 80020a6:	4b28      	ldr	r3, [pc, #160]	; (8002148 <MX_TIM5_Init+0xe4>)
 80020a8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80020ac:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <MX_TIM5_Init+0xe4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b4:	4b24      	ldr	r3, [pc, #144]	; (8002148 <MX_TIM5_Init+0xe4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020ba:	4823      	ldr	r0, [pc, #140]	; (8002148 <MX_TIM5_Init+0xe4>)
 80020bc:	f003 f9b6 	bl	800542c <HAL_TIM_Base_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80020c6:	f000 fa87 	bl	80025d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80020d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d4:	4619      	mov	r1, r3
 80020d6:	481c      	ldr	r0, [pc, #112]	; (8002148 <MX_TIM5_Init+0xe4>)
 80020d8:	f004 f844 	bl	8006164 <HAL_TIM_ConfigClockSource>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 80020e2:	f000 fa79 	bl	80025d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020e6:	4818      	ldr	r0, [pc, #96]	; (8002148 <MX_TIM5_Init+0xe4>)
 80020e8:	f003 fa60 	bl	80055ac <HAL_TIM_PWM_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 80020f2:	f000 fa71 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020fe:	f107 0320 	add.w	r3, r7, #32
 8002102:	4619      	mov	r1, r3
 8002104:	4810      	ldr	r0, [pc, #64]	; (8002148 <MX_TIM5_Init+0xe4>)
 8002106:	f004 fe65 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002110:	f000 fa62 	bl	80025d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002114:	2360      	movs	r3, #96	; 0x60
 8002116:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2200      	movs	r2, #0
 8002128:	4619      	mov	r1, r3
 800212a:	4807      	ldr	r0, [pc, #28]	; (8002148 <MX_TIM5_Init+0xe4>)
 800212c:	f003 ff58 	bl	8005fe0 <HAL_TIM_PWM_ConfigChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002136:	f000 fa4f 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800213a:	4803      	ldr	r0, [pc, #12]	; (8002148 <MX_TIM5_Init+0xe4>)
 800213c:	f000 fe50 	bl	8002de0 <HAL_TIM_MspPostInit>

}
 8002140:	bf00      	nop
 8002142:	3738      	adds	r7, #56	; 0x38
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000528 	.word	0x20000528
 800214c:	40000c00 	.word	0x40000c00

08002150 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002156:	463b      	mov	r3, r7
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800215e:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_TIM7_Init+0x64>)
 8002160:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <MX_TIM7_Init+0x68>)
 8002162:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <MX_TIM7_Init+0x64>)
 8002166:	f242 720f 	movw	r2, #9999	; 0x270f
 800216a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <MX_TIM7_Init+0x64>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000-1;
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <MX_TIM7_Init+0x64>)
 8002174:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002178:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <MX_TIM7_Init+0x64>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002180:	480c      	ldr	r0, [pc, #48]	; (80021b4 <MX_TIM7_Init+0x64>)
 8002182:	f003 f953 	bl	800542c <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800218c:	f000 fa24 	bl	80025d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002190:	2300      	movs	r3, #0
 8002192:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002198:	463b      	mov	r3, r7
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	; (80021b4 <MX_TIM7_Init+0x64>)
 800219e:	f004 fe19 	bl	8006dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80021a8:	f000 fa16 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000570 	.word	0x20000570
 80021b8:	40001400 	.word	0x40001400

080021bc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	615a      	str	r2, [r3, #20]
 80021d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <MX_TIM13_Init+0x94>)
 80021d6:	4a1f      	ldr	r2, [pc, #124]	; (8002254 <MX_TIM13_Init+0x98>)
 80021d8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <MX_TIM13_Init+0x94>)
 80021dc:	2200      	movs	r2, #0
 80021de:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <MX_TIM13_Init+0x94>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <MX_TIM13_Init+0x94>)
 80021e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ec:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <MX_TIM13_Init+0x94>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <MX_TIM13_Init+0x94>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80021fa:	4815      	ldr	r0, [pc, #84]	; (8002250 <MX_TIM13_Init+0x94>)
 80021fc:	f003 f916 	bl	800542c <HAL_TIM_Base_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8002206:	f000 f9e7 	bl	80025d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800220a:	4811      	ldr	r0, [pc, #68]	; (8002250 <MX_TIM13_Init+0x94>)
 800220c:	f003 f9ce 	bl	80055ac <HAL_TIM_PWM_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8002216:	f000 f9df 	bl	80025d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800221a:	2360      	movs	r3, #96	; 0x60
 800221c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	2200      	movs	r2, #0
 800222e:	4619      	mov	r1, r3
 8002230:	4807      	ldr	r0, [pc, #28]	; (8002250 <MX_TIM13_Init+0x94>)
 8002232:	f003 fed5 	bl	8005fe0 <HAL_TIM_PWM_ConfigChannel>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800223c:	f000 f9cc 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002240:	4803      	ldr	r0, [pc, #12]	; (8002250 <MX_TIM13_Init+0x94>)
 8002242:	f000 fdcd 	bl	8002de0 <HAL_TIM_MspPostInit>

}
 8002246:	bf00      	nop
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200005b8 	.word	0x200005b8
 8002254:	40001c00 	.word	0x40001c00

08002258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800225c:	4b11      	ldr	r3, [pc, #68]	; (80022a4 <MX_USART2_UART_Init+0x4c>)
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <MX_USART2_UART_Init+0x50>)
 8002260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <MX_USART2_UART_Init+0x4c>)
 8002264:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <MX_USART2_UART_Init+0x4c>)
 800226c:	2200      	movs	r2, #0
 800226e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <MX_USART2_UART_Init+0x4c>)
 8002272:	2200      	movs	r2, #0
 8002274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002276:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <MX_USART2_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <MX_USART2_UART_Init+0x4c>)
 800227e:	220c      	movs	r2, #12
 8002280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <MX_USART2_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002288:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <MX_USART2_UART_Init+0x4c>)
 800228a:	2200      	movs	r2, #0
 800228c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800228e:	4805      	ldr	r0, [pc, #20]	; (80022a4 <MX_USART2_UART_Init+0x4c>)
 8002290:	f004 fe30 	bl	8006ef4 <HAL_UART_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800229a:	f000 f99d 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000600 	.word	0x20000600
 80022a8:	40004400 	.word	0x40004400

080022ac <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022b2:	4a12      	ldr	r2, [pc, #72]	; (80022fc <MX_USART6_UART_Init+0x50>)
 80022b4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80022b6:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80022bc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022d2:	220c      	movs	r2, #12
 80022d4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80022e2:	4805      	ldr	r0, [pc, #20]	; (80022f8 <MX_USART6_UART_Init+0x4c>)
 80022e4:	f004 fe06 	bl	8006ef4 <HAL_UART_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80022ee:	f000 f973 	bl	80025d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000644 	.word	0x20000644
 80022fc:	40011400 	.word	0x40011400

08002300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	4b67      	ldr	r3, [pc, #412]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a66      	ldr	r2, [pc, #408]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b64      	ldr	r3, [pc, #400]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
 8002336:	4b60      	ldr	r3, [pc, #384]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a5f      	ldr	r2, [pc, #380]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 800233c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b5d      	ldr	r3, [pc, #372]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	4b59      	ldr	r3, [pc, #356]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a58      	ldr	r2, [pc, #352]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b56      	ldr	r3, [pc, #344]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	4b52      	ldr	r3, [pc, #328]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a51      	ldr	r2, [pc, #324]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b4f      	ldr	r3, [pc, #316]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	607b      	str	r3, [r7, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	4b4b      	ldr	r3, [pc, #300]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a4a      	ldr	r2, [pc, #296]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 8002390:	f043 0308 	orr.w	r3, r3, #8
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b48      	ldr	r3, [pc, #288]	; (80024b8 <MX_GPIO_Init+0x1b8>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 80023a2:	2200      	movs	r2, #0
 80023a4:	f24d 0107 	movw	r1, #53255	; 0xd007
 80023a8:	4844      	ldr	r0, [pc, #272]	; (80024bc <MX_GPIO_Init+0x1bc>)
 80023aa:	f001 fc77 	bl	8003c9c <HAL_GPIO_WritePin>
                          |AD_CS3_Pin|AD_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_CS1_Pin|LED_LE_Pin, GPIO_PIN_RESET);
 80023ae:	2200      	movs	r2, #0
 80023b0:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80023b4:	4842      	ldr	r0, [pc, #264]	; (80024c0 <MX_GPIO_Init+0x1c0>)
 80023b6:	f001 fc71 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin, GPIO_PIN_RESET);
 80023ba:	2200      	movs	r2, #0
 80023bc:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 80023c0:	4840      	ldr	r0, [pc, #256]	; (80024c4 <MX_GPIO_Init+0x1c4>)
 80023c2:	f001 fc6b 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_RESET);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2104      	movs	r1, #4
 80023ca:	483f      	ldr	r0, [pc, #252]	; (80024c8 <MX_GPIO_Init+0x1c8>)
 80023cc:	f001 fc66 	bl	8003c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4619      	mov	r1, r3
 80023e6:	4836      	ldr	r0, [pc, #216]	; (80024c0 <MX_GPIO_Init+0x1c0>)
 80023e8:	f001 fac4 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dead_man_SW_Pin DRV_PWR_FB_Pin */
  GPIO_InitStruct.Pin = Dead_man_SW_Pin|DRV_PWR_FB_Pin;
 80023ec:	2311      	movs	r3, #17
 80023ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4619      	mov	r1, r3
 80023fe:	4830      	ldr	r0, [pc, #192]	; (80024c0 <MX_GPIO_Init+0x1c0>)
 8002400:	f001 fab8 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_INT_Pin */
  GPIO_InitStruct.Pin = I2C_INT_Pin;
 8002404:	2320      	movs	r3, #32
 8002406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002408:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800240c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(I2C_INT_GPIO_Port, &GPIO_InitStruct);
 8002412:	f107 0314 	add.w	r3, r7, #20
 8002416:	4619      	mov	r1, r3
 8002418:	4829      	ldr	r0, [pc, #164]	; (80024c0 <MX_GPIO_Init+0x1c0>)
 800241a:	f001 faab 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_XSDN_36_Pin ToF_XSDN_25_Pin ToF_XSDN_14_Pin AD_CS4_Pin
                           AD_CS3_Pin AD_CS2_Pin */
  GPIO_InitStruct.Pin = ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 800241e:	f24d 0307 	movw	r3, #53255	; 0xd007
 8002422:	617b      	str	r3, [r7, #20]
                          |AD_CS3_Pin|AD_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002424:	2301      	movs	r3, #1
 8002426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	4619      	mov	r1, r3
 8002436:	4821      	ldr	r0, [pc, #132]	; (80024bc <MX_GPIO_Init+0x1bc>)
 8002438:	f001 fa9c 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_CS1_Pin LED_LE_Pin */
  GPIO_InitStruct.Pin = AD_CS1_Pin|LED_LE_Pin;
 800243c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8002440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002442:	2301      	movs	r3, #1
 8002444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	4619      	mov	r1, r3
 8002454:	481a      	ldr	r0, [pc, #104]	; (80024c0 <MX_GPIO_Init+0x1c0>)
 8002456:	f001 fa8d 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : INF_LE_Pin INF_OE_Pin DRV_EN_Pin */
  GPIO_InitStruct.Pin = INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin;
 800245a:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 800245e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	2301      	movs	r3, #1
 8002462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	4814      	ldr	r0, [pc, #80]	; (80024c4 <MX_GPIO_Init+0x1c4>)
 8002474:	f001 fa7e 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_FB_Pin */
  GPIO_InitStruct.Pin = DRV_EN_FB_Pin;
 8002478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800247c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_EN_FB_GPIO_Port, &GPIO_InitStruct);
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	4619      	mov	r1, r3
 800248c:	480d      	ldr	r0, [pc, #52]	; (80024c4 <MX_GPIO_Init+0x1c4>)
 800248e:	f001 fa71 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_OE_Pin;
 8002492:	2304      	movs	r3, #4
 8002494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002496:	2301      	movs	r3, #1
 8002498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OE_GPIO_Port, &GPIO_InitStruct);
 80024a2:	f107 0314 	add.w	r3, r7, #20
 80024a6:	4619      	mov	r1, r3
 80024a8:	4807      	ldr	r0, [pc, #28]	; (80024c8 <MX_GPIO_Init+0x1c8>)
 80024aa:	f001 fa63 	bl	8003974 <HAL_GPIO_Init>

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020400 	.word	0x40020400
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020c00 	.word	0x40020c00

080024cc <HAL_TIM_PeriodElapsedCallback>:
//			   ( RangingData.SignalRateRtnMegaCps / 65536.0 ), RangingData.AmbientRateRtnMegaCps / 65336.0 );
//	VL53L1_ClearInterruptAndStartMeasurement(Dev1);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	if (htim == &htim7)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a0f      	ldr	r2, [pc, #60]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d116      	bne.n	800250a <HAL_TIM_PeriodElapsedCallback+0x3e>
	{
		//decel_end_flag = true;
			if (htim == &htim7)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d112      	bne.n	800250a <HAL_TIM_PeriodElapsedCallback+0x3e>
			{
				if (lightIsOn){
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d007      	beq.n	80024fc <HAL_TIM_PeriodElapsedCallback+0x30>
					LS_LED_Send(&hspi3, leds_off);
 80024ec:	490b      	ldr	r1, [pc, #44]	; (800251c <HAL_TIM_PeriodElapsedCallback+0x50>)
 80024ee:	480c      	ldr	r0, [pc, #48]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024f0:	f7fe fe00 	bl	80010f4 <LS_LED_Send>
					lightIsOn = false;
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
					LS_LED_Send(&hspi3, leds_all_on);
					lightIsOn = true;
				}
			}
	}
}
 80024fa:	e006      	b.n	800250a <HAL_TIM_PeriodElapsedCallback+0x3e>
					LS_LED_Send(&hspi3, leds_all_on);
 80024fc:	4909      	ldr	r1, [pc, #36]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024fe:	4808      	ldr	r0, [pc, #32]	; (8002520 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002500:	f7fe fdf8 	bl	80010f4 <LS_LED_Send>
					lightIsOn = true;
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000570 	.word	0x20000570
 8002518:	20000754 	.word	0x20000754
 800251c:	20000750 	.word	0x20000750
 8002520:	200003f8 	.word	0x200003f8
 8002524:	20000000 	.word	0x20000000

08002528 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002538:	d13d      	bne.n	80025b6 <HAL_TIM_IC_CaptureCallback+0x8e>
		cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 2;
 800253a:	2100      	movs	r1, #0
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f003 ff1b 	bl	8006378 <HAL_TIM_ReadCapturedValue>
 8002542:	4603      	mov	r3, r0
 8002544:	3302      	adds	r3, #2
 8002546:	4a1e      	ldr	r2, [pc, #120]	; (80025c0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002548:	6013      	str	r3, [r2, #0]
		cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + 2;
 800254a:	2104      	movs	r1, #4
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f003 ff13 	bl	8006378 <HAL_TIM_ReadCapturedValue>
 8002552:	4603      	mov	r3, r0
 8002554:	3302      	adds	r3, #2
 8002556:	4a1b      	ldr	r2, [pc, #108]	; (80025c4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 8002558:	6013      	str	r3, [r2, #0]

		duty_deadman = (float) 100 * cnt_high / cnt_full;
 800255a:	4b1a      	ldr	r3, [pc, #104]	; (80025c4 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	ee07 3a90 	vmov	s15, r3
 8002562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002566:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80025c8 <HAL_TIM_IC_CaptureCallback+0xa0>
 800256a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800256e:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_TIM_IC_CaptureCallback+0x98>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800257a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002580:	edc3 7a00 	vstr	s15, [r3]
		duty_MA = duty_alpha * duty_deadman + (1-duty_alpha) * duty_MA;
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002586:	ed93 7a00 	vldr	s14, [r3]
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_TIM_IC_CaptureCallback+0xa4>)
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002596:	edd3 7a00 	vldr	s15, [r3]
 800259a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800259e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <HAL_TIM_IC_CaptureCallback+0xac>)
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <HAL_TIM_IC_CaptureCallback+0xac>)
 80025b2:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000b10 	.word	0x20000b10
 80025c4:	20000b14 	.word	0x20000b14
 80025c8:	42c80000 	.word	0x42c80000
 80025cc:	20000b18 	.word	0x20000b18
 80025d0:	20000008 	.word	0x20000008
 80025d4:	20000b1c 	.word	0x20000b1c

080025d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025dc:	b672      	cpsid	i
}
 80025de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <Error_Handler+0x8>

080025e2 <MotorDrive>:
#include "main.h"

int MotorDrive(TIM_HandleTypeDef* const pwmHandle, int duty)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b085      	sub	sp, #20
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
	int pwm_val = 1000+(duty*20);
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80025fa:	60fb      	str	r3, [r7, #12]
	pwmHandle -> Instance -> CCR1 = pwm_val;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	635a      	str	r2, [r3, #52]	; 0x34
	return pwm_val;
 8002604:	68fb      	ldr	r3, [r7, #12]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	0000      	movs	r0, r0
 8002614:	0000      	movs	r0, r0
	...

08002618 <ServoPosition>:
#include "main.h"
#include <math.h>

void ServoPosition(TIM_HandleTypeDef* const pwmHandle, double    angle){
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	ed87 0b00 	vstr	d0, [r7]
    if(angle < 20){angle = 20;}
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <ServoPosition+0xb0>)
 800262a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800262e:	f7fe fa75 	bl	8000b1c <__aeabi_dcmplt>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d004      	beq.n	8002642 <ServoPosition+0x2a>
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <ServoPosition+0xb0>)
 800263e:	e9c7 2300 	strd	r2, r3, [r7]
    if(angle>160){angle = 160;}
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	4b21      	ldr	r3, [pc, #132]	; (80026cc <ServoPosition+0xb4>)
 8002648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800264c:	f7fe fa84 	bl	8000b58 <__aeabi_dcmpgt>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d004      	beq.n	8002660 <ServoPosition+0x48>
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <ServoPosition+0xb4>)
 800265c:	e9c7 2300 	strd	r2, r3, [r7]
    //angle2CCR = ((angle/180+1)/20*60000);
    pwmHandle->Instance->CCR1 = (int)((angle/180+1)/20*60000);//angle2CCR;
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <ServoPosition+0xb8>)
 8002666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800266a:	f7fe f90f 	bl	800088c <__aeabi_ddiv>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <ServoPosition+0xbc>)
 800267c:	f7fd fe26 	bl	80002cc <__adddf3>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <ServoPosition+0xb0>)
 800268e:	f7fe f8fd 	bl	800088c <__aeabi_ddiv>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	a309      	add	r3, pc, #36	; (adr r3, 80026c0 <ServoPosition+0xa8>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd ffca 	bl	8000638 <__aeabi_dmul>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7fe fa74 	bl	8000b98 <__aeabi_d2iz>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	00000000 	.word	0x00000000
 80026c4:	40ed4c00 	.word	0x40ed4c00
 80026c8:	40340000 	.word	0x40340000
 80026cc:	40640000 	.word	0x40640000
 80026d0:	40668000 	.word	0x40668000
 80026d4:	3ff00000 	.word	0x3ff00000

080026d8 <SteeringAngle>:


float SteeringAngle(float p, float delta, float kp, float kd){
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	ed87 0a03 	vstr	s0, [r7, #12]
 80026e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80026e6:	ed87 1a01 	vstr	s2, [r7, #4]
 80026ea:	edc7 1a00 	vstr	s3, [r7]
	float phi = atan(0.7826*tan(-kp*p-kd*delta));
 80026ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80026f2:	eeb1 7a67 	vneg.f32	s14, s15
 80026f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80026fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026fe:	edd7 6a00 	vldr	s13, [r7]
 8002702:	edd7 7a02 	vldr	s15, [r7, #8]
 8002706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800270a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270e:	ee17 0a90 	vmov	r0, s15
 8002712:	f7fd ff39 	bl	8000588 <__aeabi_f2d>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	ec43 2b10 	vmov	d0, r2, r3
 800271e:	f008 f867 	bl	800a7f0 <tan>
 8002722:	ec51 0b10 	vmov	r0, r1, d0
 8002726:	a31d      	add	r3, pc, #116	; (adr r3, 800279c <SteeringAngle+0xc4>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fd ff84 	bl	8000638 <__aeabi_dmul>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	ec43 2b17 	vmov	d7, r2, r3
 8002738:	eeb0 0a47 	vmov.f32	s0, s14
 800273c:	eef0 0a67 	vmov.f32	s1, s15
 8002740:	f007 feaa 	bl	800a498 <atan>
 8002744:	ec53 2b10 	vmov	r2, r3, d0
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f7fe fa4c 	bl	8000be8 <__aeabi_d2f>
 8002750:	4603      	mov	r3, r0
 8002752:	617b      	str	r3, [r7, #20]
	float servoangle=90-phi*269.04;
 8002754:	6978      	ldr	r0, [r7, #20]
 8002756:	f7fd ff17 	bl	8000588 <__aeabi_f2d>
 800275a:	a312      	add	r3, pc, #72	; (adr r3, 80027a4 <SteeringAngle+0xcc>)
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	f7fd ff6a 	bl	8000638 <__aeabi_dmul>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	f04f 0000 	mov.w	r0, #0
 800276c:	490a      	ldr	r1, [pc, #40]	; (8002798 <SteeringAngle+0xc0>)
 800276e:	f7fd fdab 	bl	80002c8 <__aeabi_dsub>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	f7fe fa35 	bl	8000be8 <__aeabi_d2f>
 800277e:	4603      	mov	r3, r0
 8002780:	613b      	str	r3, [r7, #16]
	return servoangle;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	ee07 3a90 	vmov	s15, r3
}
 8002788:	eeb0 0a67 	vmov.f32	s0, s15
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	f3af 8000 	nop.w
 8002798:	40568000 	.word	0x40568000
 800279c:	27bb2fec 	.word	0x27bb2fec
 80027a0:	3fe90b0f 	.word	0x3fe90b0f
 80027a4:	d70a3d71 	.word	0xd70a3d71
 80027a8:	4070d0a3 	.word	0x4070d0a3

080027ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_MspInit+0x4c>)
 80027b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ba:	4a0f      	ldr	r2, [pc, #60]	; (80027f8 <HAL_MspInit+0x4c>)
 80027bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c0:	6453      	str	r3, [r2, #68]	; 0x44
 80027c2:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <HAL_MspInit+0x4c>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	603b      	str	r3, [r7, #0]
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_MspInit+0x4c>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <HAL_MspInit+0x4c>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_MspInit+0x4c>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	603b      	str	r3, [r7, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027ea:	2007      	movs	r0, #7
 80027ec:	f001 f880 	bl	80038f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40023800 	.word	0x40023800

080027fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08a      	sub	sp, #40	; 0x28
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
 8002812:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a17      	ldr	r2, [pc, #92]	; (8002878 <HAL_ADC_MspInit+0x7c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d127      	bne.n	800286e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_ADC_MspInit+0x80>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	4a15      	ldr	r2, [pc, #84]	; (800287c <HAL_ADC_MspInit+0x80>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6453      	str	r3, [r2, #68]	; 0x44
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_ADC_MspInit+0x80>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_ADC_MspInit+0x80>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	4a0e      	ldr	r2, [pc, #56]	; (800287c <HAL_ADC_MspInit+0x80>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <HAL_ADC_MspInit+0x80>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IMotor_Pin|UBatt_Pin;
 8002856:	2312      	movs	r3, #18
 8002858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800285a:	2303      	movs	r3, #3
 800285c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002862:	f107 0314 	add.w	r3, r7, #20
 8002866:	4619      	mov	r1, r3
 8002868:	4805      	ldr	r0, [pc, #20]	; (8002880 <HAL_ADC_MspInit+0x84>)
 800286a:	f001 f883 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800286e:	bf00      	nop
 8002870:	3728      	adds	r7, #40	; 0x28
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40012000 	.word	0x40012000
 800287c:	40023800 	.word	0x40023800
 8002880:	40020000 	.word	0x40020000

08002884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08e      	sub	sp, #56	; 0x38
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a5c      	ldr	r2, [pc, #368]	; (8002a14 <HAL_I2C_MspInit+0x190>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d12d      	bne.n	8002902 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
 80028aa:	4b5b      	ldr	r3, [pc, #364]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a5a      	ldr	r2, [pc, #360]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 80028b0:	f043 0302 	orr.w	r3, r3, #2
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b58      	ldr	r3, [pc, #352]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	623b      	str	r3, [r7, #32]
 80028c0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80028c2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c8:	2312      	movs	r3, #18
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028d4:	2304      	movs	r3, #4
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028dc:	4619      	mov	r1, r3
 80028de:	484f      	ldr	r0, [pc, #316]	; (8002a1c <HAL_I2C_MspInit+0x198>)
 80028e0:	f001 f848 	bl	8003974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028e4:	2300      	movs	r3, #0
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	4b4b      	ldr	r3, [pc, #300]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 80028ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ec:	4a4a      	ldr	r2, [pc, #296]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 80028ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028f2:	6413      	str	r3, [r2, #64]	; 0x40
 80028f4:	4b48      	ldr	r3, [pc, #288]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002900:	e083      	b.n	8002a0a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a46      	ldr	r2, [pc, #280]	; (8002a20 <HAL_I2C_MspInit+0x19c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d12d      	bne.n	8002968 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	4a40      	ldr	r2, [pc, #256]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 8002916:	f043 0302 	orr.w	r3, r3, #2
 800291a:	6313      	str	r3, [r2, #48]	; 0x30
 800291c:	4b3e      	ldr	r3, [pc, #248]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8002928:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800292e:	2312      	movs	r3, #18
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800293a:	2304      	movs	r3, #4
 800293c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800293e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002942:	4619      	mov	r1, r3
 8002944:	4835      	ldr	r0, [pc, #212]	; (8002a1c <HAL_I2C_MspInit+0x198>)
 8002946:	f001 f815 	bl	8003974 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	4b32      	ldr	r3, [pc, #200]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a31      	ldr	r2, [pc, #196]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 8002954:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697b      	ldr	r3, [r7, #20]
}
 8002966:	e050      	b.n	8002a0a <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2d      	ldr	r2, [pc, #180]	; (8002a24 <HAL_I2C_MspInit+0x1a0>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d14b      	bne.n	8002a0a <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002972:	2300      	movs	r3, #0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6313      	str	r3, [r2, #48]	; 0x30
 8002982:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002996:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	6313      	str	r3, [r2, #48]	; 0x30
 800299e:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029b0:	2312      	movs	r3, #18
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b8:	2303      	movs	r3, #3
 80029ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029bc:	2304      	movs	r3, #4
 80029be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c4:	4619      	mov	r1, r3
 80029c6:	4818      	ldr	r0, [pc, #96]	; (8002a28 <HAL_I2C_MspInit+0x1a4>)
 80029c8:	f000 ffd4 	bl	8003974 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d2:	2312      	movs	r3, #18
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029de:	2304      	movs	r3, #4
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e6:	4619      	mov	r1, r3
 80029e8:	4810      	ldr	r0, [pc, #64]	; (8002a2c <HAL_I2C_MspInit+0x1a8>)
 80029ea:	f000 ffc3 	bl	8003974 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	4a08      	ldr	r2, [pc, #32]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 80029f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029fc:	6413      	str	r3, [r2, #64]	; 0x40
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_I2C_MspInit+0x194>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
}
 8002a0a:	bf00      	nop
 8002a0c:	3738      	adds	r7, #56	; 0x38
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40005400 	.word	0x40005400
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020400 	.word	0x40020400
 8002a20:	40005800 	.word	0x40005800
 8002a24:	40005c00 	.word	0x40005c00
 8002a28:	40020800 	.word	0x40020800
 8002a2c:	40020000 	.word	0x40020000

08002a30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b090      	sub	sp, #64	; 0x40
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a72      	ldr	r2, [pc, #456]	; (8002c18 <HAL_SPI_MspInit+0x1e8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d14a      	bne.n	8002ae8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a56:	4b71      	ldr	r3, [pc, #452]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a70      	ldr	r2, [pc, #448]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002a5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b6e      	ldr	r3, [pc, #440]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
 8002a72:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a69      	ldr	r2, [pc, #420]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a62      	ldr	r2, [pc, #392]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b60      	ldr	r3, [pc, #384]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	623b      	str	r3, [r7, #32]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002aa6:	23a0      	movs	r3, #160	; 0xa0
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ab6:	2305      	movs	r3, #5
 8002ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4857      	ldr	r0, [pc, #348]	; (8002c20 <HAL_SPI_MspInit+0x1f0>)
 8002ac2:	f000 ff57 	bl	8003974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ac6:	2310      	movs	r3, #16
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ad6:	2305      	movs	r3, #5
 8002ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4850      	ldr	r0, [pc, #320]	; (8002c24 <HAL_SPI_MspInit+0x1f4>)
 8002ae2:	f000 ff47 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ae6:	e092      	b.n	8002c0e <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a4e      	ldr	r2, [pc, #312]	; (8002c28 <HAL_SPI_MspInit+0x1f8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d15b      	bne.n	8002baa <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a48      	ldr	r2, [pc, #288]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0a:	61fb      	str	r3, [r7, #28]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	4b42      	ldr	r3, [pc, #264]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a41      	ldr	r2, [pc, #260]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	61bb      	str	r3, [r7, #24]
 8002b28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	617b      	str	r3, [r7, #20]
 8002b2e:	4b3b      	ldr	r3, [pc, #236]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	4a3a      	ldr	r2, [pc, #232]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3a:	4b38      	ldr	r3, [pc, #224]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002b46:	2302      	movs	r3, #2
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b52:	2303      	movs	r3, #3
 8002b54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002b56:	2307      	movs	r3, #7
 8002b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4832      	ldr	r0, [pc, #200]	; (8002c2c <HAL_SPI_MspInit+0x1fc>)
 8002b62:	f000 ff07 	bl	8003974 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b66:	2304      	movs	r3, #4
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b72:	2303      	movs	r3, #3
 8002b74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b76:	2305      	movs	r3, #5
 8002b78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b7e:	4619      	mov	r1, r3
 8002b80:	482a      	ldr	r0, [pc, #168]	; (8002c2c <HAL_SPI_MspInit+0x1fc>)
 8002b82:	f000 fef7 	bl	8003974 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b94:	2303      	movs	r3, #3
 8002b96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b98:	2305      	movs	r3, #5
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4820      	ldr	r0, [pc, #128]	; (8002c24 <HAL_SPI_MspInit+0x1f4>)
 8002ba4:	f000 fee6 	bl	8003974 <HAL_GPIO_Init>
}
 8002ba8:	e031      	b.n	8002c0e <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a20      	ldr	r2, [pc, #128]	; (8002c30 <HAL_SPI_MspInit+0x200>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d12c      	bne.n	8002c0e <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	4b18      	ldr	r3, [pc, #96]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	4a17      	ldr	r2, [pc, #92]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	4b11      	ldr	r3, [pc, #68]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4a10      	ldr	r2, [pc, #64]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002bda:	f043 0304 	orr.w	r3, r3, #4
 8002bde:	6313      	str	r3, [r2, #48]	; 0x30
 8002be0:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <HAL_SPI_MspInit+0x1ec>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002bec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bfe:	2306      	movs	r3, #6
 8002c00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c06:	4619      	mov	r1, r3
 8002c08:	4808      	ldr	r0, [pc, #32]	; (8002c2c <HAL_SPI_MspInit+0x1fc>)
 8002c0a:	f000 feb3 	bl	8003974 <HAL_GPIO_Init>
}
 8002c0e:	bf00      	nop
 8002c10:	3740      	adds	r7, #64	; 0x40
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40013000 	.word	0x40013000
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40020000 	.word	0x40020000
 8002c24:	40020400 	.word	0x40020400
 8002c28:	40003800 	.word	0x40003800
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40003c00 	.word	0x40003c00

08002c34 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c54:	d134      	bne.n	8002cc0 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_TIM_IC_MspInit+0x94>)
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	4a1a      	ldr	r2, [pc, #104]	; (8002cc8 <HAL_TIM_IC_MspInit+0x94>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40
 8002c66:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <HAL_TIM_IC_MspInit+0x94>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	613b      	str	r3, [r7, #16]
 8002c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <HAL_TIM_IC_MspInit+0x94>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_TIM_IC_MspInit+0x94>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <HAL_TIM_IC_MspInit+0x94>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca4:	f107 0314 	add.w	r3, r7, #20
 8002ca8:	4619      	mov	r1, r3
 8002caa:	4808      	ldr	r0, [pc, #32]	; (8002ccc <HAL_TIM_IC_MspInit+0x98>)
 8002cac:	f000 fe62 	bl	8003974 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	201c      	movs	r0, #28
 8002cb6:	f000 fe26 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002cba:	201c      	movs	r0, #28
 8002cbc:	f000 fe3f 	bl	800393e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002cc0:	bf00      	nop
 8002cc2:	3728      	adds	r7, #40	; 0x28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40020000 	.word	0x40020000

08002cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a3a      	ldr	r2, [pc, #232]	; (8002dc8 <HAL_TIM_Base_MspInit+0xf8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10e      	bne.n	8002d00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61fb      	str	r3, [r7, #28]
 8002ce6:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a38      	ldr	r2, [pc, #224]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002cec:	f043 0302 	orr.w	r3, r3, #2
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002cfe:	e05e      	b.n	8002dbe <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a32      	ldr	r2, [pc, #200]	; (8002dd0 <HAL_TIM_Base_MspInit+0x100>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d10e      	bne.n	8002d28 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	4b2f      	ldr	r3, [pc, #188]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	4a2e      	ldr	r2, [pc, #184]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002d14:	f043 0304 	orr.w	r3, r3, #4
 8002d18:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1a:	4b2c      	ldr	r3, [pc, #176]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	69bb      	ldr	r3, [r7, #24]
}
 8002d26:	e04a      	b.n	8002dbe <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM5)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a29      	ldr	r2, [pc, #164]	; (8002dd4 <HAL_TIM_Base_MspInit+0x104>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d116      	bne.n	8002d60 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	4b25      	ldr	r3, [pc, #148]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a24      	ldr	r2, [pc, #144]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002d3c:	f043 0308 	orr.w	r3, r3, #8
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	2032      	movs	r0, #50	; 0x32
 8002d54:	f000 fdd7 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002d58:	2032      	movs	r0, #50	; 0x32
 8002d5a:	f000 fdf0 	bl	800393e <HAL_NVIC_EnableIRQ>
}
 8002d5e:	e02e      	b.n	8002dbe <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a1c      	ldr	r2, [pc, #112]	; (8002dd8 <HAL_TIM_Base_MspInit+0x108>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d116      	bne.n	8002d98 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a16      	ldr	r2, [pc, #88]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002d74:	f043 0320 	orr.w	r3, r3, #32
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2100      	movs	r1, #0
 8002d8a:	2037      	movs	r0, #55	; 0x37
 8002d8c:	f000 fdbb 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d90:	2037      	movs	r0, #55	; 0x37
 8002d92:	f000 fdd4 	bl	800393e <HAL_NVIC_EnableIRQ>
}
 8002d96:	e012      	b.n	8002dbe <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM13)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a0f      	ldr	r2, [pc, #60]	; (8002ddc <HAL_TIM_Base_MspInit+0x10c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d10d      	bne.n	8002dbe <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	4b09      	ldr	r3, [pc, #36]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4a08      	ldr	r2, [pc, #32]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <HAL_TIM_Base_MspInit+0xfc>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
}
 8002dbe:	bf00      	nop
 8002dc0:	3720      	adds	r7, #32
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40000800 	.word	0x40000800
 8002dd4:	40000c00 	.word	0x40000c00
 8002dd8:	40001400 	.word	0x40001400
 8002ddc:	40001c00 	.word	0x40001c00

08002de0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08c      	sub	sp, #48	; 0x30
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 031c 	add.w	r3, r7, #28
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a48      	ldr	r2, [pc, #288]	; (8002f20 <HAL_TIM_MspPostInit+0x140>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d11e      	bne.n	8002e40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_TIM_MspPostInit+0x144>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a46      	ldr	r2, [pc, #280]	; (8002f24 <HAL_TIM_MspPostInit+0x144>)
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b44      	ldr	r3, [pc, #272]	; (8002f24 <HAL_TIM_MspPostInit+0x144>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	61bb      	str	r3, [r7, #24]
 8002e1c:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_PMW1_Pin;
 8002e1e:	2320      	movs	r3, #32
 8002e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PMW1_GPIO_Port, &GPIO_InitStruct);
 8002e32:	f107 031c 	add.w	r3, r7, #28
 8002e36:	4619      	mov	r1, r3
 8002e38:	483b      	ldr	r0, [pc, #236]	; (8002f28 <HAL_TIM_MspPostInit+0x148>)
 8002e3a:	f000 fd9b 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002e3e:	e06a      	b.n	8002f16 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a39      	ldr	r2, [pc, #228]	; (8002f2c <HAL_TIM_MspPostInit+0x14c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d11e      	bne.n	8002e88 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	4b35      	ldr	r3, [pc, #212]	; (8002f24 <HAL_TIM_MspPostInit+0x144>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a34      	ldr	r2, [pc, #208]	; (8002f24 <HAL_TIM_MspPostInit+0x144>)
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b32      	ldr	r3, [pc, #200]	; (8002f24 <HAL_TIM_MspPostInit+0x144>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DRV_PWM2_Pin;
 8002e66:	2340      	movs	r3, #64	; 0x40
 8002e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e76:	2302      	movs	r3, #2
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002e7a:	f107 031c 	add.w	r3, r7, #28
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4829      	ldr	r0, [pc, #164]	; (8002f28 <HAL_TIM_MspPostInit+0x148>)
 8002e82:	f000 fd77 	bl	8003974 <HAL_GPIO_Init>
}
 8002e86:	e046      	b.n	8002f16 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a28      	ldr	r2, [pc, #160]	; (8002f30 <HAL_TIM_MspPostInit+0x150>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d11e      	bne.n	8002ed0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <HAL_TIM_MspPostInit+0x144>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a22      	ldr	r2, [pc, #136]	; (8002f24 <HAL_TIM_MspPostInit+0x144>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <HAL_TIM_MspPostInit+0x144>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM2_Pin;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002ec2:	f107 031c 	add.w	r3, r7, #28
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	481a      	ldr	r0, [pc, #104]	; (8002f34 <HAL_TIM_MspPostInit+0x154>)
 8002eca:	f000 fd53 	bl	8003974 <HAL_GPIO_Init>
}
 8002ece:	e022      	b.n	8002f16 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM13)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <HAL_TIM_MspPostInit+0x158>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d11d      	bne.n	8002f16 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
 8002ede:	4b11      	ldr	r3, [pc, #68]	; (8002f24 <HAL_TIM_MspPostInit+0x144>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a10      	ldr	r2, [pc, #64]	; (8002f24 <HAL_TIM_MspPostInit+0x144>)
 8002ee4:	f043 0301 	orr.w	r3, r3, #1
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b0e      	ldr	r3, [pc, #56]	; (8002f24 <HAL_TIM_MspPostInit+0x144>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM_Pin;
 8002ef6:	2340      	movs	r3, #64	; 0x40
 8002ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efa:	2302      	movs	r3, #2
 8002efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f02:	2300      	movs	r3, #0
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002f06:	2309      	movs	r3, #9
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_GPIO_Port, &GPIO_InitStruct);
 8002f0a:	f107 031c 	add.w	r3, r7, #28
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4808      	ldr	r0, [pc, #32]	; (8002f34 <HAL_TIM_MspPostInit+0x154>)
 8002f12:	f000 fd2f 	bl	8003974 <HAL_GPIO_Init>
}
 8002f16:	bf00      	nop
 8002f18:	3730      	adds	r7, #48	; 0x30
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40020400 	.word	0x40020400
 8002f2c:	40000800 	.word	0x40000800
 8002f30:	40000c00 	.word	0x40000c00
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40001c00 	.word	0x40001c00

08002f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b08c      	sub	sp, #48	; 0x30
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f44:	f107 031c 	add.w	r3, r7, #28
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a32      	ldr	r2, [pc, #200]	; (8003024 <HAL_UART_MspInit+0xe8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d12c      	bne.n	8002fb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	4b31      	ldr	r3, [pc, #196]	; (8003028 <HAL_UART_MspInit+0xec>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a30      	ldr	r2, [pc, #192]	; (8003028 <HAL_UART_MspInit+0xec>)
 8002f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	; (8003028 <HAL_UART_MspInit+0xec>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	61bb      	str	r3, [r7, #24]
 8002f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <HAL_UART_MspInit+0xec>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a29      	ldr	r2, [pc, #164]	; (8003028 <HAL_UART_MspInit+0xec>)
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b27      	ldr	r3, [pc, #156]	; (8003028 <HAL_UART_MspInit+0xec>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f96:	230c      	movs	r3, #12
 8002f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002fa6:	2307      	movs	r3, #7
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002faa:	f107 031c 	add.w	r3, r7, #28
 8002fae:	4619      	mov	r1, r3
 8002fb0:	481e      	ldr	r0, [pc, #120]	; (800302c <HAL_UART_MspInit+0xf0>)
 8002fb2:	f000 fcdf 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002fb6:	e030      	b.n	800301a <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <HAL_UART_MspInit+0xf4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d12b      	bne.n	800301a <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	4b18      	ldr	r3, [pc, #96]	; (8003028 <HAL_UART_MspInit+0xec>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	4a17      	ldr	r2, [pc, #92]	; (8003028 <HAL_UART_MspInit+0xec>)
 8002fcc:	f043 0320 	orr.w	r3, r3, #32
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <HAL_UART_MspInit+0xec>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b11      	ldr	r3, [pc, #68]	; (8003028 <HAL_UART_MspInit+0xec>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a10      	ldr	r2, [pc, #64]	; (8003028 <HAL_UART_MspInit+0xec>)
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <HAL_UART_MspInit+0xec>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0304 	and.w	r3, r3, #4
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|RADIO_RX_Pin;
 8002ffa:	23c0      	movs	r3, #192	; 0xc0
 8002ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003006:	2303      	movs	r3, #3
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800300a:	2308      	movs	r3, #8
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800300e:	f107 031c 	add.w	r3, r7, #28
 8003012:	4619      	mov	r1, r3
 8003014:	4807      	ldr	r0, [pc, #28]	; (8003034 <HAL_UART_MspInit+0xf8>)
 8003016:	f000 fcad 	bl	8003974 <HAL_GPIO_Init>
}
 800301a:	bf00      	nop
 800301c:	3730      	adds	r7, #48	; 0x30
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40004400 	.word	0x40004400
 8003028:	40023800 	.word	0x40023800
 800302c:	40020000 	.word	0x40020000
 8003030:	40011400 	.word	0x40011400
 8003034:	40020800 	.word	0x40020800

08003038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800303c:	e7fe      	b.n	800303c <NMI_Handler+0x4>

0800303e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003042:	e7fe      	b.n	8003042 <HardFault_Handler+0x4>

08003044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003048:	e7fe      	b.n	8003048 <MemManage_Handler+0x4>

0800304a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800304e:	e7fe      	b.n	800304e <BusFault_Handler+0x4>

08003050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003054:	e7fe      	b.n	8003054 <UsageFault_Handler+0x4>

08003056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003084:	f000 f8ae 	bl	80031e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003090:	4802      	ldr	r0, [pc, #8]	; (800309c <TIM2_IRQHandler+0x10>)
 8003092:	f002 fe01 	bl	8005c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000450 	.word	0x20000450

080030a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <TIM5_IRQHandler+0x10>)
 80030a6:	f002 fdf7 	bl	8005c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000528 	.word	0x20000528

080030b4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80030b8:	4802      	ldr	r0, [pc, #8]	; (80030c4 <TIM7_IRQHandler+0x10>)
 80030ba:	f002 fded 	bl	8005c98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000570 	.word	0x20000570

080030c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <SystemInit+0x20>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	4a05      	ldr	r2, [pc, #20]	; (80030e8 <SystemInit+0x20>)
 80030d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003124 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030f0:	480d      	ldr	r0, [pc, #52]	; (8003128 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030f2:	490e      	ldr	r1, [pc, #56]	; (800312c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030f4:	4a0e      	ldr	r2, [pc, #56]	; (8003130 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030f8:	e002      	b.n	8003100 <LoopCopyDataInit>

080030fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030fe:	3304      	adds	r3, #4

08003100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003104:	d3f9      	bcc.n	80030fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003106:	4a0b      	ldr	r2, [pc, #44]	; (8003134 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003108:	4c0b      	ldr	r4, [pc, #44]	; (8003138 <LoopFillZerobss+0x26>)
  movs r3, #0
 800310a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800310c:	e001      	b.n	8003112 <LoopFillZerobss>

0800310e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800310e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003110:	3204      	adds	r2, #4

08003112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003114:	d3fb      	bcc.n	800310e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003116:	f7ff ffd7 	bl	80030c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800311a:	f004 faad 	bl	8007678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800311e:	f7fe fae1 	bl	80016e4 <main>
  bx  lr    
 8003122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800312c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003130:	0800c030 	.word	0x0800c030
  ldr r2, =_sbss
 8003134:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003138:	20000b3c 	.word	0x20000b3c

0800313c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800313c:	e7fe      	b.n	800313c <ADC_IRQHandler>
	...

08003140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <HAL_Init+0x40>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <HAL_Init+0x40>)
 800314a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800314e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_Init+0x40>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <HAL_Init+0x40>)
 8003156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800315a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800315c:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_Init+0x40>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a07      	ldr	r2, [pc, #28]	; (8003180 <HAL_Init+0x40>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003166:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003168:	2003      	movs	r0, #3
 800316a:	f000 fbc1 	bl	80038f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800316e:	2000      	movs	r0, #0
 8003170:	f000 f808 	bl	8003184 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003174:	f7ff fb1a 	bl	80027ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00

08003184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800318c:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <HAL_InitTick+0x54>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_InitTick+0x58>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800319a:	fbb3 f3f1 	udiv	r3, r3, r1
 800319e:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fbd9 	bl	800395a <HAL_SYSTICK_Config>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e00e      	b.n	80031d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b0f      	cmp	r3, #15
 80031b6:	d80a      	bhi.n	80031ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031b8:	2200      	movs	r2, #0
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	f000 fba1 	bl	8003906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031c4:	4a06      	ldr	r2, [pc, #24]	; (80031e0 <HAL_InitTick+0x5c>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e000      	b.n	80031d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	2000000c 	.word	0x2000000c
 80031dc:	20000014 	.word	0x20000014
 80031e0:	20000010 	.word	0x20000010

080031e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <HAL_IncTick+0x20>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <HAL_IncTick+0x24>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4413      	add	r3, r2
 80031f4:	4a04      	ldr	r2, [pc, #16]	; (8003208 <HAL_IncTick+0x24>)
 80031f6:	6013      	str	r3, [r2, #0]
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000014 	.word	0x20000014
 8003208:	20000b24 	.word	0x20000b24

0800320c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return uwTick;
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <HAL_GetTick+0x14>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20000b24 	.word	0x20000b24

08003224 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800322c:	f7ff ffee 	bl	800320c <HAL_GetTick>
 8003230:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323c:	d005      	beq.n	800324a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800323e:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <HAL_Delay+0x44>)
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4413      	add	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800324a:	bf00      	nop
 800324c:	f7ff ffde 	bl	800320c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	429a      	cmp	r2, r3
 800325a:	d8f7      	bhi.n	800324c <HAL_Delay+0x28>
  {
  }
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000014 	.word	0x20000014

0800326c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e033      	b.n	80032ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff fab6 	bl	80027fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d118      	bne.n	80032dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032b2:	f023 0302 	bic.w	r3, r3, #2
 80032b6:	f043 0202 	orr.w	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f94a 	bl	8003558 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f023 0303 	bic.w	r3, r3, #3
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40
 80032da:	e001      	b.n	80032e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_ADC_ConfigChannel+0x1c>
 800330c:	2302      	movs	r3, #2
 800330e:	e113      	b.n	8003538 <HAL_ADC_ConfigChannel+0x244>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b09      	cmp	r3, #9
 800331e:	d925      	bls.n	800336c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68d9      	ldr	r1, [r3, #12]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	b29b      	uxth	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	3b1e      	subs	r3, #30
 8003336:	2207      	movs	r2, #7
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43da      	mvns	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	400a      	ands	r2, r1
 8003344:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68d9      	ldr	r1, [r3, #12]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	b29b      	uxth	r3, r3
 8003356:	4618      	mov	r0, r3
 8003358:	4603      	mov	r3, r0
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4403      	add	r3, r0
 800335e:	3b1e      	subs	r3, #30
 8003360:	409a      	lsls	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	e022      	b.n	80033b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6919      	ldr	r1, [r3, #16]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	2207      	movs	r2, #7
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43da      	mvns	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	400a      	ands	r2, r1
 800338e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6919      	ldr	r1, [r3, #16]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4618      	mov	r0, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4403      	add	r3, r0
 80033a8:	409a      	lsls	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d824      	bhi.n	8003404 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	3b05      	subs	r3, #5
 80033cc:	221f      	movs	r2, #31
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43da      	mvns	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	400a      	ands	r2, r1
 80033da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4618      	mov	r0, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	3b05      	subs	r3, #5
 80033f6:	fa00 f203 	lsl.w	r2, r0, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	635a      	str	r2, [r3, #52]	; 0x34
 8003402:	e04c      	b.n	800349e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b0c      	cmp	r3, #12
 800340a:	d824      	bhi.n	8003456 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	3b23      	subs	r3, #35	; 0x23
 800341e:	221f      	movs	r2, #31
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43da      	mvns	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	400a      	ands	r2, r1
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	b29b      	uxth	r3, r3
 800343a:	4618      	mov	r0, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	3b23      	subs	r3, #35	; 0x23
 8003448:	fa00 f203 	lsl.w	r2, r0, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
 8003454:	e023      	b.n	800349e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	3b41      	subs	r3, #65	; 0x41
 8003468:	221f      	movs	r2, #31
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	400a      	ands	r2, r1
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	b29b      	uxth	r3, r3
 8003484:	4618      	mov	r0, r3
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	4613      	mov	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	3b41      	subs	r3, #65	; 0x41
 8003492:	fa00 f203 	lsl.w	r2, r0, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800349e:	4b29      	ldr	r3, [pc, #164]	; (8003544 <HAL_ADC_ConfigChannel+0x250>)
 80034a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a28      	ldr	r2, [pc, #160]	; (8003548 <HAL_ADC_ConfigChannel+0x254>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d10f      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x1d8>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b12      	cmp	r3, #18
 80034b2:	d10b      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1d      	ldr	r2, [pc, #116]	; (8003548 <HAL_ADC_ConfigChannel+0x254>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d12b      	bne.n	800352e <HAL_ADC_ConfigChannel+0x23a>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1c      	ldr	r2, [pc, #112]	; (800354c <HAL_ADC_ConfigChannel+0x258>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d003      	beq.n	80034e8 <HAL_ADC_ConfigChannel+0x1f4>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b11      	cmp	r3, #17
 80034e6:	d122      	bne.n	800352e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a11      	ldr	r2, [pc, #68]	; (800354c <HAL_ADC_ConfigChannel+0x258>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d111      	bne.n	800352e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <HAL_ADC_ConfigChannel+0x25c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a11      	ldr	r2, [pc, #68]	; (8003554 <HAL_ADC_ConfigChannel+0x260>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	0c9a      	lsrs	r2, r3, #18
 8003516:	4613      	mov	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003520:	e002      	b.n	8003528 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	3b01      	subs	r3, #1
 8003526:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f9      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	40012300 	.word	0x40012300
 8003548:	40012000 	.word	0x40012000
 800354c:	10000012 	.word	0x10000012
 8003550:	2000000c 	.word	0x2000000c
 8003554:	431bde83 	.word	0x431bde83

08003558 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003560:	4b79      	ldr	r3, [pc, #484]	; (8003748 <ADC_Init+0x1f0>)
 8003562:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	431a      	orrs	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800358c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	021a      	lsls	r2, r3, #8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6899      	ldr	r1, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	4a58      	ldr	r2, [pc, #352]	; (800374c <ADC_Init+0x1f4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6899      	ldr	r1, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6899      	ldr	r1, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	e00f      	b.n	8003656 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003654:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0202 	bic.w	r2, r2, #2
 8003664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6899      	ldr	r1, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7e1b      	ldrb	r3, [r3, #24]
 8003670:	005a      	lsls	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01b      	beq.n	80036bc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003692:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6859      	ldr	r1, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	3b01      	subs	r3, #1
 80036b0:	035a      	lsls	r2, r3, #13
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	e007      	b.n	80036cc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	051a      	lsls	r2, r3, #20
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6899      	ldr	r1, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800370e:	025a      	lsls	r2, r3, #9
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6899      	ldr	r1, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	029a      	lsls	r2, r3, #10
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	609a      	str	r2, [r3, #8]
}
 800373c:	bf00      	nop
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40012300 	.word	0x40012300
 800374c:	0f000001 	.word	0x0f000001

08003750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800376c:	4013      	ands	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003782:	4a04      	ldr	r2, [pc, #16]	; (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	60d3      	str	r3, [r2, #12]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <__NVIC_GetPriorityGrouping+0x18>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	f003 0307 	and.w	r3, r3, #7
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	db0b      	blt.n	80037de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	4907      	ldr	r1, [pc, #28]	; (80037ec <__NVIC_EnableIRQ+0x38>)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	2001      	movs	r0, #1
 80037d6:	fa00 f202 	lsl.w	r2, r0, r2
 80037da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000e100 	.word	0xe000e100

080037f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003800:	2b00      	cmp	r3, #0
 8003802:	db0a      	blt.n	800381a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	490c      	ldr	r1, [pc, #48]	; (800383c <__NVIC_SetPriority+0x4c>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	440b      	add	r3, r1
 8003814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003818:	e00a      	b.n	8003830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4908      	ldr	r1, [pc, #32]	; (8003840 <__NVIC_SetPriority+0x50>)
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3b04      	subs	r3, #4
 8003828:	0112      	lsls	r2, r2, #4
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	440b      	add	r3, r1
 800382e:	761a      	strb	r2, [r3, #24]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000e100 	.word	0xe000e100
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f1c3 0307 	rsb	r3, r3, #7
 800385e:	2b04      	cmp	r3, #4
 8003860:	bf28      	it	cs
 8003862:	2304      	movcs	r3, #4
 8003864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3304      	adds	r3, #4
 800386a:	2b06      	cmp	r3, #6
 800386c:	d902      	bls.n	8003874 <NVIC_EncodePriority+0x30>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3b03      	subs	r3, #3
 8003872:	e000      	b.n	8003876 <NVIC_EncodePriority+0x32>
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	401a      	ands	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800388c:	f04f 31ff 	mov.w	r1, #4294967295
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	43d9      	mvns	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	4313      	orrs	r3, r2
         );
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3724      	adds	r7, #36	; 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038bc:	d301      	bcc.n	80038c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038be:	2301      	movs	r3, #1
 80038c0:	e00f      	b.n	80038e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <SysTick_Config+0x40>)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ca:	210f      	movs	r1, #15
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	f7ff ff8e 	bl	80037f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <SysTick_Config+0x40>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <SysTick_Config+0x40>)
 80038dc:	2207      	movs	r2, #7
 80038de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	e000e010 	.word	0xe000e010

080038f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ff29 	bl	8003750 <__NVIC_SetPriorityGrouping>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003918:	f7ff ff3e 	bl	8003798 <__NVIC_GetPriorityGrouping>
 800391c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	6978      	ldr	r0, [r7, #20]
 8003924:	f7ff ff8e 	bl	8003844 <NVIC_EncodePriority>
 8003928:	4602      	mov	r2, r0
 800392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff5d 	bl	80037f0 <__NVIC_SetPriority>
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff31 	bl	80037b4 <__NVIC_EnableIRQ>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ffa2 	bl	80038ac <SysTick_Config>
 8003968:	4603      	mov	r3, r0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003974:	b480      	push	{r7}
 8003976:	b089      	sub	sp, #36	; 0x24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	e165      	b.n	8003c5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003990:	2201      	movs	r2, #1
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	697a      	ldr	r2, [r7, #20]
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	f040 8154 	bne.w	8003c56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d005      	beq.n	80039c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d130      	bne.n	8003a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	2203      	movs	r2, #3
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43db      	mvns	r3, r3
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	4013      	ands	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68da      	ldr	r2, [r3, #12]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039fc:	2201      	movs	r2, #1
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 0201 	and.w	r2, r3, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d017      	beq.n	8003a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d123      	bne.n	8003ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	08da      	lsrs	r2, r3, #3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3208      	adds	r2, #8
 8003a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	220f      	movs	r2, #15
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	4013      	ands	r3, r2
 8003a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	08da      	lsrs	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3208      	adds	r2, #8
 8003ab2:	69b9      	ldr	r1, [r7, #24]
 8003ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0203 	and.w	r2, r3, #3
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80ae 	beq.w	8003c56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b5d      	ldr	r3, [pc, #372]	; (8003c74 <HAL_GPIO_Init+0x300>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	4a5c      	ldr	r2, [pc, #368]	; (8003c74 <HAL_GPIO_Init+0x300>)
 8003b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b08:	6453      	str	r3, [r2, #68]	; 0x44
 8003b0a:	4b5a      	ldr	r3, [pc, #360]	; (8003c74 <HAL_GPIO_Init+0x300>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b16:	4a58      	ldr	r2, [pc, #352]	; (8003c78 <HAL_GPIO_Init+0x304>)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	220f      	movs	r2, #15
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a4f      	ldr	r2, [pc, #316]	; (8003c7c <HAL_GPIO_Init+0x308>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d025      	beq.n	8003b8e <HAL_GPIO_Init+0x21a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a4e      	ldr	r2, [pc, #312]	; (8003c80 <HAL_GPIO_Init+0x30c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d01f      	beq.n	8003b8a <HAL_GPIO_Init+0x216>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a4d      	ldr	r2, [pc, #308]	; (8003c84 <HAL_GPIO_Init+0x310>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d019      	beq.n	8003b86 <HAL_GPIO_Init+0x212>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a4c      	ldr	r2, [pc, #304]	; (8003c88 <HAL_GPIO_Init+0x314>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_GPIO_Init+0x20e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a4b      	ldr	r2, [pc, #300]	; (8003c8c <HAL_GPIO_Init+0x318>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d00d      	beq.n	8003b7e <HAL_GPIO_Init+0x20a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a4a      	ldr	r2, [pc, #296]	; (8003c90 <HAL_GPIO_Init+0x31c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d007      	beq.n	8003b7a <HAL_GPIO_Init+0x206>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a49      	ldr	r2, [pc, #292]	; (8003c94 <HAL_GPIO_Init+0x320>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d101      	bne.n	8003b76 <HAL_GPIO_Init+0x202>
 8003b72:	2306      	movs	r3, #6
 8003b74:	e00c      	b.n	8003b90 <HAL_GPIO_Init+0x21c>
 8003b76:	2307      	movs	r3, #7
 8003b78:	e00a      	b.n	8003b90 <HAL_GPIO_Init+0x21c>
 8003b7a:	2305      	movs	r3, #5
 8003b7c:	e008      	b.n	8003b90 <HAL_GPIO_Init+0x21c>
 8003b7e:	2304      	movs	r3, #4
 8003b80:	e006      	b.n	8003b90 <HAL_GPIO_Init+0x21c>
 8003b82:	2303      	movs	r3, #3
 8003b84:	e004      	b.n	8003b90 <HAL_GPIO_Init+0x21c>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e002      	b.n	8003b90 <HAL_GPIO_Init+0x21c>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_GPIO_Init+0x21c>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	f002 0203 	and.w	r2, r2, #3
 8003b96:	0092      	lsls	r2, r2, #2
 8003b98:	4093      	lsls	r3, r2
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ba0:	4935      	ldr	r1, [pc, #212]	; (8003c78 <HAL_GPIO_Init+0x304>)
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	3302      	adds	r3, #2
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bae:	4b3a      	ldr	r3, [pc, #232]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bd2:	4a31      	ldr	r2, [pc, #196]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bd8:	4b2f      	ldr	r3, [pc, #188]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	43db      	mvns	r3, r3
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bfc:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c02:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	43db      	mvns	r3, r3
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003c1e:	69ba      	ldr	r2, [r7, #24]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c26:	4a1c      	ldr	r2, [pc, #112]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c50:	4a11      	ldr	r2, [pc, #68]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	61fb      	str	r3, [r7, #28]
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	2b0f      	cmp	r3, #15
 8003c60:	f67f ae96 	bls.w	8003990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	3724      	adds	r7, #36	; 0x24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40013800 	.word	0x40013800
 8003c7c:	40020000 	.word	0x40020000
 8003c80:	40020400 	.word	0x40020400
 8003c84:	40020800 	.word	0x40020800
 8003c88:	40020c00 	.word	0x40020c00
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	40021400 	.word	0x40021400
 8003c94:	40021800 	.word	0x40021800
 8003c98:	40013c00 	.word	0x40013c00

08003c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	807b      	strh	r3, [r7, #2]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cac:	787b      	ldrb	r3, [r7, #1]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cb2:	887a      	ldrh	r2, [r7, #2]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cb8:	e003      	b.n	8003cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cba:	887b      	ldrh	r3, [r7, #2]
 8003cbc:	041a      	lsls	r2, r3, #16
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	619a      	str	r2, [r3, #24]
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e12b      	b.n	8003f3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fe fdc4 	bl	8002884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2224      	movs	r2, #36	; 0x24
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d34:	f000 fa52 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8003d38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	4a81      	ldr	r2, [pc, #516]	; (8003f44 <HAL_I2C_Init+0x274>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d807      	bhi.n	8003d54 <HAL_I2C_Init+0x84>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a80      	ldr	r2, [pc, #512]	; (8003f48 <HAL_I2C_Init+0x278>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	bf94      	ite	ls
 8003d4c:	2301      	movls	r3, #1
 8003d4e:	2300      	movhi	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e006      	b.n	8003d62 <HAL_I2C_Init+0x92>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a7d      	ldr	r2, [pc, #500]	; (8003f4c <HAL_I2C_Init+0x27c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	bf94      	ite	ls
 8003d5c:	2301      	movls	r3, #1
 8003d5e:	2300      	movhi	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0e7      	b.n	8003f3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a78      	ldr	r2, [pc, #480]	; (8003f50 <HAL_I2C_Init+0x280>)
 8003d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d72:	0c9b      	lsrs	r3, r3, #18
 8003d74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4a6a      	ldr	r2, [pc, #424]	; (8003f44 <HAL_I2C_Init+0x274>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d802      	bhi.n	8003da4 <HAL_I2C_Init+0xd4>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	3301      	adds	r3, #1
 8003da2:	e009      	b.n	8003db8 <HAL_I2C_Init+0xe8>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	4a69      	ldr	r2, [pc, #420]	; (8003f54 <HAL_I2C_Init+0x284>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	099b      	lsrs	r3, r3, #6
 8003db6:	3301      	adds	r3, #1
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	495c      	ldr	r1, [pc, #368]	; (8003f44 <HAL_I2C_Init+0x274>)
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	d819      	bhi.n	8003e0c <HAL_I2C_Init+0x13c>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1e59      	subs	r1, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003de6:	1c59      	adds	r1, r3, #1
 8003de8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003dec:	400b      	ands	r3, r1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_I2C_Init+0x138>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1e59      	subs	r1, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e00:	3301      	adds	r3, #1
 8003e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e06:	e051      	b.n	8003eac <HAL_I2C_Init+0x1dc>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	e04f      	b.n	8003eac <HAL_I2C_Init+0x1dc>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d111      	bne.n	8003e38 <HAL_I2C_Init+0x168>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1e58      	subs	r0, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6859      	ldr	r1, [r3, #4]
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	440b      	add	r3, r1
 8003e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e26:	3301      	adds	r3, #1
 8003e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	bf0c      	ite	eq
 8003e30:	2301      	moveq	r3, #1
 8003e32:	2300      	movne	r3, #0
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	e012      	b.n	8003e5e <HAL_I2C_Init+0x18e>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	1e58      	subs	r0, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6859      	ldr	r1, [r3, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	0099      	lsls	r1, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e4e:	3301      	adds	r3, #1
 8003e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_Init+0x196>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e022      	b.n	8003eac <HAL_I2C_Init+0x1dc>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10e      	bne.n	8003e8c <HAL_I2C_Init+0x1bc>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1e58      	subs	r0, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6859      	ldr	r1, [r3, #4]
 8003e76:	460b      	mov	r3, r1
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	440b      	add	r3, r1
 8003e7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e80:	3301      	adds	r3, #1
 8003e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e8a:	e00f      	b.n	8003eac <HAL_I2C_Init+0x1dc>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	1e58      	subs	r0, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6859      	ldr	r1, [r3, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	0099      	lsls	r1, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	6809      	ldr	r1, [r1, #0]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6911      	ldr	r1, [r2, #16]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68d2      	ldr	r2, [r2, #12]
 8003ee6:	4311      	orrs	r1, r2
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695a      	ldr	r2, [r3, #20]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	000186a0 	.word	0x000186a0
 8003f48:	001e847f 	.word	0x001e847f
 8003f4c:	003d08ff 	.word	0x003d08ff
 8003f50:	431bde83 	.word	0x431bde83
 8003f54:	10624dd3 	.word	0x10624dd3

08003f58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4b20      	ldr	r3, [pc, #128]	; (8003fe8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a1f      	ldr	r2, [pc, #124]	; (8003fe8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b1d      	ldr	r3, [pc, #116]	; (8003fe8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_PWREx_EnableOverDrive+0x94>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f84:	f7ff f942 	bl	800320c <HAL_GetTick>
 8003f88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f8a:	e009      	b.n	8003fa0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f8c:	f7ff f93e 	bl	800320c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f9a:	d901      	bls.n	8003fa0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e01f      	b.n	8003fe0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fa0:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fac:	d1ee      	bne.n	8003f8c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003fae:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fb4:	f7ff f92a 	bl	800320c <HAL_GetTick>
 8003fb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fba:	e009      	b.n	8003fd0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fbc:	f7ff f926 	bl	800320c <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fca:	d901      	bls.n	8003fd0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e007      	b.n	8003fe0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fd0:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fdc:	d1ee      	bne.n	8003fbc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	420e0040 	.word	0x420e0040
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	420e0044 	.word	0x420e0044

08003ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0cc      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800400c:	4b68      	ldr	r3, [pc, #416]	; (80041b0 <HAL_RCC_ClockConfig+0x1b8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	429a      	cmp	r2, r3
 8004018:	d90c      	bls.n	8004034 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401a:	4b65      	ldr	r3, [pc, #404]	; (80041b0 <HAL_RCC_ClockConfig+0x1b8>)
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004022:	4b63      	ldr	r3, [pc, #396]	; (80041b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	429a      	cmp	r2, r3
 800402e:	d001      	beq.n	8004034 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0b8      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d020      	beq.n	8004082 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800404c:	4b59      	ldr	r3, [pc, #356]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4a58      	ldr	r2, [pc, #352]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004056:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004064:	4b53      	ldr	r3, [pc, #332]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a52      	ldr	r2, [pc, #328]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800406e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004070:	4b50      	ldr	r3, [pc, #320]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	494d      	ldr	r1, [pc, #308]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d044      	beq.n	8004118 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d107      	bne.n	80040a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004096:	4b47      	ldr	r3, [pc, #284]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d119      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e07f      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d003      	beq.n	80040b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d107      	bne.n	80040c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b6:	4b3f      	ldr	r3, [pc, #252]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e06f      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c6:	4b3b      	ldr	r3, [pc, #236]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e067      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040d6:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f023 0203 	bic.w	r2, r3, #3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	4934      	ldr	r1, [pc, #208]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040e8:	f7ff f890 	bl	800320c <HAL_GetTick>
 80040ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ee:	e00a      	b.n	8004106 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f0:	f7ff f88c 	bl	800320c <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e04f      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 020c 	and.w	r2, r3, #12
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	429a      	cmp	r2, r3
 8004116:	d1eb      	bne.n	80040f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004118:	4b25      	ldr	r3, [pc, #148]	; (80041b0 <HAL_RCC_ClockConfig+0x1b8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d20c      	bcs.n	8004140 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b22      	ldr	r3, [pc, #136]	; (80041b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	4b20      	ldr	r3, [pc, #128]	; (80041b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e032      	b.n	80041a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d008      	beq.n	800415e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800414c:	4b19      	ldr	r3, [pc, #100]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	4916      	ldr	r1, [pc, #88]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	4313      	orrs	r3, r2
 800415c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d009      	beq.n	800417e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800416a:	4b12      	ldr	r3, [pc, #72]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	490e      	ldr	r1, [pc, #56]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800417e:	f000 f855 	bl	800422c <HAL_RCC_GetSysClockFreq>
 8004182:	4602      	mov	r2, r0
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	091b      	lsrs	r3, r3, #4
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	490a      	ldr	r1, [pc, #40]	; (80041b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004190:	5ccb      	ldrb	r3, [r1, r3]
 8004192:	fa22 f303 	lsr.w	r3, r2, r3
 8004196:	4a09      	ldr	r2, [pc, #36]	; (80041bc <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800419a:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <HAL_RCC_ClockConfig+0x1c8>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fff0 	bl	8003184 <HAL_InitTick>

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023c00 	.word	0x40023c00
 80041b4:	40023800 	.word	0x40023800
 80041b8:	0800ba10 	.word	0x0800ba10
 80041bc:	2000000c 	.word	0x2000000c
 80041c0:	20000010 	.word	0x20000010

080041c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c8:	4b03      	ldr	r3, [pc, #12]	; (80041d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ca:	681b      	ldr	r3, [r3, #0]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	2000000c 	.word	0x2000000c

080041dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041e0:	f7ff fff0 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 80041e4:	4602      	mov	r2, r0
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	0a9b      	lsrs	r3, r3, #10
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	4903      	ldr	r1, [pc, #12]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041f2:	5ccb      	ldrb	r3, [r1, r3]
 80041f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40023800 	.word	0x40023800
 8004200:	0800ba20 	.word	0x0800ba20

08004204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004208:	f7ff ffdc 	bl	80041c4 <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0b5b      	lsrs	r3, r3, #13
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4903      	ldr	r1, [pc, #12]	; (8004228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	0800ba20 	.word	0x0800ba20

0800422c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800422c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004230:	b0ae      	sub	sp, #184	; 0xb8
 8004232:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004252:	4bcb      	ldr	r3, [pc, #812]	; (8004580 <HAL_RCC_GetSysClockFreq+0x354>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b0c      	cmp	r3, #12
 800425c:	f200 8206 	bhi.w	800466c <HAL_RCC_GetSysClockFreq+0x440>
 8004260:	a201      	add	r2, pc, #4	; (adr r2, 8004268 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004266:	bf00      	nop
 8004268:	0800429d 	.word	0x0800429d
 800426c:	0800466d 	.word	0x0800466d
 8004270:	0800466d 	.word	0x0800466d
 8004274:	0800466d 	.word	0x0800466d
 8004278:	080042a5 	.word	0x080042a5
 800427c:	0800466d 	.word	0x0800466d
 8004280:	0800466d 	.word	0x0800466d
 8004284:	0800466d 	.word	0x0800466d
 8004288:	080042ad 	.word	0x080042ad
 800428c:	0800466d 	.word	0x0800466d
 8004290:	0800466d 	.word	0x0800466d
 8004294:	0800466d 	.word	0x0800466d
 8004298:	0800449d 	.word	0x0800449d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800429c:	4bb9      	ldr	r3, [pc, #740]	; (8004584 <HAL_RCC_GetSysClockFreq+0x358>)
 800429e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80042a2:	e1e7      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042a4:	4bb8      	ldr	r3, [pc, #736]	; (8004588 <HAL_RCC_GetSysClockFreq+0x35c>)
 80042a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80042aa:	e1e3      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042ac:	4bb4      	ldr	r3, [pc, #720]	; (8004580 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042b8:	4bb1      	ldr	r3, [pc, #708]	; (8004580 <HAL_RCC_GetSysClockFreq+0x354>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d071      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c4:	4bae      	ldr	r3, [pc, #696]	; (8004580 <HAL_RCC_GetSysClockFreq+0x354>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	099b      	lsrs	r3, r3, #6
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80042d0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80042d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80042e0:	2300      	movs	r3, #0
 80042e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80042e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042ea:	4622      	mov	r2, r4
 80042ec:	462b      	mov	r3, r5
 80042ee:	f04f 0000 	mov.w	r0, #0
 80042f2:	f04f 0100 	mov.w	r1, #0
 80042f6:	0159      	lsls	r1, r3, #5
 80042f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042fc:	0150      	lsls	r0, r2, #5
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4621      	mov	r1, r4
 8004304:	1a51      	subs	r1, r2, r1
 8004306:	6439      	str	r1, [r7, #64]	; 0x40
 8004308:	4629      	mov	r1, r5
 800430a:	eb63 0301 	sbc.w	r3, r3, r1
 800430e:	647b      	str	r3, [r7, #68]	; 0x44
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800431c:	4649      	mov	r1, r9
 800431e:	018b      	lsls	r3, r1, #6
 8004320:	4641      	mov	r1, r8
 8004322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004326:	4641      	mov	r1, r8
 8004328:	018a      	lsls	r2, r1, #6
 800432a:	4641      	mov	r1, r8
 800432c:	1a51      	subs	r1, r2, r1
 800432e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004330:	4649      	mov	r1, r9
 8004332:	eb63 0301 	sbc.w	r3, r3, r1
 8004336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004344:	4649      	mov	r1, r9
 8004346:	00cb      	lsls	r3, r1, #3
 8004348:	4641      	mov	r1, r8
 800434a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800434e:	4641      	mov	r1, r8
 8004350:	00ca      	lsls	r2, r1, #3
 8004352:	4610      	mov	r0, r2
 8004354:	4619      	mov	r1, r3
 8004356:	4603      	mov	r3, r0
 8004358:	4622      	mov	r2, r4
 800435a:	189b      	adds	r3, r3, r2
 800435c:	633b      	str	r3, [r7, #48]	; 0x30
 800435e:	462b      	mov	r3, r5
 8004360:	460a      	mov	r2, r1
 8004362:	eb42 0303 	adc.w	r3, r2, r3
 8004366:	637b      	str	r3, [r7, #52]	; 0x34
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004374:	4629      	mov	r1, r5
 8004376:	024b      	lsls	r3, r1, #9
 8004378:	4621      	mov	r1, r4
 800437a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800437e:	4621      	mov	r1, r4
 8004380:	024a      	lsls	r2, r1, #9
 8004382:	4610      	mov	r0, r2
 8004384:	4619      	mov	r1, r3
 8004386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800438a:	2200      	movs	r2, #0
 800438c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004390:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004394:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004398:	f7fc fc76 	bl	8000c88 <__aeabi_uldivmod>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4613      	mov	r3, r2
 80043a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043a6:	e067      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a8:	4b75      	ldr	r3, [pc, #468]	; (8004580 <HAL_RCC_GetSysClockFreq+0x354>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	099b      	lsrs	r3, r3, #6
 80043ae:	2200      	movs	r2, #0
 80043b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043b4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80043b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80043bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80043c2:	2300      	movs	r3, #0
 80043c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043c6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80043ca:	4622      	mov	r2, r4
 80043cc:	462b      	mov	r3, r5
 80043ce:	f04f 0000 	mov.w	r0, #0
 80043d2:	f04f 0100 	mov.w	r1, #0
 80043d6:	0159      	lsls	r1, r3, #5
 80043d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043dc:	0150      	lsls	r0, r2, #5
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4621      	mov	r1, r4
 80043e4:	1a51      	subs	r1, r2, r1
 80043e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80043e8:	4629      	mov	r1, r5
 80043ea:	eb63 0301 	sbc.w	r3, r3, r1
 80043ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80043fc:	4649      	mov	r1, r9
 80043fe:	018b      	lsls	r3, r1, #6
 8004400:	4641      	mov	r1, r8
 8004402:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004406:	4641      	mov	r1, r8
 8004408:	018a      	lsls	r2, r1, #6
 800440a:	4641      	mov	r1, r8
 800440c:	ebb2 0a01 	subs.w	sl, r2, r1
 8004410:	4649      	mov	r1, r9
 8004412:	eb63 0b01 	sbc.w	fp, r3, r1
 8004416:	f04f 0200 	mov.w	r2, #0
 800441a:	f04f 0300 	mov.w	r3, #0
 800441e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004422:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004426:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800442a:	4692      	mov	sl, r2
 800442c:	469b      	mov	fp, r3
 800442e:	4623      	mov	r3, r4
 8004430:	eb1a 0303 	adds.w	r3, sl, r3
 8004434:	623b      	str	r3, [r7, #32]
 8004436:	462b      	mov	r3, r5
 8004438:	eb4b 0303 	adc.w	r3, fp, r3
 800443c:	627b      	str	r3, [r7, #36]	; 0x24
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 0300 	mov.w	r3, #0
 8004446:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800444a:	4629      	mov	r1, r5
 800444c:	028b      	lsls	r3, r1, #10
 800444e:	4621      	mov	r1, r4
 8004450:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004454:	4621      	mov	r1, r4
 8004456:	028a      	lsls	r2, r1, #10
 8004458:	4610      	mov	r0, r2
 800445a:	4619      	mov	r1, r3
 800445c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004460:	2200      	movs	r2, #0
 8004462:	673b      	str	r3, [r7, #112]	; 0x70
 8004464:	677a      	str	r2, [r7, #116]	; 0x74
 8004466:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800446a:	f7fc fc0d 	bl	8000c88 <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4613      	mov	r3, r2
 8004474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004478:	4b41      	ldr	r3, [pc, #260]	; (8004580 <HAL_RCC_GetSysClockFreq+0x354>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	3301      	adds	r3, #1
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800448a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800448e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800449a:	e0eb      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800449c:	4b38      	ldr	r3, [pc, #224]	; (8004580 <HAL_RCC_GetSysClockFreq+0x354>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a8:	4b35      	ldr	r3, [pc, #212]	; (8004580 <HAL_RCC_GetSysClockFreq+0x354>)
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d06b      	beq.n	800458c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b4:	4b32      	ldr	r3, [pc, #200]	; (8004580 <HAL_RCC_GetSysClockFreq+0x354>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	099b      	lsrs	r3, r3, #6
 80044ba:	2200      	movs	r2, #0
 80044bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80044be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80044c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c6:	663b      	str	r3, [r7, #96]	; 0x60
 80044c8:	2300      	movs	r3, #0
 80044ca:	667b      	str	r3, [r7, #100]	; 0x64
 80044cc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80044d0:	4622      	mov	r2, r4
 80044d2:	462b      	mov	r3, r5
 80044d4:	f04f 0000 	mov.w	r0, #0
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	0159      	lsls	r1, r3, #5
 80044de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e2:	0150      	lsls	r0, r2, #5
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4621      	mov	r1, r4
 80044ea:	1a51      	subs	r1, r2, r1
 80044ec:	61b9      	str	r1, [r7, #24]
 80044ee:	4629      	mov	r1, r5
 80044f0:	eb63 0301 	sbc.w	r3, r3, r1
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004502:	4659      	mov	r1, fp
 8004504:	018b      	lsls	r3, r1, #6
 8004506:	4651      	mov	r1, sl
 8004508:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800450c:	4651      	mov	r1, sl
 800450e:	018a      	lsls	r2, r1, #6
 8004510:	4651      	mov	r1, sl
 8004512:	ebb2 0801 	subs.w	r8, r2, r1
 8004516:	4659      	mov	r1, fp
 8004518:	eb63 0901 	sbc.w	r9, r3, r1
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004528:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800452c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004530:	4690      	mov	r8, r2
 8004532:	4699      	mov	r9, r3
 8004534:	4623      	mov	r3, r4
 8004536:	eb18 0303 	adds.w	r3, r8, r3
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	462b      	mov	r3, r5
 800453e:	eb49 0303 	adc.w	r3, r9, r3
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004550:	4629      	mov	r1, r5
 8004552:	024b      	lsls	r3, r1, #9
 8004554:	4621      	mov	r1, r4
 8004556:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800455a:	4621      	mov	r1, r4
 800455c:	024a      	lsls	r2, r1, #9
 800455e:	4610      	mov	r0, r2
 8004560:	4619      	mov	r1, r3
 8004562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004566:	2200      	movs	r2, #0
 8004568:	65bb      	str	r3, [r7, #88]	; 0x58
 800456a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800456c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004570:	f7fc fb8a 	bl	8000c88 <__aeabi_uldivmod>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4613      	mov	r3, r2
 800457a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800457e:	e065      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x420>
 8004580:	40023800 	.word	0x40023800
 8004584:	00f42400 	.word	0x00f42400
 8004588:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800458c:	4b3d      	ldr	r3, [pc, #244]	; (8004684 <HAL_RCC_GetSysClockFreq+0x458>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	099b      	lsrs	r3, r3, #6
 8004592:	2200      	movs	r2, #0
 8004594:	4618      	mov	r0, r3
 8004596:	4611      	mov	r1, r2
 8004598:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800459c:	653b      	str	r3, [r7, #80]	; 0x50
 800459e:	2300      	movs	r3, #0
 80045a0:	657b      	str	r3, [r7, #84]	; 0x54
 80045a2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80045a6:	4642      	mov	r2, r8
 80045a8:	464b      	mov	r3, r9
 80045aa:	f04f 0000 	mov.w	r0, #0
 80045ae:	f04f 0100 	mov.w	r1, #0
 80045b2:	0159      	lsls	r1, r3, #5
 80045b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045b8:	0150      	lsls	r0, r2, #5
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4641      	mov	r1, r8
 80045c0:	1a51      	subs	r1, r2, r1
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	4649      	mov	r1, r9
 80045c6:	eb63 0301 	sbc.w	r3, r3, r1
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80045d8:	4659      	mov	r1, fp
 80045da:	018b      	lsls	r3, r1, #6
 80045dc:	4651      	mov	r1, sl
 80045de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045e2:	4651      	mov	r1, sl
 80045e4:	018a      	lsls	r2, r1, #6
 80045e6:	4651      	mov	r1, sl
 80045e8:	1a54      	subs	r4, r2, r1
 80045ea:	4659      	mov	r1, fp
 80045ec:	eb63 0501 	sbc.w	r5, r3, r1
 80045f0:	f04f 0200 	mov.w	r2, #0
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	00eb      	lsls	r3, r5, #3
 80045fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045fe:	00e2      	lsls	r2, r4, #3
 8004600:	4614      	mov	r4, r2
 8004602:	461d      	mov	r5, r3
 8004604:	4643      	mov	r3, r8
 8004606:	18e3      	adds	r3, r4, r3
 8004608:	603b      	str	r3, [r7, #0]
 800460a:	464b      	mov	r3, r9
 800460c:	eb45 0303 	adc.w	r3, r5, r3
 8004610:	607b      	str	r3, [r7, #4]
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	f04f 0300 	mov.w	r3, #0
 800461a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800461e:	4629      	mov	r1, r5
 8004620:	028b      	lsls	r3, r1, #10
 8004622:	4621      	mov	r1, r4
 8004624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004628:	4621      	mov	r1, r4
 800462a:	028a      	lsls	r2, r1, #10
 800462c:	4610      	mov	r0, r2
 800462e:	4619      	mov	r1, r3
 8004630:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004634:	2200      	movs	r2, #0
 8004636:	64bb      	str	r3, [r7, #72]	; 0x48
 8004638:	64fa      	str	r2, [r7, #76]	; 0x4c
 800463a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800463e:	f7fc fb23 	bl	8000c88 <__aeabi_uldivmod>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4613      	mov	r3, r2
 8004648:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800464c:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <HAL_RCC_GetSysClockFreq+0x458>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	0f1b      	lsrs	r3, r3, #28
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800465a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800465e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004662:	fbb2 f3f3 	udiv	r3, r2, r3
 8004666:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800466a:	e003      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_RCC_GetSysClockFreq+0x45c>)
 800466e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004672:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004674:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004678:	4618      	mov	r0, r3
 800467a:	37b8      	adds	r7, #184	; 0xb8
 800467c:	46bd      	mov	sp, r7
 800467e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
 8004688:	00f42400 	.word	0x00f42400

0800468c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e28d      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 8083 	beq.w	80047b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046ac:	4b94      	ldr	r3, [pc, #592]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 030c 	and.w	r3, r3, #12
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d019      	beq.n	80046ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046b8:	4b91      	ldr	r3, [pc, #580]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d106      	bne.n	80046d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046c4:	4b8e      	ldr	r3, [pc, #568]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d0:	d00c      	beq.n	80046ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046d2:	4b8b      	ldr	r3, [pc, #556]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80046da:	2b0c      	cmp	r3, #12
 80046dc:	d112      	bne.n	8004704 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046de:	4b88      	ldr	r3, [pc, #544]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046ea:	d10b      	bne.n	8004704 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ec:	4b84      	ldr	r3, [pc, #528]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d05b      	beq.n	80047b0 <HAL_RCC_OscConfig+0x124>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d157      	bne.n	80047b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e25a      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470c:	d106      	bne.n	800471c <HAL_RCC_OscConfig+0x90>
 800470e:	4b7c      	ldr	r3, [pc, #496]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a7b      	ldr	r2, [pc, #492]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 8004714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	e01d      	b.n	8004758 <HAL_RCC_OscConfig+0xcc>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004724:	d10c      	bne.n	8004740 <HAL_RCC_OscConfig+0xb4>
 8004726:	4b76      	ldr	r3, [pc, #472]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a75      	ldr	r2, [pc, #468]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 800472c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004730:	6013      	str	r3, [r2, #0]
 8004732:	4b73      	ldr	r3, [pc, #460]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a72      	ldr	r2, [pc, #456]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473c:	6013      	str	r3, [r2, #0]
 800473e:	e00b      	b.n	8004758 <HAL_RCC_OscConfig+0xcc>
 8004740:	4b6f      	ldr	r3, [pc, #444]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a6e      	ldr	r2, [pc, #440]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 8004746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	4b6c      	ldr	r3, [pc, #432]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a6b      	ldr	r2, [pc, #428]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 8004752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d013      	beq.n	8004788 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fe fd54 	bl	800320c <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004768:	f7fe fd50 	bl	800320c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	; 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e21f      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477a:	4b61      	ldr	r3, [pc, #388]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0xdc>
 8004786:	e014      	b.n	80047b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fe fd40 	bl	800320c <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004790:	f7fe fd3c 	bl	800320c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e20b      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047a2:	4b57      	ldr	r3, [pc, #348]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x104>
 80047ae:	e000      	b.n	80047b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d06f      	beq.n	800489e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047be:	4b50      	ldr	r3, [pc, #320]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 030c 	and.w	r3, r3, #12
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d017      	beq.n	80047fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047ca:	4b4d      	ldr	r3, [pc, #308]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d105      	bne.n	80047e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047d6:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047e2:	4b47      	ldr	r3, [pc, #284]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d11c      	bne.n	8004828 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047ee:	4b44      	ldr	r3, [pc, #272]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d116      	bne.n	8004828 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fa:	4b41      	ldr	r3, [pc, #260]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <HAL_RCC_OscConfig+0x186>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	2b01      	cmp	r3, #1
 800480c:	d001      	beq.n	8004812 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e1d3      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004812:	4b3b      	ldr	r3, [pc, #236]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4937      	ldr	r1, [pc, #220]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 8004822:	4313      	orrs	r3, r2
 8004824:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004826:	e03a      	b.n	800489e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d020      	beq.n	8004872 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004830:	4b34      	ldr	r3, [pc, #208]	; (8004904 <HAL_RCC_OscConfig+0x278>)
 8004832:	2201      	movs	r2, #1
 8004834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004836:	f7fe fce9 	bl	800320c <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800483e:	f7fe fce5 	bl	800320c <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e1b4      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004850:	4b2b      	ldr	r3, [pc, #172]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485c:	4b28      	ldr	r3, [pc, #160]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4925      	ldr	r1, [pc, #148]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]
 8004870:	e015      	b.n	800489e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004872:	4b24      	ldr	r3, [pc, #144]	; (8004904 <HAL_RCC_OscConfig+0x278>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fe fcc8 	bl	800320c <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004880:	f7fe fcc4 	bl	800320c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e193      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004892:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d036      	beq.n	8004918 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d016      	beq.n	80048e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048b2:	4b15      	ldr	r3, [pc, #84]	; (8004908 <HAL_RCC_OscConfig+0x27c>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b8:	f7fe fca8 	bl	800320c <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048c0:	f7fe fca4 	bl	800320c <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e173      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_OscConfig+0x274>)
 80048d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0x234>
 80048de:	e01b      	b.n	8004918 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048e0:	4b09      	ldr	r3, [pc, #36]	; (8004908 <HAL_RCC_OscConfig+0x27c>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e6:	f7fe fc91 	bl	800320c <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048ec:	e00e      	b.n	800490c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048ee:	f7fe fc8d 	bl	800320c <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d907      	bls.n	800490c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e15c      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
 8004900:	40023800 	.word	0x40023800
 8004904:	42470000 	.word	0x42470000
 8004908:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800490c:	4b8a      	ldr	r3, [pc, #552]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 800490e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004910:	f003 0302 	and.w	r3, r3, #2
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1ea      	bne.n	80048ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8097 	beq.w	8004a54 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004926:	2300      	movs	r3, #0
 8004928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800492a:	4b83      	ldr	r3, [pc, #524]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10f      	bne.n	8004956 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	4b7f      	ldr	r3, [pc, #508]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4a7e      	ldr	r2, [pc, #504]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 8004940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004944:	6413      	str	r3, [r2, #64]	; 0x40
 8004946:	4b7c      	ldr	r3, [pc, #496]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004952:	2301      	movs	r3, #1
 8004954:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004956:	4b79      	ldr	r3, [pc, #484]	; (8004b3c <HAL_RCC_OscConfig+0x4b0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d118      	bne.n	8004994 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004962:	4b76      	ldr	r3, [pc, #472]	; (8004b3c <HAL_RCC_OscConfig+0x4b0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a75      	ldr	r2, [pc, #468]	; (8004b3c <HAL_RCC_OscConfig+0x4b0>)
 8004968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800496c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800496e:	f7fe fc4d 	bl	800320c <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004976:	f7fe fc49 	bl	800320c <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e118      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004988:	4b6c      	ldr	r3, [pc, #432]	; (8004b3c <HAL_RCC_OscConfig+0x4b0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d106      	bne.n	80049aa <HAL_RCC_OscConfig+0x31e>
 800499c:	4b66      	ldr	r3, [pc, #408]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4a65      	ldr	r2, [pc, #404]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	6713      	str	r3, [r2, #112]	; 0x70
 80049a8:	e01c      	b.n	80049e4 <HAL_RCC_OscConfig+0x358>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d10c      	bne.n	80049cc <HAL_RCC_OscConfig+0x340>
 80049b2:	4b61      	ldr	r3, [pc, #388]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	4a60      	ldr	r2, [pc, #384]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 80049b8:	f043 0304 	orr.w	r3, r3, #4
 80049bc:	6713      	str	r3, [r2, #112]	; 0x70
 80049be:	4b5e      	ldr	r3, [pc, #376]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	4a5d      	ldr	r2, [pc, #372]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ca:	e00b      	b.n	80049e4 <HAL_RCC_OscConfig+0x358>
 80049cc:	4b5a      	ldr	r3, [pc, #360]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a59      	ldr	r2, [pc, #356]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
 80049d8:	4b57      	ldr	r3, [pc, #348]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	4a56      	ldr	r2, [pc, #344]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 80049de:	f023 0304 	bic.w	r3, r3, #4
 80049e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fe fc0e 	bl	800320c <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f4:	f7fe fc0a 	bl	800320c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0d7      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a0a:	4b4b      	ldr	r3, [pc, #300]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0ee      	beq.n	80049f4 <HAL_RCC_OscConfig+0x368>
 8004a16:	e014      	b.n	8004a42 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a18:	f7fe fbf8 	bl	800320c <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fe fbf4 	bl	800320c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e0c1      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a36:	4b40      	ldr	r3, [pc, #256]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1ee      	bne.n	8004a20 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a42:	7dfb      	ldrb	r3, [r7, #23]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a48:	4b3b      	ldr	r3, [pc, #236]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	4a3a      	ldr	r2, [pc, #232]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 8004a4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80ad 	beq.w	8004bb8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a5e:	4b36      	ldr	r3, [pc, #216]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d060      	beq.n	8004b2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d145      	bne.n	8004afe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a72:	4b33      	ldr	r3, [pc, #204]	; (8004b40 <HAL_RCC_OscConfig+0x4b4>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fe fbc8 	bl	800320c <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a80:	f7fe fbc4 	bl	800320c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e093      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a92:	4b29      	ldr	r3, [pc, #164]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69da      	ldr	r2, [r3, #28]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	019b      	lsls	r3, r3, #6
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	085b      	lsrs	r3, r3, #1
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	041b      	lsls	r3, r3, #16
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	071b      	lsls	r3, r3, #28
 8004aca:	491b      	ldr	r1, [pc, #108]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ad0:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <HAL_RCC_OscConfig+0x4b4>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad6:	f7fe fb99 	bl	800320c <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ade:	f7fe fb95 	bl	800320c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e064      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004af0:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0f0      	beq.n	8004ade <HAL_RCC_OscConfig+0x452>
 8004afc:	e05c      	b.n	8004bb8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004afe:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <HAL_RCC_OscConfig+0x4b4>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fe fb82 	bl	800320c <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b0c:	f7fe fb7e 	bl	800320c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e04d      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b1e:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <HAL_RCC_OscConfig+0x4ac>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0x480>
 8004b2a:	e045      	b.n	8004bb8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d107      	bne.n	8004b44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e040      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	40007000 	.word	0x40007000
 8004b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b44:	4b1f      	ldr	r3, [pc, #124]	; (8004bc4 <HAL_RCC_OscConfig+0x538>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d030      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d129      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d122      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b74:	4013      	ands	r3, r2
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d119      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	085b      	lsrs	r3, r3, #1
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d10f      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800

08004bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e07b      	b.n	8004cd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d108      	bne.n	8004bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bea:	d009      	beq.n	8004c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	61da      	str	r2, [r3, #28]
 8004bf2:	e005      	b.n	8004c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fd ff08 	bl	8002a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c84:	ea42 0103 	orr.w	r1, r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	f003 0104 	and.w	r1, r3, #4
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	f003 0210 	and.w	r2, r3, #16
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b088      	sub	sp, #32
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_SPI_Transmit+0x22>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e126      	b.n	8004f4a <HAL_SPI_Transmit+0x270>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d04:	f7fe fa82 	bl	800320c <HAL_GetTick>
 8004d08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d0a:	88fb      	ldrh	r3, [r7, #6]
 8004d0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d002      	beq.n	8004d20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d1e:	e10b      	b.n	8004f38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d002      	beq.n	8004d2c <HAL_SPI_Transmit+0x52>
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d30:	e102      	b.n	8004f38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2203      	movs	r2, #3
 8004d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	88fa      	ldrh	r2, [r7, #6]
 8004d4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	88fa      	ldrh	r2, [r7, #6]
 8004d50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d78:	d10f      	bne.n	8004d9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da4:	2b40      	cmp	r3, #64	; 0x40
 8004da6:	d007      	beq.n	8004db8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc0:	d14b      	bne.n	8004e5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Transmit+0xf6>
 8004dca:	8afb      	ldrh	r3, [r7, #22]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d13e      	bne.n	8004e4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd4:	881a      	ldrh	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de0:	1c9a      	adds	r2, r3, #2
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004df4:	e02b      	b.n	8004e4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d112      	bne.n	8004e2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	881a      	ldrh	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	1c9a      	adds	r2, r3, #2
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	3b01      	subs	r3, #1
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e28:	e011      	b.n	8004e4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e2a:	f7fe f9ef 	bl	800320c <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d803      	bhi.n	8004e42 <HAL_SPI_Transmit+0x168>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d102      	bne.n	8004e48 <HAL_SPI_Transmit+0x16e>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e4c:	e074      	b.n	8004f38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1ce      	bne.n	8004df6 <HAL_SPI_Transmit+0x11c>
 8004e58:	e04c      	b.n	8004ef4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_SPI_Transmit+0x18e>
 8004e62:	8afb      	ldrh	r3, [r7, #22]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d140      	bne.n	8004eea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	7812      	ldrb	r2, [r2, #0]
 8004e74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e8e:	e02c      	b.n	8004eea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0302 	and.w	r3, r3, #2
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d113      	bne.n	8004ec6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb0:	1c5a      	adds	r2, r3, #1
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ec4:	e011      	b.n	8004eea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ec6:	f7fe f9a1 	bl	800320c <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d803      	bhi.n	8004ede <HAL_SPI_Transmit+0x204>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d102      	bne.n	8004ee4 <HAL_SPI_Transmit+0x20a>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ee8:	e026      	b.n	8004f38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1cd      	bne.n	8004e90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f000 fa55 	bl	80053a8 <SPI_EndRxTxTransaction>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f12:	2300      	movs	r3, #0
 8004f14:	613b      	str	r3, [r7, #16]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	613b      	str	r3, [r7, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	613b      	str	r3, [r7, #16]
 8004f26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d002      	beq.n	8004f36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e000      	b.n	8004f38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3720      	adds	r7, #32
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b08c      	sub	sp, #48	; 0x30
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
 8004f5e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f60:	2301      	movs	r3, #1
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_SPI_TransmitReceive+0x26>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e18a      	b.n	800528e <HAL_SPI_TransmitReceive+0x33c>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f80:	f7fe f944 	bl	800320c <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f96:	887b      	ldrh	r3, [r7, #2]
 8004f98:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d00f      	beq.n	8004fc2 <HAL_SPI_TransmitReceive+0x70>
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa8:	d107      	bne.n	8004fba <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d103      	bne.n	8004fba <HAL_SPI_TransmitReceive+0x68>
 8004fb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d003      	beq.n	8004fc2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fba:	2302      	movs	r3, #2
 8004fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fc0:	e15b      	b.n	800527a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_SPI_TransmitReceive+0x82>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_SPI_TransmitReceive+0x82>
 8004fce:	887b      	ldrh	r3, [r7, #2]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d103      	bne.n	8004fdc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fda:	e14e      	b.n	800527a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b04      	cmp	r3, #4
 8004fe6:	d003      	beq.n	8004ff0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2205      	movs	r2, #5
 8004fec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	887a      	ldrh	r2, [r7, #2]
 8005000:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	887a      	ldrh	r2, [r7, #2]
 8005006:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	887a      	ldrh	r2, [r7, #2]
 8005012:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	887a      	ldrh	r2, [r7, #2]
 8005018:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005030:	2b40      	cmp	r3, #64	; 0x40
 8005032:	d007      	beq.n	8005044 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005042:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800504c:	d178      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <HAL_SPI_TransmitReceive+0x10a>
 8005056:	8b7b      	ldrh	r3, [r7, #26]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d166      	bne.n	800512a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	881a      	ldrh	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	1c9a      	adds	r2, r3, #2
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005076:	b29b      	uxth	r3, r3
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005080:	e053      	b.n	800512a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b02      	cmp	r3, #2
 800508e:	d11b      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x176>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <HAL_SPI_TransmitReceive+0x176>
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	2b01      	cmp	r3, #1
 800509e:	d113      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a4:	881a      	ldrh	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b0:	1c9a      	adds	r2, r3, #2
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d119      	bne.n	800510a <HAL_SPI_TransmitReceive+0x1b8>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050da:	b29b      	uxth	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d014      	beq.n	800510a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ea:	b292      	uxth	r2, r2
 80050ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	1c9a      	adds	r2, r3, #2
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005106:	2301      	movs	r3, #1
 8005108:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800510a:	f7fe f87f 	bl	800320c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005116:	429a      	cmp	r2, r3
 8005118:	d807      	bhi.n	800512a <HAL_SPI_TransmitReceive+0x1d8>
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005120:	d003      	beq.n	800512a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005128:	e0a7      	b.n	800527a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1a6      	bne.n	8005082 <HAL_SPI_TransmitReceive+0x130>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1a1      	bne.n	8005082 <HAL_SPI_TransmitReceive+0x130>
 800513e:	e07c      	b.n	800523a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <HAL_SPI_TransmitReceive+0x1fc>
 8005148:	8b7b      	ldrh	r3, [r7, #26]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d16b      	bne.n	8005226 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	330c      	adds	r3, #12
 8005158:	7812      	ldrb	r2, [r2, #0]
 800515a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005174:	e057      	b.n	8005226 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b02      	cmp	r3, #2
 8005182:	d11c      	bne.n	80051be <HAL_SPI_TransmitReceive+0x26c>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005188:	b29b      	uxth	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d017      	beq.n	80051be <HAL_SPI_TransmitReceive+0x26c>
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	2b01      	cmp	r3, #1
 8005192:	d114      	bne.n	80051be <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	330c      	adds	r3, #12
 800519e:	7812      	ldrb	r2, [r2, #0]
 80051a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d119      	bne.n	8005200 <HAL_SPI_TransmitReceive+0x2ae>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d014      	beq.n	8005200 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68da      	ldr	r2, [r3, #12]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051fc:	2301      	movs	r3, #1
 80051fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005200:	f7fe f804 	bl	800320c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800520c:	429a      	cmp	r2, r3
 800520e:	d803      	bhi.n	8005218 <HAL_SPI_TransmitReceive+0x2c6>
 8005210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005216:	d102      	bne.n	800521e <HAL_SPI_TransmitReceive+0x2cc>
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	2b00      	cmp	r3, #0
 800521c:	d103      	bne.n	8005226 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005224:	e029      	b.n	800527a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522a:	b29b      	uxth	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1a2      	bne.n	8005176 <HAL_SPI_TransmitReceive+0x224>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d19d      	bne.n	8005176 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f8b2 	bl	80053a8 <SPI_EndRxTxTransaction>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d006      	beq.n	8005258 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2220      	movs	r2, #32
 8005254:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005256:	e010      	b.n	800527a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10b      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	e000      	b.n	800527a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005278:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800528a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800528e:	4618      	mov	r0, r3
 8005290:	3730      	adds	r7, #48	; 0x30
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	603b      	str	r3, [r7, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052a8:	f7fd ffb0 	bl	800320c <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	1a9b      	subs	r3, r3, r2
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	4413      	add	r3, r2
 80052b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052b8:	f7fd ffa8 	bl	800320c <HAL_GetTick>
 80052bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052be:	4b39      	ldr	r3, [pc, #228]	; (80053a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	015b      	lsls	r3, r3, #5
 80052c4:	0d1b      	lsrs	r3, r3, #20
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	fb02 f303 	mul.w	r3, r2, r3
 80052cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052ce:	e054      	b.n	800537a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d6:	d050      	beq.n	800537a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052d8:	f7fd ff98 	bl	800320c <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d902      	bls.n	80052ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d13d      	bne.n	800536a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005306:	d111      	bne.n	800532c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005310:	d004      	beq.n	800531c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800531a:	d107      	bne.n	800532c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800532a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005334:	d10f      	bne.n	8005356 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005354:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e017      	b.n	800539a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	3b01      	subs	r3, #1
 8005378:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4013      	ands	r3, r2
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	429a      	cmp	r2, r3
 8005388:	bf0c      	ite	eq
 800538a:	2301      	moveq	r3, #1
 800538c:	2300      	movne	r3, #0
 800538e:	b2db      	uxtb	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	79fb      	ldrb	r3, [r7, #7]
 8005394:	429a      	cmp	r2, r3
 8005396:	d19b      	bne.n	80052d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3720      	adds	r7, #32
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	2000000c 	.word	0x2000000c

080053a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053b4:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <SPI_EndRxTxTransaction+0x7c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <SPI_EndRxTxTransaction+0x80>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	0d5b      	lsrs	r3, r3, #21
 80053c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053c4:	fb02 f303 	mul.w	r3, r2, r3
 80053c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d2:	d112      	bne.n	80053fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2200      	movs	r2, #0
 80053dc:	2180      	movs	r1, #128	; 0x80
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f7ff ff5a 	bl	8005298 <SPI_WaitFlagStateUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d016      	beq.n	8005418 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	f043 0220 	orr.w	r2, r3, #32
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e00f      	b.n	800541a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00a      	beq.n	8005416 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	3b01      	subs	r3, #1
 8005404:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005410:	2b80      	cmp	r3, #128	; 0x80
 8005412:	d0f2      	beq.n	80053fa <SPI_EndRxTxTransaction+0x52>
 8005414:	e000      	b.n	8005418 <SPI_EndRxTxTransaction+0x70>
        break;
 8005416:	bf00      	nop
  }

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	2000000c 	.word	0x2000000c
 8005428:	165e9f81 	.word	0x165e9f81

0800542c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e041      	b.n	80054c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fd fc3c 	bl	8002cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f000 ffe6 	bl	800643c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d001      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e04e      	b.n	8005582 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a23      	ldr	r2, [pc, #140]	; (8005590 <HAL_TIM_Base_Start_IT+0xc4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d022      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550e:	d01d      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1f      	ldr	r2, [pc, #124]	; (8005594 <HAL_TIM_Base_Start_IT+0xc8>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d018      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <HAL_TIM_Base_Start_IT+0xcc>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1c      	ldr	r2, [pc, #112]	; (800559c <HAL_TIM_Base_Start_IT+0xd0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00e      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1b      	ldr	r2, [pc, #108]	; (80055a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d009      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a19      	ldr	r2, [pc, #100]	; (80055a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d004      	beq.n	800554c <HAL_TIM_Base_Start_IT+0x80>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a18      	ldr	r2, [pc, #96]	; (80055a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d111      	bne.n	8005570 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b06      	cmp	r3, #6
 800555c:	d010      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f042 0201 	orr.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556e:	e007      	b.n	8005580 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f042 0201 	orr.w	r2, r2, #1
 800557e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	40010000 	.word	0x40010000
 8005594:	40000400 	.word	0x40000400
 8005598:	40000800 	.word	0x40000800
 800559c:	40000c00 	.word	0x40000c00
 80055a0:	40010400 	.word	0x40010400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	40001800 	.word	0x40001800

080055ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e041      	b.n	8005642 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d106      	bne.n	80055d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f839 	bl	800564a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f000 ff26 	bl	800643c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
	...

08005660 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d109      	bne.n	8005684 <HAL_TIM_PWM_Start+0x24>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	bf14      	ite	ne
 800567c:	2301      	movne	r3, #1
 800567e:	2300      	moveq	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	e022      	b.n	80056ca <HAL_TIM_PWM_Start+0x6a>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b04      	cmp	r3, #4
 8005688:	d109      	bne.n	800569e <HAL_TIM_PWM_Start+0x3e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b01      	cmp	r3, #1
 8005694:	bf14      	ite	ne
 8005696:	2301      	movne	r3, #1
 8005698:	2300      	moveq	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	e015      	b.n	80056ca <HAL_TIM_PWM_Start+0x6a>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d109      	bne.n	80056b8 <HAL_TIM_PWM_Start+0x58>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	e008      	b.n	80056ca <HAL_TIM_PWM_Start+0x6a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e07c      	b.n	80057cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d104      	bne.n	80056e2 <HAL_TIM_PWM_Start+0x82>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e0:	e013      	b.n	800570a <HAL_TIM_PWM_Start+0xaa>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d104      	bne.n	80056f2 <HAL_TIM_PWM_Start+0x92>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056f0:	e00b      	b.n	800570a <HAL_TIM_PWM_Start+0xaa>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d104      	bne.n	8005702 <HAL_TIM_PWM_Start+0xa2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005700:	e003      	b.n	800570a <HAL_TIM_PWM_Start+0xaa>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2202      	movs	r2, #2
 8005706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2201      	movs	r2, #1
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f001 fb38 	bl	8006d88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a2d      	ldr	r2, [pc, #180]	; (80057d4 <HAL_TIM_PWM_Start+0x174>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d004      	beq.n	800572c <HAL_TIM_PWM_Start+0xcc>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a2c      	ldr	r2, [pc, #176]	; (80057d8 <HAL_TIM_PWM_Start+0x178>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d101      	bne.n	8005730 <HAL_TIM_PWM_Start+0xd0>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <HAL_TIM_PWM_Start+0xd2>
 8005730:	2300      	movs	r3, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d007      	beq.n	8005746 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005744:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a22      	ldr	r2, [pc, #136]	; (80057d4 <HAL_TIM_PWM_Start+0x174>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d022      	beq.n	8005796 <HAL_TIM_PWM_Start+0x136>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005758:	d01d      	beq.n	8005796 <HAL_TIM_PWM_Start+0x136>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a1f      	ldr	r2, [pc, #124]	; (80057dc <HAL_TIM_PWM_Start+0x17c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d018      	beq.n	8005796 <HAL_TIM_PWM_Start+0x136>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a1d      	ldr	r2, [pc, #116]	; (80057e0 <HAL_TIM_PWM_Start+0x180>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d013      	beq.n	8005796 <HAL_TIM_PWM_Start+0x136>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a1c      	ldr	r2, [pc, #112]	; (80057e4 <HAL_TIM_PWM_Start+0x184>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00e      	beq.n	8005796 <HAL_TIM_PWM_Start+0x136>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a16      	ldr	r2, [pc, #88]	; (80057d8 <HAL_TIM_PWM_Start+0x178>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d009      	beq.n	8005796 <HAL_TIM_PWM_Start+0x136>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a18      	ldr	r2, [pc, #96]	; (80057e8 <HAL_TIM_PWM_Start+0x188>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d004      	beq.n	8005796 <HAL_TIM_PWM_Start+0x136>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a16      	ldr	r2, [pc, #88]	; (80057ec <HAL_TIM_PWM_Start+0x18c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d111      	bne.n	80057ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b06      	cmp	r3, #6
 80057a6:	d010      	beq.n	80057ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f042 0201 	orr.w	r2, r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057b8:	e007      	b.n	80057ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40010000 	.word	0x40010000
 80057d8:	40010400 	.word	0x40010400
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00
 80057e8:	40014000 	.word	0x40014000
 80057ec:	40001800 	.word	0x40001800

080057f0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e041      	b.n	8005886 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fd fa0c 	bl	8002c34 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	3304      	adds	r3, #4
 800582c:	4619      	mov	r1, r3
 800582e:	4610      	mov	r0, r2
 8005830:	f000 fe04 	bl	800643c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <HAL_TIM_IC_Start+0x1a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	e013      	b.n	80058d2 <HAL_TIM_IC_Start+0x42>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d104      	bne.n	80058ba <HAL_TIM_IC_Start+0x2a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	e00b      	b.n	80058d2 <HAL_TIM_IC_Start+0x42>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d104      	bne.n	80058ca <HAL_TIM_IC_Start+0x3a>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	e003      	b.n	80058d2 <HAL_TIM_IC_Start+0x42>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d104      	bne.n	80058e4 <HAL_TIM_IC_Start+0x54>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	e013      	b.n	800590c <HAL_TIM_IC_Start+0x7c>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d104      	bne.n	80058f4 <HAL_TIM_IC_Start+0x64>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	e00b      	b.n	800590c <HAL_TIM_IC_Start+0x7c>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d104      	bne.n	8005904 <HAL_TIM_IC_Start+0x74>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e003      	b.n	800590c <HAL_TIM_IC_Start+0x7c>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800590a:	b2db      	uxtb	r3, r3
 800590c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800590e:	7bfb      	ldrb	r3, [r7, #15]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d102      	bne.n	800591a <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d001      	beq.n	800591e <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e081      	b.n	8005a22 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d104      	bne.n	800592e <HAL_TIM_IC_Start+0x9e>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800592c:	e013      	b.n	8005956 <HAL_TIM_IC_Start+0xc6>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b04      	cmp	r3, #4
 8005932:	d104      	bne.n	800593e <HAL_TIM_IC_Start+0xae>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800593c:	e00b      	b.n	8005956 <HAL_TIM_IC_Start+0xc6>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b08      	cmp	r3, #8
 8005942:	d104      	bne.n	800594e <HAL_TIM_IC_Start+0xbe>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800594c:	e003      	b.n	8005956 <HAL_TIM_IC_Start+0xc6>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2202      	movs	r2, #2
 8005952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d104      	bne.n	8005966 <HAL_TIM_IC_Start+0xd6>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005964:	e013      	b.n	800598e <HAL_TIM_IC_Start+0xfe>
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b04      	cmp	r3, #4
 800596a:	d104      	bne.n	8005976 <HAL_TIM_IC_Start+0xe6>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2202      	movs	r2, #2
 8005970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005974:	e00b      	b.n	800598e <HAL_TIM_IC_Start+0xfe>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b08      	cmp	r3, #8
 800597a:	d104      	bne.n	8005986 <HAL_TIM_IC_Start+0xf6>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005984:	e003      	b.n	800598e <HAL_TIM_IC_Start+0xfe>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2201      	movs	r2, #1
 8005994:	6839      	ldr	r1, [r7, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f001 f9f6 	bl	8006d88 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a22      	ldr	r2, [pc, #136]	; (8005a2c <HAL_TIM_IC_Start+0x19c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d022      	beq.n	80059ec <HAL_TIM_IC_Start+0x15c>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ae:	d01d      	beq.n	80059ec <HAL_TIM_IC_Start+0x15c>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1e      	ldr	r2, [pc, #120]	; (8005a30 <HAL_TIM_IC_Start+0x1a0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d018      	beq.n	80059ec <HAL_TIM_IC_Start+0x15c>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <HAL_TIM_IC_Start+0x1a4>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d013      	beq.n	80059ec <HAL_TIM_IC_Start+0x15c>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a1b      	ldr	r2, [pc, #108]	; (8005a38 <HAL_TIM_IC_Start+0x1a8>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d00e      	beq.n	80059ec <HAL_TIM_IC_Start+0x15c>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1a      	ldr	r2, [pc, #104]	; (8005a3c <HAL_TIM_IC_Start+0x1ac>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d009      	beq.n	80059ec <HAL_TIM_IC_Start+0x15c>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a18      	ldr	r2, [pc, #96]	; (8005a40 <HAL_TIM_IC_Start+0x1b0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d004      	beq.n	80059ec <HAL_TIM_IC_Start+0x15c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a17      	ldr	r2, [pc, #92]	; (8005a44 <HAL_TIM_IC_Start+0x1b4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d111      	bne.n	8005a10 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b06      	cmp	r3, #6
 80059fc:	d010      	beq.n	8005a20 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0201 	orr.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0e:	e007      	b.n	8005a20 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f042 0201 	orr.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40000400 	.word	0x40000400
 8005a34:	40000800 	.word	0x40000800
 8005a38:	40000c00 	.word	0x40000c00
 8005a3c:	40010400 	.word	0x40010400
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40001800 	.word	0x40001800

08005a48 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_IC_Start_IT+0x1e>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	e013      	b.n	8005a8e <HAL_TIM_IC_Start_IT+0x46>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_IC_Start_IT+0x2e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	e00b      	b.n	8005a8e <HAL_TIM_IC_Start_IT+0x46>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d104      	bne.n	8005a86 <HAL_TIM_IC_Start_IT+0x3e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	e003      	b.n	8005a8e <HAL_TIM_IC_Start_IT+0x46>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d104      	bne.n	8005aa0 <HAL_TIM_IC_Start_IT+0x58>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e013      	b.n	8005ac8 <HAL_TIM_IC_Start_IT+0x80>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d104      	bne.n	8005ab0 <HAL_TIM_IC_Start_IT+0x68>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	e00b      	b.n	8005ac8 <HAL_TIM_IC_Start_IT+0x80>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2b08      	cmp	r3, #8
 8005ab4:	d104      	bne.n	8005ac0 <HAL_TIM_IC_Start_IT+0x78>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	e003      	b.n	8005ac8 <HAL_TIM_IC_Start_IT+0x80>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005aca:	7bbb      	ldrb	r3, [r7, #14]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d102      	bne.n	8005ad6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ad0:	7b7b      	ldrb	r3, [r7, #13]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d001      	beq.n	8005ada <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e0cc      	b.n	8005c74 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_IC_Start_IT+0xa2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ae8:	e013      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0xca>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d104      	bne.n	8005afa <HAL_TIM_IC_Start_IT+0xb2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af8:	e00b      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0xca>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d104      	bne.n	8005b0a <HAL_TIM_IC_Start_IT+0xc2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b08:	e003      	b.n	8005b12 <HAL_TIM_IC_Start_IT+0xca>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2202      	movs	r2, #2
 8005b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_IC_Start_IT+0xda>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b20:	e013      	b.n	8005b4a <HAL_TIM_IC_Start_IT+0x102>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d104      	bne.n	8005b32 <HAL_TIM_IC_Start_IT+0xea>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b30:	e00b      	b.n	8005b4a <HAL_TIM_IC_Start_IT+0x102>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d104      	bne.n	8005b42 <HAL_TIM_IC_Start_IT+0xfa>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b40:	e003      	b.n	8005b4a <HAL_TIM_IC_Start_IT+0x102>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2202      	movs	r2, #2
 8005b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b0c      	cmp	r3, #12
 8005b4e:	d841      	bhi.n	8005bd4 <HAL_TIM_IC_Start_IT+0x18c>
 8005b50:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <HAL_TIM_IC_Start_IT+0x110>)
 8005b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b56:	bf00      	nop
 8005b58:	08005b8d 	.word	0x08005b8d
 8005b5c:	08005bd5 	.word	0x08005bd5
 8005b60:	08005bd5 	.word	0x08005bd5
 8005b64:	08005bd5 	.word	0x08005bd5
 8005b68:	08005b9f 	.word	0x08005b9f
 8005b6c:	08005bd5 	.word	0x08005bd5
 8005b70:	08005bd5 	.word	0x08005bd5
 8005b74:	08005bd5 	.word	0x08005bd5
 8005b78:	08005bb1 	.word	0x08005bb1
 8005b7c:	08005bd5 	.word	0x08005bd5
 8005b80:	08005bd5 	.word	0x08005bd5
 8005b84:	08005bd5 	.word	0x08005bd5
 8005b88:	08005bc3 	.word	0x08005bc3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 0202 	orr.w	r2, r2, #2
 8005b9a:	60da      	str	r2, [r3, #12]
      break;
 8005b9c:	e01d      	b.n	8005bda <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f042 0204 	orr.w	r2, r2, #4
 8005bac:	60da      	str	r2, [r3, #12]
      break;
 8005bae:	e014      	b.n	8005bda <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0208 	orr.w	r2, r2, #8
 8005bbe:	60da      	str	r2, [r3, #12]
      break;
 8005bc0:	e00b      	b.n	8005bda <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0210 	orr.w	r2, r2, #16
 8005bd0:	60da      	str	r2, [r3, #12]
      break;
 8005bd2:	e002      	b.n	8005bda <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d148      	bne.n	8005c72 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2201      	movs	r2, #1
 8005be6:	6839      	ldr	r1, [r7, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f001 f8cd 	bl	8006d88 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a22      	ldr	r2, [pc, #136]	; (8005c7c <HAL_TIM_IC_Start_IT+0x234>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d022      	beq.n	8005c3e <HAL_TIM_IC_Start_IT+0x1f6>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d01d      	beq.n	8005c3e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a1e      	ldr	r2, [pc, #120]	; (8005c80 <HAL_TIM_IC_Start_IT+0x238>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d018      	beq.n	8005c3e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a1c      	ldr	r2, [pc, #112]	; (8005c84 <HAL_TIM_IC_Start_IT+0x23c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d013      	beq.n	8005c3e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a1b      	ldr	r2, [pc, #108]	; (8005c88 <HAL_TIM_IC_Start_IT+0x240>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d00e      	beq.n	8005c3e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a19      	ldr	r2, [pc, #100]	; (8005c8c <HAL_TIM_IC_Start_IT+0x244>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a18      	ldr	r2, [pc, #96]	; (8005c90 <HAL_TIM_IC_Start_IT+0x248>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a16      	ldr	r2, [pc, #88]	; (8005c94 <HAL_TIM_IC_Start_IT+0x24c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d111      	bne.n	8005c62 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0307 	and.w	r3, r3, #7
 8005c48:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b06      	cmp	r3, #6
 8005c4e:	d010      	beq.n	8005c72 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c60:	e007      	b.n	8005c72 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f042 0201 	orr.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40000400 	.word	0x40000400
 8005c84:	40000800 	.word	0x40000800
 8005c88:	40000c00 	.word	0x40000c00
 8005c8c:	40010400 	.word	0x40010400
 8005c90:	40014000 	.word	0x40014000
 8005c94:	40001800 	.word	0x40001800

08005c98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d122      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d11b      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f06f 0202 	mvn.w	r2, #2
 8005cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fc fc24 	bl	8002528 <HAL_TIM_IC_CaptureCallback>
 8005ce0:	e005      	b.n	8005cee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fb8c 	bl	8006400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fb93 	bl	8006414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d122      	bne.n	8005d48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d11b      	bne.n	8005d48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0204 	mvn.w	r2, #4
 8005d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7fc fbfa 	bl	8002528 <HAL_TIM_IC_CaptureCallback>
 8005d34:	e005      	b.n	8005d42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fb62 	bl	8006400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fb69 	bl	8006414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d122      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d11b      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0208 	mvn.w	r2, #8
 8005d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2204      	movs	r2, #4
 8005d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69db      	ldr	r3, [r3, #28]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7fc fbd0 	bl	8002528 <HAL_TIM_IC_CaptureCallback>
 8005d88:	e005      	b.n	8005d96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fb38 	bl	8006400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fb3f 	bl	8006414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	2b10      	cmp	r3, #16
 8005da8:	d122      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0310 	and.w	r3, r3, #16
 8005db4:	2b10      	cmp	r3, #16
 8005db6:	d11b      	bne.n	8005df0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0210 	mvn.w	r2, #16
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7fc fba6 	bl	8002528 <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fb0e 	bl	8006400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fb15 	bl	8006414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d10e      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d107      	bne.n	8005e1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0201 	mvn.w	r2, #1
 8005e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fc fb58 	bl	80024cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e26:	2b80      	cmp	r3, #128	; 0x80
 8005e28:	d10e      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e34:	2b80      	cmp	r3, #128	; 0x80
 8005e36:	d107      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 f84c 	bl	8006ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b40      	cmp	r3, #64	; 0x40
 8005e54:	d10e      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b40      	cmp	r3, #64	; 0x40
 8005e62:	d107      	bne.n	8005e74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fada 	bl	8006428 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d10e      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d107      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f06f 0220 	mvn.w	r2, #32
 8005e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 f816 	bl	8006ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	3708      	adds	r7, #8
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e088      	b.n	8005fd8 <HAL_TIM_IC_ConfigChannel+0x130>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d11b      	bne.n	8005f0c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	6819      	ldr	r1, [r3, #0]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f000 fd8c 	bl	8006a00 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 020c 	bic.w	r2, r2, #12
 8005ef6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6999      	ldr	r1, [r3, #24]
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	619a      	str	r2, [r3, #24]
 8005f0a:	e060      	b.n	8005fce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d11c      	bne.n	8005f4c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	6819      	ldr	r1, [r3, #0]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f000 fe10 	bl	8006b46 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699a      	ldr	r2, [r3, #24]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f34:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6999      	ldr	r1, [r3, #24]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	021a      	lsls	r2, r3, #8
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	619a      	str	r2, [r3, #24]
 8005f4a:	e040      	b.n	8005fce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d11b      	bne.n	8005f8a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6819      	ldr	r1, [r3, #0]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	f000 fe5d 	bl	8006c20 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69da      	ldr	r2, [r3, #28]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 020c 	bic.w	r2, r2, #12
 8005f74:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	69d9      	ldr	r1, [r3, #28]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	61da      	str	r2, [r3, #28]
 8005f88:	e021      	b.n	8005fce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b0c      	cmp	r3, #12
 8005f8e:	d11c      	bne.n	8005fca <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	6819      	ldr	r1, [r3, #0]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f000 fe7a 	bl	8006c98 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fb2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	69d9      	ldr	r1, [r3, #28]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	021a      	lsls	r2, r3, #8
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	61da      	str	r2, [r3, #28]
 8005fc8:	e001      	b.n	8005fce <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fec:	2300      	movs	r3, #0
 8005fee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	e0ae      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2201      	movs	r2, #1
 8006002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b0c      	cmp	r3, #12
 800600a:	f200 809f 	bhi.w	800614c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800600e:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	08006049 	.word	0x08006049
 8006018:	0800614d 	.word	0x0800614d
 800601c:	0800614d 	.word	0x0800614d
 8006020:	0800614d 	.word	0x0800614d
 8006024:	08006089 	.word	0x08006089
 8006028:	0800614d 	.word	0x0800614d
 800602c:	0800614d 	.word	0x0800614d
 8006030:	0800614d 	.word	0x0800614d
 8006034:	080060cb 	.word	0x080060cb
 8006038:	0800614d 	.word	0x0800614d
 800603c:	0800614d 	.word	0x0800614d
 8006040:	0800614d 	.word	0x0800614d
 8006044:	0800610b 	.word	0x0800610b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fa94 	bl	800657c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0208 	orr.w	r2, r2, #8
 8006062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0204 	bic.w	r2, r2, #4
 8006072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6999      	ldr	r1, [r3, #24]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	691a      	ldr	r2, [r3, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	619a      	str	r2, [r3, #24]
      break;
 8006086:	e064      	b.n	8006152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fae4 	bl	800665c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699a      	ldr	r2, [r3, #24]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6999      	ldr	r1, [r3, #24]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	021a      	lsls	r2, r3, #8
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	619a      	str	r2, [r3, #24]
      break;
 80060c8:	e043      	b.n	8006152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68b9      	ldr	r1, [r7, #8]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fb39 	bl	8006748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0208 	orr.w	r2, r2, #8
 80060e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	69da      	ldr	r2, [r3, #28]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0204 	bic.w	r2, r2, #4
 80060f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69d9      	ldr	r1, [r3, #28]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	61da      	str	r2, [r3, #28]
      break;
 8006108:	e023      	b.n	8006152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68b9      	ldr	r1, [r7, #8]
 8006110:	4618      	mov	r0, r3
 8006112:	f000 fb8d 	bl	8006830 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69da      	ldr	r2, [r3, #28]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69da      	ldr	r2, [r3, #28]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	69d9      	ldr	r1, [r3, #28]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	021a      	lsls	r2, r3, #8
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	61da      	str	r2, [r3, #28]
      break;
 800614a:	e002      	b.n	8006152 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	75fb      	strb	r3, [r7, #23]
      break;
 8006150:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800615a:	7dfb      	ldrb	r3, [r7, #23]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800616e:	2300      	movs	r3, #0
 8006170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_TIM_ConfigClockSource+0x1c>
 800617c:	2302      	movs	r3, #2
 800617e:	e0b4      	b.n	80062ea <HAL_TIM_ConfigClockSource+0x186>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800619e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b8:	d03e      	beq.n	8006238 <HAL_TIM_ConfigClockSource+0xd4>
 80061ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061be:	f200 8087 	bhi.w	80062d0 <HAL_TIM_ConfigClockSource+0x16c>
 80061c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c6:	f000 8086 	beq.w	80062d6 <HAL_TIM_ConfigClockSource+0x172>
 80061ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ce:	d87f      	bhi.n	80062d0 <HAL_TIM_ConfigClockSource+0x16c>
 80061d0:	2b70      	cmp	r3, #112	; 0x70
 80061d2:	d01a      	beq.n	800620a <HAL_TIM_ConfigClockSource+0xa6>
 80061d4:	2b70      	cmp	r3, #112	; 0x70
 80061d6:	d87b      	bhi.n	80062d0 <HAL_TIM_ConfigClockSource+0x16c>
 80061d8:	2b60      	cmp	r3, #96	; 0x60
 80061da:	d050      	beq.n	800627e <HAL_TIM_ConfigClockSource+0x11a>
 80061dc:	2b60      	cmp	r3, #96	; 0x60
 80061de:	d877      	bhi.n	80062d0 <HAL_TIM_ConfigClockSource+0x16c>
 80061e0:	2b50      	cmp	r3, #80	; 0x50
 80061e2:	d03c      	beq.n	800625e <HAL_TIM_ConfigClockSource+0xfa>
 80061e4:	2b50      	cmp	r3, #80	; 0x50
 80061e6:	d873      	bhi.n	80062d0 <HAL_TIM_ConfigClockSource+0x16c>
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	d058      	beq.n	800629e <HAL_TIM_ConfigClockSource+0x13a>
 80061ec:	2b40      	cmp	r3, #64	; 0x40
 80061ee:	d86f      	bhi.n	80062d0 <HAL_TIM_ConfigClockSource+0x16c>
 80061f0:	2b30      	cmp	r3, #48	; 0x30
 80061f2:	d064      	beq.n	80062be <HAL_TIM_ConfigClockSource+0x15a>
 80061f4:	2b30      	cmp	r3, #48	; 0x30
 80061f6:	d86b      	bhi.n	80062d0 <HAL_TIM_ConfigClockSource+0x16c>
 80061f8:	2b20      	cmp	r3, #32
 80061fa:	d060      	beq.n	80062be <HAL_TIM_ConfigClockSource+0x15a>
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d867      	bhi.n	80062d0 <HAL_TIM_ConfigClockSource+0x16c>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d05c      	beq.n	80062be <HAL_TIM_ConfigClockSource+0x15a>
 8006204:	2b10      	cmp	r3, #16
 8006206:	d05a      	beq.n	80062be <HAL_TIM_ConfigClockSource+0x15a>
 8006208:	e062      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6899      	ldr	r1, [r3, #8]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f000 fd95 	bl	8006d48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800622c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	609a      	str	r2, [r3, #8]
      break;
 8006236:	e04f      	b.n	80062d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	6899      	ldr	r1, [r3, #8]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685a      	ldr	r2, [r3, #4]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f000 fd7e 	bl	8006d48 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800625a:	609a      	str	r2, [r3, #8]
      break;
 800625c:	e03c      	b.n	80062d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	6859      	ldr	r1, [r3, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	461a      	mov	r2, r3
 800626c:	f000 fc3c 	bl	8006ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2150      	movs	r1, #80	; 0x50
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fd4b 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 800627c:	e02c      	b.n	80062d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	6859      	ldr	r1, [r3, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	461a      	mov	r2, r3
 800628c:	f000 fc98 	bl	8006bc0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2160      	movs	r1, #96	; 0x60
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fd3b 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 800629c:	e01c      	b.n	80062d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6859      	ldr	r1, [r3, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	461a      	mov	r2, r3
 80062ac:	f000 fc1c 	bl	8006ae8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2140      	movs	r1, #64	; 0x40
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fd2b 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 80062bc:	e00c      	b.n	80062d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4619      	mov	r1, r3
 80062c8:	4610      	mov	r0, r2
 80062ca:	f000 fd22 	bl	8006d12 <TIM_ITRx_SetConfig>
      break;
 80062ce:	e003      	b.n	80062d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	73fb      	strb	r3, [r7, #15]
      break;
 80062d4:	e000      	b.n	80062d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80062d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b082      	sub	sp, #8
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006302:	2b01      	cmp	r3, #1
 8006304:	d101      	bne.n	800630a <HAL_TIM_SlaveConfigSynchro+0x18>
 8006306:	2302      	movs	r3, #2
 8006308:	e031      	b.n	800636e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2202      	movs	r2, #2
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 fadd 	bl	80068dc <TIM_SlaveTimer_SetConfig>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d009      	beq.n	800633c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e018      	b.n	800636e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800634a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800635a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3708      	adds	r7, #8
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006378:	b480      	push	{r7}
 800637a:	b085      	sub	sp, #20
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	2b0c      	cmp	r3, #12
 800638a:	d831      	bhi.n	80063f0 <HAL_TIM_ReadCapturedValue+0x78>
 800638c:	a201      	add	r2, pc, #4	; (adr r2, 8006394 <HAL_TIM_ReadCapturedValue+0x1c>)
 800638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006392:	bf00      	nop
 8006394:	080063c9 	.word	0x080063c9
 8006398:	080063f1 	.word	0x080063f1
 800639c:	080063f1 	.word	0x080063f1
 80063a0:	080063f1 	.word	0x080063f1
 80063a4:	080063d3 	.word	0x080063d3
 80063a8:	080063f1 	.word	0x080063f1
 80063ac:	080063f1 	.word	0x080063f1
 80063b0:	080063f1 	.word	0x080063f1
 80063b4:	080063dd 	.word	0x080063dd
 80063b8:	080063f1 	.word	0x080063f1
 80063bc:	080063f1 	.word	0x080063f1
 80063c0:	080063f1 	.word	0x080063f1
 80063c4:	080063e7 	.word	0x080063e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ce:	60fb      	str	r3, [r7, #12]

      break;
 80063d0:	e00f      	b.n	80063f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	60fb      	str	r3, [r7, #12]

      break;
 80063da:	e00a      	b.n	80063f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e2:	60fb      	str	r3, [r7, #12]

      break;
 80063e4:	e005      	b.n	80063f2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ec:	60fb      	str	r3, [r7, #12]

      break;
 80063ee:	e000      	b.n	80063f2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80063f0:	bf00      	nop
  }

  return tmpreg;
 80063f2:	68fb      	ldr	r3, [r7, #12]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3714      	adds	r7, #20
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a40      	ldr	r2, [pc, #256]	; (8006550 <TIM_Base_SetConfig+0x114>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d013      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645a:	d00f      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a3d      	ldr	r2, [pc, #244]	; (8006554 <TIM_Base_SetConfig+0x118>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00b      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a3c      	ldr	r2, [pc, #240]	; (8006558 <TIM_Base_SetConfig+0x11c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d007      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a3b      	ldr	r2, [pc, #236]	; (800655c <TIM_Base_SetConfig+0x120>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_Base_SetConfig+0x40>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a3a      	ldr	r2, [pc, #232]	; (8006560 <TIM_Base_SetConfig+0x124>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d108      	bne.n	800648e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2f      	ldr	r2, [pc, #188]	; (8006550 <TIM_Base_SetConfig+0x114>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d02b      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649c:	d027      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2c      	ldr	r2, [pc, #176]	; (8006554 <TIM_Base_SetConfig+0x118>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d023      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2b      	ldr	r2, [pc, #172]	; (8006558 <TIM_Base_SetConfig+0x11c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d01f      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2a      	ldr	r2, [pc, #168]	; (800655c <TIM_Base_SetConfig+0x120>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d01b      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a29      	ldr	r2, [pc, #164]	; (8006560 <TIM_Base_SetConfig+0x124>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d017      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a28      	ldr	r2, [pc, #160]	; (8006564 <TIM_Base_SetConfig+0x128>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d013      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a27      	ldr	r2, [pc, #156]	; (8006568 <TIM_Base_SetConfig+0x12c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00f      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a26      	ldr	r2, [pc, #152]	; (800656c <TIM_Base_SetConfig+0x130>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00b      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a25      	ldr	r2, [pc, #148]	; (8006570 <TIM_Base_SetConfig+0x134>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d007      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a24      	ldr	r2, [pc, #144]	; (8006574 <TIM_Base_SetConfig+0x138>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d003      	beq.n	80064ee <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a23      	ldr	r2, [pc, #140]	; (8006578 <TIM_Base_SetConfig+0x13c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d108      	bne.n	8006500 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	4313      	orrs	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a0a      	ldr	r2, [pc, #40]	; (8006550 <TIM_Base_SetConfig+0x114>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d003      	beq.n	8006534 <TIM_Base_SetConfig+0xf8>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a0c      	ldr	r2, [pc, #48]	; (8006560 <TIM_Base_SetConfig+0x124>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d103      	bne.n	800653c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	691a      	ldr	r2, [r3, #16]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	615a      	str	r2, [r3, #20]
}
 8006542:	bf00      	nop
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	40010000 	.word	0x40010000
 8006554:	40000400 	.word	0x40000400
 8006558:	40000800 	.word	0x40000800
 800655c:	40000c00 	.word	0x40000c00
 8006560:	40010400 	.word	0x40010400
 8006564:	40014000 	.word	0x40014000
 8006568:	40014400 	.word	0x40014400
 800656c:	40014800 	.word	0x40014800
 8006570:	40001800 	.word	0x40001800
 8006574:	40001c00 	.word	0x40001c00
 8006578:	40002000 	.word	0x40002000

0800657c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	f023 0201 	bic.w	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f023 0303 	bic.w	r3, r3, #3
 80065b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	f023 0302 	bic.w	r3, r3, #2
 80065c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a20      	ldr	r2, [pc, #128]	; (8006654 <TIM_OC1_SetConfig+0xd8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_OC1_SetConfig+0x64>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a1f      	ldr	r2, [pc, #124]	; (8006658 <TIM_OC1_SetConfig+0xdc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d10c      	bne.n	80065fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f023 0308 	bic.w	r3, r3, #8
 80065e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f023 0304 	bic.w	r3, r3, #4
 80065f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a15      	ldr	r2, [pc, #84]	; (8006654 <TIM_OC1_SetConfig+0xd8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d003      	beq.n	800660a <TIM_OC1_SetConfig+0x8e>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a14      	ldr	r2, [pc, #80]	; (8006658 <TIM_OC1_SetConfig+0xdc>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d111      	bne.n	800662e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	693a      	ldr	r2, [r7, #16]
 8006620:	4313      	orrs	r3, r2
 8006622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	621a      	str	r2, [r3, #32]
}
 8006648:	bf00      	nop
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	40010000 	.word	0x40010000
 8006658:	40010400 	.word	0x40010400

0800665c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	f023 0210 	bic.w	r2, r3, #16
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a1b      	ldr	r3, [r3, #32]
 8006676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800668a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	021b      	lsls	r3, r3, #8
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f023 0320 	bic.w	r3, r3, #32
 80066a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a22      	ldr	r2, [pc, #136]	; (8006740 <TIM_OC2_SetConfig+0xe4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_OC2_SetConfig+0x68>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a21      	ldr	r2, [pc, #132]	; (8006744 <TIM_OC2_SetConfig+0xe8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d10d      	bne.n	80066e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a17      	ldr	r2, [pc, #92]	; (8006740 <TIM_OC2_SetConfig+0xe4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d003      	beq.n	80066f0 <TIM_OC2_SetConfig+0x94>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a16      	ldr	r2, [pc, #88]	; (8006744 <TIM_OC2_SetConfig+0xe8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d113      	bne.n	8006718 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	621a      	str	r2, [r3, #32]
}
 8006732:	bf00      	nop
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40010000 	.word	0x40010000
 8006744:	40010400 	.word	0x40010400

08006748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a21      	ldr	r2, [pc, #132]	; (8006828 <TIM_OC3_SetConfig+0xe0>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d003      	beq.n	80067ae <TIM_OC3_SetConfig+0x66>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a20      	ldr	r2, [pc, #128]	; (800682c <TIM_OC3_SetConfig+0xe4>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d10d      	bne.n	80067ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a16      	ldr	r2, [pc, #88]	; (8006828 <TIM_OC3_SetConfig+0xe0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_OC3_SetConfig+0x92>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a15      	ldr	r2, [pc, #84]	; (800682c <TIM_OC3_SetConfig+0xe4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d113      	bne.n	8006802 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	40010000 	.word	0x40010000
 800682c:	40010400 	.word	0x40010400

08006830 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006830:	b480      	push	{r7}
 8006832:	b087      	sub	sp, #28
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800685e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	021b      	lsls	r3, r3, #8
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4313      	orrs	r3, r2
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800687a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	031b      	lsls	r3, r3, #12
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a12      	ldr	r2, [pc, #72]	; (80068d4 <TIM_OC4_SetConfig+0xa4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_OC4_SetConfig+0x68>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a11      	ldr	r2, [pc, #68]	; (80068d8 <TIM_OC4_SetConfig+0xa8>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d109      	bne.n	80068ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800689e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	019b      	lsls	r3, r3, #6
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	621a      	str	r2, [r3, #32]
}
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40010000 	.word	0x40010000
 80068d8:	40010400 	.word	0x40010400

080068dc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	4313      	orrs	r3, r2
 8006902:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f023 0307 	bic.w	r3, r3, #7
 800690a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	4313      	orrs	r3, r2
 8006914:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2b70      	cmp	r3, #112	; 0x70
 8006924:	d01a      	beq.n	800695c <TIM_SlaveTimer_SetConfig+0x80>
 8006926:	2b70      	cmp	r3, #112	; 0x70
 8006928:	d860      	bhi.n	80069ec <TIM_SlaveTimer_SetConfig+0x110>
 800692a:	2b60      	cmp	r3, #96	; 0x60
 800692c:	d054      	beq.n	80069d8 <TIM_SlaveTimer_SetConfig+0xfc>
 800692e:	2b60      	cmp	r3, #96	; 0x60
 8006930:	d85c      	bhi.n	80069ec <TIM_SlaveTimer_SetConfig+0x110>
 8006932:	2b50      	cmp	r3, #80	; 0x50
 8006934:	d046      	beq.n	80069c4 <TIM_SlaveTimer_SetConfig+0xe8>
 8006936:	2b50      	cmp	r3, #80	; 0x50
 8006938:	d858      	bhi.n	80069ec <TIM_SlaveTimer_SetConfig+0x110>
 800693a:	2b40      	cmp	r3, #64	; 0x40
 800693c:	d019      	beq.n	8006972 <TIM_SlaveTimer_SetConfig+0x96>
 800693e:	2b40      	cmp	r3, #64	; 0x40
 8006940:	d854      	bhi.n	80069ec <TIM_SlaveTimer_SetConfig+0x110>
 8006942:	2b30      	cmp	r3, #48	; 0x30
 8006944:	d055      	beq.n	80069f2 <TIM_SlaveTimer_SetConfig+0x116>
 8006946:	2b30      	cmp	r3, #48	; 0x30
 8006948:	d850      	bhi.n	80069ec <TIM_SlaveTimer_SetConfig+0x110>
 800694a:	2b20      	cmp	r3, #32
 800694c:	d051      	beq.n	80069f2 <TIM_SlaveTimer_SetConfig+0x116>
 800694e:	2b20      	cmp	r3, #32
 8006950:	d84c      	bhi.n	80069ec <TIM_SlaveTimer_SetConfig+0x110>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d04d      	beq.n	80069f2 <TIM_SlaveTimer_SetConfig+0x116>
 8006956:	2b10      	cmp	r3, #16
 8006958:	d04b      	beq.n	80069f2 <TIM_SlaveTimer_SetConfig+0x116>
 800695a:	e047      	b.n	80069ec <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6818      	ldr	r0, [r3, #0]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68d9      	ldr	r1, [r3, #12]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	f000 f9ec 	bl	8006d48 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006970:	e040      	b.n	80069f4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2b05      	cmp	r3, #5
 8006978:	d101      	bne.n	800697e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e03b      	b.n	80069f6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6a1a      	ldr	r2, [r3, #32]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f022 0201 	bic.w	r2, r2, #1
 8006994:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069a4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	011b      	lsls	r3, r3, #4
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	621a      	str	r2, [r3, #32]
      break;
 80069c2:	e017      	b.n	80069f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	6899      	ldr	r1, [r3, #8]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	461a      	mov	r2, r3
 80069d2:	f000 f889 	bl	8006ae8 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80069d6:	e00d      	b.n	80069f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6818      	ldr	r0, [r3, #0]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	6899      	ldr	r1, [r3, #8]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	461a      	mov	r2, r3
 80069e6:	f000 f8eb 	bl	8006bc0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80069ea:	e003      	b.n	80069f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	75fb      	strb	r3, [r7, #23]
      break;
 80069f0:	e000      	b.n	80069f4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80069f2:	bf00      	nop
  }

  return status;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
	...

08006a00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f023 0201 	bic.w	r2, r3, #1
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	699b      	ldr	r3, [r3, #24]
 8006a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	4a28      	ldr	r2, [pc, #160]	; (8006acc <TIM_TI1_SetConfig+0xcc>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01b      	beq.n	8006a66 <TIM_TI1_SetConfig+0x66>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a34:	d017      	beq.n	8006a66 <TIM_TI1_SetConfig+0x66>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4a25      	ldr	r2, [pc, #148]	; (8006ad0 <TIM_TI1_SetConfig+0xd0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <TIM_TI1_SetConfig+0x66>
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4a24      	ldr	r2, [pc, #144]	; (8006ad4 <TIM_TI1_SetConfig+0xd4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00f      	beq.n	8006a66 <TIM_TI1_SetConfig+0x66>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a23      	ldr	r2, [pc, #140]	; (8006ad8 <TIM_TI1_SetConfig+0xd8>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d00b      	beq.n	8006a66 <TIM_TI1_SetConfig+0x66>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4a22      	ldr	r2, [pc, #136]	; (8006adc <TIM_TI1_SetConfig+0xdc>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d007      	beq.n	8006a66 <TIM_TI1_SetConfig+0x66>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4a21      	ldr	r2, [pc, #132]	; (8006ae0 <TIM_TI1_SetConfig+0xe0>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d003      	beq.n	8006a66 <TIM_TI1_SetConfig+0x66>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a20      	ldr	r2, [pc, #128]	; (8006ae4 <TIM_TI1_SetConfig+0xe4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d101      	bne.n	8006a6a <TIM_TI1_SetConfig+0x6a>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <TIM_TI1_SetConfig+0x6c>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d008      	beq.n	8006a82 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f023 0303 	bic.w	r3, r3, #3
 8006a76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	e003      	b.n	8006a8a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f043 0301 	orr.w	r3, r3, #1
 8006a88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f023 030a 	bic.w	r3, r3, #10
 8006aa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f003 030a 	and.w	r3, r3, #10
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	621a      	str	r2, [r3, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40010000 	.word	0x40010000
 8006ad0:	40000400 	.word	0x40000400
 8006ad4:	40000800 	.word	0x40000800
 8006ad8:	40000c00 	.word	0x40000c00
 8006adc:	40010400 	.word	0x40010400
 8006ae0:	40014000 	.word	0x40014000
 8006ae4:	40001800 	.word	0x40001800

08006ae8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	f023 0201 	bic.w	r2, r3, #1
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	011b      	lsls	r3, r3, #4
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f023 030a 	bic.w	r3, r3, #10
 8006b24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b46:	b480      	push	{r7}
 8006b48:	b087      	sub	sp, #28
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	607a      	str	r2, [r7, #4]
 8006b52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	f023 0210 	bic.w	r2, r3, #16
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	031b      	lsls	r3, r3, #12
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	621a      	str	r2, [r3, #32]
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	f023 0210 	bic.w	r2, r3, #16
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	031b      	lsls	r3, r3, #12
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	011b      	lsls	r3, r3, #4
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	621a      	str	r2, [r3, #32]
}
 8006c14:	bf00      	nop
 8006c16:	371c      	adds	r7, #28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a1b      	ldr	r3, [r3, #32]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f023 0303 	bic.w	r3, r3, #3
 8006c4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006c70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	021b      	lsls	r3, r3, #8
 8006c76:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	621a      	str	r2, [r3, #32]
}
 8006c8c:	bf00      	nop
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
 8006ca4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	021b      	lsls	r3, r3, #8
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	031b      	lsls	r3, r3, #12
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006cea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	031b      	lsls	r3, r3, #12
 8006cf0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	621a      	str	r2, [r3, #32]
}
 8006d06:	bf00      	nop
 8006d08:	371c      	adds	r7, #28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f043 0307 	orr.w	r3, r3, #7
 8006d34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	609a      	str	r2, [r3, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	021a      	lsls	r2, r3, #8
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	609a      	str	r2, [r3, #8]
}
 8006d7c:	bf00      	nop
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b087      	sub	sp, #28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	f003 031f 	and.w	r3, r3, #31
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006da0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a1a      	ldr	r2, [r3, #32]
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	43db      	mvns	r3, r3
 8006daa:	401a      	ands	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a1a      	ldr	r2, [r3, #32]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	f003 031f 	and.w	r3, r3, #31
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
	...

08006dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e05a      	b.n	8006ea2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a21      	ldr	r2, [pc, #132]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d022      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e38:	d01d      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a1d      	ldr	r2, [pc, #116]	; (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d018      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1b      	ldr	r2, [pc, #108]	; (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d013      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a1a      	ldr	r2, [pc, #104]	; (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00e      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a18      	ldr	r2, [pc, #96]	; (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d009      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d10c      	bne.n	8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	40010000 	.word	0x40010000
 8006eb4:	40000400 	.word	0x40000400
 8006eb8:	40000800 	.word	0x40000800
 8006ebc:	40000c00 	.word	0x40000c00
 8006ec0:	40010400 	.word	0x40010400
 8006ec4:	40014000 	.word	0x40014000
 8006ec8:	40001800 	.word	0x40001800

08006ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d101      	bne.n	8006f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e03f      	b.n	8006f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fc f80e 	bl	8002f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2224      	movs	r2, #36	; 0x24
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 f929 	bl	8007190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	695a      	ldr	r2, [r3, #20]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b08a      	sub	sp, #40	; 0x28
 8006f92:	af02      	add	r7, sp, #8
 8006f94:	60f8      	str	r0, [r7, #12]
 8006f96:	60b9      	str	r1, [r7, #8]
 8006f98:	603b      	str	r3, [r7, #0]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d17c      	bne.n	80070a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <HAL_UART_Transmit+0x2c>
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e075      	b.n	80070aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d101      	bne.n	8006fcc <HAL_UART_Transmit+0x3e>
 8006fc8:	2302      	movs	r3, #2
 8006fca:	e06e      	b.n	80070aa <HAL_UART_Transmit+0x11c>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2221      	movs	r2, #33	; 0x21
 8006fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fe2:	f7fc f913 	bl	800320c <HAL_GetTick>
 8006fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	88fa      	ldrh	r2, [r7, #6]
 8006fec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	88fa      	ldrh	r2, [r7, #6]
 8006ff2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffc:	d108      	bne.n	8007010 <HAL_UART_Transmit+0x82>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007006:	2300      	movs	r3, #0
 8007008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	61bb      	str	r3, [r7, #24]
 800700e:	e003      	b.n	8007018 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007014:	2300      	movs	r3, #0
 8007016:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007020:	e02a      	b.n	8007078 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2200      	movs	r2, #0
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f840 	bl	80070b2 <UART_WaitOnFlagUntilTimeout>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007038:	2303      	movs	r3, #3
 800703a:	e036      	b.n	80070aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10b      	bne.n	800705a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007050:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	3302      	adds	r3, #2
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	e007      	b.n	800706a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	3301      	adds	r3, #1
 8007068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1cf      	bne.n	8007022 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2200      	movs	r2, #0
 800708a:	2140      	movs	r1, #64	; 0x40
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f810 	bl	80070b2 <UART_WaitOnFlagUntilTimeout>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e006      	b.n	80070aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e000      	b.n	80070aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80070a8:	2302      	movs	r3, #2
  }
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b090      	sub	sp, #64	; 0x40
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	603b      	str	r3, [r7, #0]
 80070be:	4613      	mov	r3, r2
 80070c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070c2:	e050      	b.n	8007166 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ca:	d04c      	beq.n	8007166 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80070cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80070d2:	f7fc f89b 	bl	800320c <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070de:	429a      	cmp	r2, r3
 80070e0:	d241      	bcs.n	8007166 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	330c      	adds	r3, #12
 80070e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	330c      	adds	r3, #12
 8007100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007102:	637a      	str	r2, [r7, #52]	; 0x34
 8007104:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e5      	bne.n	80070e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	3314      	adds	r3, #20
 800711c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	613b      	str	r3, [r7, #16]
   return(result);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	f023 0301 	bic.w	r3, r3, #1
 800712c:	63bb      	str	r3, [r7, #56]	; 0x38
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3314      	adds	r3, #20
 8007134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007136:	623a      	str	r2, [r7, #32]
 8007138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	69f9      	ldr	r1, [r7, #28]
 800713c:	6a3a      	ldr	r2, [r7, #32]
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	61bb      	str	r3, [r7, #24]
   return(result);
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e5      	bne.n	8007116 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2220      	movs	r2, #32
 800714e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e00f      	b.n	8007186 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4013      	ands	r3, r2
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	429a      	cmp	r2, r3
 8007174:	bf0c      	ite	eq
 8007176:	2301      	moveq	r3, #1
 8007178:	2300      	movne	r3, #0
 800717a:	b2db      	uxtb	r3, r3
 800717c:	461a      	mov	r2, r3
 800717e:	79fb      	ldrb	r3, [r7, #7]
 8007180:	429a      	cmp	r2, r3
 8007182:	d09f      	beq.n	80070c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3740      	adds	r7, #64	; 0x40
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
	...

08007190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007194:	b0c0      	sub	sp, #256	; 0x100
 8007196:	af00      	add	r7, sp, #0
 8007198:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800719c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ac:	68d9      	ldr	r1, [r3, #12]
 80071ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	ea40 0301 	orr.w	r3, r0, r1
 80071b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80071e8:	f021 010c 	bic.w	r1, r1, #12
 80071ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80071f6:	430b      	orrs	r3, r1
 80071f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720a:	6999      	ldr	r1, [r3, #24]
 800720c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	ea40 0301 	orr.w	r3, r0, r1
 8007216:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	4b8f      	ldr	r3, [pc, #572]	; (800745c <UART_SetConfig+0x2cc>)
 8007220:	429a      	cmp	r2, r3
 8007222:	d005      	beq.n	8007230 <UART_SetConfig+0xa0>
 8007224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b8d      	ldr	r3, [pc, #564]	; (8007460 <UART_SetConfig+0x2d0>)
 800722c:	429a      	cmp	r2, r3
 800722e:	d104      	bne.n	800723a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007230:	f7fc ffe8 	bl	8004204 <HAL_RCC_GetPCLK2Freq>
 8007234:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007238:	e003      	b.n	8007242 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800723a:	f7fc ffcf 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 800723e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007246:	69db      	ldr	r3, [r3, #28]
 8007248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800724c:	f040 810c 	bne.w	8007468 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007254:	2200      	movs	r2, #0
 8007256:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800725a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800725e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007262:	4622      	mov	r2, r4
 8007264:	462b      	mov	r3, r5
 8007266:	1891      	adds	r1, r2, r2
 8007268:	65b9      	str	r1, [r7, #88]	; 0x58
 800726a:	415b      	adcs	r3, r3
 800726c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800726e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007272:	4621      	mov	r1, r4
 8007274:	eb12 0801 	adds.w	r8, r2, r1
 8007278:	4629      	mov	r1, r5
 800727a:	eb43 0901 	adc.w	r9, r3, r1
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	f04f 0300 	mov.w	r3, #0
 8007286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800728a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800728e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007292:	4690      	mov	r8, r2
 8007294:	4699      	mov	r9, r3
 8007296:	4623      	mov	r3, r4
 8007298:	eb18 0303 	adds.w	r3, r8, r3
 800729c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072a0:	462b      	mov	r3, r5
 80072a2:	eb49 0303 	adc.w	r3, r9, r3
 80072a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072be:	460b      	mov	r3, r1
 80072c0:	18db      	adds	r3, r3, r3
 80072c2:	653b      	str	r3, [r7, #80]	; 0x50
 80072c4:	4613      	mov	r3, r2
 80072c6:	eb42 0303 	adc.w	r3, r2, r3
 80072ca:	657b      	str	r3, [r7, #84]	; 0x54
 80072cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80072d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80072d4:	f7f9 fcd8 	bl	8000c88 <__aeabi_uldivmod>
 80072d8:	4602      	mov	r2, r0
 80072da:	460b      	mov	r3, r1
 80072dc:	4b61      	ldr	r3, [pc, #388]	; (8007464 <UART_SetConfig+0x2d4>)
 80072de:	fba3 2302 	umull	r2, r3, r3, r2
 80072e2:	095b      	lsrs	r3, r3, #5
 80072e4:	011c      	lsls	r4, r3, #4
 80072e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80072f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80072f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80072f8:	4642      	mov	r2, r8
 80072fa:	464b      	mov	r3, r9
 80072fc:	1891      	adds	r1, r2, r2
 80072fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8007300:	415b      	adcs	r3, r3
 8007302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007308:	4641      	mov	r1, r8
 800730a:	eb12 0a01 	adds.w	sl, r2, r1
 800730e:	4649      	mov	r1, r9
 8007310:	eb43 0b01 	adc.w	fp, r3, r1
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007320:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007328:	4692      	mov	sl, r2
 800732a:	469b      	mov	fp, r3
 800732c:	4643      	mov	r3, r8
 800732e:	eb1a 0303 	adds.w	r3, sl, r3
 8007332:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007336:	464b      	mov	r3, r9
 8007338:	eb4b 0303 	adc.w	r3, fp, r3
 800733c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800734c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007350:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007354:	460b      	mov	r3, r1
 8007356:	18db      	adds	r3, r3, r3
 8007358:	643b      	str	r3, [r7, #64]	; 0x40
 800735a:	4613      	mov	r3, r2
 800735c:	eb42 0303 	adc.w	r3, r2, r3
 8007360:	647b      	str	r3, [r7, #68]	; 0x44
 8007362:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007366:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800736a:	f7f9 fc8d 	bl	8000c88 <__aeabi_uldivmod>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4611      	mov	r1, r2
 8007374:	4b3b      	ldr	r3, [pc, #236]	; (8007464 <UART_SetConfig+0x2d4>)
 8007376:	fba3 2301 	umull	r2, r3, r3, r1
 800737a:	095b      	lsrs	r3, r3, #5
 800737c:	2264      	movs	r2, #100	; 0x64
 800737e:	fb02 f303 	mul.w	r3, r2, r3
 8007382:	1acb      	subs	r3, r1, r3
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800738a:	4b36      	ldr	r3, [pc, #216]	; (8007464 <UART_SetConfig+0x2d4>)
 800738c:	fba3 2302 	umull	r2, r3, r3, r2
 8007390:	095b      	lsrs	r3, r3, #5
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007398:	441c      	add	r4, r3
 800739a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800739e:	2200      	movs	r2, #0
 80073a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80073ac:	4642      	mov	r2, r8
 80073ae:	464b      	mov	r3, r9
 80073b0:	1891      	adds	r1, r2, r2
 80073b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80073b4:	415b      	adcs	r3, r3
 80073b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073bc:	4641      	mov	r1, r8
 80073be:	1851      	adds	r1, r2, r1
 80073c0:	6339      	str	r1, [r7, #48]	; 0x30
 80073c2:	4649      	mov	r1, r9
 80073c4:	414b      	adcs	r3, r1
 80073c6:	637b      	str	r3, [r7, #52]	; 0x34
 80073c8:	f04f 0200 	mov.w	r2, #0
 80073cc:	f04f 0300 	mov.w	r3, #0
 80073d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80073d4:	4659      	mov	r1, fp
 80073d6:	00cb      	lsls	r3, r1, #3
 80073d8:	4651      	mov	r1, sl
 80073da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073de:	4651      	mov	r1, sl
 80073e0:	00ca      	lsls	r2, r1, #3
 80073e2:	4610      	mov	r0, r2
 80073e4:	4619      	mov	r1, r3
 80073e6:	4603      	mov	r3, r0
 80073e8:	4642      	mov	r2, r8
 80073ea:	189b      	adds	r3, r3, r2
 80073ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073f0:	464b      	mov	r3, r9
 80073f2:	460a      	mov	r2, r1
 80073f4:	eb42 0303 	adc.w	r3, r2, r3
 80073f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80073fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007408:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800740c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007410:	460b      	mov	r3, r1
 8007412:	18db      	adds	r3, r3, r3
 8007414:	62bb      	str	r3, [r7, #40]	; 0x28
 8007416:	4613      	mov	r3, r2
 8007418:	eb42 0303 	adc.w	r3, r2, r3
 800741c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800741e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007422:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007426:	f7f9 fc2f 	bl	8000c88 <__aeabi_uldivmod>
 800742a:	4602      	mov	r2, r0
 800742c:	460b      	mov	r3, r1
 800742e:	4b0d      	ldr	r3, [pc, #52]	; (8007464 <UART_SetConfig+0x2d4>)
 8007430:	fba3 1302 	umull	r1, r3, r3, r2
 8007434:	095b      	lsrs	r3, r3, #5
 8007436:	2164      	movs	r1, #100	; 0x64
 8007438:	fb01 f303 	mul.w	r3, r1, r3
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	3332      	adds	r3, #50	; 0x32
 8007442:	4a08      	ldr	r2, [pc, #32]	; (8007464 <UART_SetConfig+0x2d4>)
 8007444:	fba2 2303 	umull	r2, r3, r2, r3
 8007448:	095b      	lsrs	r3, r3, #5
 800744a:	f003 0207 	and.w	r2, r3, #7
 800744e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4422      	add	r2, r4
 8007456:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007458:	e105      	b.n	8007666 <UART_SetConfig+0x4d6>
 800745a:	bf00      	nop
 800745c:	40011000 	.word	0x40011000
 8007460:	40011400 	.word	0x40011400
 8007464:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800746c:	2200      	movs	r2, #0
 800746e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007472:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007476:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800747a:	4642      	mov	r2, r8
 800747c:	464b      	mov	r3, r9
 800747e:	1891      	adds	r1, r2, r2
 8007480:	6239      	str	r1, [r7, #32]
 8007482:	415b      	adcs	r3, r3
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
 8007486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800748a:	4641      	mov	r1, r8
 800748c:	1854      	adds	r4, r2, r1
 800748e:	4649      	mov	r1, r9
 8007490:	eb43 0501 	adc.w	r5, r3, r1
 8007494:	f04f 0200 	mov.w	r2, #0
 8007498:	f04f 0300 	mov.w	r3, #0
 800749c:	00eb      	lsls	r3, r5, #3
 800749e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074a2:	00e2      	lsls	r2, r4, #3
 80074a4:	4614      	mov	r4, r2
 80074a6:	461d      	mov	r5, r3
 80074a8:	4643      	mov	r3, r8
 80074aa:	18e3      	adds	r3, r4, r3
 80074ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074b0:	464b      	mov	r3, r9
 80074b2:	eb45 0303 	adc.w	r3, r5, r3
 80074b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80074c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	f04f 0300 	mov.w	r3, #0
 80074d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80074d6:	4629      	mov	r1, r5
 80074d8:	008b      	lsls	r3, r1, #2
 80074da:	4621      	mov	r1, r4
 80074dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074e0:	4621      	mov	r1, r4
 80074e2:	008a      	lsls	r2, r1, #2
 80074e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80074e8:	f7f9 fbce 	bl	8000c88 <__aeabi_uldivmod>
 80074ec:	4602      	mov	r2, r0
 80074ee:	460b      	mov	r3, r1
 80074f0:	4b60      	ldr	r3, [pc, #384]	; (8007674 <UART_SetConfig+0x4e4>)
 80074f2:	fba3 2302 	umull	r2, r3, r3, r2
 80074f6:	095b      	lsrs	r3, r3, #5
 80074f8:	011c      	lsls	r4, r3, #4
 80074fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007504:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007508:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800750c:	4642      	mov	r2, r8
 800750e:	464b      	mov	r3, r9
 8007510:	1891      	adds	r1, r2, r2
 8007512:	61b9      	str	r1, [r7, #24]
 8007514:	415b      	adcs	r3, r3
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800751c:	4641      	mov	r1, r8
 800751e:	1851      	adds	r1, r2, r1
 8007520:	6139      	str	r1, [r7, #16]
 8007522:	4649      	mov	r1, r9
 8007524:	414b      	adcs	r3, r1
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	f04f 0200 	mov.w	r2, #0
 800752c:	f04f 0300 	mov.w	r3, #0
 8007530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007534:	4659      	mov	r1, fp
 8007536:	00cb      	lsls	r3, r1, #3
 8007538:	4651      	mov	r1, sl
 800753a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800753e:	4651      	mov	r1, sl
 8007540:	00ca      	lsls	r2, r1, #3
 8007542:	4610      	mov	r0, r2
 8007544:	4619      	mov	r1, r3
 8007546:	4603      	mov	r3, r0
 8007548:	4642      	mov	r2, r8
 800754a:	189b      	adds	r3, r3, r2
 800754c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007550:	464b      	mov	r3, r9
 8007552:	460a      	mov	r2, r1
 8007554:	eb42 0303 	adc.w	r3, r2, r3
 8007558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	67bb      	str	r3, [r7, #120]	; 0x78
 8007566:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007568:	f04f 0200 	mov.w	r2, #0
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007574:	4649      	mov	r1, r9
 8007576:	008b      	lsls	r3, r1, #2
 8007578:	4641      	mov	r1, r8
 800757a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800757e:	4641      	mov	r1, r8
 8007580:	008a      	lsls	r2, r1, #2
 8007582:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007586:	f7f9 fb7f 	bl	8000c88 <__aeabi_uldivmod>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4b39      	ldr	r3, [pc, #228]	; (8007674 <UART_SetConfig+0x4e4>)
 8007590:	fba3 1302 	umull	r1, r3, r3, r2
 8007594:	095b      	lsrs	r3, r3, #5
 8007596:	2164      	movs	r1, #100	; 0x64
 8007598:	fb01 f303 	mul.w	r3, r1, r3
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	011b      	lsls	r3, r3, #4
 80075a0:	3332      	adds	r3, #50	; 0x32
 80075a2:	4a34      	ldr	r2, [pc, #208]	; (8007674 <UART_SetConfig+0x4e4>)
 80075a4:	fba2 2303 	umull	r2, r3, r2, r3
 80075a8:	095b      	lsrs	r3, r3, #5
 80075aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075ae:	441c      	add	r4, r3
 80075b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075b4:	2200      	movs	r2, #0
 80075b6:	673b      	str	r3, [r7, #112]	; 0x70
 80075b8:	677a      	str	r2, [r7, #116]	; 0x74
 80075ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075be:	4642      	mov	r2, r8
 80075c0:	464b      	mov	r3, r9
 80075c2:	1891      	adds	r1, r2, r2
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	415b      	adcs	r3, r3
 80075c8:	60fb      	str	r3, [r7, #12]
 80075ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075ce:	4641      	mov	r1, r8
 80075d0:	1851      	adds	r1, r2, r1
 80075d2:	6039      	str	r1, [r7, #0]
 80075d4:	4649      	mov	r1, r9
 80075d6:	414b      	adcs	r3, r1
 80075d8:	607b      	str	r3, [r7, #4]
 80075da:	f04f 0200 	mov.w	r2, #0
 80075de:	f04f 0300 	mov.w	r3, #0
 80075e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075e6:	4659      	mov	r1, fp
 80075e8:	00cb      	lsls	r3, r1, #3
 80075ea:	4651      	mov	r1, sl
 80075ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075f0:	4651      	mov	r1, sl
 80075f2:	00ca      	lsls	r2, r1, #3
 80075f4:	4610      	mov	r0, r2
 80075f6:	4619      	mov	r1, r3
 80075f8:	4603      	mov	r3, r0
 80075fa:	4642      	mov	r2, r8
 80075fc:	189b      	adds	r3, r3, r2
 80075fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8007600:	464b      	mov	r3, r9
 8007602:	460a      	mov	r2, r1
 8007604:	eb42 0303 	adc.w	r3, r2, r3
 8007608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800760a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	663b      	str	r3, [r7, #96]	; 0x60
 8007614:	667a      	str	r2, [r7, #100]	; 0x64
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	f04f 0300 	mov.w	r3, #0
 800761e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007622:	4649      	mov	r1, r9
 8007624:	008b      	lsls	r3, r1, #2
 8007626:	4641      	mov	r1, r8
 8007628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800762c:	4641      	mov	r1, r8
 800762e:	008a      	lsls	r2, r1, #2
 8007630:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007634:	f7f9 fb28 	bl	8000c88 <__aeabi_uldivmod>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4b0d      	ldr	r3, [pc, #52]	; (8007674 <UART_SetConfig+0x4e4>)
 800763e:	fba3 1302 	umull	r1, r3, r3, r2
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	2164      	movs	r1, #100	; 0x64
 8007646:	fb01 f303 	mul.w	r3, r1, r3
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	011b      	lsls	r3, r3, #4
 800764e:	3332      	adds	r3, #50	; 0x32
 8007650:	4a08      	ldr	r2, [pc, #32]	; (8007674 <UART_SetConfig+0x4e4>)
 8007652:	fba2 2303 	umull	r2, r3, r2, r3
 8007656:	095b      	lsrs	r3, r3, #5
 8007658:	f003 020f 	and.w	r2, r3, #15
 800765c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4422      	add	r2, r4
 8007664:	609a      	str	r2, [r3, #8]
}
 8007666:	bf00      	nop
 8007668:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800766c:	46bd      	mov	sp, r7
 800766e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007672:	bf00      	nop
 8007674:	51eb851f 	.word	0x51eb851f

08007678 <__libc_init_array>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	4d0d      	ldr	r5, [pc, #52]	; (80076b0 <__libc_init_array+0x38>)
 800767c:	4c0d      	ldr	r4, [pc, #52]	; (80076b4 <__libc_init_array+0x3c>)
 800767e:	1b64      	subs	r4, r4, r5
 8007680:	10a4      	asrs	r4, r4, #2
 8007682:	2600      	movs	r6, #0
 8007684:	42a6      	cmp	r6, r4
 8007686:	d109      	bne.n	800769c <__libc_init_array+0x24>
 8007688:	4d0b      	ldr	r5, [pc, #44]	; (80076b8 <__libc_init_array+0x40>)
 800768a:	4c0c      	ldr	r4, [pc, #48]	; (80076bc <__libc_init_array+0x44>)
 800768c:	f004 f9a2 	bl	800b9d4 <_init>
 8007690:	1b64      	subs	r4, r4, r5
 8007692:	10a4      	asrs	r4, r4, #2
 8007694:	2600      	movs	r6, #0
 8007696:	42a6      	cmp	r6, r4
 8007698:	d105      	bne.n	80076a6 <__libc_init_array+0x2e>
 800769a:	bd70      	pop	{r4, r5, r6, pc}
 800769c:	f855 3b04 	ldr.w	r3, [r5], #4
 80076a0:	4798      	blx	r3
 80076a2:	3601      	adds	r6, #1
 80076a4:	e7ee      	b.n	8007684 <__libc_init_array+0xc>
 80076a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076aa:	4798      	blx	r3
 80076ac:	3601      	adds	r6, #1
 80076ae:	e7f2      	b.n	8007696 <__libc_init_array+0x1e>
 80076b0:	0800c028 	.word	0x0800c028
 80076b4:	0800c028 	.word	0x0800c028
 80076b8:	0800c028 	.word	0x0800c028
 80076bc:	0800c02c 	.word	0x0800c02c

080076c0 <memcpy>:
 80076c0:	440a      	add	r2, r1
 80076c2:	4291      	cmp	r1, r2
 80076c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076c8:	d100      	bne.n	80076cc <memcpy+0xc>
 80076ca:	4770      	bx	lr
 80076cc:	b510      	push	{r4, lr}
 80076ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076d6:	4291      	cmp	r1, r2
 80076d8:	d1f9      	bne.n	80076ce <memcpy+0xe>
 80076da:	bd10      	pop	{r4, pc}

080076dc <memset>:
 80076dc:	4402      	add	r2, r0
 80076de:	4603      	mov	r3, r0
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d100      	bne.n	80076e6 <memset+0xa>
 80076e4:	4770      	bx	lr
 80076e6:	f803 1b01 	strb.w	r1, [r3], #1
 80076ea:	e7f9      	b.n	80076e0 <memset+0x4>

080076ec <__cvt>:
 80076ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076f0:	ec55 4b10 	vmov	r4, r5, d0
 80076f4:	2d00      	cmp	r5, #0
 80076f6:	460e      	mov	r6, r1
 80076f8:	4619      	mov	r1, r3
 80076fa:	462b      	mov	r3, r5
 80076fc:	bfbb      	ittet	lt
 80076fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007702:	461d      	movlt	r5, r3
 8007704:	2300      	movge	r3, #0
 8007706:	232d      	movlt	r3, #45	; 0x2d
 8007708:	700b      	strb	r3, [r1, #0]
 800770a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800770c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007710:	4691      	mov	r9, r2
 8007712:	f023 0820 	bic.w	r8, r3, #32
 8007716:	bfbc      	itt	lt
 8007718:	4622      	movlt	r2, r4
 800771a:	4614      	movlt	r4, r2
 800771c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007720:	d005      	beq.n	800772e <__cvt+0x42>
 8007722:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007726:	d100      	bne.n	800772a <__cvt+0x3e>
 8007728:	3601      	adds	r6, #1
 800772a:	2102      	movs	r1, #2
 800772c:	e000      	b.n	8007730 <__cvt+0x44>
 800772e:	2103      	movs	r1, #3
 8007730:	ab03      	add	r3, sp, #12
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	ab02      	add	r3, sp, #8
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	ec45 4b10 	vmov	d0, r4, r5
 800773c:	4653      	mov	r3, sl
 800773e:	4632      	mov	r2, r6
 8007740:	f000 fcea 	bl	8008118 <_dtoa_r>
 8007744:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007748:	4607      	mov	r7, r0
 800774a:	d102      	bne.n	8007752 <__cvt+0x66>
 800774c:	f019 0f01 	tst.w	r9, #1
 8007750:	d022      	beq.n	8007798 <__cvt+0xac>
 8007752:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007756:	eb07 0906 	add.w	r9, r7, r6
 800775a:	d110      	bne.n	800777e <__cvt+0x92>
 800775c:	783b      	ldrb	r3, [r7, #0]
 800775e:	2b30      	cmp	r3, #48	; 0x30
 8007760:	d10a      	bne.n	8007778 <__cvt+0x8c>
 8007762:	2200      	movs	r2, #0
 8007764:	2300      	movs	r3, #0
 8007766:	4620      	mov	r0, r4
 8007768:	4629      	mov	r1, r5
 800776a:	f7f9 f9cd 	bl	8000b08 <__aeabi_dcmpeq>
 800776e:	b918      	cbnz	r0, 8007778 <__cvt+0x8c>
 8007770:	f1c6 0601 	rsb	r6, r6, #1
 8007774:	f8ca 6000 	str.w	r6, [sl]
 8007778:	f8da 3000 	ldr.w	r3, [sl]
 800777c:	4499      	add	r9, r3
 800777e:	2200      	movs	r2, #0
 8007780:	2300      	movs	r3, #0
 8007782:	4620      	mov	r0, r4
 8007784:	4629      	mov	r1, r5
 8007786:	f7f9 f9bf 	bl	8000b08 <__aeabi_dcmpeq>
 800778a:	b108      	cbz	r0, 8007790 <__cvt+0xa4>
 800778c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007790:	2230      	movs	r2, #48	; 0x30
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	454b      	cmp	r3, r9
 8007796:	d307      	bcc.n	80077a8 <__cvt+0xbc>
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800779c:	1bdb      	subs	r3, r3, r7
 800779e:	4638      	mov	r0, r7
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	b004      	add	sp, #16
 80077a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077a8:	1c59      	adds	r1, r3, #1
 80077aa:	9103      	str	r1, [sp, #12]
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	e7f0      	b.n	8007792 <__cvt+0xa6>

080077b0 <__exponent>:
 80077b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077b2:	4603      	mov	r3, r0
 80077b4:	2900      	cmp	r1, #0
 80077b6:	bfb8      	it	lt
 80077b8:	4249      	neglt	r1, r1
 80077ba:	f803 2b02 	strb.w	r2, [r3], #2
 80077be:	bfb4      	ite	lt
 80077c0:	222d      	movlt	r2, #45	; 0x2d
 80077c2:	222b      	movge	r2, #43	; 0x2b
 80077c4:	2909      	cmp	r1, #9
 80077c6:	7042      	strb	r2, [r0, #1]
 80077c8:	dd2a      	ble.n	8007820 <__exponent+0x70>
 80077ca:	f10d 0407 	add.w	r4, sp, #7
 80077ce:	46a4      	mov	ip, r4
 80077d0:	270a      	movs	r7, #10
 80077d2:	46a6      	mov	lr, r4
 80077d4:	460a      	mov	r2, r1
 80077d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80077da:	fb07 1516 	mls	r5, r7, r6, r1
 80077de:	3530      	adds	r5, #48	; 0x30
 80077e0:	2a63      	cmp	r2, #99	; 0x63
 80077e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80077e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077ea:	4631      	mov	r1, r6
 80077ec:	dcf1      	bgt.n	80077d2 <__exponent+0x22>
 80077ee:	3130      	adds	r1, #48	; 0x30
 80077f0:	f1ae 0502 	sub.w	r5, lr, #2
 80077f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077f8:	1c44      	adds	r4, r0, #1
 80077fa:	4629      	mov	r1, r5
 80077fc:	4561      	cmp	r1, ip
 80077fe:	d30a      	bcc.n	8007816 <__exponent+0x66>
 8007800:	f10d 0209 	add.w	r2, sp, #9
 8007804:	eba2 020e 	sub.w	r2, r2, lr
 8007808:	4565      	cmp	r5, ip
 800780a:	bf88      	it	hi
 800780c:	2200      	movhi	r2, #0
 800780e:	4413      	add	r3, r2
 8007810:	1a18      	subs	r0, r3, r0
 8007812:	b003      	add	sp, #12
 8007814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800781a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800781e:	e7ed      	b.n	80077fc <__exponent+0x4c>
 8007820:	2330      	movs	r3, #48	; 0x30
 8007822:	3130      	adds	r1, #48	; 0x30
 8007824:	7083      	strb	r3, [r0, #2]
 8007826:	70c1      	strb	r1, [r0, #3]
 8007828:	1d03      	adds	r3, r0, #4
 800782a:	e7f1      	b.n	8007810 <__exponent+0x60>

0800782c <_printf_float>:
 800782c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007830:	ed2d 8b02 	vpush	{d8}
 8007834:	b08d      	sub	sp, #52	; 0x34
 8007836:	460c      	mov	r4, r1
 8007838:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800783c:	4616      	mov	r6, r2
 800783e:	461f      	mov	r7, r3
 8007840:	4605      	mov	r5, r0
 8007842:	f001 fa57 	bl	8008cf4 <_localeconv_r>
 8007846:	f8d0 a000 	ldr.w	sl, [r0]
 800784a:	4650      	mov	r0, sl
 800784c:	f7f8 fce0 	bl	8000210 <strlen>
 8007850:	2300      	movs	r3, #0
 8007852:	930a      	str	r3, [sp, #40]	; 0x28
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	9305      	str	r3, [sp, #20]
 8007858:	f8d8 3000 	ldr.w	r3, [r8]
 800785c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007860:	3307      	adds	r3, #7
 8007862:	f023 0307 	bic.w	r3, r3, #7
 8007866:	f103 0208 	add.w	r2, r3, #8
 800786a:	f8c8 2000 	str.w	r2, [r8]
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007876:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800787a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800787e:	9307      	str	r3, [sp, #28]
 8007880:	f8cd 8018 	str.w	r8, [sp, #24]
 8007884:	ee08 0a10 	vmov	s16, r0
 8007888:	4b9f      	ldr	r3, [pc, #636]	; (8007b08 <_printf_float+0x2dc>)
 800788a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800788e:	f04f 32ff 	mov.w	r2, #4294967295
 8007892:	f7f9 f96b 	bl	8000b6c <__aeabi_dcmpun>
 8007896:	bb88      	cbnz	r0, 80078fc <_printf_float+0xd0>
 8007898:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800789c:	4b9a      	ldr	r3, [pc, #616]	; (8007b08 <_printf_float+0x2dc>)
 800789e:	f04f 32ff 	mov.w	r2, #4294967295
 80078a2:	f7f9 f945 	bl	8000b30 <__aeabi_dcmple>
 80078a6:	bb48      	cbnz	r0, 80078fc <_printf_float+0xd0>
 80078a8:	2200      	movs	r2, #0
 80078aa:	2300      	movs	r3, #0
 80078ac:	4640      	mov	r0, r8
 80078ae:	4649      	mov	r1, r9
 80078b0:	f7f9 f934 	bl	8000b1c <__aeabi_dcmplt>
 80078b4:	b110      	cbz	r0, 80078bc <_printf_float+0x90>
 80078b6:	232d      	movs	r3, #45	; 0x2d
 80078b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078bc:	4b93      	ldr	r3, [pc, #588]	; (8007b0c <_printf_float+0x2e0>)
 80078be:	4894      	ldr	r0, [pc, #592]	; (8007b10 <_printf_float+0x2e4>)
 80078c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80078c4:	bf94      	ite	ls
 80078c6:	4698      	movls	r8, r3
 80078c8:	4680      	movhi	r8, r0
 80078ca:	2303      	movs	r3, #3
 80078cc:	6123      	str	r3, [r4, #16]
 80078ce:	9b05      	ldr	r3, [sp, #20]
 80078d0:	f023 0204 	bic.w	r2, r3, #4
 80078d4:	6022      	str	r2, [r4, #0]
 80078d6:	f04f 0900 	mov.w	r9, #0
 80078da:	9700      	str	r7, [sp, #0]
 80078dc:	4633      	mov	r3, r6
 80078de:	aa0b      	add	r2, sp, #44	; 0x2c
 80078e0:	4621      	mov	r1, r4
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 f9d8 	bl	8007c98 <_printf_common>
 80078e8:	3001      	adds	r0, #1
 80078ea:	f040 8090 	bne.w	8007a0e <_printf_float+0x1e2>
 80078ee:	f04f 30ff 	mov.w	r0, #4294967295
 80078f2:	b00d      	add	sp, #52	; 0x34
 80078f4:	ecbd 8b02 	vpop	{d8}
 80078f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078fc:	4642      	mov	r2, r8
 80078fe:	464b      	mov	r3, r9
 8007900:	4640      	mov	r0, r8
 8007902:	4649      	mov	r1, r9
 8007904:	f7f9 f932 	bl	8000b6c <__aeabi_dcmpun>
 8007908:	b140      	cbz	r0, 800791c <_printf_float+0xf0>
 800790a:	464b      	mov	r3, r9
 800790c:	2b00      	cmp	r3, #0
 800790e:	bfbc      	itt	lt
 8007910:	232d      	movlt	r3, #45	; 0x2d
 8007912:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007916:	487f      	ldr	r0, [pc, #508]	; (8007b14 <_printf_float+0x2e8>)
 8007918:	4b7f      	ldr	r3, [pc, #508]	; (8007b18 <_printf_float+0x2ec>)
 800791a:	e7d1      	b.n	80078c0 <_printf_float+0x94>
 800791c:	6863      	ldr	r3, [r4, #4]
 800791e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007922:	9206      	str	r2, [sp, #24]
 8007924:	1c5a      	adds	r2, r3, #1
 8007926:	d13f      	bne.n	80079a8 <_printf_float+0x17c>
 8007928:	2306      	movs	r3, #6
 800792a:	6063      	str	r3, [r4, #4]
 800792c:	9b05      	ldr	r3, [sp, #20]
 800792e:	6861      	ldr	r1, [r4, #4]
 8007930:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007934:	2300      	movs	r3, #0
 8007936:	9303      	str	r3, [sp, #12]
 8007938:	ab0a      	add	r3, sp, #40	; 0x28
 800793a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800793e:	ab09      	add	r3, sp, #36	; 0x24
 8007940:	ec49 8b10 	vmov	d0, r8, r9
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	6022      	str	r2, [r4, #0]
 8007948:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800794c:	4628      	mov	r0, r5
 800794e:	f7ff fecd 	bl	80076ec <__cvt>
 8007952:	9b06      	ldr	r3, [sp, #24]
 8007954:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007956:	2b47      	cmp	r3, #71	; 0x47
 8007958:	4680      	mov	r8, r0
 800795a:	d108      	bne.n	800796e <_printf_float+0x142>
 800795c:	1cc8      	adds	r0, r1, #3
 800795e:	db02      	blt.n	8007966 <_printf_float+0x13a>
 8007960:	6863      	ldr	r3, [r4, #4]
 8007962:	4299      	cmp	r1, r3
 8007964:	dd41      	ble.n	80079ea <_printf_float+0x1be>
 8007966:	f1ab 0b02 	sub.w	fp, fp, #2
 800796a:	fa5f fb8b 	uxtb.w	fp, fp
 800796e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007972:	d820      	bhi.n	80079b6 <_printf_float+0x18a>
 8007974:	3901      	subs	r1, #1
 8007976:	465a      	mov	r2, fp
 8007978:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800797c:	9109      	str	r1, [sp, #36]	; 0x24
 800797e:	f7ff ff17 	bl	80077b0 <__exponent>
 8007982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007984:	1813      	adds	r3, r2, r0
 8007986:	2a01      	cmp	r2, #1
 8007988:	4681      	mov	r9, r0
 800798a:	6123      	str	r3, [r4, #16]
 800798c:	dc02      	bgt.n	8007994 <_printf_float+0x168>
 800798e:	6822      	ldr	r2, [r4, #0]
 8007990:	07d2      	lsls	r2, r2, #31
 8007992:	d501      	bpl.n	8007998 <_printf_float+0x16c>
 8007994:	3301      	adds	r3, #1
 8007996:	6123      	str	r3, [r4, #16]
 8007998:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800799c:	2b00      	cmp	r3, #0
 800799e:	d09c      	beq.n	80078da <_printf_float+0xae>
 80079a0:	232d      	movs	r3, #45	; 0x2d
 80079a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a6:	e798      	b.n	80078da <_printf_float+0xae>
 80079a8:	9a06      	ldr	r2, [sp, #24]
 80079aa:	2a47      	cmp	r2, #71	; 0x47
 80079ac:	d1be      	bne.n	800792c <_printf_float+0x100>
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1bc      	bne.n	800792c <_printf_float+0x100>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e7b9      	b.n	800792a <_printf_float+0xfe>
 80079b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80079ba:	d118      	bne.n	80079ee <_printf_float+0x1c2>
 80079bc:	2900      	cmp	r1, #0
 80079be:	6863      	ldr	r3, [r4, #4]
 80079c0:	dd0b      	ble.n	80079da <_printf_float+0x1ae>
 80079c2:	6121      	str	r1, [r4, #16]
 80079c4:	b913      	cbnz	r3, 80079cc <_printf_float+0x1a0>
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	07d0      	lsls	r0, r2, #31
 80079ca:	d502      	bpl.n	80079d2 <_printf_float+0x1a6>
 80079cc:	3301      	adds	r3, #1
 80079ce:	440b      	add	r3, r1
 80079d0:	6123      	str	r3, [r4, #16]
 80079d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80079d4:	f04f 0900 	mov.w	r9, #0
 80079d8:	e7de      	b.n	8007998 <_printf_float+0x16c>
 80079da:	b913      	cbnz	r3, 80079e2 <_printf_float+0x1b6>
 80079dc:	6822      	ldr	r2, [r4, #0]
 80079de:	07d2      	lsls	r2, r2, #31
 80079e0:	d501      	bpl.n	80079e6 <_printf_float+0x1ba>
 80079e2:	3302      	adds	r3, #2
 80079e4:	e7f4      	b.n	80079d0 <_printf_float+0x1a4>
 80079e6:	2301      	movs	r3, #1
 80079e8:	e7f2      	b.n	80079d0 <_printf_float+0x1a4>
 80079ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f0:	4299      	cmp	r1, r3
 80079f2:	db05      	blt.n	8007a00 <_printf_float+0x1d4>
 80079f4:	6823      	ldr	r3, [r4, #0]
 80079f6:	6121      	str	r1, [r4, #16]
 80079f8:	07d8      	lsls	r0, r3, #31
 80079fa:	d5ea      	bpl.n	80079d2 <_printf_float+0x1a6>
 80079fc:	1c4b      	adds	r3, r1, #1
 80079fe:	e7e7      	b.n	80079d0 <_printf_float+0x1a4>
 8007a00:	2900      	cmp	r1, #0
 8007a02:	bfd4      	ite	le
 8007a04:	f1c1 0202 	rsble	r2, r1, #2
 8007a08:	2201      	movgt	r2, #1
 8007a0a:	4413      	add	r3, r2
 8007a0c:	e7e0      	b.n	80079d0 <_printf_float+0x1a4>
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	055a      	lsls	r2, r3, #21
 8007a12:	d407      	bmi.n	8007a24 <_printf_float+0x1f8>
 8007a14:	6923      	ldr	r3, [r4, #16]
 8007a16:	4642      	mov	r2, r8
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b8      	blx	r7
 8007a1e:	3001      	adds	r0, #1
 8007a20:	d12c      	bne.n	8007a7c <_printf_float+0x250>
 8007a22:	e764      	b.n	80078ee <_printf_float+0xc2>
 8007a24:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a28:	f240 80e0 	bls.w	8007bec <_printf_float+0x3c0>
 8007a2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a30:	2200      	movs	r2, #0
 8007a32:	2300      	movs	r3, #0
 8007a34:	f7f9 f868 	bl	8000b08 <__aeabi_dcmpeq>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	d034      	beq.n	8007aa6 <_printf_float+0x27a>
 8007a3c:	4a37      	ldr	r2, [pc, #220]	; (8007b1c <_printf_float+0x2f0>)
 8007a3e:	2301      	movs	r3, #1
 8007a40:	4631      	mov	r1, r6
 8007a42:	4628      	mov	r0, r5
 8007a44:	47b8      	blx	r7
 8007a46:	3001      	adds	r0, #1
 8007a48:	f43f af51 	beq.w	80078ee <_printf_float+0xc2>
 8007a4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a50:	429a      	cmp	r2, r3
 8007a52:	db02      	blt.n	8007a5a <_printf_float+0x22e>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	07d8      	lsls	r0, r3, #31
 8007a58:	d510      	bpl.n	8007a7c <_printf_float+0x250>
 8007a5a:	ee18 3a10 	vmov	r3, s16
 8007a5e:	4652      	mov	r2, sl
 8007a60:	4631      	mov	r1, r6
 8007a62:	4628      	mov	r0, r5
 8007a64:	47b8      	blx	r7
 8007a66:	3001      	adds	r0, #1
 8007a68:	f43f af41 	beq.w	80078ee <_printf_float+0xc2>
 8007a6c:	f04f 0800 	mov.w	r8, #0
 8007a70:	f104 091a 	add.w	r9, r4, #26
 8007a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a76:	3b01      	subs	r3, #1
 8007a78:	4543      	cmp	r3, r8
 8007a7a:	dc09      	bgt.n	8007a90 <_printf_float+0x264>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	079b      	lsls	r3, r3, #30
 8007a80:	f100 8105 	bmi.w	8007c8e <_printf_float+0x462>
 8007a84:	68e0      	ldr	r0, [r4, #12]
 8007a86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a88:	4298      	cmp	r0, r3
 8007a8a:	bfb8      	it	lt
 8007a8c:	4618      	movlt	r0, r3
 8007a8e:	e730      	b.n	80078f2 <_printf_float+0xc6>
 8007a90:	2301      	movs	r3, #1
 8007a92:	464a      	mov	r2, r9
 8007a94:	4631      	mov	r1, r6
 8007a96:	4628      	mov	r0, r5
 8007a98:	47b8      	blx	r7
 8007a9a:	3001      	adds	r0, #1
 8007a9c:	f43f af27 	beq.w	80078ee <_printf_float+0xc2>
 8007aa0:	f108 0801 	add.w	r8, r8, #1
 8007aa4:	e7e6      	b.n	8007a74 <_printf_float+0x248>
 8007aa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	dc39      	bgt.n	8007b20 <_printf_float+0x2f4>
 8007aac:	4a1b      	ldr	r2, [pc, #108]	; (8007b1c <_printf_float+0x2f0>)
 8007aae:	2301      	movs	r3, #1
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	47b8      	blx	r7
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f43f af19 	beq.w	80078ee <_printf_float+0xc2>
 8007abc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	d102      	bne.n	8007aca <_printf_float+0x29e>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	07d9      	lsls	r1, r3, #31
 8007ac8:	d5d8      	bpl.n	8007a7c <_printf_float+0x250>
 8007aca:	ee18 3a10 	vmov	r3, s16
 8007ace:	4652      	mov	r2, sl
 8007ad0:	4631      	mov	r1, r6
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	47b8      	blx	r7
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	f43f af09 	beq.w	80078ee <_printf_float+0xc2>
 8007adc:	f04f 0900 	mov.w	r9, #0
 8007ae0:	f104 0a1a 	add.w	sl, r4, #26
 8007ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae6:	425b      	negs	r3, r3
 8007ae8:	454b      	cmp	r3, r9
 8007aea:	dc01      	bgt.n	8007af0 <_printf_float+0x2c4>
 8007aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aee:	e792      	b.n	8007a16 <_printf_float+0x1ea>
 8007af0:	2301      	movs	r3, #1
 8007af2:	4652      	mov	r2, sl
 8007af4:	4631      	mov	r1, r6
 8007af6:	4628      	mov	r0, r5
 8007af8:	47b8      	blx	r7
 8007afa:	3001      	adds	r0, #1
 8007afc:	f43f aef7 	beq.w	80078ee <_printf_float+0xc2>
 8007b00:	f109 0901 	add.w	r9, r9, #1
 8007b04:	e7ee      	b.n	8007ae4 <_printf_float+0x2b8>
 8007b06:	bf00      	nop
 8007b08:	7fefffff 	.word	0x7fefffff
 8007b0c:	0800ba2c 	.word	0x0800ba2c
 8007b10:	0800ba30 	.word	0x0800ba30
 8007b14:	0800ba38 	.word	0x0800ba38
 8007b18:	0800ba34 	.word	0x0800ba34
 8007b1c:	0800ba3c 	.word	0x0800ba3c
 8007b20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b24:	429a      	cmp	r2, r3
 8007b26:	bfa8      	it	ge
 8007b28:	461a      	movge	r2, r3
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	4691      	mov	r9, r2
 8007b2e:	dc37      	bgt.n	8007ba0 <_printf_float+0x374>
 8007b30:	f04f 0b00 	mov.w	fp, #0
 8007b34:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b38:	f104 021a 	add.w	r2, r4, #26
 8007b3c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b3e:	9305      	str	r3, [sp, #20]
 8007b40:	eba3 0309 	sub.w	r3, r3, r9
 8007b44:	455b      	cmp	r3, fp
 8007b46:	dc33      	bgt.n	8007bb0 <_printf_float+0x384>
 8007b48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	db3b      	blt.n	8007bc8 <_printf_float+0x39c>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	07da      	lsls	r2, r3, #31
 8007b54:	d438      	bmi.n	8007bc8 <_printf_float+0x39c>
 8007b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b58:	9a05      	ldr	r2, [sp, #20]
 8007b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b5c:	1a9a      	subs	r2, r3, r2
 8007b5e:	eba3 0901 	sub.w	r9, r3, r1
 8007b62:	4591      	cmp	r9, r2
 8007b64:	bfa8      	it	ge
 8007b66:	4691      	movge	r9, r2
 8007b68:	f1b9 0f00 	cmp.w	r9, #0
 8007b6c:	dc35      	bgt.n	8007bda <_printf_float+0x3ae>
 8007b6e:	f04f 0800 	mov.w	r8, #0
 8007b72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b76:	f104 0a1a 	add.w	sl, r4, #26
 8007b7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b7e:	1a9b      	subs	r3, r3, r2
 8007b80:	eba3 0309 	sub.w	r3, r3, r9
 8007b84:	4543      	cmp	r3, r8
 8007b86:	f77f af79 	ble.w	8007a7c <_printf_float+0x250>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	4652      	mov	r2, sl
 8007b8e:	4631      	mov	r1, r6
 8007b90:	4628      	mov	r0, r5
 8007b92:	47b8      	blx	r7
 8007b94:	3001      	adds	r0, #1
 8007b96:	f43f aeaa 	beq.w	80078ee <_printf_float+0xc2>
 8007b9a:	f108 0801 	add.w	r8, r8, #1
 8007b9e:	e7ec      	b.n	8007b7a <_printf_float+0x34e>
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	4631      	mov	r1, r6
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	47b8      	blx	r7
 8007baa:	3001      	adds	r0, #1
 8007bac:	d1c0      	bne.n	8007b30 <_printf_float+0x304>
 8007bae:	e69e      	b.n	80078ee <_printf_float+0xc2>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	4631      	mov	r1, r6
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	9205      	str	r2, [sp, #20]
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f43f ae97 	beq.w	80078ee <_printf_float+0xc2>
 8007bc0:	9a05      	ldr	r2, [sp, #20]
 8007bc2:	f10b 0b01 	add.w	fp, fp, #1
 8007bc6:	e7b9      	b.n	8007b3c <_printf_float+0x310>
 8007bc8:	ee18 3a10 	vmov	r3, s16
 8007bcc:	4652      	mov	r2, sl
 8007bce:	4631      	mov	r1, r6
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	47b8      	blx	r7
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d1be      	bne.n	8007b56 <_printf_float+0x32a>
 8007bd8:	e689      	b.n	80078ee <_printf_float+0xc2>
 8007bda:	9a05      	ldr	r2, [sp, #20]
 8007bdc:	464b      	mov	r3, r9
 8007bde:	4442      	add	r2, r8
 8007be0:	4631      	mov	r1, r6
 8007be2:	4628      	mov	r0, r5
 8007be4:	47b8      	blx	r7
 8007be6:	3001      	adds	r0, #1
 8007be8:	d1c1      	bne.n	8007b6e <_printf_float+0x342>
 8007bea:	e680      	b.n	80078ee <_printf_float+0xc2>
 8007bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bee:	2a01      	cmp	r2, #1
 8007bf0:	dc01      	bgt.n	8007bf6 <_printf_float+0x3ca>
 8007bf2:	07db      	lsls	r3, r3, #31
 8007bf4:	d538      	bpl.n	8007c68 <_printf_float+0x43c>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b8      	blx	r7
 8007c00:	3001      	adds	r0, #1
 8007c02:	f43f ae74 	beq.w	80078ee <_printf_float+0xc2>
 8007c06:	ee18 3a10 	vmov	r3, s16
 8007c0a:	4652      	mov	r2, sl
 8007c0c:	4631      	mov	r1, r6
 8007c0e:	4628      	mov	r0, r5
 8007c10:	47b8      	blx	r7
 8007c12:	3001      	adds	r0, #1
 8007c14:	f43f ae6b 	beq.w	80078ee <_printf_float+0xc2>
 8007c18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f7f8 ff72 	bl	8000b08 <__aeabi_dcmpeq>
 8007c24:	b9d8      	cbnz	r0, 8007c5e <_printf_float+0x432>
 8007c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c28:	f108 0201 	add.w	r2, r8, #1
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4628      	mov	r0, r5
 8007c32:	47b8      	blx	r7
 8007c34:	3001      	adds	r0, #1
 8007c36:	d10e      	bne.n	8007c56 <_printf_float+0x42a>
 8007c38:	e659      	b.n	80078ee <_printf_float+0xc2>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	4652      	mov	r2, sl
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b8      	blx	r7
 8007c44:	3001      	adds	r0, #1
 8007c46:	f43f ae52 	beq.w	80078ee <_printf_float+0xc2>
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c50:	3b01      	subs	r3, #1
 8007c52:	4543      	cmp	r3, r8
 8007c54:	dcf1      	bgt.n	8007c3a <_printf_float+0x40e>
 8007c56:	464b      	mov	r3, r9
 8007c58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c5c:	e6dc      	b.n	8007a18 <_printf_float+0x1ec>
 8007c5e:	f04f 0800 	mov.w	r8, #0
 8007c62:	f104 0a1a 	add.w	sl, r4, #26
 8007c66:	e7f2      	b.n	8007c4e <_printf_float+0x422>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	4642      	mov	r2, r8
 8007c6c:	e7df      	b.n	8007c2e <_printf_float+0x402>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	464a      	mov	r2, r9
 8007c72:	4631      	mov	r1, r6
 8007c74:	4628      	mov	r0, r5
 8007c76:	47b8      	blx	r7
 8007c78:	3001      	adds	r0, #1
 8007c7a:	f43f ae38 	beq.w	80078ee <_printf_float+0xc2>
 8007c7e:	f108 0801 	add.w	r8, r8, #1
 8007c82:	68e3      	ldr	r3, [r4, #12]
 8007c84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c86:	1a5b      	subs	r3, r3, r1
 8007c88:	4543      	cmp	r3, r8
 8007c8a:	dcf0      	bgt.n	8007c6e <_printf_float+0x442>
 8007c8c:	e6fa      	b.n	8007a84 <_printf_float+0x258>
 8007c8e:	f04f 0800 	mov.w	r8, #0
 8007c92:	f104 0919 	add.w	r9, r4, #25
 8007c96:	e7f4      	b.n	8007c82 <_printf_float+0x456>

08007c98 <_printf_common>:
 8007c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c9c:	4616      	mov	r6, r2
 8007c9e:	4699      	mov	r9, r3
 8007ca0:	688a      	ldr	r2, [r1, #8]
 8007ca2:	690b      	ldr	r3, [r1, #16]
 8007ca4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	bfb8      	it	lt
 8007cac:	4613      	movlt	r3, r2
 8007cae:	6033      	str	r3, [r6, #0]
 8007cb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cb4:	4607      	mov	r7, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	b10a      	cbz	r2, 8007cbe <_printf_common+0x26>
 8007cba:	3301      	adds	r3, #1
 8007cbc:	6033      	str	r3, [r6, #0]
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	0699      	lsls	r1, r3, #26
 8007cc2:	bf42      	ittt	mi
 8007cc4:	6833      	ldrmi	r3, [r6, #0]
 8007cc6:	3302      	addmi	r3, #2
 8007cc8:	6033      	strmi	r3, [r6, #0]
 8007cca:	6825      	ldr	r5, [r4, #0]
 8007ccc:	f015 0506 	ands.w	r5, r5, #6
 8007cd0:	d106      	bne.n	8007ce0 <_printf_common+0x48>
 8007cd2:	f104 0a19 	add.w	sl, r4, #25
 8007cd6:	68e3      	ldr	r3, [r4, #12]
 8007cd8:	6832      	ldr	r2, [r6, #0]
 8007cda:	1a9b      	subs	r3, r3, r2
 8007cdc:	42ab      	cmp	r3, r5
 8007cde:	dc26      	bgt.n	8007d2e <_printf_common+0x96>
 8007ce0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ce4:	1e13      	subs	r3, r2, #0
 8007ce6:	6822      	ldr	r2, [r4, #0]
 8007ce8:	bf18      	it	ne
 8007cea:	2301      	movne	r3, #1
 8007cec:	0692      	lsls	r2, r2, #26
 8007cee:	d42b      	bmi.n	8007d48 <_printf_common+0xb0>
 8007cf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	47c0      	blx	r8
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	d01e      	beq.n	8007d3c <_printf_common+0xa4>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	68e5      	ldr	r5, [r4, #12]
 8007d02:	6832      	ldr	r2, [r6, #0]
 8007d04:	f003 0306 	and.w	r3, r3, #6
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	bf08      	it	eq
 8007d0c:	1aad      	subeq	r5, r5, r2
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	6922      	ldr	r2, [r4, #16]
 8007d12:	bf0c      	ite	eq
 8007d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d18:	2500      	movne	r5, #0
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	bfc4      	itt	gt
 8007d1e:	1a9b      	subgt	r3, r3, r2
 8007d20:	18ed      	addgt	r5, r5, r3
 8007d22:	2600      	movs	r6, #0
 8007d24:	341a      	adds	r4, #26
 8007d26:	42b5      	cmp	r5, r6
 8007d28:	d11a      	bne.n	8007d60 <_printf_common+0xc8>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	e008      	b.n	8007d40 <_printf_common+0xa8>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	4652      	mov	r2, sl
 8007d32:	4649      	mov	r1, r9
 8007d34:	4638      	mov	r0, r7
 8007d36:	47c0      	blx	r8
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d103      	bne.n	8007d44 <_printf_common+0xac>
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d44:	3501      	adds	r5, #1
 8007d46:	e7c6      	b.n	8007cd6 <_printf_common+0x3e>
 8007d48:	18e1      	adds	r1, r4, r3
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	2030      	movs	r0, #48	; 0x30
 8007d4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d52:	4422      	add	r2, r4
 8007d54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	e7c7      	b.n	8007cf0 <_printf_common+0x58>
 8007d60:	2301      	movs	r3, #1
 8007d62:	4622      	mov	r2, r4
 8007d64:	4649      	mov	r1, r9
 8007d66:	4638      	mov	r0, r7
 8007d68:	47c0      	blx	r8
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	d0e6      	beq.n	8007d3c <_printf_common+0xa4>
 8007d6e:	3601      	adds	r6, #1
 8007d70:	e7d9      	b.n	8007d26 <_printf_common+0x8e>
	...

08007d74 <_printf_i>:
 8007d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d78:	7e0f      	ldrb	r7, [r1, #24]
 8007d7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d7c:	2f78      	cmp	r7, #120	; 0x78
 8007d7e:	4691      	mov	r9, r2
 8007d80:	4680      	mov	r8, r0
 8007d82:	460c      	mov	r4, r1
 8007d84:	469a      	mov	sl, r3
 8007d86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d8a:	d807      	bhi.n	8007d9c <_printf_i+0x28>
 8007d8c:	2f62      	cmp	r7, #98	; 0x62
 8007d8e:	d80a      	bhi.n	8007da6 <_printf_i+0x32>
 8007d90:	2f00      	cmp	r7, #0
 8007d92:	f000 80d8 	beq.w	8007f46 <_printf_i+0x1d2>
 8007d96:	2f58      	cmp	r7, #88	; 0x58
 8007d98:	f000 80a3 	beq.w	8007ee2 <_printf_i+0x16e>
 8007d9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007da0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007da4:	e03a      	b.n	8007e1c <_printf_i+0xa8>
 8007da6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007daa:	2b15      	cmp	r3, #21
 8007dac:	d8f6      	bhi.n	8007d9c <_printf_i+0x28>
 8007dae:	a101      	add	r1, pc, #4	; (adr r1, 8007db4 <_printf_i+0x40>)
 8007db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007db4:	08007e0d 	.word	0x08007e0d
 8007db8:	08007e21 	.word	0x08007e21
 8007dbc:	08007d9d 	.word	0x08007d9d
 8007dc0:	08007d9d 	.word	0x08007d9d
 8007dc4:	08007d9d 	.word	0x08007d9d
 8007dc8:	08007d9d 	.word	0x08007d9d
 8007dcc:	08007e21 	.word	0x08007e21
 8007dd0:	08007d9d 	.word	0x08007d9d
 8007dd4:	08007d9d 	.word	0x08007d9d
 8007dd8:	08007d9d 	.word	0x08007d9d
 8007ddc:	08007d9d 	.word	0x08007d9d
 8007de0:	08007f2d 	.word	0x08007f2d
 8007de4:	08007e51 	.word	0x08007e51
 8007de8:	08007f0f 	.word	0x08007f0f
 8007dec:	08007d9d 	.word	0x08007d9d
 8007df0:	08007d9d 	.word	0x08007d9d
 8007df4:	08007f4f 	.word	0x08007f4f
 8007df8:	08007d9d 	.word	0x08007d9d
 8007dfc:	08007e51 	.word	0x08007e51
 8007e00:	08007d9d 	.word	0x08007d9d
 8007e04:	08007d9d 	.word	0x08007d9d
 8007e08:	08007f17 	.word	0x08007f17
 8007e0c:	682b      	ldr	r3, [r5, #0]
 8007e0e:	1d1a      	adds	r2, r3, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	602a      	str	r2, [r5, #0]
 8007e14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e0a3      	b.n	8007f68 <_printf_i+0x1f4>
 8007e20:	6820      	ldr	r0, [r4, #0]
 8007e22:	6829      	ldr	r1, [r5, #0]
 8007e24:	0606      	lsls	r6, r0, #24
 8007e26:	f101 0304 	add.w	r3, r1, #4
 8007e2a:	d50a      	bpl.n	8007e42 <_printf_i+0xce>
 8007e2c:	680e      	ldr	r6, [r1, #0]
 8007e2e:	602b      	str	r3, [r5, #0]
 8007e30:	2e00      	cmp	r6, #0
 8007e32:	da03      	bge.n	8007e3c <_printf_i+0xc8>
 8007e34:	232d      	movs	r3, #45	; 0x2d
 8007e36:	4276      	negs	r6, r6
 8007e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e3c:	485e      	ldr	r0, [pc, #376]	; (8007fb8 <_printf_i+0x244>)
 8007e3e:	230a      	movs	r3, #10
 8007e40:	e019      	b.n	8007e76 <_printf_i+0x102>
 8007e42:	680e      	ldr	r6, [r1, #0]
 8007e44:	602b      	str	r3, [r5, #0]
 8007e46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e4a:	bf18      	it	ne
 8007e4c:	b236      	sxthne	r6, r6
 8007e4e:	e7ef      	b.n	8007e30 <_printf_i+0xbc>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	6820      	ldr	r0, [r4, #0]
 8007e54:	1d19      	adds	r1, r3, #4
 8007e56:	6029      	str	r1, [r5, #0]
 8007e58:	0601      	lsls	r1, r0, #24
 8007e5a:	d501      	bpl.n	8007e60 <_printf_i+0xec>
 8007e5c:	681e      	ldr	r6, [r3, #0]
 8007e5e:	e002      	b.n	8007e66 <_printf_i+0xf2>
 8007e60:	0646      	lsls	r6, r0, #25
 8007e62:	d5fb      	bpl.n	8007e5c <_printf_i+0xe8>
 8007e64:	881e      	ldrh	r6, [r3, #0]
 8007e66:	4854      	ldr	r0, [pc, #336]	; (8007fb8 <_printf_i+0x244>)
 8007e68:	2f6f      	cmp	r7, #111	; 0x6f
 8007e6a:	bf0c      	ite	eq
 8007e6c:	2308      	moveq	r3, #8
 8007e6e:	230a      	movne	r3, #10
 8007e70:	2100      	movs	r1, #0
 8007e72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e76:	6865      	ldr	r5, [r4, #4]
 8007e78:	60a5      	str	r5, [r4, #8]
 8007e7a:	2d00      	cmp	r5, #0
 8007e7c:	bfa2      	ittt	ge
 8007e7e:	6821      	ldrge	r1, [r4, #0]
 8007e80:	f021 0104 	bicge.w	r1, r1, #4
 8007e84:	6021      	strge	r1, [r4, #0]
 8007e86:	b90e      	cbnz	r6, 8007e8c <_printf_i+0x118>
 8007e88:	2d00      	cmp	r5, #0
 8007e8a:	d04d      	beq.n	8007f28 <_printf_i+0x1b4>
 8007e8c:	4615      	mov	r5, r2
 8007e8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e92:	fb03 6711 	mls	r7, r3, r1, r6
 8007e96:	5dc7      	ldrb	r7, [r0, r7]
 8007e98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e9c:	4637      	mov	r7, r6
 8007e9e:	42bb      	cmp	r3, r7
 8007ea0:	460e      	mov	r6, r1
 8007ea2:	d9f4      	bls.n	8007e8e <_printf_i+0x11a>
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d10b      	bne.n	8007ec0 <_printf_i+0x14c>
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	07de      	lsls	r6, r3, #31
 8007eac:	d508      	bpl.n	8007ec0 <_printf_i+0x14c>
 8007eae:	6923      	ldr	r3, [r4, #16]
 8007eb0:	6861      	ldr	r1, [r4, #4]
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	bfde      	ittt	le
 8007eb6:	2330      	movle	r3, #48	; 0x30
 8007eb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ebc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ec0:	1b52      	subs	r2, r2, r5
 8007ec2:	6122      	str	r2, [r4, #16]
 8007ec4:	f8cd a000 	str.w	sl, [sp]
 8007ec8:	464b      	mov	r3, r9
 8007eca:	aa03      	add	r2, sp, #12
 8007ecc:	4621      	mov	r1, r4
 8007ece:	4640      	mov	r0, r8
 8007ed0:	f7ff fee2 	bl	8007c98 <_printf_common>
 8007ed4:	3001      	adds	r0, #1
 8007ed6:	d14c      	bne.n	8007f72 <_printf_i+0x1fe>
 8007ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8007edc:	b004      	add	sp, #16
 8007ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee2:	4835      	ldr	r0, [pc, #212]	; (8007fb8 <_printf_i+0x244>)
 8007ee4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ee8:	6829      	ldr	r1, [r5, #0]
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ef0:	6029      	str	r1, [r5, #0]
 8007ef2:	061d      	lsls	r5, r3, #24
 8007ef4:	d514      	bpl.n	8007f20 <_printf_i+0x1ac>
 8007ef6:	07df      	lsls	r7, r3, #31
 8007ef8:	bf44      	itt	mi
 8007efa:	f043 0320 	orrmi.w	r3, r3, #32
 8007efe:	6023      	strmi	r3, [r4, #0]
 8007f00:	b91e      	cbnz	r6, 8007f0a <_printf_i+0x196>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	f023 0320 	bic.w	r3, r3, #32
 8007f08:	6023      	str	r3, [r4, #0]
 8007f0a:	2310      	movs	r3, #16
 8007f0c:	e7b0      	b.n	8007e70 <_printf_i+0xfc>
 8007f0e:	6823      	ldr	r3, [r4, #0]
 8007f10:	f043 0320 	orr.w	r3, r3, #32
 8007f14:	6023      	str	r3, [r4, #0]
 8007f16:	2378      	movs	r3, #120	; 0x78
 8007f18:	4828      	ldr	r0, [pc, #160]	; (8007fbc <_printf_i+0x248>)
 8007f1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f1e:	e7e3      	b.n	8007ee8 <_printf_i+0x174>
 8007f20:	0659      	lsls	r1, r3, #25
 8007f22:	bf48      	it	mi
 8007f24:	b2b6      	uxthmi	r6, r6
 8007f26:	e7e6      	b.n	8007ef6 <_printf_i+0x182>
 8007f28:	4615      	mov	r5, r2
 8007f2a:	e7bb      	b.n	8007ea4 <_printf_i+0x130>
 8007f2c:	682b      	ldr	r3, [r5, #0]
 8007f2e:	6826      	ldr	r6, [r4, #0]
 8007f30:	6961      	ldr	r1, [r4, #20]
 8007f32:	1d18      	adds	r0, r3, #4
 8007f34:	6028      	str	r0, [r5, #0]
 8007f36:	0635      	lsls	r5, r6, #24
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	d501      	bpl.n	8007f40 <_printf_i+0x1cc>
 8007f3c:	6019      	str	r1, [r3, #0]
 8007f3e:	e002      	b.n	8007f46 <_printf_i+0x1d2>
 8007f40:	0670      	lsls	r0, r6, #25
 8007f42:	d5fb      	bpl.n	8007f3c <_printf_i+0x1c8>
 8007f44:	8019      	strh	r1, [r3, #0]
 8007f46:	2300      	movs	r3, #0
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	4615      	mov	r5, r2
 8007f4c:	e7ba      	b.n	8007ec4 <_printf_i+0x150>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	1d1a      	adds	r2, r3, #4
 8007f52:	602a      	str	r2, [r5, #0]
 8007f54:	681d      	ldr	r5, [r3, #0]
 8007f56:	6862      	ldr	r2, [r4, #4]
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f7f8 f960 	bl	8000220 <memchr>
 8007f60:	b108      	cbz	r0, 8007f66 <_printf_i+0x1f2>
 8007f62:	1b40      	subs	r0, r0, r5
 8007f64:	6060      	str	r0, [r4, #4]
 8007f66:	6863      	ldr	r3, [r4, #4]
 8007f68:	6123      	str	r3, [r4, #16]
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f70:	e7a8      	b.n	8007ec4 <_printf_i+0x150>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	462a      	mov	r2, r5
 8007f76:	4649      	mov	r1, r9
 8007f78:	4640      	mov	r0, r8
 8007f7a:	47d0      	blx	sl
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d0ab      	beq.n	8007ed8 <_printf_i+0x164>
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	079b      	lsls	r3, r3, #30
 8007f84:	d413      	bmi.n	8007fae <_printf_i+0x23a>
 8007f86:	68e0      	ldr	r0, [r4, #12]
 8007f88:	9b03      	ldr	r3, [sp, #12]
 8007f8a:	4298      	cmp	r0, r3
 8007f8c:	bfb8      	it	lt
 8007f8e:	4618      	movlt	r0, r3
 8007f90:	e7a4      	b.n	8007edc <_printf_i+0x168>
 8007f92:	2301      	movs	r3, #1
 8007f94:	4632      	mov	r2, r6
 8007f96:	4649      	mov	r1, r9
 8007f98:	4640      	mov	r0, r8
 8007f9a:	47d0      	blx	sl
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d09b      	beq.n	8007ed8 <_printf_i+0x164>
 8007fa0:	3501      	adds	r5, #1
 8007fa2:	68e3      	ldr	r3, [r4, #12]
 8007fa4:	9903      	ldr	r1, [sp, #12]
 8007fa6:	1a5b      	subs	r3, r3, r1
 8007fa8:	42ab      	cmp	r3, r5
 8007faa:	dcf2      	bgt.n	8007f92 <_printf_i+0x21e>
 8007fac:	e7eb      	b.n	8007f86 <_printf_i+0x212>
 8007fae:	2500      	movs	r5, #0
 8007fb0:	f104 0619 	add.w	r6, r4, #25
 8007fb4:	e7f5      	b.n	8007fa2 <_printf_i+0x22e>
 8007fb6:	bf00      	nop
 8007fb8:	0800ba3e 	.word	0x0800ba3e
 8007fbc:	0800ba4f 	.word	0x0800ba4f

08007fc0 <siprintf>:
 8007fc0:	b40e      	push	{r1, r2, r3}
 8007fc2:	b500      	push	{lr}
 8007fc4:	b09c      	sub	sp, #112	; 0x70
 8007fc6:	ab1d      	add	r3, sp, #116	; 0x74
 8007fc8:	9002      	str	r0, [sp, #8]
 8007fca:	9006      	str	r0, [sp, #24]
 8007fcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fd0:	4809      	ldr	r0, [pc, #36]	; (8007ff8 <siprintf+0x38>)
 8007fd2:	9107      	str	r1, [sp, #28]
 8007fd4:	9104      	str	r1, [sp, #16]
 8007fd6:	4909      	ldr	r1, [pc, #36]	; (8007ffc <siprintf+0x3c>)
 8007fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fdc:	9105      	str	r1, [sp, #20]
 8007fde:	6800      	ldr	r0, [r0, #0]
 8007fe0:	9301      	str	r3, [sp, #4]
 8007fe2:	a902      	add	r1, sp, #8
 8007fe4:	f001 fb68 	bl	80096b8 <_svfiprintf_r>
 8007fe8:	9b02      	ldr	r3, [sp, #8]
 8007fea:	2200      	movs	r2, #0
 8007fec:	701a      	strb	r2, [r3, #0]
 8007fee:	b01c      	add	sp, #112	; 0x70
 8007ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ff4:	b003      	add	sp, #12
 8007ff6:	4770      	bx	lr
 8007ff8:	20000018 	.word	0x20000018
 8007ffc:	ffff0208 	.word	0xffff0208

08008000 <quorem>:
 8008000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	6903      	ldr	r3, [r0, #16]
 8008006:	690c      	ldr	r4, [r1, #16]
 8008008:	42a3      	cmp	r3, r4
 800800a:	4607      	mov	r7, r0
 800800c:	f2c0 8081 	blt.w	8008112 <quorem+0x112>
 8008010:	3c01      	subs	r4, #1
 8008012:	f101 0814 	add.w	r8, r1, #20
 8008016:	f100 0514 	add.w	r5, r0, #20
 800801a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800801e:	9301      	str	r3, [sp, #4]
 8008020:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008028:	3301      	adds	r3, #1
 800802a:	429a      	cmp	r2, r3
 800802c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008030:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008034:	fbb2 f6f3 	udiv	r6, r2, r3
 8008038:	d331      	bcc.n	800809e <quorem+0x9e>
 800803a:	f04f 0e00 	mov.w	lr, #0
 800803e:	4640      	mov	r0, r8
 8008040:	46ac      	mov	ip, r5
 8008042:	46f2      	mov	sl, lr
 8008044:	f850 2b04 	ldr.w	r2, [r0], #4
 8008048:	b293      	uxth	r3, r2
 800804a:	fb06 e303 	mla	r3, r6, r3, lr
 800804e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008052:	b29b      	uxth	r3, r3
 8008054:	ebaa 0303 	sub.w	r3, sl, r3
 8008058:	f8dc a000 	ldr.w	sl, [ip]
 800805c:	0c12      	lsrs	r2, r2, #16
 800805e:	fa13 f38a 	uxtah	r3, r3, sl
 8008062:	fb06 e202 	mla	r2, r6, r2, lr
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	9b00      	ldr	r3, [sp, #0]
 800806a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800806e:	b292      	uxth	r2, r2
 8008070:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008078:	f8bd 3000 	ldrh.w	r3, [sp]
 800807c:	4581      	cmp	r9, r0
 800807e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008082:	f84c 3b04 	str.w	r3, [ip], #4
 8008086:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800808a:	d2db      	bcs.n	8008044 <quorem+0x44>
 800808c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008090:	b92b      	cbnz	r3, 800809e <quorem+0x9e>
 8008092:	9b01      	ldr	r3, [sp, #4]
 8008094:	3b04      	subs	r3, #4
 8008096:	429d      	cmp	r5, r3
 8008098:	461a      	mov	r2, r3
 800809a:	d32e      	bcc.n	80080fa <quorem+0xfa>
 800809c:	613c      	str	r4, [r7, #16]
 800809e:	4638      	mov	r0, r7
 80080a0:	f001 f8b6 	bl	8009210 <__mcmp>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	db24      	blt.n	80080f2 <quorem+0xf2>
 80080a8:	3601      	adds	r6, #1
 80080aa:	4628      	mov	r0, r5
 80080ac:	f04f 0c00 	mov.w	ip, #0
 80080b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80080b4:	f8d0 e000 	ldr.w	lr, [r0]
 80080b8:	b293      	uxth	r3, r2
 80080ba:	ebac 0303 	sub.w	r3, ip, r3
 80080be:	0c12      	lsrs	r2, r2, #16
 80080c0:	fa13 f38e 	uxtah	r3, r3, lr
 80080c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080d2:	45c1      	cmp	r9, r8
 80080d4:	f840 3b04 	str.w	r3, [r0], #4
 80080d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080dc:	d2e8      	bcs.n	80080b0 <quorem+0xb0>
 80080de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080e6:	b922      	cbnz	r2, 80080f2 <quorem+0xf2>
 80080e8:	3b04      	subs	r3, #4
 80080ea:	429d      	cmp	r5, r3
 80080ec:	461a      	mov	r2, r3
 80080ee:	d30a      	bcc.n	8008106 <quorem+0x106>
 80080f0:	613c      	str	r4, [r7, #16]
 80080f2:	4630      	mov	r0, r6
 80080f4:	b003      	add	sp, #12
 80080f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fa:	6812      	ldr	r2, [r2, #0]
 80080fc:	3b04      	subs	r3, #4
 80080fe:	2a00      	cmp	r2, #0
 8008100:	d1cc      	bne.n	800809c <quorem+0x9c>
 8008102:	3c01      	subs	r4, #1
 8008104:	e7c7      	b.n	8008096 <quorem+0x96>
 8008106:	6812      	ldr	r2, [r2, #0]
 8008108:	3b04      	subs	r3, #4
 800810a:	2a00      	cmp	r2, #0
 800810c:	d1f0      	bne.n	80080f0 <quorem+0xf0>
 800810e:	3c01      	subs	r4, #1
 8008110:	e7eb      	b.n	80080ea <quorem+0xea>
 8008112:	2000      	movs	r0, #0
 8008114:	e7ee      	b.n	80080f4 <quorem+0xf4>
	...

08008118 <_dtoa_r>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	ed2d 8b04 	vpush	{d8-d9}
 8008120:	ec57 6b10 	vmov	r6, r7, d0
 8008124:	b093      	sub	sp, #76	; 0x4c
 8008126:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800812c:	9106      	str	r1, [sp, #24]
 800812e:	ee10 aa10 	vmov	sl, s0
 8008132:	4604      	mov	r4, r0
 8008134:	9209      	str	r2, [sp, #36]	; 0x24
 8008136:	930c      	str	r3, [sp, #48]	; 0x30
 8008138:	46bb      	mov	fp, r7
 800813a:	b975      	cbnz	r5, 800815a <_dtoa_r+0x42>
 800813c:	2010      	movs	r0, #16
 800813e:	f000 fddd 	bl	8008cfc <malloc>
 8008142:	4602      	mov	r2, r0
 8008144:	6260      	str	r0, [r4, #36]	; 0x24
 8008146:	b920      	cbnz	r0, 8008152 <_dtoa_r+0x3a>
 8008148:	4ba7      	ldr	r3, [pc, #668]	; (80083e8 <_dtoa_r+0x2d0>)
 800814a:	21ea      	movs	r1, #234	; 0xea
 800814c:	48a7      	ldr	r0, [pc, #668]	; (80083ec <_dtoa_r+0x2d4>)
 800814e:	f001 fbc3 	bl	80098d8 <__assert_func>
 8008152:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008156:	6005      	str	r5, [r0, #0]
 8008158:	60c5      	str	r5, [r0, #12]
 800815a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800815c:	6819      	ldr	r1, [r3, #0]
 800815e:	b151      	cbz	r1, 8008176 <_dtoa_r+0x5e>
 8008160:	685a      	ldr	r2, [r3, #4]
 8008162:	604a      	str	r2, [r1, #4]
 8008164:	2301      	movs	r3, #1
 8008166:	4093      	lsls	r3, r2
 8008168:	608b      	str	r3, [r1, #8]
 800816a:	4620      	mov	r0, r4
 800816c:	f000 fe0e 	bl	8008d8c <_Bfree>
 8008170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008172:	2200      	movs	r2, #0
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	1e3b      	subs	r3, r7, #0
 8008178:	bfaa      	itet	ge
 800817a:	2300      	movge	r3, #0
 800817c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008180:	f8c8 3000 	strge.w	r3, [r8]
 8008184:	4b9a      	ldr	r3, [pc, #616]	; (80083f0 <_dtoa_r+0x2d8>)
 8008186:	bfbc      	itt	lt
 8008188:	2201      	movlt	r2, #1
 800818a:	f8c8 2000 	strlt.w	r2, [r8]
 800818e:	ea33 030b 	bics.w	r3, r3, fp
 8008192:	d11b      	bne.n	80081cc <_dtoa_r+0xb4>
 8008194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008196:	f242 730f 	movw	r3, #9999	; 0x270f
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80081a0:	4333      	orrs	r3, r6
 80081a2:	f000 8592 	beq.w	8008cca <_dtoa_r+0xbb2>
 80081a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081a8:	b963      	cbnz	r3, 80081c4 <_dtoa_r+0xac>
 80081aa:	4b92      	ldr	r3, [pc, #584]	; (80083f4 <_dtoa_r+0x2dc>)
 80081ac:	e022      	b.n	80081f4 <_dtoa_r+0xdc>
 80081ae:	4b92      	ldr	r3, [pc, #584]	; (80083f8 <_dtoa_r+0x2e0>)
 80081b0:	9301      	str	r3, [sp, #4]
 80081b2:	3308      	adds	r3, #8
 80081b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081b6:	6013      	str	r3, [r2, #0]
 80081b8:	9801      	ldr	r0, [sp, #4]
 80081ba:	b013      	add	sp, #76	; 0x4c
 80081bc:	ecbd 8b04 	vpop	{d8-d9}
 80081c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c4:	4b8b      	ldr	r3, [pc, #556]	; (80083f4 <_dtoa_r+0x2dc>)
 80081c6:	9301      	str	r3, [sp, #4]
 80081c8:	3303      	adds	r3, #3
 80081ca:	e7f3      	b.n	80081b4 <_dtoa_r+0x9c>
 80081cc:	2200      	movs	r2, #0
 80081ce:	2300      	movs	r3, #0
 80081d0:	4650      	mov	r0, sl
 80081d2:	4659      	mov	r1, fp
 80081d4:	f7f8 fc98 	bl	8000b08 <__aeabi_dcmpeq>
 80081d8:	ec4b ab19 	vmov	d9, sl, fp
 80081dc:	4680      	mov	r8, r0
 80081de:	b158      	cbz	r0, 80081f8 <_dtoa_r+0xe0>
 80081e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081e2:	2301      	movs	r3, #1
 80081e4:	6013      	str	r3, [r2, #0]
 80081e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 856b 	beq.w	8008cc4 <_dtoa_r+0xbac>
 80081ee:	4883      	ldr	r0, [pc, #524]	; (80083fc <_dtoa_r+0x2e4>)
 80081f0:	6018      	str	r0, [r3, #0]
 80081f2:	1e43      	subs	r3, r0, #1
 80081f4:	9301      	str	r3, [sp, #4]
 80081f6:	e7df      	b.n	80081b8 <_dtoa_r+0xa0>
 80081f8:	ec4b ab10 	vmov	d0, sl, fp
 80081fc:	aa10      	add	r2, sp, #64	; 0x40
 80081fe:	a911      	add	r1, sp, #68	; 0x44
 8008200:	4620      	mov	r0, r4
 8008202:	f001 f8ab 	bl	800935c <__d2b>
 8008206:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800820a:	ee08 0a10 	vmov	s16, r0
 800820e:	2d00      	cmp	r5, #0
 8008210:	f000 8084 	beq.w	800831c <_dtoa_r+0x204>
 8008214:	ee19 3a90 	vmov	r3, s19
 8008218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800821c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008220:	4656      	mov	r6, sl
 8008222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800822a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800822e:	4b74      	ldr	r3, [pc, #464]	; (8008400 <_dtoa_r+0x2e8>)
 8008230:	2200      	movs	r2, #0
 8008232:	4630      	mov	r0, r6
 8008234:	4639      	mov	r1, r7
 8008236:	f7f8 f847 	bl	80002c8 <__aeabi_dsub>
 800823a:	a365      	add	r3, pc, #404	; (adr r3, 80083d0 <_dtoa_r+0x2b8>)
 800823c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008240:	f7f8 f9fa 	bl	8000638 <__aeabi_dmul>
 8008244:	a364      	add	r3, pc, #400	; (adr r3, 80083d8 <_dtoa_r+0x2c0>)
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	f7f8 f83f 	bl	80002cc <__adddf3>
 800824e:	4606      	mov	r6, r0
 8008250:	4628      	mov	r0, r5
 8008252:	460f      	mov	r7, r1
 8008254:	f7f8 f986 	bl	8000564 <__aeabi_i2d>
 8008258:	a361      	add	r3, pc, #388	; (adr r3, 80083e0 <_dtoa_r+0x2c8>)
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	f7f8 f9eb 	bl	8000638 <__aeabi_dmul>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4630      	mov	r0, r6
 8008268:	4639      	mov	r1, r7
 800826a:	f7f8 f82f 	bl	80002cc <__adddf3>
 800826e:	4606      	mov	r6, r0
 8008270:	460f      	mov	r7, r1
 8008272:	f7f8 fc91 	bl	8000b98 <__aeabi_d2iz>
 8008276:	2200      	movs	r2, #0
 8008278:	9000      	str	r0, [sp, #0]
 800827a:	2300      	movs	r3, #0
 800827c:	4630      	mov	r0, r6
 800827e:	4639      	mov	r1, r7
 8008280:	f7f8 fc4c 	bl	8000b1c <__aeabi_dcmplt>
 8008284:	b150      	cbz	r0, 800829c <_dtoa_r+0x184>
 8008286:	9800      	ldr	r0, [sp, #0]
 8008288:	f7f8 f96c 	bl	8000564 <__aeabi_i2d>
 800828c:	4632      	mov	r2, r6
 800828e:	463b      	mov	r3, r7
 8008290:	f7f8 fc3a 	bl	8000b08 <__aeabi_dcmpeq>
 8008294:	b910      	cbnz	r0, 800829c <_dtoa_r+0x184>
 8008296:	9b00      	ldr	r3, [sp, #0]
 8008298:	3b01      	subs	r3, #1
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	9b00      	ldr	r3, [sp, #0]
 800829e:	2b16      	cmp	r3, #22
 80082a0:	d85a      	bhi.n	8008358 <_dtoa_r+0x240>
 80082a2:	9a00      	ldr	r2, [sp, #0]
 80082a4:	4b57      	ldr	r3, [pc, #348]	; (8008404 <_dtoa_r+0x2ec>)
 80082a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	ec51 0b19 	vmov	r0, r1, d9
 80082b2:	f7f8 fc33 	bl	8000b1c <__aeabi_dcmplt>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d050      	beq.n	800835c <_dtoa_r+0x244>
 80082ba:	9b00      	ldr	r3, [sp, #0]
 80082bc:	3b01      	subs	r3, #1
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	2300      	movs	r3, #0
 80082c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80082c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082c6:	1b5d      	subs	r5, r3, r5
 80082c8:	1e6b      	subs	r3, r5, #1
 80082ca:	9305      	str	r3, [sp, #20]
 80082cc:	bf45      	ittet	mi
 80082ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80082d2:	9304      	strmi	r3, [sp, #16]
 80082d4:	2300      	movpl	r3, #0
 80082d6:	2300      	movmi	r3, #0
 80082d8:	bf4c      	ite	mi
 80082da:	9305      	strmi	r3, [sp, #20]
 80082dc:	9304      	strpl	r3, [sp, #16]
 80082de:	9b00      	ldr	r3, [sp, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	db3d      	blt.n	8008360 <_dtoa_r+0x248>
 80082e4:	9b05      	ldr	r3, [sp, #20]
 80082e6:	9a00      	ldr	r2, [sp, #0]
 80082e8:	920a      	str	r2, [sp, #40]	; 0x28
 80082ea:	4413      	add	r3, r2
 80082ec:	9305      	str	r3, [sp, #20]
 80082ee:	2300      	movs	r3, #0
 80082f0:	9307      	str	r3, [sp, #28]
 80082f2:	9b06      	ldr	r3, [sp, #24]
 80082f4:	2b09      	cmp	r3, #9
 80082f6:	f200 8089 	bhi.w	800840c <_dtoa_r+0x2f4>
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	bfc4      	itt	gt
 80082fe:	3b04      	subgt	r3, #4
 8008300:	9306      	strgt	r3, [sp, #24]
 8008302:	9b06      	ldr	r3, [sp, #24]
 8008304:	f1a3 0302 	sub.w	r3, r3, #2
 8008308:	bfcc      	ite	gt
 800830a:	2500      	movgt	r5, #0
 800830c:	2501      	movle	r5, #1
 800830e:	2b03      	cmp	r3, #3
 8008310:	f200 8087 	bhi.w	8008422 <_dtoa_r+0x30a>
 8008314:	e8df f003 	tbb	[pc, r3]
 8008318:	59383a2d 	.word	0x59383a2d
 800831c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008320:	441d      	add	r5, r3
 8008322:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008326:	2b20      	cmp	r3, #32
 8008328:	bfc1      	itttt	gt
 800832a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800832e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008332:	fa0b f303 	lslgt.w	r3, fp, r3
 8008336:	fa26 f000 	lsrgt.w	r0, r6, r0
 800833a:	bfda      	itte	le
 800833c:	f1c3 0320 	rsble	r3, r3, #32
 8008340:	fa06 f003 	lslle.w	r0, r6, r3
 8008344:	4318      	orrgt	r0, r3
 8008346:	f7f8 f8fd 	bl	8000544 <__aeabi_ui2d>
 800834a:	2301      	movs	r3, #1
 800834c:	4606      	mov	r6, r0
 800834e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008352:	3d01      	subs	r5, #1
 8008354:	930e      	str	r3, [sp, #56]	; 0x38
 8008356:	e76a      	b.n	800822e <_dtoa_r+0x116>
 8008358:	2301      	movs	r3, #1
 800835a:	e7b2      	b.n	80082c2 <_dtoa_r+0x1aa>
 800835c:	900b      	str	r0, [sp, #44]	; 0x2c
 800835e:	e7b1      	b.n	80082c4 <_dtoa_r+0x1ac>
 8008360:	9b04      	ldr	r3, [sp, #16]
 8008362:	9a00      	ldr	r2, [sp, #0]
 8008364:	1a9b      	subs	r3, r3, r2
 8008366:	9304      	str	r3, [sp, #16]
 8008368:	4253      	negs	r3, r2
 800836a:	9307      	str	r3, [sp, #28]
 800836c:	2300      	movs	r3, #0
 800836e:	930a      	str	r3, [sp, #40]	; 0x28
 8008370:	e7bf      	b.n	80082f2 <_dtoa_r+0x1da>
 8008372:	2300      	movs	r3, #0
 8008374:	9308      	str	r3, [sp, #32]
 8008376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008378:	2b00      	cmp	r3, #0
 800837a:	dc55      	bgt.n	8008428 <_dtoa_r+0x310>
 800837c:	2301      	movs	r3, #1
 800837e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008382:	461a      	mov	r2, r3
 8008384:	9209      	str	r2, [sp, #36]	; 0x24
 8008386:	e00c      	b.n	80083a2 <_dtoa_r+0x28a>
 8008388:	2301      	movs	r3, #1
 800838a:	e7f3      	b.n	8008374 <_dtoa_r+0x25c>
 800838c:	2300      	movs	r3, #0
 800838e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008390:	9308      	str	r3, [sp, #32]
 8008392:	9b00      	ldr	r3, [sp, #0]
 8008394:	4413      	add	r3, r2
 8008396:	9302      	str	r3, [sp, #8]
 8008398:	3301      	adds	r3, #1
 800839a:	2b01      	cmp	r3, #1
 800839c:	9303      	str	r3, [sp, #12]
 800839e:	bfb8      	it	lt
 80083a0:	2301      	movlt	r3, #1
 80083a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80083a4:	2200      	movs	r2, #0
 80083a6:	6042      	str	r2, [r0, #4]
 80083a8:	2204      	movs	r2, #4
 80083aa:	f102 0614 	add.w	r6, r2, #20
 80083ae:	429e      	cmp	r6, r3
 80083b0:	6841      	ldr	r1, [r0, #4]
 80083b2:	d93d      	bls.n	8008430 <_dtoa_r+0x318>
 80083b4:	4620      	mov	r0, r4
 80083b6:	f000 fca9 	bl	8008d0c <_Balloc>
 80083ba:	9001      	str	r0, [sp, #4]
 80083bc:	2800      	cmp	r0, #0
 80083be:	d13b      	bne.n	8008438 <_dtoa_r+0x320>
 80083c0:	4b11      	ldr	r3, [pc, #68]	; (8008408 <_dtoa_r+0x2f0>)
 80083c2:	4602      	mov	r2, r0
 80083c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083c8:	e6c0      	b.n	800814c <_dtoa_r+0x34>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e7df      	b.n	800838e <_dtoa_r+0x276>
 80083ce:	bf00      	nop
 80083d0:	636f4361 	.word	0x636f4361
 80083d4:	3fd287a7 	.word	0x3fd287a7
 80083d8:	8b60c8b3 	.word	0x8b60c8b3
 80083dc:	3fc68a28 	.word	0x3fc68a28
 80083e0:	509f79fb 	.word	0x509f79fb
 80083e4:	3fd34413 	.word	0x3fd34413
 80083e8:	0800ba6d 	.word	0x0800ba6d
 80083ec:	0800ba84 	.word	0x0800ba84
 80083f0:	7ff00000 	.word	0x7ff00000
 80083f4:	0800ba69 	.word	0x0800ba69
 80083f8:	0800ba60 	.word	0x0800ba60
 80083fc:	0800ba3d 	.word	0x0800ba3d
 8008400:	3ff80000 	.word	0x3ff80000
 8008404:	0800bb78 	.word	0x0800bb78
 8008408:	0800badf 	.word	0x0800badf
 800840c:	2501      	movs	r5, #1
 800840e:	2300      	movs	r3, #0
 8008410:	9306      	str	r3, [sp, #24]
 8008412:	9508      	str	r5, [sp, #32]
 8008414:	f04f 33ff 	mov.w	r3, #4294967295
 8008418:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800841c:	2200      	movs	r2, #0
 800841e:	2312      	movs	r3, #18
 8008420:	e7b0      	b.n	8008384 <_dtoa_r+0x26c>
 8008422:	2301      	movs	r3, #1
 8008424:	9308      	str	r3, [sp, #32]
 8008426:	e7f5      	b.n	8008414 <_dtoa_r+0x2fc>
 8008428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800842e:	e7b8      	b.n	80083a2 <_dtoa_r+0x28a>
 8008430:	3101      	adds	r1, #1
 8008432:	6041      	str	r1, [r0, #4]
 8008434:	0052      	lsls	r2, r2, #1
 8008436:	e7b8      	b.n	80083aa <_dtoa_r+0x292>
 8008438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800843a:	9a01      	ldr	r2, [sp, #4]
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	2b0e      	cmp	r3, #14
 8008442:	f200 809d 	bhi.w	8008580 <_dtoa_r+0x468>
 8008446:	2d00      	cmp	r5, #0
 8008448:	f000 809a 	beq.w	8008580 <_dtoa_r+0x468>
 800844c:	9b00      	ldr	r3, [sp, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	dd32      	ble.n	80084b8 <_dtoa_r+0x3a0>
 8008452:	4ab7      	ldr	r2, [pc, #732]	; (8008730 <_dtoa_r+0x618>)
 8008454:	f003 030f 	and.w	r3, r3, #15
 8008458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800845c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008460:	9b00      	ldr	r3, [sp, #0]
 8008462:	05d8      	lsls	r0, r3, #23
 8008464:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008468:	d516      	bpl.n	8008498 <_dtoa_r+0x380>
 800846a:	4bb2      	ldr	r3, [pc, #712]	; (8008734 <_dtoa_r+0x61c>)
 800846c:	ec51 0b19 	vmov	r0, r1, d9
 8008470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008474:	f7f8 fa0a 	bl	800088c <__aeabi_ddiv>
 8008478:	f007 070f 	and.w	r7, r7, #15
 800847c:	4682      	mov	sl, r0
 800847e:	468b      	mov	fp, r1
 8008480:	2503      	movs	r5, #3
 8008482:	4eac      	ldr	r6, [pc, #688]	; (8008734 <_dtoa_r+0x61c>)
 8008484:	b957      	cbnz	r7, 800849c <_dtoa_r+0x384>
 8008486:	4642      	mov	r2, r8
 8008488:	464b      	mov	r3, r9
 800848a:	4650      	mov	r0, sl
 800848c:	4659      	mov	r1, fp
 800848e:	f7f8 f9fd 	bl	800088c <__aeabi_ddiv>
 8008492:	4682      	mov	sl, r0
 8008494:	468b      	mov	fp, r1
 8008496:	e028      	b.n	80084ea <_dtoa_r+0x3d2>
 8008498:	2502      	movs	r5, #2
 800849a:	e7f2      	b.n	8008482 <_dtoa_r+0x36a>
 800849c:	07f9      	lsls	r1, r7, #31
 800849e:	d508      	bpl.n	80084b2 <_dtoa_r+0x39a>
 80084a0:	4640      	mov	r0, r8
 80084a2:	4649      	mov	r1, r9
 80084a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084a8:	f7f8 f8c6 	bl	8000638 <__aeabi_dmul>
 80084ac:	3501      	adds	r5, #1
 80084ae:	4680      	mov	r8, r0
 80084b0:	4689      	mov	r9, r1
 80084b2:	107f      	asrs	r7, r7, #1
 80084b4:	3608      	adds	r6, #8
 80084b6:	e7e5      	b.n	8008484 <_dtoa_r+0x36c>
 80084b8:	f000 809b 	beq.w	80085f2 <_dtoa_r+0x4da>
 80084bc:	9b00      	ldr	r3, [sp, #0]
 80084be:	4f9d      	ldr	r7, [pc, #628]	; (8008734 <_dtoa_r+0x61c>)
 80084c0:	425e      	negs	r6, r3
 80084c2:	4b9b      	ldr	r3, [pc, #620]	; (8008730 <_dtoa_r+0x618>)
 80084c4:	f006 020f 	and.w	r2, r6, #15
 80084c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d0:	ec51 0b19 	vmov	r0, r1, d9
 80084d4:	f7f8 f8b0 	bl	8000638 <__aeabi_dmul>
 80084d8:	1136      	asrs	r6, r6, #4
 80084da:	4682      	mov	sl, r0
 80084dc:	468b      	mov	fp, r1
 80084de:	2300      	movs	r3, #0
 80084e0:	2502      	movs	r5, #2
 80084e2:	2e00      	cmp	r6, #0
 80084e4:	d17a      	bne.n	80085dc <_dtoa_r+0x4c4>
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1d3      	bne.n	8008492 <_dtoa_r+0x37a>
 80084ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 8082 	beq.w	80085f6 <_dtoa_r+0x4de>
 80084f2:	4b91      	ldr	r3, [pc, #580]	; (8008738 <_dtoa_r+0x620>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	4650      	mov	r0, sl
 80084f8:	4659      	mov	r1, fp
 80084fa:	f7f8 fb0f 	bl	8000b1c <__aeabi_dcmplt>
 80084fe:	2800      	cmp	r0, #0
 8008500:	d079      	beq.n	80085f6 <_dtoa_r+0x4de>
 8008502:	9b03      	ldr	r3, [sp, #12]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d076      	beq.n	80085f6 <_dtoa_r+0x4de>
 8008508:	9b02      	ldr	r3, [sp, #8]
 800850a:	2b00      	cmp	r3, #0
 800850c:	dd36      	ble.n	800857c <_dtoa_r+0x464>
 800850e:	9b00      	ldr	r3, [sp, #0]
 8008510:	4650      	mov	r0, sl
 8008512:	4659      	mov	r1, fp
 8008514:	1e5f      	subs	r7, r3, #1
 8008516:	2200      	movs	r2, #0
 8008518:	4b88      	ldr	r3, [pc, #544]	; (800873c <_dtoa_r+0x624>)
 800851a:	f7f8 f88d 	bl	8000638 <__aeabi_dmul>
 800851e:	9e02      	ldr	r6, [sp, #8]
 8008520:	4682      	mov	sl, r0
 8008522:	468b      	mov	fp, r1
 8008524:	3501      	adds	r5, #1
 8008526:	4628      	mov	r0, r5
 8008528:	f7f8 f81c 	bl	8000564 <__aeabi_i2d>
 800852c:	4652      	mov	r2, sl
 800852e:	465b      	mov	r3, fp
 8008530:	f7f8 f882 	bl	8000638 <__aeabi_dmul>
 8008534:	4b82      	ldr	r3, [pc, #520]	; (8008740 <_dtoa_r+0x628>)
 8008536:	2200      	movs	r2, #0
 8008538:	f7f7 fec8 	bl	80002cc <__adddf3>
 800853c:	46d0      	mov	r8, sl
 800853e:	46d9      	mov	r9, fp
 8008540:	4682      	mov	sl, r0
 8008542:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008546:	2e00      	cmp	r6, #0
 8008548:	d158      	bne.n	80085fc <_dtoa_r+0x4e4>
 800854a:	4b7e      	ldr	r3, [pc, #504]	; (8008744 <_dtoa_r+0x62c>)
 800854c:	2200      	movs	r2, #0
 800854e:	4640      	mov	r0, r8
 8008550:	4649      	mov	r1, r9
 8008552:	f7f7 feb9 	bl	80002c8 <__aeabi_dsub>
 8008556:	4652      	mov	r2, sl
 8008558:	465b      	mov	r3, fp
 800855a:	4680      	mov	r8, r0
 800855c:	4689      	mov	r9, r1
 800855e:	f7f8 fafb 	bl	8000b58 <__aeabi_dcmpgt>
 8008562:	2800      	cmp	r0, #0
 8008564:	f040 8295 	bne.w	8008a92 <_dtoa_r+0x97a>
 8008568:	4652      	mov	r2, sl
 800856a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800856e:	4640      	mov	r0, r8
 8008570:	4649      	mov	r1, r9
 8008572:	f7f8 fad3 	bl	8000b1c <__aeabi_dcmplt>
 8008576:	2800      	cmp	r0, #0
 8008578:	f040 8289 	bne.w	8008a8e <_dtoa_r+0x976>
 800857c:	ec5b ab19 	vmov	sl, fp, d9
 8008580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008582:	2b00      	cmp	r3, #0
 8008584:	f2c0 8148 	blt.w	8008818 <_dtoa_r+0x700>
 8008588:	9a00      	ldr	r2, [sp, #0]
 800858a:	2a0e      	cmp	r2, #14
 800858c:	f300 8144 	bgt.w	8008818 <_dtoa_r+0x700>
 8008590:	4b67      	ldr	r3, [pc, #412]	; (8008730 <_dtoa_r+0x618>)
 8008592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008596:	e9d3 8900 	ldrd	r8, r9, [r3]
 800859a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800859c:	2b00      	cmp	r3, #0
 800859e:	f280 80d5 	bge.w	800874c <_dtoa_r+0x634>
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f300 80d1 	bgt.w	800874c <_dtoa_r+0x634>
 80085aa:	f040 826f 	bne.w	8008a8c <_dtoa_r+0x974>
 80085ae:	4b65      	ldr	r3, [pc, #404]	; (8008744 <_dtoa_r+0x62c>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	4640      	mov	r0, r8
 80085b4:	4649      	mov	r1, r9
 80085b6:	f7f8 f83f 	bl	8000638 <__aeabi_dmul>
 80085ba:	4652      	mov	r2, sl
 80085bc:	465b      	mov	r3, fp
 80085be:	f7f8 fac1 	bl	8000b44 <__aeabi_dcmpge>
 80085c2:	9e03      	ldr	r6, [sp, #12]
 80085c4:	4637      	mov	r7, r6
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f040 8245 	bne.w	8008a56 <_dtoa_r+0x93e>
 80085cc:	9d01      	ldr	r5, [sp, #4]
 80085ce:	2331      	movs	r3, #49	; 0x31
 80085d0:	f805 3b01 	strb.w	r3, [r5], #1
 80085d4:	9b00      	ldr	r3, [sp, #0]
 80085d6:	3301      	adds	r3, #1
 80085d8:	9300      	str	r3, [sp, #0]
 80085da:	e240      	b.n	8008a5e <_dtoa_r+0x946>
 80085dc:	07f2      	lsls	r2, r6, #31
 80085de:	d505      	bpl.n	80085ec <_dtoa_r+0x4d4>
 80085e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085e4:	f7f8 f828 	bl	8000638 <__aeabi_dmul>
 80085e8:	3501      	adds	r5, #1
 80085ea:	2301      	movs	r3, #1
 80085ec:	1076      	asrs	r6, r6, #1
 80085ee:	3708      	adds	r7, #8
 80085f0:	e777      	b.n	80084e2 <_dtoa_r+0x3ca>
 80085f2:	2502      	movs	r5, #2
 80085f4:	e779      	b.n	80084ea <_dtoa_r+0x3d2>
 80085f6:	9f00      	ldr	r7, [sp, #0]
 80085f8:	9e03      	ldr	r6, [sp, #12]
 80085fa:	e794      	b.n	8008526 <_dtoa_r+0x40e>
 80085fc:	9901      	ldr	r1, [sp, #4]
 80085fe:	4b4c      	ldr	r3, [pc, #304]	; (8008730 <_dtoa_r+0x618>)
 8008600:	4431      	add	r1, r6
 8008602:	910d      	str	r1, [sp, #52]	; 0x34
 8008604:	9908      	ldr	r1, [sp, #32]
 8008606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800860a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800860e:	2900      	cmp	r1, #0
 8008610:	d043      	beq.n	800869a <_dtoa_r+0x582>
 8008612:	494d      	ldr	r1, [pc, #308]	; (8008748 <_dtoa_r+0x630>)
 8008614:	2000      	movs	r0, #0
 8008616:	f7f8 f939 	bl	800088c <__aeabi_ddiv>
 800861a:	4652      	mov	r2, sl
 800861c:	465b      	mov	r3, fp
 800861e:	f7f7 fe53 	bl	80002c8 <__aeabi_dsub>
 8008622:	9d01      	ldr	r5, [sp, #4]
 8008624:	4682      	mov	sl, r0
 8008626:	468b      	mov	fp, r1
 8008628:	4649      	mov	r1, r9
 800862a:	4640      	mov	r0, r8
 800862c:	f7f8 fab4 	bl	8000b98 <__aeabi_d2iz>
 8008630:	4606      	mov	r6, r0
 8008632:	f7f7 ff97 	bl	8000564 <__aeabi_i2d>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	4640      	mov	r0, r8
 800863c:	4649      	mov	r1, r9
 800863e:	f7f7 fe43 	bl	80002c8 <__aeabi_dsub>
 8008642:	3630      	adds	r6, #48	; 0x30
 8008644:	f805 6b01 	strb.w	r6, [r5], #1
 8008648:	4652      	mov	r2, sl
 800864a:	465b      	mov	r3, fp
 800864c:	4680      	mov	r8, r0
 800864e:	4689      	mov	r9, r1
 8008650:	f7f8 fa64 	bl	8000b1c <__aeabi_dcmplt>
 8008654:	2800      	cmp	r0, #0
 8008656:	d163      	bne.n	8008720 <_dtoa_r+0x608>
 8008658:	4642      	mov	r2, r8
 800865a:	464b      	mov	r3, r9
 800865c:	4936      	ldr	r1, [pc, #216]	; (8008738 <_dtoa_r+0x620>)
 800865e:	2000      	movs	r0, #0
 8008660:	f7f7 fe32 	bl	80002c8 <__aeabi_dsub>
 8008664:	4652      	mov	r2, sl
 8008666:	465b      	mov	r3, fp
 8008668:	f7f8 fa58 	bl	8000b1c <__aeabi_dcmplt>
 800866c:	2800      	cmp	r0, #0
 800866e:	f040 80b5 	bne.w	80087dc <_dtoa_r+0x6c4>
 8008672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008674:	429d      	cmp	r5, r3
 8008676:	d081      	beq.n	800857c <_dtoa_r+0x464>
 8008678:	4b30      	ldr	r3, [pc, #192]	; (800873c <_dtoa_r+0x624>)
 800867a:	2200      	movs	r2, #0
 800867c:	4650      	mov	r0, sl
 800867e:	4659      	mov	r1, fp
 8008680:	f7f7 ffda 	bl	8000638 <__aeabi_dmul>
 8008684:	4b2d      	ldr	r3, [pc, #180]	; (800873c <_dtoa_r+0x624>)
 8008686:	4682      	mov	sl, r0
 8008688:	468b      	mov	fp, r1
 800868a:	4640      	mov	r0, r8
 800868c:	4649      	mov	r1, r9
 800868e:	2200      	movs	r2, #0
 8008690:	f7f7 ffd2 	bl	8000638 <__aeabi_dmul>
 8008694:	4680      	mov	r8, r0
 8008696:	4689      	mov	r9, r1
 8008698:	e7c6      	b.n	8008628 <_dtoa_r+0x510>
 800869a:	4650      	mov	r0, sl
 800869c:	4659      	mov	r1, fp
 800869e:	f7f7 ffcb 	bl	8000638 <__aeabi_dmul>
 80086a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086a4:	9d01      	ldr	r5, [sp, #4]
 80086a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80086a8:	4682      	mov	sl, r0
 80086aa:	468b      	mov	fp, r1
 80086ac:	4649      	mov	r1, r9
 80086ae:	4640      	mov	r0, r8
 80086b0:	f7f8 fa72 	bl	8000b98 <__aeabi_d2iz>
 80086b4:	4606      	mov	r6, r0
 80086b6:	f7f7 ff55 	bl	8000564 <__aeabi_i2d>
 80086ba:	3630      	adds	r6, #48	; 0x30
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4640      	mov	r0, r8
 80086c2:	4649      	mov	r1, r9
 80086c4:	f7f7 fe00 	bl	80002c8 <__aeabi_dsub>
 80086c8:	f805 6b01 	strb.w	r6, [r5], #1
 80086cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086ce:	429d      	cmp	r5, r3
 80086d0:	4680      	mov	r8, r0
 80086d2:	4689      	mov	r9, r1
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	d124      	bne.n	8008724 <_dtoa_r+0x60c>
 80086da:	4b1b      	ldr	r3, [pc, #108]	; (8008748 <_dtoa_r+0x630>)
 80086dc:	4650      	mov	r0, sl
 80086de:	4659      	mov	r1, fp
 80086e0:	f7f7 fdf4 	bl	80002cc <__adddf3>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4640      	mov	r0, r8
 80086ea:	4649      	mov	r1, r9
 80086ec:	f7f8 fa34 	bl	8000b58 <__aeabi_dcmpgt>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	d173      	bne.n	80087dc <_dtoa_r+0x6c4>
 80086f4:	4652      	mov	r2, sl
 80086f6:	465b      	mov	r3, fp
 80086f8:	4913      	ldr	r1, [pc, #76]	; (8008748 <_dtoa_r+0x630>)
 80086fa:	2000      	movs	r0, #0
 80086fc:	f7f7 fde4 	bl	80002c8 <__aeabi_dsub>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	4640      	mov	r0, r8
 8008706:	4649      	mov	r1, r9
 8008708:	f7f8 fa08 	bl	8000b1c <__aeabi_dcmplt>
 800870c:	2800      	cmp	r0, #0
 800870e:	f43f af35 	beq.w	800857c <_dtoa_r+0x464>
 8008712:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008714:	1e6b      	subs	r3, r5, #1
 8008716:	930f      	str	r3, [sp, #60]	; 0x3c
 8008718:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800871c:	2b30      	cmp	r3, #48	; 0x30
 800871e:	d0f8      	beq.n	8008712 <_dtoa_r+0x5fa>
 8008720:	9700      	str	r7, [sp, #0]
 8008722:	e049      	b.n	80087b8 <_dtoa_r+0x6a0>
 8008724:	4b05      	ldr	r3, [pc, #20]	; (800873c <_dtoa_r+0x624>)
 8008726:	f7f7 ff87 	bl	8000638 <__aeabi_dmul>
 800872a:	4680      	mov	r8, r0
 800872c:	4689      	mov	r9, r1
 800872e:	e7bd      	b.n	80086ac <_dtoa_r+0x594>
 8008730:	0800bb78 	.word	0x0800bb78
 8008734:	0800bb50 	.word	0x0800bb50
 8008738:	3ff00000 	.word	0x3ff00000
 800873c:	40240000 	.word	0x40240000
 8008740:	401c0000 	.word	0x401c0000
 8008744:	40140000 	.word	0x40140000
 8008748:	3fe00000 	.word	0x3fe00000
 800874c:	9d01      	ldr	r5, [sp, #4]
 800874e:	4656      	mov	r6, sl
 8008750:	465f      	mov	r7, fp
 8008752:	4642      	mov	r2, r8
 8008754:	464b      	mov	r3, r9
 8008756:	4630      	mov	r0, r6
 8008758:	4639      	mov	r1, r7
 800875a:	f7f8 f897 	bl	800088c <__aeabi_ddiv>
 800875e:	f7f8 fa1b 	bl	8000b98 <__aeabi_d2iz>
 8008762:	4682      	mov	sl, r0
 8008764:	f7f7 fefe 	bl	8000564 <__aeabi_i2d>
 8008768:	4642      	mov	r2, r8
 800876a:	464b      	mov	r3, r9
 800876c:	f7f7 ff64 	bl	8000638 <__aeabi_dmul>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4630      	mov	r0, r6
 8008776:	4639      	mov	r1, r7
 8008778:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800877c:	f7f7 fda4 	bl	80002c8 <__aeabi_dsub>
 8008780:	f805 6b01 	strb.w	r6, [r5], #1
 8008784:	9e01      	ldr	r6, [sp, #4]
 8008786:	9f03      	ldr	r7, [sp, #12]
 8008788:	1bae      	subs	r6, r5, r6
 800878a:	42b7      	cmp	r7, r6
 800878c:	4602      	mov	r2, r0
 800878e:	460b      	mov	r3, r1
 8008790:	d135      	bne.n	80087fe <_dtoa_r+0x6e6>
 8008792:	f7f7 fd9b 	bl	80002cc <__adddf3>
 8008796:	4642      	mov	r2, r8
 8008798:	464b      	mov	r3, r9
 800879a:	4606      	mov	r6, r0
 800879c:	460f      	mov	r7, r1
 800879e:	f7f8 f9db 	bl	8000b58 <__aeabi_dcmpgt>
 80087a2:	b9d0      	cbnz	r0, 80087da <_dtoa_r+0x6c2>
 80087a4:	4642      	mov	r2, r8
 80087a6:	464b      	mov	r3, r9
 80087a8:	4630      	mov	r0, r6
 80087aa:	4639      	mov	r1, r7
 80087ac:	f7f8 f9ac 	bl	8000b08 <__aeabi_dcmpeq>
 80087b0:	b110      	cbz	r0, 80087b8 <_dtoa_r+0x6a0>
 80087b2:	f01a 0f01 	tst.w	sl, #1
 80087b6:	d110      	bne.n	80087da <_dtoa_r+0x6c2>
 80087b8:	4620      	mov	r0, r4
 80087ba:	ee18 1a10 	vmov	r1, s16
 80087be:	f000 fae5 	bl	8008d8c <_Bfree>
 80087c2:	2300      	movs	r3, #0
 80087c4:	9800      	ldr	r0, [sp, #0]
 80087c6:	702b      	strb	r3, [r5, #0]
 80087c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ca:	3001      	adds	r0, #1
 80087cc:	6018      	str	r0, [r3, #0]
 80087ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f43f acf1 	beq.w	80081b8 <_dtoa_r+0xa0>
 80087d6:	601d      	str	r5, [r3, #0]
 80087d8:	e4ee      	b.n	80081b8 <_dtoa_r+0xa0>
 80087da:	9f00      	ldr	r7, [sp, #0]
 80087dc:	462b      	mov	r3, r5
 80087de:	461d      	mov	r5, r3
 80087e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087e4:	2a39      	cmp	r2, #57	; 0x39
 80087e6:	d106      	bne.n	80087f6 <_dtoa_r+0x6de>
 80087e8:	9a01      	ldr	r2, [sp, #4]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d1f7      	bne.n	80087de <_dtoa_r+0x6c6>
 80087ee:	9901      	ldr	r1, [sp, #4]
 80087f0:	2230      	movs	r2, #48	; 0x30
 80087f2:	3701      	adds	r7, #1
 80087f4:	700a      	strb	r2, [r1, #0]
 80087f6:	781a      	ldrb	r2, [r3, #0]
 80087f8:	3201      	adds	r2, #1
 80087fa:	701a      	strb	r2, [r3, #0]
 80087fc:	e790      	b.n	8008720 <_dtoa_r+0x608>
 80087fe:	4ba6      	ldr	r3, [pc, #664]	; (8008a98 <_dtoa_r+0x980>)
 8008800:	2200      	movs	r2, #0
 8008802:	f7f7 ff19 	bl	8000638 <__aeabi_dmul>
 8008806:	2200      	movs	r2, #0
 8008808:	2300      	movs	r3, #0
 800880a:	4606      	mov	r6, r0
 800880c:	460f      	mov	r7, r1
 800880e:	f7f8 f97b 	bl	8000b08 <__aeabi_dcmpeq>
 8008812:	2800      	cmp	r0, #0
 8008814:	d09d      	beq.n	8008752 <_dtoa_r+0x63a>
 8008816:	e7cf      	b.n	80087b8 <_dtoa_r+0x6a0>
 8008818:	9a08      	ldr	r2, [sp, #32]
 800881a:	2a00      	cmp	r2, #0
 800881c:	f000 80d7 	beq.w	80089ce <_dtoa_r+0x8b6>
 8008820:	9a06      	ldr	r2, [sp, #24]
 8008822:	2a01      	cmp	r2, #1
 8008824:	f300 80ba 	bgt.w	800899c <_dtoa_r+0x884>
 8008828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800882a:	2a00      	cmp	r2, #0
 800882c:	f000 80b2 	beq.w	8008994 <_dtoa_r+0x87c>
 8008830:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008834:	9e07      	ldr	r6, [sp, #28]
 8008836:	9d04      	ldr	r5, [sp, #16]
 8008838:	9a04      	ldr	r2, [sp, #16]
 800883a:	441a      	add	r2, r3
 800883c:	9204      	str	r2, [sp, #16]
 800883e:	9a05      	ldr	r2, [sp, #20]
 8008840:	2101      	movs	r1, #1
 8008842:	441a      	add	r2, r3
 8008844:	4620      	mov	r0, r4
 8008846:	9205      	str	r2, [sp, #20]
 8008848:	f000 fb58 	bl	8008efc <__i2b>
 800884c:	4607      	mov	r7, r0
 800884e:	2d00      	cmp	r5, #0
 8008850:	dd0c      	ble.n	800886c <_dtoa_r+0x754>
 8008852:	9b05      	ldr	r3, [sp, #20]
 8008854:	2b00      	cmp	r3, #0
 8008856:	dd09      	ble.n	800886c <_dtoa_r+0x754>
 8008858:	42ab      	cmp	r3, r5
 800885a:	9a04      	ldr	r2, [sp, #16]
 800885c:	bfa8      	it	ge
 800885e:	462b      	movge	r3, r5
 8008860:	1ad2      	subs	r2, r2, r3
 8008862:	9204      	str	r2, [sp, #16]
 8008864:	9a05      	ldr	r2, [sp, #20]
 8008866:	1aed      	subs	r5, r5, r3
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	9305      	str	r3, [sp, #20]
 800886c:	9b07      	ldr	r3, [sp, #28]
 800886e:	b31b      	cbz	r3, 80088b8 <_dtoa_r+0x7a0>
 8008870:	9b08      	ldr	r3, [sp, #32]
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 80af 	beq.w	80089d6 <_dtoa_r+0x8be>
 8008878:	2e00      	cmp	r6, #0
 800887a:	dd13      	ble.n	80088a4 <_dtoa_r+0x78c>
 800887c:	4639      	mov	r1, r7
 800887e:	4632      	mov	r2, r6
 8008880:	4620      	mov	r0, r4
 8008882:	f000 fbfb 	bl	800907c <__pow5mult>
 8008886:	ee18 2a10 	vmov	r2, s16
 800888a:	4601      	mov	r1, r0
 800888c:	4607      	mov	r7, r0
 800888e:	4620      	mov	r0, r4
 8008890:	f000 fb4a 	bl	8008f28 <__multiply>
 8008894:	ee18 1a10 	vmov	r1, s16
 8008898:	4680      	mov	r8, r0
 800889a:	4620      	mov	r0, r4
 800889c:	f000 fa76 	bl	8008d8c <_Bfree>
 80088a0:	ee08 8a10 	vmov	s16, r8
 80088a4:	9b07      	ldr	r3, [sp, #28]
 80088a6:	1b9a      	subs	r2, r3, r6
 80088a8:	d006      	beq.n	80088b8 <_dtoa_r+0x7a0>
 80088aa:	ee18 1a10 	vmov	r1, s16
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 fbe4 	bl	800907c <__pow5mult>
 80088b4:	ee08 0a10 	vmov	s16, r0
 80088b8:	2101      	movs	r1, #1
 80088ba:	4620      	mov	r0, r4
 80088bc:	f000 fb1e 	bl	8008efc <__i2b>
 80088c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	4606      	mov	r6, r0
 80088c6:	f340 8088 	ble.w	80089da <_dtoa_r+0x8c2>
 80088ca:	461a      	mov	r2, r3
 80088cc:	4601      	mov	r1, r0
 80088ce:	4620      	mov	r0, r4
 80088d0:	f000 fbd4 	bl	800907c <__pow5mult>
 80088d4:	9b06      	ldr	r3, [sp, #24]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	4606      	mov	r6, r0
 80088da:	f340 8081 	ble.w	80089e0 <_dtoa_r+0x8c8>
 80088de:	f04f 0800 	mov.w	r8, #0
 80088e2:	6933      	ldr	r3, [r6, #16]
 80088e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088e8:	6918      	ldr	r0, [r3, #16]
 80088ea:	f000 fab7 	bl	8008e5c <__hi0bits>
 80088ee:	f1c0 0020 	rsb	r0, r0, #32
 80088f2:	9b05      	ldr	r3, [sp, #20]
 80088f4:	4418      	add	r0, r3
 80088f6:	f010 001f 	ands.w	r0, r0, #31
 80088fa:	f000 8092 	beq.w	8008a22 <_dtoa_r+0x90a>
 80088fe:	f1c0 0320 	rsb	r3, r0, #32
 8008902:	2b04      	cmp	r3, #4
 8008904:	f340 808a 	ble.w	8008a1c <_dtoa_r+0x904>
 8008908:	f1c0 001c 	rsb	r0, r0, #28
 800890c:	9b04      	ldr	r3, [sp, #16]
 800890e:	4403      	add	r3, r0
 8008910:	9304      	str	r3, [sp, #16]
 8008912:	9b05      	ldr	r3, [sp, #20]
 8008914:	4403      	add	r3, r0
 8008916:	4405      	add	r5, r0
 8008918:	9305      	str	r3, [sp, #20]
 800891a:	9b04      	ldr	r3, [sp, #16]
 800891c:	2b00      	cmp	r3, #0
 800891e:	dd07      	ble.n	8008930 <_dtoa_r+0x818>
 8008920:	ee18 1a10 	vmov	r1, s16
 8008924:	461a      	mov	r2, r3
 8008926:	4620      	mov	r0, r4
 8008928:	f000 fc02 	bl	8009130 <__lshift>
 800892c:	ee08 0a10 	vmov	s16, r0
 8008930:	9b05      	ldr	r3, [sp, #20]
 8008932:	2b00      	cmp	r3, #0
 8008934:	dd05      	ble.n	8008942 <_dtoa_r+0x82a>
 8008936:	4631      	mov	r1, r6
 8008938:	461a      	mov	r2, r3
 800893a:	4620      	mov	r0, r4
 800893c:	f000 fbf8 	bl	8009130 <__lshift>
 8008940:	4606      	mov	r6, r0
 8008942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008944:	2b00      	cmp	r3, #0
 8008946:	d06e      	beq.n	8008a26 <_dtoa_r+0x90e>
 8008948:	ee18 0a10 	vmov	r0, s16
 800894c:	4631      	mov	r1, r6
 800894e:	f000 fc5f 	bl	8009210 <__mcmp>
 8008952:	2800      	cmp	r0, #0
 8008954:	da67      	bge.n	8008a26 <_dtoa_r+0x90e>
 8008956:	9b00      	ldr	r3, [sp, #0]
 8008958:	3b01      	subs	r3, #1
 800895a:	ee18 1a10 	vmov	r1, s16
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	220a      	movs	r2, #10
 8008962:	2300      	movs	r3, #0
 8008964:	4620      	mov	r0, r4
 8008966:	f000 fa33 	bl	8008dd0 <__multadd>
 800896a:	9b08      	ldr	r3, [sp, #32]
 800896c:	ee08 0a10 	vmov	s16, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 81b1 	beq.w	8008cd8 <_dtoa_r+0xbc0>
 8008976:	2300      	movs	r3, #0
 8008978:	4639      	mov	r1, r7
 800897a:	220a      	movs	r2, #10
 800897c:	4620      	mov	r0, r4
 800897e:	f000 fa27 	bl	8008dd0 <__multadd>
 8008982:	9b02      	ldr	r3, [sp, #8]
 8008984:	2b00      	cmp	r3, #0
 8008986:	4607      	mov	r7, r0
 8008988:	f300 808e 	bgt.w	8008aa8 <_dtoa_r+0x990>
 800898c:	9b06      	ldr	r3, [sp, #24]
 800898e:	2b02      	cmp	r3, #2
 8008990:	dc51      	bgt.n	8008a36 <_dtoa_r+0x91e>
 8008992:	e089      	b.n	8008aa8 <_dtoa_r+0x990>
 8008994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008996:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800899a:	e74b      	b.n	8008834 <_dtoa_r+0x71c>
 800899c:	9b03      	ldr	r3, [sp, #12]
 800899e:	1e5e      	subs	r6, r3, #1
 80089a0:	9b07      	ldr	r3, [sp, #28]
 80089a2:	42b3      	cmp	r3, r6
 80089a4:	bfbf      	itttt	lt
 80089a6:	9b07      	ldrlt	r3, [sp, #28]
 80089a8:	9607      	strlt	r6, [sp, #28]
 80089aa:	1af2      	sublt	r2, r6, r3
 80089ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80089ae:	bfb6      	itet	lt
 80089b0:	189b      	addlt	r3, r3, r2
 80089b2:	1b9e      	subge	r6, r3, r6
 80089b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80089b6:	9b03      	ldr	r3, [sp, #12]
 80089b8:	bfb8      	it	lt
 80089ba:	2600      	movlt	r6, #0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	bfb7      	itett	lt
 80089c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80089c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80089c8:	1a9d      	sublt	r5, r3, r2
 80089ca:	2300      	movlt	r3, #0
 80089cc:	e734      	b.n	8008838 <_dtoa_r+0x720>
 80089ce:	9e07      	ldr	r6, [sp, #28]
 80089d0:	9d04      	ldr	r5, [sp, #16]
 80089d2:	9f08      	ldr	r7, [sp, #32]
 80089d4:	e73b      	b.n	800884e <_dtoa_r+0x736>
 80089d6:	9a07      	ldr	r2, [sp, #28]
 80089d8:	e767      	b.n	80088aa <_dtoa_r+0x792>
 80089da:	9b06      	ldr	r3, [sp, #24]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	dc18      	bgt.n	8008a12 <_dtoa_r+0x8fa>
 80089e0:	f1ba 0f00 	cmp.w	sl, #0
 80089e4:	d115      	bne.n	8008a12 <_dtoa_r+0x8fa>
 80089e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089ea:	b993      	cbnz	r3, 8008a12 <_dtoa_r+0x8fa>
 80089ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80089f0:	0d1b      	lsrs	r3, r3, #20
 80089f2:	051b      	lsls	r3, r3, #20
 80089f4:	b183      	cbz	r3, 8008a18 <_dtoa_r+0x900>
 80089f6:	9b04      	ldr	r3, [sp, #16]
 80089f8:	3301      	adds	r3, #1
 80089fa:	9304      	str	r3, [sp, #16]
 80089fc:	9b05      	ldr	r3, [sp, #20]
 80089fe:	3301      	adds	r3, #1
 8008a00:	9305      	str	r3, [sp, #20]
 8008a02:	f04f 0801 	mov.w	r8, #1
 8008a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f47f af6a 	bne.w	80088e2 <_dtoa_r+0x7ca>
 8008a0e:	2001      	movs	r0, #1
 8008a10:	e76f      	b.n	80088f2 <_dtoa_r+0x7da>
 8008a12:	f04f 0800 	mov.w	r8, #0
 8008a16:	e7f6      	b.n	8008a06 <_dtoa_r+0x8ee>
 8008a18:	4698      	mov	r8, r3
 8008a1a:	e7f4      	b.n	8008a06 <_dtoa_r+0x8ee>
 8008a1c:	f43f af7d 	beq.w	800891a <_dtoa_r+0x802>
 8008a20:	4618      	mov	r0, r3
 8008a22:	301c      	adds	r0, #28
 8008a24:	e772      	b.n	800890c <_dtoa_r+0x7f4>
 8008a26:	9b03      	ldr	r3, [sp, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	dc37      	bgt.n	8008a9c <_dtoa_r+0x984>
 8008a2c:	9b06      	ldr	r3, [sp, #24]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	dd34      	ble.n	8008a9c <_dtoa_r+0x984>
 8008a32:	9b03      	ldr	r3, [sp, #12]
 8008a34:	9302      	str	r3, [sp, #8]
 8008a36:	9b02      	ldr	r3, [sp, #8]
 8008a38:	b96b      	cbnz	r3, 8008a56 <_dtoa_r+0x93e>
 8008a3a:	4631      	mov	r1, r6
 8008a3c:	2205      	movs	r2, #5
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f000 f9c6 	bl	8008dd0 <__multadd>
 8008a44:	4601      	mov	r1, r0
 8008a46:	4606      	mov	r6, r0
 8008a48:	ee18 0a10 	vmov	r0, s16
 8008a4c:	f000 fbe0 	bl	8009210 <__mcmp>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	f73f adbb 	bgt.w	80085cc <_dtoa_r+0x4b4>
 8008a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a58:	9d01      	ldr	r5, [sp, #4]
 8008a5a:	43db      	mvns	r3, r3
 8008a5c:	9300      	str	r3, [sp, #0]
 8008a5e:	f04f 0800 	mov.w	r8, #0
 8008a62:	4631      	mov	r1, r6
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 f991 	bl	8008d8c <_Bfree>
 8008a6a:	2f00      	cmp	r7, #0
 8008a6c:	f43f aea4 	beq.w	80087b8 <_dtoa_r+0x6a0>
 8008a70:	f1b8 0f00 	cmp.w	r8, #0
 8008a74:	d005      	beq.n	8008a82 <_dtoa_r+0x96a>
 8008a76:	45b8      	cmp	r8, r7
 8008a78:	d003      	beq.n	8008a82 <_dtoa_r+0x96a>
 8008a7a:	4641      	mov	r1, r8
 8008a7c:	4620      	mov	r0, r4
 8008a7e:	f000 f985 	bl	8008d8c <_Bfree>
 8008a82:	4639      	mov	r1, r7
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 f981 	bl	8008d8c <_Bfree>
 8008a8a:	e695      	b.n	80087b8 <_dtoa_r+0x6a0>
 8008a8c:	2600      	movs	r6, #0
 8008a8e:	4637      	mov	r7, r6
 8008a90:	e7e1      	b.n	8008a56 <_dtoa_r+0x93e>
 8008a92:	9700      	str	r7, [sp, #0]
 8008a94:	4637      	mov	r7, r6
 8008a96:	e599      	b.n	80085cc <_dtoa_r+0x4b4>
 8008a98:	40240000 	.word	0x40240000
 8008a9c:	9b08      	ldr	r3, [sp, #32]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 80ca 	beq.w	8008c38 <_dtoa_r+0xb20>
 8008aa4:	9b03      	ldr	r3, [sp, #12]
 8008aa6:	9302      	str	r3, [sp, #8]
 8008aa8:	2d00      	cmp	r5, #0
 8008aaa:	dd05      	ble.n	8008ab8 <_dtoa_r+0x9a0>
 8008aac:	4639      	mov	r1, r7
 8008aae:	462a      	mov	r2, r5
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f000 fb3d 	bl	8009130 <__lshift>
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	f1b8 0f00 	cmp.w	r8, #0
 8008abc:	d05b      	beq.n	8008b76 <_dtoa_r+0xa5e>
 8008abe:	6879      	ldr	r1, [r7, #4]
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	f000 f923 	bl	8008d0c <_Balloc>
 8008ac6:	4605      	mov	r5, r0
 8008ac8:	b928      	cbnz	r0, 8008ad6 <_dtoa_r+0x9be>
 8008aca:	4b87      	ldr	r3, [pc, #540]	; (8008ce8 <_dtoa_r+0xbd0>)
 8008acc:	4602      	mov	r2, r0
 8008ace:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008ad2:	f7ff bb3b 	b.w	800814c <_dtoa_r+0x34>
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	3202      	adds	r2, #2
 8008ada:	0092      	lsls	r2, r2, #2
 8008adc:	f107 010c 	add.w	r1, r7, #12
 8008ae0:	300c      	adds	r0, #12
 8008ae2:	f7fe fded 	bl	80076c0 <memcpy>
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	4629      	mov	r1, r5
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 fb20 	bl	8009130 <__lshift>
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	f103 0901 	add.w	r9, r3, #1
 8008af6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008afa:	4413      	add	r3, r2
 8008afc:	9305      	str	r3, [sp, #20]
 8008afe:	f00a 0301 	and.w	r3, sl, #1
 8008b02:	46b8      	mov	r8, r7
 8008b04:	9304      	str	r3, [sp, #16]
 8008b06:	4607      	mov	r7, r0
 8008b08:	4631      	mov	r1, r6
 8008b0a:	ee18 0a10 	vmov	r0, s16
 8008b0e:	f7ff fa77 	bl	8008000 <quorem>
 8008b12:	4641      	mov	r1, r8
 8008b14:	9002      	str	r0, [sp, #8]
 8008b16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008b1a:	ee18 0a10 	vmov	r0, s16
 8008b1e:	f000 fb77 	bl	8009210 <__mcmp>
 8008b22:	463a      	mov	r2, r7
 8008b24:	9003      	str	r0, [sp, #12]
 8008b26:	4631      	mov	r1, r6
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fb8d 	bl	8009248 <__mdiff>
 8008b2e:	68c2      	ldr	r2, [r0, #12]
 8008b30:	f109 3bff 	add.w	fp, r9, #4294967295
 8008b34:	4605      	mov	r5, r0
 8008b36:	bb02      	cbnz	r2, 8008b7a <_dtoa_r+0xa62>
 8008b38:	4601      	mov	r1, r0
 8008b3a:	ee18 0a10 	vmov	r0, s16
 8008b3e:	f000 fb67 	bl	8009210 <__mcmp>
 8008b42:	4602      	mov	r2, r0
 8008b44:	4629      	mov	r1, r5
 8008b46:	4620      	mov	r0, r4
 8008b48:	9207      	str	r2, [sp, #28]
 8008b4a:	f000 f91f 	bl	8008d8c <_Bfree>
 8008b4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008b52:	ea43 0102 	orr.w	r1, r3, r2
 8008b56:	9b04      	ldr	r3, [sp, #16]
 8008b58:	430b      	orrs	r3, r1
 8008b5a:	464d      	mov	r5, r9
 8008b5c:	d10f      	bne.n	8008b7e <_dtoa_r+0xa66>
 8008b5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008b62:	d02a      	beq.n	8008bba <_dtoa_r+0xaa2>
 8008b64:	9b03      	ldr	r3, [sp, #12]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	dd02      	ble.n	8008b70 <_dtoa_r+0xa58>
 8008b6a:	9b02      	ldr	r3, [sp, #8]
 8008b6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008b70:	f88b a000 	strb.w	sl, [fp]
 8008b74:	e775      	b.n	8008a62 <_dtoa_r+0x94a>
 8008b76:	4638      	mov	r0, r7
 8008b78:	e7ba      	b.n	8008af0 <_dtoa_r+0x9d8>
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	e7e2      	b.n	8008b44 <_dtoa_r+0xa2c>
 8008b7e:	9b03      	ldr	r3, [sp, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	db04      	blt.n	8008b8e <_dtoa_r+0xa76>
 8008b84:	9906      	ldr	r1, [sp, #24]
 8008b86:	430b      	orrs	r3, r1
 8008b88:	9904      	ldr	r1, [sp, #16]
 8008b8a:	430b      	orrs	r3, r1
 8008b8c:	d122      	bne.n	8008bd4 <_dtoa_r+0xabc>
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	ddee      	ble.n	8008b70 <_dtoa_r+0xa58>
 8008b92:	ee18 1a10 	vmov	r1, s16
 8008b96:	2201      	movs	r2, #1
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f000 fac9 	bl	8009130 <__lshift>
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	ee08 0a10 	vmov	s16, r0
 8008ba4:	f000 fb34 	bl	8009210 <__mcmp>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	dc03      	bgt.n	8008bb4 <_dtoa_r+0xa9c>
 8008bac:	d1e0      	bne.n	8008b70 <_dtoa_r+0xa58>
 8008bae:	f01a 0f01 	tst.w	sl, #1
 8008bb2:	d0dd      	beq.n	8008b70 <_dtoa_r+0xa58>
 8008bb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bb8:	d1d7      	bne.n	8008b6a <_dtoa_r+0xa52>
 8008bba:	2339      	movs	r3, #57	; 0x39
 8008bbc:	f88b 3000 	strb.w	r3, [fp]
 8008bc0:	462b      	mov	r3, r5
 8008bc2:	461d      	mov	r5, r3
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bca:	2a39      	cmp	r2, #57	; 0x39
 8008bcc:	d071      	beq.n	8008cb2 <_dtoa_r+0xb9a>
 8008bce:	3201      	adds	r2, #1
 8008bd0:	701a      	strb	r2, [r3, #0]
 8008bd2:	e746      	b.n	8008a62 <_dtoa_r+0x94a>
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	dd07      	ble.n	8008be8 <_dtoa_r+0xad0>
 8008bd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008bdc:	d0ed      	beq.n	8008bba <_dtoa_r+0xaa2>
 8008bde:	f10a 0301 	add.w	r3, sl, #1
 8008be2:	f88b 3000 	strb.w	r3, [fp]
 8008be6:	e73c      	b.n	8008a62 <_dtoa_r+0x94a>
 8008be8:	9b05      	ldr	r3, [sp, #20]
 8008bea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008bee:	4599      	cmp	r9, r3
 8008bf0:	d047      	beq.n	8008c82 <_dtoa_r+0xb6a>
 8008bf2:	ee18 1a10 	vmov	r1, s16
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	220a      	movs	r2, #10
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f000 f8e8 	bl	8008dd0 <__multadd>
 8008c00:	45b8      	cmp	r8, r7
 8008c02:	ee08 0a10 	vmov	s16, r0
 8008c06:	f04f 0300 	mov.w	r3, #0
 8008c0a:	f04f 020a 	mov.w	r2, #10
 8008c0e:	4641      	mov	r1, r8
 8008c10:	4620      	mov	r0, r4
 8008c12:	d106      	bne.n	8008c22 <_dtoa_r+0xb0a>
 8008c14:	f000 f8dc 	bl	8008dd0 <__multadd>
 8008c18:	4680      	mov	r8, r0
 8008c1a:	4607      	mov	r7, r0
 8008c1c:	f109 0901 	add.w	r9, r9, #1
 8008c20:	e772      	b.n	8008b08 <_dtoa_r+0x9f0>
 8008c22:	f000 f8d5 	bl	8008dd0 <__multadd>
 8008c26:	4639      	mov	r1, r7
 8008c28:	4680      	mov	r8, r0
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	220a      	movs	r2, #10
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 f8ce 	bl	8008dd0 <__multadd>
 8008c34:	4607      	mov	r7, r0
 8008c36:	e7f1      	b.n	8008c1c <_dtoa_r+0xb04>
 8008c38:	9b03      	ldr	r3, [sp, #12]
 8008c3a:	9302      	str	r3, [sp, #8]
 8008c3c:	9d01      	ldr	r5, [sp, #4]
 8008c3e:	ee18 0a10 	vmov	r0, s16
 8008c42:	4631      	mov	r1, r6
 8008c44:	f7ff f9dc 	bl	8008000 <quorem>
 8008c48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c4c:	9b01      	ldr	r3, [sp, #4]
 8008c4e:	f805 ab01 	strb.w	sl, [r5], #1
 8008c52:	1aea      	subs	r2, r5, r3
 8008c54:	9b02      	ldr	r3, [sp, #8]
 8008c56:	4293      	cmp	r3, r2
 8008c58:	dd09      	ble.n	8008c6e <_dtoa_r+0xb56>
 8008c5a:	ee18 1a10 	vmov	r1, s16
 8008c5e:	2300      	movs	r3, #0
 8008c60:	220a      	movs	r2, #10
 8008c62:	4620      	mov	r0, r4
 8008c64:	f000 f8b4 	bl	8008dd0 <__multadd>
 8008c68:	ee08 0a10 	vmov	s16, r0
 8008c6c:	e7e7      	b.n	8008c3e <_dtoa_r+0xb26>
 8008c6e:	9b02      	ldr	r3, [sp, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	bfc8      	it	gt
 8008c74:	461d      	movgt	r5, r3
 8008c76:	9b01      	ldr	r3, [sp, #4]
 8008c78:	bfd8      	it	le
 8008c7a:	2501      	movle	r5, #1
 8008c7c:	441d      	add	r5, r3
 8008c7e:	f04f 0800 	mov.w	r8, #0
 8008c82:	ee18 1a10 	vmov	r1, s16
 8008c86:	2201      	movs	r2, #1
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fa51 	bl	8009130 <__lshift>
 8008c8e:	4631      	mov	r1, r6
 8008c90:	ee08 0a10 	vmov	s16, r0
 8008c94:	f000 fabc 	bl	8009210 <__mcmp>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	dc91      	bgt.n	8008bc0 <_dtoa_r+0xaa8>
 8008c9c:	d102      	bne.n	8008ca4 <_dtoa_r+0xb8c>
 8008c9e:	f01a 0f01 	tst.w	sl, #1
 8008ca2:	d18d      	bne.n	8008bc0 <_dtoa_r+0xaa8>
 8008ca4:	462b      	mov	r3, r5
 8008ca6:	461d      	mov	r5, r3
 8008ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cac:	2a30      	cmp	r2, #48	; 0x30
 8008cae:	d0fa      	beq.n	8008ca6 <_dtoa_r+0xb8e>
 8008cb0:	e6d7      	b.n	8008a62 <_dtoa_r+0x94a>
 8008cb2:	9a01      	ldr	r2, [sp, #4]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d184      	bne.n	8008bc2 <_dtoa_r+0xaaa>
 8008cb8:	9b00      	ldr	r3, [sp, #0]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	2331      	movs	r3, #49	; 0x31
 8008cc0:	7013      	strb	r3, [r2, #0]
 8008cc2:	e6ce      	b.n	8008a62 <_dtoa_r+0x94a>
 8008cc4:	4b09      	ldr	r3, [pc, #36]	; (8008cec <_dtoa_r+0xbd4>)
 8008cc6:	f7ff ba95 	b.w	80081f4 <_dtoa_r+0xdc>
 8008cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f47f aa6e 	bne.w	80081ae <_dtoa_r+0x96>
 8008cd2:	4b07      	ldr	r3, [pc, #28]	; (8008cf0 <_dtoa_r+0xbd8>)
 8008cd4:	f7ff ba8e 	b.w	80081f4 <_dtoa_r+0xdc>
 8008cd8:	9b02      	ldr	r3, [sp, #8]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	dcae      	bgt.n	8008c3c <_dtoa_r+0xb24>
 8008cde:	9b06      	ldr	r3, [sp, #24]
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	f73f aea8 	bgt.w	8008a36 <_dtoa_r+0x91e>
 8008ce6:	e7a9      	b.n	8008c3c <_dtoa_r+0xb24>
 8008ce8:	0800badf 	.word	0x0800badf
 8008cec:	0800ba3c 	.word	0x0800ba3c
 8008cf0:	0800ba60 	.word	0x0800ba60

08008cf4 <_localeconv_r>:
 8008cf4:	4800      	ldr	r0, [pc, #0]	; (8008cf8 <_localeconv_r+0x4>)
 8008cf6:	4770      	bx	lr
 8008cf8:	2000016c 	.word	0x2000016c

08008cfc <malloc>:
 8008cfc:	4b02      	ldr	r3, [pc, #8]	; (8008d08 <malloc+0xc>)
 8008cfe:	4601      	mov	r1, r0
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	f000 bc09 	b.w	8009518 <_malloc_r>
 8008d06:	bf00      	nop
 8008d08:	20000018 	.word	0x20000018

08008d0c <_Balloc>:
 8008d0c:	b570      	push	{r4, r5, r6, lr}
 8008d0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d10:	4604      	mov	r4, r0
 8008d12:	460d      	mov	r5, r1
 8008d14:	b976      	cbnz	r6, 8008d34 <_Balloc+0x28>
 8008d16:	2010      	movs	r0, #16
 8008d18:	f7ff fff0 	bl	8008cfc <malloc>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	6260      	str	r0, [r4, #36]	; 0x24
 8008d20:	b920      	cbnz	r0, 8008d2c <_Balloc+0x20>
 8008d22:	4b18      	ldr	r3, [pc, #96]	; (8008d84 <_Balloc+0x78>)
 8008d24:	4818      	ldr	r0, [pc, #96]	; (8008d88 <_Balloc+0x7c>)
 8008d26:	2166      	movs	r1, #102	; 0x66
 8008d28:	f000 fdd6 	bl	80098d8 <__assert_func>
 8008d2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d30:	6006      	str	r6, [r0, #0]
 8008d32:	60c6      	str	r6, [r0, #12]
 8008d34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d36:	68f3      	ldr	r3, [r6, #12]
 8008d38:	b183      	cbz	r3, 8008d5c <_Balloc+0x50>
 8008d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d42:	b9b8      	cbnz	r0, 8008d74 <_Balloc+0x68>
 8008d44:	2101      	movs	r1, #1
 8008d46:	fa01 f605 	lsl.w	r6, r1, r5
 8008d4a:	1d72      	adds	r2, r6, #5
 8008d4c:	0092      	lsls	r2, r2, #2
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f000 fb60 	bl	8009414 <_calloc_r>
 8008d54:	b160      	cbz	r0, 8008d70 <_Balloc+0x64>
 8008d56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d5a:	e00e      	b.n	8008d7a <_Balloc+0x6e>
 8008d5c:	2221      	movs	r2, #33	; 0x21
 8008d5e:	2104      	movs	r1, #4
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 fb57 	bl	8009414 <_calloc_r>
 8008d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d68:	60f0      	str	r0, [r6, #12]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e4      	bne.n	8008d3a <_Balloc+0x2e>
 8008d70:	2000      	movs	r0, #0
 8008d72:	bd70      	pop	{r4, r5, r6, pc}
 8008d74:	6802      	ldr	r2, [r0, #0]
 8008d76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d80:	e7f7      	b.n	8008d72 <_Balloc+0x66>
 8008d82:	bf00      	nop
 8008d84:	0800ba6d 	.word	0x0800ba6d
 8008d88:	0800baf0 	.word	0x0800baf0

08008d8c <_Bfree>:
 8008d8c:	b570      	push	{r4, r5, r6, lr}
 8008d8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d90:	4605      	mov	r5, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	b976      	cbnz	r6, 8008db4 <_Bfree+0x28>
 8008d96:	2010      	movs	r0, #16
 8008d98:	f7ff ffb0 	bl	8008cfc <malloc>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	6268      	str	r0, [r5, #36]	; 0x24
 8008da0:	b920      	cbnz	r0, 8008dac <_Bfree+0x20>
 8008da2:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <_Bfree+0x3c>)
 8008da4:	4809      	ldr	r0, [pc, #36]	; (8008dcc <_Bfree+0x40>)
 8008da6:	218a      	movs	r1, #138	; 0x8a
 8008da8:	f000 fd96 	bl	80098d8 <__assert_func>
 8008dac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008db0:	6006      	str	r6, [r0, #0]
 8008db2:	60c6      	str	r6, [r0, #12]
 8008db4:	b13c      	cbz	r4, 8008dc6 <_Bfree+0x3a>
 8008db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008db8:	6862      	ldr	r2, [r4, #4]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dc0:	6021      	str	r1, [r4, #0]
 8008dc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dc6:	bd70      	pop	{r4, r5, r6, pc}
 8008dc8:	0800ba6d 	.word	0x0800ba6d
 8008dcc:	0800baf0 	.word	0x0800baf0

08008dd0 <__multadd>:
 8008dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd4:	690d      	ldr	r5, [r1, #16]
 8008dd6:	4607      	mov	r7, r0
 8008dd8:	460c      	mov	r4, r1
 8008dda:	461e      	mov	r6, r3
 8008ddc:	f101 0c14 	add.w	ip, r1, #20
 8008de0:	2000      	movs	r0, #0
 8008de2:	f8dc 3000 	ldr.w	r3, [ip]
 8008de6:	b299      	uxth	r1, r3
 8008de8:	fb02 6101 	mla	r1, r2, r1, r6
 8008dec:	0c1e      	lsrs	r6, r3, #16
 8008dee:	0c0b      	lsrs	r3, r1, #16
 8008df0:	fb02 3306 	mla	r3, r2, r6, r3
 8008df4:	b289      	uxth	r1, r1
 8008df6:	3001      	adds	r0, #1
 8008df8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008dfc:	4285      	cmp	r5, r0
 8008dfe:	f84c 1b04 	str.w	r1, [ip], #4
 8008e02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e06:	dcec      	bgt.n	8008de2 <__multadd+0x12>
 8008e08:	b30e      	cbz	r6, 8008e4e <__multadd+0x7e>
 8008e0a:	68a3      	ldr	r3, [r4, #8]
 8008e0c:	42ab      	cmp	r3, r5
 8008e0e:	dc19      	bgt.n	8008e44 <__multadd+0x74>
 8008e10:	6861      	ldr	r1, [r4, #4]
 8008e12:	4638      	mov	r0, r7
 8008e14:	3101      	adds	r1, #1
 8008e16:	f7ff ff79 	bl	8008d0c <_Balloc>
 8008e1a:	4680      	mov	r8, r0
 8008e1c:	b928      	cbnz	r0, 8008e2a <__multadd+0x5a>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	4b0c      	ldr	r3, [pc, #48]	; (8008e54 <__multadd+0x84>)
 8008e22:	480d      	ldr	r0, [pc, #52]	; (8008e58 <__multadd+0x88>)
 8008e24:	21b5      	movs	r1, #181	; 0xb5
 8008e26:	f000 fd57 	bl	80098d8 <__assert_func>
 8008e2a:	6922      	ldr	r2, [r4, #16]
 8008e2c:	3202      	adds	r2, #2
 8008e2e:	f104 010c 	add.w	r1, r4, #12
 8008e32:	0092      	lsls	r2, r2, #2
 8008e34:	300c      	adds	r0, #12
 8008e36:	f7fe fc43 	bl	80076c0 <memcpy>
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	4638      	mov	r0, r7
 8008e3e:	f7ff ffa5 	bl	8008d8c <_Bfree>
 8008e42:	4644      	mov	r4, r8
 8008e44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e48:	3501      	adds	r5, #1
 8008e4a:	615e      	str	r6, [r3, #20]
 8008e4c:	6125      	str	r5, [r4, #16]
 8008e4e:	4620      	mov	r0, r4
 8008e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e54:	0800badf 	.word	0x0800badf
 8008e58:	0800baf0 	.word	0x0800baf0

08008e5c <__hi0bits>:
 8008e5c:	0c03      	lsrs	r3, r0, #16
 8008e5e:	041b      	lsls	r3, r3, #16
 8008e60:	b9d3      	cbnz	r3, 8008e98 <__hi0bits+0x3c>
 8008e62:	0400      	lsls	r0, r0, #16
 8008e64:	2310      	movs	r3, #16
 8008e66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e6a:	bf04      	itt	eq
 8008e6c:	0200      	lsleq	r0, r0, #8
 8008e6e:	3308      	addeq	r3, #8
 8008e70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e74:	bf04      	itt	eq
 8008e76:	0100      	lsleq	r0, r0, #4
 8008e78:	3304      	addeq	r3, #4
 8008e7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e7e:	bf04      	itt	eq
 8008e80:	0080      	lsleq	r0, r0, #2
 8008e82:	3302      	addeq	r3, #2
 8008e84:	2800      	cmp	r0, #0
 8008e86:	db05      	blt.n	8008e94 <__hi0bits+0x38>
 8008e88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e8c:	f103 0301 	add.w	r3, r3, #1
 8008e90:	bf08      	it	eq
 8008e92:	2320      	moveq	r3, #32
 8008e94:	4618      	mov	r0, r3
 8008e96:	4770      	bx	lr
 8008e98:	2300      	movs	r3, #0
 8008e9a:	e7e4      	b.n	8008e66 <__hi0bits+0xa>

08008e9c <__lo0bits>:
 8008e9c:	6803      	ldr	r3, [r0, #0]
 8008e9e:	f013 0207 	ands.w	r2, r3, #7
 8008ea2:	4601      	mov	r1, r0
 8008ea4:	d00b      	beq.n	8008ebe <__lo0bits+0x22>
 8008ea6:	07da      	lsls	r2, r3, #31
 8008ea8:	d423      	bmi.n	8008ef2 <__lo0bits+0x56>
 8008eaa:	0798      	lsls	r0, r3, #30
 8008eac:	bf49      	itett	mi
 8008eae:	085b      	lsrmi	r3, r3, #1
 8008eb0:	089b      	lsrpl	r3, r3, #2
 8008eb2:	2001      	movmi	r0, #1
 8008eb4:	600b      	strmi	r3, [r1, #0]
 8008eb6:	bf5c      	itt	pl
 8008eb8:	600b      	strpl	r3, [r1, #0]
 8008eba:	2002      	movpl	r0, #2
 8008ebc:	4770      	bx	lr
 8008ebe:	b298      	uxth	r0, r3
 8008ec0:	b9a8      	cbnz	r0, 8008eee <__lo0bits+0x52>
 8008ec2:	0c1b      	lsrs	r3, r3, #16
 8008ec4:	2010      	movs	r0, #16
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	b90a      	cbnz	r2, 8008ece <__lo0bits+0x32>
 8008eca:	3008      	adds	r0, #8
 8008ecc:	0a1b      	lsrs	r3, r3, #8
 8008ece:	071a      	lsls	r2, r3, #28
 8008ed0:	bf04      	itt	eq
 8008ed2:	091b      	lsreq	r3, r3, #4
 8008ed4:	3004      	addeq	r0, #4
 8008ed6:	079a      	lsls	r2, r3, #30
 8008ed8:	bf04      	itt	eq
 8008eda:	089b      	lsreq	r3, r3, #2
 8008edc:	3002      	addeq	r0, #2
 8008ede:	07da      	lsls	r2, r3, #31
 8008ee0:	d403      	bmi.n	8008eea <__lo0bits+0x4e>
 8008ee2:	085b      	lsrs	r3, r3, #1
 8008ee4:	f100 0001 	add.w	r0, r0, #1
 8008ee8:	d005      	beq.n	8008ef6 <__lo0bits+0x5a>
 8008eea:	600b      	str	r3, [r1, #0]
 8008eec:	4770      	bx	lr
 8008eee:	4610      	mov	r0, r2
 8008ef0:	e7e9      	b.n	8008ec6 <__lo0bits+0x2a>
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	4770      	bx	lr
 8008ef6:	2020      	movs	r0, #32
 8008ef8:	4770      	bx	lr
	...

08008efc <__i2b>:
 8008efc:	b510      	push	{r4, lr}
 8008efe:	460c      	mov	r4, r1
 8008f00:	2101      	movs	r1, #1
 8008f02:	f7ff ff03 	bl	8008d0c <_Balloc>
 8008f06:	4602      	mov	r2, r0
 8008f08:	b928      	cbnz	r0, 8008f16 <__i2b+0x1a>
 8008f0a:	4b05      	ldr	r3, [pc, #20]	; (8008f20 <__i2b+0x24>)
 8008f0c:	4805      	ldr	r0, [pc, #20]	; (8008f24 <__i2b+0x28>)
 8008f0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f12:	f000 fce1 	bl	80098d8 <__assert_func>
 8008f16:	2301      	movs	r3, #1
 8008f18:	6144      	str	r4, [r0, #20]
 8008f1a:	6103      	str	r3, [r0, #16]
 8008f1c:	bd10      	pop	{r4, pc}
 8008f1e:	bf00      	nop
 8008f20:	0800badf 	.word	0x0800badf
 8008f24:	0800baf0 	.word	0x0800baf0

08008f28 <__multiply>:
 8008f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	4691      	mov	r9, r2
 8008f2e:	690a      	ldr	r2, [r1, #16]
 8008f30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	bfb8      	it	lt
 8008f38:	460b      	movlt	r3, r1
 8008f3a:	460c      	mov	r4, r1
 8008f3c:	bfbc      	itt	lt
 8008f3e:	464c      	movlt	r4, r9
 8008f40:	4699      	movlt	r9, r3
 8008f42:	6927      	ldr	r7, [r4, #16]
 8008f44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f48:	68a3      	ldr	r3, [r4, #8]
 8008f4a:	6861      	ldr	r1, [r4, #4]
 8008f4c:	eb07 060a 	add.w	r6, r7, sl
 8008f50:	42b3      	cmp	r3, r6
 8008f52:	b085      	sub	sp, #20
 8008f54:	bfb8      	it	lt
 8008f56:	3101      	addlt	r1, #1
 8008f58:	f7ff fed8 	bl	8008d0c <_Balloc>
 8008f5c:	b930      	cbnz	r0, 8008f6c <__multiply+0x44>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	4b44      	ldr	r3, [pc, #272]	; (8009074 <__multiply+0x14c>)
 8008f62:	4845      	ldr	r0, [pc, #276]	; (8009078 <__multiply+0x150>)
 8008f64:	f240 115d 	movw	r1, #349	; 0x15d
 8008f68:	f000 fcb6 	bl	80098d8 <__assert_func>
 8008f6c:	f100 0514 	add.w	r5, r0, #20
 8008f70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f74:	462b      	mov	r3, r5
 8008f76:	2200      	movs	r2, #0
 8008f78:	4543      	cmp	r3, r8
 8008f7a:	d321      	bcc.n	8008fc0 <__multiply+0x98>
 8008f7c:	f104 0314 	add.w	r3, r4, #20
 8008f80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f84:	f109 0314 	add.w	r3, r9, #20
 8008f88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f8c:	9202      	str	r2, [sp, #8]
 8008f8e:	1b3a      	subs	r2, r7, r4
 8008f90:	3a15      	subs	r2, #21
 8008f92:	f022 0203 	bic.w	r2, r2, #3
 8008f96:	3204      	adds	r2, #4
 8008f98:	f104 0115 	add.w	r1, r4, #21
 8008f9c:	428f      	cmp	r7, r1
 8008f9e:	bf38      	it	cc
 8008fa0:	2204      	movcc	r2, #4
 8008fa2:	9201      	str	r2, [sp, #4]
 8008fa4:	9a02      	ldr	r2, [sp, #8]
 8008fa6:	9303      	str	r3, [sp, #12]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d80c      	bhi.n	8008fc6 <__multiply+0x9e>
 8008fac:	2e00      	cmp	r6, #0
 8008fae:	dd03      	ble.n	8008fb8 <__multiply+0x90>
 8008fb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d05a      	beq.n	800906e <__multiply+0x146>
 8008fb8:	6106      	str	r6, [r0, #16]
 8008fba:	b005      	add	sp, #20
 8008fbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc0:	f843 2b04 	str.w	r2, [r3], #4
 8008fc4:	e7d8      	b.n	8008f78 <__multiply+0x50>
 8008fc6:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fca:	f1ba 0f00 	cmp.w	sl, #0
 8008fce:	d024      	beq.n	800901a <__multiply+0xf2>
 8008fd0:	f104 0e14 	add.w	lr, r4, #20
 8008fd4:	46a9      	mov	r9, r5
 8008fd6:	f04f 0c00 	mov.w	ip, #0
 8008fda:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008fde:	f8d9 1000 	ldr.w	r1, [r9]
 8008fe2:	fa1f fb82 	uxth.w	fp, r2
 8008fe6:	b289      	uxth	r1, r1
 8008fe8:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008ff0:	f8d9 2000 	ldr.w	r2, [r9]
 8008ff4:	4461      	add	r1, ip
 8008ff6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ffa:	fb0a c20b 	mla	r2, sl, fp, ip
 8008ffe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009002:	b289      	uxth	r1, r1
 8009004:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009008:	4577      	cmp	r7, lr
 800900a:	f849 1b04 	str.w	r1, [r9], #4
 800900e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009012:	d8e2      	bhi.n	8008fda <__multiply+0xb2>
 8009014:	9a01      	ldr	r2, [sp, #4]
 8009016:	f845 c002 	str.w	ip, [r5, r2]
 800901a:	9a03      	ldr	r2, [sp, #12]
 800901c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009020:	3304      	adds	r3, #4
 8009022:	f1b9 0f00 	cmp.w	r9, #0
 8009026:	d020      	beq.n	800906a <__multiply+0x142>
 8009028:	6829      	ldr	r1, [r5, #0]
 800902a:	f104 0c14 	add.w	ip, r4, #20
 800902e:	46ae      	mov	lr, r5
 8009030:	f04f 0a00 	mov.w	sl, #0
 8009034:	f8bc b000 	ldrh.w	fp, [ip]
 8009038:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800903c:	fb09 220b 	mla	r2, r9, fp, r2
 8009040:	4492      	add	sl, r2
 8009042:	b289      	uxth	r1, r1
 8009044:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009048:	f84e 1b04 	str.w	r1, [lr], #4
 800904c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009050:	f8be 1000 	ldrh.w	r1, [lr]
 8009054:	0c12      	lsrs	r2, r2, #16
 8009056:	fb09 1102 	mla	r1, r9, r2, r1
 800905a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800905e:	4567      	cmp	r7, ip
 8009060:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009064:	d8e6      	bhi.n	8009034 <__multiply+0x10c>
 8009066:	9a01      	ldr	r2, [sp, #4]
 8009068:	50a9      	str	r1, [r5, r2]
 800906a:	3504      	adds	r5, #4
 800906c:	e79a      	b.n	8008fa4 <__multiply+0x7c>
 800906e:	3e01      	subs	r6, #1
 8009070:	e79c      	b.n	8008fac <__multiply+0x84>
 8009072:	bf00      	nop
 8009074:	0800badf 	.word	0x0800badf
 8009078:	0800baf0 	.word	0x0800baf0

0800907c <__pow5mult>:
 800907c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009080:	4615      	mov	r5, r2
 8009082:	f012 0203 	ands.w	r2, r2, #3
 8009086:	4606      	mov	r6, r0
 8009088:	460f      	mov	r7, r1
 800908a:	d007      	beq.n	800909c <__pow5mult+0x20>
 800908c:	4c25      	ldr	r4, [pc, #148]	; (8009124 <__pow5mult+0xa8>)
 800908e:	3a01      	subs	r2, #1
 8009090:	2300      	movs	r3, #0
 8009092:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009096:	f7ff fe9b 	bl	8008dd0 <__multadd>
 800909a:	4607      	mov	r7, r0
 800909c:	10ad      	asrs	r5, r5, #2
 800909e:	d03d      	beq.n	800911c <__pow5mult+0xa0>
 80090a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090a2:	b97c      	cbnz	r4, 80090c4 <__pow5mult+0x48>
 80090a4:	2010      	movs	r0, #16
 80090a6:	f7ff fe29 	bl	8008cfc <malloc>
 80090aa:	4602      	mov	r2, r0
 80090ac:	6270      	str	r0, [r6, #36]	; 0x24
 80090ae:	b928      	cbnz	r0, 80090bc <__pow5mult+0x40>
 80090b0:	4b1d      	ldr	r3, [pc, #116]	; (8009128 <__pow5mult+0xac>)
 80090b2:	481e      	ldr	r0, [pc, #120]	; (800912c <__pow5mult+0xb0>)
 80090b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090b8:	f000 fc0e 	bl	80098d8 <__assert_func>
 80090bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090c0:	6004      	str	r4, [r0, #0]
 80090c2:	60c4      	str	r4, [r0, #12]
 80090c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090cc:	b94c      	cbnz	r4, 80090e2 <__pow5mult+0x66>
 80090ce:	f240 2171 	movw	r1, #625	; 0x271
 80090d2:	4630      	mov	r0, r6
 80090d4:	f7ff ff12 	bl	8008efc <__i2b>
 80090d8:	2300      	movs	r3, #0
 80090da:	f8c8 0008 	str.w	r0, [r8, #8]
 80090de:	4604      	mov	r4, r0
 80090e0:	6003      	str	r3, [r0, #0]
 80090e2:	f04f 0900 	mov.w	r9, #0
 80090e6:	07eb      	lsls	r3, r5, #31
 80090e8:	d50a      	bpl.n	8009100 <__pow5mult+0x84>
 80090ea:	4639      	mov	r1, r7
 80090ec:	4622      	mov	r2, r4
 80090ee:	4630      	mov	r0, r6
 80090f0:	f7ff ff1a 	bl	8008f28 <__multiply>
 80090f4:	4639      	mov	r1, r7
 80090f6:	4680      	mov	r8, r0
 80090f8:	4630      	mov	r0, r6
 80090fa:	f7ff fe47 	bl	8008d8c <_Bfree>
 80090fe:	4647      	mov	r7, r8
 8009100:	106d      	asrs	r5, r5, #1
 8009102:	d00b      	beq.n	800911c <__pow5mult+0xa0>
 8009104:	6820      	ldr	r0, [r4, #0]
 8009106:	b938      	cbnz	r0, 8009118 <__pow5mult+0x9c>
 8009108:	4622      	mov	r2, r4
 800910a:	4621      	mov	r1, r4
 800910c:	4630      	mov	r0, r6
 800910e:	f7ff ff0b 	bl	8008f28 <__multiply>
 8009112:	6020      	str	r0, [r4, #0]
 8009114:	f8c0 9000 	str.w	r9, [r0]
 8009118:	4604      	mov	r4, r0
 800911a:	e7e4      	b.n	80090e6 <__pow5mult+0x6a>
 800911c:	4638      	mov	r0, r7
 800911e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009122:	bf00      	nop
 8009124:	0800bc40 	.word	0x0800bc40
 8009128:	0800ba6d 	.word	0x0800ba6d
 800912c:	0800baf0 	.word	0x0800baf0

08009130 <__lshift>:
 8009130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009134:	460c      	mov	r4, r1
 8009136:	6849      	ldr	r1, [r1, #4]
 8009138:	6923      	ldr	r3, [r4, #16]
 800913a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800913e:	68a3      	ldr	r3, [r4, #8]
 8009140:	4607      	mov	r7, r0
 8009142:	4691      	mov	r9, r2
 8009144:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009148:	f108 0601 	add.w	r6, r8, #1
 800914c:	42b3      	cmp	r3, r6
 800914e:	db0b      	blt.n	8009168 <__lshift+0x38>
 8009150:	4638      	mov	r0, r7
 8009152:	f7ff fddb 	bl	8008d0c <_Balloc>
 8009156:	4605      	mov	r5, r0
 8009158:	b948      	cbnz	r0, 800916e <__lshift+0x3e>
 800915a:	4602      	mov	r2, r0
 800915c:	4b2a      	ldr	r3, [pc, #168]	; (8009208 <__lshift+0xd8>)
 800915e:	482b      	ldr	r0, [pc, #172]	; (800920c <__lshift+0xdc>)
 8009160:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009164:	f000 fbb8 	bl	80098d8 <__assert_func>
 8009168:	3101      	adds	r1, #1
 800916a:	005b      	lsls	r3, r3, #1
 800916c:	e7ee      	b.n	800914c <__lshift+0x1c>
 800916e:	2300      	movs	r3, #0
 8009170:	f100 0114 	add.w	r1, r0, #20
 8009174:	f100 0210 	add.w	r2, r0, #16
 8009178:	4618      	mov	r0, r3
 800917a:	4553      	cmp	r3, sl
 800917c:	db37      	blt.n	80091ee <__lshift+0xbe>
 800917e:	6920      	ldr	r0, [r4, #16]
 8009180:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009184:	f104 0314 	add.w	r3, r4, #20
 8009188:	f019 091f 	ands.w	r9, r9, #31
 800918c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009190:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009194:	d02f      	beq.n	80091f6 <__lshift+0xc6>
 8009196:	f1c9 0e20 	rsb	lr, r9, #32
 800919a:	468a      	mov	sl, r1
 800919c:	f04f 0c00 	mov.w	ip, #0
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	fa02 f209 	lsl.w	r2, r2, r9
 80091a6:	ea42 020c 	orr.w	r2, r2, ip
 80091aa:	f84a 2b04 	str.w	r2, [sl], #4
 80091ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80091b2:	4298      	cmp	r0, r3
 80091b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80091b8:	d8f2      	bhi.n	80091a0 <__lshift+0x70>
 80091ba:	1b03      	subs	r3, r0, r4
 80091bc:	3b15      	subs	r3, #21
 80091be:	f023 0303 	bic.w	r3, r3, #3
 80091c2:	3304      	adds	r3, #4
 80091c4:	f104 0215 	add.w	r2, r4, #21
 80091c8:	4290      	cmp	r0, r2
 80091ca:	bf38      	it	cc
 80091cc:	2304      	movcc	r3, #4
 80091ce:	f841 c003 	str.w	ip, [r1, r3]
 80091d2:	f1bc 0f00 	cmp.w	ip, #0
 80091d6:	d001      	beq.n	80091dc <__lshift+0xac>
 80091d8:	f108 0602 	add.w	r6, r8, #2
 80091dc:	3e01      	subs	r6, #1
 80091de:	4638      	mov	r0, r7
 80091e0:	612e      	str	r6, [r5, #16]
 80091e2:	4621      	mov	r1, r4
 80091e4:	f7ff fdd2 	bl	8008d8c <_Bfree>
 80091e8:	4628      	mov	r0, r5
 80091ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80091f2:	3301      	adds	r3, #1
 80091f4:	e7c1      	b.n	800917a <__lshift+0x4a>
 80091f6:	3904      	subs	r1, #4
 80091f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009200:	4298      	cmp	r0, r3
 8009202:	d8f9      	bhi.n	80091f8 <__lshift+0xc8>
 8009204:	e7ea      	b.n	80091dc <__lshift+0xac>
 8009206:	bf00      	nop
 8009208:	0800badf 	.word	0x0800badf
 800920c:	0800baf0 	.word	0x0800baf0

08009210 <__mcmp>:
 8009210:	b530      	push	{r4, r5, lr}
 8009212:	6902      	ldr	r2, [r0, #16]
 8009214:	690c      	ldr	r4, [r1, #16]
 8009216:	1b12      	subs	r2, r2, r4
 8009218:	d10e      	bne.n	8009238 <__mcmp+0x28>
 800921a:	f100 0314 	add.w	r3, r0, #20
 800921e:	3114      	adds	r1, #20
 8009220:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009224:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009228:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800922c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009230:	42a5      	cmp	r5, r4
 8009232:	d003      	beq.n	800923c <__mcmp+0x2c>
 8009234:	d305      	bcc.n	8009242 <__mcmp+0x32>
 8009236:	2201      	movs	r2, #1
 8009238:	4610      	mov	r0, r2
 800923a:	bd30      	pop	{r4, r5, pc}
 800923c:	4283      	cmp	r3, r0
 800923e:	d3f3      	bcc.n	8009228 <__mcmp+0x18>
 8009240:	e7fa      	b.n	8009238 <__mcmp+0x28>
 8009242:	f04f 32ff 	mov.w	r2, #4294967295
 8009246:	e7f7      	b.n	8009238 <__mcmp+0x28>

08009248 <__mdiff>:
 8009248:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800924c:	460c      	mov	r4, r1
 800924e:	4606      	mov	r6, r0
 8009250:	4611      	mov	r1, r2
 8009252:	4620      	mov	r0, r4
 8009254:	4690      	mov	r8, r2
 8009256:	f7ff ffdb 	bl	8009210 <__mcmp>
 800925a:	1e05      	subs	r5, r0, #0
 800925c:	d110      	bne.n	8009280 <__mdiff+0x38>
 800925e:	4629      	mov	r1, r5
 8009260:	4630      	mov	r0, r6
 8009262:	f7ff fd53 	bl	8008d0c <_Balloc>
 8009266:	b930      	cbnz	r0, 8009276 <__mdiff+0x2e>
 8009268:	4b3a      	ldr	r3, [pc, #232]	; (8009354 <__mdiff+0x10c>)
 800926a:	4602      	mov	r2, r0
 800926c:	f240 2132 	movw	r1, #562	; 0x232
 8009270:	4839      	ldr	r0, [pc, #228]	; (8009358 <__mdiff+0x110>)
 8009272:	f000 fb31 	bl	80098d8 <__assert_func>
 8009276:	2301      	movs	r3, #1
 8009278:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800927c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009280:	bfa4      	itt	ge
 8009282:	4643      	movge	r3, r8
 8009284:	46a0      	movge	r8, r4
 8009286:	4630      	mov	r0, r6
 8009288:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800928c:	bfa6      	itte	ge
 800928e:	461c      	movge	r4, r3
 8009290:	2500      	movge	r5, #0
 8009292:	2501      	movlt	r5, #1
 8009294:	f7ff fd3a 	bl	8008d0c <_Balloc>
 8009298:	b920      	cbnz	r0, 80092a4 <__mdiff+0x5c>
 800929a:	4b2e      	ldr	r3, [pc, #184]	; (8009354 <__mdiff+0x10c>)
 800929c:	4602      	mov	r2, r0
 800929e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092a2:	e7e5      	b.n	8009270 <__mdiff+0x28>
 80092a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80092a8:	6926      	ldr	r6, [r4, #16]
 80092aa:	60c5      	str	r5, [r0, #12]
 80092ac:	f104 0914 	add.w	r9, r4, #20
 80092b0:	f108 0514 	add.w	r5, r8, #20
 80092b4:	f100 0e14 	add.w	lr, r0, #20
 80092b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80092bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80092c0:	f108 0210 	add.w	r2, r8, #16
 80092c4:	46f2      	mov	sl, lr
 80092c6:	2100      	movs	r1, #0
 80092c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80092cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092d0:	fa1f f883 	uxth.w	r8, r3
 80092d4:	fa11 f18b 	uxtah	r1, r1, fp
 80092d8:	0c1b      	lsrs	r3, r3, #16
 80092da:	eba1 0808 	sub.w	r8, r1, r8
 80092de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092e6:	fa1f f888 	uxth.w	r8, r8
 80092ea:	1419      	asrs	r1, r3, #16
 80092ec:	454e      	cmp	r6, r9
 80092ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092f2:	f84a 3b04 	str.w	r3, [sl], #4
 80092f6:	d8e7      	bhi.n	80092c8 <__mdiff+0x80>
 80092f8:	1b33      	subs	r3, r6, r4
 80092fa:	3b15      	subs	r3, #21
 80092fc:	f023 0303 	bic.w	r3, r3, #3
 8009300:	3304      	adds	r3, #4
 8009302:	3415      	adds	r4, #21
 8009304:	42a6      	cmp	r6, r4
 8009306:	bf38      	it	cc
 8009308:	2304      	movcc	r3, #4
 800930a:	441d      	add	r5, r3
 800930c:	4473      	add	r3, lr
 800930e:	469e      	mov	lr, r3
 8009310:	462e      	mov	r6, r5
 8009312:	4566      	cmp	r6, ip
 8009314:	d30e      	bcc.n	8009334 <__mdiff+0xec>
 8009316:	f10c 0203 	add.w	r2, ip, #3
 800931a:	1b52      	subs	r2, r2, r5
 800931c:	f022 0203 	bic.w	r2, r2, #3
 8009320:	3d03      	subs	r5, #3
 8009322:	45ac      	cmp	ip, r5
 8009324:	bf38      	it	cc
 8009326:	2200      	movcc	r2, #0
 8009328:	441a      	add	r2, r3
 800932a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800932e:	b17b      	cbz	r3, 8009350 <__mdiff+0x108>
 8009330:	6107      	str	r7, [r0, #16]
 8009332:	e7a3      	b.n	800927c <__mdiff+0x34>
 8009334:	f856 8b04 	ldr.w	r8, [r6], #4
 8009338:	fa11 f288 	uxtah	r2, r1, r8
 800933c:	1414      	asrs	r4, r2, #16
 800933e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009342:	b292      	uxth	r2, r2
 8009344:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009348:	f84e 2b04 	str.w	r2, [lr], #4
 800934c:	1421      	asrs	r1, r4, #16
 800934e:	e7e0      	b.n	8009312 <__mdiff+0xca>
 8009350:	3f01      	subs	r7, #1
 8009352:	e7ea      	b.n	800932a <__mdiff+0xe2>
 8009354:	0800badf 	.word	0x0800badf
 8009358:	0800baf0 	.word	0x0800baf0

0800935c <__d2b>:
 800935c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009360:	4689      	mov	r9, r1
 8009362:	2101      	movs	r1, #1
 8009364:	ec57 6b10 	vmov	r6, r7, d0
 8009368:	4690      	mov	r8, r2
 800936a:	f7ff fccf 	bl	8008d0c <_Balloc>
 800936e:	4604      	mov	r4, r0
 8009370:	b930      	cbnz	r0, 8009380 <__d2b+0x24>
 8009372:	4602      	mov	r2, r0
 8009374:	4b25      	ldr	r3, [pc, #148]	; (800940c <__d2b+0xb0>)
 8009376:	4826      	ldr	r0, [pc, #152]	; (8009410 <__d2b+0xb4>)
 8009378:	f240 310a 	movw	r1, #778	; 0x30a
 800937c:	f000 faac 	bl	80098d8 <__assert_func>
 8009380:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009384:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009388:	bb35      	cbnz	r5, 80093d8 <__d2b+0x7c>
 800938a:	2e00      	cmp	r6, #0
 800938c:	9301      	str	r3, [sp, #4]
 800938e:	d028      	beq.n	80093e2 <__d2b+0x86>
 8009390:	4668      	mov	r0, sp
 8009392:	9600      	str	r6, [sp, #0]
 8009394:	f7ff fd82 	bl	8008e9c <__lo0bits>
 8009398:	9900      	ldr	r1, [sp, #0]
 800939a:	b300      	cbz	r0, 80093de <__d2b+0x82>
 800939c:	9a01      	ldr	r2, [sp, #4]
 800939e:	f1c0 0320 	rsb	r3, r0, #32
 80093a2:	fa02 f303 	lsl.w	r3, r2, r3
 80093a6:	430b      	orrs	r3, r1
 80093a8:	40c2      	lsrs	r2, r0
 80093aa:	6163      	str	r3, [r4, #20]
 80093ac:	9201      	str	r2, [sp, #4]
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	61a3      	str	r3, [r4, #24]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	bf14      	ite	ne
 80093b6:	2202      	movne	r2, #2
 80093b8:	2201      	moveq	r2, #1
 80093ba:	6122      	str	r2, [r4, #16]
 80093bc:	b1d5      	cbz	r5, 80093f4 <__d2b+0x98>
 80093be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093c2:	4405      	add	r5, r0
 80093c4:	f8c9 5000 	str.w	r5, [r9]
 80093c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093cc:	f8c8 0000 	str.w	r0, [r8]
 80093d0:	4620      	mov	r0, r4
 80093d2:	b003      	add	sp, #12
 80093d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093dc:	e7d5      	b.n	800938a <__d2b+0x2e>
 80093de:	6161      	str	r1, [r4, #20]
 80093e0:	e7e5      	b.n	80093ae <__d2b+0x52>
 80093e2:	a801      	add	r0, sp, #4
 80093e4:	f7ff fd5a 	bl	8008e9c <__lo0bits>
 80093e8:	9b01      	ldr	r3, [sp, #4]
 80093ea:	6163      	str	r3, [r4, #20]
 80093ec:	2201      	movs	r2, #1
 80093ee:	6122      	str	r2, [r4, #16]
 80093f0:	3020      	adds	r0, #32
 80093f2:	e7e3      	b.n	80093bc <__d2b+0x60>
 80093f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093fc:	f8c9 0000 	str.w	r0, [r9]
 8009400:	6918      	ldr	r0, [r3, #16]
 8009402:	f7ff fd2b 	bl	8008e5c <__hi0bits>
 8009406:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800940a:	e7df      	b.n	80093cc <__d2b+0x70>
 800940c:	0800badf 	.word	0x0800badf
 8009410:	0800baf0 	.word	0x0800baf0

08009414 <_calloc_r>:
 8009414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009416:	fba1 2402 	umull	r2, r4, r1, r2
 800941a:	b94c      	cbnz	r4, 8009430 <_calloc_r+0x1c>
 800941c:	4611      	mov	r1, r2
 800941e:	9201      	str	r2, [sp, #4]
 8009420:	f000 f87a 	bl	8009518 <_malloc_r>
 8009424:	9a01      	ldr	r2, [sp, #4]
 8009426:	4605      	mov	r5, r0
 8009428:	b930      	cbnz	r0, 8009438 <_calloc_r+0x24>
 800942a:	4628      	mov	r0, r5
 800942c:	b003      	add	sp, #12
 800942e:	bd30      	pop	{r4, r5, pc}
 8009430:	220c      	movs	r2, #12
 8009432:	6002      	str	r2, [r0, #0]
 8009434:	2500      	movs	r5, #0
 8009436:	e7f8      	b.n	800942a <_calloc_r+0x16>
 8009438:	4621      	mov	r1, r4
 800943a:	f7fe f94f 	bl	80076dc <memset>
 800943e:	e7f4      	b.n	800942a <_calloc_r+0x16>

08009440 <_free_r>:
 8009440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009442:	2900      	cmp	r1, #0
 8009444:	d044      	beq.n	80094d0 <_free_r+0x90>
 8009446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800944a:	9001      	str	r0, [sp, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	f1a1 0404 	sub.w	r4, r1, #4
 8009452:	bfb8      	it	lt
 8009454:	18e4      	addlt	r4, r4, r3
 8009456:	f000 fa9b 	bl	8009990 <__malloc_lock>
 800945a:	4a1e      	ldr	r2, [pc, #120]	; (80094d4 <_free_r+0x94>)
 800945c:	9801      	ldr	r0, [sp, #4]
 800945e:	6813      	ldr	r3, [r2, #0]
 8009460:	b933      	cbnz	r3, 8009470 <_free_r+0x30>
 8009462:	6063      	str	r3, [r4, #4]
 8009464:	6014      	str	r4, [r2, #0]
 8009466:	b003      	add	sp, #12
 8009468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800946c:	f000 ba96 	b.w	800999c <__malloc_unlock>
 8009470:	42a3      	cmp	r3, r4
 8009472:	d908      	bls.n	8009486 <_free_r+0x46>
 8009474:	6825      	ldr	r5, [r4, #0]
 8009476:	1961      	adds	r1, r4, r5
 8009478:	428b      	cmp	r3, r1
 800947a:	bf01      	itttt	eq
 800947c:	6819      	ldreq	r1, [r3, #0]
 800947e:	685b      	ldreq	r3, [r3, #4]
 8009480:	1949      	addeq	r1, r1, r5
 8009482:	6021      	streq	r1, [r4, #0]
 8009484:	e7ed      	b.n	8009462 <_free_r+0x22>
 8009486:	461a      	mov	r2, r3
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	b10b      	cbz	r3, 8009490 <_free_r+0x50>
 800948c:	42a3      	cmp	r3, r4
 800948e:	d9fa      	bls.n	8009486 <_free_r+0x46>
 8009490:	6811      	ldr	r1, [r2, #0]
 8009492:	1855      	adds	r5, r2, r1
 8009494:	42a5      	cmp	r5, r4
 8009496:	d10b      	bne.n	80094b0 <_free_r+0x70>
 8009498:	6824      	ldr	r4, [r4, #0]
 800949a:	4421      	add	r1, r4
 800949c:	1854      	adds	r4, r2, r1
 800949e:	42a3      	cmp	r3, r4
 80094a0:	6011      	str	r1, [r2, #0]
 80094a2:	d1e0      	bne.n	8009466 <_free_r+0x26>
 80094a4:	681c      	ldr	r4, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	6053      	str	r3, [r2, #4]
 80094aa:	4421      	add	r1, r4
 80094ac:	6011      	str	r1, [r2, #0]
 80094ae:	e7da      	b.n	8009466 <_free_r+0x26>
 80094b0:	d902      	bls.n	80094b8 <_free_r+0x78>
 80094b2:	230c      	movs	r3, #12
 80094b4:	6003      	str	r3, [r0, #0]
 80094b6:	e7d6      	b.n	8009466 <_free_r+0x26>
 80094b8:	6825      	ldr	r5, [r4, #0]
 80094ba:	1961      	adds	r1, r4, r5
 80094bc:	428b      	cmp	r3, r1
 80094be:	bf04      	itt	eq
 80094c0:	6819      	ldreq	r1, [r3, #0]
 80094c2:	685b      	ldreq	r3, [r3, #4]
 80094c4:	6063      	str	r3, [r4, #4]
 80094c6:	bf04      	itt	eq
 80094c8:	1949      	addeq	r1, r1, r5
 80094ca:	6021      	streq	r1, [r4, #0]
 80094cc:	6054      	str	r4, [r2, #4]
 80094ce:	e7ca      	b.n	8009466 <_free_r+0x26>
 80094d0:	b003      	add	sp, #12
 80094d2:	bd30      	pop	{r4, r5, pc}
 80094d4:	20000b28 	.word	0x20000b28

080094d8 <sbrk_aligned>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	4e0e      	ldr	r6, [pc, #56]	; (8009514 <sbrk_aligned+0x3c>)
 80094dc:	460c      	mov	r4, r1
 80094de:	6831      	ldr	r1, [r6, #0]
 80094e0:	4605      	mov	r5, r0
 80094e2:	b911      	cbnz	r1, 80094ea <sbrk_aligned+0x12>
 80094e4:	f000 f9e8 	bl	80098b8 <_sbrk_r>
 80094e8:	6030      	str	r0, [r6, #0]
 80094ea:	4621      	mov	r1, r4
 80094ec:	4628      	mov	r0, r5
 80094ee:	f000 f9e3 	bl	80098b8 <_sbrk_r>
 80094f2:	1c43      	adds	r3, r0, #1
 80094f4:	d00a      	beq.n	800950c <sbrk_aligned+0x34>
 80094f6:	1cc4      	adds	r4, r0, #3
 80094f8:	f024 0403 	bic.w	r4, r4, #3
 80094fc:	42a0      	cmp	r0, r4
 80094fe:	d007      	beq.n	8009510 <sbrk_aligned+0x38>
 8009500:	1a21      	subs	r1, r4, r0
 8009502:	4628      	mov	r0, r5
 8009504:	f000 f9d8 	bl	80098b8 <_sbrk_r>
 8009508:	3001      	adds	r0, #1
 800950a:	d101      	bne.n	8009510 <sbrk_aligned+0x38>
 800950c:	f04f 34ff 	mov.w	r4, #4294967295
 8009510:	4620      	mov	r0, r4
 8009512:	bd70      	pop	{r4, r5, r6, pc}
 8009514:	20000b2c 	.word	0x20000b2c

08009518 <_malloc_r>:
 8009518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800951c:	1ccd      	adds	r5, r1, #3
 800951e:	f025 0503 	bic.w	r5, r5, #3
 8009522:	3508      	adds	r5, #8
 8009524:	2d0c      	cmp	r5, #12
 8009526:	bf38      	it	cc
 8009528:	250c      	movcc	r5, #12
 800952a:	2d00      	cmp	r5, #0
 800952c:	4607      	mov	r7, r0
 800952e:	db01      	blt.n	8009534 <_malloc_r+0x1c>
 8009530:	42a9      	cmp	r1, r5
 8009532:	d905      	bls.n	8009540 <_malloc_r+0x28>
 8009534:	230c      	movs	r3, #12
 8009536:	603b      	str	r3, [r7, #0]
 8009538:	2600      	movs	r6, #0
 800953a:	4630      	mov	r0, r6
 800953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009540:	4e2e      	ldr	r6, [pc, #184]	; (80095fc <_malloc_r+0xe4>)
 8009542:	f000 fa25 	bl	8009990 <__malloc_lock>
 8009546:	6833      	ldr	r3, [r6, #0]
 8009548:	461c      	mov	r4, r3
 800954a:	bb34      	cbnz	r4, 800959a <_malloc_r+0x82>
 800954c:	4629      	mov	r1, r5
 800954e:	4638      	mov	r0, r7
 8009550:	f7ff ffc2 	bl	80094d8 <sbrk_aligned>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	4604      	mov	r4, r0
 8009558:	d14d      	bne.n	80095f6 <_malloc_r+0xde>
 800955a:	6834      	ldr	r4, [r6, #0]
 800955c:	4626      	mov	r6, r4
 800955e:	2e00      	cmp	r6, #0
 8009560:	d140      	bne.n	80095e4 <_malloc_r+0xcc>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	4631      	mov	r1, r6
 8009566:	4638      	mov	r0, r7
 8009568:	eb04 0803 	add.w	r8, r4, r3
 800956c:	f000 f9a4 	bl	80098b8 <_sbrk_r>
 8009570:	4580      	cmp	r8, r0
 8009572:	d13a      	bne.n	80095ea <_malloc_r+0xd2>
 8009574:	6821      	ldr	r1, [r4, #0]
 8009576:	3503      	adds	r5, #3
 8009578:	1a6d      	subs	r5, r5, r1
 800957a:	f025 0503 	bic.w	r5, r5, #3
 800957e:	3508      	adds	r5, #8
 8009580:	2d0c      	cmp	r5, #12
 8009582:	bf38      	it	cc
 8009584:	250c      	movcc	r5, #12
 8009586:	4629      	mov	r1, r5
 8009588:	4638      	mov	r0, r7
 800958a:	f7ff ffa5 	bl	80094d8 <sbrk_aligned>
 800958e:	3001      	adds	r0, #1
 8009590:	d02b      	beq.n	80095ea <_malloc_r+0xd2>
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	442b      	add	r3, r5
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	e00e      	b.n	80095b8 <_malloc_r+0xa0>
 800959a:	6822      	ldr	r2, [r4, #0]
 800959c:	1b52      	subs	r2, r2, r5
 800959e:	d41e      	bmi.n	80095de <_malloc_r+0xc6>
 80095a0:	2a0b      	cmp	r2, #11
 80095a2:	d916      	bls.n	80095d2 <_malloc_r+0xba>
 80095a4:	1961      	adds	r1, r4, r5
 80095a6:	42a3      	cmp	r3, r4
 80095a8:	6025      	str	r5, [r4, #0]
 80095aa:	bf18      	it	ne
 80095ac:	6059      	strne	r1, [r3, #4]
 80095ae:	6863      	ldr	r3, [r4, #4]
 80095b0:	bf08      	it	eq
 80095b2:	6031      	streq	r1, [r6, #0]
 80095b4:	5162      	str	r2, [r4, r5]
 80095b6:	604b      	str	r3, [r1, #4]
 80095b8:	4638      	mov	r0, r7
 80095ba:	f104 060b 	add.w	r6, r4, #11
 80095be:	f000 f9ed 	bl	800999c <__malloc_unlock>
 80095c2:	f026 0607 	bic.w	r6, r6, #7
 80095c6:	1d23      	adds	r3, r4, #4
 80095c8:	1af2      	subs	r2, r6, r3
 80095ca:	d0b6      	beq.n	800953a <_malloc_r+0x22>
 80095cc:	1b9b      	subs	r3, r3, r6
 80095ce:	50a3      	str	r3, [r4, r2]
 80095d0:	e7b3      	b.n	800953a <_malloc_r+0x22>
 80095d2:	6862      	ldr	r2, [r4, #4]
 80095d4:	42a3      	cmp	r3, r4
 80095d6:	bf0c      	ite	eq
 80095d8:	6032      	streq	r2, [r6, #0]
 80095da:	605a      	strne	r2, [r3, #4]
 80095dc:	e7ec      	b.n	80095b8 <_malloc_r+0xa0>
 80095de:	4623      	mov	r3, r4
 80095e0:	6864      	ldr	r4, [r4, #4]
 80095e2:	e7b2      	b.n	800954a <_malloc_r+0x32>
 80095e4:	4634      	mov	r4, r6
 80095e6:	6876      	ldr	r6, [r6, #4]
 80095e8:	e7b9      	b.n	800955e <_malloc_r+0x46>
 80095ea:	230c      	movs	r3, #12
 80095ec:	603b      	str	r3, [r7, #0]
 80095ee:	4638      	mov	r0, r7
 80095f0:	f000 f9d4 	bl	800999c <__malloc_unlock>
 80095f4:	e7a1      	b.n	800953a <_malloc_r+0x22>
 80095f6:	6025      	str	r5, [r4, #0]
 80095f8:	e7de      	b.n	80095b8 <_malloc_r+0xa0>
 80095fa:	bf00      	nop
 80095fc:	20000b28 	.word	0x20000b28

08009600 <__ssputs_r>:
 8009600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009604:	688e      	ldr	r6, [r1, #8]
 8009606:	429e      	cmp	r6, r3
 8009608:	4682      	mov	sl, r0
 800960a:	460c      	mov	r4, r1
 800960c:	4690      	mov	r8, r2
 800960e:	461f      	mov	r7, r3
 8009610:	d838      	bhi.n	8009684 <__ssputs_r+0x84>
 8009612:	898a      	ldrh	r2, [r1, #12]
 8009614:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009618:	d032      	beq.n	8009680 <__ssputs_r+0x80>
 800961a:	6825      	ldr	r5, [r4, #0]
 800961c:	6909      	ldr	r1, [r1, #16]
 800961e:	eba5 0901 	sub.w	r9, r5, r1
 8009622:	6965      	ldr	r5, [r4, #20]
 8009624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009628:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800962c:	3301      	adds	r3, #1
 800962e:	444b      	add	r3, r9
 8009630:	106d      	asrs	r5, r5, #1
 8009632:	429d      	cmp	r5, r3
 8009634:	bf38      	it	cc
 8009636:	461d      	movcc	r5, r3
 8009638:	0553      	lsls	r3, r2, #21
 800963a:	d531      	bpl.n	80096a0 <__ssputs_r+0xa0>
 800963c:	4629      	mov	r1, r5
 800963e:	f7ff ff6b 	bl	8009518 <_malloc_r>
 8009642:	4606      	mov	r6, r0
 8009644:	b950      	cbnz	r0, 800965c <__ssputs_r+0x5c>
 8009646:	230c      	movs	r3, #12
 8009648:	f8ca 3000 	str.w	r3, [sl]
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009652:	81a3      	strh	r3, [r4, #12]
 8009654:	f04f 30ff 	mov.w	r0, #4294967295
 8009658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800965c:	6921      	ldr	r1, [r4, #16]
 800965e:	464a      	mov	r2, r9
 8009660:	f7fe f82e 	bl	80076c0 <memcpy>
 8009664:	89a3      	ldrh	r3, [r4, #12]
 8009666:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800966a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800966e:	81a3      	strh	r3, [r4, #12]
 8009670:	6126      	str	r6, [r4, #16]
 8009672:	6165      	str	r5, [r4, #20]
 8009674:	444e      	add	r6, r9
 8009676:	eba5 0509 	sub.w	r5, r5, r9
 800967a:	6026      	str	r6, [r4, #0]
 800967c:	60a5      	str	r5, [r4, #8]
 800967e:	463e      	mov	r6, r7
 8009680:	42be      	cmp	r6, r7
 8009682:	d900      	bls.n	8009686 <__ssputs_r+0x86>
 8009684:	463e      	mov	r6, r7
 8009686:	6820      	ldr	r0, [r4, #0]
 8009688:	4632      	mov	r2, r6
 800968a:	4641      	mov	r1, r8
 800968c:	f000 f966 	bl	800995c <memmove>
 8009690:	68a3      	ldr	r3, [r4, #8]
 8009692:	1b9b      	subs	r3, r3, r6
 8009694:	60a3      	str	r3, [r4, #8]
 8009696:	6823      	ldr	r3, [r4, #0]
 8009698:	4433      	add	r3, r6
 800969a:	6023      	str	r3, [r4, #0]
 800969c:	2000      	movs	r0, #0
 800969e:	e7db      	b.n	8009658 <__ssputs_r+0x58>
 80096a0:	462a      	mov	r2, r5
 80096a2:	f000 f981 	bl	80099a8 <_realloc_r>
 80096a6:	4606      	mov	r6, r0
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d1e1      	bne.n	8009670 <__ssputs_r+0x70>
 80096ac:	6921      	ldr	r1, [r4, #16]
 80096ae:	4650      	mov	r0, sl
 80096b0:	f7ff fec6 	bl	8009440 <_free_r>
 80096b4:	e7c7      	b.n	8009646 <__ssputs_r+0x46>
	...

080096b8 <_svfiprintf_r>:
 80096b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	4698      	mov	r8, r3
 80096be:	898b      	ldrh	r3, [r1, #12]
 80096c0:	061b      	lsls	r3, r3, #24
 80096c2:	b09d      	sub	sp, #116	; 0x74
 80096c4:	4607      	mov	r7, r0
 80096c6:	460d      	mov	r5, r1
 80096c8:	4614      	mov	r4, r2
 80096ca:	d50e      	bpl.n	80096ea <_svfiprintf_r+0x32>
 80096cc:	690b      	ldr	r3, [r1, #16]
 80096ce:	b963      	cbnz	r3, 80096ea <_svfiprintf_r+0x32>
 80096d0:	2140      	movs	r1, #64	; 0x40
 80096d2:	f7ff ff21 	bl	8009518 <_malloc_r>
 80096d6:	6028      	str	r0, [r5, #0]
 80096d8:	6128      	str	r0, [r5, #16]
 80096da:	b920      	cbnz	r0, 80096e6 <_svfiprintf_r+0x2e>
 80096dc:	230c      	movs	r3, #12
 80096de:	603b      	str	r3, [r7, #0]
 80096e0:	f04f 30ff 	mov.w	r0, #4294967295
 80096e4:	e0d1      	b.n	800988a <_svfiprintf_r+0x1d2>
 80096e6:	2340      	movs	r3, #64	; 0x40
 80096e8:	616b      	str	r3, [r5, #20]
 80096ea:	2300      	movs	r3, #0
 80096ec:	9309      	str	r3, [sp, #36]	; 0x24
 80096ee:	2320      	movs	r3, #32
 80096f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f8:	2330      	movs	r3, #48	; 0x30
 80096fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098a4 <_svfiprintf_r+0x1ec>
 80096fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009702:	f04f 0901 	mov.w	r9, #1
 8009706:	4623      	mov	r3, r4
 8009708:	469a      	mov	sl, r3
 800970a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800970e:	b10a      	cbz	r2, 8009714 <_svfiprintf_r+0x5c>
 8009710:	2a25      	cmp	r2, #37	; 0x25
 8009712:	d1f9      	bne.n	8009708 <_svfiprintf_r+0x50>
 8009714:	ebba 0b04 	subs.w	fp, sl, r4
 8009718:	d00b      	beq.n	8009732 <_svfiprintf_r+0x7a>
 800971a:	465b      	mov	r3, fp
 800971c:	4622      	mov	r2, r4
 800971e:	4629      	mov	r1, r5
 8009720:	4638      	mov	r0, r7
 8009722:	f7ff ff6d 	bl	8009600 <__ssputs_r>
 8009726:	3001      	adds	r0, #1
 8009728:	f000 80aa 	beq.w	8009880 <_svfiprintf_r+0x1c8>
 800972c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800972e:	445a      	add	r2, fp
 8009730:	9209      	str	r2, [sp, #36]	; 0x24
 8009732:	f89a 3000 	ldrb.w	r3, [sl]
 8009736:	2b00      	cmp	r3, #0
 8009738:	f000 80a2 	beq.w	8009880 <_svfiprintf_r+0x1c8>
 800973c:	2300      	movs	r3, #0
 800973e:	f04f 32ff 	mov.w	r2, #4294967295
 8009742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009746:	f10a 0a01 	add.w	sl, sl, #1
 800974a:	9304      	str	r3, [sp, #16]
 800974c:	9307      	str	r3, [sp, #28]
 800974e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009752:	931a      	str	r3, [sp, #104]	; 0x68
 8009754:	4654      	mov	r4, sl
 8009756:	2205      	movs	r2, #5
 8009758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800975c:	4851      	ldr	r0, [pc, #324]	; (80098a4 <_svfiprintf_r+0x1ec>)
 800975e:	f7f6 fd5f 	bl	8000220 <memchr>
 8009762:	9a04      	ldr	r2, [sp, #16]
 8009764:	b9d8      	cbnz	r0, 800979e <_svfiprintf_r+0xe6>
 8009766:	06d0      	lsls	r0, r2, #27
 8009768:	bf44      	itt	mi
 800976a:	2320      	movmi	r3, #32
 800976c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009770:	0711      	lsls	r1, r2, #28
 8009772:	bf44      	itt	mi
 8009774:	232b      	movmi	r3, #43	; 0x2b
 8009776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800977a:	f89a 3000 	ldrb.w	r3, [sl]
 800977e:	2b2a      	cmp	r3, #42	; 0x2a
 8009780:	d015      	beq.n	80097ae <_svfiprintf_r+0xf6>
 8009782:	9a07      	ldr	r2, [sp, #28]
 8009784:	4654      	mov	r4, sl
 8009786:	2000      	movs	r0, #0
 8009788:	f04f 0c0a 	mov.w	ip, #10
 800978c:	4621      	mov	r1, r4
 800978e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009792:	3b30      	subs	r3, #48	; 0x30
 8009794:	2b09      	cmp	r3, #9
 8009796:	d94e      	bls.n	8009836 <_svfiprintf_r+0x17e>
 8009798:	b1b0      	cbz	r0, 80097c8 <_svfiprintf_r+0x110>
 800979a:	9207      	str	r2, [sp, #28]
 800979c:	e014      	b.n	80097c8 <_svfiprintf_r+0x110>
 800979e:	eba0 0308 	sub.w	r3, r0, r8
 80097a2:	fa09 f303 	lsl.w	r3, r9, r3
 80097a6:	4313      	orrs	r3, r2
 80097a8:	9304      	str	r3, [sp, #16]
 80097aa:	46a2      	mov	sl, r4
 80097ac:	e7d2      	b.n	8009754 <_svfiprintf_r+0x9c>
 80097ae:	9b03      	ldr	r3, [sp, #12]
 80097b0:	1d19      	adds	r1, r3, #4
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	9103      	str	r1, [sp, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	bfbb      	ittet	lt
 80097ba:	425b      	neglt	r3, r3
 80097bc:	f042 0202 	orrlt.w	r2, r2, #2
 80097c0:	9307      	strge	r3, [sp, #28]
 80097c2:	9307      	strlt	r3, [sp, #28]
 80097c4:	bfb8      	it	lt
 80097c6:	9204      	strlt	r2, [sp, #16]
 80097c8:	7823      	ldrb	r3, [r4, #0]
 80097ca:	2b2e      	cmp	r3, #46	; 0x2e
 80097cc:	d10c      	bne.n	80097e8 <_svfiprintf_r+0x130>
 80097ce:	7863      	ldrb	r3, [r4, #1]
 80097d0:	2b2a      	cmp	r3, #42	; 0x2a
 80097d2:	d135      	bne.n	8009840 <_svfiprintf_r+0x188>
 80097d4:	9b03      	ldr	r3, [sp, #12]
 80097d6:	1d1a      	adds	r2, r3, #4
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	9203      	str	r2, [sp, #12]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	bfb8      	it	lt
 80097e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80097e4:	3402      	adds	r4, #2
 80097e6:	9305      	str	r3, [sp, #20]
 80097e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098b4 <_svfiprintf_r+0x1fc>
 80097ec:	7821      	ldrb	r1, [r4, #0]
 80097ee:	2203      	movs	r2, #3
 80097f0:	4650      	mov	r0, sl
 80097f2:	f7f6 fd15 	bl	8000220 <memchr>
 80097f6:	b140      	cbz	r0, 800980a <_svfiprintf_r+0x152>
 80097f8:	2340      	movs	r3, #64	; 0x40
 80097fa:	eba0 000a 	sub.w	r0, r0, sl
 80097fe:	fa03 f000 	lsl.w	r0, r3, r0
 8009802:	9b04      	ldr	r3, [sp, #16]
 8009804:	4303      	orrs	r3, r0
 8009806:	3401      	adds	r4, #1
 8009808:	9304      	str	r3, [sp, #16]
 800980a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800980e:	4826      	ldr	r0, [pc, #152]	; (80098a8 <_svfiprintf_r+0x1f0>)
 8009810:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009814:	2206      	movs	r2, #6
 8009816:	f7f6 fd03 	bl	8000220 <memchr>
 800981a:	2800      	cmp	r0, #0
 800981c:	d038      	beq.n	8009890 <_svfiprintf_r+0x1d8>
 800981e:	4b23      	ldr	r3, [pc, #140]	; (80098ac <_svfiprintf_r+0x1f4>)
 8009820:	bb1b      	cbnz	r3, 800986a <_svfiprintf_r+0x1b2>
 8009822:	9b03      	ldr	r3, [sp, #12]
 8009824:	3307      	adds	r3, #7
 8009826:	f023 0307 	bic.w	r3, r3, #7
 800982a:	3308      	adds	r3, #8
 800982c:	9303      	str	r3, [sp, #12]
 800982e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009830:	4433      	add	r3, r6
 8009832:	9309      	str	r3, [sp, #36]	; 0x24
 8009834:	e767      	b.n	8009706 <_svfiprintf_r+0x4e>
 8009836:	fb0c 3202 	mla	r2, ip, r2, r3
 800983a:	460c      	mov	r4, r1
 800983c:	2001      	movs	r0, #1
 800983e:	e7a5      	b.n	800978c <_svfiprintf_r+0xd4>
 8009840:	2300      	movs	r3, #0
 8009842:	3401      	adds	r4, #1
 8009844:	9305      	str	r3, [sp, #20]
 8009846:	4619      	mov	r1, r3
 8009848:	f04f 0c0a 	mov.w	ip, #10
 800984c:	4620      	mov	r0, r4
 800984e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009852:	3a30      	subs	r2, #48	; 0x30
 8009854:	2a09      	cmp	r2, #9
 8009856:	d903      	bls.n	8009860 <_svfiprintf_r+0x1a8>
 8009858:	2b00      	cmp	r3, #0
 800985a:	d0c5      	beq.n	80097e8 <_svfiprintf_r+0x130>
 800985c:	9105      	str	r1, [sp, #20]
 800985e:	e7c3      	b.n	80097e8 <_svfiprintf_r+0x130>
 8009860:	fb0c 2101 	mla	r1, ip, r1, r2
 8009864:	4604      	mov	r4, r0
 8009866:	2301      	movs	r3, #1
 8009868:	e7f0      	b.n	800984c <_svfiprintf_r+0x194>
 800986a:	ab03      	add	r3, sp, #12
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	462a      	mov	r2, r5
 8009870:	4b0f      	ldr	r3, [pc, #60]	; (80098b0 <_svfiprintf_r+0x1f8>)
 8009872:	a904      	add	r1, sp, #16
 8009874:	4638      	mov	r0, r7
 8009876:	f7fd ffd9 	bl	800782c <_printf_float>
 800987a:	1c42      	adds	r2, r0, #1
 800987c:	4606      	mov	r6, r0
 800987e:	d1d6      	bne.n	800982e <_svfiprintf_r+0x176>
 8009880:	89ab      	ldrh	r3, [r5, #12]
 8009882:	065b      	lsls	r3, r3, #25
 8009884:	f53f af2c 	bmi.w	80096e0 <_svfiprintf_r+0x28>
 8009888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800988a:	b01d      	add	sp, #116	; 0x74
 800988c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009890:	ab03      	add	r3, sp, #12
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	462a      	mov	r2, r5
 8009896:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <_svfiprintf_r+0x1f8>)
 8009898:	a904      	add	r1, sp, #16
 800989a:	4638      	mov	r0, r7
 800989c:	f7fe fa6a 	bl	8007d74 <_printf_i>
 80098a0:	e7eb      	b.n	800987a <_svfiprintf_r+0x1c2>
 80098a2:	bf00      	nop
 80098a4:	0800bc4c 	.word	0x0800bc4c
 80098a8:	0800bc56 	.word	0x0800bc56
 80098ac:	0800782d 	.word	0x0800782d
 80098b0:	08009601 	.word	0x08009601
 80098b4:	0800bc52 	.word	0x0800bc52

080098b8 <_sbrk_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	4d06      	ldr	r5, [pc, #24]	; (80098d4 <_sbrk_r+0x1c>)
 80098bc:	2300      	movs	r3, #0
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	602b      	str	r3, [r5, #0]
 80098c4:	f002 f86e 	bl	800b9a4 <_sbrk>
 80098c8:	1c43      	adds	r3, r0, #1
 80098ca:	d102      	bne.n	80098d2 <_sbrk_r+0x1a>
 80098cc:	682b      	ldr	r3, [r5, #0]
 80098ce:	b103      	cbz	r3, 80098d2 <_sbrk_r+0x1a>
 80098d0:	6023      	str	r3, [r4, #0]
 80098d2:	bd38      	pop	{r3, r4, r5, pc}
 80098d4:	20000b30 	.word	0x20000b30

080098d8 <__assert_func>:
 80098d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098da:	4614      	mov	r4, r2
 80098dc:	461a      	mov	r2, r3
 80098de:	4b09      	ldr	r3, [pc, #36]	; (8009904 <__assert_func+0x2c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4605      	mov	r5, r0
 80098e4:	68d8      	ldr	r0, [r3, #12]
 80098e6:	b14c      	cbz	r4, 80098fc <__assert_func+0x24>
 80098e8:	4b07      	ldr	r3, [pc, #28]	; (8009908 <__assert_func+0x30>)
 80098ea:	9100      	str	r1, [sp, #0]
 80098ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098f0:	4906      	ldr	r1, [pc, #24]	; (800990c <__assert_func+0x34>)
 80098f2:	462b      	mov	r3, r5
 80098f4:	f000 f80e 	bl	8009914 <fiprintf>
 80098f8:	f000 faac 	bl	8009e54 <abort>
 80098fc:	4b04      	ldr	r3, [pc, #16]	; (8009910 <__assert_func+0x38>)
 80098fe:	461c      	mov	r4, r3
 8009900:	e7f3      	b.n	80098ea <__assert_func+0x12>
 8009902:	bf00      	nop
 8009904:	20000018 	.word	0x20000018
 8009908:	0800bc5d 	.word	0x0800bc5d
 800990c:	0800bc6a 	.word	0x0800bc6a
 8009910:	0800bc98 	.word	0x0800bc98

08009914 <fiprintf>:
 8009914:	b40e      	push	{r1, r2, r3}
 8009916:	b503      	push	{r0, r1, lr}
 8009918:	4601      	mov	r1, r0
 800991a:	ab03      	add	r3, sp, #12
 800991c:	4805      	ldr	r0, [pc, #20]	; (8009934 <fiprintf+0x20>)
 800991e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009922:	6800      	ldr	r0, [r0, #0]
 8009924:	9301      	str	r3, [sp, #4]
 8009926:	f000 f897 	bl	8009a58 <_vfiprintf_r>
 800992a:	b002      	add	sp, #8
 800992c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009930:	b003      	add	sp, #12
 8009932:	4770      	bx	lr
 8009934:	20000018 	.word	0x20000018

08009938 <__ascii_mbtowc>:
 8009938:	b082      	sub	sp, #8
 800993a:	b901      	cbnz	r1, 800993e <__ascii_mbtowc+0x6>
 800993c:	a901      	add	r1, sp, #4
 800993e:	b142      	cbz	r2, 8009952 <__ascii_mbtowc+0x1a>
 8009940:	b14b      	cbz	r3, 8009956 <__ascii_mbtowc+0x1e>
 8009942:	7813      	ldrb	r3, [r2, #0]
 8009944:	600b      	str	r3, [r1, #0]
 8009946:	7812      	ldrb	r2, [r2, #0]
 8009948:	1e10      	subs	r0, r2, #0
 800994a:	bf18      	it	ne
 800994c:	2001      	movne	r0, #1
 800994e:	b002      	add	sp, #8
 8009950:	4770      	bx	lr
 8009952:	4610      	mov	r0, r2
 8009954:	e7fb      	b.n	800994e <__ascii_mbtowc+0x16>
 8009956:	f06f 0001 	mvn.w	r0, #1
 800995a:	e7f8      	b.n	800994e <__ascii_mbtowc+0x16>

0800995c <memmove>:
 800995c:	4288      	cmp	r0, r1
 800995e:	b510      	push	{r4, lr}
 8009960:	eb01 0402 	add.w	r4, r1, r2
 8009964:	d902      	bls.n	800996c <memmove+0x10>
 8009966:	4284      	cmp	r4, r0
 8009968:	4623      	mov	r3, r4
 800996a:	d807      	bhi.n	800997c <memmove+0x20>
 800996c:	1e43      	subs	r3, r0, #1
 800996e:	42a1      	cmp	r1, r4
 8009970:	d008      	beq.n	8009984 <memmove+0x28>
 8009972:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009976:	f803 2f01 	strb.w	r2, [r3, #1]!
 800997a:	e7f8      	b.n	800996e <memmove+0x12>
 800997c:	4402      	add	r2, r0
 800997e:	4601      	mov	r1, r0
 8009980:	428a      	cmp	r2, r1
 8009982:	d100      	bne.n	8009986 <memmove+0x2a>
 8009984:	bd10      	pop	{r4, pc}
 8009986:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800998a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800998e:	e7f7      	b.n	8009980 <memmove+0x24>

08009990 <__malloc_lock>:
 8009990:	4801      	ldr	r0, [pc, #4]	; (8009998 <__malloc_lock+0x8>)
 8009992:	f000 bc1f 	b.w	800a1d4 <__retarget_lock_acquire_recursive>
 8009996:	bf00      	nop
 8009998:	20000b34 	.word	0x20000b34

0800999c <__malloc_unlock>:
 800999c:	4801      	ldr	r0, [pc, #4]	; (80099a4 <__malloc_unlock+0x8>)
 800999e:	f000 bc1a 	b.w	800a1d6 <__retarget_lock_release_recursive>
 80099a2:	bf00      	nop
 80099a4:	20000b34 	.word	0x20000b34

080099a8 <_realloc_r>:
 80099a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ac:	4680      	mov	r8, r0
 80099ae:	4614      	mov	r4, r2
 80099b0:	460e      	mov	r6, r1
 80099b2:	b921      	cbnz	r1, 80099be <_realloc_r+0x16>
 80099b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099b8:	4611      	mov	r1, r2
 80099ba:	f7ff bdad 	b.w	8009518 <_malloc_r>
 80099be:	b92a      	cbnz	r2, 80099cc <_realloc_r+0x24>
 80099c0:	f7ff fd3e 	bl	8009440 <_free_r>
 80099c4:	4625      	mov	r5, r4
 80099c6:	4628      	mov	r0, r5
 80099c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099cc:	f000 fc6a 	bl	800a2a4 <_malloc_usable_size_r>
 80099d0:	4284      	cmp	r4, r0
 80099d2:	4607      	mov	r7, r0
 80099d4:	d802      	bhi.n	80099dc <_realloc_r+0x34>
 80099d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099da:	d812      	bhi.n	8009a02 <_realloc_r+0x5a>
 80099dc:	4621      	mov	r1, r4
 80099de:	4640      	mov	r0, r8
 80099e0:	f7ff fd9a 	bl	8009518 <_malloc_r>
 80099e4:	4605      	mov	r5, r0
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d0ed      	beq.n	80099c6 <_realloc_r+0x1e>
 80099ea:	42bc      	cmp	r4, r7
 80099ec:	4622      	mov	r2, r4
 80099ee:	4631      	mov	r1, r6
 80099f0:	bf28      	it	cs
 80099f2:	463a      	movcs	r2, r7
 80099f4:	f7fd fe64 	bl	80076c0 <memcpy>
 80099f8:	4631      	mov	r1, r6
 80099fa:	4640      	mov	r0, r8
 80099fc:	f7ff fd20 	bl	8009440 <_free_r>
 8009a00:	e7e1      	b.n	80099c6 <_realloc_r+0x1e>
 8009a02:	4635      	mov	r5, r6
 8009a04:	e7df      	b.n	80099c6 <_realloc_r+0x1e>

08009a06 <__sfputc_r>:
 8009a06:	6893      	ldr	r3, [r2, #8]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	b410      	push	{r4}
 8009a0e:	6093      	str	r3, [r2, #8]
 8009a10:	da08      	bge.n	8009a24 <__sfputc_r+0x1e>
 8009a12:	6994      	ldr	r4, [r2, #24]
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	db01      	blt.n	8009a1c <__sfputc_r+0x16>
 8009a18:	290a      	cmp	r1, #10
 8009a1a:	d103      	bne.n	8009a24 <__sfputc_r+0x1e>
 8009a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a20:	f000 b94a 	b.w	8009cb8 <__swbuf_r>
 8009a24:	6813      	ldr	r3, [r2, #0]
 8009a26:	1c58      	adds	r0, r3, #1
 8009a28:	6010      	str	r0, [r2, #0]
 8009a2a:	7019      	strb	r1, [r3, #0]
 8009a2c:	4608      	mov	r0, r1
 8009a2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <__sfputs_r>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	4606      	mov	r6, r0
 8009a38:	460f      	mov	r7, r1
 8009a3a:	4614      	mov	r4, r2
 8009a3c:	18d5      	adds	r5, r2, r3
 8009a3e:	42ac      	cmp	r4, r5
 8009a40:	d101      	bne.n	8009a46 <__sfputs_r+0x12>
 8009a42:	2000      	movs	r0, #0
 8009a44:	e007      	b.n	8009a56 <__sfputs_r+0x22>
 8009a46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4a:	463a      	mov	r2, r7
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f7ff ffda 	bl	8009a06 <__sfputc_r>
 8009a52:	1c43      	adds	r3, r0, #1
 8009a54:	d1f3      	bne.n	8009a3e <__sfputs_r+0xa>
 8009a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a58 <_vfiprintf_r>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	460d      	mov	r5, r1
 8009a5e:	b09d      	sub	sp, #116	; 0x74
 8009a60:	4614      	mov	r4, r2
 8009a62:	4698      	mov	r8, r3
 8009a64:	4606      	mov	r6, r0
 8009a66:	b118      	cbz	r0, 8009a70 <_vfiprintf_r+0x18>
 8009a68:	6983      	ldr	r3, [r0, #24]
 8009a6a:	b90b      	cbnz	r3, 8009a70 <_vfiprintf_r+0x18>
 8009a6c:	f000 fb14 	bl	800a098 <__sinit>
 8009a70:	4b89      	ldr	r3, [pc, #548]	; (8009c98 <_vfiprintf_r+0x240>)
 8009a72:	429d      	cmp	r5, r3
 8009a74:	d11b      	bne.n	8009aae <_vfiprintf_r+0x56>
 8009a76:	6875      	ldr	r5, [r6, #4]
 8009a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a7a:	07d9      	lsls	r1, r3, #31
 8009a7c:	d405      	bmi.n	8009a8a <_vfiprintf_r+0x32>
 8009a7e:	89ab      	ldrh	r3, [r5, #12]
 8009a80:	059a      	lsls	r2, r3, #22
 8009a82:	d402      	bmi.n	8009a8a <_vfiprintf_r+0x32>
 8009a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a86:	f000 fba5 	bl	800a1d4 <__retarget_lock_acquire_recursive>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	071b      	lsls	r3, r3, #28
 8009a8e:	d501      	bpl.n	8009a94 <_vfiprintf_r+0x3c>
 8009a90:	692b      	ldr	r3, [r5, #16]
 8009a92:	b9eb      	cbnz	r3, 8009ad0 <_vfiprintf_r+0x78>
 8009a94:	4629      	mov	r1, r5
 8009a96:	4630      	mov	r0, r6
 8009a98:	f000 f96e 	bl	8009d78 <__swsetup_r>
 8009a9c:	b1c0      	cbz	r0, 8009ad0 <_vfiprintf_r+0x78>
 8009a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aa0:	07dc      	lsls	r4, r3, #31
 8009aa2:	d50e      	bpl.n	8009ac2 <_vfiprintf_r+0x6a>
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa8:	b01d      	add	sp, #116	; 0x74
 8009aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aae:	4b7b      	ldr	r3, [pc, #492]	; (8009c9c <_vfiprintf_r+0x244>)
 8009ab0:	429d      	cmp	r5, r3
 8009ab2:	d101      	bne.n	8009ab8 <_vfiprintf_r+0x60>
 8009ab4:	68b5      	ldr	r5, [r6, #8]
 8009ab6:	e7df      	b.n	8009a78 <_vfiprintf_r+0x20>
 8009ab8:	4b79      	ldr	r3, [pc, #484]	; (8009ca0 <_vfiprintf_r+0x248>)
 8009aba:	429d      	cmp	r5, r3
 8009abc:	bf08      	it	eq
 8009abe:	68f5      	ldreq	r5, [r6, #12]
 8009ac0:	e7da      	b.n	8009a78 <_vfiprintf_r+0x20>
 8009ac2:	89ab      	ldrh	r3, [r5, #12]
 8009ac4:	0598      	lsls	r0, r3, #22
 8009ac6:	d4ed      	bmi.n	8009aa4 <_vfiprintf_r+0x4c>
 8009ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aca:	f000 fb84 	bl	800a1d6 <__retarget_lock_release_recursive>
 8009ace:	e7e9      	b.n	8009aa4 <_vfiprintf_r+0x4c>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad4:	2320      	movs	r3, #32
 8009ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ade:	2330      	movs	r3, #48	; 0x30
 8009ae0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ca4 <_vfiprintf_r+0x24c>
 8009ae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ae8:	f04f 0901 	mov.w	r9, #1
 8009aec:	4623      	mov	r3, r4
 8009aee:	469a      	mov	sl, r3
 8009af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af4:	b10a      	cbz	r2, 8009afa <_vfiprintf_r+0xa2>
 8009af6:	2a25      	cmp	r2, #37	; 0x25
 8009af8:	d1f9      	bne.n	8009aee <_vfiprintf_r+0x96>
 8009afa:	ebba 0b04 	subs.w	fp, sl, r4
 8009afe:	d00b      	beq.n	8009b18 <_vfiprintf_r+0xc0>
 8009b00:	465b      	mov	r3, fp
 8009b02:	4622      	mov	r2, r4
 8009b04:	4629      	mov	r1, r5
 8009b06:	4630      	mov	r0, r6
 8009b08:	f7ff ff94 	bl	8009a34 <__sfputs_r>
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	f000 80aa 	beq.w	8009c66 <_vfiprintf_r+0x20e>
 8009b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b14:	445a      	add	r2, fp
 8009b16:	9209      	str	r2, [sp, #36]	; 0x24
 8009b18:	f89a 3000 	ldrb.w	r3, [sl]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 80a2 	beq.w	8009c66 <_vfiprintf_r+0x20e>
 8009b22:	2300      	movs	r3, #0
 8009b24:	f04f 32ff 	mov.w	r2, #4294967295
 8009b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b2c:	f10a 0a01 	add.w	sl, sl, #1
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	9307      	str	r3, [sp, #28]
 8009b34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b38:	931a      	str	r3, [sp, #104]	; 0x68
 8009b3a:	4654      	mov	r4, sl
 8009b3c:	2205      	movs	r2, #5
 8009b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b42:	4858      	ldr	r0, [pc, #352]	; (8009ca4 <_vfiprintf_r+0x24c>)
 8009b44:	f7f6 fb6c 	bl	8000220 <memchr>
 8009b48:	9a04      	ldr	r2, [sp, #16]
 8009b4a:	b9d8      	cbnz	r0, 8009b84 <_vfiprintf_r+0x12c>
 8009b4c:	06d1      	lsls	r1, r2, #27
 8009b4e:	bf44      	itt	mi
 8009b50:	2320      	movmi	r3, #32
 8009b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b56:	0713      	lsls	r3, r2, #28
 8009b58:	bf44      	itt	mi
 8009b5a:	232b      	movmi	r3, #43	; 0x2b
 8009b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b60:	f89a 3000 	ldrb.w	r3, [sl]
 8009b64:	2b2a      	cmp	r3, #42	; 0x2a
 8009b66:	d015      	beq.n	8009b94 <_vfiprintf_r+0x13c>
 8009b68:	9a07      	ldr	r2, [sp, #28]
 8009b6a:	4654      	mov	r4, sl
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	f04f 0c0a 	mov.w	ip, #10
 8009b72:	4621      	mov	r1, r4
 8009b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b78:	3b30      	subs	r3, #48	; 0x30
 8009b7a:	2b09      	cmp	r3, #9
 8009b7c:	d94e      	bls.n	8009c1c <_vfiprintf_r+0x1c4>
 8009b7e:	b1b0      	cbz	r0, 8009bae <_vfiprintf_r+0x156>
 8009b80:	9207      	str	r2, [sp, #28]
 8009b82:	e014      	b.n	8009bae <_vfiprintf_r+0x156>
 8009b84:	eba0 0308 	sub.w	r3, r0, r8
 8009b88:	fa09 f303 	lsl.w	r3, r9, r3
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	9304      	str	r3, [sp, #16]
 8009b90:	46a2      	mov	sl, r4
 8009b92:	e7d2      	b.n	8009b3a <_vfiprintf_r+0xe2>
 8009b94:	9b03      	ldr	r3, [sp, #12]
 8009b96:	1d19      	adds	r1, r3, #4
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	9103      	str	r1, [sp, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	bfbb      	ittet	lt
 8009ba0:	425b      	neglt	r3, r3
 8009ba2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ba6:	9307      	strge	r3, [sp, #28]
 8009ba8:	9307      	strlt	r3, [sp, #28]
 8009baa:	bfb8      	it	lt
 8009bac:	9204      	strlt	r2, [sp, #16]
 8009bae:	7823      	ldrb	r3, [r4, #0]
 8009bb0:	2b2e      	cmp	r3, #46	; 0x2e
 8009bb2:	d10c      	bne.n	8009bce <_vfiprintf_r+0x176>
 8009bb4:	7863      	ldrb	r3, [r4, #1]
 8009bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8009bb8:	d135      	bne.n	8009c26 <_vfiprintf_r+0x1ce>
 8009bba:	9b03      	ldr	r3, [sp, #12]
 8009bbc:	1d1a      	adds	r2, r3, #4
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	9203      	str	r2, [sp, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bfb8      	it	lt
 8009bc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bca:	3402      	adds	r4, #2
 8009bcc:	9305      	str	r3, [sp, #20]
 8009bce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009cb4 <_vfiprintf_r+0x25c>
 8009bd2:	7821      	ldrb	r1, [r4, #0]
 8009bd4:	2203      	movs	r2, #3
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	f7f6 fb22 	bl	8000220 <memchr>
 8009bdc:	b140      	cbz	r0, 8009bf0 <_vfiprintf_r+0x198>
 8009bde:	2340      	movs	r3, #64	; 0x40
 8009be0:	eba0 000a 	sub.w	r0, r0, sl
 8009be4:	fa03 f000 	lsl.w	r0, r3, r0
 8009be8:	9b04      	ldr	r3, [sp, #16]
 8009bea:	4303      	orrs	r3, r0
 8009bec:	3401      	adds	r4, #1
 8009bee:	9304      	str	r3, [sp, #16]
 8009bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf4:	482c      	ldr	r0, [pc, #176]	; (8009ca8 <_vfiprintf_r+0x250>)
 8009bf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bfa:	2206      	movs	r2, #6
 8009bfc:	f7f6 fb10 	bl	8000220 <memchr>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d03f      	beq.n	8009c84 <_vfiprintf_r+0x22c>
 8009c04:	4b29      	ldr	r3, [pc, #164]	; (8009cac <_vfiprintf_r+0x254>)
 8009c06:	bb1b      	cbnz	r3, 8009c50 <_vfiprintf_r+0x1f8>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	3307      	adds	r3, #7
 8009c0c:	f023 0307 	bic.w	r3, r3, #7
 8009c10:	3308      	adds	r3, #8
 8009c12:	9303      	str	r3, [sp, #12]
 8009c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c16:	443b      	add	r3, r7
 8009c18:	9309      	str	r3, [sp, #36]	; 0x24
 8009c1a:	e767      	b.n	8009aec <_vfiprintf_r+0x94>
 8009c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c20:	460c      	mov	r4, r1
 8009c22:	2001      	movs	r0, #1
 8009c24:	e7a5      	b.n	8009b72 <_vfiprintf_r+0x11a>
 8009c26:	2300      	movs	r3, #0
 8009c28:	3401      	adds	r4, #1
 8009c2a:	9305      	str	r3, [sp, #20]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	f04f 0c0a 	mov.w	ip, #10
 8009c32:	4620      	mov	r0, r4
 8009c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c38:	3a30      	subs	r2, #48	; 0x30
 8009c3a:	2a09      	cmp	r2, #9
 8009c3c:	d903      	bls.n	8009c46 <_vfiprintf_r+0x1ee>
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d0c5      	beq.n	8009bce <_vfiprintf_r+0x176>
 8009c42:	9105      	str	r1, [sp, #20]
 8009c44:	e7c3      	b.n	8009bce <_vfiprintf_r+0x176>
 8009c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e7f0      	b.n	8009c32 <_vfiprintf_r+0x1da>
 8009c50:	ab03      	add	r3, sp, #12
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	462a      	mov	r2, r5
 8009c56:	4b16      	ldr	r3, [pc, #88]	; (8009cb0 <_vfiprintf_r+0x258>)
 8009c58:	a904      	add	r1, sp, #16
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f7fd fde6 	bl	800782c <_printf_float>
 8009c60:	4607      	mov	r7, r0
 8009c62:	1c78      	adds	r0, r7, #1
 8009c64:	d1d6      	bne.n	8009c14 <_vfiprintf_r+0x1bc>
 8009c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c68:	07d9      	lsls	r1, r3, #31
 8009c6a:	d405      	bmi.n	8009c78 <_vfiprintf_r+0x220>
 8009c6c:	89ab      	ldrh	r3, [r5, #12]
 8009c6e:	059a      	lsls	r2, r3, #22
 8009c70:	d402      	bmi.n	8009c78 <_vfiprintf_r+0x220>
 8009c72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c74:	f000 faaf 	bl	800a1d6 <__retarget_lock_release_recursive>
 8009c78:	89ab      	ldrh	r3, [r5, #12]
 8009c7a:	065b      	lsls	r3, r3, #25
 8009c7c:	f53f af12 	bmi.w	8009aa4 <_vfiprintf_r+0x4c>
 8009c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c82:	e711      	b.n	8009aa8 <_vfiprintf_r+0x50>
 8009c84:	ab03      	add	r3, sp, #12
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	462a      	mov	r2, r5
 8009c8a:	4b09      	ldr	r3, [pc, #36]	; (8009cb0 <_vfiprintf_r+0x258>)
 8009c8c:	a904      	add	r1, sp, #16
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f7fe f870 	bl	8007d74 <_printf_i>
 8009c94:	e7e4      	b.n	8009c60 <_vfiprintf_r+0x208>
 8009c96:	bf00      	nop
 8009c98:	0800bdc4 	.word	0x0800bdc4
 8009c9c:	0800bde4 	.word	0x0800bde4
 8009ca0:	0800bda4 	.word	0x0800bda4
 8009ca4:	0800bc4c 	.word	0x0800bc4c
 8009ca8:	0800bc56 	.word	0x0800bc56
 8009cac:	0800782d 	.word	0x0800782d
 8009cb0:	08009a35 	.word	0x08009a35
 8009cb4:	0800bc52 	.word	0x0800bc52

08009cb8 <__swbuf_r>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	460e      	mov	r6, r1
 8009cbc:	4614      	mov	r4, r2
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	b118      	cbz	r0, 8009cca <__swbuf_r+0x12>
 8009cc2:	6983      	ldr	r3, [r0, #24]
 8009cc4:	b90b      	cbnz	r3, 8009cca <__swbuf_r+0x12>
 8009cc6:	f000 f9e7 	bl	800a098 <__sinit>
 8009cca:	4b21      	ldr	r3, [pc, #132]	; (8009d50 <__swbuf_r+0x98>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	d12b      	bne.n	8009d28 <__swbuf_r+0x70>
 8009cd0:	686c      	ldr	r4, [r5, #4]
 8009cd2:	69a3      	ldr	r3, [r4, #24]
 8009cd4:	60a3      	str	r3, [r4, #8]
 8009cd6:	89a3      	ldrh	r3, [r4, #12]
 8009cd8:	071a      	lsls	r2, r3, #28
 8009cda:	d52f      	bpl.n	8009d3c <__swbuf_r+0x84>
 8009cdc:	6923      	ldr	r3, [r4, #16]
 8009cde:	b36b      	cbz	r3, 8009d3c <__swbuf_r+0x84>
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	6820      	ldr	r0, [r4, #0]
 8009ce4:	1ac0      	subs	r0, r0, r3
 8009ce6:	6963      	ldr	r3, [r4, #20]
 8009ce8:	b2f6      	uxtb	r6, r6
 8009cea:	4283      	cmp	r3, r0
 8009cec:	4637      	mov	r7, r6
 8009cee:	dc04      	bgt.n	8009cfa <__swbuf_r+0x42>
 8009cf0:	4621      	mov	r1, r4
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	f000 f93c 	bl	8009f70 <_fflush_r>
 8009cf8:	bb30      	cbnz	r0, 8009d48 <__swbuf_r+0x90>
 8009cfa:	68a3      	ldr	r3, [r4, #8]
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	60a3      	str	r3, [r4, #8]
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	6022      	str	r2, [r4, #0]
 8009d06:	701e      	strb	r6, [r3, #0]
 8009d08:	6963      	ldr	r3, [r4, #20]
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	4283      	cmp	r3, r0
 8009d0e:	d004      	beq.n	8009d1a <__swbuf_r+0x62>
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	07db      	lsls	r3, r3, #31
 8009d14:	d506      	bpl.n	8009d24 <__swbuf_r+0x6c>
 8009d16:	2e0a      	cmp	r6, #10
 8009d18:	d104      	bne.n	8009d24 <__swbuf_r+0x6c>
 8009d1a:	4621      	mov	r1, r4
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	f000 f927 	bl	8009f70 <_fflush_r>
 8009d22:	b988      	cbnz	r0, 8009d48 <__swbuf_r+0x90>
 8009d24:	4638      	mov	r0, r7
 8009d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d28:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <__swbuf_r+0x9c>)
 8009d2a:	429c      	cmp	r4, r3
 8009d2c:	d101      	bne.n	8009d32 <__swbuf_r+0x7a>
 8009d2e:	68ac      	ldr	r4, [r5, #8]
 8009d30:	e7cf      	b.n	8009cd2 <__swbuf_r+0x1a>
 8009d32:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <__swbuf_r+0xa0>)
 8009d34:	429c      	cmp	r4, r3
 8009d36:	bf08      	it	eq
 8009d38:	68ec      	ldreq	r4, [r5, #12]
 8009d3a:	e7ca      	b.n	8009cd2 <__swbuf_r+0x1a>
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 f81a 	bl	8009d78 <__swsetup_r>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	d0cb      	beq.n	8009ce0 <__swbuf_r+0x28>
 8009d48:	f04f 37ff 	mov.w	r7, #4294967295
 8009d4c:	e7ea      	b.n	8009d24 <__swbuf_r+0x6c>
 8009d4e:	bf00      	nop
 8009d50:	0800bdc4 	.word	0x0800bdc4
 8009d54:	0800bde4 	.word	0x0800bde4
 8009d58:	0800bda4 	.word	0x0800bda4

08009d5c <__ascii_wctomb>:
 8009d5c:	b149      	cbz	r1, 8009d72 <__ascii_wctomb+0x16>
 8009d5e:	2aff      	cmp	r2, #255	; 0xff
 8009d60:	bf85      	ittet	hi
 8009d62:	238a      	movhi	r3, #138	; 0x8a
 8009d64:	6003      	strhi	r3, [r0, #0]
 8009d66:	700a      	strbls	r2, [r1, #0]
 8009d68:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d6c:	bf98      	it	ls
 8009d6e:	2001      	movls	r0, #1
 8009d70:	4770      	bx	lr
 8009d72:	4608      	mov	r0, r1
 8009d74:	4770      	bx	lr
	...

08009d78 <__swsetup_r>:
 8009d78:	4b32      	ldr	r3, [pc, #200]	; (8009e44 <__swsetup_r+0xcc>)
 8009d7a:	b570      	push	{r4, r5, r6, lr}
 8009d7c:	681d      	ldr	r5, [r3, #0]
 8009d7e:	4606      	mov	r6, r0
 8009d80:	460c      	mov	r4, r1
 8009d82:	b125      	cbz	r5, 8009d8e <__swsetup_r+0x16>
 8009d84:	69ab      	ldr	r3, [r5, #24]
 8009d86:	b913      	cbnz	r3, 8009d8e <__swsetup_r+0x16>
 8009d88:	4628      	mov	r0, r5
 8009d8a:	f000 f985 	bl	800a098 <__sinit>
 8009d8e:	4b2e      	ldr	r3, [pc, #184]	; (8009e48 <__swsetup_r+0xd0>)
 8009d90:	429c      	cmp	r4, r3
 8009d92:	d10f      	bne.n	8009db4 <__swsetup_r+0x3c>
 8009d94:	686c      	ldr	r4, [r5, #4]
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d9c:	0719      	lsls	r1, r3, #28
 8009d9e:	d42c      	bmi.n	8009dfa <__swsetup_r+0x82>
 8009da0:	06dd      	lsls	r5, r3, #27
 8009da2:	d411      	bmi.n	8009dc8 <__swsetup_r+0x50>
 8009da4:	2309      	movs	r3, #9
 8009da6:	6033      	str	r3, [r6, #0]
 8009da8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009dac:	81a3      	strh	r3, [r4, #12]
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	e03e      	b.n	8009e32 <__swsetup_r+0xba>
 8009db4:	4b25      	ldr	r3, [pc, #148]	; (8009e4c <__swsetup_r+0xd4>)
 8009db6:	429c      	cmp	r4, r3
 8009db8:	d101      	bne.n	8009dbe <__swsetup_r+0x46>
 8009dba:	68ac      	ldr	r4, [r5, #8]
 8009dbc:	e7eb      	b.n	8009d96 <__swsetup_r+0x1e>
 8009dbe:	4b24      	ldr	r3, [pc, #144]	; (8009e50 <__swsetup_r+0xd8>)
 8009dc0:	429c      	cmp	r4, r3
 8009dc2:	bf08      	it	eq
 8009dc4:	68ec      	ldreq	r4, [r5, #12]
 8009dc6:	e7e6      	b.n	8009d96 <__swsetup_r+0x1e>
 8009dc8:	0758      	lsls	r0, r3, #29
 8009dca:	d512      	bpl.n	8009df2 <__swsetup_r+0x7a>
 8009dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dce:	b141      	cbz	r1, 8009de2 <__swsetup_r+0x6a>
 8009dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd4:	4299      	cmp	r1, r3
 8009dd6:	d002      	beq.n	8009dde <__swsetup_r+0x66>
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7ff fb31 	bl	8009440 <_free_r>
 8009dde:	2300      	movs	r3, #0
 8009de0:	6363      	str	r3, [r4, #52]	; 0x34
 8009de2:	89a3      	ldrh	r3, [r4, #12]
 8009de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009de8:	81a3      	strh	r3, [r4, #12]
 8009dea:	2300      	movs	r3, #0
 8009dec:	6063      	str	r3, [r4, #4]
 8009dee:	6923      	ldr	r3, [r4, #16]
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	89a3      	ldrh	r3, [r4, #12]
 8009df4:	f043 0308 	orr.w	r3, r3, #8
 8009df8:	81a3      	strh	r3, [r4, #12]
 8009dfa:	6923      	ldr	r3, [r4, #16]
 8009dfc:	b94b      	cbnz	r3, 8009e12 <__swsetup_r+0x9a>
 8009dfe:	89a3      	ldrh	r3, [r4, #12]
 8009e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e08:	d003      	beq.n	8009e12 <__swsetup_r+0x9a>
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f000 fa09 	bl	800a224 <__smakebuf_r>
 8009e12:	89a0      	ldrh	r0, [r4, #12]
 8009e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e18:	f010 0301 	ands.w	r3, r0, #1
 8009e1c:	d00a      	beq.n	8009e34 <__swsetup_r+0xbc>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60a3      	str	r3, [r4, #8]
 8009e22:	6963      	ldr	r3, [r4, #20]
 8009e24:	425b      	negs	r3, r3
 8009e26:	61a3      	str	r3, [r4, #24]
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	b943      	cbnz	r3, 8009e3e <__swsetup_r+0xc6>
 8009e2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e30:	d1ba      	bne.n	8009da8 <__swsetup_r+0x30>
 8009e32:	bd70      	pop	{r4, r5, r6, pc}
 8009e34:	0781      	lsls	r1, r0, #30
 8009e36:	bf58      	it	pl
 8009e38:	6963      	ldrpl	r3, [r4, #20]
 8009e3a:	60a3      	str	r3, [r4, #8]
 8009e3c:	e7f4      	b.n	8009e28 <__swsetup_r+0xb0>
 8009e3e:	2000      	movs	r0, #0
 8009e40:	e7f7      	b.n	8009e32 <__swsetup_r+0xba>
 8009e42:	bf00      	nop
 8009e44:	20000018 	.word	0x20000018
 8009e48:	0800bdc4 	.word	0x0800bdc4
 8009e4c:	0800bde4 	.word	0x0800bde4
 8009e50:	0800bda4 	.word	0x0800bda4

08009e54 <abort>:
 8009e54:	b508      	push	{r3, lr}
 8009e56:	2006      	movs	r0, #6
 8009e58:	f000 fa54 	bl	800a304 <raise>
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	f001 fdb7 	bl	800b9d0 <_exit>
	...

08009e64 <__sflush_r>:
 8009e64:	898a      	ldrh	r2, [r1, #12]
 8009e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6a:	4605      	mov	r5, r0
 8009e6c:	0710      	lsls	r0, r2, #28
 8009e6e:	460c      	mov	r4, r1
 8009e70:	d458      	bmi.n	8009f24 <__sflush_r+0xc0>
 8009e72:	684b      	ldr	r3, [r1, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	dc05      	bgt.n	8009e84 <__sflush_r+0x20>
 8009e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dc02      	bgt.n	8009e84 <__sflush_r+0x20>
 8009e7e:	2000      	movs	r0, #0
 8009e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e86:	2e00      	cmp	r6, #0
 8009e88:	d0f9      	beq.n	8009e7e <__sflush_r+0x1a>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e90:	682f      	ldr	r7, [r5, #0]
 8009e92:	602b      	str	r3, [r5, #0]
 8009e94:	d032      	beq.n	8009efc <__sflush_r+0x98>
 8009e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e98:	89a3      	ldrh	r3, [r4, #12]
 8009e9a:	075a      	lsls	r2, r3, #29
 8009e9c:	d505      	bpl.n	8009eaa <__sflush_r+0x46>
 8009e9e:	6863      	ldr	r3, [r4, #4]
 8009ea0:	1ac0      	subs	r0, r0, r3
 8009ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ea4:	b10b      	cbz	r3, 8009eaa <__sflush_r+0x46>
 8009ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ea8:	1ac0      	subs	r0, r0, r3
 8009eaa:	2300      	movs	r3, #0
 8009eac:	4602      	mov	r2, r0
 8009eae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eb0:	6a21      	ldr	r1, [r4, #32]
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	47b0      	blx	r6
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	d106      	bne.n	8009eca <__sflush_r+0x66>
 8009ebc:	6829      	ldr	r1, [r5, #0]
 8009ebe:	291d      	cmp	r1, #29
 8009ec0:	d82c      	bhi.n	8009f1c <__sflush_r+0xb8>
 8009ec2:	4a2a      	ldr	r2, [pc, #168]	; (8009f6c <__sflush_r+0x108>)
 8009ec4:	40ca      	lsrs	r2, r1
 8009ec6:	07d6      	lsls	r6, r2, #31
 8009ec8:	d528      	bpl.n	8009f1c <__sflush_r+0xb8>
 8009eca:	2200      	movs	r2, #0
 8009ecc:	6062      	str	r2, [r4, #4]
 8009ece:	04d9      	lsls	r1, r3, #19
 8009ed0:	6922      	ldr	r2, [r4, #16]
 8009ed2:	6022      	str	r2, [r4, #0]
 8009ed4:	d504      	bpl.n	8009ee0 <__sflush_r+0x7c>
 8009ed6:	1c42      	adds	r2, r0, #1
 8009ed8:	d101      	bne.n	8009ede <__sflush_r+0x7a>
 8009eda:	682b      	ldr	r3, [r5, #0]
 8009edc:	b903      	cbnz	r3, 8009ee0 <__sflush_r+0x7c>
 8009ede:	6560      	str	r0, [r4, #84]	; 0x54
 8009ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ee2:	602f      	str	r7, [r5, #0]
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	d0ca      	beq.n	8009e7e <__sflush_r+0x1a>
 8009ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009eec:	4299      	cmp	r1, r3
 8009eee:	d002      	beq.n	8009ef6 <__sflush_r+0x92>
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f7ff faa5 	bl	8009440 <_free_r>
 8009ef6:	2000      	movs	r0, #0
 8009ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8009efa:	e7c1      	b.n	8009e80 <__sflush_r+0x1c>
 8009efc:	6a21      	ldr	r1, [r4, #32]
 8009efe:	2301      	movs	r3, #1
 8009f00:	4628      	mov	r0, r5
 8009f02:	47b0      	blx	r6
 8009f04:	1c41      	adds	r1, r0, #1
 8009f06:	d1c7      	bne.n	8009e98 <__sflush_r+0x34>
 8009f08:	682b      	ldr	r3, [r5, #0]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d0c4      	beq.n	8009e98 <__sflush_r+0x34>
 8009f0e:	2b1d      	cmp	r3, #29
 8009f10:	d001      	beq.n	8009f16 <__sflush_r+0xb2>
 8009f12:	2b16      	cmp	r3, #22
 8009f14:	d101      	bne.n	8009f1a <__sflush_r+0xb6>
 8009f16:	602f      	str	r7, [r5, #0]
 8009f18:	e7b1      	b.n	8009e7e <__sflush_r+0x1a>
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	e7ad      	b.n	8009e80 <__sflush_r+0x1c>
 8009f24:	690f      	ldr	r7, [r1, #16]
 8009f26:	2f00      	cmp	r7, #0
 8009f28:	d0a9      	beq.n	8009e7e <__sflush_r+0x1a>
 8009f2a:	0793      	lsls	r3, r2, #30
 8009f2c:	680e      	ldr	r6, [r1, #0]
 8009f2e:	bf08      	it	eq
 8009f30:	694b      	ldreq	r3, [r1, #20]
 8009f32:	600f      	str	r7, [r1, #0]
 8009f34:	bf18      	it	ne
 8009f36:	2300      	movne	r3, #0
 8009f38:	eba6 0807 	sub.w	r8, r6, r7
 8009f3c:	608b      	str	r3, [r1, #8]
 8009f3e:	f1b8 0f00 	cmp.w	r8, #0
 8009f42:	dd9c      	ble.n	8009e7e <__sflush_r+0x1a>
 8009f44:	6a21      	ldr	r1, [r4, #32]
 8009f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f48:	4643      	mov	r3, r8
 8009f4a:	463a      	mov	r2, r7
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	47b0      	blx	r6
 8009f50:	2800      	cmp	r0, #0
 8009f52:	dc06      	bgt.n	8009f62 <__sflush_r+0xfe>
 8009f54:	89a3      	ldrh	r3, [r4, #12]
 8009f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f5a:	81a3      	strh	r3, [r4, #12]
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	e78e      	b.n	8009e80 <__sflush_r+0x1c>
 8009f62:	4407      	add	r7, r0
 8009f64:	eba8 0800 	sub.w	r8, r8, r0
 8009f68:	e7e9      	b.n	8009f3e <__sflush_r+0xda>
 8009f6a:	bf00      	nop
 8009f6c:	20400001 	.word	0x20400001

08009f70 <_fflush_r>:
 8009f70:	b538      	push	{r3, r4, r5, lr}
 8009f72:	690b      	ldr	r3, [r1, #16]
 8009f74:	4605      	mov	r5, r0
 8009f76:	460c      	mov	r4, r1
 8009f78:	b913      	cbnz	r3, 8009f80 <_fflush_r+0x10>
 8009f7a:	2500      	movs	r5, #0
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	b118      	cbz	r0, 8009f8a <_fflush_r+0x1a>
 8009f82:	6983      	ldr	r3, [r0, #24]
 8009f84:	b90b      	cbnz	r3, 8009f8a <_fflush_r+0x1a>
 8009f86:	f000 f887 	bl	800a098 <__sinit>
 8009f8a:	4b14      	ldr	r3, [pc, #80]	; (8009fdc <_fflush_r+0x6c>)
 8009f8c:	429c      	cmp	r4, r3
 8009f8e:	d11b      	bne.n	8009fc8 <_fflush_r+0x58>
 8009f90:	686c      	ldr	r4, [r5, #4]
 8009f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0ef      	beq.n	8009f7a <_fflush_r+0xa>
 8009f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f9c:	07d0      	lsls	r0, r2, #31
 8009f9e:	d404      	bmi.n	8009faa <_fflush_r+0x3a>
 8009fa0:	0599      	lsls	r1, r3, #22
 8009fa2:	d402      	bmi.n	8009faa <_fflush_r+0x3a>
 8009fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fa6:	f000 f915 	bl	800a1d4 <__retarget_lock_acquire_recursive>
 8009faa:	4628      	mov	r0, r5
 8009fac:	4621      	mov	r1, r4
 8009fae:	f7ff ff59 	bl	8009e64 <__sflush_r>
 8009fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fb4:	07da      	lsls	r2, r3, #31
 8009fb6:	4605      	mov	r5, r0
 8009fb8:	d4e0      	bmi.n	8009f7c <_fflush_r+0xc>
 8009fba:	89a3      	ldrh	r3, [r4, #12]
 8009fbc:	059b      	lsls	r3, r3, #22
 8009fbe:	d4dd      	bmi.n	8009f7c <_fflush_r+0xc>
 8009fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fc2:	f000 f908 	bl	800a1d6 <__retarget_lock_release_recursive>
 8009fc6:	e7d9      	b.n	8009f7c <_fflush_r+0xc>
 8009fc8:	4b05      	ldr	r3, [pc, #20]	; (8009fe0 <_fflush_r+0x70>)
 8009fca:	429c      	cmp	r4, r3
 8009fcc:	d101      	bne.n	8009fd2 <_fflush_r+0x62>
 8009fce:	68ac      	ldr	r4, [r5, #8]
 8009fd0:	e7df      	b.n	8009f92 <_fflush_r+0x22>
 8009fd2:	4b04      	ldr	r3, [pc, #16]	; (8009fe4 <_fflush_r+0x74>)
 8009fd4:	429c      	cmp	r4, r3
 8009fd6:	bf08      	it	eq
 8009fd8:	68ec      	ldreq	r4, [r5, #12]
 8009fda:	e7da      	b.n	8009f92 <_fflush_r+0x22>
 8009fdc:	0800bdc4 	.word	0x0800bdc4
 8009fe0:	0800bde4 	.word	0x0800bde4
 8009fe4:	0800bda4 	.word	0x0800bda4

08009fe8 <std>:
 8009fe8:	2300      	movs	r3, #0
 8009fea:	b510      	push	{r4, lr}
 8009fec:	4604      	mov	r4, r0
 8009fee:	e9c0 3300 	strd	r3, r3, [r0]
 8009ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ff6:	6083      	str	r3, [r0, #8]
 8009ff8:	8181      	strh	r1, [r0, #12]
 8009ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8009ffc:	81c2      	strh	r2, [r0, #14]
 8009ffe:	6183      	str	r3, [r0, #24]
 800a000:	4619      	mov	r1, r3
 800a002:	2208      	movs	r2, #8
 800a004:	305c      	adds	r0, #92	; 0x5c
 800a006:	f7fd fb69 	bl	80076dc <memset>
 800a00a:	4b05      	ldr	r3, [pc, #20]	; (800a020 <std+0x38>)
 800a00c:	6263      	str	r3, [r4, #36]	; 0x24
 800a00e:	4b05      	ldr	r3, [pc, #20]	; (800a024 <std+0x3c>)
 800a010:	62a3      	str	r3, [r4, #40]	; 0x28
 800a012:	4b05      	ldr	r3, [pc, #20]	; (800a028 <std+0x40>)
 800a014:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a016:	4b05      	ldr	r3, [pc, #20]	; (800a02c <std+0x44>)
 800a018:	6224      	str	r4, [r4, #32]
 800a01a:	6323      	str	r3, [r4, #48]	; 0x30
 800a01c:	bd10      	pop	{r4, pc}
 800a01e:	bf00      	nop
 800a020:	0800a33d 	.word	0x0800a33d
 800a024:	0800a35f 	.word	0x0800a35f
 800a028:	0800a397 	.word	0x0800a397
 800a02c:	0800a3bb 	.word	0x0800a3bb

0800a030 <_cleanup_r>:
 800a030:	4901      	ldr	r1, [pc, #4]	; (800a038 <_cleanup_r+0x8>)
 800a032:	f000 b8af 	b.w	800a194 <_fwalk_reent>
 800a036:	bf00      	nop
 800a038:	08009f71 	.word	0x08009f71

0800a03c <__sfmoreglue>:
 800a03c:	b570      	push	{r4, r5, r6, lr}
 800a03e:	2268      	movs	r2, #104	; 0x68
 800a040:	1e4d      	subs	r5, r1, #1
 800a042:	4355      	muls	r5, r2
 800a044:	460e      	mov	r6, r1
 800a046:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a04a:	f7ff fa65 	bl	8009518 <_malloc_r>
 800a04e:	4604      	mov	r4, r0
 800a050:	b140      	cbz	r0, 800a064 <__sfmoreglue+0x28>
 800a052:	2100      	movs	r1, #0
 800a054:	e9c0 1600 	strd	r1, r6, [r0]
 800a058:	300c      	adds	r0, #12
 800a05a:	60a0      	str	r0, [r4, #8]
 800a05c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a060:	f7fd fb3c 	bl	80076dc <memset>
 800a064:	4620      	mov	r0, r4
 800a066:	bd70      	pop	{r4, r5, r6, pc}

0800a068 <__sfp_lock_acquire>:
 800a068:	4801      	ldr	r0, [pc, #4]	; (800a070 <__sfp_lock_acquire+0x8>)
 800a06a:	f000 b8b3 	b.w	800a1d4 <__retarget_lock_acquire_recursive>
 800a06e:	bf00      	nop
 800a070:	20000b35 	.word	0x20000b35

0800a074 <__sfp_lock_release>:
 800a074:	4801      	ldr	r0, [pc, #4]	; (800a07c <__sfp_lock_release+0x8>)
 800a076:	f000 b8ae 	b.w	800a1d6 <__retarget_lock_release_recursive>
 800a07a:	bf00      	nop
 800a07c:	20000b35 	.word	0x20000b35

0800a080 <__sinit_lock_acquire>:
 800a080:	4801      	ldr	r0, [pc, #4]	; (800a088 <__sinit_lock_acquire+0x8>)
 800a082:	f000 b8a7 	b.w	800a1d4 <__retarget_lock_acquire_recursive>
 800a086:	bf00      	nop
 800a088:	20000b36 	.word	0x20000b36

0800a08c <__sinit_lock_release>:
 800a08c:	4801      	ldr	r0, [pc, #4]	; (800a094 <__sinit_lock_release+0x8>)
 800a08e:	f000 b8a2 	b.w	800a1d6 <__retarget_lock_release_recursive>
 800a092:	bf00      	nop
 800a094:	20000b36 	.word	0x20000b36

0800a098 <__sinit>:
 800a098:	b510      	push	{r4, lr}
 800a09a:	4604      	mov	r4, r0
 800a09c:	f7ff fff0 	bl	800a080 <__sinit_lock_acquire>
 800a0a0:	69a3      	ldr	r3, [r4, #24]
 800a0a2:	b11b      	cbz	r3, 800a0ac <__sinit+0x14>
 800a0a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0a8:	f7ff bff0 	b.w	800a08c <__sinit_lock_release>
 800a0ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a0b0:	6523      	str	r3, [r4, #80]	; 0x50
 800a0b2:	4b13      	ldr	r3, [pc, #76]	; (800a100 <__sinit+0x68>)
 800a0b4:	4a13      	ldr	r2, [pc, #76]	; (800a104 <__sinit+0x6c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a0ba:	42a3      	cmp	r3, r4
 800a0bc:	bf04      	itt	eq
 800a0be:	2301      	moveq	r3, #1
 800a0c0:	61a3      	streq	r3, [r4, #24]
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f000 f820 	bl	800a108 <__sfp>
 800a0c8:	6060      	str	r0, [r4, #4]
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	f000 f81c 	bl	800a108 <__sfp>
 800a0d0:	60a0      	str	r0, [r4, #8]
 800a0d2:	4620      	mov	r0, r4
 800a0d4:	f000 f818 	bl	800a108 <__sfp>
 800a0d8:	2200      	movs	r2, #0
 800a0da:	60e0      	str	r0, [r4, #12]
 800a0dc:	2104      	movs	r1, #4
 800a0de:	6860      	ldr	r0, [r4, #4]
 800a0e0:	f7ff ff82 	bl	8009fe8 <std>
 800a0e4:	68a0      	ldr	r0, [r4, #8]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	2109      	movs	r1, #9
 800a0ea:	f7ff ff7d 	bl	8009fe8 <std>
 800a0ee:	68e0      	ldr	r0, [r4, #12]
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	2112      	movs	r1, #18
 800a0f4:	f7ff ff78 	bl	8009fe8 <std>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	61a3      	str	r3, [r4, #24]
 800a0fc:	e7d2      	b.n	800a0a4 <__sinit+0xc>
 800a0fe:	bf00      	nop
 800a100:	0800ba28 	.word	0x0800ba28
 800a104:	0800a031 	.word	0x0800a031

0800a108 <__sfp>:
 800a108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a10a:	4607      	mov	r7, r0
 800a10c:	f7ff ffac 	bl	800a068 <__sfp_lock_acquire>
 800a110:	4b1e      	ldr	r3, [pc, #120]	; (800a18c <__sfp+0x84>)
 800a112:	681e      	ldr	r6, [r3, #0]
 800a114:	69b3      	ldr	r3, [r6, #24]
 800a116:	b913      	cbnz	r3, 800a11e <__sfp+0x16>
 800a118:	4630      	mov	r0, r6
 800a11a:	f7ff ffbd 	bl	800a098 <__sinit>
 800a11e:	3648      	adds	r6, #72	; 0x48
 800a120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a124:	3b01      	subs	r3, #1
 800a126:	d503      	bpl.n	800a130 <__sfp+0x28>
 800a128:	6833      	ldr	r3, [r6, #0]
 800a12a:	b30b      	cbz	r3, 800a170 <__sfp+0x68>
 800a12c:	6836      	ldr	r6, [r6, #0]
 800a12e:	e7f7      	b.n	800a120 <__sfp+0x18>
 800a130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a134:	b9d5      	cbnz	r5, 800a16c <__sfp+0x64>
 800a136:	4b16      	ldr	r3, [pc, #88]	; (800a190 <__sfp+0x88>)
 800a138:	60e3      	str	r3, [r4, #12]
 800a13a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a13e:	6665      	str	r5, [r4, #100]	; 0x64
 800a140:	f000 f847 	bl	800a1d2 <__retarget_lock_init_recursive>
 800a144:	f7ff ff96 	bl	800a074 <__sfp_lock_release>
 800a148:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a14c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a150:	6025      	str	r5, [r4, #0]
 800a152:	61a5      	str	r5, [r4, #24]
 800a154:	2208      	movs	r2, #8
 800a156:	4629      	mov	r1, r5
 800a158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a15c:	f7fd fabe 	bl	80076dc <memset>
 800a160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a168:	4620      	mov	r0, r4
 800a16a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a16c:	3468      	adds	r4, #104	; 0x68
 800a16e:	e7d9      	b.n	800a124 <__sfp+0x1c>
 800a170:	2104      	movs	r1, #4
 800a172:	4638      	mov	r0, r7
 800a174:	f7ff ff62 	bl	800a03c <__sfmoreglue>
 800a178:	4604      	mov	r4, r0
 800a17a:	6030      	str	r0, [r6, #0]
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d1d5      	bne.n	800a12c <__sfp+0x24>
 800a180:	f7ff ff78 	bl	800a074 <__sfp_lock_release>
 800a184:	230c      	movs	r3, #12
 800a186:	603b      	str	r3, [r7, #0]
 800a188:	e7ee      	b.n	800a168 <__sfp+0x60>
 800a18a:	bf00      	nop
 800a18c:	0800ba28 	.word	0x0800ba28
 800a190:	ffff0001 	.word	0xffff0001

0800a194 <_fwalk_reent>:
 800a194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a198:	4606      	mov	r6, r0
 800a19a:	4688      	mov	r8, r1
 800a19c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a1a0:	2700      	movs	r7, #0
 800a1a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1a6:	f1b9 0901 	subs.w	r9, r9, #1
 800a1aa:	d505      	bpl.n	800a1b8 <_fwalk_reent+0x24>
 800a1ac:	6824      	ldr	r4, [r4, #0]
 800a1ae:	2c00      	cmp	r4, #0
 800a1b0:	d1f7      	bne.n	800a1a2 <_fwalk_reent+0xe>
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1b8:	89ab      	ldrh	r3, [r5, #12]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d907      	bls.n	800a1ce <_fwalk_reent+0x3a>
 800a1be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	d003      	beq.n	800a1ce <_fwalk_reent+0x3a>
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	47c0      	blx	r8
 800a1cc:	4307      	orrs	r7, r0
 800a1ce:	3568      	adds	r5, #104	; 0x68
 800a1d0:	e7e9      	b.n	800a1a6 <_fwalk_reent+0x12>

0800a1d2 <__retarget_lock_init_recursive>:
 800a1d2:	4770      	bx	lr

0800a1d4 <__retarget_lock_acquire_recursive>:
 800a1d4:	4770      	bx	lr

0800a1d6 <__retarget_lock_release_recursive>:
 800a1d6:	4770      	bx	lr

0800a1d8 <__swhatbuf_r>:
 800a1d8:	b570      	push	{r4, r5, r6, lr}
 800a1da:	460e      	mov	r6, r1
 800a1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1e0:	2900      	cmp	r1, #0
 800a1e2:	b096      	sub	sp, #88	; 0x58
 800a1e4:	4614      	mov	r4, r2
 800a1e6:	461d      	mov	r5, r3
 800a1e8:	da08      	bge.n	800a1fc <__swhatbuf_r+0x24>
 800a1ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	602a      	str	r2, [r5, #0]
 800a1f2:	061a      	lsls	r2, r3, #24
 800a1f4:	d410      	bmi.n	800a218 <__swhatbuf_r+0x40>
 800a1f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1fa:	e00e      	b.n	800a21a <__swhatbuf_r+0x42>
 800a1fc:	466a      	mov	r2, sp
 800a1fe:	f000 f903 	bl	800a408 <_fstat_r>
 800a202:	2800      	cmp	r0, #0
 800a204:	dbf1      	blt.n	800a1ea <__swhatbuf_r+0x12>
 800a206:	9a01      	ldr	r2, [sp, #4]
 800a208:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a20c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a210:	425a      	negs	r2, r3
 800a212:	415a      	adcs	r2, r3
 800a214:	602a      	str	r2, [r5, #0]
 800a216:	e7ee      	b.n	800a1f6 <__swhatbuf_r+0x1e>
 800a218:	2340      	movs	r3, #64	; 0x40
 800a21a:	2000      	movs	r0, #0
 800a21c:	6023      	str	r3, [r4, #0]
 800a21e:	b016      	add	sp, #88	; 0x58
 800a220:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a224 <__smakebuf_r>:
 800a224:	898b      	ldrh	r3, [r1, #12]
 800a226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a228:	079d      	lsls	r5, r3, #30
 800a22a:	4606      	mov	r6, r0
 800a22c:	460c      	mov	r4, r1
 800a22e:	d507      	bpl.n	800a240 <__smakebuf_r+0x1c>
 800a230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	6123      	str	r3, [r4, #16]
 800a238:	2301      	movs	r3, #1
 800a23a:	6163      	str	r3, [r4, #20]
 800a23c:	b002      	add	sp, #8
 800a23e:	bd70      	pop	{r4, r5, r6, pc}
 800a240:	ab01      	add	r3, sp, #4
 800a242:	466a      	mov	r2, sp
 800a244:	f7ff ffc8 	bl	800a1d8 <__swhatbuf_r>
 800a248:	9900      	ldr	r1, [sp, #0]
 800a24a:	4605      	mov	r5, r0
 800a24c:	4630      	mov	r0, r6
 800a24e:	f7ff f963 	bl	8009518 <_malloc_r>
 800a252:	b948      	cbnz	r0, 800a268 <__smakebuf_r+0x44>
 800a254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a258:	059a      	lsls	r2, r3, #22
 800a25a:	d4ef      	bmi.n	800a23c <__smakebuf_r+0x18>
 800a25c:	f023 0303 	bic.w	r3, r3, #3
 800a260:	f043 0302 	orr.w	r3, r3, #2
 800a264:	81a3      	strh	r3, [r4, #12]
 800a266:	e7e3      	b.n	800a230 <__smakebuf_r+0xc>
 800a268:	4b0d      	ldr	r3, [pc, #52]	; (800a2a0 <__smakebuf_r+0x7c>)
 800a26a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	6020      	str	r0, [r4, #0]
 800a270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a274:	81a3      	strh	r3, [r4, #12]
 800a276:	9b00      	ldr	r3, [sp, #0]
 800a278:	6163      	str	r3, [r4, #20]
 800a27a:	9b01      	ldr	r3, [sp, #4]
 800a27c:	6120      	str	r0, [r4, #16]
 800a27e:	b15b      	cbz	r3, 800a298 <__smakebuf_r+0x74>
 800a280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a284:	4630      	mov	r0, r6
 800a286:	f000 f8d1 	bl	800a42c <_isatty_r>
 800a28a:	b128      	cbz	r0, 800a298 <__smakebuf_r+0x74>
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	f023 0303 	bic.w	r3, r3, #3
 800a292:	f043 0301 	orr.w	r3, r3, #1
 800a296:	81a3      	strh	r3, [r4, #12]
 800a298:	89a0      	ldrh	r0, [r4, #12]
 800a29a:	4305      	orrs	r5, r0
 800a29c:	81a5      	strh	r5, [r4, #12]
 800a29e:	e7cd      	b.n	800a23c <__smakebuf_r+0x18>
 800a2a0:	0800a031 	.word	0x0800a031

0800a2a4 <_malloc_usable_size_r>:
 800a2a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2a8:	1f18      	subs	r0, r3, #4
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	bfbc      	itt	lt
 800a2ae:	580b      	ldrlt	r3, [r1, r0]
 800a2b0:	18c0      	addlt	r0, r0, r3
 800a2b2:	4770      	bx	lr

0800a2b4 <_raise_r>:
 800a2b4:	291f      	cmp	r1, #31
 800a2b6:	b538      	push	{r3, r4, r5, lr}
 800a2b8:	4604      	mov	r4, r0
 800a2ba:	460d      	mov	r5, r1
 800a2bc:	d904      	bls.n	800a2c8 <_raise_r+0x14>
 800a2be:	2316      	movs	r3, #22
 800a2c0:	6003      	str	r3, [r0, #0]
 800a2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2ca:	b112      	cbz	r2, 800a2d2 <_raise_r+0x1e>
 800a2cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2d0:	b94b      	cbnz	r3, 800a2e6 <_raise_r+0x32>
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f000 f830 	bl	800a338 <_getpid_r>
 800a2d8:	462a      	mov	r2, r5
 800a2da:	4601      	mov	r1, r0
 800a2dc:	4620      	mov	r0, r4
 800a2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2e2:	f000 b817 	b.w	800a314 <_kill_r>
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d00a      	beq.n	800a300 <_raise_r+0x4c>
 800a2ea:	1c59      	adds	r1, r3, #1
 800a2ec:	d103      	bne.n	800a2f6 <_raise_r+0x42>
 800a2ee:	2316      	movs	r3, #22
 800a2f0:	6003      	str	r3, [r0, #0]
 800a2f2:	2001      	movs	r0, #1
 800a2f4:	e7e7      	b.n	800a2c6 <_raise_r+0x12>
 800a2f6:	2400      	movs	r4, #0
 800a2f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	4798      	blx	r3
 800a300:	2000      	movs	r0, #0
 800a302:	e7e0      	b.n	800a2c6 <_raise_r+0x12>

0800a304 <raise>:
 800a304:	4b02      	ldr	r3, [pc, #8]	; (800a310 <raise+0xc>)
 800a306:	4601      	mov	r1, r0
 800a308:	6818      	ldr	r0, [r3, #0]
 800a30a:	f7ff bfd3 	b.w	800a2b4 <_raise_r>
 800a30e:	bf00      	nop
 800a310:	20000018 	.word	0x20000018

0800a314 <_kill_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4d07      	ldr	r5, [pc, #28]	; (800a334 <_kill_r+0x20>)
 800a318:	2300      	movs	r3, #0
 800a31a:	4604      	mov	r4, r0
 800a31c:	4608      	mov	r0, r1
 800a31e:	4611      	mov	r1, r2
 800a320:	602b      	str	r3, [r5, #0]
 800a322:	f001 fb27 	bl	800b974 <_kill>
 800a326:	1c43      	adds	r3, r0, #1
 800a328:	d102      	bne.n	800a330 <_kill_r+0x1c>
 800a32a:	682b      	ldr	r3, [r5, #0]
 800a32c:	b103      	cbz	r3, 800a330 <_kill_r+0x1c>
 800a32e:	6023      	str	r3, [r4, #0]
 800a330:	bd38      	pop	{r3, r4, r5, pc}
 800a332:	bf00      	nop
 800a334:	20000b30 	.word	0x20000b30

0800a338 <_getpid_r>:
 800a338:	f001 bb0c 	b.w	800b954 <_getpid>

0800a33c <__sread>:
 800a33c:	b510      	push	{r4, lr}
 800a33e:	460c      	mov	r4, r1
 800a340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a344:	f000 f894 	bl	800a470 <_read_r>
 800a348:	2800      	cmp	r0, #0
 800a34a:	bfab      	itete	ge
 800a34c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a34e:	89a3      	ldrhlt	r3, [r4, #12]
 800a350:	181b      	addge	r3, r3, r0
 800a352:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a356:	bfac      	ite	ge
 800a358:	6563      	strge	r3, [r4, #84]	; 0x54
 800a35a:	81a3      	strhlt	r3, [r4, #12]
 800a35c:	bd10      	pop	{r4, pc}

0800a35e <__swrite>:
 800a35e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a362:	461f      	mov	r7, r3
 800a364:	898b      	ldrh	r3, [r1, #12]
 800a366:	05db      	lsls	r3, r3, #23
 800a368:	4605      	mov	r5, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	4616      	mov	r6, r2
 800a36e:	d505      	bpl.n	800a37c <__swrite+0x1e>
 800a370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a374:	2302      	movs	r3, #2
 800a376:	2200      	movs	r2, #0
 800a378:	f000 f868 	bl	800a44c <_lseek_r>
 800a37c:	89a3      	ldrh	r3, [r4, #12]
 800a37e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a386:	81a3      	strh	r3, [r4, #12]
 800a388:	4632      	mov	r2, r6
 800a38a:	463b      	mov	r3, r7
 800a38c:	4628      	mov	r0, r5
 800a38e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a392:	f000 b817 	b.w	800a3c4 <_write_r>

0800a396 <__sseek>:
 800a396:	b510      	push	{r4, lr}
 800a398:	460c      	mov	r4, r1
 800a39a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a39e:	f000 f855 	bl	800a44c <_lseek_r>
 800a3a2:	1c43      	adds	r3, r0, #1
 800a3a4:	89a3      	ldrh	r3, [r4, #12]
 800a3a6:	bf15      	itete	ne
 800a3a8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3b2:	81a3      	strheq	r3, [r4, #12]
 800a3b4:	bf18      	it	ne
 800a3b6:	81a3      	strhne	r3, [r4, #12]
 800a3b8:	bd10      	pop	{r4, pc}

0800a3ba <__sclose>:
 800a3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3be:	f000 b813 	b.w	800a3e8 <_close_r>
	...

0800a3c4 <_write_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d07      	ldr	r5, [pc, #28]	; (800a3e4 <_write_r+0x20>)
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	4608      	mov	r0, r1
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	602a      	str	r2, [r5, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	f001 faf4 	bl	800b9c0 <_write>
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	d102      	bne.n	800a3e2 <_write_r+0x1e>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	b103      	cbz	r3, 800a3e2 <_write_r+0x1e>
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	bd38      	pop	{r3, r4, r5, pc}
 800a3e4:	20000b30 	.word	0x20000b30

0800a3e8 <_close_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	4d06      	ldr	r5, [pc, #24]	; (800a404 <_close_r+0x1c>)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	602b      	str	r3, [r5, #0]
 800a3f4:	f001 fa9e 	bl	800b934 <_close>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d102      	bne.n	800a402 <_close_r+0x1a>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	b103      	cbz	r3, 800a402 <_close_r+0x1a>
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	bd38      	pop	{r3, r4, r5, pc}
 800a404:	20000b30 	.word	0x20000b30

0800a408 <_fstat_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	4d07      	ldr	r5, [pc, #28]	; (800a428 <_fstat_r+0x20>)
 800a40c:	2300      	movs	r3, #0
 800a40e:	4604      	mov	r4, r0
 800a410:	4608      	mov	r0, r1
 800a412:	4611      	mov	r1, r2
 800a414:	602b      	str	r3, [r5, #0]
 800a416:	f001 fa95 	bl	800b944 <_fstat>
 800a41a:	1c43      	adds	r3, r0, #1
 800a41c:	d102      	bne.n	800a424 <_fstat_r+0x1c>
 800a41e:	682b      	ldr	r3, [r5, #0]
 800a420:	b103      	cbz	r3, 800a424 <_fstat_r+0x1c>
 800a422:	6023      	str	r3, [r4, #0]
 800a424:	bd38      	pop	{r3, r4, r5, pc}
 800a426:	bf00      	nop
 800a428:	20000b30 	.word	0x20000b30

0800a42c <_isatty_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	4d06      	ldr	r5, [pc, #24]	; (800a448 <_isatty_r+0x1c>)
 800a430:	2300      	movs	r3, #0
 800a432:	4604      	mov	r4, r0
 800a434:	4608      	mov	r0, r1
 800a436:	602b      	str	r3, [r5, #0]
 800a438:	f001 fa94 	bl	800b964 <_isatty>
 800a43c:	1c43      	adds	r3, r0, #1
 800a43e:	d102      	bne.n	800a446 <_isatty_r+0x1a>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	b103      	cbz	r3, 800a446 <_isatty_r+0x1a>
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	bd38      	pop	{r3, r4, r5, pc}
 800a448:	20000b30 	.word	0x20000b30

0800a44c <_lseek_r>:
 800a44c:	b538      	push	{r3, r4, r5, lr}
 800a44e:	4d07      	ldr	r5, [pc, #28]	; (800a46c <_lseek_r+0x20>)
 800a450:	4604      	mov	r4, r0
 800a452:	4608      	mov	r0, r1
 800a454:	4611      	mov	r1, r2
 800a456:	2200      	movs	r2, #0
 800a458:	602a      	str	r2, [r5, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	f001 fa92 	bl	800b984 <_lseek>
 800a460:	1c43      	adds	r3, r0, #1
 800a462:	d102      	bne.n	800a46a <_lseek_r+0x1e>
 800a464:	682b      	ldr	r3, [r5, #0]
 800a466:	b103      	cbz	r3, 800a46a <_lseek_r+0x1e>
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	bd38      	pop	{r3, r4, r5, pc}
 800a46c:	20000b30 	.word	0x20000b30

0800a470 <_read_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4d07      	ldr	r5, [pc, #28]	; (800a490 <_read_r+0x20>)
 800a474:	4604      	mov	r4, r0
 800a476:	4608      	mov	r0, r1
 800a478:	4611      	mov	r1, r2
 800a47a:	2200      	movs	r2, #0
 800a47c:	602a      	str	r2, [r5, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	f001 fa88 	bl	800b994 <_read>
 800a484:	1c43      	adds	r3, r0, #1
 800a486:	d102      	bne.n	800a48e <_read_r+0x1e>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	b103      	cbz	r3, 800a48e <_read_r+0x1e>
 800a48c:	6023      	str	r3, [r4, #0]
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	20000b30 	.word	0x20000b30
 800a494:	00000000 	.word	0x00000000

0800a498 <atan>:
 800a498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a49c:	ec55 4b10 	vmov	r4, r5, d0
 800a4a0:	4bc3      	ldr	r3, [pc, #780]	; (800a7b0 <atan+0x318>)
 800a4a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a4a6:	429e      	cmp	r6, r3
 800a4a8:	46ab      	mov	fp, r5
 800a4aa:	dd18      	ble.n	800a4de <atan+0x46>
 800a4ac:	4bc1      	ldr	r3, [pc, #772]	; (800a7b4 <atan+0x31c>)
 800a4ae:	429e      	cmp	r6, r3
 800a4b0:	dc01      	bgt.n	800a4b6 <atan+0x1e>
 800a4b2:	d109      	bne.n	800a4c8 <atan+0x30>
 800a4b4:	b144      	cbz	r4, 800a4c8 <atan+0x30>
 800a4b6:	4622      	mov	r2, r4
 800a4b8:	462b      	mov	r3, r5
 800a4ba:	4620      	mov	r0, r4
 800a4bc:	4629      	mov	r1, r5
 800a4be:	f7f5 ff05 	bl	80002cc <__adddf3>
 800a4c2:	4604      	mov	r4, r0
 800a4c4:	460d      	mov	r5, r1
 800a4c6:	e006      	b.n	800a4d6 <atan+0x3e>
 800a4c8:	f1bb 0f00 	cmp.w	fp, #0
 800a4cc:	f300 8131 	bgt.w	800a732 <atan+0x29a>
 800a4d0:	a59b      	add	r5, pc, #620	; (adr r5, 800a740 <atan+0x2a8>)
 800a4d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a4d6:	ec45 4b10 	vmov	d0, r4, r5
 800a4da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4de:	4bb6      	ldr	r3, [pc, #728]	; (800a7b8 <atan+0x320>)
 800a4e0:	429e      	cmp	r6, r3
 800a4e2:	dc14      	bgt.n	800a50e <atan+0x76>
 800a4e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a4e8:	429e      	cmp	r6, r3
 800a4ea:	dc0d      	bgt.n	800a508 <atan+0x70>
 800a4ec:	a396      	add	r3, pc, #600	; (adr r3, 800a748 <atan+0x2b0>)
 800a4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f2:	ee10 0a10 	vmov	r0, s0
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	f7f5 fee8 	bl	80002cc <__adddf3>
 800a4fc:	4baf      	ldr	r3, [pc, #700]	; (800a7bc <atan+0x324>)
 800a4fe:	2200      	movs	r2, #0
 800a500:	f7f6 fb2a 	bl	8000b58 <__aeabi_dcmpgt>
 800a504:	2800      	cmp	r0, #0
 800a506:	d1e6      	bne.n	800a4d6 <atan+0x3e>
 800a508:	f04f 3aff 	mov.w	sl, #4294967295
 800a50c:	e02b      	b.n	800a566 <atan+0xce>
 800a50e:	f000 f963 	bl	800a7d8 <fabs>
 800a512:	4bab      	ldr	r3, [pc, #684]	; (800a7c0 <atan+0x328>)
 800a514:	429e      	cmp	r6, r3
 800a516:	ec55 4b10 	vmov	r4, r5, d0
 800a51a:	f300 80bf 	bgt.w	800a69c <atan+0x204>
 800a51e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a522:	429e      	cmp	r6, r3
 800a524:	f300 80a0 	bgt.w	800a668 <atan+0x1d0>
 800a528:	ee10 2a10 	vmov	r2, s0
 800a52c:	ee10 0a10 	vmov	r0, s0
 800a530:	462b      	mov	r3, r5
 800a532:	4629      	mov	r1, r5
 800a534:	f7f5 feca 	bl	80002cc <__adddf3>
 800a538:	4ba0      	ldr	r3, [pc, #640]	; (800a7bc <atan+0x324>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	f7f5 fec4 	bl	80002c8 <__aeabi_dsub>
 800a540:	2200      	movs	r2, #0
 800a542:	4606      	mov	r6, r0
 800a544:	460f      	mov	r7, r1
 800a546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a54a:	4620      	mov	r0, r4
 800a54c:	4629      	mov	r1, r5
 800a54e:	f7f5 febd 	bl	80002cc <__adddf3>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	4630      	mov	r0, r6
 800a558:	4639      	mov	r1, r7
 800a55a:	f7f6 f997 	bl	800088c <__aeabi_ddiv>
 800a55e:	f04f 0a00 	mov.w	sl, #0
 800a562:	4604      	mov	r4, r0
 800a564:	460d      	mov	r5, r1
 800a566:	4622      	mov	r2, r4
 800a568:	462b      	mov	r3, r5
 800a56a:	4620      	mov	r0, r4
 800a56c:	4629      	mov	r1, r5
 800a56e:	f7f6 f863 	bl	8000638 <__aeabi_dmul>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	4680      	mov	r8, r0
 800a578:	4689      	mov	r9, r1
 800a57a:	f7f6 f85d 	bl	8000638 <__aeabi_dmul>
 800a57e:	a374      	add	r3, pc, #464	; (adr r3, 800a750 <atan+0x2b8>)
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	4606      	mov	r6, r0
 800a586:	460f      	mov	r7, r1
 800a588:	f7f6 f856 	bl	8000638 <__aeabi_dmul>
 800a58c:	a372      	add	r3, pc, #456	; (adr r3, 800a758 <atan+0x2c0>)
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	f7f5 fe9b 	bl	80002cc <__adddf3>
 800a596:	4632      	mov	r2, r6
 800a598:	463b      	mov	r3, r7
 800a59a:	f7f6 f84d 	bl	8000638 <__aeabi_dmul>
 800a59e:	a370      	add	r3, pc, #448	; (adr r3, 800a760 <atan+0x2c8>)
 800a5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a4:	f7f5 fe92 	bl	80002cc <__adddf3>
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	463b      	mov	r3, r7
 800a5ac:	f7f6 f844 	bl	8000638 <__aeabi_dmul>
 800a5b0:	a36d      	add	r3, pc, #436	; (adr r3, 800a768 <atan+0x2d0>)
 800a5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b6:	f7f5 fe89 	bl	80002cc <__adddf3>
 800a5ba:	4632      	mov	r2, r6
 800a5bc:	463b      	mov	r3, r7
 800a5be:	f7f6 f83b 	bl	8000638 <__aeabi_dmul>
 800a5c2:	a36b      	add	r3, pc, #428	; (adr r3, 800a770 <atan+0x2d8>)
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	f7f5 fe80 	bl	80002cc <__adddf3>
 800a5cc:	4632      	mov	r2, r6
 800a5ce:	463b      	mov	r3, r7
 800a5d0:	f7f6 f832 	bl	8000638 <__aeabi_dmul>
 800a5d4:	a368      	add	r3, pc, #416	; (adr r3, 800a778 <atan+0x2e0>)
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	f7f5 fe77 	bl	80002cc <__adddf3>
 800a5de:	4642      	mov	r2, r8
 800a5e0:	464b      	mov	r3, r9
 800a5e2:	f7f6 f829 	bl	8000638 <__aeabi_dmul>
 800a5e6:	a366      	add	r3, pc, #408	; (adr r3, 800a780 <atan+0x2e8>)
 800a5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ec:	4680      	mov	r8, r0
 800a5ee:	4689      	mov	r9, r1
 800a5f0:	4630      	mov	r0, r6
 800a5f2:	4639      	mov	r1, r7
 800a5f4:	f7f6 f820 	bl	8000638 <__aeabi_dmul>
 800a5f8:	a363      	add	r3, pc, #396	; (adr r3, 800a788 <atan+0x2f0>)
 800a5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fe:	f7f5 fe63 	bl	80002c8 <__aeabi_dsub>
 800a602:	4632      	mov	r2, r6
 800a604:	463b      	mov	r3, r7
 800a606:	f7f6 f817 	bl	8000638 <__aeabi_dmul>
 800a60a:	a361      	add	r3, pc, #388	; (adr r3, 800a790 <atan+0x2f8>)
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	f7f5 fe5a 	bl	80002c8 <__aeabi_dsub>
 800a614:	4632      	mov	r2, r6
 800a616:	463b      	mov	r3, r7
 800a618:	f7f6 f80e 	bl	8000638 <__aeabi_dmul>
 800a61c:	a35e      	add	r3, pc, #376	; (adr r3, 800a798 <atan+0x300>)
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	f7f5 fe51 	bl	80002c8 <__aeabi_dsub>
 800a626:	4632      	mov	r2, r6
 800a628:	463b      	mov	r3, r7
 800a62a:	f7f6 f805 	bl	8000638 <__aeabi_dmul>
 800a62e:	a35c      	add	r3, pc, #368	; (adr r3, 800a7a0 <atan+0x308>)
 800a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a634:	f7f5 fe48 	bl	80002c8 <__aeabi_dsub>
 800a638:	4632      	mov	r2, r6
 800a63a:	463b      	mov	r3, r7
 800a63c:	f7f5 fffc 	bl	8000638 <__aeabi_dmul>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4640      	mov	r0, r8
 800a646:	4649      	mov	r1, r9
 800a648:	f7f5 fe40 	bl	80002cc <__adddf3>
 800a64c:	4622      	mov	r2, r4
 800a64e:	462b      	mov	r3, r5
 800a650:	f7f5 fff2 	bl	8000638 <__aeabi_dmul>
 800a654:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	d14b      	bne.n	800a6f6 <atan+0x25e>
 800a65e:	4620      	mov	r0, r4
 800a660:	4629      	mov	r1, r5
 800a662:	f7f5 fe31 	bl	80002c8 <__aeabi_dsub>
 800a666:	e72c      	b.n	800a4c2 <atan+0x2a>
 800a668:	ee10 0a10 	vmov	r0, s0
 800a66c:	4b53      	ldr	r3, [pc, #332]	; (800a7bc <atan+0x324>)
 800a66e:	2200      	movs	r2, #0
 800a670:	4629      	mov	r1, r5
 800a672:	f7f5 fe29 	bl	80002c8 <__aeabi_dsub>
 800a676:	4b51      	ldr	r3, [pc, #324]	; (800a7bc <atan+0x324>)
 800a678:	4606      	mov	r6, r0
 800a67a:	460f      	mov	r7, r1
 800a67c:	2200      	movs	r2, #0
 800a67e:	4620      	mov	r0, r4
 800a680:	4629      	mov	r1, r5
 800a682:	f7f5 fe23 	bl	80002cc <__adddf3>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4630      	mov	r0, r6
 800a68c:	4639      	mov	r1, r7
 800a68e:	f7f6 f8fd 	bl	800088c <__aeabi_ddiv>
 800a692:	f04f 0a01 	mov.w	sl, #1
 800a696:	4604      	mov	r4, r0
 800a698:	460d      	mov	r5, r1
 800a69a:	e764      	b.n	800a566 <atan+0xce>
 800a69c:	4b49      	ldr	r3, [pc, #292]	; (800a7c4 <atan+0x32c>)
 800a69e:	429e      	cmp	r6, r3
 800a6a0:	da1d      	bge.n	800a6de <atan+0x246>
 800a6a2:	ee10 0a10 	vmov	r0, s0
 800a6a6:	4b48      	ldr	r3, [pc, #288]	; (800a7c8 <atan+0x330>)
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	4629      	mov	r1, r5
 800a6ac:	f7f5 fe0c 	bl	80002c8 <__aeabi_dsub>
 800a6b0:	4b45      	ldr	r3, [pc, #276]	; (800a7c8 <atan+0x330>)
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	460f      	mov	r7, r1
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	f7f5 ffbc 	bl	8000638 <__aeabi_dmul>
 800a6c0:	4b3e      	ldr	r3, [pc, #248]	; (800a7bc <atan+0x324>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f7f5 fe02 	bl	80002cc <__adddf3>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	4639      	mov	r1, r7
 800a6d0:	f7f6 f8dc 	bl	800088c <__aeabi_ddiv>
 800a6d4:	f04f 0a02 	mov.w	sl, #2
 800a6d8:	4604      	mov	r4, r0
 800a6da:	460d      	mov	r5, r1
 800a6dc:	e743      	b.n	800a566 <atan+0xce>
 800a6de:	462b      	mov	r3, r5
 800a6e0:	ee10 2a10 	vmov	r2, s0
 800a6e4:	4939      	ldr	r1, [pc, #228]	; (800a7cc <atan+0x334>)
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	f7f6 f8d0 	bl	800088c <__aeabi_ddiv>
 800a6ec:	f04f 0a03 	mov.w	sl, #3
 800a6f0:	4604      	mov	r4, r0
 800a6f2:	460d      	mov	r5, r1
 800a6f4:	e737      	b.n	800a566 <atan+0xce>
 800a6f6:	4b36      	ldr	r3, [pc, #216]	; (800a7d0 <atan+0x338>)
 800a6f8:	4e36      	ldr	r6, [pc, #216]	; (800a7d4 <atan+0x33c>)
 800a6fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a6fe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a702:	e9da 2300 	ldrd	r2, r3, [sl]
 800a706:	f7f5 fddf 	bl	80002c8 <__aeabi_dsub>
 800a70a:	4622      	mov	r2, r4
 800a70c:	462b      	mov	r3, r5
 800a70e:	f7f5 fddb 	bl	80002c8 <__aeabi_dsub>
 800a712:	4602      	mov	r2, r0
 800a714:	460b      	mov	r3, r1
 800a716:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a71a:	f7f5 fdd5 	bl	80002c8 <__aeabi_dsub>
 800a71e:	f1bb 0f00 	cmp.w	fp, #0
 800a722:	4604      	mov	r4, r0
 800a724:	460d      	mov	r5, r1
 800a726:	f6bf aed6 	bge.w	800a4d6 <atan+0x3e>
 800a72a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a72e:	461d      	mov	r5, r3
 800a730:	e6d1      	b.n	800a4d6 <atan+0x3e>
 800a732:	a51d      	add	r5, pc, #116	; (adr r5, 800a7a8 <atan+0x310>)
 800a734:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a738:	e6cd      	b.n	800a4d6 <atan+0x3e>
 800a73a:	bf00      	nop
 800a73c:	f3af 8000 	nop.w
 800a740:	54442d18 	.word	0x54442d18
 800a744:	bff921fb 	.word	0xbff921fb
 800a748:	8800759c 	.word	0x8800759c
 800a74c:	7e37e43c 	.word	0x7e37e43c
 800a750:	e322da11 	.word	0xe322da11
 800a754:	3f90ad3a 	.word	0x3f90ad3a
 800a758:	24760deb 	.word	0x24760deb
 800a75c:	3fa97b4b 	.word	0x3fa97b4b
 800a760:	a0d03d51 	.word	0xa0d03d51
 800a764:	3fb10d66 	.word	0x3fb10d66
 800a768:	c54c206e 	.word	0xc54c206e
 800a76c:	3fb745cd 	.word	0x3fb745cd
 800a770:	920083ff 	.word	0x920083ff
 800a774:	3fc24924 	.word	0x3fc24924
 800a778:	5555550d 	.word	0x5555550d
 800a77c:	3fd55555 	.word	0x3fd55555
 800a780:	2c6a6c2f 	.word	0x2c6a6c2f
 800a784:	bfa2b444 	.word	0xbfa2b444
 800a788:	52defd9a 	.word	0x52defd9a
 800a78c:	3fadde2d 	.word	0x3fadde2d
 800a790:	af749a6d 	.word	0xaf749a6d
 800a794:	3fb3b0f2 	.word	0x3fb3b0f2
 800a798:	fe231671 	.word	0xfe231671
 800a79c:	3fbc71c6 	.word	0x3fbc71c6
 800a7a0:	9998ebc4 	.word	0x9998ebc4
 800a7a4:	3fc99999 	.word	0x3fc99999
 800a7a8:	54442d18 	.word	0x54442d18
 800a7ac:	3ff921fb 	.word	0x3ff921fb
 800a7b0:	440fffff 	.word	0x440fffff
 800a7b4:	7ff00000 	.word	0x7ff00000
 800a7b8:	3fdbffff 	.word	0x3fdbffff
 800a7bc:	3ff00000 	.word	0x3ff00000
 800a7c0:	3ff2ffff 	.word	0x3ff2ffff
 800a7c4:	40038000 	.word	0x40038000
 800a7c8:	3ff80000 	.word	0x3ff80000
 800a7cc:	bff00000 	.word	0xbff00000
 800a7d0:	0800be28 	.word	0x0800be28
 800a7d4:	0800be08 	.word	0x0800be08

0800a7d8 <fabs>:
 800a7d8:	ec51 0b10 	vmov	r0, r1, d0
 800a7dc:	ee10 2a10 	vmov	r2, s0
 800a7e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7e4:	ec43 2b10 	vmov	d0, r2, r3
 800a7e8:	4770      	bx	lr
 800a7ea:	0000      	movs	r0, r0
 800a7ec:	0000      	movs	r0, r0
	...

0800a7f0 <tan>:
 800a7f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7f2:	ec53 2b10 	vmov	r2, r3, d0
 800a7f6:	4816      	ldr	r0, [pc, #88]	; (800a850 <tan+0x60>)
 800a7f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a7fc:	4281      	cmp	r1, r0
 800a7fe:	dc07      	bgt.n	800a810 <tan+0x20>
 800a800:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800a848 <tan+0x58>
 800a804:	2001      	movs	r0, #1
 800a806:	b005      	add	sp, #20
 800a808:	f85d eb04 	ldr.w	lr, [sp], #4
 800a80c:	f000 bd80 	b.w	800b310 <__kernel_tan>
 800a810:	4810      	ldr	r0, [pc, #64]	; (800a854 <tan+0x64>)
 800a812:	4281      	cmp	r1, r0
 800a814:	dd09      	ble.n	800a82a <tan+0x3a>
 800a816:	ee10 0a10 	vmov	r0, s0
 800a81a:	4619      	mov	r1, r3
 800a81c:	f7f5 fd54 	bl	80002c8 <__aeabi_dsub>
 800a820:	ec41 0b10 	vmov	d0, r0, r1
 800a824:	b005      	add	sp, #20
 800a826:	f85d fb04 	ldr.w	pc, [sp], #4
 800a82a:	4668      	mov	r0, sp
 800a82c:	f000 f814 	bl	800a858 <__ieee754_rem_pio2>
 800a830:	0040      	lsls	r0, r0, #1
 800a832:	f000 0002 	and.w	r0, r0, #2
 800a836:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a83a:	ed9d 0b00 	vldr	d0, [sp]
 800a83e:	f1c0 0001 	rsb	r0, r0, #1
 800a842:	f000 fd65 	bl	800b310 <__kernel_tan>
 800a846:	e7ed      	b.n	800a824 <tan+0x34>
	...
 800a850:	3fe921fb 	.word	0x3fe921fb
 800a854:	7fefffff 	.word	0x7fefffff

0800a858 <__ieee754_rem_pio2>:
 800a858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85c:	ed2d 8b02 	vpush	{d8}
 800a860:	ec55 4b10 	vmov	r4, r5, d0
 800a864:	4bca      	ldr	r3, [pc, #808]	; (800ab90 <__ieee754_rem_pio2+0x338>)
 800a866:	b08b      	sub	sp, #44	; 0x2c
 800a868:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a86c:	4598      	cmp	r8, r3
 800a86e:	4682      	mov	sl, r0
 800a870:	9502      	str	r5, [sp, #8]
 800a872:	dc08      	bgt.n	800a886 <__ieee754_rem_pio2+0x2e>
 800a874:	2200      	movs	r2, #0
 800a876:	2300      	movs	r3, #0
 800a878:	ed80 0b00 	vstr	d0, [r0]
 800a87c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a880:	f04f 0b00 	mov.w	fp, #0
 800a884:	e028      	b.n	800a8d8 <__ieee754_rem_pio2+0x80>
 800a886:	4bc3      	ldr	r3, [pc, #780]	; (800ab94 <__ieee754_rem_pio2+0x33c>)
 800a888:	4598      	cmp	r8, r3
 800a88a:	dc78      	bgt.n	800a97e <__ieee754_rem_pio2+0x126>
 800a88c:	9b02      	ldr	r3, [sp, #8]
 800a88e:	4ec2      	ldr	r6, [pc, #776]	; (800ab98 <__ieee754_rem_pio2+0x340>)
 800a890:	2b00      	cmp	r3, #0
 800a892:	ee10 0a10 	vmov	r0, s0
 800a896:	a3b0      	add	r3, pc, #704	; (adr r3, 800ab58 <__ieee754_rem_pio2+0x300>)
 800a898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89c:	4629      	mov	r1, r5
 800a89e:	dd39      	ble.n	800a914 <__ieee754_rem_pio2+0xbc>
 800a8a0:	f7f5 fd12 	bl	80002c8 <__aeabi_dsub>
 800a8a4:	45b0      	cmp	r8, r6
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	460d      	mov	r5, r1
 800a8aa:	d01b      	beq.n	800a8e4 <__ieee754_rem_pio2+0x8c>
 800a8ac:	a3ac      	add	r3, pc, #688	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x308>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	f7f5 fd09 	bl	80002c8 <__aeabi_dsub>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	e9ca 2300 	strd	r2, r3, [sl]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	f7f5 fd01 	bl	80002c8 <__aeabi_dsub>
 800a8c6:	a3a6      	add	r3, pc, #664	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x308>)
 800a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8cc:	f7f5 fcfc 	bl	80002c8 <__aeabi_dsub>
 800a8d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a8d4:	f04f 0b01 	mov.w	fp, #1
 800a8d8:	4658      	mov	r0, fp
 800a8da:	b00b      	add	sp, #44	; 0x2c
 800a8dc:	ecbd 8b02 	vpop	{d8}
 800a8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e4:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x310>)
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	f7f5 fced 	bl	80002c8 <__aeabi_dsub>
 800a8ee:	a3a0      	add	r3, pc, #640	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x318>)
 800a8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	460d      	mov	r5, r1
 800a8f8:	f7f5 fce6 	bl	80002c8 <__aeabi_dsub>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	e9ca 2300 	strd	r2, r3, [sl]
 800a904:	4620      	mov	r0, r4
 800a906:	4629      	mov	r1, r5
 800a908:	f7f5 fcde 	bl	80002c8 <__aeabi_dsub>
 800a90c:	a398      	add	r3, pc, #608	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x318>)
 800a90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a912:	e7db      	b.n	800a8cc <__ieee754_rem_pio2+0x74>
 800a914:	f7f5 fcda 	bl	80002cc <__adddf3>
 800a918:	45b0      	cmp	r8, r6
 800a91a:	4604      	mov	r4, r0
 800a91c:	460d      	mov	r5, r1
 800a91e:	d016      	beq.n	800a94e <__ieee754_rem_pio2+0xf6>
 800a920:	a38f      	add	r3, pc, #572	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x308>)
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f7f5 fcd1 	bl	80002cc <__adddf3>
 800a92a:	4602      	mov	r2, r0
 800a92c:	460b      	mov	r3, r1
 800a92e:	e9ca 2300 	strd	r2, r3, [sl]
 800a932:	4620      	mov	r0, r4
 800a934:	4629      	mov	r1, r5
 800a936:	f7f5 fcc7 	bl	80002c8 <__aeabi_dsub>
 800a93a:	a389      	add	r3, pc, #548	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x308>)
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	f7f5 fcc4 	bl	80002cc <__adddf3>
 800a944:	f04f 3bff 	mov.w	fp, #4294967295
 800a948:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a94c:	e7c4      	b.n	800a8d8 <__ieee754_rem_pio2+0x80>
 800a94e:	a386      	add	r3, pc, #536	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x310>)
 800a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a954:	f7f5 fcba 	bl	80002cc <__adddf3>
 800a958:	a385      	add	r3, pc, #532	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x318>)
 800a95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95e:	4604      	mov	r4, r0
 800a960:	460d      	mov	r5, r1
 800a962:	f7f5 fcb3 	bl	80002cc <__adddf3>
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	e9ca 2300 	strd	r2, r3, [sl]
 800a96e:	4620      	mov	r0, r4
 800a970:	4629      	mov	r1, r5
 800a972:	f7f5 fca9 	bl	80002c8 <__aeabi_dsub>
 800a976:	a37e      	add	r3, pc, #504	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x318>)
 800a978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97c:	e7e0      	b.n	800a940 <__ieee754_rem_pio2+0xe8>
 800a97e:	4b87      	ldr	r3, [pc, #540]	; (800ab9c <__ieee754_rem_pio2+0x344>)
 800a980:	4598      	cmp	r8, r3
 800a982:	f300 80d9 	bgt.w	800ab38 <__ieee754_rem_pio2+0x2e0>
 800a986:	f7ff ff27 	bl	800a7d8 <fabs>
 800a98a:	ec55 4b10 	vmov	r4, r5, d0
 800a98e:	ee10 0a10 	vmov	r0, s0
 800a992:	a379      	add	r3, pc, #484	; (adr r3, 800ab78 <__ieee754_rem_pio2+0x320>)
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	4629      	mov	r1, r5
 800a99a:	f7f5 fe4d 	bl	8000638 <__aeabi_dmul>
 800a99e:	4b80      	ldr	r3, [pc, #512]	; (800aba0 <__ieee754_rem_pio2+0x348>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f7f5 fc93 	bl	80002cc <__adddf3>
 800a9a6:	f7f6 f8f7 	bl	8000b98 <__aeabi_d2iz>
 800a9aa:	4683      	mov	fp, r0
 800a9ac:	f7f5 fdda 	bl	8000564 <__aeabi_i2d>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	ec43 2b18 	vmov	d8, r2, r3
 800a9b8:	a367      	add	r3, pc, #412	; (adr r3, 800ab58 <__ieee754_rem_pio2+0x300>)
 800a9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9be:	f7f5 fe3b 	bl	8000638 <__aeabi_dmul>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	f7f5 fc7d 	bl	80002c8 <__aeabi_dsub>
 800a9ce:	a364      	add	r3, pc, #400	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x308>)
 800a9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d4:	4606      	mov	r6, r0
 800a9d6:	460f      	mov	r7, r1
 800a9d8:	ec51 0b18 	vmov	r0, r1, d8
 800a9dc:	f7f5 fe2c 	bl	8000638 <__aeabi_dmul>
 800a9e0:	f1bb 0f1f 	cmp.w	fp, #31
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	460d      	mov	r5, r1
 800a9e8:	dc0d      	bgt.n	800aa06 <__ieee754_rem_pio2+0x1ae>
 800a9ea:	4b6e      	ldr	r3, [pc, #440]	; (800aba4 <__ieee754_rem_pio2+0x34c>)
 800a9ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f4:	4543      	cmp	r3, r8
 800a9f6:	d006      	beq.n	800aa06 <__ieee754_rem_pio2+0x1ae>
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	462b      	mov	r3, r5
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	4639      	mov	r1, r7
 800aa00:	f7f5 fc62 	bl	80002c8 <__aeabi_dsub>
 800aa04:	e00f      	b.n	800aa26 <__ieee754_rem_pio2+0x1ce>
 800aa06:	462b      	mov	r3, r5
 800aa08:	4622      	mov	r2, r4
 800aa0a:	4630      	mov	r0, r6
 800aa0c:	4639      	mov	r1, r7
 800aa0e:	f7f5 fc5b 	bl	80002c8 <__aeabi_dsub>
 800aa12:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa16:	9303      	str	r3, [sp, #12]
 800aa18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa1c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800aa20:	f1b8 0f10 	cmp.w	r8, #16
 800aa24:	dc02      	bgt.n	800aa2c <__ieee754_rem_pio2+0x1d4>
 800aa26:	e9ca 0100 	strd	r0, r1, [sl]
 800aa2a:	e039      	b.n	800aaa0 <__ieee754_rem_pio2+0x248>
 800aa2c:	a34e      	add	r3, pc, #312	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x310>)
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	ec51 0b18 	vmov	r0, r1, d8
 800aa36:	f7f5 fdff 	bl	8000638 <__aeabi_dmul>
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	460d      	mov	r5, r1
 800aa3e:	4602      	mov	r2, r0
 800aa40:	460b      	mov	r3, r1
 800aa42:	4630      	mov	r0, r6
 800aa44:	4639      	mov	r1, r7
 800aa46:	f7f5 fc3f 	bl	80002c8 <__aeabi_dsub>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	4680      	mov	r8, r0
 800aa50:	4689      	mov	r9, r1
 800aa52:	4630      	mov	r0, r6
 800aa54:	4639      	mov	r1, r7
 800aa56:	f7f5 fc37 	bl	80002c8 <__aeabi_dsub>
 800aa5a:	4622      	mov	r2, r4
 800aa5c:	462b      	mov	r3, r5
 800aa5e:	f7f5 fc33 	bl	80002c8 <__aeabi_dsub>
 800aa62:	a343      	add	r3, pc, #268	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x318>)
 800aa64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa68:	4604      	mov	r4, r0
 800aa6a:	460d      	mov	r5, r1
 800aa6c:	ec51 0b18 	vmov	r0, r1, d8
 800aa70:	f7f5 fde2 	bl	8000638 <__aeabi_dmul>
 800aa74:	4622      	mov	r2, r4
 800aa76:	462b      	mov	r3, r5
 800aa78:	f7f5 fc26 	bl	80002c8 <__aeabi_dsub>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	4604      	mov	r4, r0
 800aa82:	460d      	mov	r5, r1
 800aa84:	4640      	mov	r0, r8
 800aa86:	4649      	mov	r1, r9
 800aa88:	f7f5 fc1e 	bl	80002c8 <__aeabi_dsub>
 800aa8c:	9a03      	ldr	r2, [sp, #12]
 800aa8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa92:	1ad3      	subs	r3, r2, r3
 800aa94:	2b31      	cmp	r3, #49	; 0x31
 800aa96:	dc24      	bgt.n	800aae2 <__ieee754_rem_pio2+0x28a>
 800aa98:	e9ca 0100 	strd	r0, r1, [sl]
 800aa9c:	4646      	mov	r6, r8
 800aa9e:	464f      	mov	r7, r9
 800aaa0:	e9da 8900 	ldrd	r8, r9, [sl]
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	4642      	mov	r2, r8
 800aaa8:	464b      	mov	r3, r9
 800aaaa:	4639      	mov	r1, r7
 800aaac:	f7f5 fc0c 	bl	80002c8 <__aeabi_dsub>
 800aab0:	462b      	mov	r3, r5
 800aab2:	4622      	mov	r2, r4
 800aab4:	f7f5 fc08 	bl	80002c8 <__aeabi_dsub>
 800aab8:	9b02      	ldr	r3, [sp, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800aac0:	f6bf af0a 	bge.w	800a8d8 <__ieee754_rem_pio2+0x80>
 800aac4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aac8:	f8ca 3004 	str.w	r3, [sl, #4]
 800aacc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aad0:	f8ca 8000 	str.w	r8, [sl]
 800aad4:	f8ca 0008 	str.w	r0, [sl, #8]
 800aad8:	f8ca 300c 	str.w	r3, [sl, #12]
 800aadc:	f1cb 0b00 	rsb	fp, fp, #0
 800aae0:	e6fa      	b.n	800a8d8 <__ieee754_rem_pio2+0x80>
 800aae2:	a327      	add	r3, pc, #156	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x328>)
 800aae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae8:	ec51 0b18 	vmov	r0, r1, d8
 800aaec:	f7f5 fda4 	bl	8000638 <__aeabi_dmul>
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	460d      	mov	r5, r1
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4640      	mov	r0, r8
 800aafa:	4649      	mov	r1, r9
 800aafc:	f7f5 fbe4 	bl	80002c8 <__aeabi_dsub>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	4606      	mov	r6, r0
 800ab06:	460f      	mov	r7, r1
 800ab08:	4640      	mov	r0, r8
 800ab0a:	4649      	mov	r1, r9
 800ab0c:	f7f5 fbdc 	bl	80002c8 <__aeabi_dsub>
 800ab10:	4622      	mov	r2, r4
 800ab12:	462b      	mov	r3, r5
 800ab14:	f7f5 fbd8 	bl	80002c8 <__aeabi_dsub>
 800ab18:	a31b      	add	r3, pc, #108	; (adr r3, 800ab88 <__ieee754_rem_pio2+0x330>)
 800ab1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab1e:	4604      	mov	r4, r0
 800ab20:	460d      	mov	r5, r1
 800ab22:	ec51 0b18 	vmov	r0, r1, d8
 800ab26:	f7f5 fd87 	bl	8000638 <__aeabi_dmul>
 800ab2a:	4622      	mov	r2, r4
 800ab2c:	462b      	mov	r3, r5
 800ab2e:	f7f5 fbcb 	bl	80002c8 <__aeabi_dsub>
 800ab32:	4604      	mov	r4, r0
 800ab34:	460d      	mov	r5, r1
 800ab36:	e75f      	b.n	800a9f8 <__ieee754_rem_pio2+0x1a0>
 800ab38:	4b1b      	ldr	r3, [pc, #108]	; (800aba8 <__ieee754_rem_pio2+0x350>)
 800ab3a:	4598      	cmp	r8, r3
 800ab3c:	dd36      	ble.n	800abac <__ieee754_rem_pio2+0x354>
 800ab3e:	ee10 2a10 	vmov	r2, s0
 800ab42:	462b      	mov	r3, r5
 800ab44:	4620      	mov	r0, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f5 fbbe 	bl	80002c8 <__aeabi_dsub>
 800ab4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ab50:	e9ca 0100 	strd	r0, r1, [sl]
 800ab54:	e694      	b.n	800a880 <__ieee754_rem_pio2+0x28>
 800ab56:	bf00      	nop
 800ab58:	54400000 	.word	0x54400000
 800ab5c:	3ff921fb 	.word	0x3ff921fb
 800ab60:	1a626331 	.word	0x1a626331
 800ab64:	3dd0b461 	.word	0x3dd0b461
 800ab68:	1a600000 	.word	0x1a600000
 800ab6c:	3dd0b461 	.word	0x3dd0b461
 800ab70:	2e037073 	.word	0x2e037073
 800ab74:	3ba3198a 	.word	0x3ba3198a
 800ab78:	6dc9c883 	.word	0x6dc9c883
 800ab7c:	3fe45f30 	.word	0x3fe45f30
 800ab80:	2e000000 	.word	0x2e000000
 800ab84:	3ba3198a 	.word	0x3ba3198a
 800ab88:	252049c1 	.word	0x252049c1
 800ab8c:	397b839a 	.word	0x397b839a
 800ab90:	3fe921fb 	.word	0x3fe921fb
 800ab94:	4002d97b 	.word	0x4002d97b
 800ab98:	3ff921fb 	.word	0x3ff921fb
 800ab9c:	413921fb 	.word	0x413921fb
 800aba0:	3fe00000 	.word	0x3fe00000
 800aba4:	0800be48 	.word	0x0800be48
 800aba8:	7fefffff 	.word	0x7fefffff
 800abac:	ea4f 5428 	mov.w	r4, r8, asr #20
 800abb0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800abb4:	ee10 0a10 	vmov	r0, s0
 800abb8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800abbc:	ee10 6a10 	vmov	r6, s0
 800abc0:	460f      	mov	r7, r1
 800abc2:	f7f5 ffe9 	bl	8000b98 <__aeabi_d2iz>
 800abc6:	f7f5 fccd 	bl	8000564 <__aeabi_i2d>
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	4630      	mov	r0, r6
 800abd0:	4639      	mov	r1, r7
 800abd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800abd6:	f7f5 fb77 	bl	80002c8 <__aeabi_dsub>
 800abda:	4b23      	ldr	r3, [pc, #140]	; (800ac68 <__ieee754_rem_pio2+0x410>)
 800abdc:	2200      	movs	r2, #0
 800abde:	f7f5 fd2b 	bl	8000638 <__aeabi_dmul>
 800abe2:	460f      	mov	r7, r1
 800abe4:	4606      	mov	r6, r0
 800abe6:	f7f5 ffd7 	bl	8000b98 <__aeabi_d2iz>
 800abea:	f7f5 fcbb 	bl	8000564 <__aeabi_i2d>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	4630      	mov	r0, r6
 800abf4:	4639      	mov	r1, r7
 800abf6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abfa:	f7f5 fb65 	bl	80002c8 <__aeabi_dsub>
 800abfe:	4b1a      	ldr	r3, [pc, #104]	; (800ac68 <__ieee754_rem_pio2+0x410>)
 800ac00:	2200      	movs	r2, #0
 800ac02:	f7f5 fd19 	bl	8000638 <__aeabi_dmul>
 800ac06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac0a:	ad04      	add	r5, sp, #16
 800ac0c:	f04f 0803 	mov.w	r8, #3
 800ac10:	46a9      	mov	r9, r5
 800ac12:	2600      	movs	r6, #0
 800ac14:	2700      	movs	r7, #0
 800ac16:	4632      	mov	r2, r6
 800ac18:	463b      	mov	r3, r7
 800ac1a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ac1e:	46c3      	mov	fp, r8
 800ac20:	3d08      	subs	r5, #8
 800ac22:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac26:	f7f5 ff6f 	bl	8000b08 <__aeabi_dcmpeq>
 800ac2a:	2800      	cmp	r0, #0
 800ac2c:	d1f3      	bne.n	800ac16 <__ieee754_rem_pio2+0x3be>
 800ac2e:	4b0f      	ldr	r3, [pc, #60]	; (800ac6c <__ieee754_rem_pio2+0x414>)
 800ac30:	9301      	str	r3, [sp, #4]
 800ac32:	2302      	movs	r3, #2
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	4622      	mov	r2, r4
 800ac38:	465b      	mov	r3, fp
 800ac3a:	4651      	mov	r1, sl
 800ac3c:	4648      	mov	r0, r9
 800ac3e:	f000 f817 	bl	800ac70 <__kernel_rem_pio2>
 800ac42:	9b02      	ldr	r3, [sp, #8]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	4683      	mov	fp, r0
 800ac48:	f6bf ae46 	bge.w	800a8d8 <__ieee754_rem_pio2+0x80>
 800ac4c:	e9da 2100 	ldrd	r2, r1, [sl]
 800ac50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac54:	e9ca 2300 	strd	r2, r3, [sl]
 800ac58:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ac5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac60:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ac64:	e73a      	b.n	800aadc <__ieee754_rem_pio2+0x284>
 800ac66:	bf00      	nop
 800ac68:	41700000 	.word	0x41700000
 800ac6c:	0800bec8 	.word	0x0800bec8

0800ac70 <__kernel_rem_pio2>:
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	ed2d 8b02 	vpush	{d8}
 800ac78:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ac7c:	f112 0f14 	cmn.w	r2, #20
 800ac80:	9308      	str	r3, [sp, #32]
 800ac82:	9101      	str	r1, [sp, #4]
 800ac84:	4bc4      	ldr	r3, [pc, #784]	; (800af98 <__kernel_rem_pio2+0x328>)
 800ac86:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ac88:	900b      	str	r0, [sp, #44]	; 0x2c
 800ac8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac8e:	9302      	str	r3, [sp, #8]
 800ac90:	9b08      	ldr	r3, [sp, #32]
 800ac92:	f103 33ff 	add.w	r3, r3, #4294967295
 800ac96:	bfa8      	it	ge
 800ac98:	1ed4      	subge	r4, r2, #3
 800ac9a:	9306      	str	r3, [sp, #24]
 800ac9c:	bfb2      	itee	lt
 800ac9e:	2400      	movlt	r4, #0
 800aca0:	2318      	movge	r3, #24
 800aca2:	fb94 f4f3 	sdivge	r4, r4, r3
 800aca6:	f06f 0317 	mvn.w	r3, #23
 800acaa:	fb04 3303 	mla	r3, r4, r3, r3
 800acae:	eb03 0a02 	add.w	sl, r3, r2
 800acb2:	9b02      	ldr	r3, [sp, #8]
 800acb4:	9a06      	ldr	r2, [sp, #24]
 800acb6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800af88 <__kernel_rem_pio2+0x318>
 800acba:	eb03 0802 	add.w	r8, r3, r2
 800acbe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800acc0:	1aa7      	subs	r7, r4, r2
 800acc2:	ae22      	add	r6, sp, #136	; 0x88
 800acc4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800acc8:	2500      	movs	r5, #0
 800acca:	4545      	cmp	r5, r8
 800accc:	dd13      	ble.n	800acf6 <__kernel_rem_pio2+0x86>
 800acce:	9b08      	ldr	r3, [sp, #32]
 800acd0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800af88 <__kernel_rem_pio2+0x318>
 800acd4:	aa22      	add	r2, sp, #136	; 0x88
 800acd6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800acda:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800acde:	f04f 0800 	mov.w	r8, #0
 800ace2:	9b02      	ldr	r3, [sp, #8]
 800ace4:	4598      	cmp	r8, r3
 800ace6:	dc2f      	bgt.n	800ad48 <__kernel_rem_pio2+0xd8>
 800ace8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800acec:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800acf0:	462f      	mov	r7, r5
 800acf2:	2600      	movs	r6, #0
 800acf4:	e01b      	b.n	800ad2e <__kernel_rem_pio2+0xbe>
 800acf6:	42ef      	cmn	r7, r5
 800acf8:	d407      	bmi.n	800ad0a <__kernel_rem_pio2+0x9a>
 800acfa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800acfe:	f7f5 fc31 	bl	8000564 <__aeabi_i2d>
 800ad02:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ad06:	3501      	adds	r5, #1
 800ad08:	e7df      	b.n	800acca <__kernel_rem_pio2+0x5a>
 800ad0a:	ec51 0b18 	vmov	r0, r1, d8
 800ad0e:	e7f8      	b.n	800ad02 <__kernel_rem_pio2+0x92>
 800ad10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ad18:	f7f5 fc8e 	bl	8000638 <__aeabi_dmul>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	460b      	mov	r3, r1
 800ad20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad24:	f7f5 fad2 	bl	80002cc <__adddf3>
 800ad28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad2c:	3601      	adds	r6, #1
 800ad2e:	9b06      	ldr	r3, [sp, #24]
 800ad30:	429e      	cmp	r6, r3
 800ad32:	f1a7 0708 	sub.w	r7, r7, #8
 800ad36:	ddeb      	ble.n	800ad10 <__kernel_rem_pio2+0xa0>
 800ad38:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ad3c:	f108 0801 	add.w	r8, r8, #1
 800ad40:	ecab 7b02 	vstmia	fp!, {d7}
 800ad44:	3508      	adds	r5, #8
 800ad46:	e7cc      	b.n	800ace2 <__kernel_rem_pio2+0x72>
 800ad48:	9b02      	ldr	r3, [sp, #8]
 800ad4a:	aa0e      	add	r2, sp, #56	; 0x38
 800ad4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad50:	930d      	str	r3, [sp, #52]	; 0x34
 800ad52:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ad54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad58:	9c02      	ldr	r4, [sp, #8]
 800ad5a:	930c      	str	r3, [sp, #48]	; 0x30
 800ad5c:	00e3      	lsls	r3, r4, #3
 800ad5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ad60:	ab9a      	add	r3, sp, #616	; 0x268
 800ad62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad66:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ad6a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ad6e:	ab72      	add	r3, sp, #456	; 0x1c8
 800ad70:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ad74:	46c3      	mov	fp, r8
 800ad76:	46a1      	mov	r9, r4
 800ad78:	f1b9 0f00 	cmp.w	r9, #0
 800ad7c:	f1a5 0508 	sub.w	r5, r5, #8
 800ad80:	dc77      	bgt.n	800ae72 <__kernel_rem_pio2+0x202>
 800ad82:	ec47 6b10 	vmov	d0, r6, r7
 800ad86:	4650      	mov	r0, sl
 800ad88:	f000 fd4e 	bl	800b828 <scalbn>
 800ad8c:	ec57 6b10 	vmov	r6, r7, d0
 800ad90:	2200      	movs	r2, #0
 800ad92:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ad96:	ee10 0a10 	vmov	r0, s0
 800ad9a:	4639      	mov	r1, r7
 800ad9c:	f7f5 fc4c 	bl	8000638 <__aeabi_dmul>
 800ada0:	ec41 0b10 	vmov	d0, r0, r1
 800ada4:	f000 fcc0 	bl	800b728 <floor>
 800ada8:	4b7c      	ldr	r3, [pc, #496]	; (800af9c <__kernel_rem_pio2+0x32c>)
 800adaa:	ec51 0b10 	vmov	r0, r1, d0
 800adae:	2200      	movs	r2, #0
 800adb0:	f7f5 fc42 	bl	8000638 <__aeabi_dmul>
 800adb4:	4602      	mov	r2, r0
 800adb6:	460b      	mov	r3, r1
 800adb8:	4630      	mov	r0, r6
 800adba:	4639      	mov	r1, r7
 800adbc:	f7f5 fa84 	bl	80002c8 <__aeabi_dsub>
 800adc0:	460f      	mov	r7, r1
 800adc2:	4606      	mov	r6, r0
 800adc4:	f7f5 fee8 	bl	8000b98 <__aeabi_d2iz>
 800adc8:	9004      	str	r0, [sp, #16]
 800adca:	f7f5 fbcb 	bl	8000564 <__aeabi_i2d>
 800adce:	4602      	mov	r2, r0
 800add0:	460b      	mov	r3, r1
 800add2:	4630      	mov	r0, r6
 800add4:	4639      	mov	r1, r7
 800add6:	f7f5 fa77 	bl	80002c8 <__aeabi_dsub>
 800adda:	f1ba 0f00 	cmp.w	sl, #0
 800adde:	4606      	mov	r6, r0
 800ade0:	460f      	mov	r7, r1
 800ade2:	dd6d      	ble.n	800aec0 <__kernel_rem_pio2+0x250>
 800ade4:	1e62      	subs	r2, r4, #1
 800ade6:	ab0e      	add	r3, sp, #56	; 0x38
 800ade8:	9d04      	ldr	r5, [sp, #16]
 800adea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800adee:	f1ca 0118 	rsb	r1, sl, #24
 800adf2:	fa40 f301 	asr.w	r3, r0, r1
 800adf6:	441d      	add	r5, r3
 800adf8:	408b      	lsls	r3, r1
 800adfa:	1ac0      	subs	r0, r0, r3
 800adfc:	ab0e      	add	r3, sp, #56	; 0x38
 800adfe:	9504      	str	r5, [sp, #16]
 800ae00:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ae04:	f1ca 0317 	rsb	r3, sl, #23
 800ae08:	fa40 fb03 	asr.w	fp, r0, r3
 800ae0c:	f1bb 0f00 	cmp.w	fp, #0
 800ae10:	dd65      	ble.n	800aede <__kernel_rem_pio2+0x26e>
 800ae12:	9b04      	ldr	r3, [sp, #16]
 800ae14:	2200      	movs	r2, #0
 800ae16:	3301      	adds	r3, #1
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	4615      	mov	r5, r2
 800ae1c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ae20:	4294      	cmp	r4, r2
 800ae22:	f300 809c 	bgt.w	800af5e <__kernel_rem_pio2+0x2ee>
 800ae26:	f1ba 0f00 	cmp.w	sl, #0
 800ae2a:	dd07      	ble.n	800ae3c <__kernel_rem_pio2+0x1cc>
 800ae2c:	f1ba 0f01 	cmp.w	sl, #1
 800ae30:	f000 80c0 	beq.w	800afb4 <__kernel_rem_pio2+0x344>
 800ae34:	f1ba 0f02 	cmp.w	sl, #2
 800ae38:	f000 80c6 	beq.w	800afc8 <__kernel_rem_pio2+0x358>
 800ae3c:	f1bb 0f02 	cmp.w	fp, #2
 800ae40:	d14d      	bne.n	800aede <__kernel_rem_pio2+0x26e>
 800ae42:	4632      	mov	r2, r6
 800ae44:	463b      	mov	r3, r7
 800ae46:	4956      	ldr	r1, [pc, #344]	; (800afa0 <__kernel_rem_pio2+0x330>)
 800ae48:	2000      	movs	r0, #0
 800ae4a:	f7f5 fa3d 	bl	80002c8 <__aeabi_dsub>
 800ae4e:	4606      	mov	r6, r0
 800ae50:	460f      	mov	r7, r1
 800ae52:	2d00      	cmp	r5, #0
 800ae54:	d043      	beq.n	800aede <__kernel_rem_pio2+0x26e>
 800ae56:	4650      	mov	r0, sl
 800ae58:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800af90 <__kernel_rem_pio2+0x320>
 800ae5c:	f000 fce4 	bl	800b828 <scalbn>
 800ae60:	4630      	mov	r0, r6
 800ae62:	4639      	mov	r1, r7
 800ae64:	ec53 2b10 	vmov	r2, r3, d0
 800ae68:	f7f5 fa2e 	bl	80002c8 <__aeabi_dsub>
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	460f      	mov	r7, r1
 800ae70:	e035      	b.n	800aede <__kernel_rem_pio2+0x26e>
 800ae72:	4b4c      	ldr	r3, [pc, #304]	; (800afa4 <__kernel_rem_pio2+0x334>)
 800ae74:	2200      	movs	r2, #0
 800ae76:	4630      	mov	r0, r6
 800ae78:	4639      	mov	r1, r7
 800ae7a:	f7f5 fbdd 	bl	8000638 <__aeabi_dmul>
 800ae7e:	f7f5 fe8b 	bl	8000b98 <__aeabi_d2iz>
 800ae82:	f7f5 fb6f 	bl	8000564 <__aeabi_i2d>
 800ae86:	4602      	mov	r2, r0
 800ae88:	460b      	mov	r3, r1
 800ae8a:	ec43 2b18 	vmov	d8, r2, r3
 800ae8e:	4b46      	ldr	r3, [pc, #280]	; (800afa8 <__kernel_rem_pio2+0x338>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	f7f5 fbd1 	bl	8000638 <__aeabi_dmul>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	4639      	mov	r1, r7
 800ae9e:	f7f5 fa13 	bl	80002c8 <__aeabi_dsub>
 800aea2:	f7f5 fe79 	bl	8000b98 <__aeabi_d2iz>
 800aea6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aeaa:	f84b 0b04 	str.w	r0, [fp], #4
 800aeae:	ec51 0b18 	vmov	r0, r1, d8
 800aeb2:	f7f5 fa0b 	bl	80002cc <__adddf3>
 800aeb6:	f109 39ff 	add.w	r9, r9, #4294967295
 800aeba:	4606      	mov	r6, r0
 800aebc:	460f      	mov	r7, r1
 800aebe:	e75b      	b.n	800ad78 <__kernel_rem_pio2+0x108>
 800aec0:	d106      	bne.n	800aed0 <__kernel_rem_pio2+0x260>
 800aec2:	1e63      	subs	r3, r4, #1
 800aec4:	aa0e      	add	r2, sp, #56	; 0x38
 800aec6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aeca:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800aece:	e79d      	b.n	800ae0c <__kernel_rem_pio2+0x19c>
 800aed0:	4b36      	ldr	r3, [pc, #216]	; (800afac <__kernel_rem_pio2+0x33c>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	f7f5 fe36 	bl	8000b44 <__aeabi_dcmpge>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d13d      	bne.n	800af58 <__kernel_rem_pio2+0x2e8>
 800aedc:	4683      	mov	fp, r0
 800aede:	2200      	movs	r2, #0
 800aee0:	2300      	movs	r3, #0
 800aee2:	4630      	mov	r0, r6
 800aee4:	4639      	mov	r1, r7
 800aee6:	f7f5 fe0f 	bl	8000b08 <__aeabi_dcmpeq>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	f000 80c0 	beq.w	800b070 <__kernel_rem_pio2+0x400>
 800aef0:	1e65      	subs	r5, r4, #1
 800aef2:	462b      	mov	r3, r5
 800aef4:	2200      	movs	r2, #0
 800aef6:	9902      	ldr	r1, [sp, #8]
 800aef8:	428b      	cmp	r3, r1
 800aefa:	da6c      	bge.n	800afd6 <__kernel_rem_pio2+0x366>
 800aefc:	2a00      	cmp	r2, #0
 800aefe:	f000 8089 	beq.w	800b014 <__kernel_rem_pio2+0x3a4>
 800af02:	ab0e      	add	r3, sp, #56	; 0x38
 800af04:	f1aa 0a18 	sub.w	sl, sl, #24
 800af08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 80ad 	beq.w	800b06c <__kernel_rem_pio2+0x3fc>
 800af12:	4650      	mov	r0, sl
 800af14:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800af90 <__kernel_rem_pio2+0x320>
 800af18:	f000 fc86 	bl	800b828 <scalbn>
 800af1c:	ab9a      	add	r3, sp, #616	; 0x268
 800af1e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800af22:	ec57 6b10 	vmov	r6, r7, d0
 800af26:	00ec      	lsls	r4, r5, #3
 800af28:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800af2c:	46aa      	mov	sl, r5
 800af2e:	f1ba 0f00 	cmp.w	sl, #0
 800af32:	f280 80d6 	bge.w	800b0e2 <__kernel_rem_pio2+0x472>
 800af36:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800af88 <__kernel_rem_pio2+0x318>
 800af3a:	462e      	mov	r6, r5
 800af3c:	2e00      	cmp	r6, #0
 800af3e:	f2c0 8104 	blt.w	800b14a <__kernel_rem_pio2+0x4da>
 800af42:	ab72      	add	r3, sp, #456	; 0x1c8
 800af44:	ed8d 8b06 	vstr	d8, [sp, #24]
 800af48:	f8df a064 	ldr.w	sl, [pc, #100]	; 800afb0 <__kernel_rem_pio2+0x340>
 800af4c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800af50:	f04f 0800 	mov.w	r8, #0
 800af54:	1baf      	subs	r7, r5, r6
 800af56:	e0ea      	b.n	800b12e <__kernel_rem_pio2+0x4be>
 800af58:	f04f 0b02 	mov.w	fp, #2
 800af5c:	e759      	b.n	800ae12 <__kernel_rem_pio2+0x1a2>
 800af5e:	f8d8 3000 	ldr.w	r3, [r8]
 800af62:	b955      	cbnz	r5, 800af7a <__kernel_rem_pio2+0x30a>
 800af64:	b123      	cbz	r3, 800af70 <__kernel_rem_pio2+0x300>
 800af66:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800af6a:	f8c8 3000 	str.w	r3, [r8]
 800af6e:	2301      	movs	r3, #1
 800af70:	3201      	adds	r2, #1
 800af72:	f108 0804 	add.w	r8, r8, #4
 800af76:	461d      	mov	r5, r3
 800af78:	e752      	b.n	800ae20 <__kernel_rem_pio2+0x1b0>
 800af7a:	1acb      	subs	r3, r1, r3
 800af7c:	f8c8 3000 	str.w	r3, [r8]
 800af80:	462b      	mov	r3, r5
 800af82:	e7f5      	b.n	800af70 <__kernel_rem_pio2+0x300>
 800af84:	f3af 8000 	nop.w
	...
 800af94:	3ff00000 	.word	0x3ff00000
 800af98:	0800c010 	.word	0x0800c010
 800af9c:	40200000 	.word	0x40200000
 800afa0:	3ff00000 	.word	0x3ff00000
 800afa4:	3e700000 	.word	0x3e700000
 800afa8:	41700000 	.word	0x41700000
 800afac:	3fe00000 	.word	0x3fe00000
 800afb0:	0800bfd0 	.word	0x0800bfd0
 800afb4:	1e62      	subs	r2, r4, #1
 800afb6:	ab0e      	add	r3, sp, #56	; 0x38
 800afb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afbc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800afc0:	a90e      	add	r1, sp, #56	; 0x38
 800afc2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800afc6:	e739      	b.n	800ae3c <__kernel_rem_pio2+0x1cc>
 800afc8:	1e62      	subs	r2, r4, #1
 800afca:	ab0e      	add	r3, sp, #56	; 0x38
 800afcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800afd4:	e7f4      	b.n	800afc0 <__kernel_rem_pio2+0x350>
 800afd6:	a90e      	add	r1, sp, #56	; 0x38
 800afd8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800afdc:	3b01      	subs	r3, #1
 800afde:	430a      	orrs	r2, r1
 800afe0:	e789      	b.n	800aef6 <__kernel_rem_pio2+0x286>
 800afe2:	3301      	adds	r3, #1
 800afe4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800afe8:	2900      	cmp	r1, #0
 800afea:	d0fa      	beq.n	800afe2 <__kernel_rem_pio2+0x372>
 800afec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800afee:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800aff2:	446a      	add	r2, sp
 800aff4:	3a98      	subs	r2, #152	; 0x98
 800aff6:	920a      	str	r2, [sp, #40]	; 0x28
 800aff8:	9a08      	ldr	r2, [sp, #32]
 800affa:	18e3      	adds	r3, r4, r3
 800affc:	18a5      	adds	r5, r4, r2
 800affe:	aa22      	add	r2, sp, #136	; 0x88
 800b000:	f104 0801 	add.w	r8, r4, #1
 800b004:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800b008:	9304      	str	r3, [sp, #16]
 800b00a:	9b04      	ldr	r3, [sp, #16]
 800b00c:	4543      	cmp	r3, r8
 800b00e:	da04      	bge.n	800b01a <__kernel_rem_pio2+0x3aa>
 800b010:	461c      	mov	r4, r3
 800b012:	e6a3      	b.n	800ad5c <__kernel_rem_pio2+0xec>
 800b014:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b016:	2301      	movs	r3, #1
 800b018:	e7e4      	b.n	800afe4 <__kernel_rem_pio2+0x374>
 800b01a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b01c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b020:	f7f5 faa0 	bl	8000564 <__aeabi_i2d>
 800b024:	e8e5 0102 	strd	r0, r1, [r5], #8
 800b028:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b02a:	46ab      	mov	fp, r5
 800b02c:	461c      	mov	r4, r3
 800b02e:	f04f 0900 	mov.w	r9, #0
 800b032:	2600      	movs	r6, #0
 800b034:	2700      	movs	r7, #0
 800b036:	9b06      	ldr	r3, [sp, #24]
 800b038:	4599      	cmp	r9, r3
 800b03a:	dd06      	ble.n	800b04a <__kernel_rem_pio2+0x3da>
 800b03c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b03e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800b042:	f108 0801 	add.w	r8, r8, #1
 800b046:	930a      	str	r3, [sp, #40]	; 0x28
 800b048:	e7df      	b.n	800b00a <__kernel_rem_pio2+0x39a>
 800b04a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b04e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b052:	f7f5 faf1 	bl	8000638 <__aeabi_dmul>
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4630      	mov	r0, r6
 800b05c:	4639      	mov	r1, r7
 800b05e:	f7f5 f935 	bl	80002cc <__adddf3>
 800b062:	f109 0901 	add.w	r9, r9, #1
 800b066:	4606      	mov	r6, r0
 800b068:	460f      	mov	r7, r1
 800b06a:	e7e4      	b.n	800b036 <__kernel_rem_pio2+0x3c6>
 800b06c:	3d01      	subs	r5, #1
 800b06e:	e748      	b.n	800af02 <__kernel_rem_pio2+0x292>
 800b070:	ec47 6b10 	vmov	d0, r6, r7
 800b074:	f1ca 0000 	rsb	r0, sl, #0
 800b078:	f000 fbd6 	bl	800b828 <scalbn>
 800b07c:	ec57 6b10 	vmov	r6, r7, d0
 800b080:	4ba0      	ldr	r3, [pc, #640]	; (800b304 <__kernel_rem_pio2+0x694>)
 800b082:	ee10 0a10 	vmov	r0, s0
 800b086:	2200      	movs	r2, #0
 800b088:	4639      	mov	r1, r7
 800b08a:	f7f5 fd5b 	bl	8000b44 <__aeabi_dcmpge>
 800b08e:	b1f8      	cbz	r0, 800b0d0 <__kernel_rem_pio2+0x460>
 800b090:	4b9d      	ldr	r3, [pc, #628]	; (800b308 <__kernel_rem_pio2+0x698>)
 800b092:	2200      	movs	r2, #0
 800b094:	4630      	mov	r0, r6
 800b096:	4639      	mov	r1, r7
 800b098:	f7f5 face 	bl	8000638 <__aeabi_dmul>
 800b09c:	f7f5 fd7c 	bl	8000b98 <__aeabi_d2iz>
 800b0a0:	4680      	mov	r8, r0
 800b0a2:	f7f5 fa5f 	bl	8000564 <__aeabi_i2d>
 800b0a6:	4b97      	ldr	r3, [pc, #604]	; (800b304 <__kernel_rem_pio2+0x694>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f7f5 fac5 	bl	8000638 <__aeabi_dmul>
 800b0ae:	460b      	mov	r3, r1
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	4639      	mov	r1, r7
 800b0b4:	4630      	mov	r0, r6
 800b0b6:	f7f5 f907 	bl	80002c8 <__aeabi_dsub>
 800b0ba:	f7f5 fd6d 	bl	8000b98 <__aeabi_d2iz>
 800b0be:	1c65      	adds	r5, r4, #1
 800b0c0:	ab0e      	add	r3, sp, #56	; 0x38
 800b0c2:	f10a 0a18 	add.w	sl, sl, #24
 800b0c6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b0ca:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b0ce:	e720      	b.n	800af12 <__kernel_rem_pio2+0x2a2>
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	4639      	mov	r1, r7
 800b0d4:	f7f5 fd60 	bl	8000b98 <__aeabi_d2iz>
 800b0d8:	ab0e      	add	r3, sp, #56	; 0x38
 800b0da:	4625      	mov	r5, r4
 800b0dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b0e0:	e717      	b.n	800af12 <__kernel_rem_pio2+0x2a2>
 800b0e2:	ab0e      	add	r3, sp, #56	; 0x38
 800b0e4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800b0e8:	f7f5 fa3c 	bl	8000564 <__aeabi_i2d>
 800b0ec:	4632      	mov	r2, r6
 800b0ee:	463b      	mov	r3, r7
 800b0f0:	f7f5 faa2 	bl	8000638 <__aeabi_dmul>
 800b0f4:	4b84      	ldr	r3, [pc, #528]	; (800b308 <__kernel_rem_pio2+0x698>)
 800b0f6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	4639      	mov	r1, r7
 800b100:	f7f5 fa9a 	bl	8000638 <__aeabi_dmul>
 800b104:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b108:	4606      	mov	r6, r0
 800b10a:	460f      	mov	r7, r1
 800b10c:	e70f      	b.n	800af2e <__kernel_rem_pio2+0x2be>
 800b10e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b112:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b116:	f7f5 fa8f 	bl	8000638 <__aeabi_dmul>
 800b11a:	4602      	mov	r2, r0
 800b11c:	460b      	mov	r3, r1
 800b11e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b122:	f7f5 f8d3 	bl	80002cc <__adddf3>
 800b126:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b12a:	f108 0801 	add.w	r8, r8, #1
 800b12e:	9b02      	ldr	r3, [sp, #8]
 800b130:	4598      	cmp	r8, r3
 800b132:	dc01      	bgt.n	800b138 <__kernel_rem_pio2+0x4c8>
 800b134:	45b8      	cmp	r8, r7
 800b136:	ddea      	ble.n	800b10e <__kernel_rem_pio2+0x49e>
 800b138:	ed9d 7b06 	vldr	d7, [sp, #24]
 800b13c:	ab4a      	add	r3, sp, #296	; 0x128
 800b13e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b142:	ed87 7b00 	vstr	d7, [r7]
 800b146:	3e01      	subs	r6, #1
 800b148:	e6f8      	b.n	800af3c <__kernel_rem_pio2+0x2cc>
 800b14a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	dc0b      	bgt.n	800b168 <__kernel_rem_pio2+0x4f8>
 800b150:	2b00      	cmp	r3, #0
 800b152:	dc35      	bgt.n	800b1c0 <__kernel_rem_pio2+0x550>
 800b154:	d059      	beq.n	800b20a <__kernel_rem_pio2+0x59a>
 800b156:	9b04      	ldr	r3, [sp, #16]
 800b158:	f003 0007 	and.w	r0, r3, #7
 800b15c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b160:	ecbd 8b02 	vpop	{d8}
 800b164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b168:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d1f3      	bne.n	800b156 <__kernel_rem_pio2+0x4e6>
 800b16e:	ab4a      	add	r3, sp, #296	; 0x128
 800b170:	4423      	add	r3, r4
 800b172:	9306      	str	r3, [sp, #24]
 800b174:	461c      	mov	r4, r3
 800b176:	469a      	mov	sl, r3
 800b178:	9502      	str	r5, [sp, #8]
 800b17a:	9b02      	ldr	r3, [sp, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f1aa 0a08 	sub.w	sl, sl, #8
 800b182:	dc6b      	bgt.n	800b25c <__kernel_rem_pio2+0x5ec>
 800b184:	46aa      	mov	sl, r5
 800b186:	f1ba 0f01 	cmp.w	sl, #1
 800b18a:	f1a4 0408 	sub.w	r4, r4, #8
 800b18e:	f300 8085 	bgt.w	800b29c <__kernel_rem_pio2+0x62c>
 800b192:	9c06      	ldr	r4, [sp, #24]
 800b194:	2000      	movs	r0, #0
 800b196:	3408      	adds	r4, #8
 800b198:	2100      	movs	r1, #0
 800b19a:	2d01      	cmp	r5, #1
 800b19c:	f300 809d 	bgt.w	800b2da <__kernel_rem_pio2+0x66a>
 800b1a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800b1a4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800b1a8:	f1bb 0f00 	cmp.w	fp, #0
 800b1ac:	f040 809b 	bne.w	800b2e6 <__kernel_rem_pio2+0x676>
 800b1b0:	9b01      	ldr	r3, [sp, #4]
 800b1b2:	e9c3 5600 	strd	r5, r6, [r3]
 800b1b6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b1ba:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b1be:	e7ca      	b.n	800b156 <__kernel_rem_pio2+0x4e6>
 800b1c0:	3408      	adds	r4, #8
 800b1c2:	ab4a      	add	r3, sp, #296	; 0x128
 800b1c4:	441c      	add	r4, r3
 800b1c6:	462e      	mov	r6, r5
 800b1c8:	2000      	movs	r0, #0
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	2e00      	cmp	r6, #0
 800b1ce:	da36      	bge.n	800b23e <__kernel_rem_pio2+0x5ce>
 800b1d0:	f1bb 0f00 	cmp.w	fp, #0
 800b1d4:	d039      	beq.n	800b24a <__kernel_rem_pio2+0x5da>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1dc:	9c01      	ldr	r4, [sp, #4]
 800b1de:	e9c4 2300 	strd	r2, r3, [r4]
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b1ea:	f7f5 f86d 	bl	80002c8 <__aeabi_dsub>
 800b1ee:	ae4c      	add	r6, sp, #304	; 0x130
 800b1f0:	2401      	movs	r4, #1
 800b1f2:	42a5      	cmp	r5, r4
 800b1f4:	da2c      	bge.n	800b250 <__kernel_rem_pio2+0x5e0>
 800b1f6:	f1bb 0f00 	cmp.w	fp, #0
 800b1fa:	d002      	beq.n	800b202 <__kernel_rem_pio2+0x592>
 800b1fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b200:	4619      	mov	r1, r3
 800b202:	9b01      	ldr	r3, [sp, #4]
 800b204:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b208:	e7a5      	b.n	800b156 <__kernel_rem_pio2+0x4e6>
 800b20a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800b20e:	eb0d 0403 	add.w	r4, sp, r3
 800b212:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b216:	2000      	movs	r0, #0
 800b218:	2100      	movs	r1, #0
 800b21a:	2d00      	cmp	r5, #0
 800b21c:	da09      	bge.n	800b232 <__kernel_rem_pio2+0x5c2>
 800b21e:	f1bb 0f00 	cmp.w	fp, #0
 800b222:	d002      	beq.n	800b22a <__kernel_rem_pio2+0x5ba>
 800b224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b228:	4619      	mov	r1, r3
 800b22a:	9b01      	ldr	r3, [sp, #4]
 800b22c:	e9c3 0100 	strd	r0, r1, [r3]
 800b230:	e791      	b.n	800b156 <__kernel_rem_pio2+0x4e6>
 800b232:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b236:	f7f5 f849 	bl	80002cc <__adddf3>
 800b23a:	3d01      	subs	r5, #1
 800b23c:	e7ed      	b.n	800b21a <__kernel_rem_pio2+0x5aa>
 800b23e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b242:	f7f5 f843 	bl	80002cc <__adddf3>
 800b246:	3e01      	subs	r6, #1
 800b248:	e7c0      	b.n	800b1cc <__kernel_rem_pio2+0x55c>
 800b24a:	4602      	mov	r2, r0
 800b24c:	460b      	mov	r3, r1
 800b24e:	e7c5      	b.n	800b1dc <__kernel_rem_pio2+0x56c>
 800b250:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b254:	f7f5 f83a 	bl	80002cc <__adddf3>
 800b258:	3401      	adds	r4, #1
 800b25a:	e7ca      	b.n	800b1f2 <__kernel_rem_pio2+0x582>
 800b25c:	e9da 8900 	ldrd	r8, r9, [sl]
 800b260:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b264:	9b02      	ldr	r3, [sp, #8]
 800b266:	3b01      	subs	r3, #1
 800b268:	9302      	str	r3, [sp, #8]
 800b26a:	4632      	mov	r2, r6
 800b26c:	463b      	mov	r3, r7
 800b26e:	4640      	mov	r0, r8
 800b270:	4649      	mov	r1, r9
 800b272:	f7f5 f82b 	bl	80002cc <__adddf3>
 800b276:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	4640      	mov	r0, r8
 800b280:	4649      	mov	r1, r9
 800b282:	f7f5 f821 	bl	80002c8 <__aeabi_dsub>
 800b286:	4632      	mov	r2, r6
 800b288:	463b      	mov	r3, r7
 800b28a:	f7f5 f81f 	bl	80002cc <__adddf3>
 800b28e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800b292:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b296:	ed8a 7b00 	vstr	d7, [sl]
 800b29a:	e76e      	b.n	800b17a <__kernel_rem_pio2+0x50a>
 800b29c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b2a0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	4632      	mov	r2, r6
 800b2a8:	463b      	mov	r3, r7
 800b2aa:	4649      	mov	r1, r9
 800b2ac:	f7f5 f80e 	bl	80002cc <__adddf3>
 800b2b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	460b      	mov	r3, r1
 800b2b8:	4640      	mov	r0, r8
 800b2ba:	4649      	mov	r1, r9
 800b2bc:	f7f5 f804 	bl	80002c8 <__aeabi_dsub>
 800b2c0:	4632      	mov	r2, r6
 800b2c2:	463b      	mov	r3, r7
 800b2c4:	f7f5 f802 	bl	80002cc <__adddf3>
 800b2c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b2d0:	ed84 7b00 	vstr	d7, [r4]
 800b2d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2d8:	e755      	b.n	800b186 <__kernel_rem_pio2+0x516>
 800b2da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b2de:	f7f4 fff5 	bl	80002cc <__adddf3>
 800b2e2:	3d01      	subs	r5, #1
 800b2e4:	e759      	b.n	800b19a <__kernel_rem_pio2+0x52a>
 800b2e6:	9b01      	ldr	r3, [sp, #4]
 800b2e8:	9a01      	ldr	r2, [sp, #4]
 800b2ea:	601d      	str	r5, [r3, #0]
 800b2ec:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b2f0:	605c      	str	r4, [r3, #4]
 800b2f2:	609f      	str	r7, [r3, #8]
 800b2f4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b2f8:	60d3      	str	r3, [r2, #12]
 800b2fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2fe:	6110      	str	r0, [r2, #16]
 800b300:	6153      	str	r3, [r2, #20]
 800b302:	e728      	b.n	800b156 <__kernel_rem_pio2+0x4e6>
 800b304:	41700000 	.word	0x41700000
 800b308:	3e700000 	.word	0x3e700000
 800b30c:	00000000 	.word	0x00000000

0800b310 <__kernel_tan>:
 800b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b314:	ed2d 8b06 	vpush	{d8-d10}
 800b318:	ec5b ab10 	vmov	sl, fp, d0
 800b31c:	4be0      	ldr	r3, [pc, #896]	; (800b6a0 <__kernel_tan+0x390>)
 800b31e:	b083      	sub	sp, #12
 800b320:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800b324:	429f      	cmp	r7, r3
 800b326:	ec59 8b11 	vmov	r8, r9, d1
 800b32a:	4606      	mov	r6, r0
 800b32c:	f8cd b000 	str.w	fp, [sp]
 800b330:	dc61      	bgt.n	800b3f6 <__kernel_tan+0xe6>
 800b332:	ee10 0a10 	vmov	r0, s0
 800b336:	4659      	mov	r1, fp
 800b338:	f7f5 fc2e 	bl	8000b98 <__aeabi_d2iz>
 800b33c:	4605      	mov	r5, r0
 800b33e:	2800      	cmp	r0, #0
 800b340:	f040 8083 	bne.w	800b44a <__kernel_tan+0x13a>
 800b344:	1c73      	adds	r3, r6, #1
 800b346:	4652      	mov	r2, sl
 800b348:	4313      	orrs	r3, r2
 800b34a:	433b      	orrs	r3, r7
 800b34c:	d112      	bne.n	800b374 <__kernel_tan+0x64>
 800b34e:	ec4b ab10 	vmov	d0, sl, fp
 800b352:	f7ff fa41 	bl	800a7d8 <fabs>
 800b356:	49d3      	ldr	r1, [pc, #844]	; (800b6a4 <__kernel_tan+0x394>)
 800b358:	ec53 2b10 	vmov	r2, r3, d0
 800b35c:	2000      	movs	r0, #0
 800b35e:	f7f5 fa95 	bl	800088c <__aeabi_ddiv>
 800b362:	4682      	mov	sl, r0
 800b364:	468b      	mov	fp, r1
 800b366:	ec4b ab10 	vmov	d0, sl, fp
 800b36a:	b003      	add	sp, #12
 800b36c:	ecbd 8b06 	vpop	{d8-d10}
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b374:	2e01      	cmp	r6, #1
 800b376:	d0f6      	beq.n	800b366 <__kernel_tan+0x56>
 800b378:	4642      	mov	r2, r8
 800b37a:	464b      	mov	r3, r9
 800b37c:	4650      	mov	r0, sl
 800b37e:	4659      	mov	r1, fp
 800b380:	f7f4 ffa4 	bl	80002cc <__adddf3>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	460f      	mov	r7, r1
 800b38a:	2000      	movs	r0, #0
 800b38c:	49c6      	ldr	r1, [pc, #792]	; (800b6a8 <__kernel_tan+0x398>)
 800b38e:	f7f5 fa7d 	bl	800088c <__aeabi_ddiv>
 800b392:	e9cd 0100 	strd	r0, r1, [sp]
 800b396:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b39a:	462e      	mov	r6, r5
 800b39c:	4652      	mov	r2, sl
 800b39e:	462c      	mov	r4, r5
 800b3a0:	4630      	mov	r0, r6
 800b3a2:	461d      	mov	r5, r3
 800b3a4:	4639      	mov	r1, r7
 800b3a6:	465b      	mov	r3, fp
 800b3a8:	f7f4 ff8e 	bl	80002c8 <__aeabi_dsub>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	f7f4 ff88 	bl	80002c8 <__aeabi_dsub>
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	462b      	mov	r3, r5
 800b3bc:	f7f5 f93c 	bl	8000638 <__aeabi_dmul>
 800b3c0:	4632      	mov	r2, r6
 800b3c2:	4680      	mov	r8, r0
 800b3c4:	4689      	mov	r9, r1
 800b3c6:	462b      	mov	r3, r5
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	f7f5 f934 	bl	8000638 <__aeabi_dmul>
 800b3d0:	4bb4      	ldr	r3, [pc, #720]	; (800b6a4 <__kernel_tan+0x394>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f7f4 ff7a 	bl	80002cc <__adddf3>
 800b3d8:	4602      	mov	r2, r0
 800b3da:	460b      	mov	r3, r1
 800b3dc:	4640      	mov	r0, r8
 800b3de:	4649      	mov	r1, r9
 800b3e0:	f7f4 ff74 	bl	80002cc <__adddf3>
 800b3e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3e8:	f7f5 f926 	bl	8000638 <__aeabi_dmul>
 800b3ec:	4622      	mov	r2, r4
 800b3ee:	462b      	mov	r3, r5
 800b3f0:	f7f4 ff6c 	bl	80002cc <__adddf3>
 800b3f4:	e7b5      	b.n	800b362 <__kernel_tan+0x52>
 800b3f6:	4bad      	ldr	r3, [pc, #692]	; (800b6ac <__kernel_tan+0x39c>)
 800b3f8:	429f      	cmp	r7, r3
 800b3fa:	dd26      	ble.n	800b44a <__kernel_tan+0x13a>
 800b3fc:	9b00      	ldr	r3, [sp, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	da09      	bge.n	800b416 <__kernel_tan+0x106>
 800b402:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b406:	469b      	mov	fp, r3
 800b408:	ee10 aa10 	vmov	sl, s0
 800b40c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b410:	ee11 8a10 	vmov	r8, s2
 800b414:	4699      	mov	r9, r3
 800b416:	4652      	mov	r2, sl
 800b418:	465b      	mov	r3, fp
 800b41a:	a183      	add	r1, pc, #524	; (adr r1, 800b628 <__kernel_tan+0x318>)
 800b41c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b420:	f7f4 ff52 	bl	80002c8 <__aeabi_dsub>
 800b424:	4642      	mov	r2, r8
 800b426:	464b      	mov	r3, r9
 800b428:	4604      	mov	r4, r0
 800b42a:	460d      	mov	r5, r1
 800b42c:	a180      	add	r1, pc, #512	; (adr r1, 800b630 <__kernel_tan+0x320>)
 800b42e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b432:	f7f4 ff49 	bl	80002c8 <__aeabi_dsub>
 800b436:	4622      	mov	r2, r4
 800b438:	462b      	mov	r3, r5
 800b43a:	f7f4 ff47 	bl	80002cc <__adddf3>
 800b43e:	f04f 0800 	mov.w	r8, #0
 800b442:	4682      	mov	sl, r0
 800b444:	468b      	mov	fp, r1
 800b446:	f04f 0900 	mov.w	r9, #0
 800b44a:	4652      	mov	r2, sl
 800b44c:	465b      	mov	r3, fp
 800b44e:	4650      	mov	r0, sl
 800b450:	4659      	mov	r1, fp
 800b452:	f7f5 f8f1 	bl	8000638 <__aeabi_dmul>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	ec43 2b18 	vmov	d8, r2, r3
 800b45e:	f7f5 f8eb 	bl	8000638 <__aeabi_dmul>
 800b462:	ec53 2b18 	vmov	r2, r3, d8
 800b466:	4604      	mov	r4, r0
 800b468:	460d      	mov	r5, r1
 800b46a:	4650      	mov	r0, sl
 800b46c:	4659      	mov	r1, fp
 800b46e:	f7f5 f8e3 	bl	8000638 <__aeabi_dmul>
 800b472:	a371      	add	r3, pc, #452	; (adr r3, 800b638 <__kernel_tan+0x328>)
 800b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b478:	ec41 0b19 	vmov	d9, r0, r1
 800b47c:	4620      	mov	r0, r4
 800b47e:	4629      	mov	r1, r5
 800b480:	f7f5 f8da 	bl	8000638 <__aeabi_dmul>
 800b484:	a36e      	add	r3, pc, #440	; (adr r3, 800b640 <__kernel_tan+0x330>)
 800b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48a:	f7f4 ff1f 	bl	80002cc <__adddf3>
 800b48e:	4622      	mov	r2, r4
 800b490:	462b      	mov	r3, r5
 800b492:	f7f5 f8d1 	bl	8000638 <__aeabi_dmul>
 800b496:	a36c      	add	r3, pc, #432	; (adr r3, 800b648 <__kernel_tan+0x338>)
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	f7f4 ff16 	bl	80002cc <__adddf3>
 800b4a0:	4622      	mov	r2, r4
 800b4a2:	462b      	mov	r3, r5
 800b4a4:	f7f5 f8c8 	bl	8000638 <__aeabi_dmul>
 800b4a8:	a369      	add	r3, pc, #420	; (adr r3, 800b650 <__kernel_tan+0x340>)
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	f7f4 ff0d 	bl	80002cc <__adddf3>
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	462b      	mov	r3, r5
 800b4b6:	f7f5 f8bf 	bl	8000638 <__aeabi_dmul>
 800b4ba:	a367      	add	r3, pc, #412	; (adr r3, 800b658 <__kernel_tan+0x348>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f7f4 ff04 	bl	80002cc <__adddf3>
 800b4c4:	4622      	mov	r2, r4
 800b4c6:	462b      	mov	r3, r5
 800b4c8:	f7f5 f8b6 	bl	8000638 <__aeabi_dmul>
 800b4cc:	a364      	add	r3, pc, #400	; (adr r3, 800b660 <__kernel_tan+0x350>)
 800b4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d2:	f7f4 fefb 	bl	80002cc <__adddf3>
 800b4d6:	ec53 2b18 	vmov	r2, r3, d8
 800b4da:	f7f5 f8ad 	bl	8000638 <__aeabi_dmul>
 800b4de:	a362      	add	r3, pc, #392	; (adr r3, 800b668 <__kernel_tan+0x358>)
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	ec41 0b1a 	vmov	d10, r0, r1
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	f7f5 f8a4 	bl	8000638 <__aeabi_dmul>
 800b4f0:	a35f      	add	r3, pc, #380	; (adr r3, 800b670 <__kernel_tan+0x360>)
 800b4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f6:	f7f4 fee9 	bl	80002cc <__adddf3>
 800b4fa:	4622      	mov	r2, r4
 800b4fc:	462b      	mov	r3, r5
 800b4fe:	f7f5 f89b 	bl	8000638 <__aeabi_dmul>
 800b502:	a35d      	add	r3, pc, #372	; (adr r3, 800b678 <__kernel_tan+0x368>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f7f4 fee0 	bl	80002cc <__adddf3>
 800b50c:	4622      	mov	r2, r4
 800b50e:	462b      	mov	r3, r5
 800b510:	f7f5 f892 	bl	8000638 <__aeabi_dmul>
 800b514:	a35a      	add	r3, pc, #360	; (adr r3, 800b680 <__kernel_tan+0x370>)
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f7f4 fed7 	bl	80002cc <__adddf3>
 800b51e:	4622      	mov	r2, r4
 800b520:	462b      	mov	r3, r5
 800b522:	f7f5 f889 	bl	8000638 <__aeabi_dmul>
 800b526:	a358      	add	r3, pc, #352	; (adr r3, 800b688 <__kernel_tan+0x378>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	f7f4 fece 	bl	80002cc <__adddf3>
 800b530:	4622      	mov	r2, r4
 800b532:	462b      	mov	r3, r5
 800b534:	f7f5 f880 	bl	8000638 <__aeabi_dmul>
 800b538:	a355      	add	r3, pc, #340	; (adr r3, 800b690 <__kernel_tan+0x380>)
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	f7f4 fec5 	bl	80002cc <__adddf3>
 800b542:	4602      	mov	r2, r0
 800b544:	460b      	mov	r3, r1
 800b546:	ec51 0b1a 	vmov	r0, r1, d10
 800b54a:	f7f4 febf 	bl	80002cc <__adddf3>
 800b54e:	ec53 2b19 	vmov	r2, r3, d9
 800b552:	f7f5 f871 	bl	8000638 <__aeabi_dmul>
 800b556:	4642      	mov	r2, r8
 800b558:	464b      	mov	r3, r9
 800b55a:	f7f4 feb7 	bl	80002cc <__adddf3>
 800b55e:	ec53 2b18 	vmov	r2, r3, d8
 800b562:	f7f5 f869 	bl	8000638 <__aeabi_dmul>
 800b566:	4642      	mov	r2, r8
 800b568:	464b      	mov	r3, r9
 800b56a:	f7f4 feaf 	bl	80002cc <__adddf3>
 800b56e:	a34a      	add	r3, pc, #296	; (adr r3, 800b698 <__kernel_tan+0x388>)
 800b570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b574:	4604      	mov	r4, r0
 800b576:	460d      	mov	r5, r1
 800b578:	ec51 0b19 	vmov	r0, r1, d9
 800b57c:	f7f5 f85c 	bl	8000638 <__aeabi_dmul>
 800b580:	4622      	mov	r2, r4
 800b582:	462b      	mov	r3, r5
 800b584:	f7f4 fea2 	bl	80002cc <__adddf3>
 800b588:	460b      	mov	r3, r1
 800b58a:	ec41 0b18 	vmov	d8, r0, r1
 800b58e:	4602      	mov	r2, r0
 800b590:	4659      	mov	r1, fp
 800b592:	4650      	mov	r0, sl
 800b594:	f7f4 fe9a 	bl	80002cc <__adddf3>
 800b598:	4b44      	ldr	r3, [pc, #272]	; (800b6ac <__kernel_tan+0x39c>)
 800b59a:	429f      	cmp	r7, r3
 800b59c:	4604      	mov	r4, r0
 800b59e:	460d      	mov	r5, r1
 800b5a0:	f340 8086 	ble.w	800b6b0 <__kernel_tan+0x3a0>
 800b5a4:	4630      	mov	r0, r6
 800b5a6:	f7f4 ffdd 	bl	8000564 <__aeabi_i2d>
 800b5aa:	4622      	mov	r2, r4
 800b5ac:	4680      	mov	r8, r0
 800b5ae:	4689      	mov	r9, r1
 800b5b0:	462b      	mov	r3, r5
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	f7f5 f83f 	bl	8000638 <__aeabi_dmul>
 800b5ba:	4642      	mov	r2, r8
 800b5bc:	4606      	mov	r6, r0
 800b5be:	460f      	mov	r7, r1
 800b5c0:	464b      	mov	r3, r9
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	f7f4 fe81 	bl	80002cc <__adddf3>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	4639      	mov	r1, r7
 800b5d2:	f7f5 f95b 	bl	800088c <__aeabi_ddiv>
 800b5d6:	ec53 2b18 	vmov	r2, r3, d8
 800b5da:	f7f4 fe75 	bl	80002c8 <__aeabi_dsub>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4650      	mov	r0, sl
 800b5e4:	4659      	mov	r1, fp
 800b5e6:	f7f4 fe6f 	bl	80002c8 <__aeabi_dsub>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	f7f4 fe6d 	bl	80002cc <__adddf3>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4640      	mov	r0, r8
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	f7f4 fe65 	bl	80002c8 <__aeabi_dsub>
 800b5fe:	9b00      	ldr	r3, [sp, #0]
 800b600:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800b604:	f00a 0a02 	and.w	sl, sl, #2
 800b608:	4604      	mov	r4, r0
 800b60a:	f1ca 0001 	rsb	r0, sl, #1
 800b60e:	460d      	mov	r5, r1
 800b610:	f7f4 ffa8 	bl	8000564 <__aeabi_i2d>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4620      	mov	r0, r4
 800b61a:	4629      	mov	r1, r5
 800b61c:	f7f5 f80c 	bl	8000638 <__aeabi_dmul>
 800b620:	e69f      	b.n	800b362 <__kernel_tan+0x52>
 800b622:	bf00      	nop
 800b624:	f3af 8000 	nop.w
 800b628:	54442d18 	.word	0x54442d18
 800b62c:	3fe921fb 	.word	0x3fe921fb
 800b630:	33145c07 	.word	0x33145c07
 800b634:	3c81a626 	.word	0x3c81a626
 800b638:	74bf7ad4 	.word	0x74bf7ad4
 800b63c:	3efb2a70 	.word	0x3efb2a70
 800b640:	32f0a7e9 	.word	0x32f0a7e9
 800b644:	3f12b80f 	.word	0x3f12b80f
 800b648:	1a8d1068 	.word	0x1a8d1068
 800b64c:	3f3026f7 	.word	0x3f3026f7
 800b650:	fee08315 	.word	0xfee08315
 800b654:	3f57dbc8 	.word	0x3f57dbc8
 800b658:	e96e8493 	.word	0xe96e8493
 800b65c:	3f8226e3 	.word	0x3f8226e3
 800b660:	1bb341fe 	.word	0x1bb341fe
 800b664:	3faba1ba 	.word	0x3faba1ba
 800b668:	db605373 	.word	0xdb605373
 800b66c:	bef375cb 	.word	0xbef375cb
 800b670:	a03792a6 	.word	0xa03792a6
 800b674:	3f147e88 	.word	0x3f147e88
 800b678:	f2f26501 	.word	0xf2f26501
 800b67c:	3f4344d8 	.word	0x3f4344d8
 800b680:	c9560328 	.word	0xc9560328
 800b684:	3f6d6d22 	.word	0x3f6d6d22
 800b688:	8406d637 	.word	0x8406d637
 800b68c:	3f9664f4 	.word	0x3f9664f4
 800b690:	1110fe7a 	.word	0x1110fe7a
 800b694:	3fc11111 	.word	0x3fc11111
 800b698:	55555563 	.word	0x55555563
 800b69c:	3fd55555 	.word	0x3fd55555
 800b6a0:	3e2fffff 	.word	0x3e2fffff
 800b6a4:	3ff00000 	.word	0x3ff00000
 800b6a8:	bff00000 	.word	0xbff00000
 800b6ac:	3fe59427 	.word	0x3fe59427
 800b6b0:	2e01      	cmp	r6, #1
 800b6b2:	d02f      	beq.n	800b714 <__kernel_tan+0x404>
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	4689      	mov	r9, r1
 800b6bc:	2000      	movs	r0, #0
 800b6be:	4917      	ldr	r1, [pc, #92]	; (800b71c <__kernel_tan+0x40c>)
 800b6c0:	f7f5 f8e4 	bl	800088c <__aeabi_ddiv>
 800b6c4:	2600      	movs	r6, #0
 800b6c6:	e9cd 0100 	strd	r0, r1, [sp]
 800b6ca:	4652      	mov	r2, sl
 800b6cc:	465b      	mov	r3, fp
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	f7f4 fdf9 	bl	80002c8 <__aeabi_dsub>
 800b6d6:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b6da:	4602      	mov	r2, r0
 800b6dc:	460b      	mov	r3, r1
 800b6de:	ec51 0b18 	vmov	r0, r1, d8
 800b6e2:	f7f4 fdf1 	bl	80002c8 <__aeabi_dsub>
 800b6e6:	4632      	mov	r2, r6
 800b6e8:	462b      	mov	r3, r5
 800b6ea:	f7f4 ffa5 	bl	8000638 <__aeabi_dmul>
 800b6ee:	46b0      	mov	r8, r6
 800b6f0:	460f      	mov	r7, r1
 800b6f2:	4642      	mov	r2, r8
 800b6f4:	462b      	mov	r3, r5
 800b6f6:	4634      	mov	r4, r6
 800b6f8:	4649      	mov	r1, r9
 800b6fa:	4606      	mov	r6, r0
 800b6fc:	4640      	mov	r0, r8
 800b6fe:	f7f4 ff9b 	bl	8000638 <__aeabi_dmul>
 800b702:	4b07      	ldr	r3, [pc, #28]	; (800b720 <__kernel_tan+0x410>)
 800b704:	2200      	movs	r2, #0
 800b706:	f7f4 fde1 	bl	80002cc <__adddf3>
 800b70a:	4602      	mov	r2, r0
 800b70c:	460b      	mov	r3, r1
 800b70e:	4630      	mov	r0, r6
 800b710:	4639      	mov	r1, r7
 800b712:	e665      	b.n	800b3e0 <__kernel_tan+0xd0>
 800b714:	4682      	mov	sl, r0
 800b716:	468b      	mov	fp, r1
 800b718:	e625      	b.n	800b366 <__kernel_tan+0x56>
 800b71a:	bf00      	nop
 800b71c:	bff00000 	.word	0xbff00000
 800b720:	3ff00000 	.word	0x3ff00000
 800b724:	00000000 	.word	0x00000000

0800b728 <floor>:
 800b728:	ec51 0b10 	vmov	r0, r1, d0
 800b72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b730:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b734:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b738:	2e13      	cmp	r6, #19
 800b73a:	ee10 5a10 	vmov	r5, s0
 800b73e:	ee10 8a10 	vmov	r8, s0
 800b742:	460c      	mov	r4, r1
 800b744:	dc32      	bgt.n	800b7ac <floor+0x84>
 800b746:	2e00      	cmp	r6, #0
 800b748:	da14      	bge.n	800b774 <floor+0x4c>
 800b74a:	a333      	add	r3, pc, #204	; (adr r3, 800b818 <floor+0xf0>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f7f4 fdbc 	bl	80002cc <__adddf3>
 800b754:	2200      	movs	r2, #0
 800b756:	2300      	movs	r3, #0
 800b758:	f7f5 f9fe 	bl	8000b58 <__aeabi_dcmpgt>
 800b75c:	b138      	cbz	r0, 800b76e <floor+0x46>
 800b75e:	2c00      	cmp	r4, #0
 800b760:	da57      	bge.n	800b812 <floor+0xea>
 800b762:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b766:	431d      	orrs	r5, r3
 800b768:	d001      	beq.n	800b76e <floor+0x46>
 800b76a:	4c2d      	ldr	r4, [pc, #180]	; (800b820 <floor+0xf8>)
 800b76c:	2500      	movs	r5, #0
 800b76e:	4621      	mov	r1, r4
 800b770:	4628      	mov	r0, r5
 800b772:	e025      	b.n	800b7c0 <floor+0x98>
 800b774:	4f2b      	ldr	r7, [pc, #172]	; (800b824 <floor+0xfc>)
 800b776:	4137      	asrs	r7, r6
 800b778:	ea01 0307 	and.w	r3, r1, r7
 800b77c:	4303      	orrs	r3, r0
 800b77e:	d01f      	beq.n	800b7c0 <floor+0x98>
 800b780:	a325      	add	r3, pc, #148	; (adr r3, 800b818 <floor+0xf0>)
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f7f4 fda1 	bl	80002cc <__adddf3>
 800b78a:	2200      	movs	r2, #0
 800b78c:	2300      	movs	r3, #0
 800b78e:	f7f5 f9e3 	bl	8000b58 <__aeabi_dcmpgt>
 800b792:	2800      	cmp	r0, #0
 800b794:	d0eb      	beq.n	800b76e <floor+0x46>
 800b796:	2c00      	cmp	r4, #0
 800b798:	bfbe      	ittt	lt
 800b79a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b79e:	fa43 f606 	asrlt.w	r6, r3, r6
 800b7a2:	19a4      	addlt	r4, r4, r6
 800b7a4:	ea24 0407 	bic.w	r4, r4, r7
 800b7a8:	2500      	movs	r5, #0
 800b7aa:	e7e0      	b.n	800b76e <floor+0x46>
 800b7ac:	2e33      	cmp	r6, #51	; 0x33
 800b7ae:	dd0b      	ble.n	800b7c8 <floor+0xa0>
 800b7b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b7b4:	d104      	bne.n	800b7c0 <floor+0x98>
 800b7b6:	ee10 2a10 	vmov	r2, s0
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	f7f4 fd86 	bl	80002cc <__adddf3>
 800b7c0:	ec41 0b10 	vmov	d0, r0, r1
 800b7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b7d0:	fa23 f707 	lsr.w	r7, r3, r7
 800b7d4:	4207      	tst	r7, r0
 800b7d6:	d0f3      	beq.n	800b7c0 <floor+0x98>
 800b7d8:	a30f      	add	r3, pc, #60	; (adr r3, 800b818 <floor+0xf0>)
 800b7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7de:	f7f4 fd75 	bl	80002cc <__adddf3>
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	f7f5 f9b7 	bl	8000b58 <__aeabi_dcmpgt>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d0bf      	beq.n	800b76e <floor+0x46>
 800b7ee:	2c00      	cmp	r4, #0
 800b7f0:	da02      	bge.n	800b7f8 <floor+0xd0>
 800b7f2:	2e14      	cmp	r6, #20
 800b7f4:	d103      	bne.n	800b7fe <floor+0xd6>
 800b7f6:	3401      	adds	r4, #1
 800b7f8:	ea25 0507 	bic.w	r5, r5, r7
 800b7fc:	e7b7      	b.n	800b76e <floor+0x46>
 800b7fe:	2301      	movs	r3, #1
 800b800:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b804:	fa03 f606 	lsl.w	r6, r3, r6
 800b808:	4435      	add	r5, r6
 800b80a:	4545      	cmp	r5, r8
 800b80c:	bf38      	it	cc
 800b80e:	18e4      	addcc	r4, r4, r3
 800b810:	e7f2      	b.n	800b7f8 <floor+0xd0>
 800b812:	2500      	movs	r5, #0
 800b814:	462c      	mov	r4, r5
 800b816:	e7aa      	b.n	800b76e <floor+0x46>
 800b818:	8800759c 	.word	0x8800759c
 800b81c:	7e37e43c 	.word	0x7e37e43c
 800b820:	bff00000 	.word	0xbff00000
 800b824:	000fffff 	.word	0x000fffff

0800b828 <scalbn>:
 800b828:	b570      	push	{r4, r5, r6, lr}
 800b82a:	ec55 4b10 	vmov	r4, r5, d0
 800b82e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b832:	4606      	mov	r6, r0
 800b834:	462b      	mov	r3, r5
 800b836:	b99a      	cbnz	r2, 800b860 <scalbn+0x38>
 800b838:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b83c:	4323      	orrs	r3, r4
 800b83e:	d036      	beq.n	800b8ae <scalbn+0x86>
 800b840:	4b39      	ldr	r3, [pc, #228]	; (800b928 <scalbn+0x100>)
 800b842:	4629      	mov	r1, r5
 800b844:	ee10 0a10 	vmov	r0, s0
 800b848:	2200      	movs	r2, #0
 800b84a:	f7f4 fef5 	bl	8000638 <__aeabi_dmul>
 800b84e:	4b37      	ldr	r3, [pc, #220]	; (800b92c <scalbn+0x104>)
 800b850:	429e      	cmp	r6, r3
 800b852:	4604      	mov	r4, r0
 800b854:	460d      	mov	r5, r1
 800b856:	da10      	bge.n	800b87a <scalbn+0x52>
 800b858:	a32b      	add	r3, pc, #172	; (adr r3, 800b908 <scalbn+0xe0>)
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	e03a      	b.n	800b8d6 <scalbn+0xae>
 800b860:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b864:	428a      	cmp	r2, r1
 800b866:	d10c      	bne.n	800b882 <scalbn+0x5a>
 800b868:	ee10 2a10 	vmov	r2, s0
 800b86c:	4620      	mov	r0, r4
 800b86e:	4629      	mov	r1, r5
 800b870:	f7f4 fd2c 	bl	80002cc <__adddf3>
 800b874:	4604      	mov	r4, r0
 800b876:	460d      	mov	r5, r1
 800b878:	e019      	b.n	800b8ae <scalbn+0x86>
 800b87a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b87e:	460b      	mov	r3, r1
 800b880:	3a36      	subs	r2, #54	; 0x36
 800b882:	4432      	add	r2, r6
 800b884:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b888:	428a      	cmp	r2, r1
 800b88a:	dd08      	ble.n	800b89e <scalbn+0x76>
 800b88c:	2d00      	cmp	r5, #0
 800b88e:	a120      	add	r1, pc, #128	; (adr r1, 800b910 <scalbn+0xe8>)
 800b890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b894:	da1c      	bge.n	800b8d0 <scalbn+0xa8>
 800b896:	a120      	add	r1, pc, #128	; (adr r1, 800b918 <scalbn+0xf0>)
 800b898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b89c:	e018      	b.n	800b8d0 <scalbn+0xa8>
 800b89e:	2a00      	cmp	r2, #0
 800b8a0:	dd08      	ble.n	800b8b4 <scalbn+0x8c>
 800b8a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b8ae:	ec45 4b10 	vmov	d0, r4, r5
 800b8b2:	bd70      	pop	{r4, r5, r6, pc}
 800b8b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b8b8:	da19      	bge.n	800b8ee <scalbn+0xc6>
 800b8ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b8be:	429e      	cmp	r6, r3
 800b8c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b8c4:	dd0a      	ble.n	800b8dc <scalbn+0xb4>
 800b8c6:	a112      	add	r1, pc, #72	; (adr r1, 800b910 <scalbn+0xe8>)
 800b8c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1e2      	bne.n	800b896 <scalbn+0x6e>
 800b8d0:	a30f      	add	r3, pc, #60	; (adr r3, 800b910 <scalbn+0xe8>)
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	f7f4 feaf 	bl	8000638 <__aeabi_dmul>
 800b8da:	e7cb      	b.n	800b874 <scalbn+0x4c>
 800b8dc:	a10a      	add	r1, pc, #40	; (adr r1, 800b908 <scalbn+0xe0>)
 800b8de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d0b8      	beq.n	800b858 <scalbn+0x30>
 800b8e6:	a10e      	add	r1, pc, #56	; (adr r1, 800b920 <scalbn+0xf8>)
 800b8e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8ec:	e7b4      	b.n	800b858 <scalbn+0x30>
 800b8ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b8f2:	3236      	adds	r2, #54	; 0x36
 800b8f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b8f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <scalbn+0x108>)
 800b900:	2200      	movs	r2, #0
 800b902:	e7e8      	b.n	800b8d6 <scalbn+0xae>
 800b904:	f3af 8000 	nop.w
 800b908:	c2f8f359 	.word	0xc2f8f359
 800b90c:	01a56e1f 	.word	0x01a56e1f
 800b910:	8800759c 	.word	0x8800759c
 800b914:	7e37e43c 	.word	0x7e37e43c
 800b918:	8800759c 	.word	0x8800759c
 800b91c:	fe37e43c 	.word	0xfe37e43c
 800b920:	c2f8f359 	.word	0xc2f8f359
 800b924:	81a56e1f 	.word	0x81a56e1f
 800b928:	43500000 	.word	0x43500000
 800b92c:	ffff3cb0 	.word	0xffff3cb0
 800b930:	3c900000 	.word	0x3c900000

0800b934 <_close>:
 800b934:	4b02      	ldr	r3, [pc, #8]	; (800b940 <_close+0xc>)
 800b936:	2258      	movs	r2, #88	; 0x58
 800b938:	601a      	str	r2, [r3, #0]
 800b93a:	f04f 30ff 	mov.w	r0, #4294967295
 800b93e:	4770      	bx	lr
 800b940:	20000b30 	.word	0x20000b30

0800b944 <_fstat>:
 800b944:	4b02      	ldr	r3, [pc, #8]	; (800b950 <_fstat+0xc>)
 800b946:	2258      	movs	r2, #88	; 0x58
 800b948:	601a      	str	r2, [r3, #0]
 800b94a:	f04f 30ff 	mov.w	r0, #4294967295
 800b94e:	4770      	bx	lr
 800b950:	20000b30 	.word	0x20000b30

0800b954 <_getpid>:
 800b954:	4b02      	ldr	r3, [pc, #8]	; (800b960 <_getpid+0xc>)
 800b956:	2258      	movs	r2, #88	; 0x58
 800b958:	601a      	str	r2, [r3, #0]
 800b95a:	f04f 30ff 	mov.w	r0, #4294967295
 800b95e:	4770      	bx	lr
 800b960:	20000b30 	.word	0x20000b30

0800b964 <_isatty>:
 800b964:	4b02      	ldr	r3, [pc, #8]	; (800b970 <_isatty+0xc>)
 800b966:	2258      	movs	r2, #88	; 0x58
 800b968:	601a      	str	r2, [r3, #0]
 800b96a:	2000      	movs	r0, #0
 800b96c:	4770      	bx	lr
 800b96e:	bf00      	nop
 800b970:	20000b30 	.word	0x20000b30

0800b974 <_kill>:
 800b974:	4b02      	ldr	r3, [pc, #8]	; (800b980 <_kill+0xc>)
 800b976:	2258      	movs	r2, #88	; 0x58
 800b978:	601a      	str	r2, [r3, #0]
 800b97a:	f04f 30ff 	mov.w	r0, #4294967295
 800b97e:	4770      	bx	lr
 800b980:	20000b30 	.word	0x20000b30

0800b984 <_lseek>:
 800b984:	4b02      	ldr	r3, [pc, #8]	; (800b990 <_lseek+0xc>)
 800b986:	2258      	movs	r2, #88	; 0x58
 800b988:	601a      	str	r2, [r3, #0]
 800b98a:	f04f 30ff 	mov.w	r0, #4294967295
 800b98e:	4770      	bx	lr
 800b990:	20000b30 	.word	0x20000b30

0800b994 <_read>:
 800b994:	4b02      	ldr	r3, [pc, #8]	; (800b9a0 <_read+0xc>)
 800b996:	2258      	movs	r2, #88	; 0x58
 800b998:	601a      	str	r2, [r3, #0]
 800b99a:	f04f 30ff 	mov.w	r0, #4294967295
 800b99e:	4770      	bx	lr
 800b9a0:	20000b30 	.word	0x20000b30

0800b9a4 <_sbrk>:
 800b9a4:	4a04      	ldr	r2, [pc, #16]	; (800b9b8 <_sbrk+0x14>)
 800b9a6:	6811      	ldr	r1, [r2, #0]
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	b909      	cbnz	r1, 800b9b0 <_sbrk+0xc>
 800b9ac:	4903      	ldr	r1, [pc, #12]	; (800b9bc <_sbrk+0x18>)
 800b9ae:	6011      	str	r1, [r2, #0]
 800b9b0:	6810      	ldr	r0, [r2, #0]
 800b9b2:	4403      	add	r3, r0
 800b9b4:	6013      	str	r3, [r2, #0]
 800b9b6:	4770      	bx	lr
 800b9b8:	20000b38 	.word	0x20000b38
 800b9bc:	20000b40 	.word	0x20000b40

0800b9c0 <_write>:
 800b9c0:	4b02      	ldr	r3, [pc, #8]	; (800b9cc <_write+0xc>)
 800b9c2:	2258      	movs	r2, #88	; 0x58
 800b9c4:	601a      	str	r2, [r3, #0]
 800b9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ca:	4770      	bx	lr
 800b9cc:	20000b30 	.word	0x20000b30

0800b9d0 <_exit>:
 800b9d0:	e7fe      	b.n	800b9d0 <_exit>
	...

0800b9d4 <_init>:
 800b9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d6:	bf00      	nop
 800b9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9da:	bc08      	pop	{r3}
 800b9dc:	469e      	mov	lr, r3
 800b9de:	4770      	bx	lr

0800b9e0 <_fini>:
 800b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e2:	bf00      	nop
 800b9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9e6:	bc08      	pop	{r3}
 800b9e8:	469e      	mov	lr, r3
 800b9ea:	4770      	bx	lr
