
Robonaut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008e38  08008e38  00018e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009244  08009244  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009244  08009244  00019244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800924c  0800924c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800924c  0800924c  0001924c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009250  08009250  00019250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200001dc  08009430  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  08009430  00020650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001523a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002705  00000000  00000000  00035446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00037b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  00038e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247ab  00000000  00000000  0003a040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017750  00000000  00000000  0005e7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1cf0  00000000  00000000  00075f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157c2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006440  00000000  00000000  00157c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0015e0bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0015e188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008e20 	.word	0x08008e20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08008e20 	.word	0x08008e20

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <BT_TransmitMsg>:

#include <string.h>
#include "main.h"

void BT_TransmitMsg(UART_HandleTypeDef *huart, unsigned char *msg_to_send)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	uint32_t len = strlen((char*)msg_to_send);
 8000ef6:	6838      	ldr	r0, [r7, #0]
 8000ef8:	f7ff f98a 	bl	8000210 <strlen>
 8000efc:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t*)msg_to_send, len, 100);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	2364      	movs	r3, #100	; 0x64
 8000f04:	6839      	ldr	r1, [r7, #0]
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f004 fca7 	bl	800585a <HAL_UART_Transmit>
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <LS_LED_Light>:
#include <stdio.h>
#include <stdbool.h>

// Az utolsó beadott érték mindig 33-nál nagyobb legyen!
void LS_LED_Light(SPI_HandleTypeDef *hspi, uint8_t *leds_to_light, uint8_t *fb_leds_on)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	uint8_t fb_leds_on_temp[4] = {0};
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
	for (int i=0; leds_to_light[i]<33; i++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
 8000f28:	e091      	b.n	800104e <LS_LED_Light+0x13a>
	{
		switch(leds_to_light[i]/8) {
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	4413      	add	r3, r2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	08db      	lsrs	r3, r3, #3
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	f200 8086 	bhi.w	8001048 <LS_LED_Light+0x134>
 8000f3c:	a201      	add	r2, pc, #4	; (adr r2, 8000f44 <LS_LED_Light+0x30>)
 8000f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f42:	bf00      	nop
 8000f44:	08000f55 	.word	0x08000f55
 8000f48:	08000f93 	.word	0x08000f93
 8000f4c:	08000fd1 	.word	0x08000fd1
 8000f50:	0800100f 	.word	0x0800100f
		case 0:
			fb_leds_on_temp[3] = 1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	74fb      	strb	r3, [r7, #19]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000f58:	2300      	movs	r3, #0
 8000f5a:	623b      	str	r3, [r7, #32]
 8000f5c:	e006      	b.n	8000f6c <LS_LED_Light+0x58>
				fb_leds_on_temp[3] <<= 1;
 8000f5e:	7cfb      	ldrb	r3, [r7, #19]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	74fb      	strb	r3, [r7, #19]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000f66:	6a3b      	ldr	r3, [r7, #32]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	4413      	add	r3, r2
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	f003 0307 	and.w	r3, r3, #7
 8000f78:	6a3a      	ldr	r2, [r7, #32]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	dbef      	blt.n	8000f5e <LS_LED_Light+0x4a>
			}
			fb_leds_on[3] |= fb_leds_on_temp[3];
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3303      	adds	r3, #3
 8000f82:	7819      	ldrb	r1, [r3, #0]
 8000f84:	7cfa      	ldrb	r2, [r7, #19]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3303      	adds	r3, #3
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
			break;
 8000f90:	e05a      	b.n	8001048 <LS_LED_Light+0x134>
		case 1:
			fb_leds_on_temp[2] = 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	74bb      	strb	r3, [r7, #18]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
 8000f9a:	e006      	b.n	8000faa <LS_LED_Light+0x96>
				fb_leds_on_temp[2] <<= 1;
 8000f9c:	7cbb      	ldrb	r3, [r7, #18]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	74bb      	strb	r3, [r7, #18]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	dbef      	blt.n	8000f9c <LS_LED_Light+0x88>
			}
			fb_leds_on[2] |= fb_leds_on_temp[2];
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	7819      	ldrb	r1, [r3, #0]
 8000fc2:	7cba      	ldrb	r2, [r7, #18]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	701a      	strb	r2, [r3, #0]
			break;
 8000fce:	e03b      	b.n	8001048 <LS_LED_Light+0x134>
		case 2:
			fb_leds_on_temp[1] = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	747b      	strb	r3, [r7, #17]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	e006      	b.n	8000fe8 <LS_LED_Light+0xd4>
				fb_leds_on_temp[1] <<= 1;
 8000fda:	7c7b      	ldrb	r3, [r7, #17]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	747b      	strb	r3, [r7, #17]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dbef      	blt.n	8000fda <LS_LED_Light+0xc6>
			}
			fb_leds_on[1] |= fb_leds_on_temp[1];
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	7819      	ldrb	r1, [r3, #0]
 8001000:	7c7a      	ldrb	r2, [r7, #17]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	430a      	orrs	r2, r1
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	701a      	strb	r2, [r3, #0]
			break;
 800100c:	e01c      	b.n	8001048 <LS_LED_Light+0x134>
		case 3:
			fb_leds_on_temp[0] = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	743b      	strb	r3, [r7, #16]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e006      	b.n	8001026 <LS_LED_Light+0x112>
				fb_leds_on_temp[0] <<= 1;
 8001018:	7c3b      	ldrb	r3, [r7, #16]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	743b      	strb	r3, [r7, #16]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	68ba      	ldr	r2, [r7, #8]
 800102a:	4413      	add	r3, r2
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	429a      	cmp	r2, r3
 8001036:	dbef      	blt.n	8001018 <LS_LED_Light+0x104>
			}
			fb_leds_on[0] |= fb_leds_on_temp[0];
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	781a      	ldrb	r2, [r3, #0]
 800103c:	7c3b      	ldrb	r3, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	b2da      	uxtb	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	701a      	strb	r2, [r3, #0]
			break;
 8001046:	bf00      	nop
	for (int i=0; leds_to_light[i]<33; i++)
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	3301      	adds	r3, #1
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	4413      	add	r3, r2
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b20      	cmp	r3, #32
 8001058:	f67f af67 	bls.w	8000f2a <LS_LED_Light+0x16>
		}
	}
	LS_LED_Send(hspi, fb_leds_on);
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f000 f804 	bl	800106c <LS_LED_Send>
}
 8001064:	bf00      	nop
 8001066:	3728      	adds	r7, #40	; 0x28
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <LS_LED_Send>:

void LS_LED_Send(SPI_HandleTypeDef *hspi, uint8_t *leds_on)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	2204      	movs	r2, #4
 800107a:	6839      	ldr	r1, [r7, #0]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f003 fb24 	bl	80046ca <HAL_SPI_Transmit>

	// Latch enable
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001088:	480b      	ldr	r0, [pc, #44]	; (80010b8 <LS_LED_Send+0x4c>)
 800108a:	f002 fae7 	bl	800365c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001094:	4808      	ldr	r0, [pc, #32]	; (80010b8 <LS_LED_Send+0x4c>)
 8001096:	f002 fae1 	bl	800365c <HAL_GPIO_WritePin>

	//Output enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2104      	movs	r1, #4
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <LS_LED_Send+0x50>)
 80010a0:	f002 fadc 	bl	800365c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2104      	movs	r1, #4
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <LS_LED_Send+0x50>)
 80010aa:	f002 fad7 	bl	800365c <HAL_GPIO_WritePin>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020c00 	.word	0x40020c00

080010c0 <LS_INF_Send>:

void LS_INF_Send(SPI_HandleTypeDef *hspi, uint8_t *infs_on)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, infs_on, 4, 100);
 80010ca:	2364      	movs	r3, #100	; 0x64
 80010cc:	2204      	movs	r2, #4
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f003 fafa 	bl	80046ca <HAL_SPI_Transmit>

	// Inf Latch enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <LS_INF_Send+0x50>)
 80010de:	f002 fabd 	bl	800365c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	4809      	ldr	r0, [pc, #36]	; (8001110 <LS_INF_Send+0x50>)
 80010ea:	f002 fab7 	bl	800365c <HAL_GPIO_WritePin>

	// Inf Output enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f4:	4806      	ldr	r0, [pc, #24]	; (8001110 <LS_INF_Send+0x50>)
 80010f6:	f002 fab1 	bl	800365c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <LS_INF_Send+0x50>)
 8001102:	f002 faab 	bl	800365c <HAL_GPIO_WritePin>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40020000 	.word	0x40020000

08001114 <LS_ADC_ChipSelect>:
			  HAL_Delay(100);
		  }
}

void LS_ADC_ChipSelect(int CS)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	switch(CS) {
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	2b03      	cmp	r3, #3
 8001122:	d827      	bhi.n	8001174 <LS_ADC_ChipSelect+0x60>
 8001124:	a201      	add	r2, pc, #4	; (adr r2, 800112c <LS_ADC_ChipSelect+0x18>)
 8001126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112a:	bf00      	nop
 800112c:	0800113d 	.word	0x0800113d
 8001130:	0800114b 	.word	0x0800114b
 8001134:	08001159 	.word	0x08001159
 8001138:	08001167 	.word	0x08001167
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001142:	481b      	ldr	r0, [pc, #108]	; (80011b0 <LS_ADC_ChipSelect+0x9c>)
 8001144:	f002 fa8a 	bl	800365c <HAL_GPIO_WritePin>
		break;
 8001148:	e02d      	b.n	80011a6 <LS_ADC_ChipSelect+0x92>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001150:	4818      	ldr	r0, [pc, #96]	; (80011b4 <LS_ADC_ChipSelect+0xa0>)
 8001152:	f002 fa83 	bl	800365c <HAL_GPIO_WritePin>
		break;
 8001156:	e026      	b.n	80011a6 <LS_ADC_ChipSelect+0x92>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800115e:	4815      	ldr	r0, [pc, #84]	; (80011b4 <LS_ADC_ChipSelect+0xa0>)
 8001160:	f002 fa7c 	bl	800365c <HAL_GPIO_WritePin>
		break;
 8001164:	e01f      	b.n	80011a6 <LS_ADC_ChipSelect+0x92>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <LS_ADC_ChipSelect+0xa0>)
 800116e:	f002 fa75 	bl	800365c <HAL_GPIO_WritePin>
		break;
 8001172:	e018      	b.n	80011a6 <LS_ADC_ChipSelect+0x92>
	default:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <LS_ADC_ChipSelect+0x9c>)
 800117c:	f002 fa6e 	bl	800365c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <LS_ADC_ChipSelect+0xa0>)
 8001188:	f002 fa68 	bl	800365c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <LS_ADC_ChipSelect+0xa0>)
 8001194:	f002 fa62 	bl	800365c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <LS_ADC_ChipSelect+0xa0>)
 80011a0:	f002 fa5c 	bl	800365c <HAL_GPIO_WritePin>
	}
}
 80011a4:	bf00      	nop
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40020400 	.word	0x40020400

080011b8 <LS_BT_SendData>:

void LS_BT_SendData(UART_HandleTypeDef *huart, unsigned char *BT_send_msg_buff, uint16_t *ADC_values)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
	unsigned char ADC_value_string[20];
	BT_send_msg_buff[0] = '\0';
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
	for (int k=0; k<16; k++){
 80011ca:	2300      	movs	r3, #0
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ce:	e014      	b.n	80011fa <LS_BT_SendData+0x42>
	  sprintf((char*)ADC_value_string, "%d ", ADC_values[k]);
 80011d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	4413      	add	r3, r2
 80011d8:	881b      	ldrh	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4922      	ldr	r1, [pc, #136]	; (800126c <LS_BT_SendData+0xb4>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f005 fb44 	bl	8006870 <siprintf>
	  strcat((char*)BT_send_msg_buff, (char*)ADC_value_string);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	68b8      	ldr	r0, [r7, #8]
 80011f0:	f005 fb5e 	bl	80068b0 <strcat>
	for (int k=0; k<16; k++){
 80011f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f6:	3301      	adds	r3, #1
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	dde7      	ble.n	80011d0 <LS_BT_SendData+0x18>
	}
	BT_TransmitMsg(huart, BT_send_msg_buff);
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	f7ff fe72 	bl	8000eec <BT_TransmitMsg>
	BT_send_msg_buff[0] = '\0';
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
	for (int k=16; k<32; k++){
 800120e:	2310      	movs	r3, #16
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
 8001212:	e014      	b.n	800123e <LS_BT_SendData+0x86>
	  sprintf((char*)ADC_value_string, "%d ", ADC_values[k]);
 8001214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	881b      	ldrh	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	4911      	ldr	r1, [pc, #68]	; (800126c <LS_BT_SendData+0xb4>)
 8001226:	4618      	mov	r0, r3
 8001228:	f005 fb22 	bl	8006870 <siprintf>
	  strcat((char*)BT_send_msg_buff, (char*)ADC_value_string);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	68b8      	ldr	r0, [r7, #8]
 8001234:	f005 fb3c 	bl	80068b0 <strcat>
	for (int k=16; k<32; k++){
 8001238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123a:	3301      	adds	r3, #1
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
 800123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001240:	2b1f      	cmp	r3, #31
 8001242:	dde7      	ble.n	8001214 <LS_BT_SendData+0x5c>
	}
	strcat((char*)BT_send_msg_buff, "\n\r");
 8001244:	68b8      	ldr	r0, [r7, #8]
 8001246:	f7fe ffe3 	bl	8000210 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <LS_BT_SendData+0xb8>)
 8001254:	8811      	ldrh	r1, [r2, #0]
 8001256:	7892      	ldrb	r2, [r2, #2]
 8001258:	8019      	strh	r1, [r3, #0]
 800125a:	709a      	strb	r2, [r3, #2]
	BT_TransmitMsg(huart, BT_send_msg_buff);
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	68f8      	ldr	r0, [r7, #12]
 8001260:	f7ff fe44 	bl	8000eec <BT_TransmitMsg>
}
 8001264:	bf00      	nop
 8001266:	3730      	adds	r7, #48	; 0x30
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08008e38 	.word	0x08008e38
 8001270:	08008e3c 	.word	0x08008e3c

08001274 <LS_Holavonal_favago>:
	sum -= 32*250;
	line = (double)weighted_sum/sum;
	return line;
}

float LS_Holavonal_favago(uint16_t *ADC_values){
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
    int m = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
    int sum = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]
    for(int i=0; i<32; i++){
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e012      	b.n	80012b0 <LS_Holavonal_favago+0x3c>
        if (ADC_values[i] > 2900){
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	881b      	ldrh	r3, [r3, #0]
 8001294:	f640 3254 	movw	r2, #2900	; 0xb54
 8001298:	4293      	cmp	r3, r2
 800129a:	d906      	bls.n	80012aa <LS_Holavonal_favago+0x36>
            sum += i;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4413      	add	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
            m++;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3301      	adds	r3, #1
 80012a8:	617b      	str	r3, [r7, #20]
    for(int i=0; i<32; i++){
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3301      	adds	r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b1f      	cmp	r3, #31
 80012b4:	dde9      	ble.n	800128a <LS_Holavonal_favago+0x16>
        }
    }
    if(m == 0)
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <LS_Holavonal_favago+0x4e>
        return 0;
 80012bc:	eddf 7a08 	vldr	s15, [pc, #32]	; 80012e0 <LS_Holavonal_favago+0x6c>
 80012c0:	e007      	b.n	80012d2 <LS_Holavonal_favago+0x5e>
    return sum/m;
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80012ca:	ee07 3a90 	vmov	s15, r3
 80012ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	371c      	adds	r7, #28
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	00000000 	.word	0x00000000

080012e4 <LineSensor_FrontAndBack>:
	LS_LED_Light(hspi_led, fb_leds_to_light, fb_leds_on);
	return line_pos;
}

float *LineSensor_FrontAndBack(UART_HandleTypeDef *huart, SPI_HandleTypeDef *hspi_led, SPI_HandleTypeDef *hspi_sense_front, SPI_HandleTypeDef *hspi_sense_rear, float *line_pos, bool feedback_rear)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b0e9      	sub	sp, #420	; 0x1a4
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	f507 74cc 	add.w	r4, r7, #408	; 0x198
 80012ee:	f5a4 74c2 	sub.w	r4, r4, #388	; 0x184
 80012f2:	6020      	str	r0, [r4, #0]
 80012f4:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80012f8:	f5a0 70c4 	sub.w	r0, r0, #392	; 0x188
 80012fc:	6001      	str	r1, [r0, #0]
 80012fe:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8001302:	f5a1 71c6 	sub.w	r1, r1, #396	; 0x18c
 8001306:	600a      	str	r2, [r1, #0]
 8001308:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 800130c:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 8001310:	6013      	str	r3, [r2, #0]
	uint8_t leds_on[4];// = {1, 1, 1, 1};
	uint8_t leds_off[] = {0, 0, 0, 0};
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	uint8_t fb_leds_on[4] = {0};
 8001318:	2300      	movs	r3, #0
 800131a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
 800131e:	4a92      	ldr	r2, [pc, #584]	; (8001568 <LineSensor_FrontAndBack+0x284>)
 8001320:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001324:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001328:	6018      	str	r0, [r3, #0]
 800132a:	3304      	adds	r3, #4
 800132c:	7019      	strb	r1, [r3, #0]
	uint16_t ADC_values_front[32] = {0};
 800132e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001332:	2240      	movs	r2, #64	; 0x40
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f004 fe28 	bl	8005f8c <memset>
	uint16_t ADC_values_rear[32] = {0};
 800133c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001340:	2240      	movs	r2, #64	; 0x40
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f004 fe21 	bl	8005f8c <memset>
	uint8_t ADC_inputs[] = {0, 8, 16, 24, 32, 40, 48, 56};
 800134a:	4a88      	ldr	r2, [pc, #544]	; (800156c <LineSensor_FrontAndBack+0x288>)
 800134c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001350:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001354:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ADC_received_msg[2];

	//LS_INF_Send(&hspi3, leds_off);

	// Turn on first set of LEDs
	leds_on[0] = 1;leds_on[1] = 1;leds_on[2] = 1;leds_on[3] = 1;
 8001358:	2301      	movs	r3, #1
 800135a:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
 800135e:	2301      	movs	r3, #1
 8001360:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
 8001364:	2301      	movs	r3, #1
 8001366:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
 800136a:	2301      	movs	r3, #1
 800136c:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
	LS_INF_Send(hspi_led, leds_on);
 8001370:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 8001374:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001378:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800137c:	4611      	mov	r1, r2
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	f7ff fe9e 	bl	80010c0 <LS_INF_Send>
	HAL_Delay(1);
 8001384:	2001      	movs	r0, #1
 8001386:	f001 fc2d 	bl	8002be4 <HAL_Delay>
	// Retrieve data from first set of ADCs - Front
	for (int i=1; i<5; i++)
 800138a:	2301      	movs	r3, #1
 800138c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8001390:	e02f      	b.n	80013f2 <LineSensor_FrontAndBack+0x10e>
	{
	  LS_ADC_ChipSelect(i);
 8001392:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8001396:	f7ff febd 	bl	8001114 <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 800139a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800139e:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 80013a2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80013a6:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 80013aa:	2364      	movs	r3, #100	; 0x64
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	2302      	movs	r3, #2
 80013b0:	6800      	ldr	r0, [r0, #0]
 80013b2:	f003 fac6 	bl	8004942 <HAL_SPI_TransmitReceive>
	  ADC_values_front[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80013b6:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013cc:	3b01      	subs	r3, #1
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	b292      	uxth	r2, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80013d8:	f107 0108 	add.w	r1, r7, #8
 80013dc:	440b      	add	r3, r1
 80013de:	f823 2c68 	strh.w	r2, [r3, #-104]
	  LS_ADC_ChipSelect(0);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f7ff fe96 	bl	8001114 <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 80013e8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013ec:	3301      	adds	r3, #1
 80013ee:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 80013f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	ddcb      	ble.n	8001392 <LineSensor_FrontAndBack+0xae>
	}
	// Ez működjön, aztán lehet optimalizálni, hogy egy loopon belül kérjük be az adatokat mindettőtől
	// Retrieve data from first set of ADCs - Rear
	for (int i=1; i<5; i++)
 80013fa:	2301      	movs	r3, #1
 80013fc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001400:	e02f      	b.n	8001462 <LineSensor_FrontAndBack+0x17e>
	{
	  LS_ADC_ChipSelect(i);
 8001402:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001406:	f7ff fe85 	bl	8001114 <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 800140a:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800140e:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8001412:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001416:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 800141a:	2364      	movs	r3, #100	; 0x64
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2302      	movs	r3, #2
 8001420:	6800      	ldr	r0, [r0, #0]
 8001422:	f003 fa8e 	bl	8004942 <HAL_SPI_TransmitReceive>
	  ADC_values_rear[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001426:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 800142a:	b21a      	sxth	r2, r3
 800142c:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	b21a      	sxth	r2, r3
 8001438:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800143c:	3b01      	subs	r3, #1
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	b292      	uxth	r2, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8001448:	f107 0108 	add.w	r1, r7, #8
 800144c:	440b      	add	r3, r1
 800144e:	f823 2ca8 	strh.w	r2, [r3, #-168]
	  LS_ADC_ChipSelect(0);
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff fe5e 	bl	8001114 <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 8001458:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800145c:	3301      	adds	r3, #1
 800145e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001462:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001466:	2b04      	cmp	r3, #4
 8001468:	ddcb      	ble.n	8001402 <LineSensor_FrontAndBack+0x11e>
	}

	// Shift the LEDs by one
	for (int k=0; k<7; k++)
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001470:	e0d1      	b.n	8001616 <LineSensor_FrontAndBack+0x332>
	{
	  leds_on[0] <<= 1;
 8001472:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	f887 3180 	strb.w	r3, [r7, #384]	; 0x180
	  leds_on[1] <<= 1;
 800147e:	f897 3181 	ldrb.w	r3, [r7, #385]	; 0x181
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f887 3181 	strb.w	r3, [r7, #385]	; 0x181
	  leds_on[2] <<= 1;
 800148a:	f897 3182 	ldrb.w	r3, [r7, #386]	; 0x182
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	f887 3182 	strb.w	r3, [r7, #386]	; 0x182
	  leds_on[3] <<= 1;
 8001496:	f897 3183 	ldrb.w	r3, [r7, #387]	; 0x183
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	f887 3183 	strb.w	r3, [r7, #387]	; 0x183
	  LS_INF_Send(hspi_led, leds_on);
 80014a2:	f507 72c0 	add.w	r2, r7, #384	; 0x180
 80014a6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80014aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80014ae:	4611      	mov	r1, r2
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	f7ff fe05 	bl	80010c0 <LS_INF_Send>
	  HAL_Delay(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f001 fb94 	bl	8002be4 <HAL_Delay>

	  //Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 80014bc:	2301      	movs	r3, #1
 80014be:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80014c2:	e049      	b.n	8001558 <LineSensor_FrontAndBack+0x274>
	  {
		  LS_ADC_ChipSelect(i);
 80014c4:	f8d7 0188 	ldr.w	r0, [r7, #392]	; 0x188
 80014c8:	f7ff fe24 	bl	8001114 <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 80014cc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014d0:	3301      	adds	r3, #1
 80014d2:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80014d6:	18d1      	adds	r1, r2, r3
 80014d8:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80014dc:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80014e0:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 80014e4:	2364      	movs	r3, #100	; 0x64
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2302      	movs	r3, #2
 80014ea:	6800      	ldr	r0, [r0, #0]
 80014ec:	f003 fa29 	bl	8004942 <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 80014f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014f4:	3301      	adds	r3, #1
 80014f6:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80014fa:	18d1      	adds	r1, r2, r3
 80014fc:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001500:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001504:	f5a3 70c6 	sub.w	r0, r3, #396	; 0x18c
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2302      	movs	r3, #2
 800150e:	6800      	ldr	r0, [r0, #0]
 8001510:	f003 fa17 	bl	8004942 <HAL_SPI_TransmitReceive>
		  ADC_values_front[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001514:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 8001518:	b21a      	sxth	r2, r3
 800151a:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 800151e:	021b      	lsls	r3, r3, #8
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	b219      	sxth	r1, r3
 8001526:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800152a:	3b01      	subs	r3, #1
 800152c:	00da      	lsls	r2, r3, #3
 800152e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001532:	4413      	add	r3, r2
 8001534:	3301      	adds	r3, #1
 8001536:	b28a      	uxth	r2, r1
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800153e:	f107 0108 	add.w	r1, r7, #8
 8001542:	440b      	add	r3, r1
 8001544:	f823 2c68 	strh.w	r2, [r3, #-104]
		  LS_ADC_ChipSelect(0);
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff fde3 	bl	8001114 <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 800154e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001552:	3301      	adds	r3, #1
 8001554:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001558:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800155c:	2b04      	cmp	r3, #4
 800155e:	ddb1      	ble.n	80014c4 <LineSensor_FrontAndBack+0x1e0>
	  }

	  // Szintén lehet optimalizálni
	  // Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 8001560:	2301      	movs	r3, #1
 8001562:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001566:	e04d      	b.n	8001604 <LineSensor_FrontAndBack+0x320>
 8001568:	08008e40 	.word	0x08008e40
 800156c:	08008e48 	.word	0x08008e48
	  {
		  LS_ADC_ChipSelect(i);
 8001570:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 8001574:	f7ff fdce 	bl	8001114 <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 8001578:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800157c:	3301      	adds	r3, #1
 800157e:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 8001582:	18d1      	adds	r1, r2, r3
 8001584:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8001588:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800158c:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8001590:	2364      	movs	r3, #100	; 0x64
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2302      	movs	r3, #2
 8001596:	6800      	ldr	r0, [r0, #0]
 8001598:	f003 f9d3 	bl	8004942 <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 800159c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015a0:	3301      	adds	r3, #1
 80015a2:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80015a6:	18d1      	adds	r1, r2, r3
 80015a8:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80015ac:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80015b0:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 80015b4:	2364      	movs	r3, #100	; 0x64
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2302      	movs	r3, #2
 80015ba:	6800      	ldr	r0, [r0, #0]
 80015bc:	f003 f9c1 	bl	8004942 <HAL_SPI_TransmitReceive>
		  ADC_values_rear[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80015c0:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b219      	sxth	r1, r3
 80015d2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015d6:	3b01      	subs	r3, #1
 80015d8:	00da      	lsls	r2, r3, #3
 80015da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015de:	4413      	add	r3, r2
 80015e0:	3301      	adds	r3, #1
 80015e2:	b28a      	uxth	r2, r1
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80015ea:	f107 0108 	add.w	r1, r7, #8
 80015ee:	440b      	add	r3, r1
 80015f0:	f823 2ca8 	strh.w	r2, [r3, #-168]
		  LS_ADC_ChipSelect(0);
 80015f4:	2000      	movs	r0, #0
 80015f6:	f7ff fd8d 	bl	8001114 <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 80015fa:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015fe:	3301      	adds	r3, #1
 8001600:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001604:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001608:	2b04      	cmp	r3, #4
 800160a:	ddb1      	ble.n	8001570 <LineSensor_FrontAndBack+0x28c>
	for (int k=0; k<7; k++)
 800160c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001610:	3301      	adds	r3, #1
 8001612:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001616:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800161a:	2b06      	cmp	r3, #6
 800161c:	f77f af29 	ble.w	8001472 <LineSensor_FrontAndBack+0x18e>
//		if (ADC_values_rear[i] > line_pos[0])
//			line_pos[0] = ADC_values_rear[i];
//	}
	unsigned char BT_send_msg_buff[200];

	LS_BT_SendData(huart, BT_send_msg_buff, ADC_values_rear);
 8001620:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8001624:	f107 011c 	add.w	r1, r7, #28
 8001628:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800162c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	f7ff fdc1 	bl	80011b8 <LS_BT_SendData>


	line_pos[0] = LS_Holavonal_favago(ADC_values_front);
 8001636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fe1a 	bl	8001274 <LS_Holavonal_favago>
 8001640:	eef0 7a40 	vmov.f32	s15, s0
 8001644:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001648:	edc3 7a00 	vstr	s15, [r3]
	line_pos[1] = LS_Holavonal_favago(ADC_values_rear);
 800164c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001650:	1d1c      	adds	r4, r3, #4
 8001652:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fe0c 	bl	8001274 <LS_Holavonal_favago>
 800165c:	eef0 7a40 	vmov.f32	s15, s0
 8001660:	edc4 7a00 	vstr	s15, [r4]
	fb_leds_on[0] = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3178 	strb.w	r3, [r7, #376]	; 0x178
	fb_leds_on[1] = 0;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3179 	strb.w	r3, [r7, #377]	; 0x179
	fb_leds_on[2] = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 317a 	strb.w	r3, [r7, #378]	; 0x17a
	fb_leds_on[3] = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 317b 	strb.w	r3, [r7, #379]	; 0x17b
	if (feedback_rear){
 800167c:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 8001680:	2b00      	cmp	r3, #0
 8001682:	d01a      	beq.n	80016ba <LineSensor_FrontAndBack+0x3d6>
		fb_leds_to_light[0] = (int)line_pos[1];
 8001684:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001688:	3304      	adds	r3, #4
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001692:	edc7 7a01 	vstr	s15, [r7, #4]
 8001696:	793b      	ldrb	r3, [r7, #4]
 8001698:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
		fb_leds_to_light[1] = (int)line_pos[1]+1; // ?
 800169c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80016a0:	3304      	adds	r3, #4
 80016a2:	edd3 7a00 	vldr	s15, [r3]
 80016a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80016ae:	793b      	ldrb	r3, [r7, #4]
 80016b0:	3301      	adds	r3, #1
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	f887 3171 	strb.w	r3, [r7, #369]	; 0x171
 80016b8:	e017      	b.n	80016ea <LineSensor_FrontAndBack+0x406>
	}
	else {
		fb_leds_to_light[0] = (int)line_pos[0];
 80016ba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80016be:	edd3 7a00 	vldr	s15, [r3]
 80016c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80016ca:	793b      	ldrb	r3, [r7, #4]
 80016cc:	f887 3170 	strb.w	r3, [r7, #368]	; 0x170
		fb_leds_to_light[1] = (int)line_pos[0]+1; // ?
 80016d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80016e0:	793b      	ldrb	r3, [r7, #4]
 80016e2:	3301      	adds	r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f887 3171 	strb.w	r3, [r7, #369]	; 0x171
	}
	LS_LED_Send(hspi_led, leds_off);
 80016ea:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 80016ee:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80016f2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80016f6:	4611      	mov	r1, r2
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	f7ff fcb7 	bl	800106c <LS_LED_Send>
	LS_LED_Light(hspi_led, fb_leds_to_light, fb_leds_on);
 80016fe:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001702:	f507 71b8 	add.w	r1, r7, #368	; 0x170
 8001706:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800170a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	f7ff fc00 	bl	8000f14 <LS_LED_Light>
	return line_pos;
 8001714:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
}
 8001718:	4618      	mov	r0, r3
 800171a:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 800171e:	46bd      	mov	sp, r7
 8001720:	bd90      	pop	{r4, r7, pc}
 8001722:	bf00      	nop

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172a:	f001 f9e9 	bl	8002b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172e:	f000 f845 	bl	80017bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001732:	f000 fc39 	bl	8001fa8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001736:	f000 f905 	bl	8001944 <MX_I2C1_Init>
  MX_I2C3_Init();
 800173a:	f000 f95f 	bl	80019fc <MX_I2C3_Init>
  MX_SPI1_Init();
 800173e:	f000 f98b 	bl	8001a58 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001742:	f000 f9bf 	bl	8001ac4 <MX_SPI2_Init>
  MX_SPI3_Init();
 8001746:	f000 f9f3 	bl	8001b30 <MX_SPI3_Init>
  MX_ADC1_Init();
 800174a:	f000 f8a9 	bl	80018a0 <MX_ADC1_Init>
  MX_TIM2_Init();
 800174e:	f000 fa27 	bl	8001ba0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001752:	f000 fa79 	bl	8001c48 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001756:	f000 fad1 	bl	8001cfc <MX_TIM4_Init>
  MX_TIM13_Init();
 800175a:	f000 fb83 	bl	8001e64 <MX_TIM13_Init>
  MX_TIM5_Init();
 800175e:	f000 fb27 	bl	8001db0 <MX_TIM5_Init>
  MX_I2C2_Init();
 8001762:	f000 f91d 	bl	80019a0 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001766:	f000 fbcb 	bl	8001f00 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800176a:	f000 fbf3 	bl	8001f54 <MX_USART6_UART_Init>
  //uint8_t fb_leds_on[4] = {0};
  //uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
  //uint8_t leds_all_on[] = {255, 255, 255, 255};
  //uint16_t ADC_values[32] = {0};
  float line_pos[2];
  bool feedback_rear = false;
 800176e:	2300      	movs	r3, #0
 8001770:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //LineSensor_FrontOnly(&hspi3, &hspi1);
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, line_pos, feedback_rear);
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <main+0x84>)
 800177c:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <main+0x88>)
 800177e:	490c      	ldr	r1, [pc, #48]	; (80017b0 <main+0x8c>)
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <main+0x90>)
 8001782:	f7ff fdaf 	bl	80012e4 <LineSensor_FrontAndBack>

	  //sprintf((char*)BT_send_msg_buff, "%f \n\r", line_pos[0]);
	  //BT_TransmitMsg(&huart2, BT_send_msg_buff);

	  if (buttonMessageFlag){
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <main+0x94>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d0f1      	beq.n	8001772 <main+0x4e>
		  if (feedback_rear)
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <main+0x76>
			  feedback_rear = false;
 8001794:	2300      	movs	r3, #0
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	e001      	b.n	800179e <main+0x7a>
		  else
			  feedback_rear = true;
 800179a:	2301      	movs	r3, #1
 800179c:	73fb      	strb	r3, [r7, #15]
		  buttonMessageFlag = false;
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <main+0x94>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, line_pos, feedback_rear);
 80017a4:	e7e5      	b.n	8001772 <main+0x4e>
 80017a6:	bf00      	nop
 80017a8:	20000394 	.word	0x20000394
 80017ac:	2000033c 	.word	0x2000033c
 80017b0:	200003ec 	.word	0x200003ec
 80017b4:	200005ac 	.word	0x200005ac
 80017b8:	20000634 	.word	0x20000634

080017bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b094      	sub	sp, #80	; 0x50
 80017c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	2234      	movs	r2, #52	; 0x34
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f004 fbde 	bl	8005f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d0:	f107 0308 	add.w	r3, r7, #8
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	4b2c      	ldr	r3, [pc, #176]	; (8001898 <SystemClock_Config+0xdc>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	4a2b      	ldr	r2, [pc, #172]	; (8001898 <SystemClock_Config+0xdc>)
 80017ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ee:	6413      	str	r3, [r2, #64]	; 0x40
 80017f0:	4b29      	ldr	r3, [pc, #164]	; (8001898 <SystemClock_Config+0xdc>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017fc:	2300      	movs	r3, #0
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	4b26      	ldr	r3, [pc, #152]	; (800189c <SystemClock_Config+0xe0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a25      	ldr	r2, [pc, #148]	; (800189c <SystemClock_Config+0xe0>)
 8001806:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b23      	ldr	r3, [pc, #140]	; (800189c <SystemClock_Config+0xe0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001818:	2301      	movs	r3, #1
 800181a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800181c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001820:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001822:	2302      	movs	r3, #2
 8001824:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800182a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800182c:	2304      	movs	r3, #4
 800182e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001830:	23b4      	movs	r3, #180	; 0xb4
 8001832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001834:	2302      	movs	r3, #2
 8001836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001838:	2302      	movs	r3, #2
 800183a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800183c:	2302      	movs	r3, #2
 800183e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fc19 	bl	800407c <HAL_RCC_OscConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001850:	f000 fc9a 	bl	8002188 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001854:	f002 f878 	bl	8003948 <HAL_PWREx_EnableOverDrive>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800185e:	f000 fc93 	bl	8002188 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001862:	230f      	movs	r3, #15
 8001864:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001866:	2302      	movs	r3, #2
 8001868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800186e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001878:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	2105      	movs	r1, #5
 8001880:	4618      	mov	r0, r3
 8001882:	f002 f8b1 	bl	80039e8 <HAL_RCC_ClockConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800188c:	f000 fc7c 	bl	8002188 <Error_Handler>
  }
}
 8001890:	bf00      	nop
 8001892:	3750      	adds	r7, #80	; 0x50
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000

080018a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018a6:	463b      	mov	r3, r7
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <MX_ADC1_Init+0x98>)
 80018b4:	4a21      	ldr	r2, [pc, #132]	; (800193c <MX_ADC1_Init+0x9c>)
 80018b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <MX_ADC1_Init+0x98>)
 80018ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <MX_ADC1_Init+0x98>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <MX_ADC1_Init+0x98>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	; (8001938 <MX_ADC1_Init+0x98>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018d2:	4b19      	ldr	r3, [pc, #100]	; (8001938 <MX_ADC1_Init+0x98>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018da:	4b17      	ldr	r3, [pc, #92]	; (8001938 <MX_ADC1_Init+0x98>)
 80018dc:	2200      	movs	r2, #0
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e0:	4b15      	ldr	r3, [pc, #84]	; (8001938 <MX_ADC1_Init+0x98>)
 80018e2:	4a17      	ldr	r2, [pc, #92]	; (8001940 <MX_ADC1_Init+0xa0>)
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e6:	4b14      	ldr	r3, [pc, #80]	; (8001938 <MX_ADC1_Init+0x98>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018ec:	4b12      	ldr	r3, [pc, #72]	; (8001938 <MX_ADC1_Init+0x98>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <MX_ADC1_Init+0x98>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018fa:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <MX_ADC1_Init+0x98>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001900:	480d      	ldr	r0, [pc, #52]	; (8001938 <MX_ADC1_Init+0x98>)
 8001902:	f001 f993 	bl	8002c2c <HAL_ADC_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800190c:	f000 fc3c 	bl	8002188 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001910:	2301      	movs	r3, #1
 8001912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001914:	2301      	movs	r3, #1
 8001916:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800191c:	463b      	mov	r3, r7
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_ADC1_Init+0x98>)
 8001922:	f001 f9c7 	bl	8002cb4 <HAL_ADC_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800192c:	f000 fc2c 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	200001f8 	.word	0x200001f8
 800193c:	40012000 	.word	0x40012000
 8001940:	0f000001 	.word	0x0f000001

08001944 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_I2C1_Init+0x50>)
 800194a:	4a13      	ldr	r2, [pc, #76]	; (8001998 <MX_I2C1_Init+0x54>)
 800194c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800194e:	4b11      	ldr	r3, [pc, #68]	; (8001994 <MX_I2C1_Init+0x50>)
 8001950:	4a12      	ldr	r2, [pc, #72]	; (800199c <MX_I2C1_Init+0x58>)
 8001952:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_I2C1_Init+0x50>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_I2C1_Init+0x50>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_I2C1_Init+0x50>)
 8001962:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001966:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <MX_I2C1_Init+0x50>)
 800196a:	2200      	movs	r2, #0
 800196c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_I2C1_Init+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <MX_I2C1_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_I2C1_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <MX_I2C1_Init+0x50>)
 8001982:	f001 fe9d 	bl	80036c0 <HAL_I2C_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800198c:	f000 fbfc 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000240 	.word	0x20000240
 8001998:	40005400 	.word	0x40005400
 800199c:	000186a0 	.word	0x000186a0

080019a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <MX_I2C2_Init+0x50>)
 80019a6:	4a13      	ldr	r2, [pc, #76]	; (80019f4 <MX_I2C2_Init+0x54>)
 80019a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_I2C2_Init+0x50>)
 80019ac:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <MX_I2C2_Init+0x58>)
 80019ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_I2C2_Init+0x50>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_I2C2_Init+0x50>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_I2C2_Init+0x50>)
 80019be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <MX_I2C2_Init+0x50>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_I2C2_Init+0x50>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <MX_I2C2_Init+0x50>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_I2C2_Init+0x50>)
 80019d8:	2200      	movs	r2, #0
 80019da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <MX_I2C2_Init+0x50>)
 80019de:	f001 fe6f 	bl	80036c0 <HAL_I2C_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019e8:	f000 fbce 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000294 	.word	0x20000294
 80019f4:	40005800 	.word	0x40005800
 80019f8:	000186a0 	.word	0x000186a0

080019fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <MX_I2C3_Init+0x54>)
 8001a04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a08:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <MX_I2C3_Init+0x58>)
 8001a0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a1e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a26:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a2c:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <MX_I2C3_Init+0x50>)
 8001a3a:	f001 fe41 	bl	80036c0 <HAL_I2C_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a44:	f000 fba0 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200002e8 	.word	0x200002e8
 8001a50:	40005c00 	.word	0x40005c00
 8001a54:	000186a0 	.word	0x000186a0

08001a58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_SPI1_Init+0x64>)
 8001a5e:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <MX_SPI1_Init+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_SPI1_Init+0x64>)
 8001a64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_SPI1_Init+0x64>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a70:	4b12      	ldr	r3, [pc, #72]	; (8001abc <MX_SPI1_Init+0x64>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_SPI1_Init+0x64>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_SPI1_Init+0x64>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_SPI1_Init+0x64>)
 8001a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001a8a:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_SPI1_Init+0x64>)
 8001a8c:	2228      	movs	r2, #40	; 0x28
 8001a8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <MX_SPI1_Init+0x64>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_SPI1_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <MX_SPI1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_SPI1_Init+0x64>)
 8001aa4:	220a      	movs	r2, #10
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MX_SPI1_Init+0x64>)
 8001aaa:	f002 fd85 	bl	80045b8 <HAL_SPI_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ab4:	f000 fb68 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	2000033c 	.word	0x2000033c
 8001ac0:	40013000 	.word	0x40013000

08001ac4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ac8:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001aca:	4a18      	ldr	r2, [pc, #96]	; (8001b2c <MX_SPI2_Init+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001ad0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ad4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001af4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001af8:	2228      	movs	r2, #40	; 0x28
 8001afa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001b10:	220a      	movs	r2, #10
 8001b12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <MX_SPI2_Init+0x64>)
 8001b16:	f002 fd4f 	bl	80045b8 <HAL_SPI_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b20:	f000 fb32 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000394 	.word	0x20000394
 8001b2c:	40003800 	.word	0x40003800

08001b30 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b36:	4a19      	ldr	r2, [pc, #100]	; (8001b9c <MX_SPI3_Init+0x6c>)
 8001b38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001b42:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b48:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b62:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b7e:	220a      	movs	r2, #10
 8001b80:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_SPI3_Init+0x68>)
 8001b84:	f002 fd18 	bl	80045b8 <HAL_SPI_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001b8e:	f000 fafb 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200003ec 	.word	0x200003ec
 8001b9c:	40003c00 	.word	0x40003c00

08001ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08c      	sub	sp, #48	; 0x30
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ba6:	f107 030c 	add.w	r3, r7, #12
 8001baa:	2224      	movs	r2, #36	; 0x24
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f004 f9ec 	bl	8005f8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001be4:	2301      	movs	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bec:	2301      	movs	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480d      	ldr	r0, [pc, #52]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001c10:	f003 f9a2 	bl	8004f58 <HAL_TIM_Encoder_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001c1a:	f000 fab5 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	; (8001c44 <MX_TIM2_Init+0xa4>)
 8001c2c:	f003 fd4c 	bl	80056c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001c36:	f000 faa7 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	; 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000444 	.word	0x20000444

08001c48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4e:	f107 0320 	add.w	r3, r7, #32
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	611a      	str	r2, [r3, #16]
 8001c66:	615a      	str	r2, [r3, #20]
 8001c68:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c6a:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <MX_TIM3_Init+0xac>)
 8001c6c:	4a22      	ldr	r2, [pc, #136]	; (8001cf8 <MX_TIM3_Init+0xb0>)
 8001c6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c70:	4b20      	ldr	r3, [pc, #128]	; (8001cf4 <MX_TIM3_Init+0xac>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c76:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <MX_TIM3_Init+0xac>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <MX_TIM3_Init+0xac>)
 8001c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	; (8001cf4 <MX_TIM3_Init+0xac>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <MX_TIM3_Init+0xac>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c90:	4818      	ldr	r0, [pc, #96]	; (8001cf4 <MX_TIM3_Init+0xac>)
 8001c92:	f003 f912 	bl	8004eba <HAL_TIM_PWM_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001c9c:	f000 fa74 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ca8:	f107 0320 	add.w	r3, r7, #32
 8001cac:	4619      	mov	r1, r3
 8001cae:	4811      	ldr	r0, [pc, #68]	; (8001cf4 <MX_TIM3_Init+0xac>)
 8001cb0:	f003 fd0a 	bl	80056c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001cba:	f000 fa65 	bl	8002188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cbe:	2360      	movs	r3, #96	; 0x60
 8001cc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4807      	ldr	r0, [pc, #28]	; (8001cf4 <MX_TIM3_Init+0xac>)
 8001cd6:	f003 f9e5 	bl	80050a4 <HAL_TIM_PWM_ConfigChannel>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001ce0:	f000 fa52 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <MX_TIM3_Init+0xac>)
 8001ce6:	f000 fd71 	bl	80027cc <HAL_TIM_MspPostInit>

}
 8001cea:	bf00      	nop
 8001cec:	3728      	adds	r7, #40	; 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	2000048c 	.word	0x2000048c
 8001cf8:	40000400 	.word	0x40000400

08001cfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08a      	sub	sp, #40	; 0x28
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d02:	f107 0320 	add.w	r3, r7, #32
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	605a      	str	r2, [r3, #4]
 8001d14:	609a      	str	r2, [r3, #8]
 8001d16:	60da      	str	r2, [r3, #12]
 8001d18:	611a      	str	r2, [r3, #16]
 8001d1a:	615a      	str	r2, [r3, #20]
 8001d1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <MX_TIM4_Init+0xac>)
 8001d20:	4a22      	ldr	r2, [pc, #136]	; (8001dac <MX_TIM4_Init+0xb0>)
 8001d22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d24:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <MX_TIM4_Init+0xac>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <MX_TIM4_Init+0xac>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <MX_TIM4_Init+0xac>)
 8001d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <MX_TIM4_Init+0xac>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <MX_TIM4_Init+0xac>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d44:	4818      	ldr	r0, [pc, #96]	; (8001da8 <MX_TIM4_Init+0xac>)
 8001d46:	f003 f8b8 	bl	8004eba <HAL_TIM_PWM_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001d50:	f000 fa1a 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d5c:	f107 0320 	add.w	r3, r7, #32
 8001d60:	4619      	mov	r1, r3
 8001d62:	4811      	ldr	r0, [pc, #68]	; (8001da8 <MX_TIM4_Init+0xac>)
 8001d64:	f003 fcb0 	bl	80056c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001d6e:	f000 fa0b 	bl	8002188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d72:	2360      	movs	r3, #96	; 0x60
 8001d74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	2200      	movs	r2, #0
 8001d86:	4619      	mov	r1, r3
 8001d88:	4807      	ldr	r0, [pc, #28]	; (8001da8 <MX_TIM4_Init+0xac>)
 8001d8a:	f003 f98b 	bl	80050a4 <HAL_TIM_PWM_ConfigChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001d94:	f000 f9f8 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d98:	4803      	ldr	r0, [pc, #12]	; (8001da8 <MX_TIM4_Init+0xac>)
 8001d9a:	f000 fd17 	bl	80027cc <HAL_TIM_MspPostInit>

}
 8001d9e:	bf00      	nop
 8001da0:	3728      	adds	r7, #40	; 0x28
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	200004d4 	.word	0x200004d4
 8001dac:	40000800 	.word	0x40000800

08001db0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db6:	f107 0320 	add.w	r3, r7, #32
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]
 8001dce:	615a      	str	r2, [r3, #20]
 8001dd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <MX_TIM5_Init+0xac>)
 8001dd4:	4a22      	ldr	r2, [pc, #136]	; (8001e60 <MX_TIM5_Init+0xb0>)
 8001dd6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <MX_TIM5_Init+0xac>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <MX_TIM5_Init+0xac>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001de4:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <MX_TIM5_Init+0xac>)
 8001de6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <MX_TIM5_Init+0xac>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <MX_TIM5_Init+0xac>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001df8:	4818      	ldr	r0, [pc, #96]	; (8001e5c <MX_TIM5_Init+0xac>)
 8001dfa:	f003 f85e 	bl	8004eba <HAL_TIM_PWM_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001e04:	f000 f9c0 	bl	8002188 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e10:	f107 0320 	add.w	r3, r7, #32
 8001e14:	4619      	mov	r1, r3
 8001e16:	4811      	ldr	r0, [pc, #68]	; (8001e5c <MX_TIM5_Init+0xac>)
 8001e18:	f003 fc56 	bl	80056c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001e22:	f000 f9b1 	bl	8002188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e26:	2360      	movs	r3, #96	; 0x60
 8001e28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4807      	ldr	r0, [pc, #28]	; (8001e5c <MX_TIM5_Init+0xac>)
 8001e3e:	f003 f931 	bl	80050a4 <HAL_TIM_PWM_ConfigChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001e48:	f000 f99e 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e4c:	4803      	ldr	r0, [pc, #12]	; (8001e5c <MX_TIM5_Init+0xac>)
 8001e4e:	f000 fcbd 	bl	80027cc <HAL_TIM_MspPostInit>

}
 8001e52:	bf00      	nop
 8001e54:	3728      	adds	r7, #40	; 0x28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	2000051c 	.word	0x2000051c
 8001e60:	40000c00 	.word	0x40000c00

08001e64 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e6a:	1d3b      	adds	r3, r7, #4
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
 8001e78:	615a      	str	r2, [r3, #20]
 8001e7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001e7c:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <MX_TIM13_Init+0x94>)
 8001e7e:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <MX_TIM13_Init+0x98>)
 8001e80:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8001e82:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <MX_TIM13_Init+0x94>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <MX_TIM13_Init+0x94>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <MX_TIM13_Init+0x94>)
 8001e90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e94:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <MX_TIM13_Init+0x94>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <MX_TIM13_Init+0x94>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001ea2:	4815      	ldr	r0, [pc, #84]	; (8001ef8 <MX_TIM13_Init+0x94>)
 8001ea4:	f002 ffba 	bl	8004e1c <HAL_TIM_Base_Init>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001eae:	f000 f96b 	bl	8002188 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001eb2:	4811      	ldr	r0, [pc, #68]	; (8001ef8 <MX_TIM13_Init+0x94>)
 8001eb4:	f003 f801 	bl	8004eba <HAL_TIM_PWM_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001ebe:	f000 f963 	bl	8002188 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec2:	2360      	movs	r3, #96	; 0x60
 8001ec4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <MX_TIM13_Init+0x94>)
 8001eda:	f003 f8e3 	bl	80050a4 <HAL_TIM_PWM_ConfigChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001ee4:	f000 f950 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001ee8:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <MX_TIM13_Init+0x94>)
 8001eea:	f000 fc6f 	bl	80027cc <HAL_TIM_MspPostInit>

}
 8001eee:	bf00      	nop
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000564 	.word	0x20000564
 8001efc:	40001c00 	.word	0x40001c00

08001f00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <MX_USART2_UART_Init+0x4c>)
 8001f06:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <MX_USART2_UART_Init+0x50>)
 8001f08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <MX_USART2_UART_Init+0x4c>)
 8001f0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <MX_USART2_UART_Init+0x4c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	; (8001f4c <MX_USART2_UART_Init+0x4c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <MX_USART2_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <MX_USART2_UART_Init+0x4c>)
 8001f26:	220c      	movs	r2, #12
 8001f28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2a:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <MX_USART2_UART_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <MX_USART2_UART_Init+0x4c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f36:	4805      	ldr	r0, [pc, #20]	; (8001f4c <MX_USART2_UART_Init+0x4c>)
 8001f38:	f003 fc42 	bl	80057c0 <HAL_UART_Init>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f42:	f000 f921 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200005ac 	.word	0x200005ac
 8001f50:	40004400 	.word	0x40004400

08001f54 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_USART6_UART_Init+0x4c>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <MX_USART6_UART_Init+0x50>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <MX_USART6_UART_Init+0x4c>)
 8001f60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001f64:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_USART6_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_USART6_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <MX_USART6_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_USART6_UART_Init+0x4c>)
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <MX_USART6_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_USART6_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_USART6_UART_Init+0x4c>)
 8001f8c:	f003 fc18 	bl	80057c0 <HAL_UART_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001f96:	f000 f8f7 	bl	8002188 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200005f0 	.word	0x200005f0
 8001fa4:	40011400 	.word	0x40011400

08001fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b64      	ldr	r3, [pc, #400]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a63      	ldr	r2, [pc, #396]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8001fc8:	f043 0304 	orr.w	r3, r3, #4
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b61      	ldr	r3, [pc, #388]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	4b5d      	ldr	r3, [pc, #372]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a5c      	ldr	r2, [pc, #368]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8001fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b5a      	ldr	r3, [pc, #360]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]
 8001ffa:	4b56      	ldr	r3, [pc, #344]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a55      	ldr	r2, [pc, #340]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b53      	ldr	r3, [pc, #332]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a4e      	ldr	r2, [pc, #312]	; (8002154 <MX_GPIO_Init+0x1ac>)
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b4c      	ldr	r3, [pc, #304]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4b48      	ldr	r3, [pc, #288]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a47      	ldr	r2, [pc, #284]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b45      	ldr	r3, [pc, #276]	; (8002154 <MX_GPIO_Init+0x1ac>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 800204a:	2200      	movs	r2, #0
 800204c:	f24d 0107 	movw	r1, #53255	; 0xd007
 8002050:	4841      	ldr	r0, [pc, #260]	; (8002158 <MX_GPIO_Init+0x1b0>)
 8002052:	f001 fb03 	bl	800365c <HAL_GPIO_WritePin>
                          |AD_CS3_Pin|AD_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_CS1_Pin|LED_LE_Pin, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800205c:	483f      	ldr	r0, [pc, #252]	; (800215c <MX_GPIO_Init+0x1b4>)
 800205e:	f001 fafd 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin, GPIO_PIN_RESET);
 8002062:	2200      	movs	r2, #0
 8002064:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 8002068:	483d      	ldr	r0, [pc, #244]	; (8002160 <MX_GPIO_Init+0x1b8>)
 800206a:	f001 faf7 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_RESET);
 800206e:	2200      	movs	r2, #0
 8002070:	2104      	movs	r1, #4
 8002072:	483c      	ldr	r0, [pc, #240]	; (8002164 <MX_GPIO_Init+0x1bc>)
 8002074:	f001 faf2 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800207c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800207e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	4619      	mov	r1, r3
 800208e:	4833      	ldr	r0, [pc, #204]	; (800215c <MX_GPIO_Init+0x1b4>)
 8002090:	f001 f950 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_PWR_FB_Pin */
  GPIO_InitStruct.Pin = DRV_PWR_FB_Pin;
 8002094:	2310      	movs	r3, #16
 8002096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_PWR_FB_GPIO_Port, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	482d      	ldr	r0, [pc, #180]	; (800215c <MX_GPIO_Init+0x1b4>)
 80020a8:	f001 f944 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_XSDN_36_Pin ToF_XSDN_25_Pin ToF_XSDN_14_Pin AD_CS4_Pin
                           AD_CS3_Pin AD_CS2_Pin */
  GPIO_InitStruct.Pin = ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 80020ac:	f24d 0307 	movw	r3, #53255	; 0xd007
 80020b0:	617b      	str	r3, [r7, #20]
                          |AD_CS3_Pin|AD_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020be:	f107 0314 	add.w	r3, r7, #20
 80020c2:	4619      	mov	r1, r3
 80020c4:	4824      	ldr	r0, [pc, #144]	; (8002158 <MX_GPIO_Init+0x1b0>)
 80020c6:	f001 f935 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_CS1_Pin LED_LE_Pin */
  GPIO_InitStruct.Pin = AD_CS1_Pin|LED_LE_Pin;
 80020ca:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80020ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	481e      	ldr	r0, [pc, #120]	; (800215c <MX_GPIO_Init+0x1b4>)
 80020e4:	f001 f926 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pins : INF_LE_Pin INF_OE_Pin DRV_EN_Pin */
  GPIO_InitStruct.Pin = INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin;
 80020e8:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 80020ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ee:	2301      	movs	r3, #1
 80020f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fa:	f107 0314 	add.w	r3, r7, #20
 80020fe:	4619      	mov	r1, r3
 8002100:	4817      	ldr	r0, [pc, #92]	; (8002160 <MX_GPIO_Init+0x1b8>)
 8002102:	f001 f917 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_FB_Pin */
  GPIO_InitStruct.Pin = DRV_EN_FB_Pin;
 8002106:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_EN_FB_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 0314 	add.w	r3, r7, #20
 8002118:	4619      	mov	r1, r3
 800211a:	4811      	ldr	r0, [pc, #68]	; (8002160 <MX_GPIO_Init+0x1b8>)
 800211c:	f001 f90a 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_OE_Pin;
 8002120:	2304      	movs	r3, #4
 8002122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002124:	2301      	movs	r3, #1
 8002126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212c:	2300      	movs	r3, #0
 800212e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OE_GPIO_Port, &GPIO_InitStruct);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	4619      	mov	r1, r3
 8002136:	480b      	ldr	r0, [pc, #44]	; (8002164 <MX_GPIO_Init+0x1bc>)
 8002138:	f001 f8fc 	bl	8003334 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	2028      	movs	r0, #40	; 0x28
 8002142:	f001 f8c0 	bl	80032c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002146:	2028      	movs	r0, #40	; 0x28
 8002148:	f001 f8d9 	bl	80032fe <HAL_NVIC_EnableIRQ>

}
 800214c:	bf00      	nop
 800214e:	3728      	adds	r7, #40	; 0x28
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40023800 	.word	0x40023800
 8002158:	40020400 	.word	0x40020400
 800215c:	40020800 	.word	0x40020800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020c00 	.word	0x40020c00

08002168 <HAL_GPIO_EXTI_Callback>:
//{
//	  BTMessageFlag = true;
//	  BT_ReceiveMsg(&huart2, BT_received_msg);
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
	buttonMessageFlag = true;
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	20000634 	.word	0x20000634

08002188 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800218c:	b672      	cpsid	i
}
 800218e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002190:	e7fe      	b.n	8002190 <Error_Handler+0x8>
	...

08002194 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <HAL_MspInit+0x4c>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	4a0f      	ldr	r2, [pc, #60]	; (80021e0 <HAL_MspInit+0x4c>)
 80021a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a8:	6453      	str	r3, [r2, #68]	; 0x44
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_MspInit+0x4c>)
 80021ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	603b      	str	r3, [r7, #0]
 80021ba:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <HAL_MspInit+0x4c>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a08      	ldr	r2, [pc, #32]	; (80021e0 <HAL_MspInit+0x4c>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_MspInit+0x4c>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021d2:	2007      	movs	r0, #7
 80021d4:	f001 f86c 	bl	80032b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40023800 	.word	0x40023800

080021e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <HAL_ADC_MspInit+0x7c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d127      	bne.n	8002256 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	4b16      	ldr	r3, [pc, #88]	; (8002264 <HAL_ADC_MspInit+0x80>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a15      	ldr	r2, [pc, #84]	; (8002264 <HAL_ADC_MspInit+0x80>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b13      	ldr	r3, [pc, #76]	; (8002264 <HAL_ADC_MspInit+0x80>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_ADC_MspInit+0x80>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_ADC_MspInit+0x80>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_ADC_MspInit+0x80>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IMotor_Pin|UBatt_Pin;
 800223e:	2312      	movs	r3, #18
 8002240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002242:	2303      	movs	r3, #3
 8002244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	4805      	ldr	r0, [pc, #20]	; (8002268 <HAL_ADC_MspInit+0x84>)
 8002252:	f001 f86f 	bl	8003334 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002256:	bf00      	nop
 8002258:	3728      	adds	r7, #40	; 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40012000 	.word	0x40012000
 8002264:	40023800 	.word	0x40023800
 8002268:	40020000 	.word	0x40020000

0800226c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08e      	sub	sp, #56	; 0x38
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a5c      	ldr	r2, [pc, #368]	; (80023fc <HAL_I2C_MspInit+0x190>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d12d      	bne.n	80022ea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	623b      	str	r3, [r7, #32]
 8002292:	4b5b      	ldr	r3, [pc, #364]	; (8002400 <HAL_I2C_MspInit+0x194>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a5a      	ldr	r2, [pc, #360]	; (8002400 <HAL_I2C_MspInit+0x194>)
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b58      	ldr	r3, [pc, #352]	; (8002400 <HAL_I2C_MspInit+0x194>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	623b      	str	r3, [r7, #32]
 80022a8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80022aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022b0:	2312      	movs	r3, #18
 80022b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b8:	2303      	movs	r3, #3
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022bc:	2304      	movs	r3, #4
 80022be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c4:	4619      	mov	r1, r3
 80022c6:	484f      	ldr	r0, [pc, #316]	; (8002404 <HAL_I2C_MspInit+0x198>)
 80022c8:	f001 f834 	bl	8003334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
 80022d0:	4b4b      	ldr	r3, [pc, #300]	; (8002400 <HAL_I2C_MspInit+0x194>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	4a4a      	ldr	r2, [pc, #296]	; (8002400 <HAL_I2C_MspInit+0x194>)
 80022d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022da:	6413      	str	r3, [r2, #64]	; 0x40
 80022dc:	4b48      	ldr	r3, [pc, #288]	; (8002400 <HAL_I2C_MspInit+0x194>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	61fb      	str	r3, [r7, #28]
 80022e6:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80022e8:	e083      	b.n	80023f2 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a46      	ldr	r2, [pc, #280]	; (8002408 <HAL_I2C_MspInit+0x19c>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d12d      	bne.n	8002350 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	4b41      	ldr	r3, [pc, #260]	; (8002400 <HAL_I2C_MspInit+0x194>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	4a40      	ldr	r2, [pc, #256]	; (8002400 <HAL_I2C_MspInit+0x194>)
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	6313      	str	r3, [r2, #48]	; 0x30
 8002304:	4b3e      	ldr	r3, [pc, #248]	; (8002400 <HAL_I2C_MspInit+0x194>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	61bb      	str	r3, [r7, #24]
 800230e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8002310:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002316:	2312      	movs	r3, #18
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002322:	2304      	movs	r3, #4
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232a:	4619      	mov	r1, r3
 800232c:	4835      	ldr	r0, [pc, #212]	; (8002404 <HAL_I2C_MspInit+0x198>)
 800232e:	f001 f801 	bl	8003334 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	4b32      	ldr	r3, [pc, #200]	; (8002400 <HAL_I2C_MspInit+0x194>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	4a31      	ldr	r2, [pc, #196]	; (8002400 <HAL_I2C_MspInit+0x194>)
 800233c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002340:	6413      	str	r3, [r2, #64]	; 0x40
 8002342:	4b2f      	ldr	r3, [pc, #188]	; (8002400 <HAL_I2C_MspInit+0x194>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697b      	ldr	r3, [r7, #20]
}
 800234e:	e050      	b.n	80023f2 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a2d      	ldr	r2, [pc, #180]	; (800240c <HAL_I2C_MspInit+0x1a0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d14b      	bne.n	80023f2 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b28      	ldr	r3, [pc, #160]	; (8002400 <HAL_I2C_MspInit+0x194>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	4a27      	ldr	r2, [pc, #156]	; (8002400 <HAL_I2C_MspInit+0x194>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6313      	str	r3, [r2, #48]	; 0x30
 800236a:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_I2C_MspInit+0x194>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_I2C_MspInit+0x194>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	4a20      	ldr	r2, [pc, #128]	; (8002400 <HAL_I2C_MspInit+0x194>)
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	6313      	str	r3, [r2, #48]	; 0x30
 8002386:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <HAL_I2C_MspInit+0x194>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002392:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002398:	2312      	movs	r3, #18
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023a4:	2304      	movs	r3, #4
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ac:	4619      	mov	r1, r3
 80023ae:	4818      	ldr	r0, [pc, #96]	; (8002410 <HAL_I2C_MspInit+0x1a4>)
 80023b0:	f000 ffc0 	bl	8003334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ba:	2312      	movs	r3, #18
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80023c6:	2304      	movs	r3, #4
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ce:	4619      	mov	r1, r3
 80023d0:	4810      	ldr	r0, [pc, #64]	; (8002414 <HAL_I2C_MspInit+0x1a8>)
 80023d2:	f000 ffaf 	bl	8003334 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_I2C_MspInit+0x194>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	4a08      	ldr	r2, [pc, #32]	; (8002400 <HAL_I2C_MspInit+0x194>)
 80023e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023e4:	6413      	str	r3, [r2, #64]	; 0x40
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_I2C_MspInit+0x194>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	68bb      	ldr	r3, [r7, #8]
}
 80023f2:	bf00      	nop
 80023f4:	3738      	adds	r7, #56	; 0x38
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40005400 	.word	0x40005400
 8002400:	40023800 	.word	0x40023800
 8002404:	40020400 	.word	0x40020400
 8002408:	40005800 	.word	0x40005800
 800240c:	40005c00 	.word	0x40005c00
 8002410:	40020800 	.word	0x40020800
 8002414:	40020000 	.word	0x40020000

08002418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b090      	sub	sp, #64	; 0x40
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a72      	ldr	r2, [pc, #456]	; (8002600 <HAL_SPI_MspInit+0x1e8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d14a      	bne.n	80024d0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
 800243e:	4b71      	ldr	r3, [pc, #452]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a70      	ldr	r2, [pc, #448]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 8002444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b6e      	ldr	r3, [pc, #440]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
 800245a:	4b6a      	ldr	r3, [pc, #424]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	4a69      	ldr	r2, [pc, #420]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6313      	str	r3, [r2, #48]	; 0x30
 8002466:	4b67      	ldr	r3, [pc, #412]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	623b      	str	r3, [r7, #32]
 8002476:	4b63      	ldr	r3, [pc, #396]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a62      	ldr	r2, [pc, #392]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b60      	ldr	r3, [pc, #384]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	623b      	str	r3, [r7, #32]
 800248c:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800248e:	23a0      	movs	r3, #160	; 0xa0
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002492:	2302      	movs	r3, #2
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249a:	2303      	movs	r3, #3
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800249e:	2305      	movs	r3, #5
 80024a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a6:	4619      	mov	r1, r3
 80024a8:	4857      	ldr	r0, [pc, #348]	; (8002608 <HAL_SPI_MspInit+0x1f0>)
 80024aa:	f000 ff43 	bl	8003334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024ae:	2310      	movs	r3, #16
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b2:	2302      	movs	r3, #2
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ba:	2303      	movs	r3, #3
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024be:	2305      	movs	r3, #5
 80024c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c6:	4619      	mov	r1, r3
 80024c8:	4850      	ldr	r0, [pc, #320]	; (800260c <HAL_SPI_MspInit+0x1f4>)
 80024ca:	f000 ff33 	bl	8003334 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80024ce:	e092      	b.n	80025f6 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a4e      	ldr	r2, [pc, #312]	; (8002610 <HAL_SPI_MspInit+0x1f8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d15b      	bne.n	8002592 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	4b49      	ldr	r3, [pc, #292]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a48      	ldr	r2, [pc, #288]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b46      	ldr	r3, [pc, #280]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	4b42      	ldr	r3, [pc, #264]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a41      	ldr	r2, [pc, #260]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b3f      	ldr	r3, [pc, #252]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	4b3b      	ldr	r3, [pc, #236]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a3a      	ldr	r2, [pc, #232]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b38      	ldr	r3, [pc, #224]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800252e:	2302      	movs	r3, #2
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002532:	2302      	movs	r3, #2
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800253e:	2307      	movs	r3, #7
 8002540:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002546:	4619      	mov	r1, r3
 8002548:	4832      	ldr	r0, [pc, #200]	; (8002614 <HAL_SPI_MspInit+0x1fc>)
 800254a:	f000 fef3 	bl	8003334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800254e:	2304      	movs	r3, #4
 8002550:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800255e:	2305      	movs	r3, #5
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002566:	4619      	mov	r1, r3
 8002568:	482a      	ldr	r0, [pc, #168]	; (8002614 <HAL_SPI_MspInit+0x1fc>)
 800256a:	f000 fee3 	bl	8003334 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800256e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002580:	2305      	movs	r3, #5
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002584:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002588:	4619      	mov	r1, r3
 800258a:	4820      	ldr	r0, [pc, #128]	; (800260c <HAL_SPI_MspInit+0x1f4>)
 800258c:	f000 fed2 	bl	8003334 <HAL_GPIO_Init>
}
 8002590:	e031      	b.n	80025f6 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a20      	ldr	r2, [pc, #128]	; (8002618 <HAL_SPI_MspInit+0x200>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d12c      	bne.n	80025f6 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	4a17      	ldr	r2, [pc, #92]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 80025a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025aa:	6413      	str	r3, [r2, #64]	; 0x40
 80025ac:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	4a10      	ldr	r2, [pc, #64]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	6313      	str	r3, [r2, #48]	; 0x30
 80025c8:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <HAL_SPI_MspInit+0x1ec>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80025d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e2:	2303      	movs	r3, #3
 80025e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025e6:	2306      	movs	r3, #6
 80025e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ee:	4619      	mov	r1, r3
 80025f0:	4808      	ldr	r0, [pc, #32]	; (8002614 <HAL_SPI_MspInit+0x1fc>)
 80025f2:	f000 fe9f 	bl	8003334 <HAL_GPIO_Init>
}
 80025f6:	bf00      	nop
 80025f8:	3740      	adds	r7, #64	; 0x40
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40013000 	.word	0x40013000
 8002604:	40023800 	.word	0x40023800
 8002608:	40020000 	.word	0x40020000
 800260c:	40020400 	.word	0x40020400
 8002610:	40003800 	.word	0x40003800
 8002614:	40020800 	.word	0x40020800
 8002618:	40003c00 	.word	0x40003c00

0800261c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08a      	sub	sp, #40	; 0x28
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263c:	d14b      	bne.n	80026d6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	4b27      	ldr	r3, [pc, #156]	; (80026e0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a26      	ldr	r2, [pc, #152]	; (80026e0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b24      	ldr	r3, [pc, #144]	; (80026e0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	4b20      	ldr	r3, [pc, #128]	; (80026e0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a1f      	ldr	r2, [pc, #124]	; (80026e0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b1d      	ldr	r3, [pc, #116]	; (80026e0 <HAL_TIM_Encoder_MspInit+0xc4>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b19      	ldr	r3, [pc, #100]	; (80026e0 <HAL_TIM_Encoder_MspInit+0xc4>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a18      	ldr	r2, [pc, #96]	; (80026e0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b16      	ldr	r3, [pc, #88]	; (80026e0 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin;
 8002692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026a4:	2301      	movs	r3, #1
 80026a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80026a8:	f107 0314 	add.w	r3, r7, #20
 80026ac:	4619      	mov	r1, r3
 80026ae:	480d      	ldr	r0, [pc, #52]	; (80026e4 <HAL_TIM_Encoder_MspInit+0xc8>)
 80026b0:	f000 fe40 	bl	8003334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_B_Pin;
 80026b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ba:	2302      	movs	r3, #2
 80026bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c2:	2300      	movs	r3, #0
 80026c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026c6:	2301      	movs	r3, #1
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 80026ca:	f107 0314 	add.w	r3, r7, #20
 80026ce:	4619      	mov	r1, r3
 80026d0:	4805      	ldr	r0, [pc, #20]	; (80026e8 <HAL_TIM_Encoder_MspInit+0xcc>)
 80026d2:	f000 fe2f 	bl	8003334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80026d6:	bf00      	nop
 80026d8:	3728      	adds	r7, #40	; 0x28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020000 	.word	0x40020000
 80026e8:	40020400 	.word	0x40020400

080026ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1f      	ldr	r2, [pc, #124]	; (8002778 <HAL_TIM_PWM_MspInit+0x8c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10e      	bne.n	800271c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <HAL_TIM_PWM_MspInit+0x90>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a1d      	ldr	r2, [pc, #116]	; (800277c <HAL_TIM_PWM_MspInit+0x90>)
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b1b      	ldr	r3, [pc, #108]	; (800277c <HAL_TIM_PWM_MspInit+0x90>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800271a:	e026      	b.n	800276a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a17      	ldr	r2, [pc, #92]	; (8002780 <HAL_TIM_PWM_MspInit+0x94>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10e      	bne.n	8002744 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	4b14      	ldr	r3, [pc, #80]	; (800277c <HAL_TIM_PWM_MspInit+0x90>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a13      	ldr	r2, [pc, #76]	; (800277c <HAL_TIM_PWM_MspInit+0x90>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_TIM_PWM_MspInit+0x90>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
}
 8002742:	e012      	b.n	800276a <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0e      	ldr	r2, [pc, #56]	; (8002784 <HAL_TIM_PWM_MspInit+0x98>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d10d      	bne.n	800276a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <HAL_TIM_PWM_MspInit+0x90>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a09      	ldr	r2, [pc, #36]	; (800277c <HAL_TIM_PWM_MspInit+0x90>)
 8002758:	f043 0308 	orr.w	r3, r3, #8
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <HAL_TIM_PWM_MspInit+0x90>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
}
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40000400 	.word	0x40000400
 800277c:	40023800 	.word	0x40023800
 8002780:	40000800 	.word	0x40000800
 8002784:	40000c00 	.word	0x40000c00

08002788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <HAL_TIM_Base_MspInit+0x3c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10d      	bne.n	80027b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_TIM_Base_MspInit+0x40>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_TIM_Base_MspInit+0x40>)
 80027a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027a8:	6413      	str	r3, [r2, #64]	; 0x40
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <HAL_TIM_Base_MspInit+0x40>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40001c00 	.word	0x40001c00
 80027c8:	40023800 	.word	0x40023800

080027cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08c      	sub	sp, #48	; 0x30
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 031c 	add.w	r3, r7, #28
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a48      	ldr	r2, [pc, #288]	; (800290c <HAL_TIM_MspPostInit+0x140>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d11e      	bne.n	800282c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	61bb      	str	r3, [r7, #24]
 80027f2:	4b47      	ldr	r3, [pc, #284]	; (8002910 <HAL_TIM_MspPostInit+0x144>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4a46      	ldr	r2, [pc, #280]	; (8002910 <HAL_TIM_MspPostInit+0x144>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	6313      	str	r3, [r2, #48]	; 0x30
 80027fe:	4b44      	ldr	r3, [pc, #272]	; (8002910 <HAL_TIM_MspPostInit+0x144>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_PMW1_Pin;
 800280a:	2320      	movs	r3, #32
 800280c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002816:	2300      	movs	r3, #0
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800281a:	2302      	movs	r3, #2
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PMW1_GPIO_Port, &GPIO_InitStruct);
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	483b      	ldr	r0, [pc, #236]	; (8002914 <HAL_TIM_MspPostInit+0x148>)
 8002826:	f000 fd85 	bl	8003334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800282a:	e06a      	b.n	8002902 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a39      	ldr	r2, [pc, #228]	; (8002918 <HAL_TIM_MspPostInit+0x14c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d11e      	bne.n	8002874 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	4b35      	ldr	r3, [pc, #212]	; (8002910 <HAL_TIM_MspPostInit+0x144>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a34      	ldr	r2, [pc, #208]	; (8002910 <HAL_TIM_MspPostInit+0x144>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b32      	ldr	r3, [pc, #200]	; (8002910 <HAL_TIM_MspPostInit+0x144>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DRV_PWM2_Pin;
 8002852:	2340      	movs	r3, #64	; 0x40
 8002854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002862:	2302      	movs	r3, #2
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002866:	f107 031c 	add.w	r3, r7, #28
 800286a:	4619      	mov	r1, r3
 800286c:	4829      	ldr	r0, [pc, #164]	; (8002914 <HAL_TIM_MspPostInit+0x148>)
 800286e:	f000 fd61 	bl	8003334 <HAL_GPIO_Init>
}
 8002872:	e046      	b.n	8002902 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a28      	ldr	r2, [pc, #160]	; (800291c <HAL_TIM_MspPostInit+0x150>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d11e      	bne.n	80028bc <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	4b23      	ldr	r3, [pc, #140]	; (8002910 <HAL_TIM_MspPostInit+0x144>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a22      	ldr	r2, [pc, #136]	; (8002910 <HAL_TIM_MspPostInit+0x144>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_TIM_MspPostInit+0x144>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM2_Pin;
 800289a:	2301      	movs	r3, #1
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80028aa:	2302      	movs	r3, #2
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM2_GPIO_Port, &GPIO_InitStruct);
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4619      	mov	r1, r3
 80028b4:	481a      	ldr	r0, [pc, #104]	; (8002920 <HAL_TIM_MspPostInit+0x154>)
 80028b6:	f000 fd3d 	bl	8003334 <HAL_GPIO_Init>
}
 80028ba:	e022      	b.n	8002902 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM13)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a18      	ldr	r2, [pc, #96]	; (8002924 <HAL_TIM_MspPostInit+0x158>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d11d      	bne.n	8002902 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <HAL_TIM_MspPostInit+0x144>)
 80028cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ce:	4a10      	ldr	r2, [pc, #64]	; (8002910 <HAL_TIM_MspPostInit+0x144>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6313      	str	r3, [r2, #48]	; 0x30
 80028d6:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <HAL_TIM_MspPostInit+0x144>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM_Pin;
 80028e2:	2340      	movs	r3, #64	; 0x40
 80028e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80028f2:	2309      	movs	r3, #9
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_GPIO_Port, &GPIO_InitStruct);
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	4619      	mov	r1, r3
 80028fc:	4808      	ldr	r0, [pc, #32]	; (8002920 <HAL_TIM_MspPostInit+0x154>)
 80028fe:	f000 fd19 	bl	8003334 <HAL_GPIO_Init>
}
 8002902:	bf00      	nop
 8002904:	3730      	adds	r7, #48	; 0x30
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40000400 	.word	0x40000400
 8002910:	40023800 	.word	0x40023800
 8002914:	40020400 	.word	0x40020400
 8002918:	40000800 	.word	0x40000800
 800291c:	40000c00 	.word	0x40000c00
 8002920:	40020000 	.word	0x40020000
 8002924:	40001c00 	.word	0x40001c00

08002928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	; 0x30
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 031c 	add.w	r3, r7, #28
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a32      	ldr	r2, [pc, #200]	; (8002a10 <HAL_UART_MspInit+0xe8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d12c      	bne.n	80029a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
 800294e:	4b31      	ldr	r3, [pc, #196]	; (8002a14 <HAL_UART_MspInit+0xec>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a30      	ldr	r2, [pc, #192]	; (8002a14 <HAL_UART_MspInit+0xec>)
 8002954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <HAL_UART_MspInit+0xec>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	61bb      	str	r3, [r7, #24]
 8002964:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <HAL_UART_MspInit+0xec>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4a29      	ldr	r2, [pc, #164]	; (8002a14 <HAL_UART_MspInit+0xec>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6313      	str	r3, [r2, #48]	; 0x30
 8002976:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <HAL_UART_MspInit+0xec>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002982:	230c      	movs	r3, #12
 8002984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298e:	2303      	movs	r3, #3
 8002990:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002992:	2307      	movs	r3, #7
 8002994:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002996:	f107 031c 	add.w	r3, r7, #28
 800299a:	4619      	mov	r1, r3
 800299c:	481e      	ldr	r0, [pc, #120]	; (8002a18 <HAL_UART_MspInit+0xf0>)
 800299e:	f000 fcc9 	bl	8003334 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80029a2:	e030      	b.n	8002a06 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <HAL_UART_MspInit+0xf4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d12b      	bne.n	8002a06 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <HAL_UART_MspInit+0xec>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a17      	ldr	r2, [pc, #92]	; (8002a14 <HAL_UART_MspInit+0xec>)
 80029b8:	f043 0320 	orr.w	r3, r3, #32
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <HAL_UART_MspInit+0xec>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f003 0320 	and.w	r3, r3, #32
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_UART_MspInit+0xec>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <HAL_UART_MspInit+0xec>)
 80029d4:	f043 0304 	orr.w	r3, r3, #4
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <HAL_UART_MspInit+0xec>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|RADIO_RX_Pin;
 80029e6:	23c0      	movs	r3, #192	; 0xc0
 80029e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ea:	2302      	movs	r3, #2
 80029ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f2:	2303      	movs	r3, #3
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80029f6:	2308      	movs	r3, #8
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fa:	f107 031c 	add.w	r3, r7, #28
 80029fe:	4619      	mov	r1, r3
 8002a00:	4807      	ldr	r0, [pc, #28]	; (8002a20 <HAL_UART_MspInit+0xf8>)
 8002a02:	f000 fc97 	bl	8003334 <HAL_GPIO_Init>
}
 8002a06:	bf00      	nop
 8002a08:	3730      	adds	r7, #48	; 0x30
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40004400 	.word	0x40004400
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40020000 	.word	0x40020000
 8002a1c:	40011400 	.word	0x40011400
 8002a20:	40020800 	.word	0x40020800

08002a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a28:	e7fe      	b.n	8002a28 <NMI_Handler+0x4>

08002a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a2e:	e7fe      	b.n	8002a2e <HardFault_Handler+0x4>

08002a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <MemManage_Handler+0x4>

08002a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a3a:	e7fe      	b.n	8002a3a <BusFault_Handler+0x4>

08002a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a40:	e7fe      	b.n	8002a40 <UsageFault_Handler+0x4>

08002a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a70:	f000 f898 	bl	8002ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002a7c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a80:	f000 fe06 	bl	8003690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <SystemInit+0x20>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	4a05      	ldr	r2, [pc, #20]	; (8002aa8 <SystemInit+0x20>)
 8002a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ae4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ab0:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ab2:	490e      	ldr	r1, [pc, #56]	; (8002aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ab4:	4a0e      	ldr	r2, [pc, #56]	; (8002af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab8:	e002      	b.n	8002ac0 <LoopCopyDataInit>

08002aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002abe:	3304      	adds	r3, #4

08002ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac4:	d3f9      	bcc.n	8002aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	; (8002af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ac8:	4c0b      	ldr	r4, [pc, #44]	; (8002af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002acc:	e001      	b.n	8002ad2 <LoopFillZerobss>

08002ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ad0:	3204      	adds	r2, #4

08002ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad4:	d3fb      	bcc.n	8002ace <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ad6:	f7ff ffd7 	bl	8002a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ada:	f003 fa33 	bl	8005f44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ade:	f7fe fe21 	bl	8001724 <main>
  bx  lr    
 8002ae2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002af0:	08009254 	.word	0x08009254
  ldr r2, =_sbss
 8002af4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002af8:	20000650 	.word	0x20000650

08002afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002afc:	e7fe      	b.n	8002afc <ADC_IRQHandler>
	...

08002b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b04:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_Init+0x40>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <HAL_Init+0x40>)
 8002b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_Init+0x40>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HAL_Init+0x40>)
 8002b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_Init+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <HAL_Init+0x40>)
 8002b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b28:	2003      	movs	r0, #3
 8002b2a:	f000 fbc1 	bl	80032b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f000 f808 	bl	8002b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b34:	f7ff fb2e 	bl	8002194 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00

08002b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b4c:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_InitTick+0x54>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <HAL_InitTick+0x58>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4619      	mov	r1, r3
 8002b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fbd9 	bl	800331a <HAL_SYSTICK_Config>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00e      	b.n	8002b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b0f      	cmp	r3, #15
 8002b76:	d80a      	bhi.n	8002b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b80:	f000 fba1 	bl	80032c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b84:	4a06      	ldr	r2, [pc, #24]	; (8002ba0 <HAL_InitTick+0x5c>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	e000      	b.n	8002b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	20000008 	.word	0x20000008
 8002ba0:	20000004 	.word	0x20000004

08002ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_IncTick+0x20>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <HAL_IncTick+0x24>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <HAL_IncTick+0x24>)
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000008 	.word	0x20000008
 8002bc8:	20000638 	.word	0x20000638

08002bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return uwTick;
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <HAL_GetTick+0x14>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	20000638 	.word	0x20000638

08002be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bec:	f7ff ffee 	bl	8002bcc <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d005      	beq.n	8002c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <HAL_Delay+0x44>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c0a:	bf00      	nop
 8002c0c:	f7ff ffde 	bl	8002bcc <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d8f7      	bhi.n	8002c0c <HAL_Delay+0x28>
  {
  }
}
 8002c1c:	bf00      	nop
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000008 	.word	0x20000008

08002c2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e033      	b.n	8002caa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff faca 	bl	80021e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d118      	bne.n	8002c9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c72:	f023 0302 	bic.w	r3, r3, #2
 8002c76:	f043 0202 	orr.w	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f94a 	bl	8002f18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f023 0303 	bic.w	r3, r3, #3
 8002c92:	f043 0201 	orr.w	r2, r3, #1
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	641a      	str	r2, [r3, #64]	; 0x40
 8002c9a:	e001      	b.n	8002ca0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x1c>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e113      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x244>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b09      	cmp	r3, #9
 8002cde:	d925      	bls.n	8002d2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68d9      	ldr	r1, [r3, #12]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	461a      	mov	r2, r3
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b1e      	subs	r3, #30
 8002cf6:	2207      	movs	r2, #7
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43da      	mvns	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	400a      	ands	r2, r1
 8002d04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68d9      	ldr	r1, [r3, #12]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	4618      	mov	r0, r3
 8002d18:	4603      	mov	r3, r0
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4403      	add	r3, r0
 8002d1e:	3b1e      	subs	r3, #30
 8002d20:	409a      	lsls	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	60da      	str	r2, [r3, #12]
 8002d2a:	e022      	b.n	8002d72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6919      	ldr	r1, [r3, #16]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	2207      	movs	r2, #7
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43da      	mvns	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6919      	ldr	r1, [r3, #16]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	4618      	mov	r0, r3
 8002d62:	4603      	mov	r3, r0
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4403      	add	r3, r0
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d824      	bhi.n	8002dc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	3b05      	subs	r3, #5
 8002d8c:	221f      	movs	r2, #31
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	400a      	ands	r2, r1
 8002d9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	4618      	mov	r0, r3
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	3b05      	subs	r3, #5
 8002db6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002dc2:	e04c      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b0c      	cmp	r3, #12
 8002dca:	d824      	bhi.n	8002e16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	3b23      	subs	r3, #35	; 0x23
 8002dde:	221f      	movs	r2, #31
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43da      	mvns	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	400a      	ands	r2, r1
 8002dec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	3b23      	subs	r3, #35	; 0x23
 8002e08:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	631a      	str	r2, [r3, #48]	; 0x30
 8002e14:	e023      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	3b41      	subs	r3, #65	; 0x41
 8002e28:	221f      	movs	r2, #31
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	400a      	ands	r2, r1
 8002e36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	4618      	mov	r0, r3
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	3b41      	subs	r3, #65	; 0x41
 8002e52:	fa00 f203 	lsl.w	r2, r0, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e5e:	4b29      	ldr	r3, [pc, #164]	; (8002f04 <HAL_ADC_ConfigChannel+0x250>)
 8002e60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <HAL_ADC_ConfigChannel+0x254>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d10f      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1d8>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b12      	cmp	r3, #18
 8002e72:	d10b      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a1d      	ldr	r2, [pc, #116]	; (8002f08 <HAL_ADC_ConfigChannel+0x254>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d12b      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x23a>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a1c      	ldr	r2, [pc, #112]	; (8002f0c <HAL_ADC_ConfigChannel+0x258>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d003      	beq.n	8002ea8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b11      	cmp	r3, #17
 8002ea6:	d122      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a11      	ldr	r2, [pc, #68]	; (8002f0c <HAL_ADC_ConfigChannel+0x258>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d111      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eca:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <HAL_ADC_ConfigChannel+0x25c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <HAL_ADC_ConfigChannel+0x260>)
 8002ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed4:	0c9a      	lsrs	r2, r3, #18
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	4413      	add	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ee0:	e002      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f9      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	40012300 	.word	0x40012300
 8002f08:	40012000 	.word	0x40012000
 8002f0c:	10000012 	.word	0x10000012
 8002f10:	20000000 	.word	0x20000000
 8002f14:	431bde83 	.word	0x431bde83

08002f18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f20:	4b79      	ldr	r3, [pc, #484]	; (8003108 <ADC_Init+0x1f0>)
 8002f22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6859      	ldr	r1, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	021a      	lsls	r2, r3, #8
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6899      	ldr	r1, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002faa:	4a58      	ldr	r2, [pc, #352]	; (800310c <ADC_Init+0x1f4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d022      	beq.n	8002ff6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6899      	ldr	r1, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fe0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6899      	ldr	r1, [r3, #8]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	e00f      	b.n	8003016 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003004:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003014:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0202 	bic.w	r2, r2, #2
 8003024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6899      	ldr	r1, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7e1b      	ldrb	r3, [r3, #24]
 8003030:	005a      	lsls	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003052:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003062:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	3b01      	subs	r3, #1
 8003070:	035a      	lsls	r2, r3, #13
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	430a      	orrs	r2, r1
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	e007      	b.n	800308c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800308a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800309a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	051a      	lsls	r2, r3, #20
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6899      	ldr	r1, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ce:	025a      	lsls	r2, r3, #9
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6899      	ldr	r1, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	029a      	lsls	r2, r3, #10
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40012300 	.word	0x40012300
 800310c:	0f000001 	.word	0x0f000001

08003110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <__NVIC_SetPriorityGrouping+0x44>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800312c:	4013      	ands	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800313c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003142:	4a04      	ldr	r2, [pc, #16]	; (8003154 <__NVIC_SetPriorityGrouping+0x44>)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	60d3      	str	r3, [r2, #12]
}
 8003148:	bf00      	nop
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <__NVIC_GetPriorityGrouping+0x18>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	0a1b      	lsrs	r3, r3, #8
 8003162:	f003 0307 	and.w	r3, r3, #7
}
 8003166:	4618      	mov	r0, r3
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	2b00      	cmp	r3, #0
 8003184:	db0b      	blt.n	800319e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	f003 021f 	and.w	r2, r3, #31
 800318c:	4907      	ldr	r1, [pc, #28]	; (80031ac <__NVIC_EnableIRQ+0x38>)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	2001      	movs	r0, #1
 8003196:	fa00 f202 	lsl.w	r2, r0, r2
 800319a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	e000e100 	.word	0xe000e100

080031b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	6039      	str	r1, [r7, #0]
 80031ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	db0a      	blt.n	80031da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	b2da      	uxtb	r2, r3
 80031c8:	490c      	ldr	r1, [pc, #48]	; (80031fc <__NVIC_SetPriority+0x4c>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	0112      	lsls	r2, r2, #4
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	440b      	add	r3, r1
 80031d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031d8:	e00a      	b.n	80031f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	4908      	ldr	r1, [pc, #32]	; (8003200 <__NVIC_SetPriority+0x50>)
 80031e0:	79fb      	ldrb	r3, [r7, #7]
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	3b04      	subs	r3, #4
 80031e8:	0112      	lsls	r2, r2, #4
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	440b      	add	r3, r1
 80031ee:	761a      	strb	r2, [r3, #24]
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000e100 	.word	0xe000e100
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003204:	b480      	push	{r7}
 8003206:	b089      	sub	sp, #36	; 0x24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	f1c3 0307 	rsb	r3, r3, #7
 800321e:	2b04      	cmp	r3, #4
 8003220:	bf28      	it	cs
 8003222:	2304      	movcs	r3, #4
 8003224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	3304      	adds	r3, #4
 800322a:	2b06      	cmp	r3, #6
 800322c:	d902      	bls.n	8003234 <NVIC_EncodePriority+0x30>
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3b03      	subs	r3, #3
 8003232:	e000      	b.n	8003236 <NVIC_EncodePriority+0x32>
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	f04f 32ff 	mov.w	r2, #4294967295
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43da      	mvns	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	401a      	ands	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800324c:	f04f 31ff 	mov.w	r1, #4294967295
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	fa01 f303 	lsl.w	r3, r1, r3
 8003256:	43d9      	mvns	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	4313      	orrs	r3, r2
         );
}
 800325e:	4618      	mov	r0, r3
 8003260:	3724      	adds	r7, #36	; 0x24
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800327c:	d301      	bcc.n	8003282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800327e:	2301      	movs	r3, #1
 8003280:	e00f      	b.n	80032a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <SysTick_Config+0x40>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	3b01      	subs	r3, #1
 8003288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328a:	210f      	movs	r1, #15
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f7ff ff8e 	bl	80031b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <SysTick_Config+0x40>)
 8003296:	2200      	movs	r2, #0
 8003298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329a:	4b04      	ldr	r3, [pc, #16]	; (80032ac <SysTick_Config+0x40>)
 800329c:	2207      	movs	r2, #7
 800329e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	e000e010 	.word	0xe000e010

080032b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff ff29 	bl	8003110 <__NVIC_SetPriorityGrouping>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032d8:	f7ff ff3e 	bl	8003158 <__NVIC_GetPriorityGrouping>
 80032dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	6978      	ldr	r0, [r7, #20]
 80032e4:	f7ff ff8e 	bl	8003204 <NVIC_EncodePriority>
 80032e8:	4602      	mov	r2, r0
 80032ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ee:	4611      	mov	r1, r2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff5d 	bl	80031b0 <__NVIC_SetPriority>
}
 80032f6:	bf00      	nop
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	4603      	mov	r3, r0
 8003306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff31 	bl	8003174 <__NVIC_EnableIRQ>
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ffa2 	bl	800326c <SysTick_Config>
 8003328:	4603      	mov	r3, r0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003334:	b480      	push	{r7}
 8003336:	b089      	sub	sp, #36	; 0x24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
 800334e:	e165      	b.n	800361c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003350:	2201      	movs	r2, #1
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	429a      	cmp	r2, r3
 800336a:	f040 8154 	bne.w	8003616 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d005      	beq.n	8003386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003382:	2b02      	cmp	r3, #2
 8003384:	d130      	bne.n	80033e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	2203      	movs	r2, #3
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033bc:	2201      	movs	r2, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f003 0201 	and.w	r2, r3, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d017      	beq.n	8003424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d123      	bne.n	8003478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	08da      	lsrs	r2, r3, #3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3208      	adds	r2, #8
 8003438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0307 	and.w	r3, r3, #7
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	220f      	movs	r2, #15
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	08da      	lsrs	r2, r3, #3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3208      	adds	r2, #8
 8003472:	69b9      	ldr	r1, [r7, #24]
 8003474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	2203      	movs	r2, #3
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4013      	ands	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f003 0203 	and.w	r2, r3, #3
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 80ae 	beq.w	8003616 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	4b5d      	ldr	r3, [pc, #372]	; (8003634 <HAL_GPIO_Init+0x300>)
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	4a5c      	ldr	r2, [pc, #368]	; (8003634 <HAL_GPIO_Init+0x300>)
 80034c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ca:	4b5a      	ldr	r3, [pc, #360]	; (8003634 <HAL_GPIO_Init+0x300>)
 80034cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034d6:	4a58      	ldr	r2, [pc, #352]	; (8003638 <HAL_GPIO_Init+0x304>)
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	089b      	lsrs	r3, r3, #2
 80034dc:	3302      	adds	r3, #2
 80034de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	220f      	movs	r2, #15
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a4f      	ldr	r2, [pc, #316]	; (800363c <HAL_GPIO_Init+0x308>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d025      	beq.n	800354e <HAL_GPIO_Init+0x21a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4e      	ldr	r2, [pc, #312]	; (8003640 <HAL_GPIO_Init+0x30c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d01f      	beq.n	800354a <HAL_GPIO_Init+0x216>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4d      	ldr	r2, [pc, #308]	; (8003644 <HAL_GPIO_Init+0x310>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d019      	beq.n	8003546 <HAL_GPIO_Init+0x212>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4c      	ldr	r2, [pc, #304]	; (8003648 <HAL_GPIO_Init+0x314>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d013      	beq.n	8003542 <HAL_GPIO_Init+0x20e>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4b      	ldr	r2, [pc, #300]	; (800364c <HAL_GPIO_Init+0x318>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d00d      	beq.n	800353e <HAL_GPIO_Init+0x20a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4a      	ldr	r2, [pc, #296]	; (8003650 <HAL_GPIO_Init+0x31c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <HAL_GPIO_Init+0x206>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a49      	ldr	r2, [pc, #292]	; (8003654 <HAL_GPIO_Init+0x320>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d101      	bne.n	8003536 <HAL_GPIO_Init+0x202>
 8003532:	2306      	movs	r3, #6
 8003534:	e00c      	b.n	8003550 <HAL_GPIO_Init+0x21c>
 8003536:	2307      	movs	r3, #7
 8003538:	e00a      	b.n	8003550 <HAL_GPIO_Init+0x21c>
 800353a:	2305      	movs	r3, #5
 800353c:	e008      	b.n	8003550 <HAL_GPIO_Init+0x21c>
 800353e:	2304      	movs	r3, #4
 8003540:	e006      	b.n	8003550 <HAL_GPIO_Init+0x21c>
 8003542:	2303      	movs	r3, #3
 8003544:	e004      	b.n	8003550 <HAL_GPIO_Init+0x21c>
 8003546:	2302      	movs	r3, #2
 8003548:	e002      	b.n	8003550 <HAL_GPIO_Init+0x21c>
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_GPIO_Init+0x21c>
 800354e:	2300      	movs	r3, #0
 8003550:	69fa      	ldr	r2, [r7, #28]
 8003552:	f002 0203 	and.w	r2, r2, #3
 8003556:	0092      	lsls	r2, r2, #2
 8003558:	4093      	lsls	r3, r2
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003560:	4935      	ldr	r1, [pc, #212]	; (8003638 <HAL_GPIO_Init+0x304>)
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	3302      	adds	r3, #2
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800356e:	4b3a      	ldr	r3, [pc, #232]	; (8003658 <HAL_GPIO_Init+0x324>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	43db      	mvns	r3, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4013      	ands	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003592:	4a31      	ldr	r2, [pc, #196]	; (8003658 <HAL_GPIO_Init+0x324>)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003598:	4b2f      	ldr	r3, [pc, #188]	; (8003658 <HAL_GPIO_Init+0x324>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035bc:	4a26      	ldr	r2, [pc, #152]	; (8003658 <HAL_GPIO_Init+0x324>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035c2:	4b25      	ldr	r3, [pc, #148]	; (8003658 <HAL_GPIO_Init+0x324>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	4013      	ands	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035e6:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_GPIO_Init+0x324>)
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ec:	4b1a      	ldr	r3, [pc, #104]	; (8003658 <HAL_GPIO_Init+0x324>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4013      	ands	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003610:	4a11      	ldr	r2, [pc, #68]	; (8003658 <HAL_GPIO_Init+0x324>)
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3301      	adds	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	2b0f      	cmp	r3, #15
 8003620:	f67f ae96 	bls.w	8003350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3724      	adds	r7, #36	; 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	40013800 	.word	0x40013800
 800363c:	40020000 	.word	0x40020000
 8003640:	40020400 	.word	0x40020400
 8003644:	40020800 	.word	0x40020800
 8003648:	40020c00 	.word	0x40020c00
 800364c:	40021000 	.word	0x40021000
 8003650:	40021400 	.word	0x40021400
 8003654:	40021800 	.word	0x40021800
 8003658:	40013c00 	.word	0x40013c00

0800365c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]
 8003668:	4613      	mov	r3, r2
 800366a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800366c:	787b      	ldrb	r3, [r7, #1]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003678:	e003      	b.n	8003682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	041a      	lsls	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	619a      	str	r2, [r3, #24]
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d006      	beq.n	80036b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036a6:	4a05      	ldr	r2, [pc, #20]	; (80036bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fd5a 	bl	8002168 <HAL_GPIO_EXTI_Callback>
  }
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40013c00 	.word	0x40013c00

080036c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e12b      	b.n	800392a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fe fdc0 	bl	800226c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	; 0x24
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003724:	f000 fa52 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8003728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a81      	ldr	r2, [pc, #516]	; (8003934 <HAL_I2C_Init+0x274>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d807      	bhi.n	8003744 <HAL_I2C_Init+0x84>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a80      	ldr	r2, [pc, #512]	; (8003938 <HAL_I2C_Init+0x278>)
 8003738:	4293      	cmp	r3, r2
 800373a:	bf94      	ite	ls
 800373c:	2301      	movls	r3, #1
 800373e:	2300      	movhi	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e006      	b.n	8003752 <HAL_I2C_Init+0x92>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a7d      	ldr	r2, [pc, #500]	; (800393c <HAL_I2C_Init+0x27c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	bf94      	ite	ls
 800374c:	2301      	movls	r3, #1
 800374e:	2300      	movhi	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0e7      	b.n	800392a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a78      	ldr	r2, [pc, #480]	; (8003940 <HAL_I2C_Init+0x280>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	0c9b      	lsrs	r3, r3, #18
 8003764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a6a      	ldr	r2, [pc, #424]	; (8003934 <HAL_I2C_Init+0x274>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d802      	bhi.n	8003794 <HAL_I2C_Init+0xd4>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3301      	adds	r3, #1
 8003792:	e009      	b.n	80037a8 <HAL_I2C_Init+0xe8>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	4a69      	ldr	r2, [pc, #420]	; (8003944 <HAL_I2C_Init+0x284>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	099b      	lsrs	r3, r3, #6
 80037a6:	3301      	adds	r3, #1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	495c      	ldr	r1, [pc, #368]	; (8003934 <HAL_I2C_Init+0x274>)
 80037c4:	428b      	cmp	r3, r1
 80037c6:	d819      	bhi.n	80037fc <HAL_I2C_Init+0x13c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1e59      	subs	r1, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d6:	1c59      	adds	r1, r3, #1
 80037d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037dc:	400b      	ands	r3, r1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_I2C_Init+0x138>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1e59      	subs	r1, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f6:	e051      	b.n	800389c <HAL_I2C_Init+0x1dc>
 80037f8:	2304      	movs	r3, #4
 80037fa:	e04f      	b.n	800389c <HAL_I2C_Init+0x1dc>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d111      	bne.n	8003828 <HAL_I2C_Init+0x168>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e58      	subs	r0, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	440b      	add	r3, r1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e012      	b.n	800384e <HAL_I2C_Init+0x18e>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e58      	subs	r0, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	0099      	lsls	r1, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Init+0x196>
 8003852:	2301      	movs	r3, #1
 8003854:	e022      	b.n	800389c <HAL_I2C_Init+0x1dc>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10e      	bne.n	800387c <HAL_I2C_Init+0x1bc>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1e58      	subs	r0, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	440b      	add	r3, r1
 800386c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387a:	e00f      	b.n	800389c <HAL_I2C_Init+0x1dc>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	0099      	lsls	r1, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	6809      	ldr	r1, [r1, #0]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6911      	ldr	r1, [r2, #16]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	4311      	orrs	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	430b      	orrs	r3, r1
 80038de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	000186a0 	.word	0x000186a0
 8003938:	001e847f 	.word	0x001e847f
 800393c:	003d08ff 	.word	0x003d08ff
 8003940:	431bde83 	.word	0x431bde83
 8003944:	10624dd3 	.word	0x10624dd3

08003948 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	603b      	str	r3, [r7, #0]
 8003956:	4b20      	ldr	r3, [pc, #128]	; (80039d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395a:	4a1f      	ldr	r2, [pc, #124]	; (80039d8 <HAL_PWREx_EnableOverDrive+0x90>)
 800395c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003960:	6413      	str	r3, [r2, #64]	; 0x40
 8003962:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800396e:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <HAL_PWREx_EnableOverDrive+0x94>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003974:	f7ff f92a 	bl	8002bcc <HAL_GetTick>
 8003978:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800397a:	e009      	b.n	8003990 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800397c:	f7ff f926 	bl	8002bcc <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800398a:	d901      	bls.n	8003990 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e01f      	b.n	80039d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003990:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399c:	d1ee      	bne.n	800397c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039a4:	f7ff f912 	bl	8002bcc <HAL_GetTick>
 80039a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039aa:	e009      	b.n	80039c0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039ac:	f7ff f90e 	bl	8002bcc <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ba:	d901      	bls.n	80039c0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e007      	b.n	80039d0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <HAL_PWREx_EnableOverDrive+0x98>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039cc:	d1ee      	bne.n	80039ac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3708      	adds	r7, #8
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	40023800 	.word	0x40023800
 80039dc:	420e0040 	.word	0x420e0040
 80039e0:	40007000 	.word	0x40007000
 80039e4:	420e0044 	.word	0x420e0044

080039e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0cc      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039fc:	4b68      	ldr	r3, [pc, #416]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 030f 	and.w	r3, r3, #15
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d90c      	bls.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0a:	4b65      	ldr	r3, [pc, #404]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b63      	ldr	r3, [pc, #396]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0b8      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d020      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a3c:	4b59      	ldr	r3, [pc, #356]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a58      	ldr	r2, [pc, #352]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d005      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a54:	4b53      	ldr	r3, [pc, #332]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	4a52      	ldr	r2, [pc, #328]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a60:	4b50      	ldr	r3, [pc, #320]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	494d      	ldr	r1, [pc, #308]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d044      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d119      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e07f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d003      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d107      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa6:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d109      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab6:	4b3b      	ldr	r3, [pc, #236]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e067      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac6:	4b37      	ldr	r3, [pc, #220]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 0203 	bic.w	r2, r3, #3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4934      	ldr	r1, [pc, #208]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad8:	f7ff f878 	bl	8002bcc <HAL_GetTick>
 8003adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	e00a      	b.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae0:	f7ff f874 	bl	8002bcc <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e04f      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af6:	4b2b      	ldr	r3, [pc, #172]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d1eb      	bne.n	8003ae0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d20c      	bcs.n	8003b30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b22      	ldr	r3, [pc, #136]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b20      	ldr	r3, [pc, #128]	; (8003ba0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e032      	b.n	8003b96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3c:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4916      	ldr	r1, [pc, #88]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	490e      	ldr	r1, [pc, #56]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b6e:	f000 f855 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003b72:	4602      	mov	r2, r0
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	091b      	lsrs	r3, r3, #4
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	490a      	ldr	r1, [pc, #40]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b80:	5ccb      	ldrb	r3, [r1, r3]
 8003b82:	fa22 f303 	lsr.w	r3, r2, r3
 8003b86:	4a09      	ldr	r2, [pc, #36]	; (8003bac <HAL_RCC_ClockConfig+0x1c4>)
 8003b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b8a:	4b09      	ldr	r3, [pc, #36]	; (8003bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe ffd8 	bl	8002b44 <HAL_InitTick>

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023c00 	.word	0x40023c00
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	08008e50 	.word	0x08008e50
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	20000004 	.word	0x20000004

08003bb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bba:	681b      	ldr	r3, [r3, #0]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000000 	.word	0x20000000

08003bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bd0:	f7ff fff0 	bl	8003bb4 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	0a9b      	lsrs	r3, r3, #10
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	; (8003bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	08008e60 	.word	0x08008e60

08003bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bf8:	f7ff ffdc 	bl	8003bb4 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	0b5b      	lsrs	r3, r3, #13
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4903      	ldr	r1, [pc, #12]	; (8003c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40023800 	.word	0x40023800
 8003c18:	08008e60 	.word	0x08008e60

08003c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c20:	b0ae      	sub	sp, #184	; 0xb8
 8003c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c42:	4bcb      	ldr	r3, [pc, #812]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b0c      	cmp	r3, #12
 8003c4c:	f200 8206 	bhi.w	800405c <HAL_RCC_GetSysClockFreq+0x440>
 8003c50:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	0800405d 	.word	0x0800405d
 8003c60:	0800405d 	.word	0x0800405d
 8003c64:	0800405d 	.word	0x0800405d
 8003c68:	08003c95 	.word	0x08003c95
 8003c6c:	0800405d 	.word	0x0800405d
 8003c70:	0800405d 	.word	0x0800405d
 8003c74:	0800405d 	.word	0x0800405d
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	0800405d 	.word	0x0800405d
 8003c80:	0800405d 	.word	0x0800405d
 8003c84:	0800405d 	.word	0x0800405d
 8003c88:	08003e8d 	.word	0x08003e8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c8c:	4bb9      	ldr	r3, [pc, #740]	; (8003f74 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003c92:	e1e7      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c94:	4bb8      	ldr	r3, [pc, #736]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c9a:	e1e3      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c9c:	4bb4      	ldr	r3, [pc, #720]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ca8:	4bb1      	ldr	r3, [pc, #708]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d071      	beq.n	8003d98 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb4:	4bae      	ldr	r3, [pc, #696]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	099b      	lsrs	r3, r3, #6
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003cc0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ccc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cda:	4622      	mov	r2, r4
 8003cdc:	462b      	mov	r3, r5
 8003cde:	f04f 0000 	mov.w	r0, #0
 8003ce2:	f04f 0100 	mov.w	r1, #0
 8003ce6:	0159      	lsls	r1, r3, #5
 8003ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cec:	0150      	lsls	r0, r2, #5
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	1a51      	subs	r1, r2, r1
 8003cf6:	6439      	str	r1, [r7, #64]	; 0x40
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003cfe:	647b      	str	r3, [r7, #68]	; 0x44
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003d0c:	4649      	mov	r1, r9
 8003d0e:	018b      	lsls	r3, r1, #6
 8003d10:	4641      	mov	r1, r8
 8003d12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d16:	4641      	mov	r1, r8
 8003d18:	018a      	lsls	r2, r1, #6
 8003d1a:	4641      	mov	r1, r8
 8003d1c:	1a51      	subs	r1, r2, r1
 8003d1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d20:	4649      	mov	r1, r9
 8003d22:	eb63 0301 	sbc.w	r3, r3, r1
 8003d26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003d34:	4649      	mov	r1, r9
 8003d36:	00cb      	lsls	r3, r1, #3
 8003d38:	4641      	mov	r1, r8
 8003d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d3e:	4641      	mov	r1, r8
 8003d40:	00ca      	lsls	r2, r1, #3
 8003d42:	4610      	mov	r0, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	4603      	mov	r3, r0
 8003d48:	4622      	mov	r2, r4
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4e:	462b      	mov	r3, r5
 8003d50:	460a      	mov	r2, r1
 8003d52:	eb42 0303 	adc.w	r3, r2, r3
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d64:	4629      	mov	r1, r5
 8003d66:	024b      	lsls	r3, r1, #9
 8003d68:	4621      	mov	r1, r4
 8003d6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d6e:	4621      	mov	r1, r4
 8003d70:	024a      	lsls	r2, r1, #9
 8003d72:	4610      	mov	r0, r2
 8003d74:	4619      	mov	r1, r3
 8003d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003d84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003d88:	f7fc ff2e 	bl	8000be8 <__aeabi_uldivmod>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4613      	mov	r3, r2
 8003d92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d96:	e067      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d98:	4b75      	ldr	r3, [pc, #468]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	099b      	lsrs	r3, r3, #6
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003da4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003db2:	2300      	movs	r3, #0
 8003db4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003db6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003dba:	4622      	mov	r2, r4
 8003dbc:	462b      	mov	r3, r5
 8003dbe:	f04f 0000 	mov.w	r0, #0
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	0159      	lsls	r1, r3, #5
 8003dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dcc:	0150      	lsls	r0, r2, #5
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	1a51      	subs	r1, r2, r1
 8003dd6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003dd8:	4629      	mov	r1, r5
 8003dda:	eb63 0301 	sbc.w	r3, r3, r1
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003dec:	4649      	mov	r1, r9
 8003dee:	018b      	lsls	r3, r1, #6
 8003df0:	4641      	mov	r1, r8
 8003df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003df6:	4641      	mov	r1, r8
 8003df8:	018a      	lsls	r2, r1, #6
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e00:	4649      	mov	r1, r9
 8003e02:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	f04f 0300 	mov.w	r3, #0
 8003e0e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e12:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e1a:	4692      	mov	sl, r2
 8003e1c:	469b      	mov	fp, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	eb1a 0303 	adds.w	r3, sl, r3
 8003e24:	623b      	str	r3, [r7, #32]
 8003e26:	462b      	mov	r3, r5
 8003e28:	eb4b 0303 	adc.w	r3, fp, r3
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	f04f 0300 	mov.w	r3, #0
 8003e36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	028b      	lsls	r3, r1, #10
 8003e3e:	4621      	mov	r1, r4
 8003e40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e44:	4621      	mov	r1, r4
 8003e46:	028a      	lsls	r2, r1, #10
 8003e48:	4610      	mov	r0, r2
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e50:	2200      	movs	r2, #0
 8003e52:	673b      	str	r3, [r7, #112]	; 0x70
 8003e54:	677a      	str	r2, [r7, #116]	; 0x74
 8003e56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003e5a:	f7fc fec5 	bl	8000be8 <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4613      	mov	r3, r2
 8003e64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e68:	4b41      	ldr	r3, [pc, #260]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	0c1b      	lsrs	r3, r3, #16
 8003e6e:	f003 0303 	and.w	r3, r3, #3
 8003e72:	3301      	adds	r3, #1
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003e7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e8a:	e0eb      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e8c:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e98:	4b35      	ldr	r3, [pc, #212]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d06b      	beq.n	8003f7c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea4:	4b32      	ldr	r3, [pc, #200]	; (8003f70 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	099b      	lsrs	r3, r3, #6
 8003eaa:	2200      	movs	r2, #0
 8003eac:	66bb      	str	r3, [r7, #104]	; 0x68
 8003eae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb6:	663b      	str	r3, [r7, #96]	; 0x60
 8003eb8:	2300      	movs	r3, #0
 8003eba:	667b      	str	r3, [r7, #100]	; 0x64
 8003ebc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	462b      	mov	r3, r5
 8003ec4:	f04f 0000 	mov.w	r0, #0
 8003ec8:	f04f 0100 	mov.w	r1, #0
 8003ecc:	0159      	lsls	r1, r3, #5
 8003ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ed2:	0150      	lsls	r0, r2, #5
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4621      	mov	r1, r4
 8003eda:	1a51      	subs	r1, r2, r1
 8003edc:	61b9      	str	r1, [r7, #24]
 8003ede:	4629      	mov	r1, r5
 8003ee0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ee4:	61fb      	str	r3, [r7, #28]
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003ef2:	4659      	mov	r1, fp
 8003ef4:	018b      	lsls	r3, r1, #6
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003efc:	4651      	mov	r1, sl
 8003efe:	018a      	lsls	r2, r1, #6
 8003f00:	4651      	mov	r1, sl
 8003f02:	ebb2 0801 	subs.w	r8, r2, r1
 8003f06:	4659      	mov	r1, fp
 8003f08:	eb63 0901 	sbc.w	r9, r3, r1
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f20:	4690      	mov	r8, r2
 8003f22:	4699      	mov	r9, r3
 8003f24:	4623      	mov	r3, r4
 8003f26:	eb18 0303 	adds.w	r3, r8, r3
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	462b      	mov	r3, r5
 8003f2e:	eb49 0303 	adc.w	r3, r9, r3
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003f40:	4629      	mov	r1, r5
 8003f42:	024b      	lsls	r3, r1, #9
 8003f44:	4621      	mov	r1, r4
 8003f46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	024a      	lsls	r2, r1, #9
 8003f4e:	4610      	mov	r0, r2
 8003f50:	4619      	mov	r1, r3
 8003f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f56:	2200      	movs	r2, #0
 8003f58:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f5a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003f5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f60:	f7fc fe42 	bl	8000be8 <__aeabi_uldivmod>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4613      	mov	r3, r2
 8003f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f6e:	e065      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x420>
 8003f70:	40023800 	.word	0x40023800
 8003f74:	00f42400 	.word	0x00f42400
 8003f78:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f7c:	4b3d      	ldr	r3, [pc, #244]	; (8004074 <HAL_RCC_GetSysClockFreq+0x458>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	099b      	lsrs	r3, r3, #6
 8003f82:	2200      	movs	r2, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	4611      	mov	r1, r2
 8003f88:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8003f8e:	2300      	movs	r3, #0
 8003f90:	657b      	str	r3, [r7, #84]	; 0x54
 8003f92:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003f96:	4642      	mov	r2, r8
 8003f98:	464b      	mov	r3, r9
 8003f9a:	f04f 0000 	mov.w	r0, #0
 8003f9e:	f04f 0100 	mov.w	r1, #0
 8003fa2:	0159      	lsls	r1, r3, #5
 8003fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa8:	0150      	lsls	r0, r2, #5
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4641      	mov	r1, r8
 8003fb0:	1a51      	subs	r1, r2, r1
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003fc8:	4659      	mov	r1, fp
 8003fca:	018b      	lsls	r3, r1, #6
 8003fcc:	4651      	mov	r1, sl
 8003fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	018a      	lsls	r2, r1, #6
 8003fd6:	4651      	mov	r1, sl
 8003fd8:	1a54      	subs	r4, r2, r1
 8003fda:	4659      	mov	r1, fp
 8003fdc:	eb63 0501 	sbc.w	r5, r3, r1
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	00eb      	lsls	r3, r5, #3
 8003fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fee:	00e2      	lsls	r2, r4, #3
 8003ff0:	4614      	mov	r4, r2
 8003ff2:	461d      	mov	r5, r3
 8003ff4:	4643      	mov	r3, r8
 8003ff6:	18e3      	adds	r3, r4, r3
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	464b      	mov	r3, r9
 8003ffc:	eb45 0303 	adc.w	r3, r5, r3
 8004000:	607b      	str	r3, [r7, #4]
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800400e:	4629      	mov	r1, r5
 8004010:	028b      	lsls	r3, r1, #10
 8004012:	4621      	mov	r1, r4
 8004014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004018:	4621      	mov	r1, r4
 800401a:	028a      	lsls	r2, r1, #10
 800401c:	4610      	mov	r0, r2
 800401e:	4619      	mov	r1, r3
 8004020:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004024:	2200      	movs	r2, #0
 8004026:	64bb      	str	r3, [r7, #72]	; 0x48
 8004028:	64fa      	str	r2, [r7, #76]	; 0x4c
 800402a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800402e:	f7fc fddb 	bl	8000be8 <__aeabi_uldivmod>
 8004032:	4602      	mov	r2, r0
 8004034:	460b      	mov	r3, r1
 8004036:	4613      	mov	r3, r2
 8004038:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800403c:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <HAL_RCC_GetSysClockFreq+0x458>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	0f1b      	lsrs	r3, r3, #28
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800404a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800404e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004052:	fbb2 f3f3 	udiv	r3, r2, r3
 8004056:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800405a:	e003      	b.n	8004064 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_RCC_GetSysClockFreq+0x45c>)
 800405e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004062:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004064:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004068:	4618      	mov	r0, r3
 800406a:	37b8      	adds	r7, #184	; 0xb8
 800406c:	46bd      	mov	sp, r7
 800406e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800
 8004078:	00f42400 	.word	0x00f42400

0800407c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e28d      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8083 	beq.w	80041a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800409c:	4b94      	ldr	r3, [pc, #592]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 030c 	and.w	r3, r3, #12
 80040a4:	2b04      	cmp	r3, #4
 80040a6:	d019      	beq.n	80040dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040a8:	4b91      	ldr	r3, [pc, #580]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d106      	bne.n	80040c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040b4:	4b8e      	ldr	r3, [pc, #568]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c0:	d00c      	beq.n	80040dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c2:	4b8b      	ldr	r3, [pc, #556]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80040ca:	2b0c      	cmp	r3, #12
 80040cc:	d112      	bne.n	80040f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ce:	4b88      	ldr	r3, [pc, #544]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040da:	d10b      	bne.n	80040f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040dc:	4b84      	ldr	r3, [pc, #528]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d05b      	beq.n	80041a0 <HAL_RCC_OscConfig+0x124>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d157      	bne.n	80041a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e25a      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fc:	d106      	bne.n	800410c <HAL_RCC_OscConfig+0x90>
 80040fe:	4b7c      	ldr	r3, [pc, #496]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a7b      	ldr	r2, [pc, #492]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	e01d      	b.n	8004148 <HAL_RCC_OscConfig+0xcc>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004114:	d10c      	bne.n	8004130 <HAL_RCC_OscConfig+0xb4>
 8004116:	4b76      	ldr	r3, [pc, #472]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a75      	ldr	r2, [pc, #468]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 800411c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	4b73      	ldr	r3, [pc, #460]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a72      	ldr	r2, [pc, #456]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e00b      	b.n	8004148 <HAL_RCC_OscConfig+0xcc>
 8004130:	4b6f      	ldr	r3, [pc, #444]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a6e      	ldr	r2, [pc, #440]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	4b6c      	ldr	r3, [pc, #432]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a6b      	ldr	r2, [pc, #428]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fe fd3c 	bl	8002bcc <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004158:	f7fe fd38 	bl	8002bcc <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e21f      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b61      	ldr	r3, [pc, #388]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0xdc>
 8004176:	e014      	b.n	80041a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fe fd28 	bl	8002bcc <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004180:	f7fe fd24 	bl	8002bcc <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e20b      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004192:	4b57      	ldr	r3, [pc, #348]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x104>
 800419e:	e000      	b.n	80041a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d06f      	beq.n	800428e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041ae:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d017      	beq.n	80041ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041ba:	4b4d      	ldr	r3, [pc, #308]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d105      	bne.n	80041d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041c6:	4b4a      	ldr	r3, [pc, #296]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d2:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80041da:	2b0c      	cmp	r3, #12
 80041dc:	d11c      	bne.n	8004218 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041de:	4b44      	ldr	r3, [pc, #272]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d116      	bne.n	8004218 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ea:	4b41      	ldr	r3, [pc, #260]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_RCC_OscConfig+0x186>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d001      	beq.n	8004202 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e1d3      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004202:	4b3b      	ldr	r3, [pc, #236]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	4937      	ldr	r1, [pc, #220]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004212:	4313      	orrs	r3, r2
 8004214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004216:	e03a      	b.n	800428e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d020      	beq.n	8004262 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004220:	4b34      	ldr	r3, [pc, #208]	; (80042f4 <HAL_RCC_OscConfig+0x278>)
 8004222:	2201      	movs	r2, #1
 8004224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004226:	f7fe fcd1 	bl	8002bcc <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800422e:	f7fe fccd 	bl	8002bcc <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e1b4      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004240:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0302 	and.w	r3, r3, #2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800424c:	4b28      	ldr	r3, [pc, #160]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4925      	ldr	r1, [pc, #148]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 800425c:	4313      	orrs	r3, r2
 800425e:	600b      	str	r3, [r1, #0]
 8004260:	e015      	b.n	800428e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <HAL_RCC_OscConfig+0x278>)
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fe fcb0 	bl	8002bcc <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004270:	f7fe fcac 	bl	8002bcc <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e193      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004282:	4b1b      	ldr	r3, [pc, #108]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d036      	beq.n	8004308 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d016      	beq.n	80042d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042a2:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a8:	f7fe fc90 	bl	8002bcc <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042b0:	f7fe fc8c 	bl	8002bcc <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e173      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042c2:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_OscConfig+0x274>)
 80042c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0x234>
 80042ce:	e01b      	b.n	8004308 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d0:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <HAL_RCC_OscConfig+0x27c>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fe fc79 	bl	8002bcc <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042dc:	e00e      	b.n	80042fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042de:	f7fe fc75 	bl	8002bcc <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d907      	bls.n	80042fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e15c      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
 80042f0:	40023800 	.word	0x40023800
 80042f4:	42470000 	.word	0x42470000
 80042f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042fc:	4b8a      	ldr	r3, [pc, #552]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 80042fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ea      	bne.n	80042de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8097 	beq.w	8004444 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004316:	2300      	movs	r3, #0
 8004318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800431a:	4b83      	ldr	r3, [pc, #524]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10f      	bne.n	8004346 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	4b7f      	ldr	r3, [pc, #508]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	4a7e      	ldr	r2, [pc, #504]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 8004330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004334:	6413      	str	r3, [r2, #64]	; 0x40
 8004336:	4b7c      	ldr	r3, [pc, #496]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433e:	60bb      	str	r3, [r7, #8]
 8004340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004342:	2301      	movs	r3, #1
 8004344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004346:	4b79      	ldr	r3, [pc, #484]	; (800452c <HAL_RCC_OscConfig+0x4b0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	2b00      	cmp	r3, #0
 8004350:	d118      	bne.n	8004384 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004352:	4b76      	ldr	r3, [pc, #472]	; (800452c <HAL_RCC_OscConfig+0x4b0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a75      	ldr	r2, [pc, #468]	; (800452c <HAL_RCC_OscConfig+0x4b0>)
 8004358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800435e:	f7fe fc35 	bl	8002bcc <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004366:	f7fe fc31 	bl	8002bcc <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e118      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004378:	4b6c      	ldr	r3, [pc, #432]	; (800452c <HAL_RCC_OscConfig+0x4b0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f0      	beq.n	8004366 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d106      	bne.n	800439a <HAL_RCC_OscConfig+0x31e>
 800438c:	4b66      	ldr	r3, [pc, #408]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	4a65      	ldr	r2, [pc, #404]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6713      	str	r3, [r2, #112]	; 0x70
 8004398:	e01c      	b.n	80043d4 <HAL_RCC_OscConfig+0x358>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	2b05      	cmp	r3, #5
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0x340>
 80043a2:	4b61      	ldr	r3, [pc, #388]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	4a60      	ldr	r2, [pc, #384]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 80043a8:	f043 0304 	orr.w	r3, r3, #4
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70
 80043ae:	4b5e      	ldr	r3, [pc, #376]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 80043b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b2:	4a5d      	ldr	r2, [pc, #372]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 80043b4:	f043 0301 	orr.w	r3, r3, #1
 80043b8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ba:	e00b      	b.n	80043d4 <HAL_RCC_OscConfig+0x358>
 80043bc:	4b5a      	ldr	r3, [pc, #360]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	4a59      	ldr	r2, [pc, #356]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 80043c2:	f023 0301 	bic.w	r3, r3, #1
 80043c6:	6713      	str	r3, [r2, #112]	; 0x70
 80043c8:	4b57      	ldr	r3, [pc, #348]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	4a56      	ldr	r2, [pc, #344]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 80043ce:	f023 0304 	bic.w	r3, r3, #4
 80043d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d015      	beq.n	8004408 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043dc:	f7fe fbf6 	bl	8002bcc <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e4:	f7fe fbf2 	bl	8002bcc <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e0d7      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fa:	4b4b      	ldr	r3, [pc, #300]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0ee      	beq.n	80043e4 <HAL_RCC_OscConfig+0x368>
 8004406:	e014      	b.n	8004432 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004408:	f7fe fbe0 	bl	8002bcc <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440e:	e00a      	b.n	8004426 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004410:	f7fe fbdc 	bl	8002bcc <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f241 3288 	movw	r2, #5000	; 0x1388
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e0c1      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004426:	4b40      	ldr	r3, [pc, #256]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 8004428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1ee      	bne.n	8004410 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d105      	bne.n	8004444 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004438:	4b3b      	ldr	r3, [pc, #236]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	4a3a      	ldr	r2, [pc, #232]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 800443e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 80ad 	beq.w	80045a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800444e:	4b36      	ldr	r3, [pc, #216]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b08      	cmp	r3, #8
 8004458:	d060      	beq.n	800451c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d145      	bne.n	80044ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004462:	4b33      	ldr	r3, [pc, #204]	; (8004530 <HAL_RCC_OscConfig+0x4b4>)
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fe fbb0 	bl	8002bcc <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004470:	f7fe fbac 	bl	8002bcc <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e093      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004482:	4b29      	ldr	r3, [pc, #164]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1f0      	bne.n	8004470 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69da      	ldr	r2, [r3, #28]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449c:	019b      	lsls	r3, r3, #6
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	085b      	lsrs	r3, r3, #1
 80044a6:	3b01      	subs	r3, #1
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	061b      	lsls	r3, r3, #24
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	071b      	lsls	r3, r3, #28
 80044ba:	491b      	ldr	r1, [pc, #108]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c0:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <HAL_RCC_OscConfig+0x4b4>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c6:	f7fe fb81 	bl	8002bcc <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ce:	f7fe fb7d 	bl	8002bcc <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e064      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e0:	4b11      	ldr	r3, [pc, #68]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x452>
 80044ec:	e05c      	b.n	80045a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b10      	ldr	r3, [pc, #64]	; (8004530 <HAL_RCC_OscConfig+0x4b4>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fe fb6a 	bl	8002bcc <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fc:	f7fe fb66 	bl	8002bcc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e04d      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <HAL_RCC_OscConfig+0x4ac>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x480>
 800451a:	e045      	b.n	80045a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d107      	bne.n	8004534 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e040      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
 8004528:	40023800 	.word	0x40023800
 800452c:	40007000 	.word	0x40007000
 8004530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004534:	4b1f      	ldr	r3, [pc, #124]	; (80045b4 <HAL_RCC_OscConfig+0x538>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d030      	beq.n	80045a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d129      	bne.n	80045a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d122      	bne.n	80045a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800456a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800456c:	4293      	cmp	r3, r2
 800456e:	d119      	bne.n	80045a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	085b      	lsrs	r3, r3, #1
 800457c:	3b01      	subs	r3, #1
 800457e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d10f      	bne.n	80045a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d107      	bne.n	80045a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	40023800 	.word	0x40023800

080045b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e07b      	b.n	80046c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d108      	bne.n	80045e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045da:	d009      	beq.n	80045f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	61da      	str	r2, [r3, #28]
 80045e2:	e005      	b.n	80045f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d106      	bne.n	8004610 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fd ff04 	bl	8002418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004626:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004660:	431a      	orrs	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004674:	ea42 0103 	orr.w	r1, r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	f003 0104 	and.w	r1, r3, #4
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004696:	f003 0210 	and.w	r2, r3, #16
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b088      	sub	sp, #32
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	603b      	str	r3, [r7, #0]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <HAL_SPI_Transmit+0x22>
 80046e8:	2302      	movs	r3, #2
 80046ea:	e126      	b.n	800493a <HAL_SPI_Transmit+0x270>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046f4:	f7fe fa6a 	bl	8002bcc <HAL_GetTick>
 80046f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b01      	cmp	r3, #1
 8004708:	d002      	beq.n	8004710 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800470a:	2302      	movs	r3, #2
 800470c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800470e:	e10b      	b.n	8004928 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d002      	beq.n	800471c <HAL_SPI_Transmit+0x52>
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d102      	bne.n	8004722 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004720:	e102      	b.n	8004928 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2203      	movs	r2, #3
 8004726:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	88fa      	ldrh	r2, [r7, #6]
 800473a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	88fa      	ldrh	r2, [r7, #6]
 8004740:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004768:	d10f      	bne.n	800478a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004778:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004788:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	d007      	beq.n	80047a8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b0:	d14b      	bne.n	800484a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_SPI_Transmit+0xf6>
 80047ba:	8afb      	ldrh	r3, [r7, #22]
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d13e      	bne.n	800483e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	881a      	ldrh	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	1c9a      	adds	r2, r3, #2
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047e4:	e02b      	b.n	800483e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d112      	bne.n	800481a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	881a      	ldrh	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004804:	1c9a      	adds	r2, r3, #2
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800480e:	b29b      	uxth	r3, r3
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	86da      	strh	r2, [r3, #54]	; 0x36
 8004818:	e011      	b.n	800483e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800481a:	f7fe f9d7 	bl	8002bcc <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d803      	bhi.n	8004832 <HAL_SPI_Transmit+0x168>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d102      	bne.n	8004838 <HAL_SPI_Transmit+0x16e>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d102      	bne.n	800483e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800483c:	e074      	b.n	8004928 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1ce      	bne.n	80047e6 <HAL_SPI_Transmit+0x11c>
 8004848:	e04c      	b.n	80048e4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HAL_SPI_Transmit+0x18e>
 8004852:	8afb      	ldrh	r3, [r7, #22]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d140      	bne.n	80048da <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	7812      	ldrb	r2, [r2, #0]
 8004864:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800487e:	e02c      	b.n	80048da <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b02      	cmp	r3, #2
 800488c:	d113      	bne.n	80048b6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	330c      	adds	r3, #12
 8004898:	7812      	ldrb	r2, [r2, #0]
 800489a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	86da      	strh	r2, [r3, #54]	; 0x36
 80048b4:	e011      	b.n	80048da <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b6:	f7fe f989 	bl	8002bcc <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d803      	bhi.n	80048ce <HAL_SPI_Transmit+0x204>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048cc:	d102      	bne.n	80048d4 <HAL_SPI_Transmit+0x20a>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048d8:	e026      	b.n	8004928 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048de:	b29b      	uxth	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1cd      	bne.n	8004880 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	6839      	ldr	r1, [r7, #0]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fa55 	bl	8004d98 <SPI_EndRxTxTransaction>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e000      	b.n	8004928 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004926:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004938:	7ffb      	ldrb	r3, [r7, #31]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3720      	adds	r7, #32
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b08c      	sub	sp, #48	; 0x30
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
 800494e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004950:	2301      	movs	r3, #1
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_SPI_TransmitReceive+0x26>
 8004964:	2302      	movs	r3, #2
 8004966:	e18a      	b.n	8004c7e <HAL_SPI_TransmitReceive+0x33c>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004970:	f7fe f92c 	bl	8002bcc <HAL_GetTick>
 8004974:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800497c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004986:	887b      	ldrh	r3, [r7, #2]
 8004988:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800498a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800498e:	2b01      	cmp	r3, #1
 8004990:	d00f      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x70>
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004998:	d107      	bne.n	80049aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d103      	bne.n	80049aa <HAL_SPI_TransmitReceive+0x68>
 80049a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049a6:	2b04      	cmp	r3, #4
 80049a8:	d003      	beq.n	80049b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049aa:	2302      	movs	r3, #2
 80049ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049b0:	e15b      	b.n	8004c6a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_SPI_TransmitReceive+0x82>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_SPI_TransmitReceive+0x82>
 80049be:	887b      	ldrh	r3, [r7, #2]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049ca:	e14e      	b.n	8004c6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d003      	beq.n	80049e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2205      	movs	r2, #5
 80049dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2200      	movs	r2, #0
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	887a      	ldrh	r2, [r7, #2]
 80049f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	887a      	ldrh	r2, [r7, #2]
 80049f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	887a      	ldrh	r2, [r7, #2]
 8004a02:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d007      	beq.n	8004a34 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a3c:	d178      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d002      	beq.n	8004a4c <HAL_SPI_TransmitReceive+0x10a>
 8004a46:	8b7b      	ldrh	r3, [r7, #26]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d166      	bne.n	8004b1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a50:	881a      	ldrh	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5c:	1c9a      	adds	r2, r3, #2
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a70:	e053      	b.n	8004b1a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d11b      	bne.n	8004ab8 <HAL_SPI_TransmitReceive+0x176>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d016      	beq.n	8004ab8 <HAL_SPI_TransmitReceive+0x176>
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d113      	bne.n	8004ab8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	881a      	ldrh	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	1c9a      	adds	r2, r3, #2
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d119      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x1b8>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d014      	beq.n	8004afa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ada:	b292      	uxth	r2, r2
 8004adc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	1c9a      	adds	r2, r3, #2
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	3b01      	subs	r3, #1
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004af6:	2301      	movs	r3, #1
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004afa:	f7fe f867 	bl	8002bcc <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d807      	bhi.n	8004b1a <HAL_SPI_TransmitReceive+0x1d8>
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d003      	beq.n	8004b1a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b18:	e0a7      	b.n	8004c6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1a6      	bne.n	8004a72 <HAL_SPI_TransmitReceive+0x130>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1a1      	bne.n	8004a72 <HAL_SPI_TransmitReceive+0x130>
 8004b2e:	e07c      	b.n	8004c2a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_SPI_TransmitReceive+0x1fc>
 8004b38:	8b7b      	ldrh	r3, [r7, #26]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d16b      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	7812      	ldrb	r2, [r2, #0]
 8004b4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b64:	e057      	b.n	8004c16 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d11c      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x26c>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d017      	beq.n	8004bae <HAL_SPI_TransmitReceive+0x26c>
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d114      	bne.n	8004bae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	7812      	ldrb	r2, [r2, #0]
 8004b90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d119      	bne.n	8004bf0 <HAL_SPI_TransmitReceive+0x2ae>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d014      	beq.n	8004bf0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bec:	2301      	movs	r3, #1
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004bf0:	f7fd ffec 	bl	8002bcc <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d803      	bhi.n	8004c08 <HAL_SPI_TransmitReceive+0x2c6>
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c06:	d102      	bne.n	8004c0e <HAL_SPI_TransmitReceive+0x2cc>
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d103      	bne.n	8004c16 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c14:	e029      	b.n	8004c6a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1a2      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x224>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d19d      	bne.n	8004b66 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f8b2 	bl	8004d98 <SPI_EndRxTxTransaction>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d006      	beq.n	8004c48 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c46:	e010      	b.n	8004c6a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10b      	bne.n	8004c68 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	e000      	b.n	8004c6a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004c68:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3730      	adds	r7, #48	; 0x30
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	4613      	mov	r3, r2
 8004c96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c98:	f7fd ff98 	bl	8002bcc <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ca8:	f7fd ff90 	bl	8002bcc <HAL_GetTick>
 8004cac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cae:	4b39      	ldr	r3, [pc, #228]	; (8004d94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	015b      	lsls	r3, r3, #5
 8004cb4:	0d1b      	lsrs	r3, r3, #20
 8004cb6:	69fa      	ldr	r2, [r7, #28]
 8004cb8:	fb02 f303 	mul.w	r3, r2, r3
 8004cbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cbe:	e054      	b.n	8004d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc6:	d050      	beq.n	8004d6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004cc8:	f7fd ff80 	bl	8002bcc <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	69fa      	ldr	r2, [r7, #28]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d902      	bls.n	8004cde <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d13d      	bne.n	8004d5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cf6:	d111      	bne.n	8004d1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d00:	d004      	beq.n	8004d0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0a:	d107      	bne.n	8004d1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d24:	d10f      	bne.n	8004d46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e017      	b.n	8004d8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	4013      	ands	r3, r2
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	79fb      	ldrb	r3, [r7, #7]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d19b      	bne.n	8004cc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000000 	.word	0x20000000

08004d98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004da4:	4b1b      	ldr	r3, [pc, #108]	; (8004e14 <SPI_EndRxTxTransaction+0x7c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1b      	ldr	r2, [pc, #108]	; (8004e18 <SPI_EndRxTxTransaction+0x80>)
 8004daa:	fba2 2303 	umull	r2, r3, r2, r3
 8004dae:	0d5b      	lsrs	r3, r3, #21
 8004db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004db4:	fb02 f303 	mul.w	r3, r2, r3
 8004db8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc2:	d112      	bne.n	8004dea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2180      	movs	r1, #128	; 0x80
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f7ff ff5a 	bl	8004c88 <SPI_WaitFlagStateUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e00f      	b.n	8004e0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e00:	2b80      	cmp	r3, #128	; 0x80
 8004e02:	d0f2      	beq.n	8004dea <SPI_EndRxTxTransaction+0x52>
 8004e04:	e000      	b.n	8004e08 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e06:	bf00      	nop
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000000 	.word	0x20000000
 8004e18:	165e9f81 	.word	0x165e9f81

08004e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e041      	b.n	8004eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fd fca0 	bl	8002788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2202      	movs	r2, #2
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	f000 f9e4 	bl	8005228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e041      	b.n	8004f50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d106      	bne.n	8004ee6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fd fc03 	bl	80026ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	4610      	mov	r0, r2
 8004efa:	f000 f995 	bl	8005228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e097      	b.n	800509c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d106      	bne.n	8004f86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7fd fb4b 	bl	800261c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f9c:	f023 0307 	bic.w	r3, r3, #7
 8004fa0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4619      	mov	r1, r3
 8004fac:	4610      	mov	r0, r2
 8004fae:	f000 f93b 	bl	8005228 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	021b      	lsls	r3, r3, #8
 8004fea:	4313      	orrs	r3, r2
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004ff8:	f023 030c 	bic.w	r3, r3, #12
 8004ffc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005004:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005008:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	4313      	orrs	r3, r2
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	011a      	lsls	r2, r3, #4
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	031b      	lsls	r3, r3, #12
 8005028:	4313      	orrs	r3, r2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800503e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	4313      	orrs	r3, r2
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3718      	adds	r7, #24
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050be:	2302      	movs	r3, #2
 80050c0:	e0ae      	b.n	8005220 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b0c      	cmp	r3, #12
 80050ce:	f200 809f 	bhi.w	8005210 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80050d2:	a201      	add	r2, pc, #4	; (adr r2, 80050d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80050d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d8:	0800510d 	.word	0x0800510d
 80050dc:	08005211 	.word	0x08005211
 80050e0:	08005211 	.word	0x08005211
 80050e4:	08005211 	.word	0x08005211
 80050e8:	0800514d 	.word	0x0800514d
 80050ec:	08005211 	.word	0x08005211
 80050f0:	08005211 	.word	0x08005211
 80050f4:	08005211 	.word	0x08005211
 80050f8:	0800518f 	.word	0x0800518f
 80050fc:	08005211 	.word	0x08005211
 8005100:	08005211 	.word	0x08005211
 8005104:	08005211 	.word	0x08005211
 8005108:	080051cf 	.word	0x080051cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 f928 	bl	8005368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699a      	ldr	r2, [r3, #24]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0208 	orr.w	r2, r2, #8
 8005126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0204 	bic.w	r2, r2, #4
 8005136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6999      	ldr	r1, [r3, #24]
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	619a      	str	r2, [r3, #24]
      break;
 800514a:	e064      	b.n	8005216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f978 	bl	8005448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6999      	ldr	r1, [r3, #24]
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	021a      	lsls	r2, r3, #8
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	619a      	str	r2, [r3, #24]
      break;
 800518c:	e043      	b.n	8005216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68b9      	ldr	r1, [r7, #8]
 8005194:	4618      	mov	r0, r3
 8005196:	f000 f9cd 	bl	8005534 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	69da      	ldr	r2, [r3, #28]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0208 	orr.w	r2, r2, #8
 80051a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0204 	bic.w	r2, r2, #4
 80051b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69d9      	ldr	r1, [r3, #28]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	691a      	ldr	r2, [r3, #16]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	61da      	str	r2, [r3, #28]
      break;
 80051cc:	e023      	b.n	8005216 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 fa21 	bl	800561c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69da      	ldr	r2, [r3, #28]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69d9      	ldr	r1, [r3, #28]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	021a      	lsls	r2, r3, #8
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	61da      	str	r2, [r3, #28]
      break;
 800520e:	e002      	b.n	8005216 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	75fb      	strb	r3, [r7, #23]
      break;
 8005214:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800521e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a40      	ldr	r2, [pc, #256]	; (800533c <TIM_Base_SetConfig+0x114>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d00f      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a3d      	ldr	r2, [pc, #244]	; (8005340 <TIM_Base_SetConfig+0x118>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00b      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a3c      	ldr	r2, [pc, #240]	; (8005344 <TIM_Base_SetConfig+0x11c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d007      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a3b      	ldr	r2, [pc, #236]	; (8005348 <TIM_Base_SetConfig+0x120>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a3a      	ldr	r2, [pc, #232]	; (800534c <TIM_Base_SetConfig+0x124>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d108      	bne.n	800527a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2f      	ldr	r2, [pc, #188]	; (800533c <TIM_Base_SetConfig+0x114>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d02b      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005288:	d027      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a2c      	ldr	r2, [pc, #176]	; (8005340 <TIM_Base_SetConfig+0x118>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d023      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a2b      	ldr	r2, [pc, #172]	; (8005344 <TIM_Base_SetConfig+0x11c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d01f      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <TIM_Base_SetConfig+0x120>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d01b      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a29      	ldr	r2, [pc, #164]	; (800534c <TIM_Base_SetConfig+0x124>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d017      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a28      	ldr	r2, [pc, #160]	; (8005350 <TIM_Base_SetConfig+0x128>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d013      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a27      	ldr	r2, [pc, #156]	; (8005354 <TIM_Base_SetConfig+0x12c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00f      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a26      	ldr	r2, [pc, #152]	; (8005358 <TIM_Base_SetConfig+0x130>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00b      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a25      	ldr	r2, [pc, #148]	; (800535c <TIM_Base_SetConfig+0x134>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a24      	ldr	r2, [pc, #144]	; (8005360 <TIM_Base_SetConfig+0x138>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a23      	ldr	r2, [pc, #140]	; (8005364 <TIM_Base_SetConfig+0x13c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d108      	bne.n	80052ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a0a      	ldr	r2, [pc, #40]	; (800533c <TIM_Base_SetConfig+0x114>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_Base_SetConfig+0xf8>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a0c      	ldr	r2, [pc, #48]	; (800534c <TIM_Base_SetConfig+0x124>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d103      	bne.n	8005328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	615a      	str	r2, [r3, #20]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40010000 	.word	0x40010000
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40000c00 	.word	0x40000c00
 800534c:	40010400 	.word	0x40010400
 8005350:	40014000 	.word	0x40014000
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800
 800535c:	40001800 	.word	0x40001800
 8005360:	40001c00 	.word	0x40001c00
 8005364:	40002000 	.word	0x40002000

08005368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f023 0201 	bic.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0303 	bic.w	r3, r3, #3
 800539e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f023 0302 	bic.w	r3, r3, #2
 80053b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a20      	ldr	r2, [pc, #128]	; (8005440 <TIM_OC1_SetConfig+0xd8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_OC1_SetConfig+0x64>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a1f      	ldr	r2, [pc, #124]	; (8005444 <TIM_OC1_SetConfig+0xdc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10c      	bne.n	80053e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0308 	bic.w	r3, r3, #8
 80053d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f023 0304 	bic.w	r3, r3, #4
 80053e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a15      	ldr	r2, [pc, #84]	; (8005440 <TIM_OC1_SetConfig+0xd8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_OC1_SetConfig+0x8e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a14      	ldr	r2, [pc, #80]	; (8005444 <TIM_OC1_SetConfig+0xdc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d111      	bne.n	800541a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	621a      	str	r2, [r3, #32]
}
 8005434:	bf00      	nop
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40010000 	.word	0x40010000
 8005444:	40010400 	.word	0x40010400

08005448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f023 0210 	bic.w	r2, r3, #16
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 0320 	bic.w	r3, r3, #32
 8005492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a22      	ldr	r2, [pc, #136]	; (800552c <TIM_OC2_SetConfig+0xe4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_OC2_SetConfig+0x68>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a21      	ldr	r2, [pc, #132]	; (8005530 <TIM_OC2_SetConfig+0xe8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10d      	bne.n	80054cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a17      	ldr	r2, [pc, #92]	; (800552c <TIM_OC2_SetConfig+0xe4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_OC2_SetConfig+0x94>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a16      	ldr	r2, [pc, #88]	; (8005530 <TIM_OC2_SetConfig+0xe8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d113      	bne.n	8005504 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40010400 	.word	0x40010400

08005534 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0303 	bic.w	r3, r3, #3
 800556a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800557c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a21      	ldr	r2, [pc, #132]	; (8005614 <TIM_OC3_SetConfig+0xe0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_OC3_SetConfig+0x66>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a20      	ldr	r2, [pc, #128]	; (8005618 <TIM_OC3_SetConfig+0xe4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10d      	bne.n	80055b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a16      	ldr	r2, [pc, #88]	; (8005614 <TIM_OC3_SetConfig+0xe0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_OC3_SetConfig+0x92>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a15      	ldr	r2, [pc, #84]	; (8005618 <TIM_OC3_SetConfig+0xe4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d113      	bne.n	80055ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	621a      	str	r2, [r3, #32]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40010000 	.word	0x40010000
 8005618:	40010400 	.word	0x40010400

0800561c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a12      	ldr	r2, [pc, #72]	; (80056c0 <TIM_OC4_SetConfig+0xa4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_OC4_SetConfig+0x68>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a11      	ldr	r2, [pc, #68]	; (80056c4 <TIM_OC4_SetConfig+0xa8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d109      	bne.n	8005698 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800568a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	019b      	lsls	r3, r3, #6
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40010000 	.word	0x40010000
 80056c4:	40010400 	.word	0x40010400

080056c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056dc:	2302      	movs	r3, #2
 80056de:	e05a      	b.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a21      	ldr	r2, [pc, #132]	; (80057a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d022      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572c:	d01d      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d018      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d013      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1a      	ldr	r2, [pc, #104]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d00e      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a18      	ldr	r2, [pc, #96]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d009      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a17      	ldr	r2, [pc, #92]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d004      	beq.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a15      	ldr	r2, [pc, #84]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d10c      	bne.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005770:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	4313      	orrs	r3, r2
 800577a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	40010000 	.word	0x40010000
 80057a8:	40000400 	.word	0x40000400
 80057ac:	40000800 	.word	0x40000800
 80057b0:	40000c00 	.word	0x40000c00
 80057b4:	40010400 	.word	0x40010400
 80057b8:	40014000 	.word	0x40014000
 80057bc:	40001800 	.word	0x40001800

080057c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d101      	bne.n	80057d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e03f      	b.n	8005852 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fd f89e 	bl	8002928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2224      	movs	r2, #36	; 0x24
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68da      	ldr	r2, [r3, #12]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f929 	bl	8005a5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	695a      	ldr	r2, [r3, #20]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b08a      	sub	sp, #40	; 0x28
 800585e:	af02      	add	r7, sp, #8
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	603b      	str	r3, [r7, #0]
 8005866:	4613      	mov	r3, r2
 8005868:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b20      	cmp	r3, #32
 8005878:	d17c      	bne.n	8005974 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d002      	beq.n	8005886 <HAL_UART_Transmit+0x2c>
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e075      	b.n	8005976 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_UART_Transmit+0x3e>
 8005894:	2302      	movs	r3, #2
 8005896:	e06e      	b.n	8005976 <HAL_UART_Transmit+0x11c>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2221      	movs	r2, #33	; 0x21
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058ae:	f7fd f98d 	bl	8002bcc <HAL_GetTick>
 80058b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	88fa      	ldrh	r2, [r7, #6]
 80058b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	88fa      	ldrh	r2, [r7, #6]
 80058be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c8:	d108      	bne.n	80058dc <HAL_UART_Transmit+0x82>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d104      	bne.n	80058dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	e003      	b.n	80058e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058ec:	e02a      	b.n	8005944 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2200      	movs	r2, #0
 80058f6:	2180      	movs	r1, #128	; 0x80
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f840 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e036      	b.n	8005976 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10b      	bne.n	8005926 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800591c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	3302      	adds	r3, #2
 8005922:	61bb      	str	r3, [r7, #24]
 8005924:	e007      	b.n	8005936 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	781a      	ldrb	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	3301      	adds	r3, #1
 8005934:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1cf      	bne.n	80058ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2200      	movs	r2, #0
 8005956:	2140      	movs	r1, #64	; 0x40
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f810 	bl	800597e <UART_WaitOnFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e006      	b.n	8005976 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005970:	2300      	movs	r3, #0
 8005972:	e000      	b.n	8005976 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005974:	2302      	movs	r3, #2
  }
}
 8005976:	4618      	mov	r0, r3
 8005978:	3720      	adds	r7, #32
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b090      	sub	sp, #64	; 0x40
 8005982:	af00      	add	r7, sp, #0
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	603b      	str	r3, [r7, #0]
 800598a:	4613      	mov	r3, r2
 800598c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598e:	e050      	b.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	d04c      	beq.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800599a:	2b00      	cmp	r3, #0
 800599c:	d007      	beq.n	80059ae <UART_WaitOnFlagUntilTimeout+0x30>
 800599e:	f7fd f915 	bl	8002bcc <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d241      	bcs.n	8005a32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	330c      	adds	r3, #12
 80059cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059ce:	637a      	str	r2, [r7, #52]	; 0x34
 80059d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059d6:	e841 2300 	strex	r3, r2, [r1]
 80059da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1e5      	bne.n	80059ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	3314      	adds	r3, #20
 80059e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	613b      	str	r3, [r7, #16]
   return(result);
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f023 0301 	bic.w	r3, r3, #1
 80059f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3314      	adds	r3, #20
 8005a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a02:	623a      	str	r2, [r7, #32]
 8005a04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	69f9      	ldr	r1, [r7, #28]
 8005a08:	6a3a      	ldr	r2, [r7, #32]
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e5      	bne.n	80059e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e00f      	b.n	8005a52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	bf0c      	ite	eq
 8005a42:	2301      	moveq	r3, #1
 8005a44:	2300      	movne	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d09f      	beq.n	8005990 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3740      	adds	r7, #64	; 0x40
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
	...

08005a5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a60:	b0c0      	sub	sp, #256	; 0x100
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a78:	68d9      	ldr	r1, [r3, #12]
 8005a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	ea40 0301 	orr.w	r3, r0, r1
 8005a84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8a:	689a      	ldr	r2, [r3, #8]
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	431a      	orrs	r2, r3
 8005a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ab4:	f021 010c 	bic.w	r1, r1, #12
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ac2:	430b      	orrs	r3, r1
 8005ac4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad6:	6999      	ldr	r1, [r3, #24]
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	ea40 0301 	orr.w	r3, r0, r1
 8005ae2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	4b8f      	ldr	r3, [pc, #572]	; (8005d28 <UART_SetConfig+0x2cc>)
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d005      	beq.n	8005afc <UART_SetConfig+0xa0>
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b8d      	ldr	r3, [pc, #564]	; (8005d2c <UART_SetConfig+0x2d0>)
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d104      	bne.n	8005b06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005afc:	f7fe f87a 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 8005b00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b04:	e003      	b.n	8005b0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b06:	f7fe f861 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8005b0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b18:	f040 810c 	bne.w	8005d34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b20:	2200      	movs	r2, #0
 8005b22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b2e:	4622      	mov	r2, r4
 8005b30:	462b      	mov	r3, r5
 8005b32:	1891      	adds	r1, r2, r2
 8005b34:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b36:	415b      	adcs	r3, r3
 8005b38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b3e:	4621      	mov	r1, r4
 8005b40:	eb12 0801 	adds.w	r8, r2, r1
 8005b44:	4629      	mov	r1, r5
 8005b46:	eb43 0901 	adc.w	r9, r3, r1
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b5e:	4690      	mov	r8, r2
 8005b60:	4699      	mov	r9, r3
 8005b62:	4623      	mov	r3, r4
 8005b64:	eb18 0303 	adds.w	r3, r8, r3
 8005b68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b6c:	462b      	mov	r3, r5
 8005b6e:	eb49 0303 	adc.w	r3, r9, r3
 8005b72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	18db      	adds	r3, r3, r3
 8005b8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b90:	4613      	mov	r3, r2
 8005b92:	eb42 0303 	adc.w	r3, r2, r3
 8005b96:	657b      	str	r3, [r7, #84]	; 0x54
 8005b98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ba0:	f7fb f822 	bl	8000be8 <__aeabi_uldivmod>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4b61      	ldr	r3, [pc, #388]	; (8005d30 <UART_SetConfig+0x2d4>)
 8005baa:	fba3 2302 	umull	r2, r3, r3, r2
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	011c      	lsls	r4, r3, #4
 8005bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005bc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005bc4:	4642      	mov	r2, r8
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	1891      	adds	r1, r2, r2
 8005bca:	64b9      	str	r1, [r7, #72]	; 0x48
 8005bcc:	415b      	adcs	r3, r3
 8005bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005bd4:	4641      	mov	r1, r8
 8005bd6:	eb12 0a01 	adds.w	sl, r2, r1
 8005bda:	4649      	mov	r1, r9
 8005bdc:	eb43 0b01 	adc.w	fp, r3, r1
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf4:	4692      	mov	sl, r2
 8005bf6:	469b      	mov	fp, r3
 8005bf8:	4643      	mov	r3, r8
 8005bfa:	eb1a 0303 	adds.w	r3, sl, r3
 8005bfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c02:	464b      	mov	r3, r9
 8005c04:	eb4b 0303 	adc.w	r3, fp, r3
 8005c08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c20:	460b      	mov	r3, r1
 8005c22:	18db      	adds	r3, r3, r3
 8005c24:	643b      	str	r3, [r7, #64]	; 0x40
 8005c26:	4613      	mov	r3, r2
 8005c28:	eb42 0303 	adc.w	r3, r2, r3
 8005c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c36:	f7fa ffd7 	bl	8000be8 <__aeabi_uldivmod>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4611      	mov	r1, r2
 8005c40:	4b3b      	ldr	r3, [pc, #236]	; (8005d30 <UART_SetConfig+0x2d4>)
 8005c42:	fba3 2301 	umull	r2, r3, r3, r1
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	2264      	movs	r2, #100	; 0x64
 8005c4a:	fb02 f303 	mul.w	r3, r2, r3
 8005c4e:	1acb      	subs	r3, r1, r3
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c56:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <UART_SetConfig+0x2d4>)
 8005c58:	fba3 2302 	umull	r2, r3, r3, r2
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c64:	441c      	add	r4, r3
 8005c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c78:	4642      	mov	r2, r8
 8005c7a:	464b      	mov	r3, r9
 8005c7c:	1891      	adds	r1, r2, r2
 8005c7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c80:	415b      	adcs	r3, r3
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c88:	4641      	mov	r1, r8
 8005c8a:	1851      	adds	r1, r2, r1
 8005c8c:	6339      	str	r1, [r7, #48]	; 0x30
 8005c8e:	4649      	mov	r1, r9
 8005c90:	414b      	adcs	r3, r1
 8005c92:	637b      	str	r3, [r7, #52]	; 0x34
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ca0:	4659      	mov	r1, fp
 8005ca2:	00cb      	lsls	r3, r1, #3
 8005ca4:	4651      	mov	r1, sl
 8005ca6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005caa:	4651      	mov	r1, sl
 8005cac:	00ca      	lsls	r2, r1, #3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	4642      	mov	r2, r8
 8005cb6:	189b      	adds	r3, r3, r2
 8005cb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	460a      	mov	r2, r1
 8005cc0:	eb42 0303 	adc.w	r3, r2, r3
 8005cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005cd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005cdc:	460b      	mov	r3, r1
 8005cde:	18db      	adds	r3, r3, r3
 8005ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	eb42 0303 	adc.w	r3, r2, r3
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005cee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005cf2:	f7fa ff79 	bl	8000be8 <__aeabi_uldivmod>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	; (8005d30 <UART_SetConfig+0x2d4>)
 8005cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8005d00:	095b      	lsrs	r3, r3, #5
 8005d02:	2164      	movs	r1, #100	; 0x64
 8005d04:	fb01 f303 	mul.w	r3, r1, r3
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	3332      	adds	r3, #50	; 0x32
 8005d0e:	4a08      	ldr	r2, [pc, #32]	; (8005d30 <UART_SetConfig+0x2d4>)
 8005d10:	fba2 2303 	umull	r2, r3, r2, r3
 8005d14:	095b      	lsrs	r3, r3, #5
 8005d16:	f003 0207 	and.w	r2, r3, #7
 8005d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4422      	add	r2, r4
 8005d22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d24:	e105      	b.n	8005f32 <UART_SetConfig+0x4d6>
 8005d26:	bf00      	nop
 8005d28:	40011000 	.word	0x40011000
 8005d2c:	40011400 	.word	0x40011400
 8005d30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d46:	4642      	mov	r2, r8
 8005d48:	464b      	mov	r3, r9
 8005d4a:	1891      	adds	r1, r2, r2
 8005d4c:	6239      	str	r1, [r7, #32]
 8005d4e:	415b      	adcs	r3, r3
 8005d50:	627b      	str	r3, [r7, #36]	; 0x24
 8005d52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d56:	4641      	mov	r1, r8
 8005d58:	1854      	adds	r4, r2, r1
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	eb43 0501 	adc.w	r5, r3, r1
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	f04f 0300 	mov.w	r3, #0
 8005d68:	00eb      	lsls	r3, r5, #3
 8005d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d6e:	00e2      	lsls	r2, r4, #3
 8005d70:	4614      	mov	r4, r2
 8005d72:	461d      	mov	r5, r3
 8005d74:	4643      	mov	r3, r8
 8005d76:	18e3      	adds	r3, r4, r3
 8005d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	eb45 0303 	adc.w	r3, r5, r3
 8005d82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	f04f 0300 	mov.w	r3, #0
 8005d9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005da2:	4629      	mov	r1, r5
 8005da4:	008b      	lsls	r3, r1, #2
 8005da6:	4621      	mov	r1, r4
 8005da8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dac:	4621      	mov	r1, r4
 8005dae:	008a      	lsls	r2, r1, #2
 8005db0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005db4:	f7fa ff18 	bl	8000be8 <__aeabi_uldivmod>
 8005db8:	4602      	mov	r2, r0
 8005dba:	460b      	mov	r3, r1
 8005dbc:	4b60      	ldr	r3, [pc, #384]	; (8005f40 <UART_SetConfig+0x4e4>)
 8005dbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	011c      	lsls	r4, r3, #4
 8005dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005dd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005dd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005dd8:	4642      	mov	r2, r8
 8005dda:	464b      	mov	r3, r9
 8005ddc:	1891      	adds	r1, r2, r2
 8005dde:	61b9      	str	r1, [r7, #24]
 8005de0:	415b      	adcs	r3, r3
 8005de2:	61fb      	str	r3, [r7, #28]
 8005de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005de8:	4641      	mov	r1, r8
 8005dea:	1851      	adds	r1, r2, r1
 8005dec:	6139      	str	r1, [r7, #16]
 8005dee:	4649      	mov	r1, r9
 8005df0:	414b      	adcs	r3, r1
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	f04f 0300 	mov.w	r3, #0
 8005dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e00:	4659      	mov	r1, fp
 8005e02:	00cb      	lsls	r3, r1, #3
 8005e04:	4651      	mov	r1, sl
 8005e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e0a:	4651      	mov	r1, sl
 8005e0c:	00ca      	lsls	r2, r1, #3
 8005e0e:	4610      	mov	r0, r2
 8005e10:	4619      	mov	r1, r3
 8005e12:	4603      	mov	r3, r0
 8005e14:	4642      	mov	r2, r8
 8005e16:	189b      	adds	r3, r3, r2
 8005e18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e1c:	464b      	mov	r3, r9
 8005e1e:	460a      	mov	r2, r1
 8005e20:	eb42 0303 	adc.w	r3, r2, r3
 8005e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	f04f 0300 	mov.w	r3, #0
 8005e3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e40:	4649      	mov	r1, r9
 8005e42:	008b      	lsls	r3, r1, #2
 8005e44:	4641      	mov	r1, r8
 8005e46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e4a:	4641      	mov	r1, r8
 8005e4c:	008a      	lsls	r2, r1, #2
 8005e4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e52:	f7fa fec9 	bl	8000be8 <__aeabi_uldivmod>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4b39      	ldr	r3, [pc, #228]	; (8005f40 <UART_SetConfig+0x4e4>)
 8005e5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	2164      	movs	r1, #100	; 0x64
 8005e64:	fb01 f303 	mul.w	r3, r1, r3
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	3332      	adds	r3, #50	; 0x32
 8005e6e:	4a34      	ldr	r2, [pc, #208]	; (8005f40 <UART_SetConfig+0x4e4>)
 8005e70:	fba2 2303 	umull	r2, r3, r2, r3
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e7a:	441c      	add	r4, r3
 8005e7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e80:	2200      	movs	r2, #0
 8005e82:	673b      	str	r3, [r7, #112]	; 0x70
 8005e84:	677a      	str	r2, [r7, #116]	; 0x74
 8005e86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e8a:	4642      	mov	r2, r8
 8005e8c:	464b      	mov	r3, r9
 8005e8e:	1891      	adds	r1, r2, r2
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	415b      	adcs	r3, r3
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e9a:	4641      	mov	r1, r8
 8005e9c:	1851      	adds	r1, r2, r1
 8005e9e:	6039      	str	r1, [r7, #0]
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	414b      	adcs	r3, r1
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	f04f 0200 	mov.w	r2, #0
 8005eaa:	f04f 0300 	mov.w	r3, #0
 8005eae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005eb2:	4659      	mov	r1, fp
 8005eb4:	00cb      	lsls	r3, r1, #3
 8005eb6:	4651      	mov	r1, sl
 8005eb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ebc:	4651      	mov	r1, sl
 8005ebe:	00ca      	lsls	r2, r1, #3
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	4642      	mov	r2, r8
 8005ec8:	189b      	adds	r3, r3, r2
 8005eca:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ecc:	464b      	mov	r3, r9
 8005ece:	460a      	mov	r2, r1
 8005ed0:	eb42 0303 	adc.w	r3, r2, r3
 8005ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	663b      	str	r3, [r7, #96]	; 0x60
 8005ee0:	667a      	str	r2, [r7, #100]	; 0x64
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005eee:	4649      	mov	r1, r9
 8005ef0:	008b      	lsls	r3, r1, #2
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ef8:	4641      	mov	r1, r8
 8005efa:	008a      	lsls	r2, r1, #2
 8005efc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f00:	f7fa fe72 	bl	8000be8 <__aeabi_uldivmod>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4b0d      	ldr	r3, [pc, #52]	; (8005f40 <UART_SetConfig+0x4e4>)
 8005f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	2164      	movs	r1, #100	; 0x64
 8005f12:	fb01 f303 	mul.w	r3, r1, r3
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	3332      	adds	r3, #50	; 0x32
 8005f1c:	4a08      	ldr	r2, [pc, #32]	; (8005f40 <UART_SetConfig+0x4e4>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	095b      	lsrs	r3, r3, #5
 8005f24:	f003 020f 	and.w	r2, r3, #15
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4422      	add	r2, r4
 8005f30:	609a      	str	r2, [r3, #8]
}
 8005f32:	bf00      	nop
 8005f34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f3e:	bf00      	nop
 8005f40:	51eb851f 	.word	0x51eb851f

08005f44 <__libc_init_array>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	4d0d      	ldr	r5, [pc, #52]	; (8005f7c <__libc_init_array+0x38>)
 8005f48:	4c0d      	ldr	r4, [pc, #52]	; (8005f80 <__libc_init_array+0x3c>)
 8005f4a:	1b64      	subs	r4, r4, r5
 8005f4c:	10a4      	asrs	r4, r4, #2
 8005f4e:	2600      	movs	r6, #0
 8005f50:	42a6      	cmp	r6, r4
 8005f52:	d109      	bne.n	8005f68 <__libc_init_array+0x24>
 8005f54:	4d0b      	ldr	r5, [pc, #44]	; (8005f84 <__libc_init_array+0x40>)
 8005f56:	4c0c      	ldr	r4, [pc, #48]	; (8005f88 <__libc_init_array+0x44>)
 8005f58:	f002 ff62 	bl	8008e20 <_init>
 8005f5c:	1b64      	subs	r4, r4, r5
 8005f5e:	10a4      	asrs	r4, r4, #2
 8005f60:	2600      	movs	r6, #0
 8005f62:	42a6      	cmp	r6, r4
 8005f64:	d105      	bne.n	8005f72 <__libc_init_array+0x2e>
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
 8005f68:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f6c:	4798      	blx	r3
 8005f6e:	3601      	adds	r6, #1
 8005f70:	e7ee      	b.n	8005f50 <__libc_init_array+0xc>
 8005f72:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f76:	4798      	blx	r3
 8005f78:	3601      	adds	r6, #1
 8005f7a:	e7f2      	b.n	8005f62 <__libc_init_array+0x1e>
 8005f7c:	0800924c 	.word	0x0800924c
 8005f80:	0800924c 	.word	0x0800924c
 8005f84:	0800924c 	.word	0x0800924c
 8005f88:	08009250 	.word	0x08009250

08005f8c <memset>:
 8005f8c:	4402      	add	r2, r0
 8005f8e:	4603      	mov	r3, r0
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d100      	bne.n	8005f96 <memset+0xa>
 8005f94:	4770      	bx	lr
 8005f96:	f803 1b01 	strb.w	r1, [r3], #1
 8005f9a:	e7f9      	b.n	8005f90 <memset+0x4>

08005f9c <__cvt>:
 8005f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa0:	ec55 4b10 	vmov	r4, r5, d0
 8005fa4:	2d00      	cmp	r5, #0
 8005fa6:	460e      	mov	r6, r1
 8005fa8:	4619      	mov	r1, r3
 8005faa:	462b      	mov	r3, r5
 8005fac:	bfbb      	ittet	lt
 8005fae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005fb2:	461d      	movlt	r5, r3
 8005fb4:	2300      	movge	r3, #0
 8005fb6:	232d      	movlt	r3, #45	; 0x2d
 8005fb8:	700b      	strb	r3, [r1, #0]
 8005fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005fc0:	4691      	mov	r9, r2
 8005fc2:	f023 0820 	bic.w	r8, r3, #32
 8005fc6:	bfbc      	itt	lt
 8005fc8:	4622      	movlt	r2, r4
 8005fca:	4614      	movlt	r4, r2
 8005fcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fd0:	d005      	beq.n	8005fde <__cvt+0x42>
 8005fd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005fd6:	d100      	bne.n	8005fda <__cvt+0x3e>
 8005fd8:	3601      	adds	r6, #1
 8005fda:	2102      	movs	r1, #2
 8005fdc:	e000      	b.n	8005fe0 <__cvt+0x44>
 8005fde:	2103      	movs	r1, #3
 8005fe0:	ab03      	add	r3, sp, #12
 8005fe2:	9301      	str	r3, [sp, #4]
 8005fe4:	ab02      	add	r3, sp, #8
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	ec45 4b10 	vmov	d0, r4, r5
 8005fec:	4653      	mov	r3, sl
 8005fee:	4632      	mov	r2, r6
 8005ff0:	f000 fcfa 	bl	80069e8 <_dtoa_r>
 8005ff4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	d102      	bne.n	8006002 <__cvt+0x66>
 8005ffc:	f019 0f01 	tst.w	r9, #1
 8006000:	d022      	beq.n	8006048 <__cvt+0xac>
 8006002:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006006:	eb07 0906 	add.w	r9, r7, r6
 800600a:	d110      	bne.n	800602e <__cvt+0x92>
 800600c:	783b      	ldrb	r3, [r7, #0]
 800600e:	2b30      	cmp	r3, #48	; 0x30
 8006010:	d10a      	bne.n	8006028 <__cvt+0x8c>
 8006012:	2200      	movs	r2, #0
 8006014:	2300      	movs	r3, #0
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa fd75 	bl	8000b08 <__aeabi_dcmpeq>
 800601e:	b918      	cbnz	r0, 8006028 <__cvt+0x8c>
 8006020:	f1c6 0601 	rsb	r6, r6, #1
 8006024:	f8ca 6000 	str.w	r6, [sl]
 8006028:	f8da 3000 	ldr.w	r3, [sl]
 800602c:	4499      	add	r9, r3
 800602e:	2200      	movs	r2, #0
 8006030:	2300      	movs	r3, #0
 8006032:	4620      	mov	r0, r4
 8006034:	4629      	mov	r1, r5
 8006036:	f7fa fd67 	bl	8000b08 <__aeabi_dcmpeq>
 800603a:	b108      	cbz	r0, 8006040 <__cvt+0xa4>
 800603c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006040:	2230      	movs	r2, #48	; 0x30
 8006042:	9b03      	ldr	r3, [sp, #12]
 8006044:	454b      	cmp	r3, r9
 8006046:	d307      	bcc.n	8006058 <__cvt+0xbc>
 8006048:	9b03      	ldr	r3, [sp, #12]
 800604a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800604c:	1bdb      	subs	r3, r3, r7
 800604e:	4638      	mov	r0, r7
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	b004      	add	sp, #16
 8006054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006058:	1c59      	adds	r1, r3, #1
 800605a:	9103      	str	r1, [sp, #12]
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	e7f0      	b.n	8006042 <__cvt+0xa6>

08006060 <__exponent>:
 8006060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006062:	4603      	mov	r3, r0
 8006064:	2900      	cmp	r1, #0
 8006066:	bfb8      	it	lt
 8006068:	4249      	neglt	r1, r1
 800606a:	f803 2b02 	strb.w	r2, [r3], #2
 800606e:	bfb4      	ite	lt
 8006070:	222d      	movlt	r2, #45	; 0x2d
 8006072:	222b      	movge	r2, #43	; 0x2b
 8006074:	2909      	cmp	r1, #9
 8006076:	7042      	strb	r2, [r0, #1]
 8006078:	dd2a      	ble.n	80060d0 <__exponent+0x70>
 800607a:	f10d 0407 	add.w	r4, sp, #7
 800607e:	46a4      	mov	ip, r4
 8006080:	270a      	movs	r7, #10
 8006082:	46a6      	mov	lr, r4
 8006084:	460a      	mov	r2, r1
 8006086:	fb91 f6f7 	sdiv	r6, r1, r7
 800608a:	fb07 1516 	mls	r5, r7, r6, r1
 800608e:	3530      	adds	r5, #48	; 0x30
 8006090:	2a63      	cmp	r2, #99	; 0x63
 8006092:	f104 34ff 	add.w	r4, r4, #4294967295
 8006096:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800609a:	4631      	mov	r1, r6
 800609c:	dcf1      	bgt.n	8006082 <__exponent+0x22>
 800609e:	3130      	adds	r1, #48	; 0x30
 80060a0:	f1ae 0502 	sub.w	r5, lr, #2
 80060a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80060a8:	1c44      	adds	r4, r0, #1
 80060aa:	4629      	mov	r1, r5
 80060ac:	4561      	cmp	r1, ip
 80060ae:	d30a      	bcc.n	80060c6 <__exponent+0x66>
 80060b0:	f10d 0209 	add.w	r2, sp, #9
 80060b4:	eba2 020e 	sub.w	r2, r2, lr
 80060b8:	4565      	cmp	r5, ip
 80060ba:	bf88      	it	hi
 80060bc:	2200      	movhi	r2, #0
 80060be:	4413      	add	r3, r2
 80060c0:	1a18      	subs	r0, r3, r0
 80060c2:	b003      	add	sp, #12
 80060c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80060ce:	e7ed      	b.n	80060ac <__exponent+0x4c>
 80060d0:	2330      	movs	r3, #48	; 0x30
 80060d2:	3130      	adds	r1, #48	; 0x30
 80060d4:	7083      	strb	r3, [r0, #2]
 80060d6:	70c1      	strb	r1, [r0, #3]
 80060d8:	1d03      	adds	r3, r0, #4
 80060da:	e7f1      	b.n	80060c0 <__exponent+0x60>

080060dc <_printf_float>:
 80060dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e0:	ed2d 8b02 	vpush	{d8}
 80060e4:	b08d      	sub	sp, #52	; 0x34
 80060e6:	460c      	mov	r4, r1
 80060e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80060ec:	4616      	mov	r6, r2
 80060ee:	461f      	mov	r7, r3
 80060f0:	4605      	mov	r5, r0
 80060f2:	f001 fa67 	bl	80075c4 <_localeconv_r>
 80060f6:	f8d0 a000 	ldr.w	sl, [r0]
 80060fa:	4650      	mov	r0, sl
 80060fc:	f7fa f888 	bl	8000210 <strlen>
 8006100:	2300      	movs	r3, #0
 8006102:	930a      	str	r3, [sp, #40]	; 0x28
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	9305      	str	r3, [sp, #20]
 8006108:	f8d8 3000 	ldr.w	r3, [r8]
 800610c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006110:	3307      	adds	r3, #7
 8006112:	f023 0307 	bic.w	r3, r3, #7
 8006116:	f103 0208 	add.w	r2, r3, #8
 800611a:	f8c8 2000 	str.w	r2, [r8]
 800611e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006122:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006126:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800612a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800612e:	9307      	str	r3, [sp, #28]
 8006130:	f8cd 8018 	str.w	r8, [sp, #24]
 8006134:	ee08 0a10 	vmov	s16, r0
 8006138:	4b9f      	ldr	r3, [pc, #636]	; (80063b8 <_printf_float+0x2dc>)
 800613a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800613e:	f04f 32ff 	mov.w	r2, #4294967295
 8006142:	f7fa fd13 	bl	8000b6c <__aeabi_dcmpun>
 8006146:	bb88      	cbnz	r0, 80061ac <_printf_float+0xd0>
 8006148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800614c:	4b9a      	ldr	r3, [pc, #616]	; (80063b8 <_printf_float+0x2dc>)
 800614e:	f04f 32ff 	mov.w	r2, #4294967295
 8006152:	f7fa fced 	bl	8000b30 <__aeabi_dcmple>
 8006156:	bb48      	cbnz	r0, 80061ac <_printf_float+0xd0>
 8006158:	2200      	movs	r2, #0
 800615a:	2300      	movs	r3, #0
 800615c:	4640      	mov	r0, r8
 800615e:	4649      	mov	r1, r9
 8006160:	f7fa fcdc 	bl	8000b1c <__aeabi_dcmplt>
 8006164:	b110      	cbz	r0, 800616c <_printf_float+0x90>
 8006166:	232d      	movs	r3, #45	; 0x2d
 8006168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800616c:	4b93      	ldr	r3, [pc, #588]	; (80063bc <_printf_float+0x2e0>)
 800616e:	4894      	ldr	r0, [pc, #592]	; (80063c0 <_printf_float+0x2e4>)
 8006170:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006174:	bf94      	ite	ls
 8006176:	4698      	movls	r8, r3
 8006178:	4680      	movhi	r8, r0
 800617a:	2303      	movs	r3, #3
 800617c:	6123      	str	r3, [r4, #16]
 800617e:	9b05      	ldr	r3, [sp, #20]
 8006180:	f023 0204 	bic.w	r2, r3, #4
 8006184:	6022      	str	r2, [r4, #0]
 8006186:	f04f 0900 	mov.w	r9, #0
 800618a:	9700      	str	r7, [sp, #0]
 800618c:	4633      	mov	r3, r6
 800618e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006190:	4621      	mov	r1, r4
 8006192:	4628      	mov	r0, r5
 8006194:	f000 f9d8 	bl	8006548 <_printf_common>
 8006198:	3001      	adds	r0, #1
 800619a:	f040 8090 	bne.w	80062be <_printf_float+0x1e2>
 800619e:	f04f 30ff 	mov.w	r0, #4294967295
 80061a2:	b00d      	add	sp, #52	; 0x34
 80061a4:	ecbd 8b02 	vpop	{d8}
 80061a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ac:	4642      	mov	r2, r8
 80061ae:	464b      	mov	r3, r9
 80061b0:	4640      	mov	r0, r8
 80061b2:	4649      	mov	r1, r9
 80061b4:	f7fa fcda 	bl	8000b6c <__aeabi_dcmpun>
 80061b8:	b140      	cbz	r0, 80061cc <_printf_float+0xf0>
 80061ba:	464b      	mov	r3, r9
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bfbc      	itt	lt
 80061c0:	232d      	movlt	r3, #45	; 0x2d
 80061c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80061c6:	487f      	ldr	r0, [pc, #508]	; (80063c4 <_printf_float+0x2e8>)
 80061c8:	4b7f      	ldr	r3, [pc, #508]	; (80063c8 <_printf_float+0x2ec>)
 80061ca:	e7d1      	b.n	8006170 <_printf_float+0x94>
 80061cc:	6863      	ldr	r3, [r4, #4]
 80061ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80061d2:	9206      	str	r2, [sp, #24]
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	d13f      	bne.n	8006258 <_printf_float+0x17c>
 80061d8:	2306      	movs	r3, #6
 80061da:	6063      	str	r3, [r4, #4]
 80061dc:	9b05      	ldr	r3, [sp, #20]
 80061de:	6861      	ldr	r1, [r4, #4]
 80061e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80061e4:	2300      	movs	r3, #0
 80061e6:	9303      	str	r3, [sp, #12]
 80061e8:	ab0a      	add	r3, sp, #40	; 0x28
 80061ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80061ee:	ab09      	add	r3, sp, #36	; 0x24
 80061f0:	ec49 8b10 	vmov	d0, r8, r9
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	6022      	str	r2, [r4, #0]
 80061f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80061fc:	4628      	mov	r0, r5
 80061fe:	f7ff fecd 	bl	8005f9c <__cvt>
 8006202:	9b06      	ldr	r3, [sp, #24]
 8006204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006206:	2b47      	cmp	r3, #71	; 0x47
 8006208:	4680      	mov	r8, r0
 800620a:	d108      	bne.n	800621e <_printf_float+0x142>
 800620c:	1cc8      	adds	r0, r1, #3
 800620e:	db02      	blt.n	8006216 <_printf_float+0x13a>
 8006210:	6863      	ldr	r3, [r4, #4]
 8006212:	4299      	cmp	r1, r3
 8006214:	dd41      	ble.n	800629a <_printf_float+0x1be>
 8006216:	f1ab 0b02 	sub.w	fp, fp, #2
 800621a:	fa5f fb8b 	uxtb.w	fp, fp
 800621e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006222:	d820      	bhi.n	8006266 <_printf_float+0x18a>
 8006224:	3901      	subs	r1, #1
 8006226:	465a      	mov	r2, fp
 8006228:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800622c:	9109      	str	r1, [sp, #36]	; 0x24
 800622e:	f7ff ff17 	bl	8006060 <__exponent>
 8006232:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006234:	1813      	adds	r3, r2, r0
 8006236:	2a01      	cmp	r2, #1
 8006238:	4681      	mov	r9, r0
 800623a:	6123      	str	r3, [r4, #16]
 800623c:	dc02      	bgt.n	8006244 <_printf_float+0x168>
 800623e:	6822      	ldr	r2, [r4, #0]
 8006240:	07d2      	lsls	r2, r2, #31
 8006242:	d501      	bpl.n	8006248 <_printf_float+0x16c>
 8006244:	3301      	adds	r3, #1
 8006246:	6123      	str	r3, [r4, #16]
 8006248:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800624c:	2b00      	cmp	r3, #0
 800624e:	d09c      	beq.n	800618a <_printf_float+0xae>
 8006250:	232d      	movs	r3, #45	; 0x2d
 8006252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006256:	e798      	b.n	800618a <_printf_float+0xae>
 8006258:	9a06      	ldr	r2, [sp, #24]
 800625a:	2a47      	cmp	r2, #71	; 0x47
 800625c:	d1be      	bne.n	80061dc <_printf_float+0x100>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1bc      	bne.n	80061dc <_printf_float+0x100>
 8006262:	2301      	movs	r3, #1
 8006264:	e7b9      	b.n	80061da <_printf_float+0xfe>
 8006266:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800626a:	d118      	bne.n	800629e <_printf_float+0x1c2>
 800626c:	2900      	cmp	r1, #0
 800626e:	6863      	ldr	r3, [r4, #4]
 8006270:	dd0b      	ble.n	800628a <_printf_float+0x1ae>
 8006272:	6121      	str	r1, [r4, #16]
 8006274:	b913      	cbnz	r3, 800627c <_printf_float+0x1a0>
 8006276:	6822      	ldr	r2, [r4, #0]
 8006278:	07d0      	lsls	r0, r2, #31
 800627a:	d502      	bpl.n	8006282 <_printf_float+0x1a6>
 800627c:	3301      	adds	r3, #1
 800627e:	440b      	add	r3, r1
 8006280:	6123      	str	r3, [r4, #16]
 8006282:	65a1      	str	r1, [r4, #88]	; 0x58
 8006284:	f04f 0900 	mov.w	r9, #0
 8006288:	e7de      	b.n	8006248 <_printf_float+0x16c>
 800628a:	b913      	cbnz	r3, 8006292 <_printf_float+0x1b6>
 800628c:	6822      	ldr	r2, [r4, #0]
 800628e:	07d2      	lsls	r2, r2, #31
 8006290:	d501      	bpl.n	8006296 <_printf_float+0x1ba>
 8006292:	3302      	adds	r3, #2
 8006294:	e7f4      	b.n	8006280 <_printf_float+0x1a4>
 8006296:	2301      	movs	r3, #1
 8006298:	e7f2      	b.n	8006280 <_printf_float+0x1a4>
 800629a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800629e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062a0:	4299      	cmp	r1, r3
 80062a2:	db05      	blt.n	80062b0 <_printf_float+0x1d4>
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	6121      	str	r1, [r4, #16]
 80062a8:	07d8      	lsls	r0, r3, #31
 80062aa:	d5ea      	bpl.n	8006282 <_printf_float+0x1a6>
 80062ac:	1c4b      	adds	r3, r1, #1
 80062ae:	e7e7      	b.n	8006280 <_printf_float+0x1a4>
 80062b0:	2900      	cmp	r1, #0
 80062b2:	bfd4      	ite	le
 80062b4:	f1c1 0202 	rsble	r2, r1, #2
 80062b8:	2201      	movgt	r2, #1
 80062ba:	4413      	add	r3, r2
 80062bc:	e7e0      	b.n	8006280 <_printf_float+0x1a4>
 80062be:	6823      	ldr	r3, [r4, #0]
 80062c0:	055a      	lsls	r2, r3, #21
 80062c2:	d407      	bmi.n	80062d4 <_printf_float+0x1f8>
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	4642      	mov	r2, r8
 80062c8:	4631      	mov	r1, r6
 80062ca:	4628      	mov	r0, r5
 80062cc:	47b8      	blx	r7
 80062ce:	3001      	adds	r0, #1
 80062d0:	d12c      	bne.n	800632c <_printf_float+0x250>
 80062d2:	e764      	b.n	800619e <_printf_float+0xc2>
 80062d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80062d8:	f240 80e0 	bls.w	800649c <_printf_float+0x3c0>
 80062dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062e0:	2200      	movs	r2, #0
 80062e2:	2300      	movs	r3, #0
 80062e4:	f7fa fc10 	bl	8000b08 <__aeabi_dcmpeq>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	d034      	beq.n	8006356 <_printf_float+0x27a>
 80062ec:	4a37      	ldr	r2, [pc, #220]	; (80063cc <_printf_float+0x2f0>)
 80062ee:	2301      	movs	r3, #1
 80062f0:	4631      	mov	r1, r6
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b8      	blx	r7
 80062f6:	3001      	adds	r0, #1
 80062f8:	f43f af51 	beq.w	800619e <_printf_float+0xc2>
 80062fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006300:	429a      	cmp	r2, r3
 8006302:	db02      	blt.n	800630a <_printf_float+0x22e>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	07d8      	lsls	r0, r3, #31
 8006308:	d510      	bpl.n	800632c <_printf_float+0x250>
 800630a:	ee18 3a10 	vmov	r3, s16
 800630e:	4652      	mov	r2, sl
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f43f af41 	beq.w	800619e <_printf_float+0xc2>
 800631c:	f04f 0800 	mov.w	r8, #0
 8006320:	f104 091a 	add.w	r9, r4, #26
 8006324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006326:	3b01      	subs	r3, #1
 8006328:	4543      	cmp	r3, r8
 800632a:	dc09      	bgt.n	8006340 <_printf_float+0x264>
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	079b      	lsls	r3, r3, #30
 8006330:	f100 8105 	bmi.w	800653e <_printf_float+0x462>
 8006334:	68e0      	ldr	r0, [r4, #12]
 8006336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006338:	4298      	cmp	r0, r3
 800633a:	bfb8      	it	lt
 800633c:	4618      	movlt	r0, r3
 800633e:	e730      	b.n	80061a2 <_printf_float+0xc6>
 8006340:	2301      	movs	r3, #1
 8006342:	464a      	mov	r2, r9
 8006344:	4631      	mov	r1, r6
 8006346:	4628      	mov	r0, r5
 8006348:	47b8      	blx	r7
 800634a:	3001      	adds	r0, #1
 800634c:	f43f af27 	beq.w	800619e <_printf_float+0xc2>
 8006350:	f108 0801 	add.w	r8, r8, #1
 8006354:	e7e6      	b.n	8006324 <_printf_float+0x248>
 8006356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006358:	2b00      	cmp	r3, #0
 800635a:	dc39      	bgt.n	80063d0 <_printf_float+0x2f4>
 800635c:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <_printf_float+0x2f0>)
 800635e:	2301      	movs	r3, #1
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	f43f af19 	beq.w	800619e <_printf_float+0xc2>
 800636c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006370:	4313      	orrs	r3, r2
 8006372:	d102      	bne.n	800637a <_printf_float+0x29e>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	07d9      	lsls	r1, r3, #31
 8006378:	d5d8      	bpl.n	800632c <_printf_float+0x250>
 800637a:	ee18 3a10 	vmov	r3, s16
 800637e:	4652      	mov	r2, sl
 8006380:	4631      	mov	r1, r6
 8006382:	4628      	mov	r0, r5
 8006384:	47b8      	blx	r7
 8006386:	3001      	adds	r0, #1
 8006388:	f43f af09 	beq.w	800619e <_printf_float+0xc2>
 800638c:	f04f 0900 	mov.w	r9, #0
 8006390:	f104 0a1a 	add.w	sl, r4, #26
 8006394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006396:	425b      	negs	r3, r3
 8006398:	454b      	cmp	r3, r9
 800639a:	dc01      	bgt.n	80063a0 <_printf_float+0x2c4>
 800639c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800639e:	e792      	b.n	80062c6 <_printf_float+0x1ea>
 80063a0:	2301      	movs	r3, #1
 80063a2:	4652      	mov	r2, sl
 80063a4:	4631      	mov	r1, r6
 80063a6:	4628      	mov	r0, r5
 80063a8:	47b8      	blx	r7
 80063aa:	3001      	adds	r0, #1
 80063ac:	f43f aef7 	beq.w	800619e <_printf_float+0xc2>
 80063b0:	f109 0901 	add.w	r9, r9, #1
 80063b4:	e7ee      	b.n	8006394 <_printf_float+0x2b8>
 80063b6:	bf00      	nop
 80063b8:	7fefffff 	.word	0x7fefffff
 80063bc:	08008e6c 	.word	0x08008e6c
 80063c0:	08008e70 	.word	0x08008e70
 80063c4:	08008e78 	.word	0x08008e78
 80063c8:	08008e74 	.word	0x08008e74
 80063cc:	08008e7c 	.word	0x08008e7c
 80063d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063d4:	429a      	cmp	r2, r3
 80063d6:	bfa8      	it	ge
 80063d8:	461a      	movge	r2, r3
 80063da:	2a00      	cmp	r2, #0
 80063dc:	4691      	mov	r9, r2
 80063de:	dc37      	bgt.n	8006450 <_printf_float+0x374>
 80063e0:	f04f 0b00 	mov.w	fp, #0
 80063e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063e8:	f104 021a 	add.w	r2, r4, #26
 80063ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063ee:	9305      	str	r3, [sp, #20]
 80063f0:	eba3 0309 	sub.w	r3, r3, r9
 80063f4:	455b      	cmp	r3, fp
 80063f6:	dc33      	bgt.n	8006460 <_printf_float+0x384>
 80063f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063fc:	429a      	cmp	r2, r3
 80063fe:	db3b      	blt.n	8006478 <_printf_float+0x39c>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	07da      	lsls	r2, r3, #31
 8006404:	d438      	bmi.n	8006478 <_printf_float+0x39c>
 8006406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006408:	9a05      	ldr	r2, [sp, #20]
 800640a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800640c:	1a9a      	subs	r2, r3, r2
 800640e:	eba3 0901 	sub.w	r9, r3, r1
 8006412:	4591      	cmp	r9, r2
 8006414:	bfa8      	it	ge
 8006416:	4691      	movge	r9, r2
 8006418:	f1b9 0f00 	cmp.w	r9, #0
 800641c:	dc35      	bgt.n	800648a <_printf_float+0x3ae>
 800641e:	f04f 0800 	mov.w	r8, #0
 8006422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006426:	f104 0a1a 	add.w	sl, r4, #26
 800642a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800642e:	1a9b      	subs	r3, r3, r2
 8006430:	eba3 0309 	sub.w	r3, r3, r9
 8006434:	4543      	cmp	r3, r8
 8006436:	f77f af79 	ble.w	800632c <_printf_float+0x250>
 800643a:	2301      	movs	r3, #1
 800643c:	4652      	mov	r2, sl
 800643e:	4631      	mov	r1, r6
 8006440:	4628      	mov	r0, r5
 8006442:	47b8      	blx	r7
 8006444:	3001      	adds	r0, #1
 8006446:	f43f aeaa 	beq.w	800619e <_printf_float+0xc2>
 800644a:	f108 0801 	add.w	r8, r8, #1
 800644e:	e7ec      	b.n	800642a <_printf_float+0x34e>
 8006450:	4613      	mov	r3, r2
 8006452:	4631      	mov	r1, r6
 8006454:	4642      	mov	r2, r8
 8006456:	4628      	mov	r0, r5
 8006458:	47b8      	blx	r7
 800645a:	3001      	adds	r0, #1
 800645c:	d1c0      	bne.n	80063e0 <_printf_float+0x304>
 800645e:	e69e      	b.n	800619e <_printf_float+0xc2>
 8006460:	2301      	movs	r3, #1
 8006462:	4631      	mov	r1, r6
 8006464:	4628      	mov	r0, r5
 8006466:	9205      	str	r2, [sp, #20]
 8006468:	47b8      	blx	r7
 800646a:	3001      	adds	r0, #1
 800646c:	f43f ae97 	beq.w	800619e <_printf_float+0xc2>
 8006470:	9a05      	ldr	r2, [sp, #20]
 8006472:	f10b 0b01 	add.w	fp, fp, #1
 8006476:	e7b9      	b.n	80063ec <_printf_float+0x310>
 8006478:	ee18 3a10 	vmov	r3, s16
 800647c:	4652      	mov	r2, sl
 800647e:	4631      	mov	r1, r6
 8006480:	4628      	mov	r0, r5
 8006482:	47b8      	blx	r7
 8006484:	3001      	adds	r0, #1
 8006486:	d1be      	bne.n	8006406 <_printf_float+0x32a>
 8006488:	e689      	b.n	800619e <_printf_float+0xc2>
 800648a:	9a05      	ldr	r2, [sp, #20]
 800648c:	464b      	mov	r3, r9
 800648e:	4442      	add	r2, r8
 8006490:	4631      	mov	r1, r6
 8006492:	4628      	mov	r0, r5
 8006494:	47b8      	blx	r7
 8006496:	3001      	adds	r0, #1
 8006498:	d1c1      	bne.n	800641e <_printf_float+0x342>
 800649a:	e680      	b.n	800619e <_printf_float+0xc2>
 800649c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800649e:	2a01      	cmp	r2, #1
 80064a0:	dc01      	bgt.n	80064a6 <_printf_float+0x3ca>
 80064a2:	07db      	lsls	r3, r3, #31
 80064a4:	d538      	bpl.n	8006518 <_printf_float+0x43c>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4642      	mov	r2, r8
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	f43f ae74 	beq.w	800619e <_printf_float+0xc2>
 80064b6:	ee18 3a10 	vmov	r3, s16
 80064ba:	4652      	mov	r2, sl
 80064bc:	4631      	mov	r1, r6
 80064be:	4628      	mov	r0, r5
 80064c0:	47b8      	blx	r7
 80064c2:	3001      	adds	r0, #1
 80064c4:	f43f ae6b 	beq.w	800619e <_printf_float+0xc2>
 80064c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064cc:	2200      	movs	r2, #0
 80064ce:	2300      	movs	r3, #0
 80064d0:	f7fa fb1a 	bl	8000b08 <__aeabi_dcmpeq>
 80064d4:	b9d8      	cbnz	r0, 800650e <_printf_float+0x432>
 80064d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d8:	f108 0201 	add.w	r2, r8, #1
 80064dc:	3b01      	subs	r3, #1
 80064de:	4631      	mov	r1, r6
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b8      	blx	r7
 80064e4:	3001      	adds	r0, #1
 80064e6:	d10e      	bne.n	8006506 <_printf_float+0x42a>
 80064e8:	e659      	b.n	800619e <_printf_float+0xc2>
 80064ea:	2301      	movs	r3, #1
 80064ec:	4652      	mov	r2, sl
 80064ee:	4631      	mov	r1, r6
 80064f0:	4628      	mov	r0, r5
 80064f2:	47b8      	blx	r7
 80064f4:	3001      	adds	r0, #1
 80064f6:	f43f ae52 	beq.w	800619e <_printf_float+0xc2>
 80064fa:	f108 0801 	add.w	r8, r8, #1
 80064fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006500:	3b01      	subs	r3, #1
 8006502:	4543      	cmp	r3, r8
 8006504:	dcf1      	bgt.n	80064ea <_printf_float+0x40e>
 8006506:	464b      	mov	r3, r9
 8006508:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800650c:	e6dc      	b.n	80062c8 <_printf_float+0x1ec>
 800650e:	f04f 0800 	mov.w	r8, #0
 8006512:	f104 0a1a 	add.w	sl, r4, #26
 8006516:	e7f2      	b.n	80064fe <_printf_float+0x422>
 8006518:	2301      	movs	r3, #1
 800651a:	4642      	mov	r2, r8
 800651c:	e7df      	b.n	80064de <_printf_float+0x402>
 800651e:	2301      	movs	r3, #1
 8006520:	464a      	mov	r2, r9
 8006522:	4631      	mov	r1, r6
 8006524:	4628      	mov	r0, r5
 8006526:	47b8      	blx	r7
 8006528:	3001      	adds	r0, #1
 800652a:	f43f ae38 	beq.w	800619e <_printf_float+0xc2>
 800652e:	f108 0801 	add.w	r8, r8, #1
 8006532:	68e3      	ldr	r3, [r4, #12]
 8006534:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006536:	1a5b      	subs	r3, r3, r1
 8006538:	4543      	cmp	r3, r8
 800653a:	dcf0      	bgt.n	800651e <_printf_float+0x442>
 800653c:	e6fa      	b.n	8006334 <_printf_float+0x258>
 800653e:	f04f 0800 	mov.w	r8, #0
 8006542:	f104 0919 	add.w	r9, r4, #25
 8006546:	e7f4      	b.n	8006532 <_printf_float+0x456>

08006548 <_printf_common>:
 8006548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800654c:	4616      	mov	r6, r2
 800654e:	4699      	mov	r9, r3
 8006550:	688a      	ldr	r2, [r1, #8]
 8006552:	690b      	ldr	r3, [r1, #16]
 8006554:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006558:	4293      	cmp	r3, r2
 800655a:	bfb8      	it	lt
 800655c:	4613      	movlt	r3, r2
 800655e:	6033      	str	r3, [r6, #0]
 8006560:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006564:	4607      	mov	r7, r0
 8006566:	460c      	mov	r4, r1
 8006568:	b10a      	cbz	r2, 800656e <_printf_common+0x26>
 800656a:	3301      	adds	r3, #1
 800656c:	6033      	str	r3, [r6, #0]
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	0699      	lsls	r1, r3, #26
 8006572:	bf42      	ittt	mi
 8006574:	6833      	ldrmi	r3, [r6, #0]
 8006576:	3302      	addmi	r3, #2
 8006578:	6033      	strmi	r3, [r6, #0]
 800657a:	6825      	ldr	r5, [r4, #0]
 800657c:	f015 0506 	ands.w	r5, r5, #6
 8006580:	d106      	bne.n	8006590 <_printf_common+0x48>
 8006582:	f104 0a19 	add.w	sl, r4, #25
 8006586:	68e3      	ldr	r3, [r4, #12]
 8006588:	6832      	ldr	r2, [r6, #0]
 800658a:	1a9b      	subs	r3, r3, r2
 800658c:	42ab      	cmp	r3, r5
 800658e:	dc26      	bgt.n	80065de <_printf_common+0x96>
 8006590:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006594:	1e13      	subs	r3, r2, #0
 8006596:	6822      	ldr	r2, [r4, #0]
 8006598:	bf18      	it	ne
 800659a:	2301      	movne	r3, #1
 800659c:	0692      	lsls	r2, r2, #26
 800659e:	d42b      	bmi.n	80065f8 <_printf_common+0xb0>
 80065a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065a4:	4649      	mov	r1, r9
 80065a6:	4638      	mov	r0, r7
 80065a8:	47c0      	blx	r8
 80065aa:	3001      	adds	r0, #1
 80065ac:	d01e      	beq.n	80065ec <_printf_common+0xa4>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	68e5      	ldr	r5, [r4, #12]
 80065b2:	6832      	ldr	r2, [r6, #0]
 80065b4:	f003 0306 	and.w	r3, r3, #6
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	bf08      	it	eq
 80065bc:	1aad      	subeq	r5, r5, r2
 80065be:	68a3      	ldr	r3, [r4, #8]
 80065c0:	6922      	ldr	r2, [r4, #16]
 80065c2:	bf0c      	ite	eq
 80065c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065c8:	2500      	movne	r5, #0
 80065ca:	4293      	cmp	r3, r2
 80065cc:	bfc4      	itt	gt
 80065ce:	1a9b      	subgt	r3, r3, r2
 80065d0:	18ed      	addgt	r5, r5, r3
 80065d2:	2600      	movs	r6, #0
 80065d4:	341a      	adds	r4, #26
 80065d6:	42b5      	cmp	r5, r6
 80065d8:	d11a      	bne.n	8006610 <_printf_common+0xc8>
 80065da:	2000      	movs	r0, #0
 80065dc:	e008      	b.n	80065f0 <_printf_common+0xa8>
 80065de:	2301      	movs	r3, #1
 80065e0:	4652      	mov	r2, sl
 80065e2:	4649      	mov	r1, r9
 80065e4:	4638      	mov	r0, r7
 80065e6:	47c0      	blx	r8
 80065e8:	3001      	adds	r0, #1
 80065ea:	d103      	bne.n	80065f4 <_printf_common+0xac>
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f4:	3501      	adds	r5, #1
 80065f6:	e7c6      	b.n	8006586 <_printf_common+0x3e>
 80065f8:	18e1      	adds	r1, r4, r3
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	2030      	movs	r0, #48	; 0x30
 80065fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006602:	4422      	add	r2, r4
 8006604:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006608:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800660c:	3302      	adds	r3, #2
 800660e:	e7c7      	b.n	80065a0 <_printf_common+0x58>
 8006610:	2301      	movs	r3, #1
 8006612:	4622      	mov	r2, r4
 8006614:	4649      	mov	r1, r9
 8006616:	4638      	mov	r0, r7
 8006618:	47c0      	blx	r8
 800661a:	3001      	adds	r0, #1
 800661c:	d0e6      	beq.n	80065ec <_printf_common+0xa4>
 800661e:	3601      	adds	r6, #1
 8006620:	e7d9      	b.n	80065d6 <_printf_common+0x8e>
	...

08006624 <_printf_i>:
 8006624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006628:	7e0f      	ldrb	r7, [r1, #24]
 800662a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800662c:	2f78      	cmp	r7, #120	; 0x78
 800662e:	4691      	mov	r9, r2
 8006630:	4680      	mov	r8, r0
 8006632:	460c      	mov	r4, r1
 8006634:	469a      	mov	sl, r3
 8006636:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800663a:	d807      	bhi.n	800664c <_printf_i+0x28>
 800663c:	2f62      	cmp	r7, #98	; 0x62
 800663e:	d80a      	bhi.n	8006656 <_printf_i+0x32>
 8006640:	2f00      	cmp	r7, #0
 8006642:	f000 80d8 	beq.w	80067f6 <_printf_i+0x1d2>
 8006646:	2f58      	cmp	r7, #88	; 0x58
 8006648:	f000 80a3 	beq.w	8006792 <_printf_i+0x16e>
 800664c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006650:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006654:	e03a      	b.n	80066cc <_printf_i+0xa8>
 8006656:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800665a:	2b15      	cmp	r3, #21
 800665c:	d8f6      	bhi.n	800664c <_printf_i+0x28>
 800665e:	a101      	add	r1, pc, #4	; (adr r1, 8006664 <_printf_i+0x40>)
 8006660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006664:	080066bd 	.word	0x080066bd
 8006668:	080066d1 	.word	0x080066d1
 800666c:	0800664d 	.word	0x0800664d
 8006670:	0800664d 	.word	0x0800664d
 8006674:	0800664d 	.word	0x0800664d
 8006678:	0800664d 	.word	0x0800664d
 800667c:	080066d1 	.word	0x080066d1
 8006680:	0800664d 	.word	0x0800664d
 8006684:	0800664d 	.word	0x0800664d
 8006688:	0800664d 	.word	0x0800664d
 800668c:	0800664d 	.word	0x0800664d
 8006690:	080067dd 	.word	0x080067dd
 8006694:	08006701 	.word	0x08006701
 8006698:	080067bf 	.word	0x080067bf
 800669c:	0800664d 	.word	0x0800664d
 80066a0:	0800664d 	.word	0x0800664d
 80066a4:	080067ff 	.word	0x080067ff
 80066a8:	0800664d 	.word	0x0800664d
 80066ac:	08006701 	.word	0x08006701
 80066b0:	0800664d 	.word	0x0800664d
 80066b4:	0800664d 	.word	0x0800664d
 80066b8:	080067c7 	.word	0x080067c7
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	1d1a      	adds	r2, r3, #4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	602a      	str	r2, [r5, #0]
 80066c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0a3      	b.n	8006818 <_printf_i+0x1f4>
 80066d0:	6820      	ldr	r0, [r4, #0]
 80066d2:	6829      	ldr	r1, [r5, #0]
 80066d4:	0606      	lsls	r6, r0, #24
 80066d6:	f101 0304 	add.w	r3, r1, #4
 80066da:	d50a      	bpl.n	80066f2 <_printf_i+0xce>
 80066dc:	680e      	ldr	r6, [r1, #0]
 80066de:	602b      	str	r3, [r5, #0]
 80066e0:	2e00      	cmp	r6, #0
 80066e2:	da03      	bge.n	80066ec <_printf_i+0xc8>
 80066e4:	232d      	movs	r3, #45	; 0x2d
 80066e6:	4276      	negs	r6, r6
 80066e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066ec:	485e      	ldr	r0, [pc, #376]	; (8006868 <_printf_i+0x244>)
 80066ee:	230a      	movs	r3, #10
 80066f0:	e019      	b.n	8006726 <_printf_i+0x102>
 80066f2:	680e      	ldr	r6, [r1, #0]
 80066f4:	602b      	str	r3, [r5, #0]
 80066f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066fa:	bf18      	it	ne
 80066fc:	b236      	sxthne	r6, r6
 80066fe:	e7ef      	b.n	80066e0 <_printf_i+0xbc>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	6820      	ldr	r0, [r4, #0]
 8006704:	1d19      	adds	r1, r3, #4
 8006706:	6029      	str	r1, [r5, #0]
 8006708:	0601      	lsls	r1, r0, #24
 800670a:	d501      	bpl.n	8006710 <_printf_i+0xec>
 800670c:	681e      	ldr	r6, [r3, #0]
 800670e:	e002      	b.n	8006716 <_printf_i+0xf2>
 8006710:	0646      	lsls	r6, r0, #25
 8006712:	d5fb      	bpl.n	800670c <_printf_i+0xe8>
 8006714:	881e      	ldrh	r6, [r3, #0]
 8006716:	4854      	ldr	r0, [pc, #336]	; (8006868 <_printf_i+0x244>)
 8006718:	2f6f      	cmp	r7, #111	; 0x6f
 800671a:	bf0c      	ite	eq
 800671c:	2308      	moveq	r3, #8
 800671e:	230a      	movne	r3, #10
 8006720:	2100      	movs	r1, #0
 8006722:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006726:	6865      	ldr	r5, [r4, #4]
 8006728:	60a5      	str	r5, [r4, #8]
 800672a:	2d00      	cmp	r5, #0
 800672c:	bfa2      	ittt	ge
 800672e:	6821      	ldrge	r1, [r4, #0]
 8006730:	f021 0104 	bicge.w	r1, r1, #4
 8006734:	6021      	strge	r1, [r4, #0]
 8006736:	b90e      	cbnz	r6, 800673c <_printf_i+0x118>
 8006738:	2d00      	cmp	r5, #0
 800673a:	d04d      	beq.n	80067d8 <_printf_i+0x1b4>
 800673c:	4615      	mov	r5, r2
 800673e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006742:	fb03 6711 	mls	r7, r3, r1, r6
 8006746:	5dc7      	ldrb	r7, [r0, r7]
 8006748:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800674c:	4637      	mov	r7, r6
 800674e:	42bb      	cmp	r3, r7
 8006750:	460e      	mov	r6, r1
 8006752:	d9f4      	bls.n	800673e <_printf_i+0x11a>
 8006754:	2b08      	cmp	r3, #8
 8006756:	d10b      	bne.n	8006770 <_printf_i+0x14c>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	07de      	lsls	r6, r3, #31
 800675c:	d508      	bpl.n	8006770 <_printf_i+0x14c>
 800675e:	6923      	ldr	r3, [r4, #16]
 8006760:	6861      	ldr	r1, [r4, #4]
 8006762:	4299      	cmp	r1, r3
 8006764:	bfde      	ittt	le
 8006766:	2330      	movle	r3, #48	; 0x30
 8006768:	f805 3c01 	strble.w	r3, [r5, #-1]
 800676c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006770:	1b52      	subs	r2, r2, r5
 8006772:	6122      	str	r2, [r4, #16]
 8006774:	f8cd a000 	str.w	sl, [sp]
 8006778:	464b      	mov	r3, r9
 800677a:	aa03      	add	r2, sp, #12
 800677c:	4621      	mov	r1, r4
 800677e:	4640      	mov	r0, r8
 8006780:	f7ff fee2 	bl	8006548 <_printf_common>
 8006784:	3001      	adds	r0, #1
 8006786:	d14c      	bne.n	8006822 <_printf_i+0x1fe>
 8006788:	f04f 30ff 	mov.w	r0, #4294967295
 800678c:	b004      	add	sp, #16
 800678e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006792:	4835      	ldr	r0, [pc, #212]	; (8006868 <_printf_i+0x244>)
 8006794:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006798:	6829      	ldr	r1, [r5, #0]
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	f851 6b04 	ldr.w	r6, [r1], #4
 80067a0:	6029      	str	r1, [r5, #0]
 80067a2:	061d      	lsls	r5, r3, #24
 80067a4:	d514      	bpl.n	80067d0 <_printf_i+0x1ac>
 80067a6:	07df      	lsls	r7, r3, #31
 80067a8:	bf44      	itt	mi
 80067aa:	f043 0320 	orrmi.w	r3, r3, #32
 80067ae:	6023      	strmi	r3, [r4, #0]
 80067b0:	b91e      	cbnz	r6, 80067ba <_printf_i+0x196>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	f023 0320 	bic.w	r3, r3, #32
 80067b8:	6023      	str	r3, [r4, #0]
 80067ba:	2310      	movs	r3, #16
 80067bc:	e7b0      	b.n	8006720 <_printf_i+0xfc>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	f043 0320 	orr.w	r3, r3, #32
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	2378      	movs	r3, #120	; 0x78
 80067c8:	4828      	ldr	r0, [pc, #160]	; (800686c <_printf_i+0x248>)
 80067ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067ce:	e7e3      	b.n	8006798 <_printf_i+0x174>
 80067d0:	0659      	lsls	r1, r3, #25
 80067d2:	bf48      	it	mi
 80067d4:	b2b6      	uxthmi	r6, r6
 80067d6:	e7e6      	b.n	80067a6 <_printf_i+0x182>
 80067d8:	4615      	mov	r5, r2
 80067da:	e7bb      	b.n	8006754 <_printf_i+0x130>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	6826      	ldr	r6, [r4, #0]
 80067e0:	6961      	ldr	r1, [r4, #20]
 80067e2:	1d18      	adds	r0, r3, #4
 80067e4:	6028      	str	r0, [r5, #0]
 80067e6:	0635      	lsls	r5, r6, #24
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	d501      	bpl.n	80067f0 <_printf_i+0x1cc>
 80067ec:	6019      	str	r1, [r3, #0]
 80067ee:	e002      	b.n	80067f6 <_printf_i+0x1d2>
 80067f0:	0670      	lsls	r0, r6, #25
 80067f2:	d5fb      	bpl.n	80067ec <_printf_i+0x1c8>
 80067f4:	8019      	strh	r1, [r3, #0]
 80067f6:	2300      	movs	r3, #0
 80067f8:	6123      	str	r3, [r4, #16]
 80067fa:	4615      	mov	r5, r2
 80067fc:	e7ba      	b.n	8006774 <_printf_i+0x150>
 80067fe:	682b      	ldr	r3, [r5, #0]
 8006800:	1d1a      	adds	r2, r3, #4
 8006802:	602a      	str	r2, [r5, #0]
 8006804:	681d      	ldr	r5, [r3, #0]
 8006806:	6862      	ldr	r2, [r4, #4]
 8006808:	2100      	movs	r1, #0
 800680a:	4628      	mov	r0, r5
 800680c:	f7f9 fd08 	bl	8000220 <memchr>
 8006810:	b108      	cbz	r0, 8006816 <_printf_i+0x1f2>
 8006812:	1b40      	subs	r0, r0, r5
 8006814:	6060      	str	r0, [r4, #4]
 8006816:	6863      	ldr	r3, [r4, #4]
 8006818:	6123      	str	r3, [r4, #16]
 800681a:	2300      	movs	r3, #0
 800681c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006820:	e7a8      	b.n	8006774 <_printf_i+0x150>
 8006822:	6923      	ldr	r3, [r4, #16]
 8006824:	462a      	mov	r2, r5
 8006826:	4649      	mov	r1, r9
 8006828:	4640      	mov	r0, r8
 800682a:	47d0      	blx	sl
 800682c:	3001      	adds	r0, #1
 800682e:	d0ab      	beq.n	8006788 <_printf_i+0x164>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	079b      	lsls	r3, r3, #30
 8006834:	d413      	bmi.n	800685e <_printf_i+0x23a>
 8006836:	68e0      	ldr	r0, [r4, #12]
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	4298      	cmp	r0, r3
 800683c:	bfb8      	it	lt
 800683e:	4618      	movlt	r0, r3
 8006840:	e7a4      	b.n	800678c <_printf_i+0x168>
 8006842:	2301      	movs	r3, #1
 8006844:	4632      	mov	r2, r6
 8006846:	4649      	mov	r1, r9
 8006848:	4640      	mov	r0, r8
 800684a:	47d0      	blx	sl
 800684c:	3001      	adds	r0, #1
 800684e:	d09b      	beq.n	8006788 <_printf_i+0x164>
 8006850:	3501      	adds	r5, #1
 8006852:	68e3      	ldr	r3, [r4, #12]
 8006854:	9903      	ldr	r1, [sp, #12]
 8006856:	1a5b      	subs	r3, r3, r1
 8006858:	42ab      	cmp	r3, r5
 800685a:	dcf2      	bgt.n	8006842 <_printf_i+0x21e>
 800685c:	e7eb      	b.n	8006836 <_printf_i+0x212>
 800685e:	2500      	movs	r5, #0
 8006860:	f104 0619 	add.w	r6, r4, #25
 8006864:	e7f5      	b.n	8006852 <_printf_i+0x22e>
 8006866:	bf00      	nop
 8006868:	08008e7e 	.word	0x08008e7e
 800686c:	08008e8f 	.word	0x08008e8f

08006870 <siprintf>:
 8006870:	b40e      	push	{r1, r2, r3}
 8006872:	b500      	push	{lr}
 8006874:	b09c      	sub	sp, #112	; 0x70
 8006876:	ab1d      	add	r3, sp, #116	; 0x74
 8006878:	9002      	str	r0, [sp, #8]
 800687a:	9006      	str	r0, [sp, #24]
 800687c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006880:	4809      	ldr	r0, [pc, #36]	; (80068a8 <siprintf+0x38>)
 8006882:	9107      	str	r1, [sp, #28]
 8006884:	9104      	str	r1, [sp, #16]
 8006886:	4909      	ldr	r1, [pc, #36]	; (80068ac <siprintf+0x3c>)
 8006888:	f853 2b04 	ldr.w	r2, [r3], #4
 800688c:	9105      	str	r1, [sp, #20]
 800688e:	6800      	ldr	r0, [r0, #0]
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	a902      	add	r1, sp, #8
 8006894:	f001 fb86 	bl	8007fa4 <_svfiprintf_r>
 8006898:	9b02      	ldr	r3, [sp, #8]
 800689a:	2200      	movs	r2, #0
 800689c:	701a      	strb	r2, [r3, #0]
 800689e:	b01c      	add	sp, #112	; 0x70
 80068a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068a4:	b003      	add	sp, #12
 80068a6:	4770      	bx	lr
 80068a8:	2000000c 	.word	0x2000000c
 80068ac:	ffff0208 	.word	0xffff0208

080068b0 <strcat>:
 80068b0:	b510      	push	{r4, lr}
 80068b2:	4602      	mov	r2, r0
 80068b4:	7814      	ldrb	r4, [r2, #0]
 80068b6:	4613      	mov	r3, r2
 80068b8:	3201      	adds	r2, #1
 80068ba:	2c00      	cmp	r4, #0
 80068bc:	d1fa      	bne.n	80068b4 <strcat+0x4>
 80068be:	3b01      	subs	r3, #1
 80068c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80068c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80068c8:	2a00      	cmp	r2, #0
 80068ca:	d1f9      	bne.n	80068c0 <strcat+0x10>
 80068cc:	bd10      	pop	{r4, pc}

080068ce <quorem>:
 80068ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d2:	6903      	ldr	r3, [r0, #16]
 80068d4:	690c      	ldr	r4, [r1, #16]
 80068d6:	42a3      	cmp	r3, r4
 80068d8:	4607      	mov	r7, r0
 80068da:	f2c0 8081 	blt.w	80069e0 <quorem+0x112>
 80068de:	3c01      	subs	r4, #1
 80068e0:	f101 0814 	add.w	r8, r1, #20
 80068e4:	f100 0514 	add.w	r5, r0, #20
 80068e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068f6:	3301      	adds	r3, #1
 80068f8:	429a      	cmp	r2, r3
 80068fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006902:	fbb2 f6f3 	udiv	r6, r2, r3
 8006906:	d331      	bcc.n	800696c <quorem+0x9e>
 8006908:	f04f 0e00 	mov.w	lr, #0
 800690c:	4640      	mov	r0, r8
 800690e:	46ac      	mov	ip, r5
 8006910:	46f2      	mov	sl, lr
 8006912:	f850 2b04 	ldr.w	r2, [r0], #4
 8006916:	b293      	uxth	r3, r2
 8006918:	fb06 e303 	mla	r3, r6, r3, lr
 800691c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006920:	b29b      	uxth	r3, r3
 8006922:	ebaa 0303 	sub.w	r3, sl, r3
 8006926:	f8dc a000 	ldr.w	sl, [ip]
 800692a:	0c12      	lsrs	r2, r2, #16
 800692c:	fa13 f38a 	uxtah	r3, r3, sl
 8006930:	fb06 e202 	mla	r2, r6, r2, lr
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	9b00      	ldr	r3, [sp, #0]
 8006938:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800693c:	b292      	uxth	r2, r2
 800693e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006942:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006946:	f8bd 3000 	ldrh.w	r3, [sp]
 800694a:	4581      	cmp	r9, r0
 800694c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006950:	f84c 3b04 	str.w	r3, [ip], #4
 8006954:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006958:	d2db      	bcs.n	8006912 <quorem+0x44>
 800695a:	f855 300b 	ldr.w	r3, [r5, fp]
 800695e:	b92b      	cbnz	r3, 800696c <quorem+0x9e>
 8006960:	9b01      	ldr	r3, [sp, #4]
 8006962:	3b04      	subs	r3, #4
 8006964:	429d      	cmp	r5, r3
 8006966:	461a      	mov	r2, r3
 8006968:	d32e      	bcc.n	80069c8 <quorem+0xfa>
 800696a:	613c      	str	r4, [r7, #16]
 800696c:	4638      	mov	r0, r7
 800696e:	f001 f8c5 	bl	8007afc <__mcmp>
 8006972:	2800      	cmp	r0, #0
 8006974:	db24      	blt.n	80069c0 <quorem+0xf2>
 8006976:	3601      	adds	r6, #1
 8006978:	4628      	mov	r0, r5
 800697a:	f04f 0c00 	mov.w	ip, #0
 800697e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006982:	f8d0 e000 	ldr.w	lr, [r0]
 8006986:	b293      	uxth	r3, r2
 8006988:	ebac 0303 	sub.w	r3, ip, r3
 800698c:	0c12      	lsrs	r2, r2, #16
 800698e:	fa13 f38e 	uxtah	r3, r3, lr
 8006992:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006996:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800699a:	b29b      	uxth	r3, r3
 800699c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069a0:	45c1      	cmp	r9, r8
 80069a2:	f840 3b04 	str.w	r3, [r0], #4
 80069a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069aa:	d2e8      	bcs.n	800697e <quorem+0xb0>
 80069ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069b4:	b922      	cbnz	r2, 80069c0 <quorem+0xf2>
 80069b6:	3b04      	subs	r3, #4
 80069b8:	429d      	cmp	r5, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	d30a      	bcc.n	80069d4 <quorem+0x106>
 80069be:	613c      	str	r4, [r7, #16]
 80069c0:	4630      	mov	r0, r6
 80069c2:	b003      	add	sp, #12
 80069c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c8:	6812      	ldr	r2, [r2, #0]
 80069ca:	3b04      	subs	r3, #4
 80069cc:	2a00      	cmp	r2, #0
 80069ce:	d1cc      	bne.n	800696a <quorem+0x9c>
 80069d0:	3c01      	subs	r4, #1
 80069d2:	e7c7      	b.n	8006964 <quorem+0x96>
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	3b04      	subs	r3, #4
 80069d8:	2a00      	cmp	r2, #0
 80069da:	d1f0      	bne.n	80069be <quorem+0xf0>
 80069dc:	3c01      	subs	r4, #1
 80069de:	e7eb      	b.n	80069b8 <quorem+0xea>
 80069e0:	2000      	movs	r0, #0
 80069e2:	e7ee      	b.n	80069c2 <quorem+0xf4>
 80069e4:	0000      	movs	r0, r0
	...

080069e8 <_dtoa_r>:
 80069e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	ed2d 8b04 	vpush	{d8-d9}
 80069f0:	ec57 6b10 	vmov	r6, r7, d0
 80069f4:	b093      	sub	sp, #76	; 0x4c
 80069f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80069f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80069fc:	9106      	str	r1, [sp, #24]
 80069fe:	ee10 aa10 	vmov	sl, s0
 8006a02:	4604      	mov	r4, r0
 8006a04:	9209      	str	r2, [sp, #36]	; 0x24
 8006a06:	930c      	str	r3, [sp, #48]	; 0x30
 8006a08:	46bb      	mov	fp, r7
 8006a0a:	b975      	cbnz	r5, 8006a2a <_dtoa_r+0x42>
 8006a0c:	2010      	movs	r0, #16
 8006a0e:	f000 fddd 	bl	80075cc <malloc>
 8006a12:	4602      	mov	r2, r0
 8006a14:	6260      	str	r0, [r4, #36]	; 0x24
 8006a16:	b920      	cbnz	r0, 8006a22 <_dtoa_r+0x3a>
 8006a18:	4ba7      	ldr	r3, [pc, #668]	; (8006cb8 <_dtoa_r+0x2d0>)
 8006a1a:	21ea      	movs	r1, #234	; 0xea
 8006a1c:	48a7      	ldr	r0, [pc, #668]	; (8006cbc <_dtoa_r+0x2d4>)
 8006a1e:	f001 fbd1 	bl	80081c4 <__assert_func>
 8006a22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a26:	6005      	str	r5, [r0, #0]
 8006a28:	60c5      	str	r5, [r0, #12]
 8006a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a2c:	6819      	ldr	r1, [r3, #0]
 8006a2e:	b151      	cbz	r1, 8006a46 <_dtoa_r+0x5e>
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	604a      	str	r2, [r1, #4]
 8006a34:	2301      	movs	r3, #1
 8006a36:	4093      	lsls	r3, r2
 8006a38:	608b      	str	r3, [r1, #8]
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 fe1c 	bl	8007678 <_Bfree>
 8006a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	1e3b      	subs	r3, r7, #0
 8006a48:	bfaa      	itet	ge
 8006a4a:	2300      	movge	r3, #0
 8006a4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006a50:	f8c8 3000 	strge.w	r3, [r8]
 8006a54:	4b9a      	ldr	r3, [pc, #616]	; (8006cc0 <_dtoa_r+0x2d8>)
 8006a56:	bfbc      	itt	lt
 8006a58:	2201      	movlt	r2, #1
 8006a5a:	f8c8 2000 	strlt.w	r2, [r8]
 8006a5e:	ea33 030b 	bics.w	r3, r3, fp
 8006a62:	d11b      	bne.n	8006a9c <_dtoa_r+0xb4>
 8006a64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a66:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a70:	4333      	orrs	r3, r6
 8006a72:	f000 8592 	beq.w	800759a <_dtoa_r+0xbb2>
 8006a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a78:	b963      	cbnz	r3, 8006a94 <_dtoa_r+0xac>
 8006a7a:	4b92      	ldr	r3, [pc, #584]	; (8006cc4 <_dtoa_r+0x2dc>)
 8006a7c:	e022      	b.n	8006ac4 <_dtoa_r+0xdc>
 8006a7e:	4b92      	ldr	r3, [pc, #584]	; (8006cc8 <_dtoa_r+0x2e0>)
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	3308      	adds	r3, #8
 8006a84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	9801      	ldr	r0, [sp, #4]
 8006a8a:	b013      	add	sp, #76	; 0x4c
 8006a8c:	ecbd 8b04 	vpop	{d8-d9}
 8006a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a94:	4b8b      	ldr	r3, [pc, #556]	; (8006cc4 <_dtoa_r+0x2dc>)
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	3303      	adds	r3, #3
 8006a9a:	e7f3      	b.n	8006a84 <_dtoa_r+0x9c>
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	4650      	mov	r0, sl
 8006aa2:	4659      	mov	r1, fp
 8006aa4:	f7fa f830 	bl	8000b08 <__aeabi_dcmpeq>
 8006aa8:	ec4b ab19 	vmov	d9, sl, fp
 8006aac:	4680      	mov	r8, r0
 8006aae:	b158      	cbz	r0, 8006ac8 <_dtoa_r+0xe0>
 8006ab0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 856b 	beq.w	8007594 <_dtoa_r+0xbac>
 8006abe:	4883      	ldr	r0, [pc, #524]	; (8006ccc <_dtoa_r+0x2e4>)
 8006ac0:	6018      	str	r0, [r3, #0]
 8006ac2:	1e43      	subs	r3, r0, #1
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	e7df      	b.n	8006a88 <_dtoa_r+0xa0>
 8006ac8:	ec4b ab10 	vmov	d0, sl, fp
 8006acc:	aa10      	add	r2, sp, #64	; 0x40
 8006ace:	a911      	add	r1, sp, #68	; 0x44
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f001 f8b9 	bl	8007c48 <__d2b>
 8006ad6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006ada:	ee08 0a10 	vmov	s16, r0
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	f000 8084 	beq.w	8006bec <_dtoa_r+0x204>
 8006ae4:	ee19 3a90 	vmov	r3, s19
 8006ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006af0:	4656      	mov	r6, sl
 8006af2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006af6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006afa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006afe:	4b74      	ldr	r3, [pc, #464]	; (8006cd0 <_dtoa_r+0x2e8>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	4630      	mov	r0, r6
 8006b04:	4639      	mov	r1, r7
 8006b06:	f7f9 fbdf 	bl	80002c8 <__aeabi_dsub>
 8006b0a:	a365      	add	r3, pc, #404	; (adr r3, 8006ca0 <_dtoa_r+0x2b8>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fd92 	bl	8000638 <__aeabi_dmul>
 8006b14:	a364      	add	r3, pc, #400	; (adr r3, 8006ca8 <_dtoa_r+0x2c0>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f7f9 fbd7 	bl	80002cc <__adddf3>
 8006b1e:	4606      	mov	r6, r0
 8006b20:	4628      	mov	r0, r5
 8006b22:	460f      	mov	r7, r1
 8006b24:	f7f9 fd1e 	bl	8000564 <__aeabi_i2d>
 8006b28:	a361      	add	r3, pc, #388	; (adr r3, 8006cb0 <_dtoa_r+0x2c8>)
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f7f9 fd83 	bl	8000638 <__aeabi_dmul>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4630      	mov	r0, r6
 8006b38:	4639      	mov	r1, r7
 8006b3a:	f7f9 fbc7 	bl	80002cc <__adddf3>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460f      	mov	r7, r1
 8006b42:	f7fa f829 	bl	8000b98 <__aeabi_d2iz>
 8006b46:	2200      	movs	r2, #0
 8006b48:	9000      	str	r0, [sp, #0]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	4639      	mov	r1, r7
 8006b50:	f7f9 ffe4 	bl	8000b1c <__aeabi_dcmplt>
 8006b54:	b150      	cbz	r0, 8006b6c <_dtoa_r+0x184>
 8006b56:	9800      	ldr	r0, [sp, #0]
 8006b58:	f7f9 fd04 	bl	8000564 <__aeabi_i2d>
 8006b5c:	4632      	mov	r2, r6
 8006b5e:	463b      	mov	r3, r7
 8006b60:	f7f9 ffd2 	bl	8000b08 <__aeabi_dcmpeq>
 8006b64:	b910      	cbnz	r0, 8006b6c <_dtoa_r+0x184>
 8006b66:	9b00      	ldr	r3, [sp, #0]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	9b00      	ldr	r3, [sp, #0]
 8006b6e:	2b16      	cmp	r3, #22
 8006b70:	d85a      	bhi.n	8006c28 <_dtoa_r+0x240>
 8006b72:	9a00      	ldr	r2, [sp, #0]
 8006b74:	4b57      	ldr	r3, [pc, #348]	; (8006cd4 <_dtoa_r+0x2ec>)
 8006b76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	ec51 0b19 	vmov	r0, r1, d9
 8006b82:	f7f9 ffcb 	bl	8000b1c <__aeabi_dcmplt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d050      	beq.n	8006c2c <_dtoa_r+0x244>
 8006b8a:	9b00      	ldr	r3, [sp, #0]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b96:	1b5d      	subs	r5, r3, r5
 8006b98:	1e6b      	subs	r3, r5, #1
 8006b9a:	9305      	str	r3, [sp, #20]
 8006b9c:	bf45      	ittet	mi
 8006b9e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006ba2:	9304      	strmi	r3, [sp, #16]
 8006ba4:	2300      	movpl	r3, #0
 8006ba6:	2300      	movmi	r3, #0
 8006ba8:	bf4c      	ite	mi
 8006baa:	9305      	strmi	r3, [sp, #20]
 8006bac:	9304      	strpl	r3, [sp, #16]
 8006bae:	9b00      	ldr	r3, [sp, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	db3d      	blt.n	8006c30 <_dtoa_r+0x248>
 8006bb4:	9b05      	ldr	r3, [sp, #20]
 8006bb6:	9a00      	ldr	r2, [sp, #0]
 8006bb8:	920a      	str	r2, [sp, #40]	; 0x28
 8006bba:	4413      	add	r3, r2
 8006bbc:	9305      	str	r3, [sp, #20]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9307      	str	r3, [sp, #28]
 8006bc2:	9b06      	ldr	r3, [sp, #24]
 8006bc4:	2b09      	cmp	r3, #9
 8006bc6:	f200 8089 	bhi.w	8006cdc <_dtoa_r+0x2f4>
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	bfc4      	itt	gt
 8006bce:	3b04      	subgt	r3, #4
 8006bd0:	9306      	strgt	r3, [sp, #24]
 8006bd2:	9b06      	ldr	r3, [sp, #24]
 8006bd4:	f1a3 0302 	sub.w	r3, r3, #2
 8006bd8:	bfcc      	ite	gt
 8006bda:	2500      	movgt	r5, #0
 8006bdc:	2501      	movle	r5, #1
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	f200 8087 	bhi.w	8006cf2 <_dtoa_r+0x30a>
 8006be4:	e8df f003 	tbb	[pc, r3]
 8006be8:	59383a2d 	.word	0x59383a2d
 8006bec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006bf0:	441d      	add	r5, r3
 8006bf2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	bfc1      	itttt	gt
 8006bfa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bfe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c02:	fa0b f303 	lslgt.w	r3, fp, r3
 8006c06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c0a:	bfda      	itte	le
 8006c0c:	f1c3 0320 	rsble	r3, r3, #32
 8006c10:	fa06 f003 	lslle.w	r0, r6, r3
 8006c14:	4318      	orrgt	r0, r3
 8006c16:	f7f9 fc95 	bl	8000544 <__aeabi_ui2d>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c22:	3d01      	subs	r5, #1
 8006c24:	930e      	str	r3, [sp, #56]	; 0x38
 8006c26:	e76a      	b.n	8006afe <_dtoa_r+0x116>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e7b2      	b.n	8006b92 <_dtoa_r+0x1aa>
 8006c2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c2e:	e7b1      	b.n	8006b94 <_dtoa_r+0x1ac>
 8006c30:	9b04      	ldr	r3, [sp, #16]
 8006c32:	9a00      	ldr	r2, [sp, #0]
 8006c34:	1a9b      	subs	r3, r3, r2
 8006c36:	9304      	str	r3, [sp, #16]
 8006c38:	4253      	negs	r3, r2
 8006c3a:	9307      	str	r3, [sp, #28]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c40:	e7bf      	b.n	8006bc2 <_dtoa_r+0x1da>
 8006c42:	2300      	movs	r3, #0
 8006c44:	9308      	str	r3, [sp, #32]
 8006c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	dc55      	bgt.n	8006cf8 <_dtoa_r+0x310>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c52:	461a      	mov	r2, r3
 8006c54:	9209      	str	r2, [sp, #36]	; 0x24
 8006c56:	e00c      	b.n	8006c72 <_dtoa_r+0x28a>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e7f3      	b.n	8006c44 <_dtoa_r+0x25c>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c60:	9308      	str	r3, [sp, #32]
 8006c62:	9b00      	ldr	r3, [sp, #0]
 8006c64:	4413      	add	r3, r2
 8006c66:	9302      	str	r3, [sp, #8]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	9303      	str	r3, [sp, #12]
 8006c6e:	bfb8      	it	lt
 8006c70:	2301      	movlt	r3, #1
 8006c72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c74:	2200      	movs	r2, #0
 8006c76:	6042      	str	r2, [r0, #4]
 8006c78:	2204      	movs	r2, #4
 8006c7a:	f102 0614 	add.w	r6, r2, #20
 8006c7e:	429e      	cmp	r6, r3
 8006c80:	6841      	ldr	r1, [r0, #4]
 8006c82:	d93d      	bls.n	8006d00 <_dtoa_r+0x318>
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 fcb7 	bl	80075f8 <_Balloc>
 8006c8a:	9001      	str	r0, [sp, #4]
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d13b      	bne.n	8006d08 <_dtoa_r+0x320>
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <_dtoa_r+0x2f0>)
 8006c92:	4602      	mov	r2, r0
 8006c94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006c98:	e6c0      	b.n	8006a1c <_dtoa_r+0x34>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e7df      	b.n	8006c5e <_dtoa_r+0x276>
 8006c9e:	bf00      	nop
 8006ca0:	636f4361 	.word	0x636f4361
 8006ca4:	3fd287a7 	.word	0x3fd287a7
 8006ca8:	8b60c8b3 	.word	0x8b60c8b3
 8006cac:	3fc68a28 	.word	0x3fc68a28
 8006cb0:	509f79fb 	.word	0x509f79fb
 8006cb4:	3fd34413 	.word	0x3fd34413
 8006cb8:	08008ead 	.word	0x08008ead
 8006cbc:	08008ec4 	.word	0x08008ec4
 8006cc0:	7ff00000 	.word	0x7ff00000
 8006cc4:	08008ea9 	.word	0x08008ea9
 8006cc8:	08008ea0 	.word	0x08008ea0
 8006ccc:	08008e7d 	.word	0x08008e7d
 8006cd0:	3ff80000 	.word	0x3ff80000
 8006cd4:	08008fb8 	.word	0x08008fb8
 8006cd8:	08008f1f 	.word	0x08008f1f
 8006cdc:	2501      	movs	r5, #1
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9306      	str	r3, [sp, #24]
 8006ce2:	9508      	str	r5, [sp, #32]
 8006ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006cec:	2200      	movs	r2, #0
 8006cee:	2312      	movs	r3, #18
 8006cf0:	e7b0      	b.n	8006c54 <_dtoa_r+0x26c>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	9308      	str	r3, [sp, #32]
 8006cf6:	e7f5      	b.n	8006ce4 <_dtoa_r+0x2fc>
 8006cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006cfe:	e7b8      	b.n	8006c72 <_dtoa_r+0x28a>
 8006d00:	3101      	adds	r1, #1
 8006d02:	6041      	str	r1, [r0, #4]
 8006d04:	0052      	lsls	r2, r2, #1
 8006d06:	e7b8      	b.n	8006c7a <_dtoa_r+0x292>
 8006d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d0a:	9a01      	ldr	r2, [sp, #4]
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	2b0e      	cmp	r3, #14
 8006d12:	f200 809d 	bhi.w	8006e50 <_dtoa_r+0x468>
 8006d16:	2d00      	cmp	r5, #0
 8006d18:	f000 809a 	beq.w	8006e50 <_dtoa_r+0x468>
 8006d1c:	9b00      	ldr	r3, [sp, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	dd32      	ble.n	8006d88 <_dtoa_r+0x3a0>
 8006d22:	4ab7      	ldr	r2, [pc, #732]	; (8007000 <_dtoa_r+0x618>)
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d30:	9b00      	ldr	r3, [sp, #0]
 8006d32:	05d8      	lsls	r0, r3, #23
 8006d34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006d38:	d516      	bpl.n	8006d68 <_dtoa_r+0x380>
 8006d3a:	4bb2      	ldr	r3, [pc, #712]	; (8007004 <_dtoa_r+0x61c>)
 8006d3c:	ec51 0b19 	vmov	r0, r1, d9
 8006d40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d44:	f7f9 fda2 	bl	800088c <__aeabi_ddiv>
 8006d48:	f007 070f 	and.w	r7, r7, #15
 8006d4c:	4682      	mov	sl, r0
 8006d4e:	468b      	mov	fp, r1
 8006d50:	2503      	movs	r5, #3
 8006d52:	4eac      	ldr	r6, [pc, #688]	; (8007004 <_dtoa_r+0x61c>)
 8006d54:	b957      	cbnz	r7, 8006d6c <_dtoa_r+0x384>
 8006d56:	4642      	mov	r2, r8
 8006d58:	464b      	mov	r3, r9
 8006d5a:	4650      	mov	r0, sl
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	f7f9 fd95 	bl	800088c <__aeabi_ddiv>
 8006d62:	4682      	mov	sl, r0
 8006d64:	468b      	mov	fp, r1
 8006d66:	e028      	b.n	8006dba <_dtoa_r+0x3d2>
 8006d68:	2502      	movs	r5, #2
 8006d6a:	e7f2      	b.n	8006d52 <_dtoa_r+0x36a>
 8006d6c:	07f9      	lsls	r1, r7, #31
 8006d6e:	d508      	bpl.n	8006d82 <_dtoa_r+0x39a>
 8006d70:	4640      	mov	r0, r8
 8006d72:	4649      	mov	r1, r9
 8006d74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d78:	f7f9 fc5e 	bl	8000638 <__aeabi_dmul>
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	4680      	mov	r8, r0
 8006d80:	4689      	mov	r9, r1
 8006d82:	107f      	asrs	r7, r7, #1
 8006d84:	3608      	adds	r6, #8
 8006d86:	e7e5      	b.n	8006d54 <_dtoa_r+0x36c>
 8006d88:	f000 809b 	beq.w	8006ec2 <_dtoa_r+0x4da>
 8006d8c:	9b00      	ldr	r3, [sp, #0]
 8006d8e:	4f9d      	ldr	r7, [pc, #628]	; (8007004 <_dtoa_r+0x61c>)
 8006d90:	425e      	negs	r6, r3
 8006d92:	4b9b      	ldr	r3, [pc, #620]	; (8007000 <_dtoa_r+0x618>)
 8006d94:	f006 020f 	and.w	r2, r6, #15
 8006d98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	ec51 0b19 	vmov	r0, r1, d9
 8006da4:	f7f9 fc48 	bl	8000638 <__aeabi_dmul>
 8006da8:	1136      	asrs	r6, r6, #4
 8006daa:	4682      	mov	sl, r0
 8006dac:	468b      	mov	fp, r1
 8006dae:	2300      	movs	r3, #0
 8006db0:	2502      	movs	r5, #2
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	d17a      	bne.n	8006eac <_dtoa_r+0x4c4>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1d3      	bne.n	8006d62 <_dtoa_r+0x37a>
 8006dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8082 	beq.w	8006ec6 <_dtoa_r+0x4de>
 8006dc2:	4b91      	ldr	r3, [pc, #580]	; (8007008 <_dtoa_r+0x620>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4650      	mov	r0, sl
 8006dc8:	4659      	mov	r1, fp
 8006dca:	f7f9 fea7 	bl	8000b1c <__aeabi_dcmplt>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d079      	beq.n	8006ec6 <_dtoa_r+0x4de>
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d076      	beq.n	8006ec6 <_dtoa_r+0x4de>
 8006dd8:	9b02      	ldr	r3, [sp, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	dd36      	ble.n	8006e4c <_dtoa_r+0x464>
 8006dde:	9b00      	ldr	r3, [sp, #0]
 8006de0:	4650      	mov	r0, sl
 8006de2:	4659      	mov	r1, fp
 8006de4:	1e5f      	subs	r7, r3, #1
 8006de6:	2200      	movs	r2, #0
 8006de8:	4b88      	ldr	r3, [pc, #544]	; (800700c <_dtoa_r+0x624>)
 8006dea:	f7f9 fc25 	bl	8000638 <__aeabi_dmul>
 8006dee:	9e02      	ldr	r6, [sp, #8]
 8006df0:	4682      	mov	sl, r0
 8006df2:	468b      	mov	fp, r1
 8006df4:	3501      	adds	r5, #1
 8006df6:	4628      	mov	r0, r5
 8006df8:	f7f9 fbb4 	bl	8000564 <__aeabi_i2d>
 8006dfc:	4652      	mov	r2, sl
 8006dfe:	465b      	mov	r3, fp
 8006e00:	f7f9 fc1a 	bl	8000638 <__aeabi_dmul>
 8006e04:	4b82      	ldr	r3, [pc, #520]	; (8007010 <_dtoa_r+0x628>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	f7f9 fa60 	bl	80002cc <__adddf3>
 8006e0c:	46d0      	mov	r8, sl
 8006e0e:	46d9      	mov	r9, fp
 8006e10:	4682      	mov	sl, r0
 8006e12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006e16:	2e00      	cmp	r6, #0
 8006e18:	d158      	bne.n	8006ecc <_dtoa_r+0x4e4>
 8006e1a:	4b7e      	ldr	r3, [pc, #504]	; (8007014 <_dtoa_r+0x62c>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4640      	mov	r0, r8
 8006e20:	4649      	mov	r1, r9
 8006e22:	f7f9 fa51 	bl	80002c8 <__aeabi_dsub>
 8006e26:	4652      	mov	r2, sl
 8006e28:	465b      	mov	r3, fp
 8006e2a:	4680      	mov	r8, r0
 8006e2c:	4689      	mov	r9, r1
 8006e2e:	f7f9 fe93 	bl	8000b58 <__aeabi_dcmpgt>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	f040 8295 	bne.w	8007362 <_dtoa_r+0x97a>
 8006e38:	4652      	mov	r2, sl
 8006e3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e3e:	4640      	mov	r0, r8
 8006e40:	4649      	mov	r1, r9
 8006e42:	f7f9 fe6b 	bl	8000b1c <__aeabi_dcmplt>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f040 8289 	bne.w	800735e <_dtoa_r+0x976>
 8006e4c:	ec5b ab19 	vmov	sl, fp, d9
 8006e50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f2c0 8148 	blt.w	80070e8 <_dtoa_r+0x700>
 8006e58:	9a00      	ldr	r2, [sp, #0]
 8006e5a:	2a0e      	cmp	r2, #14
 8006e5c:	f300 8144 	bgt.w	80070e8 <_dtoa_r+0x700>
 8006e60:	4b67      	ldr	r3, [pc, #412]	; (8007000 <_dtoa_r+0x618>)
 8006e62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f280 80d5 	bge.w	800701c <_dtoa_r+0x634>
 8006e72:	9b03      	ldr	r3, [sp, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f300 80d1 	bgt.w	800701c <_dtoa_r+0x634>
 8006e7a:	f040 826f 	bne.w	800735c <_dtoa_r+0x974>
 8006e7e:	4b65      	ldr	r3, [pc, #404]	; (8007014 <_dtoa_r+0x62c>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	4640      	mov	r0, r8
 8006e84:	4649      	mov	r1, r9
 8006e86:	f7f9 fbd7 	bl	8000638 <__aeabi_dmul>
 8006e8a:	4652      	mov	r2, sl
 8006e8c:	465b      	mov	r3, fp
 8006e8e:	f7f9 fe59 	bl	8000b44 <__aeabi_dcmpge>
 8006e92:	9e03      	ldr	r6, [sp, #12]
 8006e94:	4637      	mov	r7, r6
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f040 8245 	bne.w	8007326 <_dtoa_r+0x93e>
 8006e9c:	9d01      	ldr	r5, [sp, #4]
 8006e9e:	2331      	movs	r3, #49	; 0x31
 8006ea0:	f805 3b01 	strb.w	r3, [r5], #1
 8006ea4:	9b00      	ldr	r3, [sp, #0]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	e240      	b.n	800732e <_dtoa_r+0x946>
 8006eac:	07f2      	lsls	r2, r6, #31
 8006eae:	d505      	bpl.n	8006ebc <_dtoa_r+0x4d4>
 8006eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb4:	f7f9 fbc0 	bl	8000638 <__aeabi_dmul>
 8006eb8:	3501      	adds	r5, #1
 8006eba:	2301      	movs	r3, #1
 8006ebc:	1076      	asrs	r6, r6, #1
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	e777      	b.n	8006db2 <_dtoa_r+0x3ca>
 8006ec2:	2502      	movs	r5, #2
 8006ec4:	e779      	b.n	8006dba <_dtoa_r+0x3d2>
 8006ec6:	9f00      	ldr	r7, [sp, #0]
 8006ec8:	9e03      	ldr	r6, [sp, #12]
 8006eca:	e794      	b.n	8006df6 <_dtoa_r+0x40e>
 8006ecc:	9901      	ldr	r1, [sp, #4]
 8006ece:	4b4c      	ldr	r3, [pc, #304]	; (8007000 <_dtoa_r+0x618>)
 8006ed0:	4431      	add	r1, r6
 8006ed2:	910d      	str	r1, [sp, #52]	; 0x34
 8006ed4:	9908      	ldr	r1, [sp, #32]
 8006ed6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006eda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ede:	2900      	cmp	r1, #0
 8006ee0:	d043      	beq.n	8006f6a <_dtoa_r+0x582>
 8006ee2:	494d      	ldr	r1, [pc, #308]	; (8007018 <_dtoa_r+0x630>)
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	f7f9 fcd1 	bl	800088c <__aeabi_ddiv>
 8006eea:	4652      	mov	r2, sl
 8006eec:	465b      	mov	r3, fp
 8006eee:	f7f9 f9eb 	bl	80002c8 <__aeabi_dsub>
 8006ef2:	9d01      	ldr	r5, [sp, #4]
 8006ef4:	4682      	mov	sl, r0
 8006ef6:	468b      	mov	fp, r1
 8006ef8:	4649      	mov	r1, r9
 8006efa:	4640      	mov	r0, r8
 8006efc:	f7f9 fe4c 	bl	8000b98 <__aeabi_d2iz>
 8006f00:	4606      	mov	r6, r0
 8006f02:	f7f9 fb2f 	bl	8000564 <__aeabi_i2d>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	f7f9 f9db 	bl	80002c8 <__aeabi_dsub>
 8006f12:	3630      	adds	r6, #48	; 0x30
 8006f14:	f805 6b01 	strb.w	r6, [r5], #1
 8006f18:	4652      	mov	r2, sl
 8006f1a:	465b      	mov	r3, fp
 8006f1c:	4680      	mov	r8, r0
 8006f1e:	4689      	mov	r9, r1
 8006f20:	f7f9 fdfc 	bl	8000b1c <__aeabi_dcmplt>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d163      	bne.n	8006ff0 <_dtoa_r+0x608>
 8006f28:	4642      	mov	r2, r8
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	4936      	ldr	r1, [pc, #216]	; (8007008 <_dtoa_r+0x620>)
 8006f2e:	2000      	movs	r0, #0
 8006f30:	f7f9 f9ca 	bl	80002c8 <__aeabi_dsub>
 8006f34:	4652      	mov	r2, sl
 8006f36:	465b      	mov	r3, fp
 8006f38:	f7f9 fdf0 	bl	8000b1c <__aeabi_dcmplt>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f040 80b5 	bne.w	80070ac <_dtoa_r+0x6c4>
 8006f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f44:	429d      	cmp	r5, r3
 8006f46:	d081      	beq.n	8006e4c <_dtoa_r+0x464>
 8006f48:	4b30      	ldr	r3, [pc, #192]	; (800700c <_dtoa_r+0x624>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4650      	mov	r0, sl
 8006f4e:	4659      	mov	r1, fp
 8006f50:	f7f9 fb72 	bl	8000638 <__aeabi_dmul>
 8006f54:	4b2d      	ldr	r3, [pc, #180]	; (800700c <_dtoa_r+0x624>)
 8006f56:	4682      	mov	sl, r0
 8006f58:	468b      	mov	fp, r1
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f7f9 fb6a 	bl	8000638 <__aeabi_dmul>
 8006f64:	4680      	mov	r8, r0
 8006f66:	4689      	mov	r9, r1
 8006f68:	e7c6      	b.n	8006ef8 <_dtoa_r+0x510>
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	f7f9 fb63 	bl	8000638 <__aeabi_dmul>
 8006f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f74:	9d01      	ldr	r5, [sp, #4]
 8006f76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f78:	4682      	mov	sl, r0
 8006f7a:	468b      	mov	fp, r1
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	4640      	mov	r0, r8
 8006f80:	f7f9 fe0a 	bl	8000b98 <__aeabi_d2iz>
 8006f84:	4606      	mov	r6, r0
 8006f86:	f7f9 faed 	bl	8000564 <__aeabi_i2d>
 8006f8a:	3630      	adds	r6, #48	; 0x30
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4640      	mov	r0, r8
 8006f92:	4649      	mov	r1, r9
 8006f94:	f7f9 f998 	bl	80002c8 <__aeabi_dsub>
 8006f98:	f805 6b01 	strb.w	r6, [r5], #1
 8006f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f9e:	429d      	cmp	r5, r3
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	4689      	mov	r9, r1
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	d124      	bne.n	8006ff4 <_dtoa_r+0x60c>
 8006faa:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <_dtoa_r+0x630>)
 8006fac:	4650      	mov	r0, sl
 8006fae:	4659      	mov	r1, fp
 8006fb0:	f7f9 f98c 	bl	80002cc <__adddf3>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4649      	mov	r1, r9
 8006fbc:	f7f9 fdcc 	bl	8000b58 <__aeabi_dcmpgt>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d173      	bne.n	80070ac <_dtoa_r+0x6c4>
 8006fc4:	4652      	mov	r2, sl
 8006fc6:	465b      	mov	r3, fp
 8006fc8:	4913      	ldr	r1, [pc, #76]	; (8007018 <_dtoa_r+0x630>)
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f7f9 f97c 	bl	80002c8 <__aeabi_dsub>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	f7f9 fda0 	bl	8000b1c <__aeabi_dcmplt>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f43f af35 	beq.w	8006e4c <_dtoa_r+0x464>
 8006fe2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fe4:	1e6b      	subs	r3, r5, #1
 8006fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fe8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fec:	2b30      	cmp	r3, #48	; 0x30
 8006fee:	d0f8      	beq.n	8006fe2 <_dtoa_r+0x5fa>
 8006ff0:	9700      	str	r7, [sp, #0]
 8006ff2:	e049      	b.n	8007088 <_dtoa_r+0x6a0>
 8006ff4:	4b05      	ldr	r3, [pc, #20]	; (800700c <_dtoa_r+0x624>)
 8006ff6:	f7f9 fb1f 	bl	8000638 <__aeabi_dmul>
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	4689      	mov	r9, r1
 8006ffe:	e7bd      	b.n	8006f7c <_dtoa_r+0x594>
 8007000:	08008fb8 	.word	0x08008fb8
 8007004:	08008f90 	.word	0x08008f90
 8007008:	3ff00000 	.word	0x3ff00000
 800700c:	40240000 	.word	0x40240000
 8007010:	401c0000 	.word	0x401c0000
 8007014:	40140000 	.word	0x40140000
 8007018:	3fe00000 	.word	0x3fe00000
 800701c:	9d01      	ldr	r5, [sp, #4]
 800701e:	4656      	mov	r6, sl
 8007020:	465f      	mov	r7, fp
 8007022:	4642      	mov	r2, r8
 8007024:	464b      	mov	r3, r9
 8007026:	4630      	mov	r0, r6
 8007028:	4639      	mov	r1, r7
 800702a:	f7f9 fc2f 	bl	800088c <__aeabi_ddiv>
 800702e:	f7f9 fdb3 	bl	8000b98 <__aeabi_d2iz>
 8007032:	4682      	mov	sl, r0
 8007034:	f7f9 fa96 	bl	8000564 <__aeabi_i2d>
 8007038:	4642      	mov	r2, r8
 800703a:	464b      	mov	r3, r9
 800703c:	f7f9 fafc 	bl	8000638 <__aeabi_dmul>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4630      	mov	r0, r6
 8007046:	4639      	mov	r1, r7
 8007048:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800704c:	f7f9 f93c 	bl	80002c8 <__aeabi_dsub>
 8007050:	f805 6b01 	strb.w	r6, [r5], #1
 8007054:	9e01      	ldr	r6, [sp, #4]
 8007056:	9f03      	ldr	r7, [sp, #12]
 8007058:	1bae      	subs	r6, r5, r6
 800705a:	42b7      	cmp	r7, r6
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	d135      	bne.n	80070ce <_dtoa_r+0x6e6>
 8007062:	f7f9 f933 	bl	80002cc <__adddf3>
 8007066:	4642      	mov	r2, r8
 8007068:	464b      	mov	r3, r9
 800706a:	4606      	mov	r6, r0
 800706c:	460f      	mov	r7, r1
 800706e:	f7f9 fd73 	bl	8000b58 <__aeabi_dcmpgt>
 8007072:	b9d0      	cbnz	r0, 80070aa <_dtoa_r+0x6c2>
 8007074:	4642      	mov	r2, r8
 8007076:	464b      	mov	r3, r9
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 fd44 	bl	8000b08 <__aeabi_dcmpeq>
 8007080:	b110      	cbz	r0, 8007088 <_dtoa_r+0x6a0>
 8007082:	f01a 0f01 	tst.w	sl, #1
 8007086:	d110      	bne.n	80070aa <_dtoa_r+0x6c2>
 8007088:	4620      	mov	r0, r4
 800708a:	ee18 1a10 	vmov	r1, s16
 800708e:	f000 faf3 	bl	8007678 <_Bfree>
 8007092:	2300      	movs	r3, #0
 8007094:	9800      	ldr	r0, [sp, #0]
 8007096:	702b      	strb	r3, [r5, #0]
 8007098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800709a:	3001      	adds	r0, #1
 800709c:	6018      	str	r0, [r3, #0]
 800709e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f43f acf1 	beq.w	8006a88 <_dtoa_r+0xa0>
 80070a6:	601d      	str	r5, [r3, #0]
 80070a8:	e4ee      	b.n	8006a88 <_dtoa_r+0xa0>
 80070aa:	9f00      	ldr	r7, [sp, #0]
 80070ac:	462b      	mov	r3, r5
 80070ae:	461d      	mov	r5, r3
 80070b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070b4:	2a39      	cmp	r2, #57	; 0x39
 80070b6:	d106      	bne.n	80070c6 <_dtoa_r+0x6de>
 80070b8:	9a01      	ldr	r2, [sp, #4]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d1f7      	bne.n	80070ae <_dtoa_r+0x6c6>
 80070be:	9901      	ldr	r1, [sp, #4]
 80070c0:	2230      	movs	r2, #48	; 0x30
 80070c2:	3701      	adds	r7, #1
 80070c4:	700a      	strb	r2, [r1, #0]
 80070c6:	781a      	ldrb	r2, [r3, #0]
 80070c8:	3201      	adds	r2, #1
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	e790      	b.n	8006ff0 <_dtoa_r+0x608>
 80070ce:	4ba6      	ldr	r3, [pc, #664]	; (8007368 <_dtoa_r+0x980>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	f7f9 fab1 	bl	8000638 <__aeabi_dmul>
 80070d6:	2200      	movs	r2, #0
 80070d8:	2300      	movs	r3, #0
 80070da:	4606      	mov	r6, r0
 80070dc:	460f      	mov	r7, r1
 80070de:	f7f9 fd13 	bl	8000b08 <__aeabi_dcmpeq>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d09d      	beq.n	8007022 <_dtoa_r+0x63a>
 80070e6:	e7cf      	b.n	8007088 <_dtoa_r+0x6a0>
 80070e8:	9a08      	ldr	r2, [sp, #32]
 80070ea:	2a00      	cmp	r2, #0
 80070ec:	f000 80d7 	beq.w	800729e <_dtoa_r+0x8b6>
 80070f0:	9a06      	ldr	r2, [sp, #24]
 80070f2:	2a01      	cmp	r2, #1
 80070f4:	f300 80ba 	bgt.w	800726c <_dtoa_r+0x884>
 80070f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	f000 80b2 	beq.w	8007264 <_dtoa_r+0x87c>
 8007100:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007104:	9e07      	ldr	r6, [sp, #28]
 8007106:	9d04      	ldr	r5, [sp, #16]
 8007108:	9a04      	ldr	r2, [sp, #16]
 800710a:	441a      	add	r2, r3
 800710c:	9204      	str	r2, [sp, #16]
 800710e:	9a05      	ldr	r2, [sp, #20]
 8007110:	2101      	movs	r1, #1
 8007112:	441a      	add	r2, r3
 8007114:	4620      	mov	r0, r4
 8007116:	9205      	str	r2, [sp, #20]
 8007118:	f000 fb66 	bl	80077e8 <__i2b>
 800711c:	4607      	mov	r7, r0
 800711e:	2d00      	cmp	r5, #0
 8007120:	dd0c      	ble.n	800713c <_dtoa_r+0x754>
 8007122:	9b05      	ldr	r3, [sp, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	dd09      	ble.n	800713c <_dtoa_r+0x754>
 8007128:	42ab      	cmp	r3, r5
 800712a:	9a04      	ldr	r2, [sp, #16]
 800712c:	bfa8      	it	ge
 800712e:	462b      	movge	r3, r5
 8007130:	1ad2      	subs	r2, r2, r3
 8007132:	9204      	str	r2, [sp, #16]
 8007134:	9a05      	ldr	r2, [sp, #20]
 8007136:	1aed      	subs	r5, r5, r3
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	9305      	str	r3, [sp, #20]
 800713c:	9b07      	ldr	r3, [sp, #28]
 800713e:	b31b      	cbz	r3, 8007188 <_dtoa_r+0x7a0>
 8007140:	9b08      	ldr	r3, [sp, #32]
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 80af 	beq.w	80072a6 <_dtoa_r+0x8be>
 8007148:	2e00      	cmp	r6, #0
 800714a:	dd13      	ble.n	8007174 <_dtoa_r+0x78c>
 800714c:	4639      	mov	r1, r7
 800714e:	4632      	mov	r2, r6
 8007150:	4620      	mov	r0, r4
 8007152:	f000 fc09 	bl	8007968 <__pow5mult>
 8007156:	ee18 2a10 	vmov	r2, s16
 800715a:	4601      	mov	r1, r0
 800715c:	4607      	mov	r7, r0
 800715e:	4620      	mov	r0, r4
 8007160:	f000 fb58 	bl	8007814 <__multiply>
 8007164:	ee18 1a10 	vmov	r1, s16
 8007168:	4680      	mov	r8, r0
 800716a:	4620      	mov	r0, r4
 800716c:	f000 fa84 	bl	8007678 <_Bfree>
 8007170:	ee08 8a10 	vmov	s16, r8
 8007174:	9b07      	ldr	r3, [sp, #28]
 8007176:	1b9a      	subs	r2, r3, r6
 8007178:	d006      	beq.n	8007188 <_dtoa_r+0x7a0>
 800717a:	ee18 1a10 	vmov	r1, s16
 800717e:	4620      	mov	r0, r4
 8007180:	f000 fbf2 	bl	8007968 <__pow5mult>
 8007184:	ee08 0a10 	vmov	s16, r0
 8007188:	2101      	movs	r1, #1
 800718a:	4620      	mov	r0, r4
 800718c:	f000 fb2c 	bl	80077e8 <__i2b>
 8007190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	4606      	mov	r6, r0
 8007196:	f340 8088 	ble.w	80072aa <_dtoa_r+0x8c2>
 800719a:	461a      	mov	r2, r3
 800719c:	4601      	mov	r1, r0
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 fbe2 	bl	8007968 <__pow5mult>
 80071a4:	9b06      	ldr	r3, [sp, #24]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	4606      	mov	r6, r0
 80071aa:	f340 8081 	ble.w	80072b0 <_dtoa_r+0x8c8>
 80071ae:	f04f 0800 	mov.w	r8, #0
 80071b2:	6933      	ldr	r3, [r6, #16]
 80071b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071b8:	6918      	ldr	r0, [r3, #16]
 80071ba:	f000 fac5 	bl	8007748 <__hi0bits>
 80071be:	f1c0 0020 	rsb	r0, r0, #32
 80071c2:	9b05      	ldr	r3, [sp, #20]
 80071c4:	4418      	add	r0, r3
 80071c6:	f010 001f 	ands.w	r0, r0, #31
 80071ca:	f000 8092 	beq.w	80072f2 <_dtoa_r+0x90a>
 80071ce:	f1c0 0320 	rsb	r3, r0, #32
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	f340 808a 	ble.w	80072ec <_dtoa_r+0x904>
 80071d8:	f1c0 001c 	rsb	r0, r0, #28
 80071dc:	9b04      	ldr	r3, [sp, #16]
 80071de:	4403      	add	r3, r0
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	9b05      	ldr	r3, [sp, #20]
 80071e4:	4403      	add	r3, r0
 80071e6:	4405      	add	r5, r0
 80071e8:	9305      	str	r3, [sp, #20]
 80071ea:	9b04      	ldr	r3, [sp, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	dd07      	ble.n	8007200 <_dtoa_r+0x818>
 80071f0:	ee18 1a10 	vmov	r1, s16
 80071f4:	461a      	mov	r2, r3
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 fc10 	bl	8007a1c <__lshift>
 80071fc:	ee08 0a10 	vmov	s16, r0
 8007200:	9b05      	ldr	r3, [sp, #20]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dd05      	ble.n	8007212 <_dtoa_r+0x82a>
 8007206:	4631      	mov	r1, r6
 8007208:	461a      	mov	r2, r3
 800720a:	4620      	mov	r0, r4
 800720c:	f000 fc06 	bl	8007a1c <__lshift>
 8007210:	4606      	mov	r6, r0
 8007212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d06e      	beq.n	80072f6 <_dtoa_r+0x90e>
 8007218:	ee18 0a10 	vmov	r0, s16
 800721c:	4631      	mov	r1, r6
 800721e:	f000 fc6d 	bl	8007afc <__mcmp>
 8007222:	2800      	cmp	r0, #0
 8007224:	da67      	bge.n	80072f6 <_dtoa_r+0x90e>
 8007226:	9b00      	ldr	r3, [sp, #0]
 8007228:	3b01      	subs	r3, #1
 800722a:	ee18 1a10 	vmov	r1, s16
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	220a      	movs	r2, #10
 8007232:	2300      	movs	r3, #0
 8007234:	4620      	mov	r0, r4
 8007236:	f000 fa41 	bl	80076bc <__multadd>
 800723a:	9b08      	ldr	r3, [sp, #32]
 800723c:	ee08 0a10 	vmov	s16, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 81b1 	beq.w	80075a8 <_dtoa_r+0xbc0>
 8007246:	2300      	movs	r3, #0
 8007248:	4639      	mov	r1, r7
 800724a:	220a      	movs	r2, #10
 800724c:	4620      	mov	r0, r4
 800724e:	f000 fa35 	bl	80076bc <__multadd>
 8007252:	9b02      	ldr	r3, [sp, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	4607      	mov	r7, r0
 8007258:	f300 808e 	bgt.w	8007378 <_dtoa_r+0x990>
 800725c:	9b06      	ldr	r3, [sp, #24]
 800725e:	2b02      	cmp	r3, #2
 8007260:	dc51      	bgt.n	8007306 <_dtoa_r+0x91e>
 8007262:	e089      	b.n	8007378 <_dtoa_r+0x990>
 8007264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007266:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800726a:	e74b      	b.n	8007104 <_dtoa_r+0x71c>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	1e5e      	subs	r6, r3, #1
 8007270:	9b07      	ldr	r3, [sp, #28]
 8007272:	42b3      	cmp	r3, r6
 8007274:	bfbf      	itttt	lt
 8007276:	9b07      	ldrlt	r3, [sp, #28]
 8007278:	9607      	strlt	r6, [sp, #28]
 800727a:	1af2      	sublt	r2, r6, r3
 800727c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800727e:	bfb6      	itet	lt
 8007280:	189b      	addlt	r3, r3, r2
 8007282:	1b9e      	subge	r6, r3, r6
 8007284:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007286:	9b03      	ldr	r3, [sp, #12]
 8007288:	bfb8      	it	lt
 800728a:	2600      	movlt	r6, #0
 800728c:	2b00      	cmp	r3, #0
 800728e:	bfb7      	itett	lt
 8007290:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007294:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007298:	1a9d      	sublt	r5, r3, r2
 800729a:	2300      	movlt	r3, #0
 800729c:	e734      	b.n	8007108 <_dtoa_r+0x720>
 800729e:	9e07      	ldr	r6, [sp, #28]
 80072a0:	9d04      	ldr	r5, [sp, #16]
 80072a2:	9f08      	ldr	r7, [sp, #32]
 80072a4:	e73b      	b.n	800711e <_dtoa_r+0x736>
 80072a6:	9a07      	ldr	r2, [sp, #28]
 80072a8:	e767      	b.n	800717a <_dtoa_r+0x792>
 80072aa:	9b06      	ldr	r3, [sp, #24]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	dc18      	bgt.n	80072e2 <_dtoa_r+0x8fa>
 80072b0:	f1ba 0f00 	cmp.w	sl, #0
 80072b4:	d115      	bne.n	80072e2 <_dtoa_r+0x8fa>
 80072b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072ba:	b993      	cbnz	r3, 80072e2 <_dtoa_r+0x8fa>
 80072bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80072c0:	0d1b      	lsrs	r3, r3, #20
 80072c2:	051b      	lsls	r3, r3, #20
 80072c4:	b183      	cbz	r3, 80072e8 <_dtoa_r+0x900>
 80072c6:	9b04      	ldr	r3, [sp, #16]
 80072c8:	3301      	adds	r3, #1
 80072ca:	9304      	str	r3, [sp, #16]
 80072cc:	9b05      	ldr	r3, [sp, #20]
 80072ce:	3301      	adds	r3, #1
 80072d0:	9305      	str	r3, [sp, #20]
 80072d2:	f04f 0801 	mov.w	r8, #1
 80072d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f47f af6a 	bne.w	80071b2 <_dtoa_r+0x7ca>
 80072de:	2001      	movs	r0, #1
 80072e0:	e76f      	b.n	80071c2 <_dtoa_r+0x7da>
 80072e2:	f04f 0800 	mov.w	r8, #0
 80072e6:	e7f6      	b.n	80072d6 <_dtoa_r+0x8ee>
 80072e8:	4698      	mov	r8, r3
 80072ea:	e7f4      	b.n	80072d6 <_dtoa_r+0x8ee>
 80072ec:	f43f af7d 	beq.w	80071ea <_dtoa_r+0x802>
 80072f0:	4618      	mov	r0, r3
 80072f2:	301c      	adds	r0, #28
 80072f4:	e772      	b.n	80071dc <_dtoa_r+0x7f4>
 80072f6:	9b03      	ldr	r3, [sp, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	dc37      	bgt.n	800736c <_dtoa_r+0x984>
 80072fc:	9b06      	ldr	r3, [sp, #24]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	dd34      	ble.n	800736c <_dtoa_r+0x984>
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	9302      	str	r3, [sp, #8]
 8007306:	9b02      	ldr	r3, [sp, #8]
 8007308:	b96b      	cbnz	r3, 8007326 <_dtoa_r+0x93e>
 800730a:	4631      	mov	r1, r6
 800730c:	2205      	movs	r2, #5
 800730e:	4620      	mov	r0, r4
 8007310:	f000 f9d4 	bl	80076bc <__multadd>
 8007314:	4601      	mov	r1, r0
 8007316:	4606      	mov	r6, r0
 8007318:	ee18 0a10 	vmov	r0, s16
 800731c:	f000 fbee 	bl	8007afc <__mcmp>
 8007320:	2800      	cmp	r0, #0
 8007322:	f73f adbb 	bgt.w	8006e9c <_dtoa_r+0x4b4>
 8007326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007328:	9d01      	ldr	r5, [sp, #4]
 800732a:	43db      	mvns	r3, r3
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	f04f 0800 	mov.w	r8, #0
 8007332:	4631      	mov	r1, r6
 8007334:	4620      	mov	r0, r4
 8007336:	f000 f99f 	bl	8007678 <_Bfree>
 800733a:	2f00      	cmp	r7, #0
 800733c:	f43f aea4 	beq.w	8007088 <_dtoa_r+0x6a0>
 8007340:	f1b8 0f00 	cmp.w	r8, #0
 8007344:	d005      	beq.n	8007352 <_dtoa_r+0x96a>
 8007346:	45b8      	cmp	r8, r7
 8007348:	d003      	beq.n	8007352 <_dtoa_r+0x96a>
 800734a:	4641      	mov	r1, r8
 800734c:	4620      	mov	r0, r4
 800734e:	f000 f993 	bl	8007678 <_Bfree>
 8007352:	4639      	mov	r1, r7
 8007354:	4620      	mov	r0, r4
 8007356:	f000 f98f 	bl	8007678 <_Bfree>
 800735a:	e695      	b.n	8007088 <_dtoa_r+0x6a0>
 800735c:	2600      	movs	r6, #0
 800735e:	4637      	mov	r7, r6
 8007360:	e7e1      	b.n	8007326 <_dtoa_r+0x93e>
 8007362:	9700      	str	r7, [sp, #0]
 8007364:	4637      	mov	r7, r6
 8007366:	e599      	b.n	8006e9c <_dtoa_r+0x4b4>
 8007368:	40240000 	.word	0x40240000
 800736c:	9b08      	ldr	r3, [sp, #32]
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 80ca 	beq.w	8007508 <_dtoa_r+0xb20>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	9302      	str	r3, [sp, #8]
 8007378:	2d00      	cmp	r5, #0
 800737a:	dd05      	ble.n	8007388 <_dtoa_r+0x9a0>
 800737c:	4639      	mov	r1, r7
 800737e:	462a      	mov	r2, r5
 8007380:	4620      	mov	r0, r4
 8007382:	f000 fb4b 	bl	8007a1c <__lshift>
 8007386:	4607      	mov	r7, r0
 8007388:	f1b8 0f00 	cmp.w	r8, #0
 800738c:	d05b      	beq.n	8007446 <_dtoa_r+0xa5e>
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	4620      	mov	r0, r4
 8007392:	f000 f931 	bl	80075f8 <_Balloc>
 8007396:	4605      	mov	r5, r0
 8007398:	b928      	cbnz	r0, 80073a6 <_dtoa_r+0x9be>
 800739a:	4b87      	ldr	r3, [pc, #540]	; (80075b8 <_dtoa_r+0xbd0>)
 800739c:	4602      	mov	r2, r0
 800739e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80073a2:	f7ff bb3b 	b.w	8006a1c <_dtoa_r+0x34>
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	3202      	adds	r2, #2
 80073aa:	0092      	lsls	r2, r2, #2
 80073ac:	f107 010c 	add.w	r1, r7, #12
 80073b0:	300c      	adds	r0, #12
 80073b2:	f000 f913 	bl	80075dc <memcpy>
 80073b6:	2201      	movs	r2, #1
 80073b8:	4629      	mov	r1, r5
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 fb2e 	bl	8007a1c <__lshift>
 80073c0:	9b01      	ldr	r3, [sp, #4]
 80073c2:	f103 0901 	add.w	r9, r3, #1
 80073c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	9305      	str	r3, [sp, #20]
 80073ce:	f00a 0301 	and.w	r3, sl, #1
 80073d2:	46b8      	mov	r8, r7
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	4607      	mov	r7, r0
 80073d8:	4631      	mov	r1, r6
 80073da:	ee18 0a10 	vmov	r0, s16
 80073de:	f7ff fa76 	bl	80068ce <quorem>
 80073e2:	4641      	mov	r1, r8
 80073e4:	9002      	str	r0, [sp, #8]
 80073e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073ea:	ee18 0a10 	vmov	r0, s16
 80073ee:	f000 fb85 	bl	8007afc <__mcmp>
 80073f2:	463a      	mov	r2, r7
 80073f4:	9003      	str	r0, [sp, #12]
 80073f6:	4631      	mov	r1, r6
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fb9b 	bl	8007b34 <__mdiff>
 80073fe:	68c2      	ldr	r2, [r0, #12]
 8007400:	f109 3bff 	add.w	fp, r9, #4294967295
 8007404:	4605      	mov	r5, r0
 8007406:	bb02      	cbnz	r2, 800744a <_dtoa_r+0xa62>
 8007408:	4601      	mov	r1, r0
 800740a:	ee18 0a10 	vmov	r0, s16
 800740e:	f000 fb75 	bl	8007afc <__mcmp>
 8007412:	4602      	mov	r2, r0
 8007414:	4629      	mov	r1, r5
 8007416:	4620      	mov	r0, r4
 8007418:	9207      	str	r2, [sp, #28]
 800741a:	f000 f92d 	bl	8007678 <_Bfree>
 800741e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007422:	ea43 0102 	orr.w	r1, r3, r2
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	430b      	orrs	r3, r1
 800742a:	464d      	mov	r5, r9
 800742c:	d10f      	bne.n	800744e <_dtoa_r+0xa66>
 800742e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007432:	d02a      	beq.n	800748a <_dtoa_r+0xaa2>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	dd02      	ble.n	8007440 <_dtoa_r+0xa58>
 800743a:	9b02      	ldr	r3, [sp, #8]
 800743c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007440:	f88b a000 	strb.w	sl, [fp]
 8007444:	e775      	b.n	8007332 <_dtoa_r+0x94a>
 8007446:	4638      	mov	r0, r7
 8007448:	e7ba      	b.n	80073c0 <_dtoa_r+0x9d8>
 800744a:	2201      	movs	r2, #1
 800744c:	e7e2      	b.n	8007414 <_dtoa_r+0xa2c>
 800744e:	9b03      	ldr	r3, [sp, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	db04      	blt.n	800745e <_dtoa_r+0xa76>
 8007454:	9906      	ldr	r1, [sp, #24]
 8007456:	430b      	orrs	r3, r1
 8007458:	9904      	ldr	r1, [sp, #16]
 800745a:	430b      	orrs	r3, r1
 800745c:	d122      	bne.n	80074a4 <_dtoa_r+0xabc>
 800745e:	2a00      	cmp	r2, #0
 8007460:	ddee      	ble.n	8007440 <_dtoa_r+0xa58>
 8007462:	ee18 1a10 	vmov	r1, s16
 8007466:	2201      	movs	r2, #1
 8007468:	4620      	mov	r0, r4
 800746a:	f000 fad7 	bl	8007a1c <__lshift>
 800746e:	4631      	mov	r1, r6
 8007470:	ee08 0a10 	vmov	s16, r0
 8007474:	f000 fb42 	bl	8007afc <__mcmp>
 8007478:	2800      	cmp	r0, #0
 800747a:	dc03      	bgt.n	8007484 <_dtoa_r+0xa9c>
 800747c:	d1e0      	bne.n	8007440 <_dtoa_r+0xa58>
 800747e:	f01a 0f01 	tst.w	sl, #1
 8007482:	d0dd      	beq.n	8007440 <_dtoa_r+0xa58>
 8007484:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007488:	d1d7      	bne.n	800743a <_dtoa_r+0xa52>
 800748a:	2339      	movs	r3, #57	; 0x39
 800748c:	f88b 3000 	strb.w	r3, [fp]
 8007490:	462b      	mov	r3, r5
 8007492:	461d      	mov	r5, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800749a:	2a39      	cmp	r2, #57	; 0x39
 800749c:	d071      	beq.n	8007582 <_dtoa_r+0xb9a>
 800749e:	3201      	adds	r2, #1
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	e746      	b.n	8007332 <_dtoa_r+0x94a>
 80074a4:	2a00      	cmp	r2, #0
 80074a6:	dd07      	ble.n	80074b8 <_dtoa_r+0xad0>
 80074a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074ac:	d0ed      	beq.n	800748a <_dtoa_r+0xaa2>
 80074ae:	f10a 0301 	add.w	r3, sl, #1
 80074b2:	f88b 3000 	strb.w	r3, [fp]
 80074b6:	e73c      	b.n	8007332 <_dtoa_r+0x94a>
 80074b8:	9b05      	ldr	r3, [sp, #20]
 80074ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80074be:	4599      	cmp	r9, r3
 80074c0:	d047      	beq.n	8007552 <_dtoa_r+0xb6a>
 80074c2:	ee18 1a10 	vmov	r1, s16
 80074c6:	2300      	movs	r3, #0
 80074c8:	220a      	movs	r2, #10
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 f8f6 	bl	80076bc <__multadd>
 80074d0:	45b8      	cmp	r8, r7
 80074d2:	ee08 0a10 	vmov	s16, r0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	f04f 020a 	mov.w	r2, #10
 80074de:	4641      	mov	r1, r8
 80074e0:	4620      	mov	r0, r4
 80074e2:	d106      	bne.n	80074f2 <_dtoa_r+0xb0a>
 80074e4:	f000 f8ea 	bl	80076bc <__multadd>
 80074e8:	4680      	mov	r8, r0
 80074ea:	4607      	mov	r7, r0
 80074ec:	f109 0901 	add.w	r9, r9, #1
 80074f0:	e772      	b.n	80073d8 <_dtoa_r+0x9f0>
 80074f2:	f000 f8e3 	bl	80076bc <__multadd>
 80074f6:	4639      	mov	r1, r7
 80074f8:	4680      	mov	r8, r0
 80074fa:	2300      	movs	r3, #0
 80074fc:	220a      	movs	r2, #10
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 f8dc 	bl	80076bc <__multadd>
 8007504:	4607      	mov	r7, r0
 8007506:	e7f1      	b.n	80074ec <_dtoa_r+0xb04>
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	9302      	str	r3, [sp, #8]
 800750c:	9d01      	ldr	r5, [sp, #4]
 800750e:	ee18 0a10 	vmov	r0, s16
 8007512:	4631      	mov	r1, r6
 8007514:	f7ff f9db 	bl	80068ce <quorem>
 8007518:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800751c:	9b01      	ldr	r3, [sp, #4]
 800751e:	f805 ab01 	strb.w	sl, [r5], #1
 8007522:	1aea      	subs	r2, r5, r3
 8007524:	9b02      	ldr	r3, [sp, #8]
 8007526:	4293      	cmp	r3, r2
 8007528:	dd09      	ble.n	800753e <_dtoa_r+0xb56>
 800752a:	ee18 1a10 	vmov	r1, s16
 800752e:	2300      	movs	r3, #0
 8007530:	220a      	movs	r2, #10
 8007532:	4620      	mov	r0, r4
 8007534:	f000 f8c2 	bl	80076bc <__multadd>
 8007538:	ee08 0a10 	vmov	s16, r0
 800753c:	e7e7      	b.n	800750e <_dtoa_r+0xb26>
 800753e:	9b02      	ldr	r3, [sp, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	bfc8      	it	gt
 8007544:	461d      	movgt	r5, r3
 8007546:	9b01      	ldr	r3, [sp, #4]
 8007548:	bfd8      	it	le
 800754a:	2501      	movle	r5, #1
 800754c:	441d      	add	r5, r3
 800754e:	f04f 0800 	mov.w	r8, #0
 8007552:	ee18 1a10 	vmov	r1, s16
 8007556:	2201      	movs	r2, #1
 8007558:	4620      	mov	r0, r4
 800755a:	f000 fa5f 	bl	8007a1c <__lshift>
 800755e:	4631      	mov	r1, r6
 8007560:	ee08 0a10 	vmov	s16, r0
 8007564:	f000 faca 	bl	8007afc <__mcmp>
 8007568:	2800      	cmp	r0, #0
 800756a:	dc91      	bgt.n	8007490 <_dtoa_r+0xaa8>
 800756c:	d102      	bne.n	8007574 <_dtoa_r+0xb8c>
 800756e:	f01a 0f01 	tst.w	sl, #1
 8007572:	d18d      	bne.n	8007490 <_dtoa_r+0xaa8>
 8007574:	462b      	mov	r3, r5
 8007576:	461d      	mov	r5, r3
 8007578:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800757c:	2a30      	cmp	r2, #48	; 0x30
 800757e:	d0fa      	beq.n	8007576 <_dtoa_r+0xb8e>
 8007580:	e6d7      	b.n	8007332 <_dtoa_r+0x94a>
 8007582:	9a01      	ldr	r2, [sp, #4]
 8007584:	429a      	cmp	r2, r3
 8007586:	d184      	bne.n	8007492 <_dtoa_r+0xaaa>
 8007588:	9b00      	ldr	r3, [sp, #0]
 800758a:	3301      	adds	r3, #1
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	2331      	movs	r3, #49	; 0x31
 8007590:	7013      	strb	r3, [r2, #0]
 8007592:	e6ce      	b.n	8007332 <_dtoa_r+0x94a>
 8007594:	4b09      	ldr	r3, [pc, #36]	; (80075bc <_dtoa_r+0xbd4>)
 8007596:	f7ff ba95 	b.w	8006ac4 <_dtoa_r+0xdc>
 800759a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800759c:	2b00      	cmp	r3, #0
 800759e:	f47f aa6e 	bne.w	8006a7e <_dtoa_r+0x96>
 80075a2:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <_dtoa_r+0xbd8>)
 80075a4:	f7ff ba8e 	b.w	8006ac4 <_dtoa_r+0xdc>
 80075a8:	9b02      	ldr	r3, [sp, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	dcae      	bgt.n	800750c <_dtoa_r+0xb24>
 80075ae:	9b06      	ldr	r3, [sp, #24]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	f73f aea8 	bgt.w	8007306 <_dtoa_r+0x91e>
 80075b6:	e7a9      	b.n	800750c <_dtoa_r+0xb24>
 80075b8:	08008f1f 	.word	0x08008f1f
 80075bc:	08008e7c 	.word	0x08008e7c
 80075c0:	08008ea0 	.word	0x08008ea0

080075c4 <_localeconv_r>:
 80075c4:	4800      	ldr	r0, [pc, #0]	; (80075c8 <_localeconv_r+0x4>)
 80075c6:	4770      	bx	lr
 80075c8:	20000160 	.word	0x20000160

080075cc <malloc>:
 80075cc:	4b02      	ldr	r3, [pc, #8]	; (80075d8 <malloc+0xc>)
 80075ce:	4601      	mov	r1, r0
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	f000 bc17 	b.w	8007e04 <_malloc_r>
 80075d6:	bf00      	nop
 80075d8:	2000000c 	.word	0x2000000c

080075dc <memcpy>:
 80075dc:	440a      	add	r2, r1
 80075de:	4291      	cmp	r1, r2
 80075e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80075e4:	d100      	bne.n	80075e8 <memcpy+0xc>
 80075e6:	4770      	bx	lr
 80075e8:	b510      	push	{r4, lr}
 80075ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f2:	4291      	cmp	r1, r2
 80075f4:	d1f9      	bne.n	80075ea <memcpy+0xe>
 80075f6:	bd10      	pop	{r4, pc}

080075f8 <_Balloc>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075fc:	4604      	mov	r4, r0
 80075fe:	460d      	mov	r5, r1
 8007600:	b976      	cbnz	r6, 8007620 <_Balloc+0x28>
 8007602:	2010      	movs	r0, #16
 8007604:	f7ff ffe2 	bl	80075cc <malloc>
 8007608:	4602      	mov	r2, r0
 800760a:	6260      	str	r0, [r4, #36]	; 0x24
 800760c:	b920      	cbnz	r0, 8007618 <_Balloc+0x20>
 800760e:	4b18      	ldr	r3, [pc, #96]	; (8007670 <_Balloc+0x78>)
 8007610:	4818      	ldr	r0, [pc, #96]	; (8007674 <_Balloc+0x7c>)
 8007612:	2166      	movs	r1, #102	; 0x66
 8007614:	f000 fdd6 	bl	80081c4 <__assert_func>
 8007618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800761c:	6006      	str	r6, [r0, #0]
 800761e:	60c6      	str	r6, [r0, #12]
 8007620:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007622:	68f3      	ldr	r3, [r6, #12]
 8007624:	b183      	cbz	r3, 8007648 <_Balloc+0x50>
 8007626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800762e:	b9b8      	cbnz	r0, 8007660 <_Balloc+0x68>
 8007630:	2101      	movs	r1, #1
 8007632:	fa01 f605 	lsl.w	r6, r1, r5
 8007636:	1d72      	adds	r2, r6, #5
 8007638:	0092      	lsls	r2, r2, #2
 800763a:	4620      	mov	r0, r4
 800763c:	f000 fb60 	bl	8007d00 <_calloc_r>
 8007640:	b160      	cbz	r0, 800765c <_Balloc+0x64>
 8007642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007646:	e00e      	b.n	8007666 <_Balloc+0x6e>
 8007648:	2221      	movs	r2, #33	; 0x21
 800764a:	2104      	movs	r1, #4
 800764c:	4620      	mov	r0, r4
 800764e:	f000 fb57 	bl	8007d00 <_calloc_r>
 8007652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007654:	60f0      	str	r0, [r6, #12]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e4      	bne.n	8007626 <_Balloc+0x2e>
 800765c:	2000      	movs	r0, #0
 800765e:	bd70      	pop	{r4, r5, r6, pc}
 8007660:	6802      	ldr	r2, [r0, #0]
 8007662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007666:	2300      	movs	r3, #0
 8007668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800766c:	e7f7      	b.n	800765e <_Balloc+0x66>
 800766e:	bf00      	nop
 8007670:	08008ead 	.word	0x08008ead
 8007674:	08008f30 	.word	0x08008f30

08007678 <_Bfree>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800767c:	4605      	mov	r5, r0
 800767e:	460c      	mov	r4, r1
 8007680:	b976      	cbnz	r6, 80076a0 <_Bfree+0x28>
 8007682:	2010      	movs	r0, #16
 8007684:	f7ff ffa2 	bl	80075cc <malloc>
 8007688:	4602      	mov	r2, r0
 800768a:	6268      	str	r0, [r5, #36]	; 0x24
 800768c:	b920      	cbnz	r0, 8007698 <_Bfree+0x20>
 800768e:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <_Bfree+0x3c>)
 8007690:	4809      	ldr	r0, [pc, #36]	; (80076b8 <_Bfree+0x40>)
 8007692:	218a      	movs	r1, #138	; 0x8a
 8007694:	f000 fd96 	bl	80081c4 <__assert_func>
 8007698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800769c:	6006      	str	r6, [r0, #0]
 800769e:	60c6      	str	r6, [r0, #12]
 80076a0:	b13c      	cbz	r4, 80076b2 <_Bfree+0x3a>
 80076a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076a4:	6862      	ldr	r2, [r4, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076ac:	6021      	str	r1, [r4, #0]
 80076ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076b2:	bd70      	pop	{r4, r5, r6, pc}
 80076b4:	08008ead 	.word	0x08008ead
 80076b8:	08008f30 	.word	0x08008f30

080076bc <__multadd>:
 80076bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c0:	690d      	ldr	r5, [r1, #16]
 80076c2:	4607      	mov	r7, r0
 80076c4:	460c      	mov	r4, r1
 80076c6:	461e      	mov	r6, r3
 80076c8:	f101 0c14 	add.w	ip, r1, #20
 80076cc:	2000      	movs	r0, #0
 80076ce:	f8dc 3000 	ldr.w	r3, [ip]
 80076d2:	b299      	uxth	r1, r3
 80076d4:	fb02 6101 	mla	r1, r2, r1, r6
 80076d8:	0c1e      	lsrs	r6, r3, #16
 80076da:	0c0b      	lsrs	r3, r1, #16
 80076dc:	fb02 3306 	mla	r3, r2, r6, r3
 80076e0:	b289      	uxth	r1, r1
 80076e2:	3001      	adds	r0, #1
 80076e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076e8:	4285      	cmp	r5, r0
 80076ea:	f84c 1b04 	str.w	r1, [ip], #4
 80076ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076f2:	dcec      	bgt.n	80076ce <__multadd+0x12>
 80076f4:	b30e      	cbz	r6, 800773a <__multadd+0x7e>
 80076f6:	68a3      	ldr	r3, [r4, #8]
 80076f8:	42ab      	cmp	r3, r5
 80076fa:	dc19      	bgt.n	8007730 <__multadd+0x74>
 80076fc:	6861      	ldr	r1, [r4, #4]
 80076fe:	4638      	mov	r0, r7
 8007700:	3101      	adds	r1, #1
 8007702:	f7ff ff79 	bl	80075f8 <_Balloc>
 8007706:	4680      	mov	r8, r0
 8007708:	b928      	cbnz	r0, 8007716 <__multadd+0x5a>
 800770a:	4602      	mov	r2, r0
 800770c:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <__multadd+0x84>)
 800770e:	480d      	ldr	r0, [pc, #52]	; (8007744 <__multadd+0x88>)
 8007710:	21b5      	movs	r1, #181	; 0xb5
 8007712:	f000 fd57 	bl	80081c4 <__assert_func>
 8007716:	6922      	ldr	r2, [r4, #16]
 8007718:	3202      	adds	r2, #2
 800771a:	f104 010c 	add.w	r1, r4, #12
 800771e:	0092      	lsls	r2, r2, #2
 8007720:	300c      	adds	r0, #12
 8007722:	f7ff ff5b 	bl	80075dc <memcpy>
 8007726:	4621      	mov	r1, r4
 8007728:	4638      	mov	r0, r7
 800772a:	f7ff ffa5 	bl	8007678 <_Bfree>
 800772e:	4644      	mov	r4, r8
 8007730:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007734:	3501      	adds	r5, #1
 8007736:	615e      	str	r6, [r3, #20]
 8007738:	6125      	str	r5, [r4, #16]
 800773a:	4620      	mov	r0, r4
 800773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007740:	08008f1f 	.word	0x08008f1f
 8007744:	08008f30 	.word	0x08008f30

08007748 <__hi0bits>:
 8007748:	0c03      	lsrs	r3, r0, #16
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	b9d3      	cbnz	r3, 8007784 <__hi0bits+0x3c>
 800774e:	0400      	lsls	r0, r0, #16
 8007750:	2310      	movs	r3, #16
 8007752:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007756:	bf04      	itt	eq
 8007758:	0200      	lsleq	r0, r0, #8
 800775a:	3308      	addeq	r3, #8
 800775c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007760:	bf04      	itt	eq
 8007762:	0100      	lsleq	r0, r0, #4
 8007764:	3304      	addeq	r3, #4
 8007766:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800776a:	bf04      	itt	eq
 800776c:	0080      	lsleq	r0, r0, #2
 800776e:	3302      	addeq	r3, #2
 8007770:	2800      	cmp	r0, #0
 8007772:	db05      	blt.n	8007780 <__hi0bits+0x38>
 8007774:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007778:	f103 0301 	add.w	r3, r3, #1
 800777c:	bf08      	it	eq
 800777e:	2320      	moveq	r3, #32
 8007780:	4618      	mov	r0, r3
 8007782:	4770      	bx	lr
 8007784:	2300      	movs	r3, #0
 8007786:	e7e4      	b.n	8007752 <__hi0bits+0xa>

08007788 <__lo0bits>:
 8007788:	6803      	ldr	r3, [r0, #0]
 800778a:	f013 0207 	ands.w	r2, r3, #7
 800778e:	4601      	mov	r1, r0
 8007790:	d00b      	beq.n	80077aa <__lo0bits+0x22>
 8007792:	07da      	lsls	r2, r3, #31
 8007794:	d423      	bmi.n	80077de <__lo0bits+0x56>
 8007796:	0798      	lsls	r0, r3, #30
 8007798:	bf49      	itett	mi
 800779a:	085b      	lsrmi	r3, r3, #1
 800779c:	089b      	lsrpl	r3, r3, #2
 800779e:	2001      	movmi	r0, #1
 80077a0:	600b      	strmi	r3, [r1, #0]
 80077a2:	bf5c      	itt	pl
 80077a4:	600b      	strpl	r3, [r1, #0]
 80077a6:	2002      	movpl	r0, #2
 80077a8:	4770      	bx	lr
 80077aa:	b298      	uxth	r0, r3
 80077ac:	b9a8      	cbnz	r0, 80077da <__lo0bits+0x52>
 80077ae:	0c1b      	lsrs	r3, r3, #16
 80077b0:	2010      	movs	r0, #16
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	b90a      	cbnz	r2, 80077ba <__lo0bits+0x32>
 80077b6:	3008      	adds	r0, #8
 80077b8:	0a1b      	lsrs	r3, r3, #8
 80077ba:	071a      	lsls	r2, r3, #28
 80077bc:	bf04      	itt	eq
 80077be:	091b      	lsreq	r3, r3, #4
 80077c0:	3004      	addeq	r0, #4
 80077c2:	079a      	lsls	r2, r3, #30
 80077c4:	bf04      	itt	eq
 80077c6:	089b      	lsreq	r3, r3, #2
 80077c8:	3002      	addeq	r0, #2
 80077ca:	07da      	lsls	r2, r3, #31
 80077cc:	d403      	bmi.n	80077d6 <__lo0bits+0x4e>
 80077ce:	085b      	lsrs	r3, r3, #1
 80077d0:	f100 0001 	add.w	r0, r0, #1
 80077d4:	d005      	beq.n	80077e2 <__lo0bits+0x5a>
 80077d6:	600b      	str	r3, [r1, #0]
 80077d8:	4770      	bx	lr
 80077da:	4610      	mov	r0, r2
 80077dc:	e7e9      	b.n	80077b2 <__lo0bits+0x2a>
 80077de:	2000      	movs	r0, #0
 80077e0:	4770      	bx	lr
 80077e2:	2020      	movs	r0, #32
 80077e4:	4770      	bx	lr
	...

080077e8 <__i2b>:
 80077e8:	b510      	push	{r4, lr}
 80077ea:	460c      	mov	r4, r1
 80077ec:	2101      	movs	r1, #1
 80077ee:	f7ff ff03 	bl	80075f8 <_Balloc>
 80077f2:	4602      	mov	r2, r0
 80077f4:	b928      	cbnz	r0, 8007802 <__i2b+0x1a>
 80077f6:	4b05      	ldr	r3, [pc, #20]	; (800780c <__i2b+0x24>)
 80077f8:	4805      	ldr	r0, [pc, #20]	; (8007810 <__i2b+0x28>)
 80077fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077fe:	f000 fce1 	bl	80081c4 <__assert_func>
 8007802:	2301      	movs	r3, #1
 8007804:	6144      	str	r4, [r0, #20]
 8007806:	6103      	str	r3, [r0, #16]
 8007808:	bd10      	pop	{r4, pc}
 800780a:	bf00      	nop
 800780c:	08008f1f 	.word	0x08008f1f
 8007810:	08008f30 	.word	0x08008f30

08007814 <__multiply>:
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	4691      	mov	r9, r2
 800781a:	690a      	ldr	r2, [r1, #16]
 800781c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007820:	429a      	cmp	r2, r3
 8007822:	bfb8      	it	lt
 8007824:	460b      	movlt	r3, r1
 8007826:	460c      	mov	r4, r1
 8007828:	bfbc      	itt	lt
 800782a:	464c      	movlt	r4, r9
 800782c:	4699      	movlt	r9, r3
 800782e:	6927      	ldr	r7, [r4, #16]
 8007830:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007834:	68a3      	ldr	r3, [r4, #8]
 8007836:	6861      	ldr	r1, [r4, #4]
 8007838:	eb07 060a 	add.w	r6, r7, sl
 800783c:	42b3      	cmp	r3, r6
 800783e:	b085      	sub	sp, #20
 8007840:	bfb8      	it	lt
 8007842:	3101      	addlt	r1, #1
 8007844:	f7ff fed8 	bl	80075f8 <_Balloc>
 8007848:	b930      	cbnz	r0, 8007858 <__multiply+0x44>
 800784a:	4602      	mov	r2, r0
 800784c:	4b44      	ldr	r3, [pc, #272]	; (8007960 <__multiply+0x14c>)
 800784e:	4845      	ldr	r0, [pc, #276]	; (8007964 <__multiply+0x150>)
 8007850:	f240 115d 	movw	r1, #349	; 0x15d
 8007854:	f000 fcb6 	bl	80081c4 <__assert_func>
 8007858:	f100 0514 	add.w	r5, r0, #20
 800785c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007860:	462b      	mov	r3, r5
 8007862:	2200      	movs	r2, #0
 8007864:	4543      	cmp	r3, r8
 8007866:	d321      	bcc.n	80078ac <__multiply+0x98>
 8007868:	f104 0314 	add.w	r3, r4, #20
 800786c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007870:	f109 0314 	add.w	r3, r9, #20
 8007874:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007878:	9202      	str	r2, [sp, #8]
 800787a:	1b3a      	subs	r2, r7, r4
 800787c:	3a15      	subs	r2, #21
 800787e:	f022 0203 	bic.w	r2, r2, #3
 8007882:	3204      	adds	r2, #4
 8007884:	f104 0115 	add.w	r1, r4, #21
 8007888:	428f      	cmp	r7, r1
 800788a:	bf38      	it	cc
 800788c:	2204      	movcc	r2, #4
 800788e:	9201      	str	r2, [sp, #4]
 8007890:	9a02      	ldr	r2, [sp, #8]
 8007892:	9303      	str	r3, [sp, #12]
 8007894:	429a      	cmp	r2, r3
 8007896:	d80c      	bhi.n	80078b2 <__multiply+0x9e>
 8007898:	2e00      	cmp	r6, #0
 800789a:	dd03      	ble.n	80078a4 <__multiply+0x90>
 800789c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d05a      	beq.n	800795a <__multiply+0x146>
 80078a4:	6106      	str	r6, [r0, #16]
 80078a6:	b005      	add	sp, #20
 80078a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ac:	f843 2b04 	str.w	r2, [r3], #4
 80078b0:	e7d8      	b.n	8007864 <__multiply+0x50>
 80078b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80078b6:	f1ba 0f00 	cmp.w	sl, #0
 80078ba:	d024      	beq.n	8007906 <__multiply+0xf2>
 80078bc:	f104 0e14 	add.w	lr, r4, #20
 80078c0:	46a9      	mov	r9, r5
 80078c2:	f04f 0c00 	mov.w	ip, #0
 80078c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80078ca:	f8d9 1000 	ldr.w	r1, [r9]
 80078ce:	fa1f fb82 	uxth.w	fp, r2
 80078d2:	b289      	uxth	r1, r1
 80078d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80078d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80078dc:	f8d9 2000 	ldr.w	r2, [r9]
 80078e0:	4461      	add	r1, ip
 80078e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80078ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078ee:	b289      	uxth	r1, r1
 80078f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078f4:	4577      	cmp	r7, lr
 80078f6:	f849 1b04 	str.w	r1, [r9], #4
 80078fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078fe:	d8e2      	bhi.n	80078c6 <__multiply+0xb2>
 8007900:	9a01      	ldr	r2, [sp, #4]
 8007902:	f845 c002 	str.w	ip, [r5, r2]
 8007906:	9a03      	ldr	r2, [sp, #12]
 8007908:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800790c:	3304      	adds	r3, #4
 800790e:	f1b9 0f00 	cmp.w	r9, #0
 8007912:	d020      	beq.n	8007956 <__multiply+0x142>
 8007914:	6829      	ldr	r1, [r5, #0]
 8007916:	f104 0c14 	add.w	ip, r4, #20
 800791a:	46ae      	mov	lr, r5
 800791c:	f04f 0a00 	mov.w	sl, #0
 8007920:	f8bc b000 	ldrh.w	fp, [ip]
 8007924:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007928:	fb09 220b 	mla	r2, r9, fp, r2
 800792c:	4492      	add	sl, r2
 800792e:	b289      	uxth	r1, r1
 8007930:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007934:	f84e 1b04 	str.w	r1, [lr], #4
 8007938:	f85c 2b04 	ldr.w	r2, [ip], #4
 800793c:	f8be 1000 	ldrh.w	r1, [lr]
 8007940:	0c12      	lsrs	r2, r2, #16
 8007942:	fb09 1102 	mla	r1, r9, r2, r1
 8007946:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800794a:	4567      	cmp	r7, ip
 800794c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007950:	d8e6      	bhi.n	8007920 <__multiply+0x10c>
 8007952:	9a01      	ldr	r2, [sp, #4]
 8007954:	50a9      	str	r1, [r5, r2]
 8007956:	3504      	adds	r5, #4
 8007958:	e79a      	b.n	8007890 <__multiply+0x7c>
 800795a:	3e01      	subs	r6, #1
 800795c:	e79c      	b.n	8007898 <__multiply+0x84>
 800795e:	bf00      	nop
 8007960:	08008f1f 	.word	0x08008f1f
 8007964:	08008f30 	.word	0x08008f30

08007968 <__pow5mult>:
 8007968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800796c:	4615      	mov	r5, r2
 800796e:	f012 0203 	ands.w	r2, r2, #3
 8007972:	4606      	mov	r6, r0
 8007974:	460f      	mov	r7, r1
 8007976:	d007      	beq.n	8007988 <__pow5mult+0x20>
 8007978:	4c25      	ldr	r4, [pc, #148]	; (8007a10 <__pow5mult+0xa8>)
 800797a:	3a01      	subs	r2, #1
 800797c:	2300      	movs	r3, #0
 800797e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007982:	f7ff fe9b 	bl	80076bc <__multadd>
 8007986:	4607      	mov	r7, r0
 8007988:	10ad      	asrs	r5, r5, #2
 800798a:	d03d      	beq.n	8007a08 <__pow5mult+0xa0>
 800798c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800798e:	b97c      	cbnz	r4, 80079b0 <__pow5mult+0x48>
 8007990:	2010      	movs	r0, #16
 8007992:	f7ff fe1b 	bl	80075cc <malloc>
 8007996:	4602      	mov	r2, r0
 8007998:	6270      	str	r0, [r6, #36]	; 0x24
 800799a:	b928      	cbnz	r0, 80079a8 <__pow5mult+0x40>
 800799c:	4b1d      	ldr	r3, [pc, #116]	; (8007a14 <__pow5mult+0xac>)
 800799e:	481e      	ldr	r0, [pc, #120]	; (8007a18 <__pow5mult+0xb0>)
 80079a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80079a4:	f000 fc0e 	bl	80081c4 <__assert_func>
 80079a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079ac:	6004      	str	r4, [r0, #0]
 80079ae:	60c4      	str	r4, [r0, #12]
 80079b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80079b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079b8:	b94c      	cbnz	r4, 80079ce <__pow5mult+0x66>
 80079ba:	f240 2171 	movw	r1, #625	; 0x271
 80079be:	4630      	mov	r0, r6
 80079c0:	f7ff ff12 	bl	80077e8 <__i2b>
 80079c4:	2300      	movs	r3, #0
 80079c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80079ca:	4604      	mov	r4, r0
 80079cc:	6003      	str	r3, [r0, #0]
 80079ce:	f04f 0900 	mov.w	r9, #0
 80079d2:	07eb      	lsls	r3, r5, #31
 80079d4:	d50a      	bpl.n	80079ec <__pow5mult+0x84>
 80079d6:	4639      	mov	r1, r7
 80079d8:	4622      	mov	r2, r4
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ff1a 	bl	8007814 <__multiply>
 80079e0:	4639      	mov	r1, r7
 80079e2:	4680      	mov	r8, r0
 80079e4:	4630      	mov	r0, r6
 80079e6:	f7ff fe47 	bl	8007678 <_Bfree>
 80079ea:	4647      	mov	r7, r8
 80079ec:	106d      	asrs	r5, r5, #1
 80079ee:	d00b      	beq.n	8007a08 <__pow5mult+0xa0>
 80079f0:	6820      	ldr	r0, [r4, #0]
 80079f2:	b938      	cbnz	r0, 8007a04 <__pow5mult+0x9c>
 80079f4:	4622      	mov	r2, r4
 80079f6:	4621      	mov	r1, r4
 80079f8:	4630      	mov	r0, r6
 80079fa:	f7ff ff0b 	bl	8007814 <__multiply>
 80079fe:	6020      	str	r0, [r4, #0]
 8007a00:	f8c0 9000 	str.w	r9, [r0]
 8007a04:	4604      	mov	r4, r0
 8007a06:	e7e4      	b.n	80079d2 <__pow5mult+0x6a>
 8007a08:	4638      	mov	r0, r7
 8007a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a0e:	bf00      	nop
 8007a10:	08009080 	.word	0x08009080
 8007a14:	08008ead 	.word	0x08008ead
 8007a18:	08008f30 	.word	0x08008f30

08007a1c <__lshift>:
 8007a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a20:	460c      	mov	r4, r1
 8007a22:	6849      	ldr	r1, [r1, #4]
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a2a:	68a3      	ldr	r3, [r4, #8]
 8007a2c:	4607      	mov	r7, r0
 8007a2e:	4691      	mov	r9, r2
 8007a30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a34:	f108 0601 	add.w	r6, r8, #1
 8007a38:	42b3      	cmp	r3, r6
 8007a3a:	db0b      	blt.n	8007a54 <__lshift+0x38>
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	f7ff fddb 	bl	80075f8 <_Balloc>
 8007a42:	4605      	mov	r5, r0
 8007a44:	b948      	cbnz	r0, 8007a5a <__lshift+0x3e>
 8007a46:	4602      	mov	r2, r0
 8007a48:	4b2a      	ldr	r3, [pc, #168]	; (8007af4 <__lshift+0xd8>)
 8007a4a:	482b      	ldr	r0, [pc, #172]	; (8007af8 <__lshift+0xdc>)
 8007a4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007a50:	f000 fbb8 	bl	80081c4 <__assert_func>
 8007a54:	3101      	adds	r1, #1
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	e7ee      	b.n	8007a38 <__lshift+0x1c>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f100 0114 	add.w	r1, r0, #20
 8007a60:	f100 0210 	add.w	r2, r0, #16
 8007a64:	4618      	mov	r0, r3
 8007a66:	4553      	cmp	r3, sl
 8007a68:	db37      	blt.n	8007ada <__lshift+0xbe>
 8007a6a:	6920      	ldr	r0, [r4, #16]
 8007a6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a70:	f104 0314 	add.w	r3, r4, #20
 8007a74:	f019 091f 	ands.w	r9, r9, #31
 8007a78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a80:	d02f      	beq.n	8007ae2 <__lshift+0xc6>
 8007a82:	f1c9 0e20 	rsb	lr, r9, #32
 8007a86:	468a      	mov	sl, r1
 8007a88:	f04f 0c00 	mov.w	ip, #0
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	fa02 f209 	lsl.w	r2, r2, r9
 8007a92:	ea42 020c 	orr.w	r2, r2, ip
 8007a96:	f84a 2b04 	str.w	r2, [sl], #4
 8007a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a9e:	4298      	cmp	r0, r3
 8007aa0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007aa4:	d8f2      	bhi.n	8007a8c <__lshift+0x70>
 8007aa6:	1b03      	subs	r3, r0, r4
 8007aa8:	3b15      	subs	r3, #21
 8007aaa:	f023 0303 	bic.w	r3, r3, #3
 8007aae:	3304      	adds	r3, #4
 8007ab0:	f104 0215 	add.w	r2, r4, #21
 8007ab4:	4290      	cmp	r0, r2
 8007ab6:	bf38      	it	cc
 8007ab8:	2304      	movcc	r3, #4
 8007aba:	f841 c003 	str.w	ip, [r1, r3]
 8007abe:	f1bc 0f00 	cmp.w	ip, #0
 8007ac2:	d001      	beq.n	8007ac8 <__lshift+0xac>
 8007ac4:	f108 0602 	add.w	r6, r8, #2
 8007ac8:	3e01      	subs	r6, #1
 8007aca:	4638      	mov	r0, r7
 8007acc:	612e      	str	r6, [r5, #16]
 8007ace:	4621      	mov	r1, r4
 8007ad0:	f7ff fdd2 	bl	8007678 <_Bfree>
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ada:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ade:	3301      	adds	r3, #1
 8007ae0:	e7c1      	b.n	8007a66 <__lshift+0x4a>
 8007ae2:	3904      	subs	r1, #4
 8007ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ae8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007aec:	4298      	cmp	r0, r3
 8007aee:	d8f9      	bhi.n	8007ae4 <__lshift+0xc8>
 8007af0:	e7ea      	b.n	8007ac8 <__lshift+0xac>
 8007af2:	bf00      	nop
 8007af4:	08008f1f 	.word	0x08008f1f
 8007af8:	08008f30 	.word	0x08008f30

08007afc <__mcmp>:
 8007afc:	b530      	push	{r4, r5, lr}
 8007afe:	6902      	ldr	r2, [r0, #16]
 8007b00:	690c      	ldr	r4, [r1, #16]
 8007b02:	1b12      	subs	r2, r2, r4
 8007b04:	d10e      	bne.n	8007b24 <__mcmp+0x28>
 8007b06:	f100 0314 	add.w	r3, r0, #20
 8007b0a:	3114      	adds	r1, #20
 8007b0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007b10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007b14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007b18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007b1c:	42a5      	cmp	r5, r4
 8007b1e:	d003      	beq.n	8007b28 <__mcmp+0x2c>
 8007b20:	d305      	bcc.n	8007b2e <__mcmp+0x32>
 8007b22:	2201      	movs	r2, #1
 8007b24:	4610      	mov	r0, r2
 8007b26:	bd30      	pop	{r4, r5, pc}
 8007b28:	4283      	cmp	r3, r0
 8007b2a:	d3f3      	bcc.n	8007b14 <__mcmp+0x18>
 8007b2c:	e7fa      	b.n	8007b24 <__mcmp+0x28>
 8007b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b32:	e7f7      	b.n	8007b24 <__mcmp+0x28>

08007b34 <__mdiff>:
 8007b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b38:	460c      	mov	r4, r1
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4620      	mov	r0, r4
 8007b40:	4690      	mov	r8, r2
 8007b42:	f7ff ffdb 	bl	8007afc <__mcmp>
 8007b46:	1e05      	subs	r5, r0, #0
 8007b48:	d110      	bne.n	8007b6c <__mdiff+0x38>
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f7ff fd53 	bl	80075f8 <_Balloc>
 8007b52:	b930      	cbnz	r0, 8007b62 <__mdiff+0x2e>
 8007b54:	4b3a      	ldr	r3, [pc, #232]	; (8007c40 <__mdiff+0x10c>)
 8007b56:	4602      	mov	r2, r0
 8007b58:	f240 2132 	movw	r1, #562	; 0x232
 8007b5c:	4839      	ldr	r0, [pc, #228]	; (8007c44 <__mdiff+0x110>)
 8007b5e:	f000 fb31 	bl	80081c4 <__assert_func>
 8007b62:	2301      	movs	r3, #1
 8007b64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6c:	bfa4      	itt	ge
 8007b6e:	4643      	movge	r3, r8
 8007b70:	46a0      	movge	r8, r4
 8007b72:	4630      	mov	r0, r6
 8007b74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b78:	bfa6      	itte	ge
 8007b7a:	461c      	movge	r4, r3
 8007b7c:	2500      	movge	r5, #0
 8007b7e:	2501      	movlt	r5, #1
 8007b80:	f7ff fd3a 	bl	80075f8 <_Balloc>
 8007b84:	b920      	cbnz	r0, 8007b90 <__mdiff+0x5c>
 8007b86:	4b2e      	ldr	r3, [pc, #184]	; (8007c40 <__mdiff+0x10c>)
 8007b88:	4602      	mov	r2, r0
 8007b8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b8e:	e7e5      	b.n	8007b5c <__mdiff+0x28>
 8007b90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b94:	6926      	ldr	r6, [r4, #16]
 8007b96:	60c5      	str	r5, [r0, #12]
 8007b98:	f104 0914 	add.w	r9, r4, #20
 8007b9c:	f108 0514 	add.w	r5, r8, #20
 8007ba0:	f100 0e14 	add.w	lr, r0, #20
 8007ba4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ba8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007bac:	f108 0210 	add.w	r2, r8, #16
 8007bb0:	46f2      	mov	sl, lr
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007bbc:	fa1f f883 	uxth.w	r8, r3
 8007bc0:	fa11 f18b 	uxtah	r1, r1, fp
 8007bc4:	0c1b      	lsrs	r3, r3, #16
 8007bc6:	eba1 0808 	sub.w	r8, r1, r8
 8007bca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007bce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007bd2:	fa1f f888 	uxth.w	r8, r8
 8007bd6:	1419      	asrs	r1, r3, #16
 8007bd8:	454e      	cmp	r6, r9
 8007bda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007bde:	f84a 3b04 	str.w	r3, [sl], #4
 8007be2:	d8e7      	bhi.n	8007bb4 <__mdiff+0x80>
 8007be4:	1b33      	subs	r3, r6, r4
 8007be6:	3b15      	subs	r3, #21
 8007be8:	f023 0303 	bic.w	r3, r3, #3
 8007bec:	3304      	adds	r3, #4
 8007bee:	3415      	adds	r4, #21
 8007bf0:	42a6      	cmp	r6, r4
 8007bf2:	bf38      	it	cc
 8007bf4:	2304      	movcc	r3, #4
 8007bf6:	441d      	add	r5, r3
 8007bf8:	4473      	add	r3, lr
 8007bfa:	469e      	mov	lr, r3
 8007bfc:	462e      	mov	r6, r5
 8007bfe:	4566      	cmp	r6, ip
 8007c00:	d30e      	bcc.n	8007c20 <__mdiff+0xec>
 8007c02:	f10c 0203 	add.w	r2, ip, #3
 8007c06:	1b52      	subs	r2, r2, r5
 8007c08:	f022 0203 	bic.w	r2, r2, #3
 8007c0c:	3d03      	subs	r5, #3
 8007c0e:	45ac      	cmp	ip, r5
 8007c10:	bf38      	it	cc
 8007c12:	2200      	movcc	r2, #0
 8007c14:	441a      	add	r2, r3
 8007c16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007c1a:	b17b      	cbz	r3, 8007c3c <__mdiff+0x108>
 8007c1c:	6107      	str	r7, [r0, #16]
 8007c1e:	e7a3      	b.n	8007b68 <__mdiff+0x34>
 8007c20:	f856 8b04 	ldr.w	r8, [r6], #4
 8007c24:	fa11 f288 	uxtah	r2, r1, r8
 8007c28:	1414      	asrs	r4, r2, #16
 8007c2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007c2e:	b292      	uxth	r2, r2
 8007c30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007c34:	f84e 2b04 	str.w	r2, [lr], #4
 8007c38:	1421      	asrs	r1, r4, #16
 8007c3a:	e7e0      	b.n	8007bfe <__mdiff+0xca>
 8007c3c:	3f01      	subs	r7, #1
 8007c3e:	e7ea      	b.n	8007c16 <__mdiff+0xe2>
 8007c40:	08008f1f 	.word	0x08008f1f
 8007c44:	08008f30 	.word	0x08008f30

08007c48 <__d2b>:
 8007c48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c4c:	4689      	mov	r9, r1
 8007c4e:	2101      	movs	r1, #1
 8007c50:	ec57 6b10 	vmov	r6, r7, d0
 8007c54:	4690      	mov	r8, r2
 8007c56:	f7ff fccf 	bl	80075f8 <_Balloc>
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	b930      	cbnz	r0, 8007c6c <__d2b+0x24>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	4b25      	ldr	r3, [pc, #148]	; (8007cf8 <__d2b+0xb0>)
 8007c62:	4826      	ldr	r0, [pc, #152]	; (8007cfc <__d2b+0xb4>)
 8007c64:	f240 310a 	movw	r1, #778	; 0x30a
 8007c68:	f000 faac 	bl	80081c4 <__assert_func>
 8007c6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c74:	bb35      	cbnz	r5, 8007cc4 <__d2b+0x7c>
 8007c76:	2e00      	cmp	r6, #0
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	d028      	beq.n	8007cce <__d2b+0x86>
 8007c7c:	4668      	mov	r0, sp
 8007c7e:	9600      	str	r6, [sp, #0]
 8007c80:	f7ff fd82 	bl	8007788 <__lo0bits>
 8007c84:	9900      	ldr	r1, [sp, #0]
 8007c86:	b300      	cbz	r0, 8007cca <__d2b+0x82>
 8007c88:	9a01      	ldr	r2, [sp, #4]
 8007c8a:	f1c0 0320 	rsb	r3, r0, #32
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	430b      	orrs	r3, r1
 8007c94:	40c2      	lsrs	r2, r0
 8007c96:	6163      	str	r3, [r4, #20]
 8007c98:	9201      	str	r2, [sp, #4]
 8007c9a:	9b01      	ldr	r3, [sp, #4]
 8007c9c:	61a3      	str	r3, [r4, #24]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bf14      	ite	ne
 8007ca2:	2202      	movne	r2, #2
 8007ca4:	2201      	moveq	r2, #1
 8007ca6:	6122      	str	r2, [r4, #16]
 8007ca8:	b1d5      	cbz	r5, 8007ce0 <__d2b+0x98>
 8007caa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007cae:	4405      	add	r5, r0
 8007cb0:	f8c9 5000 	str.w	r5, [r9]
 8007cb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cb8:	f8c8 0000 	str.w	r0, [r8]
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	b003      	add	sp, #12
 8007cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cc8:	e7d5      	b.n	8007c76 <__d2b+0x2e>
 8007cca:	6161      	str	r1, [r4, #20]
 8007ccc:	e7e5      	b.n	8007c9a <__d2b+0x52>
 8007cce:	a801      	add	r0, sp, #4
 8007cd0:	f7ff fd5a 	bl	8007788 <__lo0bits>
 8007cd4:	9b01      	ldr	r3, [sp, #4]
 8007cd6:	6163      	str	r3, [r4, #20]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	6122      	str	r2, [r4, #16]
 8007cdc:	3020      	adds	r0, #32
 8007cde:	e7e3      	b.n	8007ca8 <__d2b+0x60>
 8007ce0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ce4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ce8:	f8c9 0000 	str.w	r0, [r9]
 8007cec:	6918      	ldr	r0, [r3, #16]
 8007cee:	f7ff fd2b 	bl	8007748 <__hi0bits>
 8007cf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007cf6:	e7df      	b.n	8007cb8 <__d2b+0x70>
 8007cf8:	08008f1f 	.word	0x08008f1f
 8007cfc:	08008f30 	.word	0x08008f30

08007d00 <_calloc_r>:
 8007d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d02:	fba1 2402 	umull	r2, r4, r1, r2
 8007d06:	b94c      	cbnz	r4, 8007d1c <_calloc_r+0x1c>
 8007d08:	4611      	mov	r1, r2
 8007d0a:	9201      	str	r2, [sp, #4]
 8007d0c:	f000 f87a 	bl	8007e04 <_malloc_r>
 8007d10:	9a01      	ldr	r2, [sp, #4]
 8007d12:	4605      	mov	r5, r0
 8007d14:	b930      	cbnz	r0, 8007d24 <_calloc_r+0x24>
 8007d16:	4628      	mov	r0, r5
 8007d18:	b003      	add	sp, #12
 8007d1a:	bd30      	pop	{r4, r5, pc}
 8007d1c:	220c      	movs	r2, #12
 8007d1e:	6002      	str	r2, [r0, #0]
 8007d20:	2500      	movs	r5, #0
 8007d22:	e7f8      	b.n	8007d16 <_calloc_r+0x16>
 8007d24:	4621      	mov	r1, r4
 8007d26:	f7fe f931 	bl	8005f8c <memset>
 8007d2a:	e7f4      	b.n	8007d16 <_calloc_r+0x16>

08007d2c <_free_r>:
 8007d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d2e:	2900      	cmp	r1, #0
 8007d30:	d044      	beq.n	8007dbc <_free_r+0x90>
 8007d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d36:	9001      	str	r0, [sp, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d3e:	bfb8      	it	lt
 8007d40:	18e4      	addlt	r4, r4, r3
 8007d42:	f000 fa9b 	bl	800827c <__malloc_lock>
 8007d46:	4a1e      	ldr	r2, [pc, #120]	; (8007dc0 <_free_r+0x94>)
 8007d48:	9801      	ldr	r0, [sp, #4]
 8007d4a:	6813      	ldr	r3, [r2, #0]
 8007d4c:	b933      	cbnz	r3, 8007d5c <_free_r+0x30>
 8007d4e:	6063      	str	r3, [r4, #4]
 8007d50:	6014      	str	r4, [r2, #0]
 8007d52:	b003      	add	sp, #12
 8007d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d58:	f000 ba96 	b.w	8008288 <__malloc_unlock>
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	d908      	bls.n	8007d72 <_free_r+0x46>
 8007d60:	6825      	ldr	r5, [r4, #0]
 8007d62:	1961      	adds	r1, r4, r5
 8007d64:	428b      	cmp	r3, r1
 8007d66:	bf01      	itttt	eq
 8007d68:	6819      	ldreq	r1, [r3, #0]
 8007d6a:	685b      	ldreq	r3, [r3, #4]
 8007d6c:	1949      	addeq	r1, r1, r5
 8007d6e:	6021      	streq	r1, [r4, #0]
 8007d70:	e7ed      	b.n	8007d4e <_free_r+0x22>
 8007d72:	461a      	mov	r2, r3
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	b10b      	cbz	r3, 8007d7c <_free_r+0x50>
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	d9fa      	bls.n	8007d72 <_free_r+0x46>
 8007d7c:	6811      	ldr	r1, [r2, #0]
 8007d7e:	1855      	adds	r5, r2, r1
 8007d80:	42a5      	cmp	r5, r4
 8007d82:	d10b      	bne.n	8007d9c <_free_r+0x70>
 8007d84:	6824      	ldr	r4, [r4, #0]
 8007d86:	4421      	add	r1, r4
 8007d88:	1854      	adds	r4, r2, r1
 8007d8a:	42a3      	cmp	r3, r4
 8007d8c:	6011      	str	r1, [r2, #0]
 8007d8e:	d1e0      	bne.n	8007d52 <_free_r+0x26>
 8007d90:	681c      	ldr	r4, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	6053      	str	r3, [r2, #4]
 8007d96:	4421      	add	r1, r4
 8007d98:	6011      	str	r1, [r2, #0]
 8007d9a:	e7da      	b.n	8007d52 <_free_r+0x26>
 8007d9c:	d902      	bls.n	8007da4 <_free_r+0x78>
 8007d9e:	230c      	movs	r3, #12
 8007da0:	6003      	str	r3, [r0, #0]
 8007da2:	e7d6      	b.n	8007d52 <_free_r+0x26>
 8007da4:	6825      	ldr	r5, [r4, #0]
 8007da6:	1961      	adds	r1, r4, r5
 8007da8:	428b      	cmp	r3, r1
 8007daa:	bf04      	itt	eq
 8007dac:	6819      	ldreq	r1, [r3, #0]
 8007dae:	685b      	ldreq	r3, [r3, #4]
 8007db0:	6063      	str	r3, [r4, #4]
 8007db2:	bf04      	itt	eq
 8007db4:	1949      	addeq	r1, r1, r5
 8007db6:	6021      	streq	r1, [r4, #0]
 8007db8:	6054      	str	r4, [r2, #4]
 8007dba:	e7ca      	b.n	8007d52 <_free_r+0x26>
 8007dbc:	b003      	add	sp, #12
 8007dbe:	bd30      	pop	{r4, r5, pc}
 8007dc0:	2000063c 	.word	0x2000063c

08007dc4 <sbrk_aligned>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	4e0e      	ldr	r6, [pc, #56]	; (8007e00 <sbrk_aligned+0x3c>)
 8007dc8:	460c      	mov	r4, r1
 8007dca:	6831      	ldr	r1, [r6, #0]
 8007dcc:	4605      	mov	r5, r0
 8007dce:	b911      	cbnz	r1, 8007dd6 <sbrk_aligned+0x12>
 8007dd0:	f000 f9e8 	bl	80081a4 <_sbrk_r>
 8007dd4:	6030      	str	r0, [r6, #0]
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f000 f9e3 	bl	80081a4 <_sbrk_r>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d00a      	beq.n	8007df8 <sbrk_aligned+0x34>
 8007de2:	1cc4      	adds	r4, r0, #3
 8007de4:	f024 0403 	bic.w	r4, r4, #3
 8007de8:	42a0      	cmp	r0, r4
 8007dea:	d007      	beq.n	8007dfc <sbrk_aligned+0x38>
 8007dec:	1a21      	subs	r1, r4, r0
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 f9d8 	bl	80081a4 <_sbrk_r>
 8007df4:	3001      	adds	r0, #1
 8007df6:	d101      	bne.n	8007dfc <sbrk_aligned+0x38>
 8007df8:	f04f 34ff 	mov.w	r4, #4294967295
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}
 8007e00:	20000640 	.word	0x20000640

08007e04 <_malloc_r>:
 8007e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e08:	1ccd      	adds	r5, r1, #3
 8007e0a:	f025 0503 	bic.w	r5, r5, #3
 8007e0e:	3508      	adds	r5, #8
 8007e10:	2d0c      	cmp	r5, #12
 8007e12:	bf38      	it	cc
 8007e14:	250c      	movcc	r5, #12
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	4607      	mov	r7, r0
 8007e1a:	db01      	blt.n	8007e20 <_malloc_r+0x1c>
 8007e1c:	42a9      	cmp	r1, r5
 8007e1e:	d905      	bls.n	8007e2c <_malloc_r+0x28>
 8007e20:	230c      	movs	r3, #12
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	2600      	movs	r6, #0
 8007e26:	4630      	mov	r0, r6
 8007e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e2c:	4e2e      	ldr	r6, [pc, #184]	; (8007ee8 <_malloc_r+0xe4>)
 8007e2e:	f000 fa25 	bl	800827c <__malloc_lock>
 8007e32:	6833      	ldr	r3, [r6, #0]
 8007e34:	461c      	mov	r4, r3
 8007e36:	bb34      	cbnz	r4, 8007e86 <_malloc_r+0x82>
 8007e38:	4629      	mov	r1, r5
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	f7ff ffc2 	bl	8007dc4 <sbrk_aligned>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	4604      	mov	r4, r0
 8007e44:	d14d      	bne.n	8007ee2 <_malloc_r+0xde>
 8007e46:	6834      	ldr	r4, [r6, #0]
 8007e48:	4626      	mov	r6, r4
 8007e4a:	2e00      	cmp	r6, #0
 8007e4c:	d140      	bne.n	8007ed0 <_malloc_r+0xcc>
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	4631      	mov	r1, r6
 8007e52:	4638      	mov	r0, r7
 8007e54:	eb04 0803 	add.w	r8, r4, r3
 8007e58:	f000 f9a4 	bl	80081a4 <_sbrk_r>
 8007e5c:	4580      	cmp	r8, r0
 8007e5e:	d13a      	bne.n	8007ed6 <_malloc_r+0xd2>
 8007e60:	6821      	ldr	r1, [r4, #0]
 8007e62:	3503      	adds	r5, #3
 8007e64:	1a6d      	subs	r5, r5, r1
 8007e66:	f025 0503 	bic.w	r5, r5, #3
 8007e6a:	3508      	adds	r5, #8
 8007e6c:	2d0c      	cmp	r5, #12
 8007e6e:	bf38      	it	cc
 8007e70:	250c      	movcc	r5, #12
 8007e72:	4629      	mov	r1, r5
 8007e74:	4638      	mov	r0, r7
 8007e76:	f7ff ffa5 	bl	8007dc4 <sbrk_aligned>
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	d02b      	beq.n	8007ed6 <_malloc_r+0xd2>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	442b      	add	r3, r5
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	e00e      	b.n	8007ea4 <_malloc_r+0xa0>
 8007e86:	6822      	ldr	r2, [r4, #0]
 8007e88:	1b52      	subs	r2, r2, r5
 8007e8a:	d41e      	bmi.n	8007eca <_malloc_r+0xc6>
 8007e8c:	2a0b      	cmp	r2, #11
 8007e8e:	d916      	bls.n	8007ebe <_malloc_r+0xba>
 8007e90:	1961      	adds	r1, r4, r5
 8007e92:	42a3      	cmp	r3, r4
 8007e94:	6025      	str	r5, [r4, #0]
 8007e96:	bf18      	it	ne
 8007e98:	6059      	strne	r1, [r3, #4]
 8007e9a:	6863      	ldr	r3, [r4, #4]
 8007e9c:	bf08      	it	eq
 8007e9e:	6031      	streq	r1, [r6, #0]
 8007ea0:	5162      	str	r2, [r4, r5]
 8007ea2:	604b      	str	r3, [r1, #4]
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	f104 060b 	add.w	r6, r4, #11
 8007eaa:	f000 f9ed 	bl	8008288 <__malloc_unlock>
 8007eae:	f026 0607 	bic.w	r6, r6, #7
 8007eb2:	1d23      	adds	r3, r4, #4
 8007eb4:	1af2      	subs	r2, r6, r3
 8007eb6:	d0b6      	beq.n	8007e26 <_malloc_r+0x22>
 8007eb8:	1b9b      	subs	r3, r3, r6
 8007eba:	50a3      	str	r3, [r4, r2]
 8007ebc:	e7b3      	b.n	8007e26 <_malloc_r+0x22>
 8007ebe:	6862      	ldr	r2, [r4, #4]
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	bf0c      	ite	eq
 8007ec4:	6032      	streq	r2, [r6, #0]
 8007ec6:	605a      	strne	r2, [r3, #4]
 8007ec8:	e7ec      	b.n	8007ea4 <_malloc_r+0xa0>
 8007eca:	4623      	mov	r3, r4
 8007ecc:	6864      	ldr	r4, [r4, #4]
 8007ece:	e7b2      	b.n	8007e36 <_malloc_r+0x32>
 8007ed0:	4634      	mov	r4, r6
 8007ed2:	6876      	ldr	r6, [r6, #4]
 8007ed4:	e7b9      	b.n	8007e4a <_malloc_r+0x46>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	603b      	str	r3, [r7, #0]
 8007eda:	4638      	mov	r0, r7
 8007edc:	f000 f9d4 	bl	8008288 <__malloc_unlock>
 8007ee0:	e7a1      	b.n	8007e26 <_malloc_r+0x22>
 8007ee2:	6025      	str	r5, [r4, #0]
 8007ee4:	e7de      	b.n	8007ea4 <_malloc_r+0xa0>
 8007ee6:	bf00      	nop
 8007ee8:	2000063c 	.word	0x2000063c

08007eec <__ssputs_r>:
 8007eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef0:	688e      	ldr	r6, [r1, #8]
 8007ef2:	429e      	cmp	r6, r3
 8007ef4:	4682      	mov	sl, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	4690      	mov	r8, r2
 8007efa:	461f      	mov	r7, r3
 8007efc:	d838      	bhi.n	8007f70 <__ssputs_r+0x84>
 8007efe:	898a      	ldrh	r2, [r1, #12]
 8007f00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f04:	d032      	beq.n	8007f6c <__ssputs_r+0x80>
 8007f06:	6825      	ldr	r5, [r4, #0]
 8007f08:	6909      	ldr	r1, [r1, #16]
 8007f0a:	eba5 0901 	sub.w	r9, r5, r1
 8007f0e:	6965      	ldr	r5, [r4, #20]
 8007f10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f18:	3301      	adds	r3, #1
 8007f1a:	444b      	add	r3, r9
 8007f1c:	106d      	asrs	r5, r5, #1
 8007f1e:	429d      	cmp	r5, r3
 8007f20:	bf38      	it	cc
 8007f22:	461d      	movcc	r5, r3
 8007f24:	0553      	lsls	r3, r2, #21
 8007f26:	d531      	bpl.n	8007f8c <__ssputs_r+0xa0>
 8007f28:	4629      	mov	r1, r5
 8007f2a:	f7ff ff6b 	bl	8007e04 <_malloc_r>
 8007f2e:	4606      	mov	r6, r0
 8007f30:	b950      	cbnz	r0, 8007f48 <__ssputs_r+0x5c>
 8007f32:	230c      	movs	r3, #12
 8007f34:	f8ca 3000 	str.w	r3, [sl]
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f3e:	81a3      	strh	r3, [r4, #12]
 8007f40:	f04f 30ff 	mov.w	r0, #4294967295
 8007f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f48:	6921      	ldr	r1, [r4, #16]
 8007f4a:	464a      	mov	r2, r9
 8007f4c:	f7ff fb46 	bl	80075dc <memcpy>
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f5a:	81a3      	strh	r3, [r4, #12]
 8007f5c:	6126      	str	r6, [r4, #16]
 8007f5e:	6165      	str	r5, [r4, #20]
 8007f60:	444e      	add	r6, r9
 8007f62:	eba5 0509 	sub.w	r5, r5, r9
 8007f66:	6026      	str	r6, [r4, #0]
 8007f68:	60a5      	str	r5, [r4, #8]
 8007f6a:	463e      	mov	r6, r7
 8007f6c:	42be      	cmp	r6, r7
 8007f6e:	d900      	bls.n	8007f72 <__ssputs_r+0x86>
 8007f70:	463e      	mov	r6, r7
 8007f72:	6820      	ldr	r0, [r4, #0]
 8007f74:	4632      	mov	r2, r6
 8007f76:	4641      	mov	r1, r8
 8007f78:	f000 f966 	bl	8008248 <memmove>
 8007f7c:	68a3      	ldr	r3, [r4, #8]
 8007f7e:	1b9b      	subs	r3, r3, r6
 8007f80:	60a3      	str	r3, [r4, #8]
 8007f82:	6823      	ldr	r3, [r4, #0]
 8007f84:	4433      	add	r3, r6
 8007f86:	6023      	str	r3, [r4, #0]
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e7db      	b.n	8007f44 <__ssputs_r+0x58>
 8007f8c:	462a      	mov	r2, r5
 8007f8e:	f000 f981 	bl	8008294 <_realloc_r>
 8007f92:	4606      	mov	r6, r0
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d1e1      	bne.n	8007f5c <__ssputs_r+0x70>
 8007f98:	6921      	ldr	r1, [r4, #16]
 8007f9a:	4650      	mov	r0, sl
 8007f9c:	f7ff fec6 	bl	8007d2c <_free_r>
 8007fa0:	e7c7      	b.n	8007f32 <__ssputs_r+0x46>
	...

08007fa4 <_svfiprintf_r>:
 8007fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa8:	4698      	mov	r8, r3
 8007faa:	898b      	ldrh	r3, [r1, #12]
 8007fac:	061b      	lsls	r3, r3, #24
 8007fae:	b09d      	sub	sp, #116	; 0x74
 8007fb0:	4607      	mov	r7, r0
 8007fb2:	460d      	mov	r5, r1
 8007fb4:	4614      	mov	r4, r2
 8007fb6:	d50e      	bpl.n	8007fd6 <_svfiprintf_r+0x32>
 8007fb8:	690b      	ldr	r3, [r1, #16]
 8007fba:	b963      	cbnz	r3, 8007fd6 <_svfiprintf_r+0x32>
 8007fbc:	2140      	movs	r1, #64	; 0x40
 8007fbe:	f7ff ff21 	bl	8007e04 <_malloc_r>
 8007fc2:	6028      	str	r0, [r5, #0]
 8007fc4:	6128      	str	r0, [r5, #16]
 8007fc6:	b920      	cbnz	r0, 8007fd2 <_svfiprintf_r+0x2e>
 8007fc8:	230c      	movs	r3, #12
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd0:	e0d1      	b.n	8008176 <_svfiprintf_r+0x1d2>
 8007fd2:	2340      	movs	r3, #64	; 0x40
 8007fd4:	616b      	str	r3, [r5, #20]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8007fda:	2320      	movs	r3, #32
 8007fdc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fe0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fe4:	2330      	movs	r3, #48	; 0x30
 8007fe6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008190 <_svfiprintf_r+0x1ec>
 8007fea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fee:	f04f 0901 	mov.w	r9, #1
 8007ff2:	4623      	mov	r3, r4
 8007ff4:	469a      	mov	sl, r3
 8007ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ffa:	b10a      	cbz	r2, 8008000 <_svfiprintf_r+0x5c>
 8007ffc:	2a25      	cmp	r2, #37	; 0x25
 8007ffe:	d1f9      	bne.n	8007ff4 <_svfiprintf_r+0x50>
 8008000:	ebba 0b04 	subs.w	fp, sl, r4
 8008004:	d00b      	beq.n	800801e <_svfiprintf_r+0x7a>
 8008006:	465b      	mov	r3, fp
 8008008:	4622      	mov	r2, r4
 800800a:	4629      	mov	r1, r5
 800800c:	4638      	mov	r0, r7
 800800e:	f7ff ff6d 	bl	8007eec <__ssputs_r>
 8008012:	3001      	adds	r0, #1
 8008014:	f000 80aa 	beq.w	800816c <_svfiprintf_r+0x1c8>
 8008018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800801a:	445a      	add	r2, fp
 800801c:	9209      	str	r2, [sp, #36]	; 0x24
 800801e:	f89a 3000 	ldrb.w	r3, [sl]
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 80a2 	beq.w	800816c <_svfiprintf_r+0x1c8>
 8008028:	2300      	movs	r3, #0
 800802a:	f04f 32ff 	mov.w	r2, #4294967295
 800802e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008032:	f10a 0a01 	add.w	sl, sl, #1
 8008036:	9304      	str	r3, [sp, #16]
 8008038:	9307      	str	r3, [sp, #28]
 800803a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800803e:	931a      	str	r3, [sp, #104]	; 0x68
 8008040:	4654      	mov	r4, sl
 8008042:	2205      	movs	r2, #5
 8008044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008048:	4851      	ldr	r0, [pc, #324]	; (8008190 <_svfiprintf_r+0x1ec>)
 800804a:	f7f8 f8e9 	bl	8000220 <memchr>
 800804e:	9a04      	ldr	r2, [sp, #16]
 8008050:	b9d8      	cbnz	r0, 800808a <_svfiprintf_r+0xe6>
 8008052:	06d0      	lsls	r0, r2, #27
 8008054:	bf44      	itt	mi
 8008056:	2320      	movmi	r3, #32
 8008058:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800805c:	0711      	lsls	r1, r2, #28
 800805e:	bf44      	itt	mi
 8008060:	232b      	movmi	r3, #43	; 0x2b
 8008062:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008066:	f89a 3000 	ldrb.w	r3, [sl]
 800806a:	2b2a      	cmp	r3, #42	; 0x2a
 800806c:	d015      	beq.n	800809a <_svfiprintf_r+0xf6>
 800806e:	9a07      	ldr	r2, [sp, #28]
 8008070:	4654      	mov	r4, sl
 8008072:	2000      	movs	r0, #0
 8008074:	f04f 0c0a 	mov.w	ip, #10
 8008078:	4621      	mov	r1, r4
 800807a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800807e:	3b30      	subs	r3, #48	; 0x30
 8008080:	2b09      	cmp	r3, #9
 8008082:	d94e      	bls.n	8008122 <_svfiprintf_r+0x17e>
 8008084:	b1b0      	cbz	r0, 80080b4 <_svfiprintf_r+0x110>
 8008086:	9207      	str	r2, [sp, #28]
 8008088:	e014      	b.n	80080b4 <_svfiprintf_r+0x110>
 800808a:	eba0 0308 	sub.w	r3, r0, r8
 800808e:	fa09 f303 	lsl.w	r3, r9, r3
 8008092:	4313      	orrs	r3, r2
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	46a2      	mov	sl, r4
 8008098:	e7d2      	b.n	8008040 <_svfiprintf_r+0x9c>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	1d19      	adds	r1, r3, #4
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	9103      	str	r1, [sp, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	bfbb      	ittet	lt
 80080a6:	425b      	neglt	r3, r3
 80080a8:	f042 0202 	orrlt.w	r2, r2, #2
 80080ac:	9307      	strge	r3, [sp, #28]
 80080ae:	9307      	strlt	r3, [sp, #28]
 80080b0:	bfb8      	it	lt
 80080b2:	9204      	strlt	r2, [sp, #16]
 80080b4:	7823      	ldrb	r3, [r4, #0]
 80080b6:	2b2e      	cmp	r3, #46	; 0x2e
 80080b8:	d10c      	bne.n	80080d4 <_svfiprintf_r+0x130>
 80080ba:	7863      	ldrb	r3, [r4, #1]
 80080bc:	2b2a      	cmp	r3, #42	; 0x2a
 80080be:	d135      	bne.n	800812c <_svfiprintf_r+0x188>
 80080c0:	9b03      	ldr	r3, [sp, #12]
 80080c2:	1d1a      	adds	r2, r3, #4
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	9203      	str	r2, [sp, #12]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bfb8      	it	lt
 80080cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80080d0:	3402      	adds	r4, #2
 80080d2:	9305      	str	r3, [sp, #20]
 80080d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80081a0 <_svfiprintf_r+0x1fc>
 80080d8:	7821      	ldrb	r1, [r4, #0]
 80080da:	2203      	movs	r2, #3
 80080dc:	4650      	mov	r0, sl
 80080de:	f7f8 f89f 	bl	8000220 <memchr>
 80080e2:	b140      	cbz	r0, 80080f6 <_svfiprintf_r+0x152>
 80080e4:	2340      	movs	r3, #64	; 0x40
 80080e6:	eba0 000a 	sub.w	r0, r0, sl
 80080ea:	fa03 f000 	lsl.w	r0, r3, r0
 80080ee:	9b04      	ldr	r3, [sp, #16]
 80080f0:	4303      	orrs	r3, r0
 80080f2:	3401      	adds	r4, #1
 80080f4:	9304      	str	r3, [sp, #16]
 80080f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080fa:	4826      	ldr	r0, [pc, #152]	; (8008194 <_svfiprintf_r+0x1f0>)
 80080fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008100:	2206      	movs	r2, #6
 8008102:	f7f8 f88d 	bl	8000220 <memchr>
 8008106:	2800      	cmp	r0, #0
 8008108:	d038      	beq.n	800817c <_svfiprintf_r+0x1d8>
 800810a:	4b23      	ldr	r3, [pc, #140]	; (8008198 <_svfiprintf_r+0x1f4>)
 800810c:	bb1b      	cbnz	r3, 8008156 <_svfiprintf_r+0x1b2>
 800810e:	9b03      	ldr	r3, [sp, #12]
 8008110:	3307      	adds	r3, #7
 8008112:	f023 0307 	bic.w	r3, r3, #7
 8008116:	3308      	adds	r3, #8
 8008118:	9303      	str	r3, [sp, #12]
 800811a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800811c:	4433      	add	r3, r6
 800811e:	9309      	str	r3, [sp, #36]	; 0x24
 8008120:	e767      	b.n	8007ff2 <_svfiprintf_r+0x4e>
 8008122:	fb0c 3202 	mla	r2, ip, r2, r3
 8008126:	460c      	mov	r4, r1
 8008128:	2001      	movs	r0, #1
 800812a:	e7a5      	b.n	8008078 <_svfiprintf_r+0xd4>
 800812c:	2300      	movs	r3, #0
 800812e:	3401      	adds	r4, #1
 8008130:	9305      	str	r3, [sp, #20]
 8008132:	4619      	mov	r1, r3
 8008134:	f04f 0c0a 	mov.w	ip, #10
 8008138:	4620      	mov	r0, r4
 800813a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800813e:	3a30      	subs	r2, #48	; 0x30
 8008140:	2a09      	cmp	r2, #9
 8008142:	d903      	bls.n	800814c <_svfiprintf_r+0x1a8>
 8008144:	2b00      	cmp	r3, #0
 8008146:	d0c5      	beq.n	80080d4 <_svfiprintf_r+0x130>
 8008148:	9105      	str	r1, [sp, #20]
 800814a:	e7c3      	b.n	80080d4 <_svfiprintf_r+0x130>
 800814c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008150:	4604      	mov	r4, r0
 8008152:	2301      	movs	r3, #1
 8008154:	e7f0      	b.n	8008138 <_svfiprintf_r+0x194>
 8008156:	ab03      	add	r3, sp, #12
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	462a      	mov	r2, r5
 800815c:	4b0f      	ldr	r3, [pc, #60]	; (800819c <_svfiprintf_r+0x1f8>)
 800815e:	a904      	add	r1, sp, #16
 8008160:	4638      	mov	r0, r7
 8008162:	f7fd ffbb 	bl	80060dc <_printf_float>
 8008166:	1c42      	adds	r2, r0, #1
 8008168:	4606      	mov	r6, r0
 800816a:	d1d6      	bne.n	800811a <_svfiprintf_r+0x176>
 800816c:	89ab      	ldrh	r3, [r5, #12]
 800816e:	065b      	lsls	r3, r3, #25
 8008170:	f53f af2c 	bmi.w	8007fcc <_svfiprintf_r+0x28>
 8008174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008176:	b01d      	add	sp, #116	; 0x74
 8008178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800817c:	ab03      	add	r3, sp, #12
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	462a      	mov	r2, r5
 8008182:	4b06      	ldr	r3, [pc, #24]	; (800819c <_svfiprintf_r+0x1f8>)
 8008184:	a904      	add	r1, sp, #16
 8008186:	4638      	mov	r0, r7
 8008188:	f7fe fa4c 	bl	8006624 <_printf_i>
 800818c:	e7eb      	b.n	8008166 <_svfiprintf_r+0x1c2>
 800818e:	bf00      	nop
 8008190:	0800908c 	.word	0x0800908c
 8008194:	08009096 	.word	0x08009096
 8008198:	080060dd 	.word	0x080060dd
 800819c:	08007eed 	.word	0x08007eed
 80081a0:	08009092 	.word	0x08009092

080081a4 <_sbrk_r>:
 80081a4:	b538      	push	{r3, r4, r5, lr}
 80081a6:	4d06      	ldr	r5, [pc, #24]	; (80081c0 <_sbrk_r+0x1c>)
 80081a8:	2300      	movs	r3, #0
 80081aa:	4604      	mov	r4, r0
 80081ac:	4608      	mov	r0, r1
 80081ae:	602b      	str	r3, [r5, #0]
 80081b0:	f000 fe1e 	bl	8008df0 <_sbrk>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d102      	bne.n	80081be <_sbrk_r+0x1a>
 80081b8:	682b      	ldr	r3, [r5, #0]
 80081ba:	b103      	cbz	r3, 80081be <_sbrk_r+0x1a>
 80081bc:	6023      	str	r3, [r4, #0]
 80081be:	bd38      	pop	{r3, r4, r5, pc}
 80081c0:	20000644 	.word	0x20000644

080081c4 <__assert_func>:
 80081c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081c6:	4614      	mov	r4, r2
 80081c8:	461a      	mov	r2, r3
 80081ca:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <__assert_func+0x2c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4605      	mov	r5, r0
 80081d0:	68d8      	ldr	r0, [r3, #12]
 80081d2:	b14c      	cbz	r4, 80081e8 <__assert_func+0x24>
 80081d4:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <__assert_func+0x30>)
 80081d6:	9100      	str	r1, [sp, #0]
 80081d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081dc:	4906      	ldr	r1, [pc, #24]	; (80081f8 <__assert_func+0x34>)
 80081de:	462b      	mov	r3, r5
 80081e0:	f000 f80e 	bl	8008200 <fiprintf>
 80081e4:	f000 faac 	bl	8008740 <abort>
 80081e8:	4b04      	ldr	r3, [pc, #16]	; (80081fc <__assert_func+0x38>)
 80081ea:	461c      	mov	r4, r3
 80081ec:	e7f3      	b.n	80081d6 <__assert_func+0x12>
 80081ee:	bf00      	nop
 80081f0:	2000000c 	.word	0x2000000c
 80081f4:	0800909d 	.word	0x0800909d
 80081f8:	080090aa 	.word	0x080090aa
 80081fc:	080090d8 	.word	0x080090d8

08008200 <fiprintf>:
 8008200:	b40e      	push	{r1, r2, r3}
 8008202:	b503      	push	{r0, r1, lr}
 8008204:	4601      	mov	r1, r0
 8008206:	ab03      	add	r3, sp, #12
 8008208:	4805      	ldr	r0, [pc, #20]	; (8008220 <fiprintf+0x20>)
 800820a:	f853 2b04 	ldr.w	r2, [r3], #4
 800820e:	6800      	ldr	r0, [r0, #0]
 8008210:	9301      	str	r3, [sp, #4]
 8008212:	f000 f897 	bl	8008344 <_vfiprintf_r>
 8008216:	b002      	add	sp, #8
 8008218:	f85d eb04 	ldr.w	lr, [sp], #4
 800821c:	b003      	add	sp, #12
 800821e:	4770      	bx	lr
 8008220:	2000000c 	.word	0x2000000c

08008224 <__ascii_mbtowc>:
 8008224:	b082      	sub	sp, #8
 8008226:	b901      	cbnz	r1, 800822a <__ascii_mbtowc+0x6>
 8008228:	a901      	add	r1, sp, #4
 800822a:	b142      	cbz	r2, 800823e <__ascii_mbtowc+0x1a>
 800822c:	b14b      	cbz	r3, 8008242 <__ascii_mbtowc+0x1e>
 800822e:	7813      	ldrb	r3, [r2, #0]
 8008230:	600b      	str	r3, [r1, #0]
 8008232:	7812      	ldrb	r2, [r2, #0]
 8008234:	1e10      	subs	r0, r2, #0
 8008236:	bf18      	it	ne
 8008238:	2001      	movne	r0, #1
 800823a:	b002      	add	sp, #8
 800823c:	4770      	bx	lr
 800823e:	4610      	mov	r0, r2
 8008240:	e7fb      	b.n	800823a <__ascii_mbtowc+0x16>
 8008242:	f06f 0001 	mvn.w	r0, #1
 8008246:	e7f8      	b.n	800823a <__ascii_mbtowc+0x16>

08008248 <memmove>:
 8008248:	4288      	cmp	r0, r1
 800824a:	b510      	push	{r4, lr}
 800824c:	eb01 0402 	add.w	r4, r1, r2
 8008250:	d902      	bls.n	8008258 <memmove+0x10>
 8008252:	4284      	cmp	r4, r0
 8008254:	4623      	mov	r3, r4
 8008256:	d807      	bhi.n	8008268 <memmove+0x20>
 8008258:	1e43      	subs	r3, r0, #1
 800825a:	42a1      	cmp	r1, r4
 800825c:	d008      	beq.n	8008270 <memmove+0x28>
 800825e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008262:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008266:	e7f8      	b.n	800825a <memmove+0x12>
 8008268:	4402      	add	r2, r0
 800826a:	4601      	mov	r1, r0
 800826c:	428a      	cmp	r2, r1
 800826e:	d100      	bne.n	8008272 <memmove+0x2a>
 8008270:	bd10      	pop	{r4, pc}
 8008272:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008276:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800827a:	e7f7      	b.n	800826c <memmove+0x24>

0800827c <__malloc_lock>:
 800827c:	4801      	ldr	r0, [pc, #4]	; (8008284 <__malloc_lock+0x8>)
 800827e:	f000 bc1f 	b.w	8008ac0 <__retarget_lock_acquire_recursive>
 8008282:	bf00      	nop
 8008284:	20000648 	.word	0x20000648

08008288 <__malloc_unlock>:
 8008288:	4801      	ldr	r0, [pc, #4]	; (8008290 <__malloc_unlock+0x8>)
 800828a:	f000 bc1a 	b.w	8008ac2 <__retarget_lock_release_recursive>
 800828e:	bf00      	nop
 8008290:	20000648 	.word	0x20000648

08008294 <_realloc_r>:
 8008294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008298:	4680      	mov	r8, r0
 800829a:	4614      	mov	r4, r2
 800829c:	460e      	mov	r6, r1
 800829e:	b921      	cbnz	r1, 80082aa <_realloc_r+0x16>
 80082a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082a4:	4611      	mov	r1, r2
 80082a6:	f7ff bdad 	b.w	8007e04 <_malloc_r>
 80082aa:	b92a      	cbnz	r2, 80082b8 <_realloc_r+0x24>
 80082ac:	f7ff fd3e 	bl	8007d2c <_free_r>
 80082b0:	4625      	mov	r5, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b8:	f000 fc6a 	bl	8008b90 <_malloc_usable_size_r>
 80082bc:	4284      	cmp	r4, r0
 80082be:	4607      	mov	r7, r0
 80082c0:	d802      	bhi.n	80082c8 <_realloc_r+0x34>
 80082c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082c6:	d812      	bhi.n	80082ee <_realloc_r+0x5a>
 80082c8:	4621      	mov	r1, r4
 80082ca:	4640      	mov	r0, r8
 80082cc:	f7ff fd9a 	bl	8007e04 <_malloc_r>
 80082d0:	4605      	mov	r5, r0
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d0ed      	beq.n	80082b2 <_realloc_r+0x1e>
 80082d6:	42bc      	cmp	r4, r7
 80082d8:	4622      	mov	r2, r4
 80082da:	4631      	mov	r1, r6
 80082dc:	bf28      	it	cs
 80082de:	463a      	movcs	r2, r7
 80082e0:	f7ff f97c 	bl	80075dc <memcpy>
 80082e4:	4631      	mov	r1, r6
 80082e6:	4640      	mov	r0, r8
 80082e8:	f7ff fd20 	bl	8007d2c <_free_r>
 80082ec:	e7e1      	b.n	80082b2 <_realloc_r+0x1e>
 80082ee:	4635      	mov	r5, r6
 80082f0:	e7df      	b.n	80082b2 <_realloc_r+0x1e>

080082f2 <__sfputc_r>:
 80082f2:	6893      	ldr	r3, [r2, #8]
 80082f4:	3b01      	subs	r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	b410      	push	{r4}
 80082fa:	6093      	str	r3, [r2, #8]
 80082fc:	da08      	bge.n	8008310 <__sfputc_r+0x1e>
 80082fe:	6994      	ldr	r4, [r2, #24]
 8008300:	42a3      	cmp	r3, r4
 8008302:	db01      	blt.n	8008308 <__sfputc_r+0x16>
 8008304:	290a      	cmp	r1, #10
 8008306:	d103      	bne.n	8008310 <__sfputc_r+0x1e>
 8008308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800830c:	f000 b94a 	b.w	80085a4 <__swbuf_r>
 8008310:	6813      	ldr	r3, [r2, #0]
 8008312:	1c58      	adds	r0, r3, #1
 8008314:	6010      	str	r0, [r2, #0]
 8008316:	7019      	strb	r1, [r3, #0]
 8008318:	4608      	mov	r0, r1
 800831a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800831e:	4770      	bx	lr

08008320 <__sfputs_r>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	4606      	mov	r6, r0
 8008324:	460f      	mov	r7, r1
 8008326:	4614      	mov	r4, r2
 8008328:	18d5      	adds	r5, r2, r3
 800832a:	42ac      	cmp	r4, r5
 800832c:	d101      	bne.n	8008332 <__sfputs_r+0x12>
 800832e:	2000      	movs	r0, #0
 8008330:	e007      	b.n	8008342 <__sfputs_r+0x22>
 8008332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008336:	463a      	mov	r2, r7
 8008338:	4630      	mov	r0, r6
 800833a:	f7ff ffda 	bl	80082f2 <__sfputc_r>
 800833e:	1c43      	adds	r3, r0, #1
 8008340:	d1f3      	bne.n	800832a <__sfputs_r+0xa>
 8008342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008344 <_vfiprintf_r>:
 8008344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008348:	460d      	mov	r5, r1
 800834a:	b09d      	sub	sp, #116	; 0x74
 800834c:	4614      	mov	r4, r2
 800834e:	4698      	mov	r8, r3
 8008350:	4606      	mov	r6, r0
 8008352:	b118      	cbz	r0, 800835c <_vfiprintf_r+0x18>
 8008354:	6983      	ldr	r3, [r0, #24]
 8008356:	b90b      	cbnz	r3, 800835c <_vfiprintf_r+0x18>
 8008358:	f000 fb14 	bl	8008984 <__sinit>
 800835c:	4b89      	ldr	r3, [pc, #548]	; (8008584 <_vfiprintf_r+0x240>)
 800835e:	429d      	cmp	r5, r3
 8008360:	d11b      	bne.n	800839a <_vfiprintf_r+0x56>
 8008362:	6875      	ldr	r5, [r6, #4]
 8008364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008366:	07d9      	lsls	r1, r3, #31
 8008368:	d405      	bmi.n	8008376 <_vfiprintf_r+0x32>
 800836a:	89ab      	ldrh	r3, [r5, #12]
 800836c:	059a      	lsls	r2, r3, #22
 800836e:	d402      	bmi.n	8008376 <_vfiprintf_r+0x32>
 8008370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008372:	f000 fba5 	bl	8008ac0 <__retarget_lock_acquire_recursive>
 8008376:	89ab      	ldrh	r3, [r5, #12]
 8008378:	071b      	lsls	r3, r3, #28
 800837a:	d501      	bpl.n	8008380 <_vfiprintf_r+0x3c>
 800837c:	692b      	ldr	r3, [r5, #16]
 800837e:	b9eb      	cbnz	r3, 80083bc <_vfiprintf_r+0x78>
 8008380:	4629      	mov	r1, r5
 8008382:	4630      	mov	r0, r6
 8008384:	f000 f96e 	bl	8008664 <__swsetup_r>
 8008388:	b1c0      	cbz	r0, 80083bc <_vfiprintf_r+0x78>
 800838a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800838c:	07dc      	lsls	r4, r3, #31
 800838e:	d50e      	bpl.n	80083ae <_vfiprintf_r+0x6a>
 8008390:	f04f 30ff 	mov.w	r0, #4294967295
 8008394:	b01d      	add	sp, #116	; 0x74
 8008396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800839a:	4b7b      	ldr	r3, [pc, #492]	; (8008588 <_vfiprintf_r+0x244>)
 800839c:	429d      	cmp	r5, r3
 800839e:	d101      	bne.n	80083a4 <_vfiprintf_r+0x60>
 80083a0:	68b5      	ldr	r5, [r6, #8]
 80083a2:	e7df      	b.n	8008364 <_vfiprintf_r+0x20>
 80083a4:	4b79      	ldr	r3, [pc, #484]	; (800858c <_vfiprintf_r+0x248>)
 80083a6:	429d      	cmp	r5, r3
 80083a8:	bf08      	it	eq
 80083aa:	68f5      	ldreq	r5, [r6, #12]
 80083ac:	e7da      	b.n	8008364 <_vfiprintf_r+0x20>
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	0598      	lsls	r0, r3, #22
 80083b2:	d4ed      	bmi.n	8008390 <_vfiprintf_r+0x4c>
 80083b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083b6:	f000 fb84 	bl	8008ac2 <__retarget_lock_release_recursive>
 80083ba:	e7e9      	b.n	8008390 <_vfiprintf_r+0x4c>
 80083bc:	2300      	movs	r3, #0
 80083be:	9309      	str	r3, [sp, #36]	; 0x24
 80083c0:	2320      	movs	r3, #32
 80083c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80083ca:	2330      	movs	r3, #48	; 0x30
 80083cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008590 <_vfiprintf_r+0x24c>
 80083d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80083d4:	f04f 0901 	mov.w	r9, #1
 80083d8:	4623      	mov	r3, r4
 80083da:	469a      	mov	sl, r3
 80083dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083e0:	b10a      	cbz	r2, 80083e6 <_vfiprintf_r+0xa2>
 80083e2:	2a25      	cmp	r2, #37	; 0x25
 80083e4:	d1f9      	bne.n	80083da <_vfiprintf_r+0x96>
 80083e6:	ebba 0b04 	subs.w	fp, sl, r4
 80083ea:	d00b      	beq.n	8008404 <_vfiprintf_r+0xc0>
 80083ec:	465b      	mov	r3, fp
 80083ee:	4622      	mov	r2, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	4630      	mov	r0, r6
 80083f4:	f7ff ff94 	bl	8008320 <__sfputs_r>
 80083f8:	3001      	adds	r0, #1
 80083fa:	f000 80aa 	beq.w	8008552 <_vfiprintf_r+0x20e>
 80083fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008400:	445a      	add	r2, fp
 8008402:	9209      	str	r2, [sp, #36]	; 0x24
 8008404:	f89a 3000 	ldrb.w	r3, [sl]
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 80a2 	beq.w	8008552 <_vfiprintf_r+0x20e>
 800840e:	2300      	movs	r3, #0
 8008410:	f04f 32ff 	mov.w	r2, #4294967295
 8008414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008418:	f10a 0a01 	add.w	sl, sl, #1
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	9307      	str	r3, [sp, #28]
 8008420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008424:	931a      	str	r3, [sp, #104]	; 0x68
 8008426:	4654      	mov	r4, sl
 8008428:	2205      	movs	r2, #5
 800842a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800842e:	4858      	ldr	r0, [pc, #352]	; (8008590 <_vfiprintf_r+0x24c>)
 8008430:	f7f7 fef6 	bl	8000220 <memchr>
 8008434:	9a04      	ldr	r2, [sp, #16]
 8008436:	b9d8      	cbnz	r0, 8008470 <_vfiprintf_r+0x12c>
 8008438:	06d1      	lsls	r1, r2, #27
 800843a:	bf44      	itt	mi
 800843c:	2320      	movmi	r3, #32
 800843e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008442:	0713      	lsls	r3, r2, #28
 8008444:	bf44      	itt	mi
 8008446:	232b      	movmi	r3, #43	; 0x2b
 8008448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800844c:	f89a 3000 	ldrb.w	r3, [sl]
 8008450:	2b2a      	cmp	r3, #42	; 0x2a
 8008452:	d015      	beq.n	8008480 <_vfiprintf_r+0x13c>
 8008454:	9a07      	ldr	r2, [sp, #28]
 8008456:	4654      	mov	r4, sl
 8008458:	2000      	movs	r0, #0
 800845a:	f04f 0c0a 	mov.w	ip, #10
 800845e:	4621      	mov	r1, r4
 8008460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008464:	3b30      	subs	r3, #48	; 0x30
 8008466:	2b09      	cmp	r3, #9
 8008468:	d94e      	bls.n	8008508 <_vfiprintf_r+0x1c4>
 800846a:	b1b0      	cbz	r0, 800849a <_vfiprintf_r+0x156>
 800846c:	9207      	str	r2, [sp, #28]
 800846e:	e014      	b.n	800849a <_vfiprintf_r+0x156>
 8008470:	eba0 0308 	sub.w	r3, r0, r8
 8008474:	fa09 f303 	lsl.w	r3, r9, r3
 8008478:	4313      	orrs	r3, r2
 800847a:	9304      	str	r3, [sp, #16]
 800847c:	46a2      	mov	sl, r4
 800847e:	e7d2      	b.n	8008426 <_vfiprintf_r+0xe2>
 8008480:	9b03      	ldr	r3, [sp, #12]
 8008482:	1d19      	adds	r1, r3, #4
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	9103      	str	r1, [sp, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	bfbb      	ittet	lt
 800848c:	425b      	neglt	r3, r3
 800848e:	f042 0202 	orrlt.w	r2, r2, #2
 8008492:	9307      	strge	r3, [sp, #28]
 8008494:	9307      	strlt	r3, [sp, #28]
 8008496:	bfb8      	it	lt
 8008498:	9204      	strlt	r2, [sp, #16]
 800849a:	7823      	ldrb	r3, [r4, #0]
 800849c:	2b2e      	cmp	r3, #46	; 0x2e
 800849e:	d10c      	bne.n	80084ba <_vfiprintf_r+0x176>
 80084a0:	7863      	ldrb	r3, [r4, #1]
 80084a2:	2b2a      	cmp	r3, #42	; 0x2a
 80084a4:	d135      	bne.n	8008512 <_vfiprintf_r+0x1ce>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	1d1a      	adds	r2, r3, #4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	9203      	str	r2, [sp, #12]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bfb8      	it	lt
 80084b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80084b6:	3402      	adds	r4, #2
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80085a0 <_vfiprintf_r+0x25c>
 80084be:	7821      	ldrb	r1, [r4, #0]
 80084c0:	2203      	movs	r2, #3
 80084c2:	4650      	mov	r0, sl
 80084c4:	f7f7 feac 	bl	8000220 <memchr>
 80084c8:	b140      	cbz	r0, 80084dc <_vfiprintf_r+0x198>
 80084ca:	2340      	movs	r3, #64	; 0x40
 80084cc:	eba0 000a 	sub.w	r0, r0, sl
 80084d0:	fa03 f000 	lsl.w	r0, r3, r0
 80084d4:	9b04      	ldr	r3, [sp, #16]
 80084d6:	4303      	orrs	r3, r0
 80084d8:	3401      	adds	r4, #1
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e0:	482c      	ldr	r0, [pc, #176]	; (8008594 <_vfiprintf_r+0x250>)
 80084e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084e6:	2206      	movs	r2, #6
 80084e8:	f7f7 fe9a 	bl	8000220 <memchr>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d03f      	beq.n	8008570 <_vfiprintf_r+0x22c>
 80084f0:	4b29      	ldr	r3, [pc, #164]	; (8008598 <_vfiprintf_r+0x254>)
 80084f2:	bb1b      	cbnz	r3, 800853c <_vfiprintf_r+0x1f8>
 80084f4:	9b03      	ldr	r3, [sp, #12]
 80084f6:	3307      	adds	r3, #7
 80084f8:	f023 0307 	bic.w	r3, r3, #7
 80084fc:	3308      	adds	r3, #8
 80084fe:	9303      	str	r3, [sp, #12]
 8008500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008502:	443b      	add	r3, r7
 8008504:	9309      	str	r3, [sp, #36]	; 0x24
 8008506:	e767      	b.n	80083d8 <_vfiprintf_r+0x94>
 8008508:	fb0c 3202 	mla	r2, ip, r2, r3
 800850c:	460c      	mov	r4, r1
 800850e:	2001      	movs	r0, #1
 8008510:	e7a5      	b.n	800845e <_vfiprintf_r+0x11a>
 8008512:	2300      	movs	r3, #0
 8008514:	3401      	adds	r4, #1
 8008516:	9305      	str	r3, [sp, #20]
 8008518:	4619      	mov	r1, r3
 800851a:	f04f 0c0a 	mov.w	ip, #10
 800851e:	4620      	mov	r0, r4
 8008520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008524:	3a30      	subs	r2, #48	; 0x30
 8008526:	2a09      	cmp	r2, #9
 8008528:	d903      	bls.n	8008532 <_vfiprintf_r+0x1ee>
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0c5      	beq.n	80084ba <_vfiprintf_r+0x176>
 800852e:	9105      	str	r1, [sp, #20]
 8008530:	e7c3      	b.n	80084ba <_vfiprintf_r+0x176>
 8008532:	fb0c 2101 	mla	r1, ip, r1, r2
 8008536:	4604      	mov	r4, r0
 8008538:	2301      	movs	r3, #1
 800853a:	e7f0      	b.n	800851e <_vfiprintf_r+0x1da>
 800853c:	ab03      	add	r3, sp, #12
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	462a      	mov	r2, r5
 8008542:	4b16      	ldr	r3, [pc, #88]	; (800859c <_vfiprintf_r+0x258>)
 8008544:	a904      	add	r1, sp, #16
 8008546:	4630      	mov	r0, r6
 8008548:	f7fd fdc8 	bl	80060dc <_printf_float>
 800854c:	4607      	mov	r7, r0
 800854e:	1c78      	adds	r0, r7, #1
 8008550:	d1d6      	bne.n	8008500 <_vfiprintf_r+0x1bc>
 8008552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008554:	07d9      	lsls	r1, r3, #31
 8008556:	d405      	bmi.n	8008564 <_vfiprintf_r+0x220>
 8008558:	89ab      	ldrh	r3, [r5, #12]
 800855a:	059a      	lsls	r2, r3, #22
 800855c:	d402      	bmi.n	8008564 <_vfiprintf_r+0x220>
 800855e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008560:	f000 faaf 	bl	8008ac2 <__retarget_lock_release_recursive>
 8008564:	89ab      	ldrh	r3, [r5, #12]
 8008566:	065b      	lsls	r3, r3, #25
 8008568:	f53f af12 	bmi.w	8008390 <_vfiprintf_r+0x4c>
 800856c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800856e:	e711      	b.n	8008394 <_vfiprintf_r+0x50>
 8008570:	ab03      	add	r3, sp, #12
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	462a      	mov	r2, r5
 8008576:	4b09      	ldr	r3, [pc, #36]	; (800859c <_vfiprintf_r+0x258>)
 8008578:	a904      	add	r1, sp, #16
 800857a:	4630      	mov	r0, r6
 800857c:	f7fe f852 	bl	8006624 <_printf_i>
 8008580:	e7e4      	b.n	800854c <_vfiprintf_r+0x208>
 8008582:	bf00      	nop
 8008584:	08009204 	.word	0x08009204
 8008588:	08009224 	.word	0x08009224
 800858c:	080091e4 	.word	0x080091e4
 8008590:	0800908c 	.word	0x0800908c
 8008594:	08009096 	.word	0x08009096
 8008598:	080060dd 	.word	0x080060dd
 800859c:	08008321 	.word	0x08008321
 80085a0:	08009092 	.word	0x08009092

080085a4 <__swbuf_r>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	460e      	mov	r6, r1
 80085a8:	4614      	mov	r4, r2
 80085aa:	4605      	mov	r5, r0
 80085ac:	b118      	cbz	r0, 80085b6 <__swbuf_r+0x12>
 80085ae:	6983      	ldr	r3, [r0, #24]
 80085b0:	b90b      	cbnz	r3, 80085b6 <__swbuf_r+0x12>
 80085b2:	f000 f9e7 	bl	8008984 <__sinit>
 80085b6:	4b21      	ldr	r3, [pc, #132]	; (800863c <__swbuf_r+0x98>)
 80085b8:	429c      	cmp	r4, r3
 80085ba:	d12b      	bne.n	8008614 <__swbuf_r+0x70>
 80085bc:	686c      	ldr	r4, [r5, #4]
 80085be:	69a3      	ldr	r3, [r4, #24]
 80085c0:	60a3      	str	r3, [r4, #8]
 80085c2:	89a3      	ldrh	r3, [r4, #12]
 80085c4:	071a      	lsls	r2, r3, #28
 80085c6:	d52f      	bpl.n	8008628 <__swbuf_r+0x84>
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	b36b      	cbz	r3, 8008628 <__swbuf_r+0x84>
 80085cc:	6923      	ldr	r3, [r4, #16]
 80085ce:	6820      	ldr	r0, [r4, #0]
 80085d0:	1ac0      	subs	r0, r0, r3
 80085d2:	6963      	ldr	r3, [r4, #20]
 80085d4:	b2f6      	uxtb	r6, r6
 80085d6:	4283      	cmp	r3, r0
 80085d8:	4637      	mov	r7, r6
 80085da:	dc04      	bgt.n	80085e6 <__swbuf_r+0x42>
 80085dc:	4621      	mov	r1, r4
 80085de:	4628      	mov	r0, r5
 80085e0:	f000 f93c 	bl	800885c <_fflush_r>
 80085e4:	bb30      	cbnz	r0, 8008634 <__swbuf_r+0x90>
 80085e6:	68a3      	ldr	r3, [r4, #8]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	60a3      	str	r3, [r4, #8]
 80085ec:	6823      	ldr	r3, [r4, #0]
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	6022      	str	r2, [r4, #0]
 80085f2:	701e      	strb	r6, [r3, #0]
 80085f4:	6963      	ldr	r3, [r4, #20]
 80085f6:	3001      	adds	r0, #1
 80085f8:	4283      	cmp	r3, r0
 80085fa:	d004      	beq.n	8008606 <__swbuf_r+0x62>
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	07db      	lsls	r3, r3, #31
 8008600:	d506      	bpl.n	8008610 <__swbuf_r+0x6c>
 8008602:	2e0a      	cmp	r6, #10
 8008604:	d104      	bne.n	8008610 <__swbuf_r+0x6c>
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	f000 f927 	bl	800885c <_fflush_r>
 800860e:	b988      	cbnz	r0, 8008634 <__swbuf_r+0x90>
 8008610:	4638      	mov	r0, r7
 8008612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008614:	4b0a      	ldr	r3, [pc, #40]	; (8008640 <__swbuf_r+0x9c>)
 8008616:	429c      	cmp	r4, r3
 8008618:	d101      	bne.n	800861e <__swbuf_r+0x7a>
 800861a:	68ac      	ldr	r4, [r5, #8]
 800861c:	e7cf      	b.n	80085be <__swbuf_r+0x1a>
 800861e:	4b09      	ldr	r3, [pc, #36]	; (8008644 <__swbuf_r+0xa0>)
 8008620:	429c      	cmp	r4, r3
 8008622:	bf08      	it	eq
 8008624:	68ec      	ldreq	r4, [r5, #12]
 8008626:	e7ca      	b.n	80085be <__swbuf_r+0x1a>
 8008628:	4621      	mov	r1, r4
 800862a:	4628      	mov	r0, r5
 800862c:	f000 f81a 	bl	8008664 <__swsetup_r>
 8008630:	2800      	cmp	r0, #0
 8008632:	d0cb      	beq.n	80085cc <__swbuf_r+0x28>
 8008634:	f04f 37ff 	mov.w	r7, #4294967295
 8008638:	e7ea      	b.n	8008610 <__swbuf_r+0x6c>
 800863a:	bf00      	nop
 800863c:	08009204 	.word	0x08009204
 8008640:	08009224 	.word	0x08009224
 8008644:	080091e4 	.word	0x080091e4

08008648 <__ascii_wctomb>:
 8008648:	b149      	cbz	r1, 800865e <__ascii_wctomb+0x16>
 800864a:	2aff      	cmp	r2, #255	; 0xff
 800864c:	bf85      	ittet	hi
 800864e:	238a      	movhi	r3, #138	; 0x8a
 8008650:	6003      	strhi	r3, [r0, #0]
 8008652:	700a      	strbls	r2, [r1, #0]
 8008654:	f04f 30ff 	movhi.w	r0, #4294967295
 8008658:	bf98      	it	ls
 800865a:	2001      	movls	r0, #1
 800865c:	4770      	bx	lr
 800865e:	4608      	mov	r0, r1
 8008660:	4770      	bx	lr
	...

08008664 <__swsetup_r>:
 8008664:	4b32      	ldr	r3, [pc, #200]	; (8008730 <__swsetup_r+0xcc>)
 8008666:	b570      	push	{r4, r5, r6, lr}
 8008668:	681d      	ldr	r5, [r3, #0]
 800866a:	4606      	mov	r6, r0
 800866c:	460c      	mov	r4, r1
 800866e:	b125      	cbz	r5, 800867a <__swsetup_r+0x16>
 8008670:	69ab      	ldr	r3, [r5, #24]
 8008672:	b913      	cbnz	r3, 800867a <__swsetup_r+0x16>
 8008674:	4628      	mov	r0, r5
 8008676:	f000 f985 	bl	8008984 <__sinit>
 800867a:	4b2e      	ldr	r3, [pc, #184]	; (8008734 <__swsetup_r+0xd0>)
 800867c:	429c      	cmp	r4, r3
 800867e:	d10f      	bne.n	80086a0 <__swsetup_r+0x3c>
 8008680:	686c      	ldr	r4, [r5, #4]
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008688:	0719      	lsls	r1, r3, #28
 800868a:	d42c      	bmi.n	80086e6 <__swsetup_r+0x82>
 800868c:	06dd      	lsls	r5, r3, #27
 800868e:	d411      	bmi.n	80086b4 <__swsetup_r+0x50>
 8008690:	2309      	movs	r3, #9
 8008692:	6033      	str	r3, [r6, #0]
 8008694:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008698:	81a3      	strh	r3, [r4, #12]
 800869a:	f04f 30ff 	mov.w	r0, #4294967295
 800869e:	e03e      	b.n	800871e <__swsetup_r+0xba>
 80086a0:	4b25      	ldr	r3, [pc, #148]	; (8008738 <__swsetup_r+0xd4>)
 80086a2:	429c      	cmp	r4, r3
 80086a4:	d101      	bne.n	80086aa <__swsetup_r+0x46>
 80086a6:	68ac      	ldr	r4, [r5, #8]
 80086a8:	e7eb      	b.n	8008682 <__swsetup_r+0x1e>
 80086aa:	4b24      	ldr	r3, [pc, #144]	; (800873c <__swsetup_r+0xd8>)
 80086ac:	429c      	cmp	r4, r3
 80086ae:	bf08      	it	eq
 80086b0:	68ec      	ldreq	r4, [r5, #12]
 80086b2:	e7e6      	b.n	8008682 <__swsetup_r+0x1e>
 80086b4:	0758      	lsls	r0, r3, #29
 80086b6:	d512      	bpl.n	80086de <__swsetup_r+0x7a>
 80086b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086ba:	b141      	cbz	r1, 80086ce <__swsetup_r+0x6a>
 80086bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086c0:	4299      	cmp	r1, r3
 80086c2:	d002      	beq.n	80086ca <__swsetup_r+0x66>
 80086c4:	4630      	mov	r0, r6
 80086c6:	f7ff fb31 	bl	8007d2c <_free_r>
 80086ca:	2300      	movs	r3, #0
 80086cc:	6363      	str	r3, [r4, #52]	; 0x34
 80086ce:	89a3      	ldrh	r3, [r4, #12]
 80086d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80086d4:	81a3      	strh	r3, [r4, #12]
 80086d6:	2300      	movs	r3, #0
 80086d8:	6063      	str	r3, [r4, #4]
 80086da:	6923      	ldr	r3, [r4, #16]
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	f043 0308 	orr.w	r3, r3, #8
 80086e4:	81a3      	strh	r3, [r4, #12]
 80086e6:	6923      	ldr	r3, [r4, #16]
 80086e8:	b94b      	cbnz	r3, 80086fe <__swsetup_r+0x9a>
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80086f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086f4:	d003      	beq.n	80086fe <__swsetup_r+0x9a>
 80086f6:	4621      	mov	r1, r4
 80086f8:	4630      	mov	r0, r6
 80086fa:	f000 fa09 	bl	8008b10 <__smakebuf_r>
 80086fe:	89a0      	ldrh	r0, [r4, #12]
 8008700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008704:	f010 0301 	ands.w	r3, r0, #1
 8008708:	d00a      	beq.n	8008720 <__swsetup_r+0xbc>
 800870a:	2300      	movs	r3, #0
 800870c:	60a3      	str	r3, [r4, #8]
 800870e:	6963      	ldr	r3, [r4, #20]
 8008710:	425b      	negs	r3, r3
 8008712:	61a3      	str	r3, [r4, #24]
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	b943      	cbnz	r3, 800872a <__swsetup_r+0xc6>
 8008718:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800871c:	d1ba      	bne.n	8008694 <__swsetup_r+0x30>
 800871e:	bd70      	pop	{r4, r5, r6, pc}
 8008720:	0781      	lsls	r1, r0, #30
 8008722:	bf58      	it	pl
 8008724:	6963      	ldrpl	r3, [r4, #20]
 8008726:	60a3      	str	r3, [r4, #8]
 8008728:	e7f4      	b.n	8008714 <__swsetup_r+0xb0>
 800872a:	2000      	movs	r0, #0
 800872c:	e7f7      	b.n	800871e <__swsetup_r+0xba>
 800872e:	bf00      	nop
 8008730:	2000000c 	.word	0x2000000c
 8008734:	08009204 	.word	0x08009204
 8008738:	08009224 	.word	0x08009224
 800873c:	080091e4 	.word	0x080091e4

08008740 <abort>:
 8008740:	b508      	push	{r3, lr}
 8008742:	2006      	movs	r0, #6
 8008744:	f000 fa54 	bl	8008bf0 <raise>
 8008748:	2001      	movs	r0, #1
 800874a:	f000 fb67 	bl	8008e1c <_exit>
	...

08008750 <__sflush_r>:
 8008750:	898a      	ldrh	r2, [r1, #12]
 8008752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008756:	4605      	mov	r5, r0
 8008758:	0710      	lsls	r0, r2, #28
 800875a:	460c      	mov	r4, r1
 800875c:	d458      	bmi.n	8008810 <__sflush_r+0xc0>
 800875e:	684b      	ldr	r3, [r1, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	dc05      	bgt.n	8008770 <__sflush_r+0x20>
 8008764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008766:	2b00      	cmp	r3, #0
 8008768:	dc02      	bgt.n	8008770 <__sflush_r+0x20>
 800876a:	2000      	movs	r0, #0
 800876c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008772:	2e00      	cmp	r6, #0
 8008774:	d0f9      	beq.n	800876a <__sflush_r+0x1a>
 8008776:	2300      	movs	r3, #0
 8008778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800877c:	682f      	ldr	r7, [r5, #0]
 800877e:	602b      	str	r3, [r5, #0]
 8008780:	d032      	beq.n	80087e8 <__sflush_r+0x98>
 8008782:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008784:	89a3      	ldrh	r3, [r4, #12]
 8008786:	075a      	lsls	r2, r3, #29
 8008788:	d505      	bpl.n	8008796 <__sflush_r+0x46>
 800878a:	6863      	ldr	r3, [r4, #4]
 800878c:	1ac0      	subs	r0, r0, r3
 800878e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008790:	b10b      	cbz	r3, 8008796 <__sflush_r+0x46>
 8008792:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008794:	1ac0      	subs	r0, r0, r3
 8008796:	2300      	movs	r3, #0
 8008798:	4602      	mov	r2, r0
 800879a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800879c:	6a21      	ldr	r1, [r4, #32]
 800879e:	4628      	mov	r0, r5
 80087a0:	47b0      	blx	r6
 80087a2:	1c43      	adds	r3, r0, #1
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	d106      	bne.n	80087b6 <__sflush_r+0x66>
 80087a8:	6829      	ldr	r1, [r5, #0]
 80087aa:	291d      	cmp	r1, #29
 80087ac:	d82c      	bhi.n	8008808 <__sflush_r+0xb8>
 80087ae:	4a2a      	ldr	r2, [pc, #168]	; (8008858 <__sflush_r+0x108>)
 80087b0:	40ca      	lsrs	r2, r1
 80087b2:	07d6      	lsls	r6, r2, #31
 80087b4:	d528      	bpl.n	8008808 <__sflush_r+0xb8>
 80087b6:	2200      	movs	r2, #0
 80087b8:	6062      	str	r2, [r4, #4]
 80087ba:	04d9      	lsls	r1, r3, #19
 80087bc:	6922      	ldr	r2, [r4, #16]
 80087be:	6022      	str	r2, [r4, #0]
 80087c0:	d504      	bpl.n	80087cc <__sflush_r+0x7c>
 80087c2:	1c42      	adds	r2, r0, #1
 80087c4:	d101      	bne.n	80087ca <__sflush_r+0x7a>
 80087c6:	682b      	ldr	r3, [r5, #0]
 80087c8:	b903      	cbnz	r3, 80087cc <__sflush_r+0x7c>
 80087ca:	6560      	str	r0, [r4, #84]	; 0x54
 80087cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087ce:	602f      	str	r7, [r5, #0]
 80087d0:	2900      	cmp	r1, #0
 80087d2:	d0ca      	beq.n	800876a <__sflush_r+0x1a>
 80087d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087d8:	4299      	cmp	r1, r3
 80087da:	d002      	beq.n	80087e2 <__sflush_r+0x92>
 80087dc:	4628      	mov	r0, r5
 80087de:	f7ff faa5 	bl	8007d2c <_free_r>
 80087e2:	2000      	movs	r0, #0
 80087e4:	6360      	str	r0, [r4, #52]	; 0x34
 80087e6:	e7c1      	b.n	800876c <__sflush_r+0x1c>
 80087e8:	6a21      	ldr	r1, [r4, #32]
 80087ea:	2301      	movs	r3, #1
 80087ec:	4628      	mov	r0, r5
 80087ee:	47b0      	blx	r6
 80087f0:	1c41      	adds	r1, r0, #1
 80087f2:	d1c7      	bne.n	8008784 <__sflush_r+0x34>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d0c4      	beq.n	8008784 <__sflush_r+0x34>
 80087fa:	2b1d      	cmp	r3, #29
 80087fc:	d001      	beq.n	8008802 <__sflush_r+0xb2>
 80087fe:	2b16      	cmp	r3, #22
 8008800:	d101      	bne.n	8008806 <__sflush_r+0xb6>
 8008802:	602f      	str	r7, [r5, #0]
 8008804:	e7b1      	b.n	800876a <__sflush_r+0x1a>
 8008806:	89a3      	ldrh	r3, [r4, #12]
 8008808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800880c:	81a3      	strh	r3, [r4, #12]
 800880e:	e7ad      	b.n	800876c <__sflush_r+0x1c>
 8008810:	690f      	ldr	r7, [r1, #16]
 8008812:	2f00      	cmp	r7, #0
 8008814:	d0a9      	beq.n	800876a <__sflush_r+0x1a>
 8008816:	0793      	lsls	r3, r2, #30
 8008818:	680e      	ldr	r6, [r1, #0]
 800881a:	bf08      	it	eq
 800881c:	694b      	ldreq	r3, [r1, #20]
 800881e:	600f      	str	r7, [r1, #0]
 8008820:	bf18      	it	ne
 8008822:	2300      	movne	r3, #0
 8008824:	eba6 0807 	sub.w	r8, r6, r7
 8008828:	608b      	str	r3, [r1, #8]
 800882a:	f1b8 0f00 	cmp.w	r8, #0
 800882e:	dd9c      	ble.n	800876a <__sflush_r+0x1a>
 8008830:	6a21      	ldr	r1, [r4, #32]
 8008832:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008834:	4643      	mov	r3, r8
 8008836:	463a      	mov	r2, r7
 8008838:	4628      	mov	r0, r5
 800883a:	47b0      	blx	r6
 800883c:	2800      	cmp	r0, #0
 800883e:	dc06      	bgt.n	800884e <__sflush_r+0xfe>
 8008840:	89a3      	ldrh	r3, [r4, #12]
 8008842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	f04f 30ff 	mov.w	r0, #4294967295
 800884c:	e78e      	b.n	800876c <__sflush_r+0x1c>
 800884e:	4407      	add	r7, r0
 8008850:	eba8 0800 	sub.w	r8, r8, r0
 8008854:	e7e9      	b.n	800882a <__sflush_r+0xda>
 8008856:	bf00      	nop
 8008858:	20400001 	.word	0x20400001

0800885c <_fflush_r>:
 800885c:	b538      	push	{r3, r4, r5, lr}
 800885e:	690b      	ldr	r3, [r1, #16]
 8008860:	4605      	mov	r5, r0
 8008862:	460c      	mov	r4, r1
 8008864:	b913      	cbnz	r3, 800886c <_fflush_r+0x10>
 8008866:	2500      	movs	r5, #0
 8008868:	4628      	mov	r0, r5
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	b118      	cbz	r0, 8008876 <_fflush_r+0x1a>
 800886e:	6983      	ldr	r3, [r0, #24]
 8008870:	b90b      	cbnz	r3, 8008876 <_fflush_r+0x1a>
 8008872:	f000 f887 	bl	8008984 <__sinit>
 8008876:	4b14      	ldr	r3, [pc, #80]	; (80088c8 <_fflush_r+0x6c>)
 8008878:	429c      	cmp	r4, r3
 800887a:	d11b      	bne.n	80088b4 <_fflush_r+0x58>
 800887c:	686c      	ldr	r4, [r5, #4]
 800887e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0ef      	beq.n	8008866 <_fflush_r+0xa>
 8008886:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008888:	07d0      	lsls	r0, r2, #31
 800888a:	d404      	bmi.n	8008896 <_fflush_r+0x3a>
 800888c:	0599      	lsls	r1, r3, #22
 800888e:	d402      	bmi.n	8008896 <_fflush_r+0x3a>
 8008890:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008892:	f000 f915 	bl	8008ac0 <__retarget_lock_acquire_recursive>
 8008896:	4628      	mov	r0, r5
 8008898:	4621      	mov	r1, r4
 800889a:	f7ff ff59 	bl	8008750 <__sflush_r>
 800889e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088a0:	07da      	lsls	r2, r3, #31
 80088a2:	4605      	mov	r5, r0
 80088a4:	d4e0      	bmi.n	8008868 <_fflush_r+0xc>
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	059b      	lsls	r3, r3, #22
 80088aa:	d4dd      	bmi.n	8008868 <_fflush_r+0xc>
 80088ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ae:	f000 f908 	bl	8008ac2 <__retarget_lock_release_recursive>
 80088b2:	e7d9      	b.n	8008868 <_fflush_r+0xc>
 80088b4:	4b05      	ldr	r3, [pc, #20]	; (80088cc <_fflush_r+0x70>)
 80088b6:	429c      	cmp	r4, r3
 80088b8:	d101      	bne.n	80088be <_fflush_r+0x62>
 80088ba:	68ac      	ldr	r4, [r5, #8]
 80088bc:	e7df      	b.n	800887e <_fflush_r+0x22>
 80088be:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <_fflush_r+0x74>)
 80088c0:	429c      	cmp	r4, r3
 80088c2:	bf08      	it	eq
 80088c4:	68ec      	ldreq	r4, [r5, #12]
 80088c6:	e7da      	b.n	800887e <_fflush_r+0x22>
 80088c8:	08009204 	.word	0x08009204
 80088cc:	08009224 	.word	0x08009224
 80088d0:	080091e4 	.word	0x080091e4

080088d4 <std>:
 80088d4:	2300      	movs	r3, #0
 80088d6:	b510      	push	{r4, lr}
 80088d8:	4604      	mov	r4, r0
 80088da:	e9c0 3300 	strd	r3, r3, [r0]
 80088de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088e2:	6083      	str	r3, [r0, #8]
 80088e4:	8181      	strh	r1, [r0, #12]
 80088e6:	6643      	str	r3, [r0, #100]	; 0x64
 80088e8:	81c2      	strh	r2, [r0, #14]
 80088ea:	6183      	str	r3, [r0, #24]
 80088ec:	4619      	mov	r1, r3
 80088ee:	2208      	movs	r2, #8
 80088f0:	305c      	adds	r0, #92	; 0x5c
 80088f2:	f7fd fb4b 	bl	8005f8c <memset>
 80088f6:	4b05      	ldr	r3, [pc, #20]	; (800890c <std+0x38>)
 80088f8:	6263      	str	r3, [r4, #36]	; 0x24
 80088fa:	4b05      	ldr	r3, [pc, #20]	; (8008910 <std+0x3c>)
 80088fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80088fe:	4b05      	ldr	r3, [pc, #20]	; (8008914 <std+0x40>)
 8008900:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008902:	4b05      	ldr	r3, [pc, #20]	; (8008918 <std+0x44>)
 8008904:	6224      	str	r4, [r4, #32]
 8008906:	6323      	str	r3, [r4, #48]	; 0x30
 8008908:	bd10      	pop	{r4, pc}
 800890a:	bf00      	nop
 800890c:	08008c29 	.word	0x08008c29
 8008910:	08008c4b 	.word	0x08008c4b
 8008914:	08008c83 	.word	0x08008c83
 8008918:	08008ca7 	.word	0x08008ca7

0800891c <_cleanup_r>:
 800891c:	4901      	ldr	r1, [pc, #4]	; (8008924 <_cleanup_r+0x8>)
 800891e:	f000 b8af 	b.w	8008a80 <_fwalk_reent>
 8008922:	bf00      	nop
 8008924:	0800885d 	.word	0x0800885d

08008928 <__sfmoreglue>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	2268      	movs	r2, #104	; 0x68
 800892c:	1e4d      	subs	r5, r1, #1
 800892e:	4355      	muls	r5, r2
 8008930:	460e      	mov	r6, r1
 8008932:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008936:	f7ff fa65 	bl	8007e04 <_malloc_r>
 800893a:	4604      	mov	r4, r0
 800893c:	b140      	cbz	r0, 8008950 <__sfmoreglue+0x28>
 800893e:	2100      	movs	r1, #0
 8008940:	e9c0 1600 	strd	r1, r6, [r0]
 8008944:	300c      	adds	r0, #12
 8008946:	60a0      	str	r0, [r4, #8]
 8008948:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800894c:	f7fd fb1e 	bl	8005f8c <memset>
 8008950:	4620      	mov	r0, r4
 8008952:	bd70      	pop	{r4, r5, r6, pc}

08008954 <__sfp_lock_acquire>:
 8008954:	4801      	ldr	r0, [pc, #4]	; (800895c <__sfp_lock_acquire+0x8>)
 8008956:	f000 b8b3 	b.w	8008ac0 <__retarget_lock_acquire_recursive>
 800895a:	bf00      	nop
 800895c:	20000649 	.word	0x20000649

08008960 <__sfp_lock_release>:
 8008960:	4801      	ldr	r0, [pc, #4]	; (8008968 <__sfp_lock_release+0x8>)
 8008962:	f000 b8ae 	b.w	8008ac2 <__retarget_lock_release_recursive>
 8008966:	bf00      	nop
 8008968:	20000649 	.word	0x20000649

0800896c <__sinit_lock_acquire>:
 800896c:	4801      	ldr	r0, [pc, #4]	; (8008974 <__sinit_lock_acquire+0x8>)
 800896e:	f000 b8a7 	b.w	8008ac0 <__retarget_lock_acquire_recursive>
 8008972:	bf00      	nop
 8008974:	2000064a 	.word	0x2000064a

08008978 <__sinit_lock_release>:
 8008978:	4801      	ldr	r0, [pc, #4]	; (8008980 <__sinit_lock_release+0x8>)
 800897a:	f000 b8a2 	b.w	8008ac2 <__retarget_lock_release_recursive>
 800897e:	bf00      	nop
 8008980:	2000064a 	.word	0x2000064a

08008984 <__sinit>:
 8008984:	b510      	push	{r4, lr}
 8008986:	4604      	mov	r4, r0
 8008988:	f7ff fff0 	bl	800896c <__sinit_lock_acquire>
 800898c:	69a3      	ldr	r3, [r4, #24]
 800898e:	b11b      	cbz	r3, 8008998 <__sinit+0x14>
 8008990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008994:	f7ff bff0 	b.w	8008978 <__sinit_lock_release>
 8008998:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800899c:	6523      	str	r3, [r4, #80]	; 0x50
 800899e:	4b13      	ldr	r3, [pc, #76]	; (80089ec <__sinit+0x68>)
 80089a0:	4a13      	ldr	r2, [pc, #76]	; (80089f0 <__sinit+0x6c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80089a6:	42a3      	cmp	r3, r4
 80089a8:	bf04      	itt	eq
 80089aa:	2301      	moveq	r3, #1
 80089ac:	61a3      	streq	r3, [r4, #24]
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 f820 	bl	80089f4 <__sfp>
 80089b4:	6060      	str	r0, [r4, #4]
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 f81c 	bl	80089f4 <__sfp>
 80089bc:	60a0      	str	r0, [r4, #8]
 80089be:	4620      	mov	r0, r4
 80089c0:	f000 f818 	bl	80089f4 <__sfp>
 80089c4:	2200      	movs	r2, #0
 80089c6:	60e0      	str	r0, [r4, #12]
 80089c8:	2104      	movs	r1, #4
 80089ca:	6860      	ldr	r0, [r4, #4]
 80089cc:	f7ff ff82 	bl	80088d4 <std>
 80089d0:	68a0      	ldr	r0, [r4, #8]
 80089d2:	2201      	movs	r2, #1
 80089d4:	2109      	movs	r1, #9
 80089d6:	f7ff ff7d 	bl	80088d4 <std>
 80089da:	68e0      	ldr	r0, [r4, #12]
 80089dc:	2202      	movs	r2, #2
 80089de:	2112      	movs	r1, #18
 80089e0:	f7ff ff78 	bl	80088d4 <std>
 80089e4:	2301      	movs	r3, #1
 80089e6:	61a3      	str	r3, [r4, #24]
 80089e8:	e7d2      	b.n	8008990 <__sinit+0xc>
 80089ea:	bf00      	nop
 80089ec:	08008e68 	.word	0x08008e68
 80089f0:	0800891d 	.word	0x0800891d

080089f4 <__sfp>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	4607      	mov	r7, r0
 80089f8:	f7ff ffac 	bl	8008954 <__sfp_lock_acquire>
 80089fc:	4b1e      	ldr	r3, [pc, #120]	; (8008a78 <__sfp+0x84>)
 80089fe:	681e      	ldr	r6, [r3, #0]
 8008a00:	69b3      	ldr	r3, [r6, #24]
 8008a02:	b913      	cbnz	r3, 8008a0a <__sfp+0x16>
 8008a04:	4630      	mov	r0, r6
 8008a06:	f7ff ffbd 	bl	8008984 <__sinit>
 8008a0a:	3648      	adds	r6, #72	; 0x48
 8008a0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	d503      	bpl.n	8008a1c <__sfp+0x28>
 8008a14:	6833      	ldr	r3, [r6, #0]
 8008a16:	b30b      	cbz	r3, 8008a5c <__sfp+0x68>
 8008a18:	6836      	ldr	r6, [r6, #0]
 8008a1a:	e7f7      	b.n	8008a0c <__sfp+0x18>
 8008a1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a20:	b9d5      	cbnz	r5, 8008a58 <__sfp+0x64>
 8008a22:	4b16      	ldr	r3, [pc, #88]	; (8008a7c <__sfp+0x88>)
 8008a24:	60e3      	str	r3, [r4, #12]
 8008a26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a2a:	6665      	str	r5, [r4, #100]	; 0x64
 8008a2c:	f000 f847 	bl	8008abe <__retarget_lock_init_recursive>
 8008a30:	f7ff ff96 	bl	8008960 <__sfp_lock_release>
 8008a34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a3c:	6025      	str	r5, [r4, #0]
 8008a3e:	61a5      	str	r5, [r4, #24]
 8008a40:	2208      	movs	r2, #8
 8008a42:	4629      	mov	r1, r5
 8008a44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a48:	f7fd faa0 	bl	8005f8c <memset>
 8008a4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a54:	4620      	mov	r0, r4
 8008a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a58:	3468      	adds	r4, #104	; 0x68
 8008a5a:	e7d9      	b.n	8008a10 <__sfp+0x1c>
 8008a5c:	2104      	movs	r1, #4
 8008a5e:	4638      	mov	r0, r7
 8008a60:	f7ff ff62 	bl	8008928 <__sfmoreglue>
 8008a64:	4604      	mov	r4, r0
 8008a66:	6030      	str	r0, [r6, #0]
 8008a68:	2800      	cmp	r0, #0
 8008a6a:	d1d5      	bne.n	8008a18 <__sfp+0x24>
 8008a6c:	f7ff ff78 	bl	8008960 <__sfp_lock_release>
 8008a70:	230c      	movs	r3, #12
 8008a72:	603b      	str	r3, [r7, #0]
 8008a74:	e7ee      	b.n	8008a54 <__sfp+0x60>
 8008a76:	bf00      	nop
 8008a78:	08008e68 	.word	0x08008e68
 8008a7c:	ffff0001 	.word	0xffff0001

08008a80 <_fwalk_reent>:
 8008a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a84:	4606      	mov	r6, r0
 8008a86:	4688      	mov	r8, r1
 8008a88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a8c:	2700      	movs	r7, #0
 8008a8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a92:	f1b9 0901 	subs.w	r9, r9, #1
 8008a96:	d505      	bpl.n	8008aa4 <_fwalk_reent+0x24>
 8008a98:	6824      	ldr	r4, [r4, #0]
 8008a9a:	2c00      	cmp	r4, #0
 8008a9c:	d1f7      	bne.n	8008a8e <_fwalk_reent+0xe>
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aa4:	89ab      	ldrh	r3, [r5, #12]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d907      	bls.n	8008aba <_fwalk_reent+0x3a>
 8008aaa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	d003      	beq.n	8008aba <_fwalk_reent+0x3a>
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	47c0      	blx	r8
 8008ab8:	4307      	orrs	r7, r0
 8008aba:	3568      	adds	r5, #104	; 0x68
 8008abc:	e7e9      	b.n	8008a92 <_fwalk_reent+0x12>

08008abe <__retarget_lock_init_recursive>:
 8008abe:	4770      	bx	lr

08008ac0 <__retarget_lock_acquire_recursive>:
 8008ac0:	4770      	bx	lr

08008ac2 <__retarget_lock_release_recursive>:
 8008ac2:	4770      	bx	lr

08008ac4 <__swhatbuf_r>:
 8008ac4:	b570      	push	{r4, r5, r6, lr}
 8008ac6:	460e      	mov	r6, r1
 8008ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008acc:	2900      	cmp	r1, #0
 8008ace:	b096      	sub	sp, #88	; 0x58
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	461d      	mov	r5, r3
 8008ad4:	da08      	bge.n	8008ae8 <__swhatbuf_r+0x24>
 8008ad6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008ada:	2200      	movs	r2, #0
 8008adc:	602a      	str	r2, [r5, #0]
 8008ade:	061a      	lsls	r2, r3, #24
 8008ae0:	d410      	bmi.n	8008b04 <__swhatbuf_r+0x40>
 8008ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ae6:	e00e      	b.n	8008b06 <__swhatbuf_r+0x42>
 8008ae8:	466a      	mov	r2, sp
 8008aea:	f000 f903 	bl	8008cf4 <_fstat_r>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	dbf1      	blt.n	8008ad6 <__swhatbuf_r+0x12>
 8008af2:	9a01      	ldr	r2, [sp, #4]
 8008af4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008af8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008afc:	425a      	negs	r2, r3
 8008afe:	415a      	adcs	r2, r3
 8008b00:	602a      	str	r2, [r5, #0]
 8008b02:	e7ee      	b.n	8008ae2 <__swhatbuf_r+0x1e>
 8008b04:	2340      	movs	r3, #64	; 0x40
 8008b06:	2000      	movs	r0, #0
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	b016      	add	sp, #88	; 0x58
 8008b0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b10 <__smakebuf_r>:
 8008b10:	898b      	ldrh	r3, [r1, #12]
 8008b12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b14:	079d      	lsls	r5, r3, #30
 8008b16:	4606      	mov	r6, r0
 8008b18:	460c      	mov	r4, r1
 8008b1a:	d507      	bpl.n	8008b2c <__smakebuf_r+0x1c>
 8008b1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	2301      	movs	r3, #1
 8008b26:	6163      	str	r3, [r4, #20]
 8008b28:	b002      	add	sp, #8
 8008b2a:	bd70      	pop	{r4, r5, r6, pc}
 8008b2c:	ab01      	add	r3, sp, #4
 8008b2e:	466a      	mov	r2, sp
 8008b30:	f7ff ffc8 	bl	8008ac4 <__swhatbuf_r>
 8008b34:	9900      	ldr	r1, [sp, #0]
 8008b36:	4605      	mov	r5, r0
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f7ff f963 	bl	8007e04 <_malloc_r>
 8008b3e:	b948      	cbnz	r0, 8008b54 <__smakebuf_r+0x44>
 8008b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b44:	059a      	lsls	r2, r3, #22
 8008b46:	d4ef      	bmi.n	8008b28 <__smakebuf_r+0x18>
 8008b48:	f023 0303 	bic.w	r3, r3, #3
 8008b4c:	f043 0302 	orr.w	r3, r3, #2
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	e7e3      	b.n	8008b1c <__smakebuf_r+0xc>
 8008b54:	4b0d      	ldr	r3, [pc, #52]	; (8008b8c <__smakebuf_r+0x7c>)
 8008b56:	62b3      	str	r3, [r6, #40]	; 0x28
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	6020      	str	r0, [r4, #0]
 8008b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b60:	81a3      	strh	r3, [r4, #12]
 8008b62:	9b00      	ldr	r3, [sp, #0]
 8008b64:	6163      	str	r3, [r4, #20]
 8008b66:	9b01      	ldr	r3, [sp, #4]
 8008b68:	6120      	str	r0, [r4, #16]
 8008b6a:	b15b      	cbz	r3, 8008b84 <__smakebuf_r+0x74>
 8008b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b70:	4630      	mov	r0, r6
 8008b72:	f000 f8d1 	bl	8008d18 <_isatty_r>
 8008b76:	b128      	cbz	r0, 8008b84 <__smakebuf_r+0x74>
 8008b78:	89a3      	ldrh	r3, [r4, #12]
 8008b7a:	f023 0303 	bic.w	r3, r3, #3
 8008b7e:	f043 0301 	orr.w	r3, r3, #1
 8008b82:	81a3      	strh	r3, [r4, #12]
 8008b84:	89a0      	ldrh	r0, [r4, #12]
 8008b86:	4305      	orrs	r5, r0
 8008b88:	81a5      	strh	r5, [r4, #12]
 8008b8a:	e7cd      	b.n	8008b28 <__smakebuf_r+0x18>
 8008b8c:	0800891d 	.word	0x0800891d

08008b90 <_malloc_usable_size_r>:
 8008b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b94:	1f18      	subs	r0, r3, #4
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	bfbc      	itt	lt
 8008b9a:	580b      	ldrlt	r3, [r1, r0]
 8008b9c:	18c0      	addlt	r0, r0, r3
 8008b9e:	4770      	bx	lr

08008ba0 <_raise_r>:
 8008ba0:	291f      	cmp	r1, #31
 8008ba2:	b538      	push	{r3, r4, r5, lr}
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	460d      	mov	r5, r1
 8008ba8:	d904      	bls.n	8008bb4 <_raise_r+0x14>
 8008baa:	2316      	movs	r3, #22
 8008bac:	6003      	str	r3, [r0, #0]
 8008bae:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008bb6:	b112      	cbz	r2, 8008bbe <_raise_r+0x1e>
 8008bb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bbc:	b94b      	cbnz	r3, 8008bd2 <_raise_r+0x32>
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f000 f830 	bl	8008c24 <_getpid_r>
 8008bc4:	462a      	mov	r2, r5
 8008bc6:	4601      	mov	r1, r0
 8008bc8:	4620      	mov	r0, r4
 8008bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bce:	f000 b817 	b.w	8008c00 <_kill_r>
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d00a      	beq.n	8008bec <_raise_r+0x4c>
 8008bd6:	1c59      	adds	r1, r3, #1
 8008bd8:	d103      	bne.n	8008be2 <_raise_r+0x42>
 8008bda:	2316      	movs	r3, #22
 8008bdc:	6003      	str	r3, [r0, #0]
 8008bde:	2001      	movs	r0, #1
 8008be0:	e7e7      	b.n	8008bb2 <_raise_r+0x12>
 8008be2:	2400      	movs	r4, #0
 8008be4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008be8:	4628      	mov	r0, r5
 8008bea:	4798      	blx	r3
 8008bec:	2000      	movs	r0, #0
 8008bee:	e7e0      	b.n	8008bb2 <_raise_r+0x12>

08008bf0 <raise>:
 8008bf0:	4b02      	ldr	r3, [pc, #8]	; (8008bfc <raise+0xc>)
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	f7ff bfd3 	b.w	8008ba0 <_raise_r>
 8008bfa:	bf00      	nop
 8008bfc:	2000000c 	.word	0x2000000c

08008c00 <_kill_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4d07      	ldr	r5, [pc, #28]	; (8008c20 <_kill_r+0x20>)
 8008c04:	2300      	movs	r3, #0
 8008c06:	4604      	mov	r4, r0
 8008c08:	4608      	mov	r0, r1
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	602b      	str	r3, [r5, #0]
 8008c0e:	f000 f8d7 	bl	8008dc0 <_kill>
 8008c12:	1c43      	adds	r3, r0, #1
 8008c14:	d102      	bne.n	8008c1c <_kill_r+0x1c>
 8008c16:	682b      	ldr	r3, [r5, #0]
 8008c18:	b103      	cbz	r3, 8008c1c <_kill_r+0x1c>
 8008c1a:	6023      	str	r3, [r4, #0]
 8008c1c:	bd38      	pop	{r3, r4, r5, pc}
 8008c1e:	bf00      	nop
 8008c20:	20000644 	.word	0x20000644

08008c24 <_getpid_r>:
 8008c24:	f000 b8bc 	b.w	8008da0 <_getpid>

08008c28 <__sread>:
 8008c28:	b510      	push	{r4, lr}
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c30:	f000 f894 	bl	8008d5c <_read_r>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	bfab      	itete	ge
 8008c38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c3c:	181b      	addge	r3, r3, r0
 8008c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c42:	bfac      	ite	ge
 8008c44:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c46:	81a3      	strhlt	r3, [r4, #12]
 8008c48:	bd10      	pop	{r4, pc}

08008c4a <__swrite>:
 8008c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4e:	461f      	mov	r7, r3
 8008c50:	898b      	ldrh	r3, [r1, #12]
 8008c52:	05db      	lsls	r3, r3, #23
 8008c54:	4605      	mov	r5, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	4616      	mov	r6, r2
 8008c5a:	d505      	bpl.n	8008c68 <__swrite+0x1e>
 8008c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c60:	2302      	movs	r3, #2
 8008c62:	2200      	movs	r2, #0
 8008c64:	f000 f868 	bl	8008d38 <_lseek_r>
 8008c68:	89a3      	ldrh	r3, [r4, #12]
 8008c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c72:	81a3      	strh	r3, [r4, #12]
 8008c74:	4632      	mov	r2, r6
 8008c76:	463b      	mov	r3, r7
 8008c78:	4628      	mov	r0, r5
 8008c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c7e:	f000 b817 	b.w	8008cb0 <_write_r>

08008c82 <__sseek>:
 8008c82:	b510      	push	{r4, lr}
 8008c84:	460c      	mov	r4, r1
 8008c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c8a:	f000 f855 	bl	8008d38 <_lseek_r>
 8008c8e:	1c43      	adds	r3, r0, #1
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	bf15      	itete	ne
 8008c94:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c9e:	81a3      	strheq	r3, [r4, #12]
 8008ca0:	bf18      	it	ne
 8008ca2:	81a3      	strhne	r3, [r4, #12]
 8008ca4:	bd10      	pop	{r4, pc}

08008ca6 <__sclose>:
 8008ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008caa:	f000 b813 	b.w	8008cd4 <_close_r>
	...

08008cb0 <_write_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d07      	ldr	r5, [pc, #28]	; (8008cd0 <_write_r+0x20>)
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	4611      	mov	r1, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	602a      	str	r2, [r5, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f000 f8a4 	bl	8008e0c <_write>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d102      	bne.n	8008cce <_write_r+0x1e>
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	b103      	cbz	r3, 8008cce <_write_r+0x1e>
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	bd38      	pop	{r3, r4, r5, pc}
 8008cd0:	20000644 	.word	0x20000644

08008cd4 <_close_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4d06      	ldr	r5, [pc, #24]	; (8008cf0 <_close_r+0x1c>)
 8008cd8:	2300      	movs	r3, #0
 8008cda:	4604      	mov	r4, r0
 8008cdc:	4608      	mov	r0, r1
 8008cde:	602b      	str	r3, [r5, #0]
 8008ce0:	f000 f84e 	bl	8008d80 <_close>
 8008ce4:	1c43      	adds	r3, r0, #1
 8008ce6:	d102      	bne.n	8008cee <_close_r+0x1a>
 8008ce8:	682b      	ldr	r3, [r5, #0]
 8008cea:	b103      	cbz	r3, 8008cee <_close_r+0x1a>
 8008cec:	6023      	str	r3, [r4, #0]
 8008cee:	bd38      	pop	{r3, r4, r5, pc}
 8008cf0:	20000644 	.word	0x20000644

08008cf4 <_fstat_r>:
 8008cf4:	b538      	push	{r3, r4, r5, lr}
 8008cf6:	4d07      	ldr	r5, [pc, #28]	; (8008d14 <_fstat_r+0x20>)
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	4608      	mov	r0, r1
 8008cfe:	4611      	mov	r1, r2
 8008d00:	602b      	str	r3, [r5, #0]
 8008d02:	f000 f845 	bl	8008d90 <_fstat>
 8008d06:	1c43      	adds	r3, r0, #1
 8008d08:	d102      	bne.n	8008d10 <_fstat_r+0x1c>
 8008d0a:	682b      	ldr	r3, [r5, #0]
 8008d0c:	b103      	cbz	r3, 8008d10 <_fstat_r+0x1c>
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	bd38      	pop	{r3, r4, r5, pc}
 8008d12:	bf00      	nop
 8008d14:	20000644 	.word	0x20000644

08008d18 <_isatty_r>:
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4d06      	ldr	r5, [pc, #24]	; (8008d34 <_isatty_r+0x1c>)
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4604      	mov	r4, r0
 8008d20:	4608      	mov	r0, r1
 8008d22:	602b      	str	r3, [r5, #0]
 8008d24:	f000 f844 	bl	8008db0 <_isatty>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d102      	bne.n	8008d32 <_isatty_r+0x1a>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	b103      	cbz	r3, 8008d32 <_isatty_r+0x1a>
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	20000644 	.word	0x20000644

08008d38 <_lseek_r>:
 8008d38:	b538      	push	{r3, r4, r5, lr}
 8008d3a:	4d07      	ldr	r5, [pc, #28]	; (8008d58 <_lseek_r+0x20>)
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	4608      	mov	r0, r1
 8008d40:	4611      	mov	r1, r2
 8008d42:	2200      	movs	r2, #0
 8008d44:	602a      	str	r2, [r5, #0]
 8008d46:	461a      	mov	r2, r3
 8008d48:	f000 f842 	bl	8008dd0 <_lseek>
 8008d4c:	1c43      	adds	r3, r0, #1
 8008d4e:	d102      	bne.n	8008d56 <_lseek_r+0x1e>
 8008d50:	682b      	ldr	r3, [r5, #0]
 8008d52:	b103      	cbz	r3, 8008d56 <_lseek_r+0x1e>
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	20000644 	.word	0x20000644

08008d5c <_read_r>:
 8008d5c:	b538      	push	{r3, r4, r5, lr}
 8008d5e:	4d07      	ldr	r5, [pc, #28]	; (8008d7c <_read_r+0x20>)
 8008d60:	4604      	mov	r4, r0
 8008d62:	4608      	mov	r0, r1
 8008d64:	4611      	mov	r1, r2
 8008d66:	2200      	movs	r2, #0
 8008d68:	602a      	str	r2, [r5, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	f000 f838 	bl	8008de0 <_read>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d102      	bne.n	8008d7a <_read_r+0x1e>
 8008d74:	682b      	ldr	r3, [r5, #0]
 8008d76:	b103      	cbz	r3, 8008d7a <_read_r+0x1e>
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	20000644 	.word	0x20000644

08008d80 <_close>:
 8008d80:	4b02      	ldr	r3, [pc, #8]	; (8008d8c <_close+0xc>)
 8008d82:	2258      	movs	r2, #88	; 0x58
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	f04f 30ff 	mov.w	r0, #4294967295
 8008d8a:	4770      	bx	lr
 8008d8c:	20000644 	.word	0x20000644

08008d90 <_fstat>:
 8008d90:	4b02      	ldr	r3, [pc, #8]	; (8008d9c <_fstat+0xc>)
 8008d92:	2258      	movs	r2, #88	; 0x58
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9a:	4770      	bx	lr
 8008d9c:	20000644 	.word	0x20000644

08008da0 <_getpid>:
 8008da0:	4b02      	ldr	r3, [pc, #8]	; (8008dac <_getpid+0xc>)
 8008da2:	2258      	movs	r2, #88	; 0x58
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	f04f 30ff 	mov.w	r0, #4294967295
 8008daa:	4770      	bx	lr
 8008dac:	20000644 	.word	0x20000644

08008db0 <_isatty>:
 8008db0:	4b02      	ldr	r3, [pc, #8]	; (8008dbc <_isatty+0xc>)
 8008db2:	2258      	movs	r2, #88	; 0x58
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	2000      	movs	r0, #0
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	20000644 	.word	0x20000644

08008dc0 <_kill>:
 8008dc0:	4b02      	ldr	r3, [pc, #8]	; (8008dcc <_kill+0xc>)
 8008dc2:	2258      	movs	r2, #88	; 0x58
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dca:	4770      	bx	lr
 8008dcc:	20000644 	.word	0x20000644

08008dd0 <_lseek>:
 8008dd0:	4b02      	ldr	r3, [pc, #8]	; (8008ddc <_lseek+0xc>)
 8008dd2:	2258      	movs	r2, #88	; 0x58
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dda:	4770      	bx	lr
 8008ddc:	20000644 	.word	0x20000644

08008de0 <_read>:
 8008de0:	4b02      	ldr	r3, [pc, #8]	; (8008dec <_read+0xc>)
 8008de2:	2258      	movs	r2, #88	; 0x58
 8008de4:	601a      	str	r2, [r3, #0]
 8008de6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dea:	4770      	bx	lr
 8008dec:	20000644 	.word	0x20000644

08008df0 <_sbrk>:
 8008df0:	4a04      	ldr	r2, [pc, #16]	; (8008e04 <_sbrk+0x14>)
 8008df2:	6811      	ldr	r1, [r2, #0]
 8008df4:	4603      	mov	r3, r0
 8008df6:	b909      	cbnz	r1, 8008dfc <_sbrk+0xc>
 8008df8:	4903      	ldr	r1, [pc, #12]	; (8008e08 <_sbrk+0x18>)
 8008dfa:	6011      	str	r1, [r2, #0]
 8008dfc:	6810      	ldr	r0, [r2, #0]
 8008dfe:	4403      	add	r3, r0
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	4770      	bx	lr
 8008e04:	2000064c 	.word	0x2000064c
 8008e08:	20000650 	.word	0x20000650

08008e0c <_write>:
 8008e0c:	4b02      	ldr	r3, [pc, #8]	; (8008e18 <_write+0xc>)
 8008e0e:	2258      	movs	r2, #88	; 0x58
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	f04f 30ff 	mov.w	r0, #4294967295
 8008e16:	4770      	bx	lr
 8008e18:	20000644 	.word	0x20000644

08008e1c <_exit>:
 8008e1c:	e7fe      	b.n	8008e1c <_exit>
	...

08008e20 <_init>:
 8008e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e22:	bf00      	nop
 8008e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e26:	bc08      	pop	{r3}
 8008e28:	469e      	mov	lr, r3
 8008e2a:	4770      	bx	lr

08008e2c <_fini>:
 8008e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e2e:	bf00      	nop
 8008e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e32:	bc08      	pop	{r3}
 8008e34:	469e      	mov	lr, r3
 8008e36:	4770      	bx	lr
