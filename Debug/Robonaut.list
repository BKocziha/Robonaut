
Robonaut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004858  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004a1c  08004a1c  00014a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a3c  08004a3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a3c  08004a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a44  08004a44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a44  08004a44  00014a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  2000000c  08004a58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08004a58  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014729  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b8  00000000  00000000  00034765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00036c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  00037eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002dfb  00000000  00000000  00039080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169d5  00000000  00000000  0003be7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1bd9  00000000  00000000  00052850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134429  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005000  00000000  00000000  0013447c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004a04 	.word	0x08004a04

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004a04 	.word	0x08004a04

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b974 	b.w	8000504 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468e      	mov	lr, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14d      	bne.n	80002de <__udivmoddi4+0xaa>
 8000242:	428a      	cmp	r2, r1
 8000244:	4694      	mov	ip, r2
 8000246:	d969      	bls.n	800031c <__udivmoddi4+0xe8>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b152      	cbz	r2, 8000264 <__udivmoddi4+0x30>
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	f1c2 0120 	rsb	r1, r2, #32
 8000256:	fa20 f101 	lsr.w	r1, r0, r1
 800025a:	fa0c fc02 	lsl.w	ip, ip, r2
 800025e:	ea41 0e03 	orr.w	lr, r1, r3
 8000262:	4094      	lsls	r4, r2
 8000264:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000268:	0c21      	lsrs	r1, r4, #16
 800026a:	fbbe f6f8 	udiv	r6, lr, r8
 800026e:	fa1f f78c 	uxth.w	r7, ip
 8000272:	fb08 e316 	mls	r3, r8, r6, lr
 8000276:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027a:	fb06 f107 	mul.w	r1, r6, r7
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 811f 	bcs.w	80004cc <__udivmoddi4+0x298>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 811c 	bls.w	80004cc <__udivmoddi4+0x298>
 8000294:	3e02      	subs	r6, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 f707 	mul.w	r7, r0, r7
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x92>
 80002b0:	eb1c 0404 	adds.w	r4, ip, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b8:	f080 810a 	bcs.w	80004d0 <__udivmoddi4+0x29c>
 80002bc:	42a7      	cmp	r7, r4
 80002be:	f240 8107 	bls.w	80004d0 <__udivmoddi4+0x29c>
 80002c2:	4464      	add	r4, ip
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ca:	1be4      	subs	r4, r4, r7
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa4>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0xc2>
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	f000 80ef 	beq.w	80004c6 <__udivmoddi4+0x292>
 80002e8:	2600      	movs	r6, #0
 80002ea:	e9c5 0100 	strd	r0, r1, [r5]
 80002ee:	4630      	mov	r0, r6
 80002f0:	4631      	mov	r1, r6
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	fab3 f683 	clz	r6, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d14a      	bne.n	8000394 <__udivmoddi4+0x160>
 80002fe:	428b      	cmp	r3, r1
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xd4>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 80f9 	bhi.w	80004fa <__udivmoddi4+0x2c6>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb61 0303 	sbc.w	r3, r1, r3
 800030e:	2001      	movs	r0, #1
 8000310:	469e      	mov	lr, r3
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e0      	beq.n	80002d8 <__udivmoddi4+0xa4>
 8000316:	e9c5 4e00 	strd	r4, lr, [r5]
 800031a:	e7dd      	b.n	80002d8 <__udivmoddi4+0xa4>
 800031c:	b902      	cbnz	r2, 8000320 <__udivmoddi4+0xec>
 800031e:	deff      	udf	#255	; 0xff
 8000320:	fab2 f282 	clz	r2, r2
 8000324:	2a00      	cmp	r2, #0
 8000326:	f040 8092 	bne.w	800044e <__udivmoddi4+0x21a>
 800032a:	eba1 010c 	sub.w	r1, r1, ip
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f fe8c 	uxth.w	lr, ip
 8000336:	2601      	movs	r6, #1
 8000338:	0c20      	lsrs	r0, r4, #16
 800033a:	fbb1 f3f7 	udiv	r3, r1, r7
 800033e:	fb07 1113 	mls	r1, r7, r3, r1
 8000342:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000346:	fb0e f003 	mul.w	r0, lr, r3
 800034a:	4288      	cmp	r0, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0x12c>
 800034e:	eb1c 0101 	adds.w	r1, ip, r1
 8000352:	f103 38ff 	add.w	r8, r3, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x12a>
 8000358:	4288      	cmp	r0, r1
 800035a:	f200 80cb 	bhi.w	80004f4 <__udivmoddi4+0x2c0>
 800035e:	4643      	mov	r3, r8
 8000360:	1a09      	subs	r1, r1, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb1 f0f7 	udiv	r0, r1, r7
 8000368:	fb07 1110 	mls	r1, r7, r0, r1
 800036c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000370:	fb0e fe00 	mul.w	lr, lr, r0
 8000374:	45a6      	cmp	lr, r4
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x156>
 8000378:	eb1c 0404 	adds.w	r4, ip, r4
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x154>
 8000382:	45a6      	cmp	lr, r4
 8000384:	f200 80bb 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 8000388:	4608      	mov	r0, r1
 800038a:	eba4 040e 	sub.w	r4, r4, lr
 800038e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000392:	e79c      	b.n	80002ce <__udivmoddi4+0x9a>
 8000394:	f1c6 0720 	rsb	r7, r6, #32
 8000398:	40b3      	lsls	r3, r6
 800039a:	fa22 fc07 	lsr.w	ip, r2, r7
 800039e:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a2:	fa20 f407 	lsr.w	r4, r0, r7
 80003a6:	fa01 f306 	lsl.w	r3, r1, r6
 80003aa:	431c      	orrs	r4, r3
 80003ac:	40f9      	lsrs	r1, r7
 80003ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b2:	fa00 f306 	lsl.w	r3, r0, r6
 80003b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ba:	0c20      	lsrs	r0, r4, #16
 80003bc:	fa1f fe8c 	uxth.w	lr, ip
 80003c0:	fb09 1118 	mls	r1, r9, r8, r1
 80003c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c8:	fb08 f00e 	mul.w	r0, r8, lr
 80003cc:	4288      	cmp	r0, r1
 80003ce:	fa02 f206 	lsl.w	r2, r2, r6
 80003d2:	d90b      	bls.n	80003ec <__udivmoddi4+0x1b8>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003dc:	f080 8088 	bcs.w	80004f0 <__udivmoddi4+0x2bc>
 80003e0:	4288      	cmp	r0, r1
 80003e2:	f240 8085 	bls.w	80004f0 <__udivmoddi4+0x2bc>
 80003e6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ea:	4461      	add	r1, ip
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f4:	fb09 1110 	mls	r1, r9, r0, r1
 80003f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000400:	458e      	cmp	lr, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1e2>
 8000404:	eb1c 0101 	adds.w	r1, ip, r1
 8000408:	f100 34ff 	add.w	r4, r0, #4294967295
 800040c:	d26c      	bcs.n	80004e8 <__udivmoddi4+0x2b4>
 800040e:	458e      	cmp	lr, r1
 8000410:	d96a      	bls.n	80004e8 <__udivmoddi4+0x2b4>
 8000412:	3802      	subs	r0, #2
 8000414:	4461      	add	r1, ip
 8000416:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041a:	fba0 9402 	umull	r9, r4, r0, r2
 800041e:	eba1 010e 	sub.w	r1, r1, lr
 8000422:	42a1      	cmp	r1, r4
 8000424:	46c8      	mov	r8, r9
 8000426:	46a6      	mov	lr, r4
 8000428:	d356      	bcc.n	80004d8 <__udivmoddi4+0x2a4>
 800042a:	d053      	beq.n	80004d4 <__udivmoddi4+0x2a0>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x212>
 800042e:	ebb3 0208 	subs.w	r2, r3, r8
 8000432:	eb61 010e 	sbc.w	r1, r1, lr
 8000436:	fa01 f707 	lsl.w	r7, r1, r7
 800043a:	fa22 f306 	lsr.w	r3, r2, r6
 800043e:	40f1      	lsrs	r1, r6
 8000440:	431f      	orrs	r7, r3
 8000442:	e9c5 7100 	strd	r7, r1, [r5]
 8000446:	2600      	movs	r6, #0
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1c2 0320 	rsb	r3, r2, #32
 8000452:	40d8      	lsrs	r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa21 f303 	lsr.w	r3, r1, r3
 800045c:	4091      	lsls	r1, r2
 800045e:	4301      	orrs	r1, r0
 8000460:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fbb3 f0f7 	udiv	r0, r3, r7
 800046c:	fb07 3610 	mls	r6, r7, r0, r3
 8000470:	0c0b      	lsrs	r3, r1, #16
 8000472:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000476:	fb00 f60e 	mul.w	r6, r0, lr
 800047a:	429e      	cmp	r6, r3
 800047c:	fa04 f402 	lsl.w	r4, r4, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x260>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 38ff 	add.w	r8, r0, #4294967295
 800048a:	d22f      	bcs.n	80004ec <__udivmoddi4+0x2b8>
 800048c:	429e      	cmp	r6, r3
 800048e:	d92d      	bls.n	80004ec <__udivmoddi4+0x2b8>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1b9b      	subs	r3, r3, r6
 8000496:	b289      	uxth	r1, r1
 8000498:	fbb3 f6f7 	udiv	r6, r3, r7
 800049c:	fb07 3316 	mls	r3, r7, r6, r3
 80004a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a4:	fb06 f30e 	mul.w	r3, r6, lr
 80004a8:	428b      	cmp	r3, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x28a>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b4:	d216      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d914      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 80004ba:	3e02      	subs	r6, #2
 80004bc:	4461      	add	r1, ip
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c4:	e738      	b.n	8000338 <__udivmoddi4+0x104>
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e705      	b.n	80002d8 <__udivmoddi4+0xa4>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e3      	b.n	8000298 <__udivmoddi4+0x64>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6f8      	b.n	80002c6 <__udivmoddi4+0x92>
 80004d4:	454b      	cmp	r3, r9
 80004d6:	d2a9      	bcs.n	800042c <__udivmoddi4+0x1f8>
 80004d8:	ebb9 0802 	subs.w	r8, r9, r2
 80004dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7a3      	b.n	800042c <__udivmoddi4+0x1f8>
 80004e4:	4646      	mov	r6, r8
 80004e6:	e7ea      	b.n	80004be <__udivmoddi4+0x28a>
 80004e8:	4620      	mov	r0, r4
 80004ea:	e794      	b.n	8000416 <__udivmoddi4+0x1e2>
 80004ec:	4640      	mov	r0, r8
 80004ee:	e7d1      	b.n	8000494 <__udivmoddi4+0x260>
 80004f0:	46d0      	mov	r8, sl
 80004f2:	e77b      	b.n	80003ec <__udivmoddi4+0x1b8>
 80004f4:	3b02      	subs	r3, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	e732      	b.n	8000360 <__udivmoddi4+0x12c>
 80004fa:	4630      	mov	r0, r6
 80004fc:	e709      	b.n	8000312 <__udivmoddi4+0xde>
 80004fe:	4464      	add	r4, ip
 8000500:	3802      	subs	r0, #2
 8000502:	e742      	b.n	800038a <__udivmoddi4+0x156>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <LS_LED_Light>:
#include <string.h>
#include <stdio.h>

// Az utolsó beadott érték mindig 33-nál nagyobb legyen!
void LS_LED_Light(SPI_HandleTypeDef *hspi, uint8_t *leds_to_light, uint8_t *fb_leds_on)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	; 0x28
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
	uint8_t fb_leds_on_temp[4] = {0};
 8000514:	2300      	movs	r3, #0
 8000516:	613b      	str	r3, [r7, #16]
	for (int i=0; leds_to_light[i]<33; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	627b      	str	r3, [r7, #36]	; 0x24
 800051c:	e091      	b.n	8000642 <LS_LED_Light+0x13a>
	{
		switch(leds_to_light[i]/8) {
 800051e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000520:	68ba      	ldr	r2, [r7, #8]
 8000522:	4413      	add	r3, r2
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	08db      	lsrs	r3, r3, #3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b03      	cmp	r3, #3
 800052c:	f200 8086 	bhi.w	800063c <LS_LED_Light+0x134>
 8000530:	a201      	add	r2, pc, #4	; (adr r2, 8000538 <LS_LED_Light+0x30>)
 8000532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000536:	bf00      	nop
 8000538:	08000549 	.word	0x08000549
 800053c:	08000587 	.word	0x08000587
 8000540:	080005c5 	.word	0x080005c5
 8000544:	08000603 	.word	0x08000603
		case 0:
			fb_leds_on_temp[3] = 1;
 8000548:	2301      	movs	r3, #1
 800054a:	74fb      	strb	r3, [r7, #19]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
 8000550:	e006      	b.n	8000560 <LS_LED_Light+0x58>
				fb_leds_on_temp[3] <<= 1;
 8000552:	7cfb      	ldrb	r3, [r7, #19]
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	74fb      	strb	r3, [r7, #19]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800055a:	6a3b      	ldr	r3, [r7, #32]
 800055c:	3301      	adds	r3, #1
 800055e:	623b      	str	r3, [r7, #32]
 8000560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000562:	68ba      	ldr	r2, [r7, #8]
 8000564:	4413      	add	r3, r2
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	f003 0307 	and.w	r3, r3, #7
 800056c:	6a3a      	ldr	r2, [r7, #32]
 800056e:	429a      	cmp	r2, r3
 8000570:	dbef      	blt.n	8000552 <LS_LED_Light+0x4a>
			}
			fb_leds_on[3] |= fb_leds_on_temp[3];
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3303      	adds	r3, #3
 8000576:	7819      	ldrb	r1, [r3, #0]
 8000578:	7cfa      	ldrb	r2, [r7, #19]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3303      	adds	r3, #3
 800057e:	430a      	orrs	r2, r1
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	701a      	strb	r2, [r3, #0]
			break;
 8000584:	e05a      	b.n	800063c <LS_LED_Light+0x134>
		case 1:
			fb_leds_on_temp[2] = 1;
 8000586:	2301      	movs	r3, #1
 8000588:	74bb      	strb	r3, [r7, #18]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800058a:	2300      	movs	r3, #0
 800058c:	61fb      	str	r3, [r7, #28]
 800058e:	e006      	b.n	800059e <LS_LED_Light+0x96>
				fb_leds_on_temp[2] <<= 1;
 8000590:	7cbb      	ldrb	r3, [r7, #18]
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	b2db      	uxtb	r3, r3
 8000596:	74bb      	strb	r3, [r7, #18]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000598:	69fb      	ldr	r3, [r7, #28]
 800059a:	3301      	adds	r3, #1
 800059c:	61fb      	str	r3, [r7, #28]
 800059e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a0:	68ba      	ldr	r2, [r7, #8]
 80005a2:	4413      	add	r3, r2
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	f003 0307 	and.w	r3, r3, #7
 80005aa:	69fa      	ldr	r2, [r7, #28]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dbef      	blt.n	8000590 <LS_LED_Light+0x88>
			}
			fb_leds_on[2] |= fb_leds_on_temp[2];
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	3302      	adds	r3, #2
 80005b4:	7819      	ldrb	r1, [r3, #0]
 80005b6:	7cba      	ldrb	r2, [r7, #18]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3302      	adds	r3, #2
 80005bc:	430a      	orrs	r2, r1
 80005be:	b2d2      	uxtb	r2, r2
 80005c0:	701a      	strb	r2, [r3, #0]
			break;
 80005c2:	e03b      	b.n	800063c <LS_LED_Light+0x134>
		case 2:
			fb_leds_on_temp[1] = 1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	747b      	strb	r3, [r7, #17]
			for (int j=0; j<leds_to_light[i]%8; j++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	e006      	b.n	80005dc <LS_LED_Light+0xd4>
				fb_leds_on_temp[1] <<= 1;
 80005ce:	7c7b      	ldrb	r3, [r7, #17]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	747b      	strb	r3, [r7, #17]
			for (int j=0; j<leds_to_light[i]%8; j++){
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	3301      	adds	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
 80005dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	4413      	add	r3, r2
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	f003 0307 	and.w	r3, r3, #7
 80005e8:	69ba      	ldr	r2, [r7, #24]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	dbef      	blt.n	80005ce <LS_LED_Light+0xc6>
			}
			fb_leds_on[1] |= fb_leds_on_temp[1];
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3301      	adds	r3, #1
 80005f2:	7819      	ldrb	r1, [r3, #0]
 80005f4:	7c7a      	ldrb	r2, [r7, #17]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3301      	adds	r3, #1
 80005fa:	430a      	orrs	r2, r1
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	701a      	strb	r2, [r3, #0]
			break;
 8000600:	e01c      	b.n	800063c <LS_LED_Light+0x134>
		case 3:
			fb_leds_on_temp[0] = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	743b      	strb	r3, [r7, #16]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e006      	b.n	800061a <LS_LED_Light+0x112>
				fb_leds_on_temp[0] <<= 1;
 800060c:	7c3b      	ldrb	r3, [r7, #16]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	743b      	strb	r3, [r7, #16]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	3301      	adds	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
 800061a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800061c:	68ba      	ldr	r2, [r7, #8]
 800061e:	4413      	add	r3, r2
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	697a      	ldr	r2, [r7, #20]
 8000628:	429a      	cmp	r2, r3
 800062a:	dbef      	blt.n	800060c <LS_LED_Light+0x104>
			}
			fb_leds_on[0] |= fb_leds_on_temp[0];
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781a      	ldrb	r2, [r3, #0]
 8000630:	7c3b      	ldrb	r3, [r7, #16]
 8000632:	4313      	orrs	r3, r2
 8000634:	b2da      	uxtb	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	701a      	strb	r2, [r3, #0]
			break;
 800063a:	bf00      	nop
	for (int i=0; leds_to_light[i]<33; i++)
 800063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063e:	3301      	adds	r3, #1
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
 8000642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000644:	68ba      	ldr	r2, [r7, #8]
 8000646:	4413      	add	r3, r2
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b20      	cmp	r3, #32
 800064c:	f67f af67 	bls.w	800051e <LS_LED_Light+0x16>
		}
	}
	LS_LED_Send(hspi, fb_leds_on);
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	f000 f804 	bl	8000660 <LS_LED_Send>
}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	; 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <LS_LED_Send>:

void LS_LED_Send(SPI_HandleTypeDef *hspi, uint8_t *leds_on)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	2204      	movs	r2, #4
 800066e:	6839      	ldr	r1, [r7, #0]
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f003 f800 	bl	8003676 <HAL_SPI_Transmit>

	// Latch enable
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000676:	2201      	movs	r2, #1
 8000678:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067c:	480b      	ldr	r0, [pc, #44]	; (80006ac <LS_LED_Send+0x4c>)
 800067e:	f001 ffc3 	bl	8002608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000688:	4808      	ldr	r0, [pc, #32]	; (80006ac <LS_LED_Send+0x4c>)
 800068a:	f001 ffbd 	bl	8002608 <HAL_GPIO_WritePin>

	//Output enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	2104      	movs	r1, #4
 8000692:	4807      	ldr	r0, [pc, #28]	; (80006b0 <LS_LED_Send+0x50>)
 8000694:	f001 ffb8 	bl	8002608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2104      	movs	r1, #4
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <LS_LED_Send+0x50>)
 800069e:	f001 ffb3 	bl	8002608 <HAL_GPIO_WritePin>
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020800 	.word	0x40020800
 80006b0:	40020c00 	.word	0x40020c00

080006b4 <LS_INF_Send>:

void LS_INF_Send(SPI_HandleTypeDef *hspi, uint8_t *infs_on)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, infs_on, 4, 100);
 80006be:	2364      	movs	r3, #100	; 0x64
 80006c0:	2204      	movs	r2, #4
 80006c2:	6839      	ldr	r1, [r7, #0]
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f002 ffd6 	bl	8003676 <HAL_SPI_Transmit>

	// Inf Latch enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <LS_INF_Send+0x50>)
 80006d2:	f001 ff99 	bl	8002608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <LS_INF_Send+0x50>)
 80006de:	f001 ff93 	bl	8002608 <HAL_GPIO_WritePin>

	// Inf Output enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <LS_INF_Send+0x50>)
 80006ea:	f001 ff8d 	bl	8002608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <LS_INF_Send+0x50>)
 80006f6:	f001 ff87 	bl	8002608 <HAL_GPIO_WritePin>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40020000 	.word	0x40020000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b098      	sub	sp, #96	; 0x60
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070e:	f001 f9f1 	bl	8001af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000712:	f000 f84d 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000716:	f000 fc41 	bl	8000f9c <MX_GPIO_Init>
  MX_I2C1_Init();
 800071a:	f000 f90d 	bl	8000938 <MX_I2C1_Init>
  MX_I2C3_Init();
 800071e:	f000 f967 	bl	80009f0 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000722:	f000 f993 	bl	8000a4c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000726:	f000 f9c7 	bl	8000ab8 <MX_SPI2_Init>
  MX_SPI3_Init();
 800072a:	f000 f9fb 	bl	8000b24 <MX_SPI3_Init>
  MX_ADC1_Init();
 800072e:	f000 f8b1 	bl	8000894 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000732:	f000 fa2f 	bl	8000b94 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000736:	f000 fa81 	bl	8000c3c <MX_TIM3_Init>
  MX_TIM4_Init();
 800073a:	f000 fad9 	bl	8000cf0 <MX_TIM4_Init>
  MX_TIM13_Init();
 800073e:	f000 fb8b 	bl	8000e58 <MX_TIM13_Init>
  MX_TIM5_Init();
 8000742:	f000 fb2f 	bl	8000da4 <MX_TIM5_Init>
  MX_I2C2_Init();
 8000746:	f000 f925 	bl	8000994 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800074a:	f000 fbd3 	bl	8000ef4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800074e:	f000 fbfb 	bl	8000f48 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  unsigned char ADC_value_string[10];
  uint8_t leds_on[4];// = {1, 1, 1, 1};
  uint8_t leds_off[] = {0, 0, 0, 0};
 8000752:	2300      	movs	r3, #0
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t fb_leds_on[4] = {0};
 8000756:	2300      	movs	r3, #0
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  uint8_t fb_leds_to_light[5] = {1, 2, 10, 50, 50};
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <main+0x9c>)
 800075c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000764:	6018      	str	r0, [r3, #0]
 8000766:	3304      	adds	r3, #4
 8000768:	7019      	strb	r1, [r3, #0]
  //uint8_t leds_all_on[] = {255, 255, 255, 255};
  uint16_t ADC_values[32] = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2240      	movs	r2, #64	; 0x40
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f004 f93f 	bl	80049f4 <memset>

  LS_INF_Send(&hspi3, leds_off);
 8000776:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800077a:	4619      	mov	r1, r3
 800077c:	480a      	ldr	r0, [pc, #40]	; (80007a8 <main+0xa0>)
 800077e:	f7ff ff99 	bl	80006b4 <LS_INF_Send>


  LS_LED_Light(&hspi3, fb_leds_to_light, fb_leds_on);
 8000782:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000786:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800078a:	4619      	mov	r1, r3
 800078c:	4806      	ldr	r0, [pc, #24]	; (80007a8 <main+0xa0>)
 800078e:	f7ff febb 	bl	8000508 <LS_LED_Light>
//	  LS_INF_Send(&hspi3, leds_off);
//	  LS_BT_SendData(&huart2, BT_send_msg_buff, ADC_values, ADC_value_string);
//	  HAL_Delay(100);


	  if (buttonMessageFlag){
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <main+0xa4>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d0fb      	beq.n	8000792 <main+0x8a>
		  buttonMessageFlag = false;
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <main+0xa4>)
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]
	  if (buttonMessageFlag){
 80007a0:	e7f7      	b.n	8000792 <main+0x8a>
 80007a2:	bf00      	nop
 80007a4:	08004a1c 	.word	0x08004a1c
 80007a8:	2000021c 	.word	0x2000021c
 80007ac:	20000464 	.word	0x20000464

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2234      	movs	r2, #52	; 0x34
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 f918 	bl	80049f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	4b2c      	ldr	r3, [pc, #176]	; (800088c <SystemClock_Config+0xdc>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	4a2b      	ldr	r2, [pc, #172]	; (800088c <SystemClock_Config+0xdc>)
 80007de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e2:	6413      	str	r3, [r2, #64]	; 0x40
 80007e4:	4b29      	ldr	r3, [pc, #164]	; (800088c <SystemClock_Config+0xdc>)
 80007e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	2300      	movs	r3, #0
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	4b26      	ldr	r3, [pc, #152]	; (8000890 <SystemClock_Config+0xe0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a25      	ldr	r2, [pc, #148]	; (8000890 <SystemClock_Config+0xe0>)
 80007fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007fe:	6013      	str	r3, [r2, #0]
 8000800:	4b23      	ldr	r3, [pc, #140]	; (8000890 <SystemClock_Config+0xe0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080c:	2301      	movs	r3, #1
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000810:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000814:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800081e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000820:	2304      	movs	r3, #4
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000824:	23b4      	movs	r3, #180	; 0xb4
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000828:	2302      	movs	r3, #2
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800082c:	2302      	movs	r3, #2
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000830:	2302      	movs	r3, #2
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fbf5 	bl	8003028 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000844:	f000 fc9a 	bl	800117c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000848:	f002 f854 	bl	80028f4 <HAL_PWREx_EnableOverDrive>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000852:	f000 fc93 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000856:	230f      	movs	r3, #15
 8000858:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085a:	2302      	movs	r3, #2
 800085c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000862:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	2105      	movs	r1, #5
 8000874:	4618      	mov	r0, r3
 8000876:	f002 f88d 	bl	8002994 <HAL_RCC_ClockConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000880:	f000 fc7c 	bl	800117c <Error_Handler>
  }
}
 8000884:	bf00      	nop
 8000886:	3750      	adds	r7, #80	; 0x50
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_ADC1_Init+0x98>)
 80008a8:	4a21      	ldr	r2, [pc, #132]	; (8000930 <MX_ADC1_Init+0x9c>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_ADC1_Init+0x98>)
 80008ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ADC1_Init+0x98>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_ADC1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_ADC1_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_ADC1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_ADC1_Init+0x98>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_ADC1_Init+0x98>)
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <MX_ADC1_Init+0xa0>)
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008da:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_ADC1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_ADC1_Init+0x98>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <MX_ADC1_Init+0x98>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_ADC1_Init+0x98>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_ADC1_Init+0x98>)
 80008f6:	f001 f96f 	bl	8001bd8 <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000900:	f000 fc3c 	bl	800117c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000904:	2301      	movs	r3, #1
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_ADC1_Init+0x98>)
 8000916:	f001 f9a3 	bl	8001c60 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000920:	f000 fc2c 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000028 	.word	0x20000028
 8000930:	40012000 	.word	0x40012000
 8000934:	0f000001 	.word	0x0f000001

08000938 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_I2C1_Init+0x50>)
 800093e:	4a13      	ldr	r2, [pc, #76]	; (800098c <MX_I2C1_Init+0x54>)
 8000940:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_I2C1_Init+0x50>)
 8000944:	4a12      	ldr	r2, [pc, #72]	; (8000990 <MX_I2C1_Init+0x58>)
 8000946:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_I2C1_Init+0x50>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_I2C1_Init+0x50>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_I2C1_Init+0x50>)
 8000956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800095a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MX_I2C1_Init+0x50>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_I2C1_Init+0x50>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_I2C1_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <MX_I2C1_Init+0x50>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_I2C1_Init+0x50>)
 8000976:	f001 fe79 	bl	800266c <HAL_I2C_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000980:	f000 fbfc 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000984:	bf00      	nop
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000070 	.word	0x20000070
 800098c:	40005400 	.word	0x40005400
 8000990:	000186a0 	.word	0x000186a0

08000994 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_I2C2_Init+0x50>)
 800099a:	4a13      	ldr	r2, [pc, #76]	; (80009e8 <MX_I2C2_Init+0x54>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_I2C2_Init+0x50>)
 80009a0:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_I2C2_Init+0x58>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_I2C2_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_I2C2_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_I2C2_Init+0x50>)
 80009b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_I2C2_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_I2C2_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_I2C2_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_I2C2_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <MX_I2C2_Init+0x50>)
 80009d2:	f001 fe4b 	bl	800266c <HAL_I2C_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009dc:	f000 fbce 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	200000c4 	.word	0x200000c4
 80009e8:	40005800 	.word	0x40005800
 80009ec:	000186a0 	.word	0x000186a0

080009f0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009f4:	4b12      	ldr	r3, [pc, #72]	; (8000a40 <MX_I2C3_Init+0x50>)
 80009f6:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <MX_I2C3_Init+0x54>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_I2C3_Init+0x50>)
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_I2C3_Init+0x58>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_I2C3_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_I2C3_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_I2C3_Init+0x50>)
 8000a0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a12:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <MX_I2C3_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_I2C3_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <MX_I2C3_Init+0x50>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_I2C3_Init+0x50>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_I2C3_Init+0x50>)
 8000a2e:	f001 fe1d 	bl	800266c <HAL_I2C_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a38:	f000 fba0 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000118 	.word	0x20000118
 8000a44:	40005c00 	.word	0x40005c00
 8000a48:	000186a0 	.word	0x000186a0

08000a4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a52:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <MX_SPI1_Init+0x68>)
 8000a54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a80:	2238      	movs	r2, #56	; 0x38
 8000a82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a98:	220a      	movs	r2, #10
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_SPI1_Init+0x64>)
 8000a9e:	f002 fd61 	bl	8003564 <HAL_SPI_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000aa8:	f000 fb68 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000016c 	.word	0x2000016c
 8000ab4:	40013000 	.word	0x40013000

08000ab8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <MX_SPI2_Init+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000ac4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ac8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000ae4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000b04:	220a      	movs	r2, #10
 8000b06:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_SPI2_Init+0x64>)
 8000b0a:	f002 fd2b 	bl	8003564 <HAL_SPI_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b14:	f000 fb32 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200001c4 	.word	0x200001c4
 8000b20:	40003800 	.word	0x40003800

08000b24 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <MX_SPI3_Init+0x6c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b34:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b38:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b3c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b56:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b72:	220a      	movs	r2, #10
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_SPI3_Init+0x68>)
 8000b78:	f002 fcf4 	bl	8003564 <HAL_SPI_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000b82:	f000 fafb 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000021c 	.word	0x2000021c
 8000b90:	40003c00 	.word	0x40003c00

08000b94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2224      	movs	r2, #36	; 0x24
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 ff26 	bl	80049f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_TIM2_Init+0xa4>)
 8000bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <MX_TIM2_Init+0xa4>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MX_TIM2_Init+0xa4>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_TIM2_Init+0xa4>)
 8000bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_TIM2_Init+0xa4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_TIM2_Init+0xa4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_TIM2_Init+0xa4>)
 8000c04:	f002 ffdc 	bl	8003bc0 <HAL_TIM_Encoder_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000c0e:	f000 fab5 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <MX_TIM2_Init+0xa4>)
 8000c20:	f003 fb86 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c2a:	f000 faa7 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	; 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000274 	.word	0x20000274

08000c3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	; 0x28
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c42:	f107 0320 	add.w	r3, r7, #32
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4c:	1d3b      	adds	r3, r7, #4
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <MX_TIM3_Init+0xac>)
 8000c60:	4a22      	ldr	r2, [pc, #136]	; (8000cec <MX_TIM3_Init+0xb0>)
 8000c62:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c64:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <MX_TIM3_Init+0xac>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_TIM3_Init+0xac>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <MX_TIM3_Init+0xac>)
 8000c72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c76:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_TIM3_Init+0xac>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_TIM3_Init+0xac>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c84:	4818      	ldr	r0, [pc, #96]	; (8000ce8 <MX_TIM3_Init+0xac>)
 8000c86:	f002 ff4c 	bl	8003b22 <HAL_TIM_PWM_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c90:	f000 fa74 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c9c:	f107 0320 	add.w	r3, r7, #32
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <MX_TIM3_Init+0xac>)
 8000ca4:	f003 fb44 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000cae:	f000 fa65 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb2:	2360      	movs	r3, #96	; 0x60
 8000cb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <MX_TIM3_Init+0xac>)
 8000cca:	f003 f81f 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000cd4:	f000 fa52 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <MX_TIM3_Init+0xac>)
 8000cda:	f000 fd71 	bl	80017c0 <HAL_TIM_MspPostInit>

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	; 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200002bc 	.word	0x200002bc
 8000cec:	40000400 	.word	0x40000400

08000cf0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	615a      	str	r2, [r3, #20]
 8000d10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d12:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <MX_TIM4_Init+0xac>)
 8000d14:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <MX_TIM4_Init+0xb0>)
 8000d16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d18:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <MX_TIM4_Init+0xac>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_TIM4_Init+0xac>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_TIM4_Init+0xac>)
 8000d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_TIM4_Init+0xac>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_TIM4_Init+0xac>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d38:	4818      	ldr	r0, [pc, #96]	; (8000d9c <MX_TIM4_Init+0xac>)
 8000d3a:	f002 fef2 	bl	8003b22 <HAL_TIM_PWM_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000d44:	f000 fa1a 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d50:	f107 0320 	add.w	r3, r7, #32
 8000d54:	4619      	mov	r1, r3
 8000d56:	4811      	ldr	r0, [pc, #68]	; (8000d9c <MX_TIM4_Init+0xac>)
 8000d58:	f003 faea 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000d62:	f000 fa0b 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d66:	2360      	movs	r3, #96	; 0x60
 8000d68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4807      	ldr	r0, [pc, #28]	; (8000d9c <MX_TIM4_Init+0xac>)
 8000d7e:	f002 ffc5 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000d88:	f000 f9f8 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <MX_TIM4_Init+0xac>)
 8000d8e:	f000 fd17 	bl	80017c0 <HAL_TIM_MspPostInit>

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000304 	.word	0x20000304
 8000da0:	40000800 	.word	0x40000800

08000da4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000daa:	f107 0320 	add.w	r3, r7, #32
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	615a      	str	r2, [r3, #20]
 8000dc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <MX_TIM5_Init+0xac>)
 8000dc8:	4a22      	ldr	r2, [pc, #136]	; (8000e54 <MX_TIM5_Init+0xb0>)
 8000dca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <MX_TIM5_Init+0xac>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <MX_TIM5_Init+0xac>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <MX_TIM5_Init+0xac>)
 8000dda:	f04f 32ff 	mov.w	r2, #4294967295
 8000dde:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_TIM5_Init+0xac>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_TIM5_Init+0xac>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000dec:	4818      	ldr	r0, [pc, #96]	; (8000e50 <MX_TIM5_Init+0xac>)
 8000dee:	f002 fe98 	bl	8003b22 <HAL_TIM_PWM_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000df8:	f000 f9c0 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e04:	f107 0320 	add.w	r3, r7, #32
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4811      	ldr	r0, [pc, #68]	; (8000e50 <MX_TIM5_Init+0xac>)
 8000e0c:	f003 fa90 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000e16:	f000 f9b1 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e1a:	2360      	movs	r3, #96	; 0x60
 8000e1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e2a:	1d3b      	adds	r3, r7, #4
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4807      	ldr	r0, [pc, #28]	; (8000e50 <MX_TIM5_Init+0xac>)
 8000e32:	f002 ff6b 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000e3c:	f000 f99e 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <MX_TIM5_Init+0xac>)
 8000e42:	f000 fcbd 	bl	80017c0 <HAL_TIM_MspPostInit>

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000034c 	.word	0x2000034c
 8000e54:	40000c00 	.word	0x40000c00

08000e58 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
 8000e6c:	615a      	str	r2, [r3, #20]
 8000e6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000e70:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <MX_TIM13_Init+0x94>)
 8000e72:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <MX_TIM13_Init+0x98>)
 8000e74:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <MX_TIM13_Init+0x94>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <MX_TIM13_Init+0x94>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000e82:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <MX_TIM13_Init+0x94>)
 8000e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e88:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <MX_TIM13_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <MX_TIM13_Init+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000e96:	4815      	ldr	r0, [pc, #84]	; (8000eec <MX_TIM13_Init+0x94>)
 8000e98:	f002 fdf4 	bl	8003a84 <HAL_TIM_Base_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000ea2:	f000 f96b 	bl	800117c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000ea6:	4811      	ldr	r0, [pc, #68]	; (8000eec <MX_TIM13_Init+0x94>)
 8000ea8:	f002 fe3b 	bl	8003b22 <HAL_TIM_PWM_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000eb2:	f000 f963 	bl	800117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb6:	2360      	movs	r3, #96	; 0x60
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM13_Init+0x94>)
 8000ece:	f002 ff1d 	bl	8003d0c <HAL_TIM_PWM_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000ed8:	f000 f950 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <MX_TIM13_Init+0x94>)
 8000ede:	f000 fc6f 	bl	80017c0 <HAL_TIM_MspPostInit>

}
 8000ee2:	bf00      	nop
 8000ee4:	3720      	adds	r7, #32
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000394 	.word	0x20000394
 8000ef0:	40001c00 	.word	0x40001c00

08000ef4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef8:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000efa:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <MX_USART2_UART_Init+0x50>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f18:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART2_UART_Init+0x4c>)
 8000f2c:	f003 fa7c 	bl	8004428 <HAL_UART_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f36:	f000 f921 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	200003dc 	.word	0x200003dc
 8000f44:	40004400 	.word	0x40004400

08000f48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_USART6_UART_Init+0x50>)
 8000f50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000f58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5a:	4b0e      	ldr	r3, [pc, #56]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000f7e:	4805      	ldr	r0, [pc, #20]	; (8000f94 <MX_USART6_UART_Init+0x4c>)
 8000f80:	f003 fa52 	bl	8004428 <HAL_UART_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000f8a:	f000 f8f7 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000420 	.word	0x20000420
 8000f98:	40011400 	.word	0x40011400

08000f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]
 8000fae:	60da      	str	r2, [r3, #12]
 8000fb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	4b64      	ldr	r3, [pc, #400]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a63      	ldr	r2, [pc, #396]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b61      	ldr	r3, [pc, #388]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	613b      	str	r3, [r7, #16]
 8000fcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a5c      	ldr	r2, [pc, #368]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8000fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	4b56      	ldr	r3, [pc, #344]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a55      	ldr	r2, [pc, #340]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b53      	ldr	r3, [pc, #332]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <MX_GPIO_Init+0x1ac>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a4e      	ldr	r2, [pc, #312]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b48      	ldr	r3, [pc, #288]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a47      	ldr	r2, [pc, #284]	; (8001148 <MX_GPIO_Init+0x1ac>)
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b45      	ldr	r3, [pc, #276]	; (8001148 <MX_GPIO_Init+0x1ac>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 800103e:	2200      	movs	r2, #0
 8001040:	f24d 0107 	movw	r1, #53255	; 0xd007
 8001044:	4841      	ldr	r0, [pc, #260]	; (800114c <MX_GPIO_Init+0x1b0>)
 8001046:	f001 fadf 	bl	8002608 <HAL_GPIO_WritePin>
                          |AD_CS3_Pin|AD_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_CS1_Pin|LED_LE_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8001050:	483f      	ldr	r0, [pc, #252]	; (8001150 <MX_GPIO_Init+0x1b4>)
 8001052:	f001 fad9 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 800105c:	483d      	ldr	r0, [pc, #244]	; (8001154 <MX_GPIO_Init+0x1b8>)
 800105e:	f001 fad3 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2104      	movs	r1, #4
 8001066:	483c      	ldr	r0, [pc, #240]	; (8001158 <MX_GPIO_Init+0x1bc>)
 8001068:	f001 face 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800106c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001072:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	4833      	ldr	r0, [pc, #204]	; (8001150 <MX_GPIO_Init+0x1b4>)
 8001084:	f001 f92c 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_PWR_FB_Pin */
  GPIO_InitStruct.Pin = DRV_PWR_FB_Pin;
 8001088:	2310      	movs	r3, #16
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_PWR_FB_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	482d      	ldr	r0, [pc, #180]	; (8001150 <MX_GPIO_Init+0x1b4>)
 800109c:	f001 f920 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_XSDN_36_Pin ToF_XSDN_25_Pin ToF_XSDN_14_Pin AD_CS4_Pin
                           AD_CS3_Pin AD_CS2_Pin */
  GPIO_InitStruct.Pin = ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 80010a0:	f24d 0307 	movw	r3, #53255	; 0xd007
 80010a4:	617b      	str	r3, [r7, #20]
                          |AD_CS3_Pin|AD_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4824      	ldr	r0, [pc, #144]	; (800114c <MX_GPIO_Init+0x1b0>)
 80010ba:	f001 f911 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_CS1_Pin LED_LE_Pin */
  GPIO_InitStruct.Pin = AD_CS1_Pin|LED_LE_Pin;
 80010be:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	481e      	ldr	r0, [pc, #120]	; (8001150 <MX_GPIO_Init+0x1b4>)
 80010d8:	f001 f902 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INF_LE_Pin INF_OE_Pin DRV_EN_Pin */
  GPIO_InitStruct.Pin = INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin;
 80010dc:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4817      	ldr	r0, [pc, #92]	; (8001154 <MX_GPIO_Init+0x1b8>)
 80010f6:	f001 f8f3 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_FB_Pin */
  GPIO_InitStruct.Pin = DRV_EN_FB_Pin;
 80010fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_EN_FB_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_GPIO_Init+0x1b8>)
 8001110:	f001 f8e6 	bl	80022e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_OE_Pin;
 8001114:	2304      	movs	r3, #4
 8001116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OE_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <MX_GPIO_Init+0x1bc>)
 800112c:	f001 f8d8 	bl	80022e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2028      	movs	r0, #40	; 0x28
 8001136:	f001 f89c 	bl	8002272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113a:	2028      	movs	r0, #40	; 0x28
 800113c:	f001 f8b5 	bl	80022aa <HAL_NVIC_EnableIRQ>

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020400 	.word	0x40020400
 8001150:	40020800 	.word	0x40020800
 8001154:	40020000 	.word	0x40020000
 8001158:	40020c00 	.word	0x40020c00

0800115c <HAL_GPIO_EXTI_Callback>:
//{
//	  BTMessageFlag = true;
//	  BT_ReceiveMsg(&huart2, BT_received_msg);
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
	buttonMessageFlag = true;
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001168:	2201      	movs	r2, #1
 800116a:	701a      	strb	r2, [r3, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	20000464 	.word	0x20000464

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <HAL_MspInit+0x4c>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <HAL_MspInit+0x4c>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800119c:	6453      	str	r3, [r2, #68]	; 0x44
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <HAL_MspInit+0x4c>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <HAL_MspInit+0x4c>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <HAL_MspInit+0x4c>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <HAL_MspInit+0x4c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011c6:	2007      	movs	r0, #7
 80011c8:	f001 f848 	bl	800225c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800

080011d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a17      	ldr	r2, [pc, #92]	; (8001254 <HAL_ADC_MspInit+0x7c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d127      	bne.n	800124a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_ADC_MspInit+0x80>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	4a15      	ldr	r2, [pc, #84]	; (8001258 <HAL_ADC_MspInit+0x80>)
 8001204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001208:	6453      	str	r3, [r2, #68]	; 0x44
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_ADC_MspInit+0x80>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_ADC_MspInit+0x80>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_ADC_MspInit+0x80>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_ADC_MspInit+0x80>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IMotor_Pin|UBatt_Pin;
 8001232:	2312      	movs	r3, #18
 8001234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <HAL_ADC_MspInit+0x84>)
 8001246:	f001 f84b 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	; 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40012000 	.word	0x40012000
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000

08001260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08e      	sub	sp, #56	; 0x38
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a5c      	ldr	r2, [pc, #368]	; (80013f0 <HAL_I2C_MspInit+0x190>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d12d      	bne.n	80012de <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	623b      	str	r3, [r7, #32]
 8001286:	4b5b      	ldr	r3, [pc, #364]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a5a      	ldr	r2, [pc, #360]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b58      	ldr	r3, [pc, #352]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	623b      	str	r3, [r7, #32]
 800129c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800129e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a4:	2312      	movs	r3, #18
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012b0:	2304      	movs	r3, #4
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	484f      	ldr	r0, [pc, #316]	; (80013f8 <HAL_I2C_MspInit+0x198>)
 80012bc:	f001 f810 	bl	80022e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
 80012c4:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	4a4a      	ldr	r2, [pc, #296]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 80012ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ce:	6413      	str	r3, [r2, #64]	; 0x40
 80012d0:	4b48      	ldr	r3, [pc, #288]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80012dc:	e083      	b.n	80013e6 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a46      	ldr	r2, [pc, #280]	; (80013fc <HAL_I2C_MspInit+0x19c>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d12d      	bne.n	8001344 <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	4b41      	ldr	r3, [pc, #260]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	4a40      	ldr	r2, [pc, #256]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	6313      	str	r3, [r2, #48]	; 0x30
 80012f8:	4b3e      	ldr	r3, [pc, #248]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 8001304:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800130a:	2312      	movs	r3, #18
 800130c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001316:	2304      	movs	r3, #4
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131e:	4619      	mov	r1, r3
 8001320:	4835      	ldr	r0, [pc, #212]	; (80013f8 <HAL_I2C_MspInit+0x198>)
 8001322:	f000 ffdd 	bl	80022e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	4b32      	ldr	r3, [pc, #200]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a31      	ldr	r2, [pc, #196]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 8001330:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b2f      	ldr	r3, [pc, #188]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697b      	ldr	r3, [r7, #20]
}
 8001342:	e050      	b.n	80013e6 <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a2d      	ldr	r2, [pc, #180]	; (8001400 <HAL_I2C_MspInit+0x1a0>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d14b      	bne.n	80013e6 <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b28      	ldr	r3, [pc, #160]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a27      	ldr	r2, [pc, #156]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b21      	ldr	r3, [pc, #132]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a20      	ldr	r2, [pc, #128]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001386:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138c:	2312      	movs	r3, #18
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001398:	2304      	movs	r3, #4
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	4818      	ldr	r0, [pc, #96]	; (8001404 <HAL_I2C_MspInit+0x1a4>)
 80013a4:	f000 ff9c 	bl	80022e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ae:	2312      	movs	r3, #18
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013ba:	2304      	movs	r3, #4
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	4810      	ldr	r0, [pc, #64]	; (8001408 <HAL_I2C_MspInit+0x1a8>)
 80013c6:	f000 ff8b 	bl	80022e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	4a08      	ldr	r2, [pc, #32]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 80013d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013d8:	6413      	str	r3, [r2, #64]	; 0x40
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_I2C_MspInit+0x194>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
}
 80013e6:	bf00      	nop
 80013e8:	3738      	adds	r7, #56	; 0x38
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40005400 	.word	0x40005400
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020400 	.word	0x40020400
 80013fc:	40005800 	.word	0x40005800
 8001400:	40005c00 	.word	0x40005c00
 8001404:	40020800 	.word	0x40020800
 8001408:	40020000 	.word	0x40020000

0800140c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b090      	sub	sp, #64	; 0x40
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a72      	ldr	r2, [pc, #456]	; (80015f4 <HAL_SPI_MspInit+0x1e8>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d14a      	bne.n	80014c4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
 8001432:	4b71      	ldr	r3, [pc, #452]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001436:	4a70      	ldr	r2, [pc, #448]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 8001438:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800143c:	6453      	str	r3, [r2, #68]	; 0x44
 800143e:	4b6e      	ldr	r3, [pc, #440]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001446:	62bb      	str	r3, [r7, #40]	; 0x28
 8001448:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
 800144e:	4b6a      	ldr	r3, [pc, #424]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a69      	ldr	r2, [pc, #420]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b67      	ldr	r3, [pc, #412]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
 800146a:	4b63      	ldr	r3, [pc, #396]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a62      	ldr	r2, [pc, #392]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b60      	ldr	r3, [pc, #384]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001482:	23a0      	movs	r3, #160	; 0xa0
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001492:	2305      	movs	r3, #5
 8001494:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149a:	4619      	mov	r1, r3
 800149c:	4857      	ldr	r0, [pc, #348]	; (80015fc <HAL_SPI_MspInit+0x1f0>)
 800149e:	f000 ff1f 	bl	80022e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014a2:	2310      	movs	r3, #16
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b2:	2305      	movs	r3, #5
 80014b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ba:	4619      	mov	r1, r3
 80014bc:	4850      	ldr	r0, [pc, #320]	; (8001600 <HAL_SPI_MspInit+0x1f4>)
 80014be:	f000 ff0f 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014c2:	e092      	b.n	80015ea <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a4e      	ldr	r2, [pc, #312]	; (8001604 <HAL_SPI_MspInit+0x1f8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d15b      	bne.n	8001586 <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	61fb      	str	r3, [r7, #28]
 80014d2:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a48      	ldr	r2, [pc, #288]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b46      	ldr	r3, [pc, #280]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	4b42      	ldr	r3, [pc, #264]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a41      	ldr	r2, [pc, #260]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	61bb      	str	r3, [r7, #24]
 8001504:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	4b3b      	ldr	r3, [pc, #236]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a3a      	ldr	r2, [pc, #232]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001522:	2302      	movs	r3, #2
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001532:	2307      	movs	r3, #7
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800153a:	4619      	mov	r1, r3
 800153c:	4832      	ldr	r0, [pc, #200]	; (8001608 <HAL_SPI_MspInit+0x1fc>)
 800153e:	f000 fecf 	bl	80022e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001542:	2304      	movs	r3, #4
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001552:	2305      	movs	r3, #5
 8001554:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155a:	4619      	mov	r1, r3
 800155c:	482a      	ldr	r0, [pc, #168]	; (8001608 <HAL_SPI_MspInit+0x1fc>)
 800155e:	f000 febf 	bl	80022e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001574:	2305      	movs	r3, #5
 8001576:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157c:	4619      	mov	r1, r3
 800157e:	4820      	ldr	r0, [pc, #128]	; (8001600 <HAL_SPI_MspInit+0x1f4>)
 8001580:	f000 feae 	bl	80022e0 <HAL_GPIO_Init>
}
 8001584:	e031      	b.n	80015ea <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a20      	ldr	r2, [pc, #128]	; (800160c <HAL_SPI_MspInit+0x200>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d12c      	bne.n	80015ea <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 800159a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159e:	6413      	str	r3, [r2, #64]	; 0x40
 80015a0:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	2300      	movs	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6313      	str	r3, [r2, #48]	; 0x30
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_SPI_MspInit+0x1ec>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80015c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015da:	2306      	movs	r3, #6
 80015dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e2:	4619      	mov	r1, r3
 80015e4:	4808      	ldr	r0, [pc, #32]	; (8001608 <HAL_SPI_MspInit+0x1fc>)
 80015e6:	f000 fe7b 	bl	80022e0 <HAL_GPIO_Init>
}
 80015ea:	bf00      	nop
 80015ec:	3740      	adds	r7, #64	; 0x40
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40013000 	.word	0x40013000
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000
 8001600:	40020400 	.word	0x40020400
 8001604:	40003800 	.word	0x40003800
 8001608:	40020800 	.word	0x40020800
 800160c:	40003c00 	.word	0x40003c00

08001610 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001630:	d14b      	bne.n	80016ca <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	4a26      	ldr	r2, [pc, #152]	; (80016d4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6413      	str	r3, [r2, #64]	; 0x40
 8001642:	4b24      	ldr	r3, [pc, #144]	; (80016d4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b19      	ldr	r3, [pc, #100]	; (80016d4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin;
 8001686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001698:	2301      	movs	r3, #1
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <HAL_TIM_Encoder_MspInit+0xc8>)
 80016a4:	f000 fe1c 	bl	80022e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_B_Pin;
 80016a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b6:	2300      	movs	r3, #0
 80016b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ba:	2301      	movs	r3, #1
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_TIM_Encoder_MspInit+0xcc>)
 80016c6:	f000 fe0b 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	; 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1f      	ldr	r2, [pc, #124]	; (800176c <HAL_TIM_PWM_MspInit+0x8c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10e      	bne.n	8001710 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HAL_TIM_PWM_MspInit+0x90>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HAL_TIM_PWM_MspInit+0x90>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HAL_TIM_PWM_MspInit+0x90>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800170e:	e026      	b.n	800175e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <HAL_TIM_PWM_MspInit+0x94>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d10e      	bne.n	8001738 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_TIM_PWM_MspInit+0x90>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_TIM_PWM_MspInit+0x90>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_TIM_PWM_MspInit+0x90>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
}
 8001736:	e012      	b.n	800175e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0e      	ldr	r2, [pc, #56]	; (8001778 <HAL_TIM_PWM_MspInit+0x98>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d10d      	bne.n	800175e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_TIM_PWM_MspInit+0x90>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_TIM_PWM_MspInit+0x90>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6413      	str	r3, [r2, #64]	; 0x40
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_TIM_PWM_MspInit+0x90>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	bf00      	nop
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40000400 	.word	0x40000400
 8001770:	40023800 	.word	0x40023800
 8001774:	40000800 	.word	0x40000800
 8001778:	40000c00 	.word	0x40000c00

0800177c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <HAL_TIM_Base_MspInit+0x3c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d10d      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_TIM_Base_MspInit+0x40>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a09      	ldr	r2, [pc, #36]	; (80017bc <HAL_TIM_Base_MspInit+0x40>)
 8001798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_TIM_Base_MspInit+0x40>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40001c00 	.word	0x40001c00
 80017bc:	40023800 	.word	0x40023800

080017c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08c      	sub	sp, #48	; 0x30
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 031c 	add.w	r3, r7, #28
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a48      	ldr	r2, [pc, #288]	; (8001900 <HAL_TIM_MspPostInit+0x140>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d11e      	bne.n	8001820 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	61bb      	str	r3, [r7, #24]
 80017e6:	4b47      	ldr	r3, [pc, #284]	; (8001904 <HAL_TIM_MspPostInit+0x144>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a46      	ldr	r2, [pc, #280]	; (8001904 <HAL_TIM_MspPostInit+0x144>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b44      	ldr	r3, [pc, #272]	; (8001904 <HAL_TIM_MspPostInit+0x144>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_PMW1_Pin;
 80017fe:	2320      	movs	r3, #32
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800180e:	2302      	movs	r3, #2
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PMW1_GPIO_Port, &GPIO_InitStruct);
 8001812:	f107 031c 	add.w	r3, r7, #28
 8001816:	4619      	mov	r1, r3
 8001818:	483b      	ldr	r0, [pc, #236]	; (8001908 <HAL_TIM_MspPostInit+0x148>)
 800181a:	f000 fd61 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 800181e:	e06a      	b.n	80018f6 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a39      	ldr	r2, [pc, #228]	; (800190c <HAL_TIM_MspPostInit+0x14c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d11e      	bne.n	8001868 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <HAL_TIM_MspPostInit+0x144>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a34      	ldr	r2, [pc, #208]	; (8001904 <HAL_TIM_MspPostInit+0x144>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_TIM_MspPostInit+0x144>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DRV_PWM2_Pin;
 8001846:	2340      	movs	r3, #64	; 0x40
 8001848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001856:	2302      	movs	r3, #2
 8001858:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PWM2_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	4829      	ldr	r0, [pc, #164]	; (8001908 <HAL_TIM_MspPostInit+0x148>)
 8001862:	f000 fd3d 	bl	80022e0 <HAL_GPIO_Init>
}
 8001866:	e046      	b.n	80018f6 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a28      	ldr	r2, [pc, #160]	; (8001910 <HAL_TIM_MspPostInit+0x150>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d11e      	bne.n	80018b0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b23      	ldr	r3, [pc, #140]	; (8001904 <HAL_TIM_MspPostInit+0x144>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a22      	ldr	r2, [pc, #136]	; (8001904 <HAL_TIM_MspPostInit+0x144>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <HAL_TIM_MspPostInit+0x144>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM2_Pin;
 800188e:	2301      	movs	r3, #1
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800189e:	2302      	movs	r3, #2
 80018a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM2_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	481a      	ldr	r0, [pc, #104]	; (8001914 <HAL_TIM_MspPostInit+0x154>)
 80018aa:	f000 fd19 	bl	80022e0 <HAL_GPIO_Init>
}
 80018ae:	e022      	b.n	80018f6 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM13)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a18      	ldr	r2, [pc, #96]	; (8001918 <HAL_TIM_MspPostInit+0x158>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d11d      	bne.n	80018f6 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <HAL_TIM_MspPostInit+0x144>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a10      	ldr	r2, [pc, #64]	; (8001904 <HAL_TIM_MspPostInit+0x144>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <HAL_TIM_MspPostInit+0x144>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM_Pin;
 80018d6:	2340      	movs	r3, #64	; 0x40
 80018d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80018e6:	2309      	movs	r3, #9
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4808      	ldr	r0, [pc, #32]	; (8001914 <HAL_TIM_MspPostInit+0x154>)
 80018f2:	f000 fcf5 	bl	80022e0 <HAL_GPIO_Init>
}
 80018f6:	bf00      	nop
 80018f8:	3730      	adds	r7, #48	; 0x30
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40000400 	.word	0x40000400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400
 800190c:	40000800 	.word	0x40000800
 8001910:	40000c00 	.word	0x40000c00
 8001914:	40020000 	.word	0x40020000
 8001918:	40001c00 	.word	0x40001c00

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a32      	ldr	r2, [pc, #200]	; (8001a04 <HAL_UART_MspInit+0xe8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12c      	bne.n	8001998 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	4b31      	ldr	r3, [pc, #196]	; (8001a08 <HAL_UART_MspInit+0xec>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	4a30      	ldr	r2, [pc, #192]	; (8001a08 <HAL_UART_MspInit+0xec>)
 8001948:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194c:	6413      	str	r3, [r2, #64]	; 0x40
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <HAL_UART_MspInit+0xec>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_UART_MspInit+0xec>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <HAL_UART_MspInit+0xec>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_UART_MspInit+0xec>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001976:	230c      	movs	r3, #12
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001986:	2307      	movs	r3, #7
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	481e      	ldr	r0, [pc, #120]	; (8001a0c <HAL_UART_MspInit+0xf0>)
 8001992:	f000 fca5 	bl	80022e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001996:	e030      	b.n	80019fa <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1c      	ldr	r2, [pc, #112]	; (8001a10 <HAL_UART_MspInit+0xf4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12b      	bne.n	80019fa <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <HAL_UART_MspInit+0xec>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a17      	ldr	r2, [pc, #92]	; (8001a08 <HAL_UART_MspInit+0xec>)
 80019ac:	f043 0320 	orr.w	r3, r3, #32
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <HAL_UART_MspInit+0xec>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_UART_MspInit+0xec>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a10      	ldr	r2, [pc, #64]	; (8001a08 <HAL_UART_MspInit+0xec>)
 80019c8:	f043 0304 	orr.w	r3, r3, #4
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <HAL_UART_MspInit+0xec>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|RADIO_RX_Pin;
 80019da:	23c0      	movs	r3, #192	; 0xc0
 80019dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019ea:	2308      	movs	r3, #8
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	4807      	ldr	r0, [pc, #28]	; (8001a14 <HAL_UART_MspInit+0xf8>)
 80019f6:	f000 fc73 	bl	80022e0 <HAL_GPIO_Init>
}
 80019fa:	bf00      	nop
 80019fc:	3730      	adds	r7, #48	; 0x30
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40004400 	.word	0x40004400
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40011400 	.word	0x40011400
 8001a14:	40020800 	.word	0x40020800

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <NMI_Handler+0x4>

08001a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <HardFault_Handler+0x4>

08001a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <MemManage_Handler+0x4>

08001a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <BusFault_Handler+0x4>

08001a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <UsageFault_Handler+0x4>

08001a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a64:	f000 f898 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a74:	f000 fde2 	bl	800263c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <SystemInit+0x20>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <SystemInit+0x20>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa4:	480d      	ldr	r0, [pc, #52]	; (8001adc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aa6:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001abc:	4c0b      	ldr	r4, [pc, #44]	; (8001aec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aca:	f7ff ffd7 	bl	8001a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ace:	f002 ff6d 	bl	80049ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad2:	f7fe fe19 	bl	8000708 <main>
  bx  lr    
 8001ad6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001ae4:	08004a4c 	.word	0x08004a4c
  ldr r2, =_sbss
 8001ae8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001aec:	2000046c 	.word	0x2000046c

08001af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC_IRQHandler>
	...

08001af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <HAL_Init+0x40>)
 8001afe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_Init+0x40>)
 8001b0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <HAL_Init+0x40>)
 8001b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 fb9d 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f808 	bl	8001b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff fb2e 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023c00 	.word	0x40023c00

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_InitTick+0x54>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <HAL_InitTick+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fbb5 	bl	80022c6 <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f000 fb7d 	bl	8002272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <HAL_InitTick+0x5c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	20000008 	.word	0x20000008
 8001b94:	20000004 	.word	0x20000004

08001b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <HAL_IncTick+0x20>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_IncTick+0x24>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_IncTick+0x24>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20000468 	.word	0x20000468

08001bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <HAL_GetTick+0x14>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000468 	.word	0x20000468

08001bd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e033      	b.n	8001c56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff faee 	bl	80011d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d118      	bne.n	8001c48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c1e:	f023 0302 	bic.w	r3, r3, #2
 8001c22:	f043 0202 	orr.w	r2, r3, #2
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f94a 	bl	8001ec4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f023 0303 	bic.w	r3, r3, #3
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
 8001c46:	e001      	b.n	8001c4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1c>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e113      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x244>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	d925      	bls.n	8001cd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68d9      	ldr	r1, [r3, #12]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3b1e      	subs	r3, #30
 8001ca2:	2207      	movs	r2, #7
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43da      	mvns	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	400a      	ands	r2, r1
 8001cb0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68d9      	ldr	r1, [r3, #12]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4403      	add	r3, r0
 8001cca:	3b1e      	subs	r3, #30
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	e022      	b.n	8001d1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6919      	ldr	r1, [r3, #16]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	2207      	movs	r2, #7
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43da      	mvns	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6919      	ldr	r1, [r3, #16]
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4403      	add	r3, r0
 8001d14:	409a      	lsls	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d824      	bhi.n	8001d70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4613      	mov	r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	3b05      	subs	r3, #5
 8001d38:	221f      	movs	r2, #31
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	400a      	ands	r2, r1
 8001d46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	4618      	mov	r0, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b05      	subs	r3, #5
 8001d62:	fa00 f203 	lsl.w	r2, r0, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d6e:	e04c      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b0c      	cmp	r3, #12
 8001d76:	d824      	bhi.n	8001dc2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	3b23      	subs	r3, #35	; 0x23
 8001d8a:	221f      	movs	r2, #31
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43da      	mvns	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	400a      	ands	r2, r1
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	3b23      	subs	r3, #35	; 0x23
 8001db4:	fa00 f203 	lsl.w	r2, r0, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc0:	e023      	b.n	8001e0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3b41      	subs	r3, #65	; 0x41
 8001dd4:	221f      	movs	r2, #31
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	400a      	ands	r2, r1
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	4618      	mov	r0, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3b41      	subs	r3, #65	; 0x41
 8001dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e0a:	4b29      	ldr	r3, [pc, #164]	; (8001eb0 <HAL_ADC_ConfigChannel+0x250>)
 8001e0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a28      	ldr	r2, [pc, #160]	; (8001eb4 <HAL_ADC_ConfigChannel+0x254>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d10f      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1d8>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b12      	cmp	r3, #18
 8001e1e:	d10b      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1d      	ldr	r2, [pc, #116]	; (8001eb4 <HAL_ADC_ConfigChannel+0x254>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d12b      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x23a>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <HAL_ADC_ConfigChannel+0x258>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d003      	beq.n	8001e54 <HAL_ADC_ConfigChannel+0x1f4>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b11      	cmp	r3, #17
 8001e52:	d122      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <HAL_ADC_ConfigChannel+0x258>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d111      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <HAL_ADC_ConfigChannel+0x25c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <HAL_ADC_ConfigChannel+0x260>)
 8001e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e80:	0c9a      	lsrs	r2, r3, #18
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e8c:	e002      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f9      	bne.n	8001e8e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	40012300 	.word	0x40012300
 8001eb4:	40012000 	.word	0x40012000
 8001eb8:	10000012 	.word	0x10000012
 8001ebc:	20000000 	.word	0x20000000
 8001ec0:	431bde83 	.word	0x431bde83

08001ec4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ecc:	4b79      	ldr	r3, [pc, #484]	; (80020b4 <ADC_Init+0x1f0>)
 8001ece:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ef8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	021a      	lsls	r2, r3, #8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6859      	ldr	r1, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6899      	ldr	r1, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	4a58      	ldr	r2, [pc, #352]	; (80020b8 <ADC_Init+0x1f4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d022      	beq.n	8001fa2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6899      	ldr	r1, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6899      	ldr	r1, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	e00f      	b.n	8001fc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689a      	ldr	r2, [r3, #8]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0202 	bic.w	r2, r2, #2
 8001fd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6899      	ldr	r1, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7e1b      	ldrb	r3, [r3, #24]
 8001fdc:	005a      	lsls	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01b      	beq.n	8002028 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ffe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800200e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	3b01      	subs	r3, #1
 800201c:	035a      	lsls	r2, r3, #13
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	e007      	b.n	8002038 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002036:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002046:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	3b01      	subs	r3, #1
 8002054:	051a      	lsls	r2, r3, #20
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800206c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6899      	ldr	r1, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800207a:	025a      	lsls	r2, r3, #9
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002092:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6899      	ldr	r1, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	029a      	lsls	r2, r3, #10
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	430a      	orrs	r2, r1
 80020a6:	609a      	str	r2, [r3, #8]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	40012300 	.word	0x40012300
 80020b8:	0f000001 	.word	0x0f000001

080020bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <__NVIC_GetPriorityGrouping+0x18>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0307 	and.w	r3, r3, #7
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	db0b      	blt.n	800214a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4907      	ldr	r1, [pc, #28]	; (8002158 <__NVIC_EnableIRQ+0x38>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2001      	movs	r0, #1
 8002142:	fa00 f202 	lsl.w	r2, r0, r2
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002228:	d301      	bcc.n	800222e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222a:	2301      	movs	r3, #1
 800222c:	e00f      	b.n	800224e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <SysTick_Config+0x40>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f7ff ff8e 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <SysTick_Config+0x40>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <SysTick_Config+0x40>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff29 	bl	80020bc <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002284:	f7ff ff3e 	bl	8002104 <__NVIC_GetPriorityGrouping>
 8002288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ff8e 	bl	80021b0 <NVIC_EncodePriority>
 8002294:	4602      	mov	r2, r0
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff5d 	bl	800215c <__NVIC_SetPriority>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff31 	bl	8002120 <__NVIC_EnableIRQ>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffa2 	bl	8002218 <SysTick_Config>
 80022d4:	4603      	mov	r3, r0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	; 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
 80022fa:	e165      	b.n	80025c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	f040 8154 	bne.w	80025c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d005      	beq.n	8002332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800232e:	2b02      	cmp	r3, #2
 8002330:	d130      	bne.n	8002394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2203      	movs	r2, #3
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002368:	2201      	movs	r2, #1
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 0201 	and.w	r2, r3, #1
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4313      	orrs	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b03      	cmp	r3, #3
 800239e:	d017      	beq.n	80023d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d123      	bne.n	8002424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	69b9      	ldr	r1, [r7, #24]
 8002420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80ae 	beq.w	80025c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <HAL_GPIO_Init+0x300>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	4a5c      	ldr	r2, [pc, #368]	; (80025e0 <HAL_GPIO_Init+0x300>)
 8002470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002474:	6453      	str	r3, [r2, #68]	; 0x44
 8002476:	4b5a      	ldr	r3, [pc, #360]	; (80025e0 <HAL_GPIO_Init+0x300>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002482:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <HAL_GPIO_Init+0x304>)
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	3302      	adds	r3, #2
 800248a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	220f      	movs	r2, #15
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4f      	ldr	r2, [pc, #316]	; (80025e8 <HAL_GPIO_Init+0x308>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d025      	beq.n	80024fa <HAL_GPIO_Init+0x21a>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4e      	ldr	r2, [pc, #312]	; (80025ec <HAL_GPIO_Init+0x30c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d01f      	beq.n	80024f6 <HAL_GPIO_Init+0x216>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4d      	ldr	r2, [pc, #308]	; (80025f0 <HAL_GPIO_Init+0x310>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d019      	beq.n	80024f2 <HAL_GPIO_Init+0x212>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4c      	ldr	r2, [pc, #304]	; (80025f4 <HAL_GPIO_Init+0x314>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_GPIO_Init+0x20e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4b      	ldr	r2, [pc, #300]	; (80025f8 <HAL_GPIO_Init+0x318>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d00d      	beq.n	80024ea <HAL_GPIO_Init+0x20a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4a      	ldr	r2, [pc, #296]	; (80025fc <HAL_GPIO_Init+0x31c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <HAL_GPIO_Init+0x206>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a49      	ldr	r2, [pc, #292]	; (8002600 <HAL_GPIO_Init+0x320>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d101      	bne.n	80024e2 <HAL_GPIO_Init+0x202>
 80024de:	2306      	movs	r3, #6
 80024e0:	e00c      	b.n	80024fc <HAL_GPIO_Init+0x21c>
 80024e2:	2307      	movs	r3, #7
 80024e4:	e00a      	b.n	80024fc <HAL_GPIO_Init+0x21c>
 80024e6:	2305      	movs	r3, #5
 80024e8:	e008      	b.n	80024fc <HAL_GPIO_Init+0x21c>
 80024ea:	2304      	movs	r3, #4
 80024ec:	e006      	b.n	80024fc <HAL_GPIO_Init+0x21c>
 80024ee:	2303      	movs	r3, #3
 80024f0:	e004      	b.n	80024fc <HAL_GPIO_Init+0x21c>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_Init+0x21c>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_GPIO_Init+0x21c>
 80024fa:	2300      	movs	r3, #0
 80024fc:	69fa      	ldr	r2, [r7, #28]
 80024fe:	f002 0203 	and.w	r2, r2, #3
 8002502:	0092      	lsls	r2, r2, #2
 8002504:	4093      	lsls	r3, r2
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250c:	4935      	ldr	r1, [pc, #212]	; (80025e4 <HAL_GPIO_Init+0x304>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800251a:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_GPIO_Init+0x324>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800253e:	4a31      	ldr	r2, [pc, #196]	; (8002604 <HAL_GPIO_Init+0x324>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002544:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <HAL_GPIO_Init+0x324>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002568:	4a26      	ldr	r2, [pc, #152]	; (8002604 <HAL_GPIO_Init+0x324>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800256e:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_GPIO_Init+0x324>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002592:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <HAL_GPIO_Init+0x324>)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002598:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <HAL_GPIO_Init+0x324>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025bc:	4a11      	ldr	r2, [pc, #68]	; (8002604 <HAL_GPIO_Init+0x324>)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3301      	adds	r3, #1
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	2b0f      	cmp	r3, #15
 80025cc:	f67f ae96 	bls.w	80022fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025d0:	bf00      	nop
 80025d2:	bf00      	nop
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40013800 	.word	0x40013800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40020400 	.word	0x40020400
 80025f0:	40020800 	.word	0x40020800
 80025f4:	40020c00 	.word	0x40020c00
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40021400 	.word	0x40021400
 8002600:	40021800 	.word	0x40021800
 8002604:	40013c00 	.word	0x40013c00

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	88fb      	ldrh	r3, [r7, #6]
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d006      	beq.n	8002660 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002652:	4a05      	ldr	r2, [pc, #20]	; (8002668 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fd7e 	bl	800115c <HAL_GPIO_EXTI_Callback>
  }
}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40013c00 	.word	0x40013c00

0800266c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e12b      	b.n	80028d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fde4 	bl	8001260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	; 0x24
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0201 	bic.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026d0:	f000 fa52 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 80026d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a81      	ldr	r2, [pc, #516]	; (80028e0 <HAL_I2C_Init+0x274>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d807      	bhi.n	80026f0 <HAL_I2C_Init+0x84>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4a80      	ldr	r2, [pc, #512]	; (80028e4 <HAL_I2C_Init+0x278>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	bf94      	ite	ls
 80026e8:	2301      	movls	r3, #1
 80026ea:	2300      	movhi	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e006      	b.n	80026fe <HAL_I2C_Init+0x92>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a7d      	ldr	r2, [pc, #500]	; (80028e8 <HAL_I2C_Init+0x27c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	bf94      	ite	ls
 80026f8:	2301      	movls	r3, #1
 80026fa:	2300      	movhi	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0e7      	b.n	80028d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	4a78      	ldr	r2, [pc, #480]	; (80028ec <HAL_I2C_Init+0x280>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0c9b      	lsrs	r3, r3, #18
 8002710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	430a      	orrs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a6a      	ldr	r2, [pc, #424]	; (80028e0 <HAL_I2C_Init+0x274>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d802      	bhi.n	8002740 <HAL_I2C_Init+0xd4>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	3301      	adds	r3, #1
 800273e:	e009      	b.n	8002754 <HAL_I2C_Init+0xe8>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	4a69      	ldr	r2, [pc, #420]	; (80028f0 <HAL_I2C_Init+0x284>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	3301      	adds	r3, #1
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	430b      	orrs	r3, r1
 800275a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002766:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	495c      	ldr	r1, [pc, #368]	; (80028e0 <HAL_I2C_Init+0x274>)
 8002770:	428b      	cmp	r3, r1
 8002772:	d819      	bhi.n	80027a8 <HAL_I2C_Init+0x13c>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	1e59      	subs	r1, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002782:	1c59      	adds	r1, r3, #1
 8002784:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002788:	400b      	ands	r3, r1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <HAL_I2C_Init+0x138>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	1e59      	subs	r1, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	fbb1 f3f3 	udiv	r3, r1, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a2:	e051      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 80027a4:	2304      	movs	r3, #4
 80027a6:	e04f      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d111      	bne.n	80027d4 <HAL_I2C_Init+0x168>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1e58      	subs	r0, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6859      	ldr	r1, [r3, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	440b      	add	r3, r1
 80027be:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf0c      	ite	eq
 80027cc:	2301      	moveq	r3, #1
 80027ce:	2300      	movne	r3, #0
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	e012      	b.n	80027fa <HAL_I2C_Init+0x18e>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	1e58      	subs	r0, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	0099      	lsls	r1, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Init+0x196>
 80027fe:	2301      	movs	r3, #1
 8002800:	e022      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10e      	bne.n	8002828 <HAL_I2C_Init+0x1bc>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	1e58      	subs	r0, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6859      	ldr	r1, [r3, #4]
 8002812:	460b      	mov	r3, r1
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	440b      	add	r3, r1
 8002818:	fbb0 f3f3 	udiv	r3, r0, r3
 800281c:	3301      	adds	r3, #1
 800281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002826:	e00f      	b.n	8002848 <HAL_I2C_Init+0x1dc>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1e58      	subs	r0, r3, #1
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6859      	ldr	r1, [r3, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	0099      	lsls	r1, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	fbb0 f3f3 	udiv	r3, r0, r3
 800283e:	3301      	adds	r3, #1
 8002840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002844:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002848:	6879      	ldr	r1, [r7, #4]
 800284a:	6809      	ldr	r1, [r1, #0]
 800284c:	4313      	orrs	r3, r2
 800284e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69da      	ldr	r2, [r3, #28]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6911      	ldr	r1, [r2, #16]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68d2      	ldr	r2, [r2, #12]
 8002882:	4311      	orrs	r1, r2
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	430b      	orrs	r3, r1
 800288a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	000186a0 	.word	0x000186a0
 80028e4:	001e847f 	.word	0x001e847f
 80028e8:	003d08ff 	.word	0x003d08ff
 80028ec:	431bde83 	.word	0x431bde83
 80028f0:	10624dd3 	.word	0x10624dd3

080028f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	603b      	str	r3, [r7, #0]
 8002902:	4b20      	ldr	r3, [pc, #128]	; (8002984 <HAL_PWREx_EnableOverDrive+0x90>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a1f      	ldr	r2, [pc, #124]	; (8002984 <HAL_PWREx_EnableOverDrive+0x90>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_PWREx_EnableOverDrive+0x90>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800291a:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <HAL_PWREx_EnableOverDrive+0x94>)
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002920:	f7ff f94e 	bl	8001bc0 <HAL_GetTick>
 8002924:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002926:	e009      	b.n	800293c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002928:	f7ff f94a 	bl	8001bc0 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002936:	d901      	bls.n	800293c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e01f      	b.n	800297c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800293c:	4b13      	ldr	r3, [pc, #76]	; (800298c <HAL_PWREx_EnableOverDrive+0x98>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002948:	d1ee      	bne.n	8002928 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_PWREx_EnableOverDrive+0x9c>)
 800294c:	2201      	movs	r2, #1
 800294e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002950:	f7ff f936 	bl	8001bc0 <HAL_GetTick>
 8002954:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002956:	e009      	b.n	800296c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002958:	f7ff f932 	bl	8001bc0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002966:	d901      	bls.n	800296c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e007      	b.n	800297c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <HAL_PWREx_EnableOverDrive+0x98>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002978:	d1ee      	bne.n	8002958 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40023800 	.word	0x40023800
 8002988:	420e0040 	.word	0x420e0040
 800298c:	40007000 	.word	0x40007000
 8002990:	420e0044 	.word	0x420e0044

08002994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0cc      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d90c      	bls.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b65      	ldr	r3, [pc, #404]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029be:	4b63      	ldr	r3, [pc, #396]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0b8      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d020      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e8:	4b59      	ldr	r3, [pc, #356]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a58      	ldr	r2, [pc, #352]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d005      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a00:	4b53      	ldr	r3, [pc, #332]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	4a52      	ldr	r2, [pc, #328]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	494d      	ldr	r1, [pc, #308]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d044      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d119      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e07f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d003      	beq.n	8002a52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e06f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	4b3b      	ldr	r3, [pc, #236]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e067      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4b37      	ldr	r3, [pc, #220]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4934      	ldr	r1, [pc, #208]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a84:	f7ff f89c 	bl	8001bc0 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7ff f898 	bl	8001bc0 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e04f      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b2b      	ldr	r3, [pc, #172]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 020c 	and.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1eb      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d20c      	bcs.n	8002adc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_RCC_ClockConfig+0x1b8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 030f 	and.w	r3, r3, #15
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e032      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d008      	beq.n	8002afa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4916      	ldr	r1, [pc, #88]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	490e      	ldr	r1, [pc, #56]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b1a:	f000 f855 	bl	8002bc8 <HAL_RCC_GetSysClockFreq>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	490a      	ldr	r1, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	5ccb      	ldrb	r3, [r1, r3]
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	4a09      	ldr	r2, [pc, #36]	; (8002b58 <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1c8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fe fffc 	bl	8001b38 <HAL_InitTick>

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023c00 	.word	0x40023c00
 8002b50:	40023800 	.word	0x40023800
 8002b54:	08004a24 	.word	0x08004a24
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	20000004 	.word	0x20000004

08002b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000000 	.word	0x20000000

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b7c:	f7ff fff0 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	0a9b      	lsrs	r3, r3, #10
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	08004a34 	.word	0x08004a34

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ba4:	f7ff ffdc 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0b5b      	lsrs	r3, r3, #13
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	; (8002bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	08004a34 	.word	0x08004a34

08002bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bcc:	b0ae      	sub	sp, #184	; 0xb8
 8002bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bee:	4bcb      	ldr	r3, [pc, #812]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	f200 8206 	bhi.w	8003008 <HAL_RCC_GetSysClockFreq+0x440>
 8002bfc:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002c39 	.word	0x08002c39
 8002c08:	08003009 	.word	0x08003009
 8002c0c:	08003009 	.word	0x08003009
 8002c10:	08003009 	.word	0x08003009
 8002c14:	08002c41 	.word	0x08002c41
 8002c18:	08003009 	.word	0x08003009
 8002c1c:	08003009 	.word	0x08003009
 8002c20:	08003009 	.word	0x08003009
 8002c24:	08002c49 	.word	0x08002c49
 8002c28:	08003009 	.word	0x08003009
 8002c2c:	08003009 	.word	0x08003009
 8002c30:	08003009 	.word	0x08003009
 8002c34:	08002e39 	.word	0x08002e39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c38:	4bb9      	ldr	r3, [pc, #740]	; (8002f20 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002c3e:	e1e7      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c40:	4bb8      	ldr	r3, [pc, #736]	; (8002f24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c46:	e1e3      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c48:	4bb4      	ldr	r3, [pc, #720]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c54:	4bb1      	ldr	r3, [pc, #708]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d071      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c60:	4bae      	ldr	r3, [pc, #696]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	099b      	lsrs	r3, r3, #6
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c6c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002c70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c86:	4622      	mov	r2, r4
 8002c88:	462b      	mov	r3, r5
 8002c8a:	f04f 0000 	mov.w	r0, #0
 8002c8e:	f04f 0100 	mov.w	r1, #0
 8002c92:	0159      	lsls	r1, r3, #5
 8002c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c98:	0150      	lsls	r0, r2, #5
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	1a51      	subs	r1, r2, r1
 8002ca2:	6439      	str	r1, [r7, #64]	; 0x40
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	eb63 0301 	sbc.w	r3, r3, r1
 8002caa:	647b      	str	r3, [r7, #68]	; 0x44
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002cb8:	4649      	mov	r1, r9
 8002cba:	018b      	lsls	r3, r1, #6
 8002cbc:	4641      	mov	r1, r8
 8002cbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	018a      	lsls	r2, r1, #6
 8002cc6:	4641      	mov	r1, r8
 8002cc8:	1a51      	subs	r1, r2, r1
 8002cca:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ccc:	4649      	mov	r1, r9
 8002cce:	eb63 0301 	sbc.w	r3, r3, r1
 8002cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	00cb      	lsls	r3, r1, #3
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cea:	4641      	mov	r1, r8
 8002cec:	00ca      	lsls	r2, r1, #3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	189b      	adds	r3, r3, r2
 8002cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cfa:	462b      	mov	r3, r5
 8002cfc:	460a      	mov	r2, r1
 8002cfe:	eb42 0303 	adc.w	r3, r2, r3
 8002d02:	637b      	str	r3, [r7, #52]	; 0x34
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d10:	4629      	mov	r1, r5
 8002d12:	024b      	lsls	r3, r1, #9
 8002d14:	4621      	mov	r1, r4
 8002d16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	024a      	lsls	r2, r1, #9
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d26:	2200      	movs	r2, #0
 8002d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002d34:	f7fd fa66 	bl	8000204 <__aeabi_uldivmod>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d42:	e067      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d44:	4b75      	ldr	r3, [pc, #468]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	099b      	lsrs	r3, r3, #6
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d50:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d5e:	2300      	movs	r3, #0
 8002d60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002d66:	4622      	mov	r2, r4
 8002d68:	462b      	mov	r3, r5
 8002d6a:	f04f 0000 	mov.w	r0, #0
 8002d6e:	f04f 0100 	mov.w	r1, #0
 8002d72:	0159      	lsls	r1, r3, #5
 8002d74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d78:	0150      	lsls	r0, r2, #5
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4621      	mov	r1, r4
 8002d80:	1a51      	subs	r1, r2, r1
 8002d82:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d84:	4629      	mov	r1, r5
 8002d86:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002d98:	4649      	mov	r1, r9
 8002d9a:	018b      	lsls	r3, r1, #6
 8002d9c:	4641      	mov	r1, r8
 8002d9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002da2:	4641      	mov	r1, r8
 8002da4:	018a      	lsls	r2, r1, #6
 8002da6:	4641      	mov	r1, r8
 8002da8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002dac:	4649      	mov	r1, r9
 8002dae:	eb63 0b01 	sbc.w	fp, r3, r1
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	469b      	mov	fp, r3
 8002dca:	4623      	mov	r3, r4
 8002dcc:	eb1a 0303 	adds.w	r3, sl, r3
 8002dd0:	623b      	str	r3, [r7, #32]
 8002dd2:	462b      	mov	r3, r5
 8002dd4:	eb4b 0303 	adc.w	r3, fp, r3
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002de6:	4629      	mov	r1, r5
 8002de8:	028b      	lsls	r3, r1, #10
 8002dea:	4621      	mov	r1, r4
 8002dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002df0:	4621      	mov	r1, r4
 8002df2:	028a      	lsls	r2, r1, #10
 8002df4:	4610      	mov	r0, r2
 8002df6:	4619      	mov	r1, r3
 8002df8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	673b      	str	r3, [r7, #112]	; 0x70
 8002e00:	677a      	str	r2, [r7, #116]	; 0x74
 8002e02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002e06:	f7fd f9fd 	bl	8000204 <__aeabi_uldivmod>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	4613      	mov	r3, r2
 8002e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e14:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	0c1b      	lsrs	r3, r3, #16
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e36:	e0eb      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e38:	4b38      	ldr	r3, [pc, #224]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e44:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d06b      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e50:	4b32      	ldr	r3, [pc, #200]	; (8002f1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	099b      	lsrs	r3, r3, #6
 8002e56:	2200      	movs	r2, #0
 8002e58:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e62:	663b      	str	r3, [r7, #96]	; 0x60
 8002e64:	2300      	movs	r3, #0
 8002e66:	667b      	str	r3, [r7, #100]	; 0x64
 8002e68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002e6c:	4622      	mov	r2, r4
 8002e6e:	462b      	mov	r3, r5
 8002e70:	f04f 0000 	mov.w	r0, #0
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	0159      	lsls	r1, r3, #5
 8002e7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e7e:	0150      	lsls	r0, r2, #5
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4621      	mov	r1, r4
 8002e86:	1a51      	subs	r1, r2, r1
 8002e88:	61b9      	str	r1, [r7, #24]
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	eb63 0301 	sbc.w	r3, r3, r1
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e9e:	4659      	mov	r1, fp
 8002ea0:	018b      	lsls	r3, r1, #6
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ea8:	4651      	mov	r1, sl
 8002eaa:	018a      	lsls	r2, r1, #6
 8002eac:	4651      	mov	r1, sl
 8002eae:	ebb2 0801 	subs.w	r8, r2, r1
 8002eb2:	4659      	mov	r1, fp
 8002eb4:	eb63 0901 	sbc.w	r9, r3, r1
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ec4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ec8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ecc:	4690      	mov	r8, r2
 8002ece:	4699      	mov	r9, r3
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	eb18 0303 	adds.w	r3, r8, r3
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	462b      	mov	r3, r5
 8002eda:	eb49 0303 	adc.w	r3, r9, r3
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002eec:	4629      	mov	r1, r5
 8002eee:	024b      	lsls	r3, r1, #9
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	024a      	lsls	r2, r1, #9
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f02:	2200      	movs	r2, #0
 8002f04:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f06:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002f08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f0c:	f7fd f97a 	bl	8000204 <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4613      	mov	r3, r2
 8002f16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f1a:	e065      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x420>
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	00f42400 	.word	0x00f42400
 8002f24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f28:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	4611      	mov	r1, r2
 8002f34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f38:	653b      	str	r3, [r7, #80]	; 0x50
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	657b      	str	r3, [r7, #84]	; 0x54
 8002f3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002f42:	4642      	mov	r2, r8
 8002f44:	464b      	mov	r3, r9
 8002f46:	f04f 0000 	mov.w	r0, #0
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	0159      	lsls	r1, r3, #5
 8002f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f54:	0150      	lsls	r0, r2, #5
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4641      	mov	r1, r8
 8002f5c:	1a51      	subs	r1, r2, r1
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	4649      	mov	r1, r9
 8002f62:	eb63 0301 	sbc.w	r3, r3, r1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f74:	4659      	mov	r1, fp
 8002f76:	018b      	lsls	r3, r1, #6
 8002f78:	4651      	mov	r1, sl
 8002f7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f7e:	4651      	mov	r1, sl
 8002f80:	018a      	lsls	r2, r1, #6
 8002f82:	4651      	mov	r1, sl
 8002f84:	1a54      	subs	r4, r2, r1
 8002f86:	4659      	mov	r1, fp
 8002f88:	eb63 0501 	sbc.w	r5, r3, r1
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	00eb      	lsls	r3, r5, #3
 8002f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f9a:	00e2      	lsls	r2, r4, #3
 8002f9c:	4614      	mov	r4, r2
 8002f9e:	461d      	mov	r5, r3
 8002fa0:	4643      	mov	r3, r8
 8002fa2:	18e3      	adds	r3, r4, r3
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	464b      	mov	r3, r9
 8002fa8:	eb45 0303 	adc.w	r3, r5, r3
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	f04f 0200 	mov.w	r2, #0
 8002fb2:	f04f 0300 	mov.w	r3, #0
 8002fb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fba:	4629      	mov	r1, r5
 8002fbc:	028b      	lsls	r3, r1, #10
 8002fbe:	4621      	mov	r1, r4
 8002fc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	028a      	lsls	r2, r1, #10
 8002fc8:	4610      	mov	r0, r2
 8002fca:	4619      	mov	r1, r3
 8002fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fd4:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002fd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fda:	f7fd f913 	bl	8000204 <__aeabi_uldivmod>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fe8:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	0f1b      	lsrs	r3, r3, #28
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002ff6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ffa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003006:	e003      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_RCC_GetSysClockFreq+0x45c>)
 800300a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800300e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003010:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003014:	4618      	mov	r0, r3
 8003016:	37b8      	adds	r7, #184	; 0xb8
 8003018:	46bd      	mov	sp, r7
 800301a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	00f42400 	.word	0x00f42400

08003028 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e28d      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8083 	beq.w	800314e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003048:	4b94      	ldr	r3, [pc, #592]	; (800329c <HAL_RCC_OscConfig+0x274>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b04      	cmp	r3, #4
 8003052:	d019      	beq.n	8003088 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003054:	4b91      	ldr	r3, [pc, #580]	; (800329c <HAL_RCC_OscConfig+0x274>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800305c:	2b08      	cmp	r3, #8
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003060:	4b8e      	ldr	r3, [pc, #568]	; (800329c <HAL_RCC_OscConfig+0x274>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800306c:	d00c      	beq.n	8003088 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306e:	4b8b      	ldr	r3, [pc, #556]	; (800329c <HAL_RCC_OscConfig+0x274>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d112      	bne.n	80030a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307a:	4b88      	ldr	r3, [pc, #544]	; (800329c <HAL_RCC_OscConfig+0x274>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003086:	d10b      	bne.n	80030a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003088:	4b84      	ldr	r3, [pc, #528]	; (800329c <HAL_RCC_OscConfig+0x274>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d05b      	beq.n	800314c <HAL_RCC_OscConfig+0x124>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d157      	bne.n	800314c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e25a      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a8:	d106      	bne.n	80030b8 <HAL_RCC_OscConfig+0x90>
 80030aa:	4b7c      	ldr	r3, [pc, #496]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a7b      	ldr	r2, [pc, #492]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80030b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e01d      	b.n	80030f4 <HAL_RCC_OscConfig+0xcc>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0xb4>
 80030c2:	4b76      	ldr	r3, [pc, #472]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a75      	ldr	r2, [pc, #468]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80030c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b73      	ldr	r3, [pc, #460]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a72      	ldr	r2, [pc, #456]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0xcc>
 80030dc:	4b6f      	ldr	r3, [pc, #444]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a6e      	ldr	r2, [pc, #440]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80030e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	4b6c      	ldr	r3, [pc, #432]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6b      	ldr	r2, [pc, #428]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80030ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d013      	beq.n	8003124 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fc:	f7fe fd60 	bl	8001bc0 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003104:	f7fe fd5c 	bl	8001bc0 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	; 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e21f      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	4b61      	ldr	r3, [pc, #388]	; (800329c <HAL_RCC_OscConfig+0x274>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0xdc>
 8003122:	e014      	b.n	800314e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003124:	f7fe fd4c 	bl	8001bc0 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312a:	e008      	b.n	800313e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800312c:	f7fe fd48 	bl	8001bc0 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	2b64      	cmp	r3, #100	; 0x64
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e20b      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	4b57      	ldr	r3, [pc, #348]	; (800329c <HAL_RCC_OscConfig+0x274>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f0      	bne.n	800312c <HAL_RCC_OscConfig+0x104>
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d06f      	beq.n	800323a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800315a:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCC_OscConfig+0x274>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b00      	cmp	r3, #0
 8003164:	d017      	beq.n	8003196 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003166:	4b4d      	ldr	r3, [pc, #308]	; (800329c <HAL_RCC_OscConfig+0x274>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800316e:	2b08      	cmp	r3, #8
 8003170:	d105      	bne.n	800317e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003172:	4b4a      	ldr	r3, [pc, #296]	; (800329c <HAL_RCC_OscConfig+0x274>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b47      	ldr	r3, [pc, #284]	; (800329c <HAL_RCC_OscConfig+0x274>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d11c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318a:	4b44      	ldr	r3, [pc, #272]	; (800329c <HAL_RCC_OscConfig+0x274>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d116      	bne.n	80031c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003196:	4b41      	ldr	r3, [pc, #260]	; (800329c <HAL_RCC_OscConfig+0x274>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d005      	beq.n	80031ae <HAL_RCC_OscConfig+0x186>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d001      	beq.n	80031ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e1d3      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ae:	4b3b      	ldr	r3, [pc, #236]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	4937      	ldr	r1, [pc, #220]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	e03a      	b.n	800323a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031cc:	4b34      	ldr	r3, [pc, #208]	; (80032a0 <HAL_RCC_OscConfig+0x278>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d2:	f7fe fcf5 	bl	8001bc0 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031da:	f7fe fcf1 	bl	8001bc0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e1b4      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ec:	4b2b      	ldr	r3, [pc, #172]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f8:	4b28      	ldr	r3, [pc, #160]	; (800329c <HAL_RCC_OscConfig+0x274>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	4925      	ldr	r1, [pc, #148]	; (800329c <HAL_RCC_OscConfig+0x274>)
 8003208:	4313      	orrs	r3, r2
 800320a:	600b      	str	r3, [r1, #0]
 800320c:	e015      	b.n	800323a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <HAL_RCC_OscConfig+0x278>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fcd4 	bl	8001bc0 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800321c:	f7fe fcd0 	bl	8001bc0 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e193      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x274>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d036      	beq.n	80032b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324e:	4b15      	ldr	r3, [pc, #84]	; (80032a4 <HAL_RCC_OscConfig+0x27c>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fe fcb4 	bl	8001bc0 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800325c:	f7fe fcb0 	bl	8001bc0 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e173      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_RCC_OscConfig+0x274>)
 8003270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0x234>
 800327a:	e01b      	b.n	80032b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCC_OscConfig+0x27c>)
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003282:	f7fe fc9d 	bl	8001bc0 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003288:	e00e      	b.n	80032a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800328a:	f7fe fc99 	bl	8001bc0 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d907      	bls.n	80032a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e15c      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
 800329c:	40023800 	.word	0x40023800
 80032a0:	42470000 	.word	0x42470000
 80032a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	4b8a      	ldr	r3, [pc, #552]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80032aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1ea      	bne.n	800328a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0304 	and.w	r3, r3, #4
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8097 	beq.w	80033f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c6:	4b83      	ldr	r3, [pc, #524]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10f      	bne.n	80032f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	4b7f      	ldr	r3, [pc, #508]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	4a7e      	ldr	r2, [pc, #504]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80032dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6413      	str	r3, [r2, #64]	; 0x40
 80032e2:	4b7c      	ldr	r3, [pc, #496]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ea:	60bb      	str	r3, [r7, #8]
 80032ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f2:	4b79      	ldr	r3, [pc, #484]	; (80034d8 <HAL_RCC_OscConfig+0x4b0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d118      	bne.n	8003330 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032fe:	4b76      	ldr	r3, [pc, #472]	; (80034d8 <HAL_RCC_OscConfig+0x4b0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a75      	ldr	r2, [pc, #468]	; (80034d8 <HAL_RCC_OscConfig+0x4b0>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800330a:	f7fe fc59 	bl	8001bc0 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003312:	f7fe fc55 	bl	8001bc0 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e118      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003324:	4b6c      	ldr	r3, [pc, #432]	; (80034d8 <HAL_RCC_OscConfig+0x4b0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0f0      	beq.n	8003312 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x31e>
 8003338:	4b66      	ldr	r3, [pc, #408]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800333a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333c:	4a65      	ldr	r2, [pc, #404]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	6713      	str	r3, [r2, #112]	; 0x70
 8003344:	e01c      	b.n	8003380 <HAL_RCC_OscConfig+0x358>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x340>
 800334e:	4b61      	ldr	r3, [pc, #388]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	4a60      	ldr	r2, [pc, #384]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 8003354:	f043 0304 	orr.w	r3, r3, #4
 8003358:	6713      	str	r3, [r2, #112]	; 0x70
 800335a:	4b5e      	ldr	r3, [pc, #376]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a5d      	ldr	r2, [pc, #372]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
 8003366:	e00b      	b.n	8003380 <HAL_RCC_OscConfig+0x358>
 8003368:	4b5a      	ldr	r3, [pc, #360]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	4a59      	ldr	r2, [pc, #356]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	6713      	str	r3, [r2, #112]	; 0x70
 8003374:	4b57      	ldr	r3, [pc, #348]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003378:	4a56      	ldr	r2, [pc, #344]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800337a:	f023 0304 	bic.w	r3, r3, #4
 800337e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d015      	beq.n	80033b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003388:	f7fe fc1a 	bl	8001bc0 <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003390:	f7fe fc16 	bl	8001bc0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e0d7      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a6:	4b4b      	ldr	r3, [pc, #300]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ee      	beq.n	8003390 <HAL_RCC_OscConfig+0x368>
 80033b2:	e014      	b.n	80033de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe fc04 	bl	8001bc0 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ba:	e00a      	b.n	80033d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033bc:	f7fe fc00 	bl	8001bc0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e0c1      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d2:	4b40      	ldr	r3, [pc, #256]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1ee      	bne.n	80033bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e4:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80033e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e8:	4a3a      	ldr	r2, [pc, #232]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80033ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80ad 	beq.w	8003554 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033fa:	4b36      	ldr	r3, [pc, #216]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b08      	cmp	r3, #8
 8003404:	d060      	beq.n	80034c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d145      	bne.n	800349a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340e:	4b33      	ldr	r3, [pc, #204]	; (80034dc <HAL_RCC_OscConfig+0x4b4>)
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe fbd4 	bl	8001bc0 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341c:	f7fe fbd0 	bl	8001bc0 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e093      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342e:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	3b01      	subs	r3, #1
 8003454:	041b      	lsls	r3, r3, #16
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	061b      	lsls	r3, r3, #24
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	071b      	lsls	r3, r3, #28
 8003466:	491b      	ldr	r1, [pc, #108]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x4b4>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fe fba5 	bl	8001bc0 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800347a:	f7fe fba1 	bl	8001bc0 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e064      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800348c:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x452>
 8003498:	e05c      	b.n	8003554 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_RCC_OscConfig+0x4b4>)
 800349c:	2200      	movs	r2, #0
 800349e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a0:	f7fe fb8e 	bl	8001bc0 <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a8:	f7fe fb8a 	bl	8001bc0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e04d      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ba:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1f0      	bne.n	80034a8 <HAL_RCC_OscConfig+0x480>
 80034c6:	e045      	b.n	8003554 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d107      	bne.n	80034e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e040      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
 80034d4:	40023800 	.word	0x40023800
 80034d8:	40007000 	.word	0x40007000
 80034dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e0:	4b1f      	ldr	r3, [pc, #124]	; (8003560 <HAL_RCC_OscConfig+0x538>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d030      	beq.n	8003550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d129      	bne.n	8003550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d122      	bne.n	8003550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003510:	4013      	ands	r3, r2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003516:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003518:	4293      	cmp	r3, r2
 800351a:	d119      	bne.n	8003550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	3b01      	subs	r3, #1
 800352a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d10f      	bne.n	8003550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d107      	bne.n	8003550 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800

08003564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e07b      	b.n	800366e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	2b00      	cmp	r3, #0
 800357c:	d108      	bne.n	8003590 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003586:	d009      	beq.n	800359c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	61da      	str	r2, [r3, #28]
 800358e:	e005      	b.n	800359c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fd ff28 	bl	800140c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ee:	431a      	orrs	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	ea42 0103 	orr.w	r1, r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003628:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	f003 0104 	and.w	r1, r3, #4
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	f003 0210 	and.w	r2, r3, #16
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	69da      	ldr	r2, [r3, #28]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800365c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b088      	sub	sp, #32
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_SPI_Transmit+0x22>
 8003694:	2302      	movs	r3, #2
 8003696:	e126      	b.n	80038e6 <HAL_SPI_Transmit+0x270>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036a0:	f7fe fa8e 	bl	8001bc0 <HAL_GetTick>
 80036a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d002      	beq.n	80036bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80036b6:	2302      	movs	r3, #2
 80036b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036ba:	e10b      	b.n	80038d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_SPI_Transmit+0x52>
 80036c2:	88fb      	ldrh	r3, [r7, #6]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036cc:	e102      	b.n	80038d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2203      	movs	r2, #3
 80036d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	88fa      	ldrh	r2, [r7, #6]
 80036e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003714:	d10f      	bne.n	8003736 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003724:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003734:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003740:	2b40      	cmp	r3, #64	; 0x40
 8003742:	d007      	beq.n	8003754 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800375c:	d14b      	bne.n	80037f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <HAL_SPI_Transmit+0xf6>
 8003766:	8afb      	ldrh	r3, [r7, #22]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d13e      	bne.n	80037ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003770:	881a      	ldrh	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	1c9a      	adds	r2, r3, #2
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003790:	e02b      	b.n	80037ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b02      	cmp	r3, #2
 800379e:	d112      	bne.n	80037c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	881a      	ldrh	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	1c9a      	adds	r2, r3, #2
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	3b01      	subs	r3, #1
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80037c4:	e011      	b.n	80037ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037c6:	f7fe f9fb 	bl	8001bc0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d803      	bhi.n	80037de <HAL_SPI_Transmit+0x168>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037dc:	d102      	bne.n	80037e4 <HAL_SPI_Transmit+0x16e>
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037e8:	e074      	b.n	80038d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ce      	bne.n	8003792 <HAL_SPI_Transmit+0x11c>
 80037f4:	e04c      	b.n	8003890 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <HAL_SPI_Transmit+0x18e>
 80037fe:	8afb      	ldrh	r3, [r7, #22]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d140      	bne.n	8003886 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	330c      	adds	r3, #12
 800380e:	7812      	ldrb	r2, [r2, #0]
 8003810:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	1c5a      	adds	r2, r3, #1
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003820:	b29b      	uxth	r3, r3
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800382a:	e02c      	b.n	8003886 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d113      	bne.n	8003862 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	330c      	adds	r3, #12
 8003844:	7812      	ldrb	r2, [r2, #0]
 8003846:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	1c5a      	adds	r2, r3, #1
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003860:	e011      	b.n	8003886 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003862:	f7fe f9ad 	bl	8001bc0 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d803      	bhi.n	800387a <HAL_SPI_Transmit+0x204>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d102      	bne.n	8003880 <HAL_SPI_Transmit+0x20a>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003884:	e026      	b.n	80038d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388a:	b29b      	uxth	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1cd      	bne.n	800382c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	6839      	ldr	r1, [r7, #0]
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f8b3 	bl	8003a00 <SPI_EndRxTxTransaction>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e000      	b.n	80038d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80038d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	603b      	str	r3, [r7, #0]
 80038fc:	4613      	mov	r3, r2
 80038fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003900:	f7fe f95e 	bl	8001bc0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	4413      	add	r3, r2
 800390e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003910:	f7fe f956 	bl	8001bc0 <HAL_GetTick>
 8003914:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	015b      	lsls	r3, r3, #5
 800391c:	0d1b      	lsrs	r3, r3, #20
 800391e:	69fa      	ldr	r2, [r7, #28]
 8003920:	fb02 f303 	mul.w	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003926:	e054      	b.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392e:	d050      	beq.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003930:	f7fe f946 	bl	8001bc0 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	429a      	cmp	r2, r3
 800393e:	d902      	bls.n	8003946 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d13d      	bne.n	80039c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003954:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800395e:	d111      	bne.n	8003984 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003968:	d004      	beq.n	8003974 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003972:	d107      	bne.n	8003984 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003982:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398c:	d10f      	bne.n	80039ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800399c:	601a      	str	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e017      	b.n	80039f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4013      	ands	r3, r2
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	429a      	cmp	r2, r3
 80039e0:	bf0c      	ite	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	2300      	movne	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d19b      	bne.n	8003928 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	20000000 	.word	0x20000000

08003a00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af02      	add	r7, sp, #8
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <SPI_EndRxTxTransaction+0x7c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1b      	ldr	r2, [pc, #108]	; (8003a80 <SPI_EndRxTxTransaction+0x80>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	0d5b      	lsrs	r3, r3, #21
 8003a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a2a:	d112      	bne.n	8003a52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2200      	movs	r2, #0
 8003a34:	2180      	movs	r1, #128	; 0x80
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f7ff ff5a 	bl	80038f0 <SPI_WaitFlagStateUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d016      	beq.n	8003a70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e00f      	b.n	8003a72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	2b80      	cmp	r3, #128	; 0x80
 8003a6a:	d0f2      	beq.n	8003a52 <SPI_EndRxTxTransaction+0x52>
 8003a6c:	e000      	b.n	8003a70 <SPI_EndRxTxTransaction+0x70>
        break;
 8003a6e:	bf00      	nop
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	165e9f81 	.word	0x165e9f81

08003a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e041      	b.n	8003b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fd fe66 	bl	800177c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f000 f9e4 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e041      	b.n	8003bb8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d106      	bne.n	8003b4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fd fdc9 	bl	80016e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2202      	movs	r2, #2
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4610      	mov	r0, r2
 8003b62:	f000 f995 	bl	8003e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b086      	sub	sp, #24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e097      	b.n	8003d04 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d106      	bne.n	8003bee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7fd fd11 	bl	8001610 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c04:	f023 0307 	bic.w	r3, r3, #7
 8003c08:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	4610      	mov	r0, r2
 8003c16:	f000 f93b 	bl	8003e90 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c42:	f023 0303 	bic.w	r3, r3, #3
 8003c46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	021b      	lsls	r3, r3, #8
 8003c52:	4313      	orrs	r3, r2
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c60:	f023 030c 	bic.w	r3, r3, #12
 8003c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	021b      	lsls	r3, r3, #8
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	011a      	lsls	r2, r3, #4
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	031b      	lsls	r3, r3, #12
 8003c90:	4313      	orrs	r3, r2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c9e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003ca6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d02:	2300      	movs	r3, #0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0ae      	b.n	8003e88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	f200 809f 	bhi.w	8003e78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d3a:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d40:	08003d75 	.word	0x08003d75
 8003d44:	08003e79 	.word	0x08003e79
 8003d48:	08003e79 	.word	0x08003e79
 8003d4c:	08003e79 	.word	0x08003e79
 8003d50:	08003db5 	.word	0x08003db5
 8003d54:	08003e79 	.word	0x08003e79
 8003d58:	08003e79 	.word	0x08003e79
 8003d5c:	08003e79 	.word	0x08003e79
 8003d60:	08003df7 	.word	0x08003df7
 8003d64:	08003e79 	.word	0x08003e79
 8003d68:	08003e79 	.word	0x08003e79
 8003d6c:	08003e79 	.word	0x08003e79
 8003d70:	08003e37 	.word	0x08003e37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f928 	bl	8003fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699a      	ldr	r2, [r3, #24]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0208 	orr.w	r2, r2, #8
 8003d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6999      	ldr	r1, [r3, #24]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	619a      	str	r2, [r3, #24]
      break;
 8003db2:	e064      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 f978 	bl	80040b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699a      	ldr	r2, [r3, #24]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6999      	ldr	r1, [r3, #24]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	619a      	str	r2, [r3, #24]
      break;
 8003df4:	e043      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f9cd 	bl	800419c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69da      	ldr	r2, [r3, #28]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f042 0208 	orr.w	r2, r2, #8
 8003e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0204 	bic.w	r2, r2, #4
 8003e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69d9      	ldr	r1, [r3, #28]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	691a      	ldr	r2, [r3, #16]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	61da      	str	r2, [r3, #28]
      break;
 8003e34:	e023      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fa21 	bl	8004284 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69da      	ldr	r2, [r3, #28]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69d9      	ldr	r1, [r3, #28]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	021a      	lsls	r2, r3, #8
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	61da      	str	r2, [r3, #28]
      break;
 8003e76:	e002      	b.n	8003e7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a40      	ldr	r2, [pc, #256]	; (8003fa4 <TIM_Base_SetConfig+0x114>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d013      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eae:	d00f      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3d      	ldr	r2, [pc, #244]	; (8003fa8 <TIM_Base_SetConfig+0x118>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00b      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a3c      	ldr	r2, [pc, #240]	; (8003fac <TIM_Base_SetConfig+0x11c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d007      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a3b      	ldr	r2, [pc, #236]	; (8003fb0 <TIM_Base_SetConfig+0x120>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_Base_SetConfig+0x40>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a3a      	ldr	r2, [pc, #232]	; (8003fb4 <TIM_Base_SetConfig+0x124>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d108      	bne.n	8003ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a2f      	ldr	r2, [pc, #188]	; (8003fa4 <TIM_Base_SetConfig+0x114>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02b      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef0:	d027      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2c      	ldr	r2, [pc, #176]	; (8003fa8 <TIM_Base_SetConfig+0x118>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d023      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a2b      	ldr	r2, [pc, #172]	; (8003fac <TIM_Base_SetConfig+0x11c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01f      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2a      	ldr	r2, [pc, #168]	; (8003fb0 <TIM_Base_SetConfig+0x120>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01b      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a29      	ldr	r2, [pc, #164]	; (8003fb4 <TIM_Base_SetConfig+0x124>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d017      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a28      	ldr	r2, [pc, #160]	; (8003fb8 <TIM_Base_SetConfig+0x128>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d013      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a27      	ldr	r2, [pc, #156]	; (8003fbc <TIM_Base_SetConfig+0x12c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00f      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <TIM_Base_SetConfig+0x130>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00b      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <TIM_Base_SetConfig+0x134>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <TIM_Base_SetConfig+0x138>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d003      	beq.n	8003f42 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <TIM_Base_SetConfig+0x13c>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d108      	bne.n	8003f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <TIM_Base_SetConfig+0x114>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_Base_SetConfig+0xf8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a0c      	ldr	r2, [pc, #48]	; (8003fb4 <TIM_Base_SetConfig+0x124>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d103      	bne.n	8003f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	615a      	str	r2, [r3, #20]
}
 8003f96:	bf00      	nop
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40010000 	.word	0x40010000
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800
 8003fb0:	40000c00 	.word	0x40000c00
 8003fb4:	40010400 	.word	0x40010400
 8003fb8:	40014000 	.word	0x40014000
 8003fbc:	40014400 	.word	0x40014400
 8003fc0:	40014800 	.word	0x40014800
 8003fc4:	40001800 	.word	0x40001800
 8003fc8:	40001c00 	.word	0x40001c00
 8003fcc:	40002000 	.word	0x40002000

08003fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0201 	bic.w	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0303 	bic.w	r3, r3, #3
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 0302 	bic.w	r3, r3, #2
 8004018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <TIM_OC1_SetConfig+0xd8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d003      	beq.n	8004034 <TIM_OC1_SetConfig+0x64>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a1f      	ldr	r2, [pc, #124]	; (80040ac <TIM_OC1_SetConfig+0xdc>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d10c      	bne.n	800404e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0308 	bic.w	r3, r3, #8
 800403a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	4313      	orrs	r3, r2
 8004044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f023 0304 	bic.w	r3, r3, #4
 800404c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a15      	ldr	r2, [pc, #84]	; (80040a8 <TIM_OC1_SetConfig+0xd8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d003      	beq.n	800405e <TIM_OC1_SetConfig+0x8e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a14      	ldr	r2, [pc, #80]	; (80040ac <TIM_OC1_SetConfig+0xdc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d111      	bne.n	8004082 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800406c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	693a      	ldr	r2, [r7, #16]
 8004086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	621a      	str	r2, [r3, #32]
}
 800409c:	bf00      	nop
 800409e:	371c      	adds	r7, #28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40010400 	.word	0x40010400

080040b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0210 	bic.w	r2, r3, #16
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	021b      	lsls	r3, r3, #8
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f023 0320 	bic.w	r3, r3, #32
 80040fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a22      	ldr	r2, [pc, #136]	; (8004194 <TIM_OC2_SetConfig+0xe4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d003      	beq.n	8004118 <TIM_OC2_SetConfig+0x68>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a21      	ldr	r2, [pc, #132]	; (8004198 <TIM_OC2_SetConfig+0xe8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d10d      	bne.n	8004134 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004132:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a17      	ldr	r2, [pc, #92]	; (8004194 <TIM_OC2_SetConfig+0xe4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_OC2_SetConfig+0x94>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a16      	ldr	r2, [pc, #88]	; (8004198 <TIM_OC2_SetConfig+0xe8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d113      	bne.n	800416c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800414a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	621a      	str	r2, [r3, #32]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40010000 	.word	0x40010000
 8004198:	40010400 	.word	0x40010400

0800419c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69db      	ldr	r3, [r3, #28]
 80041c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0303 	bic.w	r3, r3, #3
 80041d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a21      	ldr	r2, [pc, #132]	; (800427c <TIM_OC3_SetConfig+0xe0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <TIM_OC3_SetConfig+0x66>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a20      	ldr	r2, [pc, #128]	; (8004280 <TIM_OC3_SetConfig+0xe4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10d      	bne.n	800421e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800421c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a16      	ldr	r2, [pc, #88]	; (800427c <TIM_OC3_SetConfig+0xe0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d003      	beq.n	800422e <TIM_OC3_SetConfig+0x92>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a15      	ldr	r2, [pc, #84]	; (8004280 <TIM_OC3_SetConfig+0xe4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d113      	bne.n	8004256 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800423c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40010000 	.word	0x40010000
 8004280:	40010400 	.word	0x40010400

08004284 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	031b      	lsls	r3, r3, #12
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a12      	ldr	r2, [pc, #72]	; (8004328 <TIM_OC4_SetConfig+0xa4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_OC4_SetConfig+0x68>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a11      	ldr	r2, [pc, #68]	; (800432c <TIM_OC4_SetConfig+0xa8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d109      	bne.n	8004300 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	019b      	lsls	r3, r3, #6
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40010000 	.word	0x40010000
 800432c:	40010400 	.word	0x40010400

08004330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004344:	2302      	movs	r3, #2
 8004346:	e05a      	b.n	80043fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	4313      	orrs	r3, r2
 8004378:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a21      	ldr	r2, [pc, #132]	; (800440c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d022      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d01d      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d018      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d013      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1a      	ldr	r2, [pc, #104]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00e      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d009      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a17      	ldr	r2, [pc, #92]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d004      	beq.n	80043d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a15      	ldr	r2, [pc, #84]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d10c      	bne.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40000400 	.word	0x40000400
 8004414:	40000800 	.word	0x40000800
 8004418:	40000c00 	.word	0x40000c00
 800441c:	40010400 	.word	0x40010400
 8004420:	40014000 	.word	0x40014000
 8004424:	40001800 	.word	0x40001800

08004428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e03f      	b.n	80044ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd fa64 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2224      	movs	r2, #36	; 0x24
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800446a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f829 	bl	80044c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695a      	ldr	r2, [r3, #20]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68da      	ldr	r2, [r3, #12]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044c8:	b0c0      	sub	sp, #256	; 0x100
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	68d9      	ldr	r1, [r3, #12]
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	ea40 0301 	orr.w	r3, r0, r1
 80044ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	431a      	orrs	r2, r3
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800451c:	f021 010c 	bic.w	r1, r1, #12
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800452a:	430b      	orrs	r3, r1
 800452c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800453a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800453e:	6999      	ldr	r1, [r3, #24]
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	ea40 0301 	orr.w	r3, r0, r1
 800454a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800454c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b8f      	ldr	r3, [pc, #572]	; (8004790 <UART_SetConfig+0x2cc>)
 8004554:	429a      	cmp	r2, r3
 8004556:	d005      	beq.n	8004564 <UART_SetConfig+0xa0>
 8004558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b8d      	ldr	r3, [pc, #564]	; (8004794 <UART_SetConfig+0x2d0>)
 8004560:	429a      	cmp	r2, r3
 8004562:	d104      	bne.n	800456e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7fe fb1c 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8004568:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800456c:	e003      	b.n	8004576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800456e:	f7fe fb03 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 8004572:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004580:	f040 810c 	bne.w	800479c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004588:	2200      	movs	r2, #0
 800458a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800458e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004596:	4622      	mov	r2, r4
 8004598:	462b      	mov	r3, r5
 800459a:	1891      	adds	r1, r2, r2
 800459c:	65b9      	str	r1, [r7, #88]	; 0x58
 800459e:	415b      	adcs	r3, r3
 80045a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045a6:	4621      	mov	r1, r4
 80045a8:	eb12 0801 	adds.w	r8, r2, r1
 80045ac:	4629      	mov	r1, r5
 80045ae:	eb43 0901 	adc.w	r9, r3, r1
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	f04f 0300 	mov.w	r3, #0
 80045ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045c6:	4690      	mov	r8, r2
 80045c8:	4699      	mov	r9, r3
 80045ca:	4623      	mov	r3, r4
 80045cc:	eb18 0303 	adds.w	r3, r8, r3
 80045d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045d4:	462b      	mov	r3, r5
 80045d6:	eb49 0303 	adc.w	r3, r9, r3
 80045da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80045ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80045f2:	460b      	mov	r3, r1
 80045f4:	18db      	adds	r3, r3, r3
 80045f6:	653b      	str	r3, [r7, #80]	; 0x50
 80045f8:	4613      	mov	r3, r2
 80045fa:	eb42 0303 	adc.w	r3, r2, r3
 80045fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004608:	f7fb fdfc 	bl	8000204 <__aeabi_uldivmod>
 800460c:	4602      	mov	r2, r0
 800460e:	460b      	mov	r3, r1
 8004610:	4b61      	ldr	r3, [pc, #388]	; (8004798 <UART_SetConfig+0x2d4>)
 8004612:	fba3 2302 	umull	r2, r3, r3, r2
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	011c      	lsls	r4, r3, #4
 800461a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461e:	2200      	movs	r2, #0
 8004620:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004624:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800462c:	4642      	mov	r2, r8
 800462e:	464b      	mov	r3, r9
 8004630:	1891      	adds	r1, r2, r2
 8004632:	64b9      	str	r1, [r7, #72]	; 0x48
 8004634:	415b      	adcs	r3, r3
 8004636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800463c:	4641      	mov	r1, r8
 800463e:	eb12 0a01 	adds.w	sl, r2, r1
 8004642:	4649      	mov	r1, r9
 8004644:	eb43 0b01 	adc.w	fp, r3, r1
 8004648:	f04f 0200 	mov.w	r2, #0
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465c:	4692      	mov	sl, r2
 800465e:	469b      	mov	fp, r3
 8004660:	4643      	mov	r3, r8
 8004662:	eb1a 0303 	adds.w	r3, sl, r3
 8004666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800466a:	464b      	mov	r3, r9
 800466c:	eb4b 0303 	adc.w	r3, fp, r3
 8004670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004680:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004688:	460b      	mov	r3, r1
 800468a:	18db      	adds	r3, r3, r3
 800468c:	643b      	str	r3, [r7, #64]	; 0x40
 800468e:	4613      	mov	r3, r2
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
 8004696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800469a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800469e:	f7fb fdb1 	bl	8000204 <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4611      	mov	r1, r2
 80046a8:	4b3b      	ldr	r3, [pc, #236]	; (8004798 <UART_SetConfig+0x2d4>)
 80046aa:	fba3 2301 	umull	r2, r3, r3, r1
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2264      	movs	r2, #100	; 0x64
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	1acb      	subs	r3, r1, r3
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046be:	4b36      	ldr	r3, [pc, #216]	; (8004798 <UART_SetConfig+0x2d4>)
 80046c0:	fba3 2302 	umull	r2, r3, r3, r2
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046cc:	441c      	add	r4, r3
 80046ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80046e0:	4642      	mov	r2, r8
 80046e2:	464b      	mov	r3, r9
 80046e4:	1891      	adds	r1, r2, r2
 80046e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80046e8:	415b      	adcs	r3, r3
 80046ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80046f0:	4641      	mov	r1, r8
 80046f2:	1851      	adds	r1, r2, r1
 80046f4:	6339      	str	r1, [r7, #48]	; 0x30
 80046f6:	4649      	mov	r1, r9
 80046f8:	414b      	adcs	r3, r1
 80046fa:	637b      	str	r3, [r7, #52]	; 0x34
 80046fc:	f04f 0200 	mov.w	r2, #0
 8004700:	f04f 0300 	mov.w	r3, #0
 8004704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004708:	4659      	mov	r1, fp
 800470a:	00cb      	lsls	r3, r1, #3
 800470c:	4651      	mov	r1, sl
 800470e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004712:	4651      	mov	r1, sl
 8004714:	00ca      	lsls	r2, r1, #3
 8004716:	4610      	mov	r0, r2
 8004718:	4619      	mov	r1, r3
 800471a:	4603      	mov	r3, r0
 800471c:	4642      	mov	r2, r8
 800471e:	189b      	adds	r3, r3, r2
 8004720:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004724:	464b      	mov	r3, r9
 8004726:	460a      	mov	r2, r1
 8004728:	eb42 0303 	adc.w	r3, r2, r3
 800472c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800473c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004744:	460b      	mov	r3, r1
 8004746:	18db      	adds	r3, r3, r3
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
 800474a:	4613      	mov	r3, r2
 800474c:	eb42 0303 	adc.w	r3, r2, r3
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800475a:	f7fb fd53 	bl	8000204 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <UART_SetConfig+0x2d4>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	; 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	3332      	adds	r3, #50	; 0x32
 8004776:	4a08      	ldr	r2, [pc, #32]	; (8004798 <UART_SetConfig+0x2d4>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4422      	add	r2, r4
 800478a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800478c:	e105      	b.n	800499a <UART_SetConfig+0x4d6>
 800478e:	bf00      	nop
 8004790:	40011000 	.word	0x40011000
 8004794:	40011400 	.word	0x40011400
 8004798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800479c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047ae:	4642      	mov	r2, r8
 80047b0:	464b      	mov	r3, r9
 80047b2:	1891      	adds	r1, r2, r2
 80047b4:	6239      	str	r1, [r7, #32]
 80047b6:	415b      	adcs	r3, r3
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047be:	4641      	mov	r1, r8
 80047c0:	1854      	adds	r4, r2, r1
 80047c2:	4649      	mov	r1, r9
 80047c4:	eb43 0501 	adc.w	r5, r3, r1
 80047c8:	f04f 0200 	mov.w	r2, #0
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	00eb      	lsls	r3, r5, #3
 80047d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047d6:	00e2      	lsls	r2, r4, #3
 80047d8:	4614      	mov	r4, r2
 80047da:	461d      	mov	r5, r3
 80047dc:	4643      	mov	r3, r8
 80047de:	18e3      	adds	r3, r4, r3
 80047e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047e4:	464b      	mov	r3, r9
 80047e6:	eb45 0303 	adc.w	r3, r5, r3
 80047ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800480a:	4629      	mov	r1, r5
 800480c:	008b      	lsls	r3, r1, #2
 800480e:	4621      	mov	r1, r4
 8004810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004814:	4621      	mov	r1, r4
 8004816:	008a      	lsls	r2, r1, #2
 8004818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800481c:	f7fb fcf2 	bl	8000204 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4b60      	ldr	r3, [pc, #384]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004826:	fba3 2302 	umull	r2, r3, r3, r2
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	011c      	lsls	r4, r3, #4
 800482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004832:	2200      	movs	r2, #0
 8004834:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004838:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800483c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004840:	4642      	mov	r2, r8
 8004842:	464b      	mov	r3, r9
 8004844:	1891      	adds	r1, r2, r2
 8004846:	61b9      	str	r1, [r7, #24]
 8004848:	415b      	adcs	r3, r3
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004850:	4641      	mov	r1, r8
 8004852:	1851      	adds	r1, r2, r1
 8004854:	6139      	str	r1, [r7, #16]
 8004856:	4649      	mov	r1, r9
 8004858:	414b      	adcs	r3, r1
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004868:	4659      	mov	r1, fp
 800486a:	00cb      	lsls	r3, r1, #3
 800486c:	4651      	mov	r1, sl
 800486e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004872:	4651      	mov	r1, sl
 8004874:	00ca      	lsls	r2, r1, #3
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	4603      	mov	r3, r0
 800487c:	4642      	mov	r2, r8
 800487e:	189b      	adds	r3, r3, r2
 8004880:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004884:	464b      	mov	r3, r9
 8004886:	460a      	mov	r2, r1
 8004888:	eb42 0303 	adc.w	r3, r2, r3
 800488c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	67bb      	str	r3, [r7, #120]	; 0x78
 800489a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048a8:	4649      	mov	r1, r9
 80048aa:	008b      	lsls	r3, r1, #2
 80048ac:	4641      	mov	r1, r8
 80048ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b2:	4641      	mov	r1, r8
 80048b4:	008a      	lsls	r2, r1, #2
 80048b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048ba:	f7fb fca3 	bl	8000204 <__aeabi_uldivmod>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	4b39      	ldr	r3, [pc, #228]	; (80049a8 <UART_SetConfig+0x4e4>)
 80048c4:	fba3 1302 	umull	r1, r3, r3, r2
 80048c8:	095b      	lsrs	r3, r3, #5
 80048ca:	2164      	movs	r1, #100	; 0x64
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	3332      	adds	r3, #50	; 0x32
 80048d6:	4a34      	ldr	r2, [pc, #208]	; (80049a8 <UART_SetConfig+0x4e4>)
 80048d8:	fba2 2303 	umull	r2, r3, r2, r3
 80048dc:	095b      	lsrs	r3, r3, #5
 80048de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048e2:	441c      	add	r4, r3
 80048e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e8:	2200      	movs	r2, #0
 80048ea:	673b      	str	r3, [r7, #112]	; 0x70
 80048ec:	677a      	str	r2, [r7, #116]	; 0x74
 80048ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80048f2:	4642      	mov	r2, r8
 80048f4:	464b      	mov	r3, r9
 80048f6:	1891      	adds	r1, r2, r2
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	415b      	adcs	r3, r3
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004902:	4641      	mov	r1, r8
 8004904:	1851      	adds	r1, r2, r1
 8004906:	6039      	str	r1, [r7, #0]
 8004908:	4649      	mov	r1, r9
 800490a:	414b      	adcs	r3, r1
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800491a:	4659      	mov	r1, fp
 800491c:	00cb      	lsls	r3, r1, #3
 800491e:	4651      	mov	r1, sl
 8004920:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004924:	4651      	mov	r1, sl
 8004926:	00ca      	lsls	r2, r1, #3
 8004928:	4610      	mov	r0, r2
 800492a:	4619      	mov	r1, r3
 800492c:	4603      	mov	r3, r0
 800492e:	4642      	mov	r2, r8
 8004930:	189b      	adds	r3, r3, r2
 8004932:	66bb      	str	r3, [r7, #104]	; 0x68
 8004934:	464b      	mov	r3, r9
 8004936:	460a      	mov	r2, r1
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	663b      	str	r3, [r7, #96]	; 0x60
 8004948:	667a      	str	r2, [r7, #100]	; 0x64
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004956:	4649      	mov	r1, r9
 8004958:	008b      	lsls	r3, r1, #2
 800495a:	4641      	mov	r1, r8
 800495c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004960:	4641      	mov	r1, r8
 8004962:	008a      	lsls	r2, r1, #2
 8004964:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004968:	f7fb fc4c 	bl	8000204 <__aeabi_uldivmod>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004972:	fba3 1302 	umull	r1, r3, r3, r2
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2164      	movs	r1, #100	; 0x64
 800497a:	fb01 f303 	mul.w	r3, r1, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	3332      	adds	r3, #50	; 0x32
 8004984:	4a08      	ldr	r2, [pc, #32]	; (80049a8 <UART_SetConfig+0x4e4>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	f003 020f 	and.w	r2, r3, #15
 8004990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4422      	add	r2, r4
 8004998:	609a      	str	r2, [r3, #8]
}
 800499a:	bf00      	nop
 800499c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049a0:	46bd      	mov	sp, r7
 80049a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049a6:	bf00      	nop
 80049a8:	51eb851f 	.word	0x51eb851f

080049ac <__libc_init_array>:
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	4d0d      	ldr	r5, [pc, #52]	; (80049e4 <__libc_init_array+0x38>)
 80049b0:	4c0d      	ldr	r4, [pc, #52]	; (80049e8 <__libc_init_array+0x3c>)
 80049b2:	1b64      	subs	r4, r4, r5
 80049b4:	10a4      	asrs	r4, r4, #2
 80049b6:	2600      	movs	r6, #0
 80049b8:	42a6      	cmp	r6, r4
 80049ba:	d109      	bne.n	80049d0 <__libc_init_array+0x24>
 80049bc:	4d0b      	ldr	r5, [pc, #44]	; (80049ec <__libc_init_array+0x40>)
 80049be:	4c0c      	ldr	r4, [pc, #48]	; (80049f0 <__libc_init_array+0x44>)
 80049c0:	f000 f820 	bl	8004a04 <_init>
 80049c4:	1b64      	subs	r4, r4, r5
 80049c6:	10a4      	asrs	r4, r4, #2
 80049c8:	2600      	movs	r6, #0
 80049ca:	42a6      	cmp	r6, r4
 80049cc:	d105      	bne.n	80049da <__libc_init_array+0x2e>
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d4:	4798      	blx	r3
 80049d6:	3601      	adds	r6, #1
 80049d8:	e7ee      	b.n	80049b8 <__libc_init_array+0xc>
 80049da:	f855 3b04 	ldr.w	r3, [r5], #4
 80049de:	4798      	blx	r3
 80049e0:	3601      	adds	r6, #1
 80049e2:	e7f2      	b.n	80049ca <__libc_init_array+0x1e>
 80049e4:	08004a44 	.word	0x08004a44
 80049e8:	08004a44 	.word	0x08004a44
 80049ec:	08004a44 	.word	0x08004a44
 80049f0:	08004a48 	.word	0x08004a48

080049f4 <memset>:
 80049f4:	4402      	add	r2, r0
 80049f6:	4603      	mov	r3, r0
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d100      	bne.n	80049fe <memset+0xa>
 80049fc:	4770      	bx	lr
 80049fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004a02:	e7f9      	b.n	80049f8 <memset+0x4>

08004a04 <_init>:
 8004a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a06:	bf00      	nop
 8004a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0a:	bc08      	pop	{r3}
 8004a0c:	469e      	mov	lr, r3
 8004a0e:	4770      	bx	lr

08004a10 <_fini>:
 8004a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a12:	bf00      	nop
 8004a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a16:	bc08      	pop	{r3}
 8004a18:	469e      	mov	lr, r3
 8004a1a:	4770      	bx	lr
